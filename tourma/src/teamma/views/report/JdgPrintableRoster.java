/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * jdgRoundReport.java
 *
 * Created on 28 juin 2010, 10:52:47
 */
package teamma.views.report;

import teamma.data.Player;
import freemarker.template.Configuration;
import freemarker.template.DefaultObjectWrapper;
import freemarker.template.Template;
import freemarker.template.TemplateException;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.print.PrinterException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.net.URI;
import java.net.URISyntaxException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import teamma.data.Roster;
import teamma.data.StarPlayer;
import tourma.*;
import tourma.data.Coach;
import tourma.data.Criteria;
import tourma.data.CoachMatch;
import teamma.data.RosterType;
import tourma.data.Round;
import tourma.data.Team;
import tourma.data.Tournament;
import tourma.tableModel.mjtMatchTeams;
import tourma.utility.StringConstants;

/**
 *
 * @author Frederic Berger
 */
public class JdgPrintableRoster extends javax.swing.JDialog {

    Roster mRoster;
    Coach mCoach;
    File mFilename = null;
    boolean mWithSkill = false;

    /**
     * Creates new form jdgRoundReport
     */
    public JdgPrintableRoster(final java.awt.Frame parent, final boolean modal, final Roster roster, final Coach coach, boolean withSkill) {
        super(parent, modal);
        initComponents();
        mRoster = roster;
        mCoach=coach;
        mWithSkill = withSkill;
        try {
            jepHTML.setContentType(java.util.ResourceBundle.getBundle("tourma/languages/language").getString("HTML"));
            mFilename = CreateReport();

            jepHTML.setPage(mFilename.toURI().toURL());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(parent, e.getLocalizedMessage());
        }
        this.setPreferredSize(new Dimension(800, 600));
        pack();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings({"unchecked", "PMD"})
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jbtOK = new javax.swing.JButton();
        jbtPrint = new javax.swing.JButton();
        jbtExport = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jepHTML = new javax.swing.JEditorPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);
        setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);

        jbtOK.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tourma/images/Select.png"))); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("tourma/languages/language"); // NOI18N
        jbtOK.setText(bundle.getString("OK")); // NOI18N
        jbtOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtOKActionPerformed(evt);
            }
        });
        jPanel1.add(jbtOK);

        jbtPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tourma/images/Document.png"))); // NOI18N
        jbtPrint.setText(bundle.getString("Print")); // NOI18N
        jbtPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtPrintActionPerformed(evt);
            }
        });
        jPanel1.add(jbtPrint);

        jbtExport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tourma/images/Html.png"))); // NOI18N
        jbtExport.setText(bundle.getString("HTMLExport")); // NOI18N
        jbtExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtExportActionPerformed(evt);
            }
        });
        jPanel1.add(jbtExport);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        jScrollPane1.setViewportView(jepHTML);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @SuppressWarnings({"PMD.UnusedFormalParameter", "PMD.MethodArgumentCouldBeFinal"})
    private void jbtOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtOKActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_jbtOKActionPerformed

    @SuppressWarnings({"PMD.UnusedFormalParameter", "PMD.MethodArgumentCouldBeFinal"})
    private void jbtPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtPrintActionPerformed
        try {
            jepHTML.print();

        } catch (PrinterException e) {
            JOptionPane.showMessageDialog(MainFrame.getMainFrame(), e.getLocalizedMessage());
        }
    }//GEN-LAST:event_jbtPrintActionPerformed

    @SuppressWarnings({"PMD.UnusedFormalParameter", "PMD.MethodArgumentCouldBeFinal"})
    private void jbtExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtExportActionPerformed
        final JFileChooser jfc = new JFileChooser();
        if (jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            final File export = jfc.getSelectedFile();

            try {
                final FileWriter out;
                try (FileReader in = new FileReader(mFilename)) {
                    out = new FileWriter(export);
                    int c;
                    while ((c = in.read()) != -1) {
                        out.write(c);
                    }
                }
                out.close();
            } catch (FileNotFoundException fnf) {
                JOptionPane.showMessageDialog(this, fnf.getLocalizedMessage());
            } catch (IOException ioe) {
                JOptionPane.showMessageDialog(this, ioe.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_jbtExportActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtExport;
    private javax.swing.JButton jbtOK;
    private javax.swing.JButton jbtPrint;
    private javax.swing.JEditorPane jepHTML;
    // End of variables declaration//GEN-END:variables

    private File CreateReport() {
        File address = null;

        try {
            final Configuration cfg = new Configuration();
            final URI uri = getClass().getResource("/teamma/views/report").toURI();
            if (uri.toString().contains(".jar!")) {
                cfg.setClassForTemplateLoading(getClass(), "");
            } else {
                cfg.setDirectoryForTemplateLoading(new File(uri));
            }
            cfg.setObjectWrapper(new DefaultObjectWrapper());
            final Template temp = cfg.getTemplate("roster.html");

            final Map root = new HashMap();

            if (mCoach!=null)
            {
                if (mCoach.mTeam!=null)
                {
                    root.put("title", mCoach.mTeam);
                }
                else
                {
                    root.put("title", mCoach.mName);
                }
            }
            else
            {
                root.put("title", "?");
            }
            

            ArrayList players = new ArrayList();

            for (int i = 0; i < mRoster._players.size(); i++) {
                Player p = mRoster._players.get(i);
                final HashMap player = new HashMap();
                player.put("numero", i + 1);
                player.put("name", p._name);
                player.put("position", p._playertype._position);
                player.put("movement", p._playertype._movement);
                player.put("strength", p._playertype._strength);
                player.put("agility", p._playertype._agility);
                player.put("armor", p._playertype._armor);

                ArrayList skills = new ArrayList();
                for (int j = 0; j < p._playertype._skills.size(); j++) {
                    skills.add(p._playertype._skills.get(j).mName);
                }
                for (int j = 0; j < p._skills.size(); j++) {
                    String ctmp="rgb(";
                    Color c=p._skills.get(j).mColor;
                    ctmp=ctmp+c.getRed()+",";
                    ctmp=ctmp+c.getGreen()+",";
                    ctmp=ctmp+c.getBlue()+")";
                    skills.add("<div style=\"color:"+ctmp+";\">"+p._skills.get(j).mName+"</div>");
                }
                player.put("skills", skills);
                player.put("cost", p.getValue(mWithSkill));

                ArrayList single = new ArrayList();
                for (int j = 0; j < p._playertype._single.size(); j++) {
                    single.add(p._playertype._single.get(j)._accronym);
                }
                player.put("single", single);

                ArrayList doubleT = new ArrayList();
                for (int j = 0; j < p._playertype._double.size(); j++) {
                    doubleT.add(p._playertype._double.get(j)._accronym);
                }
                player.put("double", doubleT);

                players.add(player);
            }

            for (int i = 0; i < this.mRoster._champions.size(); i++) {
                StarPlayer p = mRoster._champions.get(i);
                final HashMap player = new HashMap();
                player.put("numero", players.size()+1);
                player.put("name", p._name);
                player.put("position", p._position);
                player.put("movement", p._movement);
                player.put("strength", p._strength);
                player.put("agility", p._agility);
                player.put("armor", p._armor);

                ArrayList skills = new ArrayList();
                for (int j = 0; j < p._skills.size(); j++) {
                    skills.add(p._skills.get(j).mName);
                }
                player.put("skills", skills);
                player.put("cost", p._cost);

                ArrayList single = new ArrayList();
                single.add("&nbsp;");
                player.put("single", single);

                ArrayList doubleT = new ArrayList();
                doubleT.add("&nbsp;");
                player.put("double", doubleT);

                players.add(player);
            }

            root.put("players", players);

            root.put("teamname", "&nbsp;");
            if (mRoster._apothecary)
            {
                root.put("apothecary", 1);
            }
            else
            {
                root.put("apothecary", 0);
            }
            root.put("apo_price", RosterType._apothecary_cost);
            if (mRoster._apothecary) {
                root.put("apo_cost", RosterType._apothecary_cost);
            } else {
                root.put("apo_cost", 0);
            }
            
            root.put("coachname", "&nbsp");
            root.put("assists", mRoster._assistants);
            root.put("ass_price", RosterType._assistant_cost);
            root.put("ass_cost", mRoster._assistants*RosterType._assistant_cost);
                       
            if (mRoster._roster!=null)
            {
            root.put("race", mRoster._roster._name);
            }
            else
            {
                root.put("race", "&nbsp;");
            }
            root.put("cheer", mRoster._cheerleaders);
            
            root.put("cheer_price", RosterType._cheerleader_cost);
            root.put("cheer_cost", mRoster._cheerleaders*RosterType._cheerleader_cost);
            
            root.put("rank", mRoster.getValue(mWithSkill)/10000);
            root.put("reroll", mRoster._rerolls);
            if (mRoster._roster!=null)
            {
                root.put("reroll_price", mRoster._roster._reroll_cost);
            }
            else
            {
                root.put("reroll_price", 0);
            }
            root.put("reroll_cost", mRoster._rerolls*RosterType._cheerleader_cost);
            
            root.put("pop", mRoster._rerolls);
            root.put("pop_price", RosterType._fan_factor_cost);
            root.put("pop_cost", mRoster._fanfactor*RosterType._fan_factor_cost);
            
            root.put("extra", mRoster._extrarerolls);
            root.put("extra_price", RosterType._extra_reroll_cost);
            root.put("extra_cost", mRoster._extrarerolls*RosterType._extra_reroll_cost);
            
            root.put("local", mRoster._localapothecary);
            root.put("local_price", RosterType._local_apo_cost);
            root.put("local_cost", mRoster._localapothecary*RosterType._local_apo_cost);
            
            root.put("igor",  mRoster._igor?1:0);
            root.put("igor_price", RosterType._igor_cost);
            root.put("igor_cost", mRoster._igor?RosterType._igor_cost:0);
            
            root.put("bribe",  mRoster._corruptions);
            if (mRoster._roster!=null)
            {
            root.put("bribe_price", mRoster._roster._bribe_cost);
            root.put("bribe_cost", mRoster._corruptions* mRoster._roster._bribe_cost);
            }
            else
            {
                root.put("bribe_price", 0);
                root.put("bribe_cost", 0);
            }
            
            
            root.put("wizard",  mRoster._wizard?1:0);
            root.put("wizard_price", RosterType._wizard_cost);
            root.put("wizard_cost", mRoster._wizard?RosterType._wizard_cost:0);
            
            root.put("babes",  mRoster._bloodweiserbabes);
            root.put("babes_price", RosterType._babe_cost);
            root.put("babes_cost", mRoster._bloodweiserbabes* RosterType._babe_cost);
            
            root.put("chef",  mRoster._chef?1:0);
            if (mRoster._roster!=null)
            {
                root.put("chef_price", mRoster._roster._chef_cost);
                root.put("chef_cost", mRoster._chef?mRoster._roster._chef_cost:0);
            }
            else
            {
                root.put("chef_price", 0);
                root.put("chef_cost", 0);
            }
            
            
            root.put("cards",  mRoster._cards);

            root.put("total",mRoster.getValue(mWithSkill));
            root.put("rank",mRoster.getValue(mWithSkill)/10000);
            
           
            final SimpleDateFormat format = new SimpleDateFormat(java.util.ResourceBundle.getBundle("tourma/languages/language").getString("EEEEEEE DD MMMMMMMMMMM YYYY"), Locale.getDefault());
            final SimpleDateFormat formatShort = new SimpleDateFormat(java.util.ResourceBundle.getBundle("tourma/languages/language").getString("DD/MM/YYYY"), Locale.getDefault());
            root.put(java.util.ResourceBundle.getBundle("tourma/languages/language").getString("DATEGENERATION"), formatShort.format(new Date()));
            address = File.createTempFile(StringConstants.CS_RESULT + format.format(new Date()), java.util.ResourceBundle.getBundle("tourma/languages/language").getString(".TMP"));
            address.deleteOnExit();
            final Writer out = new FileWriter(address);
            temp.process(root, out);
            out.flush();

        } catch (IOException | TemplateException | URISyntaxException e) {
            JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
        }
        return address;
    }
}
