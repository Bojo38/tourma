/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainFrame.java
 *
 * Created on 10 mai 2010, 16:38:37
 */
package tourma;

import java.awt.BorderLayout;
import tourma.utility.ExtensionFileFilter;
import tourma.views.system.jdgRevisions;
import tourma.views.system.jdgAbout;
import tourma.data.Tournament;
import java.awt.Toolkit;
import java.io.File;
import java.util.ArrayList;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSplitPane;
import javax.swing.ProgressMonitor;
import tourma.views.system.jdgOnlineHelp;
import javax.swing.filechooser.FileFilter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;
import teamma.data.lrb;
import teamma.views.JdgRoster;
import tourma.data.Coach;
import tourma.data.Group;
import tourma.data.Parameters;
import tourma.data.RosterType;
import tourma.data.Round;
import tourma.utils.Generation;
import tourma.utility.StringConstants;
import tourma.utils.NAF;

/**
 *
 * @author Frederic Berger
 */
public class MainFrame extends javax.swing.JFrame {

    Tournament mTournament;
    File mFile = null;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {

        mTournament = Tournament.getTournament();
        this.setSize(800, 600);
        initComponents();

        final ArrayList<String> StartOptions = new ArrayList<String>();
        StartOptions.add(java.util.ResourceBundle.getBundle(StringConstants.CS_LANGUAGE_RESOURCE).getString("NewGame"));
        StartOptions.add(java.util.ResourceBundle.getBundle(StringConstants.CS_LANGUAGE_RESOURCE).getString("Open"));
        final int res = JOptionPane.showOptionDialog(this, java.util.ResourceBundle.getBundle(StringConstants.CS_LANGUAGE_RESOURCE).getString("NewGameOrOpen"), java.util.ResourceBundle.getBundle("tourma/languages/language").getString(""), JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, StartOptions.toArray(), java.util.ResourceBundle.getBundle(StringConstants.CS_LANGUAGE_RESOURCE).getString("Open"));

        if (res == 0) {
            jmiNouveauActionPerformed(null);
        } else {
            final JFileChooser jfc = new JFileChooser();
            final FileFilter filter1 = new ExtensionFileFilter(java.util.ResourceBundle.getBundle(StringConstants.CS_LANGUAGE_RESOURCE).getString("TourMaXMLFile"), new String[]{StringConstants.CS_XML, StringConstants.CS_xml});
            jfc.setFileFilter(filter1);
            if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                Tournament.getTournament().loadXML(jfc.getSelectedFile());
                mFile =
                        jfc.getSelectedFile();
                /*for (int i = jtpMain.getTabCount() - 1; i
                 >= 0; i--) {
                 final Component obj = jtpMain.getComponentAt(i);
                 if (obj instanceof JPNRound) {
                 jtpMain.remove(obj);
                 }

                 }
                 boolean cup = false;
                 for (int i = 0; i
                 < mTournament.getRounds().size(); i++) {
                 final JPNRound jpnr = new JPNRound(i, mTournament.getRounds().get(i), mTournament);
                 jtpMain.addTab(java.util.ResourceBundle.getBundle(StringConstants.CS_LANGUAGE_RESOURCE).getString("Round") + " " + (i + 1), new javax.swing.ImageIcon(getClass().getResource("/tourma/images/Dice.png")), jpnr);
                 if (mTournament.getRounds().get(i).mCup) {
                 cup = true;
                 }
                 }
                 if (cup) {
                 final JPNCup jpncup = new JPNCup();
                 jtpMain.addTab("Coupe", new javax.swing.ImageIcon(getClass().getResource("/tourma/images/Star.png")), jpncup);
                 }*/
            }
        }

        update();
    }

    public void update() {

        //final boolean bTourStarted = mTournament.getRounds().size() > 0;
        jmiEditTeam.setEnabled(mTournament.getParams().mGame == RosterType.C_BLOOD_BOWL);
        final mainTreeModel dtm = new mainTreeModel();
        jtrPanels.setCellRenderer(dtm);
        jtrPanels.setModel(dtm);
        jtrPanels.setSize(100, this.getHeight());
        this.revalidate();
        this.repaint();

    }

    public void updateTree() {
        jtrPanels.setSelectionPath(new TreePath(((mainTreeModel) jtrPanels.getModel()).mParams));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings({"unchecked", "PMD"})
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jspSplit = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtrPanels = new javax.swing.JTree();
        jpnContent = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jmnFile = new javax.swing.JMenu();
        jmiNouveau = new javax.swing.JMenuItem();
        jmiCharger = new javax.swing.JMenuItem();
        jmiSave = new javax.swing.JMenuItem();
        jmiSaveAs = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        jmiExport = new javax.swing.JMenuItem();
        jmiExportFbb = new javax.swing.JMenuItem();
        jmiExportFbb1 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        jmiExit = new javax.swing.JMenuItem();
        jmnParameters = new javax.swing.JMenu();
        jmiEditTeam = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        jcxAllowSpecialSkill = new javax.swing.JCheckBoxMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        jmiNafLoad = new javax.swing.JMenuItem();
        jmnRounds = new javax.swing.JMenu();
        jmiGenerateFirstRound = new javax.swing.JMenuItem();
        jmnHelp = new javax.swing.JMenu();
        jmiAbout = new javax.swing.JMenuItem();
        jmiRevisions = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        jmiAideEnLigne = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("tourma/languages/language"); // NOI18N
        setTitle(bundle.getString("SoftwareTitle")); // NOI18N
        setIconImage((Toolkit.getDefaultToolkit().getImage(MainFrame.class.getResource(java.util.ResourceBundle.getBundle("tourma/languages/language").getString("IMAGES/ICONE.PNG")))));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jtrPanels.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jtrPanelsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jtrPanels);

        jspSplit.setLeftComponent(jScrollPane1);
        jspSplit.setRightComponent(jpnContent);

        getContentPane().add(jspSplit, java.awt.BorderLayout.CENTER);

        jmnFile.setText(bundle.getString("FileKey")); // NOI18N

        jmiNouveau.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tourma/images/New.png"))); // NOI18N
        jmiNouveau.setText(bundle.getString("NewTourKey")); // NOI18N
        jmiNouveau.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiNouveauActionPerformed(evt);
            }
        });
        jmnFile.add(jmiNouveau);

        jmiCharger.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tourma/images/Open.png"))); // NOI18N
        jmiCharger.setText(bundle.getString("LoadTourKey")); // NOI18N
        jmiCharger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiChargerActionPerformed(evt);
            }
        });
        jmnFile.add(jmiCharger);

        jmiSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tourma/images/Save.png"))); // NOI18N
        jmiSave.setText(bundle.getString("SaveTourKey")); // NOI18N
        jmiSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiSaveActionPerformed(evt);
            }
        });
        jmnFile.add(jmiSave);

        jmiSaveAs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tourma/images/Save.png"))); // NOI18N
        jmiSaveAs.setText(bundle.getString("SaveTourAsKey")); // NOI18N
        jmiSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiSaveAsActionPerformed(evt);
            }
        });
        jmnFile.add(jmiSaveAs);
        jmnFile.add(jSeparator1);

        jmiExport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tourma/images/Html.png"))); // NOI18N
        jmiExport.setText(bundle.getString("ExportNafResultKey")); // NOI18N
        jmiExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiExportActionPerformed(evt);
            }
        });
        jmnFile.add(jmiExport);

        jmiExportFbb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tourma/images/Html.png"))); // NOI18N
        jmiExportFbb.setText(bundle.getString("ExportFBBResultKey")); // NOI18N
        jmiExportFbb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiExportFbbActionPerformed(evt);
            }
        });
        jmnFile.add(jmiExportFbb);

        jmiExportFbb1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tourma/images/Html.png"))); // NOI18N
        jmiExportFbb1.setText(bundle.getString("ExportFBBResultKey")); // NOI18N
        jmiExportFbb1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiExportFbb1ActionPerformed(evt);
            }
        });
        jmnFile.add(jmiExportFbb1);
        jmnFile.add(jSeparator2);

        jmiExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tourma/images/Halt.png"))); // NOI18N
        jmiExit.setText(bundle.getString("QuitKey")); // NOI18N
        jmiExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiExitActionPerformed(evt);
            }
        });
        jmnFile.add(jmiExit);

        jMenuBar1.add(jmnFile);

        jmnParameters.setText(bundle.getString("Parametres")); // NOI18N

        jmiEditTeam.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tourma/images/New.png"))); // NOI18N
        jmiEditTeam.setText(bundle.getString("ChangeRosters")); // NOI18N
        jmiEditTeam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiEditTeamActionPerformed(evt);
            }
        });
        jmnParameters.add(jmiEditTeam);
        jmnParameters.add(jSeparator5);

        jcxAllowSpecialSkill.setText(bundle.getString("AUTORISER LES COMPÉTENCES SPÉCIALES")); // NOI18N
        jcxAllowSpecialSkill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcxAllowSpecialSkillActionPerformed(evt);
            }
        });
        jmnParameters.add(jcxAllowSpecialSkill);
        jmnParameters.add(jSeparator4);

        jmiNafLoad.setText("Mettre à jour les informations NAF des coachs");
        jmiNafLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiNafLoadActionPerformed(evt);
            }
        });
        jmnParameters.add(jmiNafLoad);

        jMenuBar1.add(jmnParameters);

        jmnRounds.setText(bundle.getString("Rounds")); // NOI18N

        jmiGenerateFirstRound.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tourma/images/Generate.png"))); // NOI18N
        jmiGenerateFirstRound.setText(bundle.getString("GenerateFirstRound")); // NOI18N
        jmiGenerateFirstRound.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiGenerateFirstRoundActionPerformed(evt);
            }
        });
        jmnRounds.add(jmiGenerateFirstRound);

        jMenuBar1.add(jmnRounds);

        jmnHelp.setText(bundle.getString("?")); // NOI18N

        jmiAbout.setText(bundle.getString("AboutKey")); // NOI18N
        jmiAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiAboutActionPerformed(evt);
            }
        });
        jmnHelp.add(jmiAbout);

        jmiRevisions.setText(bundle.getString("SoftwareRevisionsKey")); // NOI18N
        jmiRevisions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiRevisionsActionPerformed(evt);
            }
        });
        jmnHelp.add(jmiRevisions);
        jmnHelp.add(jSeparator3);

        jmiAideEnLigne.setText(bundle.getString("Help")); // NOI18N
        jmiAideEnLigne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiAideEnLigneActionPerformed(evt);
            }
        });
        jmnHelp.add(jmiAideEnLigne);

        jMenuBar1.add(jmnHelp);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @SuppressWarnings({"PMD.UnusedFormalParameter", "PMD.MethodArgumentCouldBeFinal"})
    private void jmiSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiSaveAsActionPerformed
        final JFileChooser jfc = new JFileChooser();
        final FileFilter filter1 = new ExtensionFileFilter(java.util.ResourceBundle.getBundle(StringConstants.CS_LANGUAGE_RESOURCE).getString("TourMaXMLFile"), new String[]{StringConstants.CS_XML, StringConstants.CS_xml});
        jfc.setFileFilter(filter1);
        if (jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            StringBuffer url2 = new StringBuffer(jfc.getSelectedFile().getAbsolutePath());
            String ext = java.util.ResourceBundle.getBundle("tourma/languages/language").getString("");
            final int i = url2.toString().lastIndexOf('.');
            if (i > 0 && i < url2.length() - 1) {
                ext = url2.substring(i + 1).toLowerCase();
            }

            if (!ext.equals(StringConstants.CS_xml)) {
                url2 = url2.append(java.util.ResourceBundle.getBundle("tourma/languages/language").getString(".XML"));
            }
            mFile = new File(url2.toString());
            Tournament.getTournament().saveXML(mFile);
        }
    }//GEN-LAST:event_jmiSaveAsActionPerformed
    @SuppressWarnings({"PMD.UnusedFormalParameter", "PMD.MethodArgumentCouldBeFinal"})
    private void jmiSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiSaveActionPerformed
        if (mFile != null) {
            Tournament.getTournament().saveXML(mFile);
        } else {
            jmiSaveAsActionPerformed(evt);
        }
    }//GEN-LAST:event_jmiSaveActionPerformed
    @SuppressWarnings({"PMD.UnusedFormalParameter", "PMD.MethodArgumentCouldBeFinal"})
    private void jmiChargerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiChargerActionPerformed
        final JFileChooser jfc = new JFileChooser();
        final FileFilter filter1 = new ExtensionFileFilter(java.util.ResourceBundle.getBundle(StringConstants.CS_LANGUAGE_RESOURCE).getString("TourMaXMLFile"), new String[]{StringConstants.CS_XML, StringConstants.CS_xml});
        jfc.setFileFilter(filter1);
        if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            Tournament.getTournament().loadXML(jfc.getSelectedFile());
            mFile =
                    jfc.getSelectedFile();
            /*            for (int i = jtpMain.getTabCount() - 1; i
             >= 0; i--) {
             final Component obj = jtpMain.getComponentAt(i);
             if (obj instanceof JPNRound) {
             jtpMain.remove(obj);
             }

             }
             for (int i = 0; i
             < mTournament.getRounds().size(); i++) {
             final JPNRound jpnr = new JPNRound(i, mTournament.getRounds().get(i), mTournament);
             //                jtpMain.add(java.util.ResourceBundle.getBundle(StringConstants.CS_LANGUAGE_RESOURCE).getString("RONDE ") + (i + 1), jpnr);
             jtpMain.addTab(java.util.ResourceBundle.getBundle(StringConstants.CS_LANGUAGE_RESOURCE).getString("Round") + " " + (i + 1), new javax.swing.ImageIcon(getClass().getResource("/tourma/images/Dice.png")), jpnr);
             }*/

            update();

        }
    }//GEN-LAST:event_jmiChargerActionPerformed
    @SuppressWarnings({"PMD.UnusedFormalParameter", "PMD.MethodArgumentCouldBeFinal"})
    private void jmiNouveauActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiNouveauActionPerformed


        /*for (int i = jtpMain.getTabCount() - 1; i
         >= 0; i--) {
         final Component obj = jtpMain.getComponentAt(i);
         if (obj instanceof JPNRound) {
         jtpMain.remove(obj);
         }
         }*/
        mTournament = Tournament.resetTournament();

        JdgParameters jdgParams = new JdgParameters(this, true);
        jdgParams.setVisible(true);

        /*final ArrayList<String> Games = new ArrayList<String>();
         Games.add(java.util.ResourceBundle.getBundle("tourma/languages/language").getString("BLOOD BOWL"));
         Games.add(java.util.ResourceBundle.getBundle("tourma/languages/language").getString("DREADBALL"));
         final int res2 = JOptionPane.showOptionDialog(this, java.util.ResourceBundle.getBundle(StringConstants.CS_LANGUAGE_RESOURCE).getString("ChooseGame"), java.util.ResourceBundle.getBundle("tourma/languages/language").getString(""), JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, Games.toArray(), java.util.ResourceBundle.getBundle("tourma/languages/language").getString("BLOOD BOWL"));
         if (res2 == 0) {
         RosterType.initCollection(RosterType.C_BLOOD_BOWL);
         lrb.getLRB();
         Tournament.getTournament().getParams().mGame = RosterType.C_BLOOD_BOWL;

         } else {
         RosterType.initCollection(RosterType.C_DREAD_BALL);
         Tournament.getTournament().getParams().mGame = RosterType.C_DREAD_BALL;
         jmiExport.setEnabled(false);
         jmiExportFbb.setEnabled(false);
         jcxAllowSpecialSkill.setEnabled(false);
         }*/

        mTournament = Tournament.getTournament();
        if (mTournament.getParams().mGame == RosterType.C_DREAD_BALL) {
            RosterType.initCollection(RosterType.C_DREAD_BALL);
            jmiExport.setEnabled(false);
            jmiExportFbb.setEnabled(false);
            jcxAllowSpecialSkill.setEnabled(false);
        } else {
            RosterType.initCollection(RosterType.C_BLOOD_BOWL);
            lrb.getLRB();
        }

        mTournament.getGroups().clear();
        final java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle(StringConstants.CS_LANGUAGE_RESOURCE);
        final Group group = new Group(bundle.getString("NoneKey"));
        mTournament.getGroups().add(group);

        for (int i = 0; i < RosterType.mRostersNames.size(); i++) {
            group.mRosters.add(new RosterType(RosterType.mRostersNames.get(i)));
        }

        /*int multi = JOptionPane.showConfirmDialog(this, "S'agit-il d'un tournoi multi roster ?", "MultiRoster", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

        final Object options[] = {java.util.ResourceBundle.getBundle(StringConstants.CS_LANGUAGE_RESOURCE).getString("Single"), java.util.ResourceBundle.getBundle(StringConstants.CS_LANGUAGE_RESOURCE).getString("ByTeam")};
        int res = JOptionPane.showOptionDialog(this, java.util.ResourceBundle.getBundle(StringConstants.CS_LANGUAGE_RESOURCE).getString("TournamentType"), java.util.ResourceBundle.getBundle(StringConstants.CS_LANGUAGE_RESOURCE).getString("NewTournament"),
                JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE,
                null, options, options[0]);

        Tournament.getTournament().getParams().mTeamTournament = (res == 1);
        if (res == 1) {
            final jdgSelectNumber jdg = new jdgSelectNumber(this, true, mTournament);
            jdg.setVisible(true);
            res = JOptionPane.showOptionDialog(this, java.util.ResourceBundle.getBundle(StringConstants.CS_LANGUAGE_RESOURCE).getString("PairingType"), java.util.ResourceBundle.getBundle(StringConstants.CS_LANGUAGE_RESOURCE).getString("Pairing"),
                    JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE,
                    null, options, options[0]);
            Tournament.getTournament().getParams().mTeamPairing = res;
            if (res == 1) {
                final Object options2[] = {java.util.ResourceBundle.getBundle(StringConstants.CS_LANGUAGE_RESOURCE).getString("AccordingToRanking"), java.util.ResourceBundle.getBundle(StringConstants.CS_LANGUAGE_RESOURCE).getString("Free")};
                res = JOptionPane.showOptionDialog(this, java.util.ResourceBundle.getBundle(StringConstants.CS_LANGUAGE_RESOURCE).getString("IndividualPairingType"), java.util.ResourceBundle.getBundle(StringConstants.CS_LANGUAGE_RESOURCE).getString("IndividualPairing"),
                        JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE,
                        null, options2, options2[0]);
                Tournament.getTournament().getParams().mTeamIndivPairing = res;
            }
        }*/


        update();
    }//GEN-LAST:event_jmiNouveauActionPerformed
    @SuppressWarnings({"PMD.UnusedFormalParameter", "PMD.MethodArgumentCouldBeFinal"})
    private void jmiExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiExportActionPerformed
        final JFileChooser jfc = new JFileChooser();
        final FileFilter filter1 = new ExtensionFileFilter(java.util.ResourceBundle.getBundle("tourma/languages/language").getString("NAF XML FILE"), new String[]{StringConstants.CS_XML, StringConstants.CS_xml});
        jfc.setFileFilter(filter1);
        if (jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            Tournament.getTournament().exportResults(jfc.getSelectedFile());
        }
    }//GEN-LAST:event_jmiExportActionPerformed
    @SuppressWarnings({"PMD.UnusedFormalParameter", "PMD.MethodArgumentCouldBeFinal"})
    private void jmiExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jmiExitActionPerformed
    @SuppressWarnings({"PMD.UnusedFormalParameter", "PMD.MethodArgumentCouldBeFinal"})
    private void jmiRevisionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiRevisionsActionPerformed
        jdgRevisions jdg = new jdgRevisions(this, true);
        jdg.setVisible(true);
        jdg =
                null;
}//GEN-LAST:event_jmiRevisionsActionPerformed
    @SuppressWarnings({"PMD.UnusedFormalParameter", "PMD.MethodArgumentCouldBeFinal"})
    private void jmiAideEnLigneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiAideEnLigneActionPerformed
        jdgOnlineHelp jdg = new jdgOnlineHelp(this, false);
        jdg.setVisible(true);
        jdg =
                null;
    }//GEN-LAST:event_jmiAideEnLigneActionPerformed

    @SuppressWarnings({"PMD.UnusedFormalParameter", "PMD.MethodArgumentCouldBeFinal"})
    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed

        if (JOptionPane.showConfirmDialog(this, java.util.ResourceBundle.getBundle("tourma/languages/language").getString("VOULEZ VOUS SAUVGARDER ?"), java.util.ResourceBundle.getBundle("tourma/languages/language").getString("EXIT"), JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            if (mFile.equals(java.util.ResourceBundle.getBundle("tourma/languages/language").getString(""))) {
                jmiSaveAsActionPerformed(null);
            } else {
                jmiSaveActionPerformed(null);
            }
        }
    }//GEN-LAST:event_formWindowClosed

    @SuppressWarnings({"PMD.UnusedFormalParameter", "PMD.MethodArgumentCouldBeFinal"})
    private void jmiAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiAboutActionPerformed
        jdgAbout jdg = new jdgAbout(this, true);
        jdg.setVisible(true);
        jdg =
                null;
}//GEN-LAST:event_jmiAboutActionPerformed
    @SuppressWarnings({"PMD.UnusedFormalParameter", "PMD.MethodArgumentCouldBeFinal"})
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (JOptionPane.showConfirmDialog(this, java.util.ResourceBundle.getBundle("tourma/languages/language").getString("VOULEZ VOUS SAUVGARDER ?"), java.util.ResourceBundle.getBundle("tourma/languages/language").getString("EXIT"), JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            if (mFile == null) {
                jmiSaveAsActionPerformed(null);
            } else {

                if (mFile.equals(java.util.ResourceBundle.getBundle("tourma/languages/language").getString(""))) {
                    jmiSaveAsActionPerformed(null);
                } else {
                    jmiSaveActionPerformed(null);
                }
            }
        }
    }//GEN-LAST:event_formWindowClosing
    @SuppressWarnings({"PMD.UnusedFormalParameter", "PMD.MethodArgumentCouldBeFinal"})
    private void jmiEditTeamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiEditTeamActionPerformed
        final JdgRoster jdg = new JdgRoster(this, true);
        jdg.setVisible(true);
    }//GEN-LAST:event_jmiEditTeamActionPerformed
    @SuppressWarnings({"PMD.UnusedFormalParameter", "PMD.MethodArgumentCouldBeFinal"})
    private void jcxAllowSpecialSkillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcxAllowSpecialSkillActionPerformed
        lrb.getLRB()._allowSpecialSkills = jcxAllowSpecialSkill.getState();
    }//GEN-LAST:event_jcxAllowSpecialSkillActionPerformed

    @SuppressWarnings({"PMD.UnusedFormalParameter", "PMD.MethodArgumentCouldBeFinal"})
    private void jmiExportFbbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiExportFbbActionPerformed
        final JFileChooser jfc = new JFileChooser();
        final FileFilter filter1 = new ExtensionFileFilter(java.util.ResourceBundle.getBundle("tourma/languages/language").getString("FBB CSV FILE"), new String[]{java.util.ResourceBundle.getBundle("tourma/languages/language").getString("CSV"), java.util.ResourceBundle.getBundle("tourma/languages/language").getString("CSV")});
        jfc.setFileFilter(filter1);
        if (jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            Tournament.getTournament().exportFBB(jfc.getSelectedFile());
        }
    }//GEN-LAST:event_jmiExportFbbActionPerformed
    @SuppressWarnings({"PMD.UnusedFormalParameter", "PMD.MethodArgumentCouldBeFinal"})
    private void jmiExportFbb1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiExportFbb1ActionPerformed
        final JFileChooser jfc = new JFileChooser();
        final FileFilter filter1 = new ExtensionFileFilter(java.util.ResourceBundle.getBundle("tourma/languages/language").getString("FBB XML FILE"), new String[]{java.util.ResourceBundle.getBundle("tourma/languages/language").getString("FBB_XML"), java.util.ResourceBundle.getBundle("tourma/languages/language").getString("FBB_XML")});
        jfc.setFileFilter(filter1);
        if (jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            final File f = jfc.getSelectedFile();
            if (f.getName().endsWith(java.util.ResourceBundle.getBundle("tourma/languages/language").getString(".FBB_XML"))) {
                Tournament.getTournament().exportFullFBB(f);
            } else {
                Tournament.getTournament().exportFullFBB(new File(f.getAbsolutePath() + java.util.ResourceBundle.getBundle("tourma/languages/language").getString(".FBB_XML")));
            }
        }
    }//GEN-LAST:event_jmiExportFbb1ActionPerformed

    @SuppressWarnings({"PMD.UnusedFormalParameter", "PMD.MethodArgumentCouldBeFinal"})
    private void jmiGenerateFirstRoundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiGenerateFirstRoundActionPerformed
        if (JOptionPane.showConfirmDialog(this, java.util.ResourceBundle.getBundle(StringConstants.CS_LANGUAGE_RESOURCE).getString("AreYouSure?ItWillEraseAllRounds"), java.util.ResourceBundle.getBundle(StringConstants.CS_LANGUAGE_RESOURCE).getString("FirstRound"), JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            if (mTournament.getParams().mTeamTournament && (mTournament.getParams().mTeamPairing == 1) && mTournament.getTeams().size() % 2 > 0) {
                JOptionPane.showMessageDialog(this, java.util.ResourceBundle.getBundle(StringConstants.CS_LANGUAGE_RESOURCE).getString("OddTeamNumber"));
            } else {

                final ArrayList<String> labels = new ArrayList<String>();
                final ArrayList<Integer> Options = new ArrayList<Integer>();

                /**
                 * Random possible ?
                 */
                labels.add(java.util.ResourceBundle.getBundle("tourma/languages/language").getString("ALÉATOIRE"));
                Options.add(Generation.GEN_RANDOM);

                /**
                 * Coupe
                 */
                labels.add(java.util.ResourceBundle.getBundle("tourma/languages/language").getString("COUPE"));
                Options.add(Generation.GEN_CUP);

                /**
                 * Ordre
                 */
                labels.add(java.util.ResourceBundle.getBundle("tourma/languages/language").getString("ORDER D'INSCRIPTION"));
                Options.add(Generation.GEN_ORDER);

                /**
                 * Round Robin
                 */
                labels.add(java.util.ResourceBundle.getBundle("tourma/languages/language").getString("ROUND ROBIN"));
                Options.add(Generation.GEN_RROBIN);

                /**
                 * manuel
                 */
                labels.add(java.util.ResourceBundle.getBundle("tourma/languages/language").getString("CHOIX MANUEL"));
                Options.add(Generation.GEN_MANUAL);

                /**
                 * Poules
                 */
                labels.add(java.util.ResourceBundle.getBundle("tourma/languages/language").getString("POULES"));
                Options.add(Generation.GEN_POOL);

                /**
                 * Naf Ranking
                 */
                labels.add(java.util.ResourceBundle.getBundle("tourma/languages/language").getString("NAF_RANK"));
                Options.add(Generation.GEN_NAF);


                final JPanel jpn = new JPanel(new BorderLayout());
                final JComboBox jcb = new JComboBox(labels.toArray());
                jpn.add(jcb, BorderLayout.CENTER);
                final JLabel jlb = new JLabel(java.util.ResourceBundle.getBundle("tourma/languages/language").getString("CHOISISSEZ LA MÉTHODE DE GÉNÉRATION: "));
                jpn.add(jlb, BorderLayout.NORTH);

                JOptionPane.showMessageDialog(MainFrame.getMainFrame(), jpn, java.util.ResourceBundle.getBundle("tourma/languages/language").getString("GÉNÉRATION"), JOptionPane.QUESTION_MESSAGE);
                final int index = jcb.getSelectedIndex();

                Generation.generateFirstRound(Options.get(index));

                /*                for (int i = jtpMain.getTabCount() - 1; i >= 0; i--) {
                 final Component obj = jtpMain.getComponentAt(i);
                 if (obj instanceof JPNRound) {
                 jtpMain.remove(obj);
                 }
                 }
                 boolean cup = false;
                 for (int i = 0; i < mTournament.getRounds().size(); i++) {
                 final JPNRound jpnr = new JPNRound(i, mTournament.getRounds().get(i), mTournament);
                 if (mTournament.getRounds().get(i).mCup) {
                 cup = true;
                 }
                 jtpMain.addTab(java.util.ResourceBundle.getBundle(StringConstants.CS_LANGUAGE_RESOURCE).getString("Round") + " " + (i + 1), new javax.swing.ImageIcon(getClass().getResource("/tourma/images/Dice.png")), jpnr);
                 }

                 if (cup) {
                 final JPNCup jpncup = new JPNCup();
                 jtpMain.addTab("Coupe", new javax.swing.ImageIcon(getClass().getResource("/tourma/images/Star.png")), jpncup);
                 }

                 jtpMain.setSelectedIndex(mTournament.getRounds().size());*/
                update();

            }

        }
    }//GEN-LAST:event_jmiGenerateFirstRoundActionPerformed
    @SuppressWarnings({"PMD.UnusedFormalParameter", "PMD.MethodArgumentCouldBeFinal"})
    private void jtrPanelsValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jtrPanelsValueChanged

        final TreePath path = evt.getNewLeadSelectionPath();
        if (path != null) {

            final DefaultMutableTreeNode node = (DefaultMutableTreeNode) path.getLastPathComponent();
            if (node != null) {
                final Object object = node.getUserObject();
                if (object instanceof Parameters) {
                    jspSplit.remove(jpnContent);
                    jpnContent = new JPNParameters();
                    jspSplit.add(jpnContent, JSplitPane.RIGHT);
                    ((JPNParameters) jpnContent).update();
                    jspSplit.setDividerLocation(200);
                    //System.gc();
                    this.revalidate();
                }
                if (object instanceof Round) {
                    for (int i = 0; i < mTournament.getRounds().size(); i++) {
                        if (mTournament.getRounds().get(i).equals(object)) {
                            jspSplit.remove(jpnContent);
                            jpnContent = new JPNRound(i, (Round) object, mTournament);
                            jspSplit.add(jpnContent, JSplitPane.RIGHT);
                            ((JPNRound) jpnContent).update();
                            jspSplit.setDividerLocation(200);
                            //System.gc();
                            this.revalidate();
                            break;
                        }
                    }
                }

                if (object.equals(java.util.ResourceBundle.getBundle("tourma/languages/language").getString("CUP"))) {
                    jspSplit.remove(jpnContent);
                    jpnContent = new JPNCup();
                    jspSplit.add(jpnContent, JSplitPane.RIGHT);
                    ((JPNCup) jpnContent).update();
                    jspSplit.setDividerLocation(200);
                    //System.gc();
                    this.revalidate();
                }

                if (object.equals(java.util.ResourceBundle.getBundle("tourma/languages/language").getString("STATISTICS"))) {
                    jspSplit.remove(jpnContent);
                    jpnContent = new JPNStatistics();
                    jspSplit.add(jpnContent, JSplitPane.RIGHT);
                    ((JPNStatistics) jpnContent).update();
                    jspSplit.setDividerLocation(200);
                    //System.gc();
                    this.revalidate();
                }

            }

            repaint();
        }

    }//GEN-LAST:event_jtrPanelsValueChanged

    private void jmiNafLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiNafLoadActionPerformed

        ArrayList<Coach> alc = Tournament.getTournament().getCoachs();

        ProgressMonitor progressMonitor = new ProgressMonitor(this,
                "Download from NAF",
                "Downloading", 0, alc.size());
        progressMonitor.setProgress(0);
        for (int i = 0; i < alc.size(); i++) {
            Coach c = alc.get(i);
            progressMonitor.setNote("Download: " + c.mName);
            c.mNafRank = NAF.GetRanking(c.mName, c);
            progressMonitor.setProgress(i + 1);
        }
        progressMonitor.close();
        update();
    }//GEN-LAST:event_jmiNafLoadActionPerformed
    /**
     * @param args the command line arguments
     */
    public static void main(final String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainFrame.getMainFrame().setVisible(true);
            }
        });
    }
    protected static MainFrame mSingleton;

    public static MainFrame getMainFrame() {
        if (mSingleton == null) {
            mSingleton = new MainFrame();
        }

        return mSingleton;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JCheckBoxMenuItem jcxAllowSpecialSkill;
    private javax.swing.JMenuItem jmiAbout;
    private javax.swing.JMenuItem jmiAideEnLigne;
    private javax.swing.JMenuItem jmiCharger;
    private javax.swing.JMenuItem jmiEditTeam;
    private javax.swing.JMenuItem jmiExit;
    private javax.swing.JMenuItem jmiExport;
    private javax.swing.JMenuItem jmiExportFbb;
    private javax.swing.JMenuItem jmiExportFbb1;
    private javax.swing.JMenuItem jmiGenerateFirstRound;
    private javax.swing.JMenuItem jmiNafLoad;
    private javax.swing.JMenuItem jmiNouveau;
    private javax.swing.JMenuItem jmiRevisions;
    private javax.swing.JMenuItem jmiSave;
    private javax.swing.JMenuItem jmiSaveAs;
    private javax.swing.JMenu jmnFile;
    private javax.swing.JMenu jmnHelp;
    private javax.swing.JMenu jmnParameters;
    private javax.swing.JMenu jmnRounds;
    private javax.swing.JPanel jpnContent;
    private javax.swing.JSplitPane jspSplit;
    private javax.swing.JTree jtrPanels;
    // End of variables declaration//GEN-END:variables
}
