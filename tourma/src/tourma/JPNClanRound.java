/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JPNTeamRound.java
 *
 * Created on 20 juil. 2010, 10:47:49
 */
package tourma;

import tourma.tableModel.mjtAnnexRankIndiv;
import java.awt.FontMetrics;
import java.util.Vector;
import javax.swing.JTable;
import tourma.data.Round;
import tourma.data.Tournament;
import tourma.tableModel.mjtAnnexRankClan;
import tourma.tableModel.mjtRankingClan;
import tourma.views.report.jdgGlobal;
import tourma.views.report.jdgRanking;

/**
 *
 * @author Frederic Berger
 */
public class JPNClanRound extends javax.swing.JPanel {

    Round _round;
    Tournament _tournament;
    JTable _jtbTeamMatch = null;

    /** Creates new form JPNTeamRound */
    public JPNClanRound(Round r, Tournament t) {
        initComponents();
        _round = r;
        _tournament = t;
        update();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel8 = new javax.swing.JPanel();
        jbtGeneralClan = new javax.swing.JButton();
        jbtScorePosClan = new javax.swing.JButton();
        jbtSorPosClan = new javax.swing.JButton();
        jbtFoulPosClan = new javax.swing.JButton();
        jbtPasPosClan = new javax.swing.JButton();
        jbtIntPosClan = new javax.swing.JButton();
        jbtGGlobalClan = new javax.swing.JButton();
        jbtScoreNegClan = new javax.swing.JButton();
        jbtSorNegClan = new javax.swing.JButton();
        jbtFoulNegClan = new javax.swing.JButton();
        jbtPasNegClan = new javax.swing.JButton();
        jbtIntNegClan = new javax.swing.JButton();
        jpnClan = new javax.swing.JPanel();
        jSplitPane2 = new javax.swing.JSplitPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtbRankingClan = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jtbMostTdClan = new javax.swing.JTable();
        jScrollPane11 = new javax.swing.JScrollPane();
        jtbMostSorClan = new javax.swing.JTable();
        jScrollPane12 = new javax.swing.JScrollPane();
        jtbMostFoulClan = new javax.swing.JTable();
        jScrollPane16 = new javax.swing.JScrollPane();
        jtbMostPasClan = new javax.swing.JTable();
        jScrollPane18 = new javax.swing.JScrollPane();
        jtbMostIntClan = new javax.swing.JTable();
        jScrollPane13 = new javax.swing.JScrollPane();
        jtbMostTdNegClan = new javax.swing.JTable();
        jScrollPane14 = new javax.swing.JScrollPane();
        jtbMostSorNegClan = new javax.swing.JTable();
        jScrollPane15 = new javax.swing.JScrollPane();
        jtbMostFoulNegClan = new javax.swing.JTable();
        jScrollPane17 = new javax.swing.JScrollPane();
        jtbMostPasNegClan = new javax.swing.JTable();
        jScrollPane19 = new javax.swing.JScrollPane();
        jtbMostIntNegClan = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        jPanel8.setLayout(new java.awt.GridLayout(2, 7));

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("tourma/languages/language"); // NOI18N
        jbtGeneralClan.setText(bundle.getString("GeneralRankingKey")); // NOI18N
        jbtGeneralClan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtGeneralClanActionPerformed(evt);
            }
        });
        jPanel8.add(jbtGeneralClan);

        jbtScorePosClan.setText(bundle.getString("TouchdownForKey")); // NOI18N
        jbtScorePosClan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtScorePosClanActionPerformed(evt);
            }
        });
        jPanel8.add(jbtScorePosClan);

        jbtSorPosClan.setText(bundle.getString("CasualtiesKey")); // NOI18N
        jbtSorPosClan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtSorPosClanActionPerformed(evt);
            }
        });
        jPanel8.add(jbtSorPosClan);

        jbtFoulPosClan.setText(bundle.getString("FoulsForKey")); // NOI18N
        jbtFoulPosClan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtFoulPosClanActionPerformed(evt);
            }
        });
        jPanel8.add(jbtFoulPosClan);

        jbtPasPosClan.setText(bundle.getString("PassesForKey")); // NOI18N
        jbtPasPosClan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtPasPosClanActionPerformed(evt);
            }
        });
        jPanel8.add(jbtPasPosClan);

        jbtIntPosClan.setText(bundle.getString("BestInterceptorKey")); // NOI18N
        jbtIntPosClan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtIntPosClanActionPerformed(evt);
            }
        });
        jPanel8.add(jbtIntPosClan);

        jbtGGlobalClan.setText(bundle.getString("GeneralRankingKey")); // NOI18N
        jbtGGlobalClan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtGGlobalClanActionPerformed(evt);
            }
        });
        jPanel8.add(jbtGGlobalClan);

        jbtScoreNegClan.setText(bundle.getString("TouchdownAgainstKey")); // NOI18N
        jbtScoreNegClan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtScoreNegClanActionPerformed(evt);
            }
        });
        jPanel8.add(jbtScoreNegClan);

        jbtSorNegClan.setText(bundle.getString("CasualtiesAgainstKey")); // NOI18N
        jbtSorNegClan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtSorNegClanActionPerformed(evt);
            }
        });
        jPanel8.add(jbtSorNegClan);

        jbtFoulNegClan.setText(bundle.getString("FoulsAgainstKey")); // NOI18N
        jbtFoulNegClan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtFoulNegClanActionPerformed(evt);
            }
        });
        jPanel8.add(jbtFoulNegClan);

        jbtPasNegClan.setText(bundle.getString("PassesAgainstKey")); // NOI18N
        jbtPasNegClan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtPasNegClanActionPerformed(evt);
            }
        });
        jPanel8.add(jbtPasNegClan);

        jbtIntNegClan.setText(bundle.getString("InterceptionsAgainstKey")); // NOI18N
        jbtIntNegClan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtIntNegClanActionPerformed(evt);
            }
        });
        jPanel8.add(jbtIntNegClan);

        add(jPanel8, java.awt.BorderLayout.SOUTH);

        jpnClan.setLayout(new java.awt.BorderLayout());

        jSplitPane2.setDividerLocation(200);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("GeneralRankingKey"))); // NOI18N
        jScrollPane3.setPreferredSize(new java.awt.Dimension(466, 300));

        jtbRankingClan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtbRankingClan.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(jtbRankingClan);

        jSplitPane2.setBottomComponent(jScrollPane3);

        jPanel7.setLayout(new java.awt.GridLayout(2, 5));

        jScrollPane7.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("TouchdownForKey"))); // NOI18N

        jtbMostTdClan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane7.setViewportView(jtbMostTdClan);

        jPanel7.add(jScrollPane7);

        jScrollPane11.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("CasualtiesKey"))); // NOI18N

        jtbMostSorClan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane11.setViewportView(jtbMostSorClan);

        jPanel7.add(jScrollPane11);

        jScrollPane12.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("FoulsForKey"))); // NOI18N

        jtbMostFoulClan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane12.setViewportView(jtbMostFoulClan);

        jPanel7.add(jScrollPane12);

        jScrollPane16.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("PassesForKey"))); // NOI18N

        jtbMostPasClan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane16.setViewportView(jtbMostPasClan);

        jPanel7.add(jScrollPane16);

        jScrollPane18.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("BestInterceptorKey"))); // NOI18N

        jtbMostIntClan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane18.setViewportView(jtbMostIntClan);

        jPanel7.add(jScrollPane18);

        jScrollPane13.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("TouchdownAgainstKey"))); // NOI18N

        jtbMostTdNegClan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane13.setViewportView(jtbMostTdNegClan);

        jPanel7.add(jScrollPane13);

        jScrollPane14.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("CasualtiesAgainstKey"))); // NOI18N

        jtbMostSorNegClan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane14.setViewportView(jtbMostSorNegClan);

        jPanel7.add(jScrollPane14);

        jScrollPane15.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("FoulsAgainstKey"))); // NOI18N

        jtbMostFoulNegClan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane15.setViewportView(jtbMostFoulNegClan);

        jPanel7.add(jScrollPane15);

        jScrollPane17.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("PassesAgainstKey"))); // NOI18N

        jtbMostPasNegClan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane17.setViewportView(jtbMostPasNegClan);

        jPanel7.add(jScrollPane17);

        jScrollPane19.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("InterceptionsAgainstKey"))); // NOI18N

        jtbMostIntNegClan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane19.setViewportView(jtbMostIntNegClan);

        jPanel7.add(jScrollPane19);

        jSplitPane2.setTopComponent(jPanel7);

        jpnClan.add(jSplitPane2, java.awt.BorderLayout.CENTER);

        add(jpnClan, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jbtGeneralClanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtGeneralClanActionPerformed
        for (int i = 0; i < _tournament.getRounds().size(); i++) {
            if (_round == _tournament.getRounds().get(i)) {
                jdgRanking jdg = new jdgRanking(MainFrame.getMainFrame(), true, _round, i + 1, _tournament, jdgRanking.RANKING_GENERAL, 2);
                jdg.setVisible(true);
                break;
            }
        }
}//GEN-LAST:event_jbtGeneralClanActionPerformed

    private void jbtScorePosClanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtScorePosClanActionPerformed
        for (int i = 0; i < _tournament.getRounds().size(); i++) {
            if (_round == _tournament.getRounds().get(i)) {
                jdgRanking jdg = new jdgRanking(MainFrame.getMainFrame(), true, _round, i + 1, _tournament, jdgRanking.RANKING_SCORER, 2);
                jdg.setVisible(true);
                break;
            }
        }
}//GEN-LAST:event_jbtScorePosClanActionPerformed

    private void jbtScoreNegClanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtScoreNegClanActionPerformed
        for (int i = 0; i < _tournament.getRounds().size(); i++) {
            if (_round == _tournament.getRounds().get(i)) {
                jdgRanking jdg = new jdgRanking(MainFrame.getMainFrame(), true, _round, i + 1, _tournament, jdgRanking.RANKING_SCORED, 2);
                jdg.setVisible(true);
                break;
            }
        }
}//GEN-LAST:event_jbtScoreNegClanActionPerformed

    private void jbtSorPosClanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtSorPosClanActionPerformed
        for (int i = 0; i < _tournament.getRounds().size(); i++) {
            if (_round == _tournament.getRounds().get(i)) {
                jdgRanking jdg = new jdgRanking(MainFrame.getMainFrame(), true, _round, i + 1, _tournament, jdgRanking.RANKING_DESTROYER, 2);
                jdg.setVisible(true);
                break;
            }
        }
}//GEN-LAST:event_jbtSorPosClanActionPerformed

    private void jbtSorNegClanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtSorNegClanActionPerformed
        for (int i = 0; i < _tournament.getRounds().size(); i++) {
            if (_round == _tournament.getRounds().get(i)) {
                jdgRanking jdg = new jdgRanking(MainFrame.getMainFrame(), true, _round, i + 1, _tournament, jdgRanking.RANKING_DESTROYED, 2);
                jdg.setVisible(true);
                break;
            }
        }
}//GEN-LAST:event_jbtSorNegClanActionPerformed

    private void jbtFoulPosClanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtFoulPosClanActionPerformed
        for (int i = 0; i < _tournament.getRounds().size(); i++) {
            if (_round == _tournament.getRounds().get(i)) {
                jdgRanking jdg = new jdgRanking(MainFrame.getMainFrame(), true, _round, i + 1, _tournament, jdgRanking.RANKING_FOULER, 2);
                jdg.setVisible(true);
                break;
            }
        }
}//GEN-LAST:event_jbtFoulPosClanActionPerformed

    private void jbtFoulNegClanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtFoulNegClanActionPerformed
        for (int i = 0; i < _tournament.getRounds().size(); i++) {
            if (_round == _tournament.getRounds().get(i)) {
                jdgRanking jdg = new jdgRanking(MainFrame.getMainFrame(), true, _round, i + 1, _tournament, jdgRanking.RANKING_FOULED, 2);
                jdg.setVisible(true);
                break;
            }
        }
}//GEN-LAST:event_jbtFoulNegClanActionPerformed

    private void jbtPasPosClanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtPasPosClanActionPerformed
        for (int i = 0; i < _tournament.getRounds().size(); i++) {
            if (_round == _tournament.getRounds().get(i)) {
                jdgRanking jdg = new jdgRanking(MainFrame.getMainFrame(), true, _round, i + 1, _tournament, jdgRanking.RANKING_PASSER, 2);
                jdg.setVisible(true);
                break;
            }
        }
    }//GEN-LAST:event_jbtPasPosClanActionPerformed

    private void jbtPasNegClanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtPasNegClanActionPerformed
        for (int i = 0; i < _tournament.getRounds().size(); i++) {
            if (_round == _tournament.getRounds().get(i)) {
                jdgRanking jdg = new jdgRanking(MainFrame.getMainFrame(), true, _round, i + 1, _tournament, jdgRanking.RANKING_PASSED, 2);
                jdg.setVisible(true);
                break;
            }
        }
    }//GEN-LAST:event_jbtPasNegClanActionPerformed

    private void jbtIntPosClanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtIntPosClanActionPerformed
        for (int i = 0; i < _tournament.getRounds().size(); i++) {
            if (_round == _tournament.getRounds().get(i)) {
                jdgRanking jdg = new jdgRanking(MainFrame.getMainFrame(), true, _round, i + 1, _tournament, jdgRanking.RANKING_INTERCEPTER, 2);
                jdg.setVisible(true);
                break;
            }
        }
    }//GEN-LAST:event_jbtIntPosClanActionPerformed

    private void jbtIntNegClanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtIntNegClanActionPerformed
        for (int i = 0; i < _tournament.getRounds().size(); i++) {
            if (_round == _tournament.getRounds().get(i)) {
                jdgRanking jdg = new jdgRanking(MainFrame.getMainFrame(), true, _round, i + 1, _tournament, jdgRanking.RANKING_INTERCEPTER, 2);
                jdg.setVisible(true);
                break;
            }
        }
    }//GEN-LAST:event_jbtIntNegClanActionPerformed

    private void jbtGGlobalClanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtGGlobalClanActionPerformed
       for (int i = 0; i < _tournament.getRounds().size(); i++) {
            if (_round == _tournament.getRounds().get(i)) {
                jdgGlobal jdg = new jdgGlobal(MainFrame.getMainFrame(), true, _round, i + 1, _tournament, 2);
                jdg.setVisible(true);
                break;
            }
        }
    }//GEN-LAST:event_jbtGGlobalClanActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane18;
    private javax.swing.JScrollPane jScrollPane19;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JButton jbtFoulNegClan;
    private javax.swing.JButton jbtFoulPosClan;
    private javax.swing.JButton jbtGGlobalClan;
    private javax.swing.JButton jbtGeneralClan;
    private javax.swing.JButton jbtIntNegClan;
    private javax.swing.JButton jbtIntPosClan;
    private javax.swing.JButton jbtPasNegClan;
    private javax.swing.JButton jbtPasPosClan;
    private javax.swing.JButton jbtScoreNegClan;
    private javax.swing.JButton jbtScorePosClan;
    private javax.swing.JButton jbtSorNegClan;
    private javax.swing.JButton jbtSorPosClan;
    private javax.swing.JPanel jpnClan;
    private javax.swing.JTable jtbMostFoulClan;
    private javax.swing.JTable jtbMostFoulNegClan;
    private javax.swing.JTable jtbMostIntClan;
    private javax.swing.JTable jtbMostIntNegClan;
    private javax.swing.JTable jtbMostPasClan;
    private javax.swing.JTable jtbMostPasNegClan;
    private javax.swing.JTable jtbMostSorClan;
    private javax.swing.JTable jtbMostSorNegClan;
    private javax.swing.JTable jtbMostTdClan;
    private javax.swing.JTable jtbMostTdNegClan;
    private javax.swing.JTable jtbRankingClan;
    // End of variables declaration//GEN-END:variables

    public void update() {

        Vector<Round> v = new Vector<Round>();
        for (int i = 0; i < _tournament.getRounds().size(); i++) {
            if (_tournament.getRounds().get(i).getHeure().before(_round.getHeure())) {
                v.add(_tournament.getRounds().get(i));
            }
        }
        v.add(_round);

        mjtAnnexRankClan mTdPosClan = new mjtAnnexRankClan(v, mjtAnnexRankIndiv.C_MOST_TD_POS, _tournament.getClans(), false, _tournament.getParams()._ranking1, _tournament.getParams()._ranking2, _tournament.getParams()._ranking3, _tournament.getParams()._ranking4, _tournament.getParams()._ranking5);
        mjtAnnexRankClan mTdNegClan = new mjtAnnexRankClan(v, mjtAnnexRankIndiv.C_MOST_TD_NEG, _tournament.getClans(), false, _tournament.getParams()._ranking1, _tournament.getParams()._ranking2, _tournament.getParams()._ranking3, _tournament.getParams()._ranking4, _tournament.getParams()._ranking5);

        mjtAnnexRankClan mSorPosClan = new mjtAnnexRankClan(v, mjtAnnexRankIndiv.C_MOST_SOR_POS, _tournament.getClans(), false, _tournament.getParams()._ranking1, _tournament.getParams()._ranking2, _tournament.getParams()._ranking3, _tournament.getParams()._ranking4, _tournament.getParams()._ranking5);
        mjtAnnexRankClan mSorNegClan = new mjtAnnexRankClan(v, mjtAnnexRankIndiv.C_MOST_SOR_NEG, _tournament.getClans(), false, _tournament.getParams()._ranking1, _tournament.getParams()._ranking2, _tournament.getParams()._ranking3, _tournament.getParams()._ranking4, _tournament.getParams()._ranking5);
        mjtAnnexRankClan mFoulPosClan = new mjtAnnexRankClan(v, mjtAnnexRankIndiv.C_MOST_FOUL_POS, _tournament.getClans(), false, _tournament.getParams()._ranking1, _tournament.getParams()._ranking2, _tournament.getParams()._ranking3, _tournament.getParams()._ranking4, _tournament.getParams()._ranking5);
        mjtAnnexRankClan mFoulNegClan = new mjtAnnexRankClan(v, mjtAnnexRankIndiv.C_MOST_FOUL_NEG, _tournament.getClans(), false, _tournament.getParams()._ranking1, _tournament.getParams()._ranking2, _tournament.getParams()._ranking3, _tournament.getParams()._ranking4, _tournament.getParams()._ranking5);

        mjtAnnexRankClan mPasPosClan = new mjtAnnexRankClan(v, mjtAnnexRankIndiv.C_MOST_PAS_POS, _tournament.getClans(), false, _tournament.getParams()._ranking1, _tournament.getParams()._ranking2, _tournament.getParams()._ranking3, _tournament.getParams()._ranking4, _tournament.getParams()._ranking5);
        mjtAnnexRankClan mPasNegClan = new mjtAnnexRankClan(v, mjtAnnexRankIndiv.C_MOST_PAS_NEG, _tournament.getClans(), false, _tournament.getParams()._ranking1, _tournament.getParams()._ranking2, _tournament.getParams()._ranking3, _tournament.getParams()._ranking4, _tournament.getParams()._ranking5);
        mjtAnnexRankClan mIntPosClan = new mjtAnnexRankClan(v, mjtAnnexRankIndiv.C_MOST_INT_POS, _tournament.getClans(), false, _tournament.getParams()._ranking1, _tournament.getParams()._ranking2, _tournament.getParams()._ranking3, _tournament.getParams()._ranking4, _tournament.getParams()._ranking5);
        mjtAnnexRankClan mIntNegClan = new mjtAnnexRankClan(v, mjtAnnexRankIndiv.C_MOST_INT_NEG, _tournament.getClans(), false, _tournament.getParams()._ranking1, _tournament.getParams()._ranking2, _tournament.getParams()._ranking3, _tournament.getParams()._ranking4, _tournament.getParams()._ranking5);

        jtbMostTdClan.setModel(mTdPosClan);
        jtbMostTdClan.setDefaultRenderer(String.class, mTdPosClan);
        jtbMostTdClan.setDefaultRenderer(Integer.class, mTdPosClan);

        jtbMostTdNegClan.setModel(mTdNegClan);
        jtbMostTdNegClan.setDefaultRenderer(String.class, mTdNegClan);
        jtbMostTdNegClan.setDefaultRenderer(Integer.class, mTdNegClan);

        jtbMostSorClan.setModel(mSorPosClan);
        jtbMostSorClan.setDefaultRenderer(String.class, mSorPosClan);
        jtbMostSorClan.setDefaultRenderer(Integer.class, mSorPosClan);
        jtbMostSorNegClan.setModel(mSorNegClan);
        jtbMostSorNegClan.setDefaultRenderer(String.class, mSorNegClan);
        jtbMostSorNegClan.setDefaultRenderer(Integer.class, mSorNegClan);
        jtbMostFoulClan.setModel(mFoulPosClan);
        jtbMostFoulClan.setDefaultRenderer(String.class, mFoulPosClan);
        jtbMostFoulClan.setDefaultRenderer(Integer.class, mFoulPosClan);
        jtbMostFoulNegClan.setModel(mFoulNegClan);
        jtbMostFoulNegClan.setDefaultRenderer(String.class, mFoulNegClan);
        jtbMostFoulNegClan.setDefaultRenderer(Integer.class, mFoulNegClan);

        jtbMostPasClan.setModel(mPasPosClan);
        jtbMostPasClan.setDefaultRenderer(String.class, mPasPosClan);
        jtbMostPasClan.setDefaultRenderer(Integer.class, mPasPosClan);
        jtbMostPasNegClan.setModel(mPasNegClan);
        jtbMostPasNegClan.setDefaultRenderer(String.class, mPasNegClan);
        jtbMostPasNegClan.setDefaultRenderer(Integer.class, mPasNegClan);

        jtbMostIntClan.setModel(mIntPosClan);
        jtbMostIntClan.setDefaultRenderer(String.class, mIntPosClan);
        jtbMostIntClan.setDefaultRenderer(Integer.class, mIntPosClan);
        jtbMostIntNegClan.setModel(mIntNegClan);
        jtbMostIntNegClan.setDefaultRenderer(String.class, mIntNegClan);
        jtbMostIntNegClan.setDefaultRenderer(Integer.class, mIntNegClan);


        mjtRankingClan mRankingClan = null;

        mRankingClan = new mjtRankingClan(v, _tournament.getParams()._ranking1, _tournament.getParams()._ranking2, _tournament.getParams()._ranking3, _tournament.getParams()._ranking4, _tournament.getParams()._ranking5, _tournament.getClans());

        jtbRankingClan.setModel(mRankingClan);
        jtbRankingClan.setDefaultRenderer(String.class, mRankingClan);
        jtbRankingClan.setDefaultRenderer(Integer.class, mRankingClan);

        setColumnSize(jtbRankingClan);

        setColumnSize(jtbRankingClan);
        setColumnSize(jtbMostFoulNegClan);
        setColumnSize(jtbMostFoulClan);
        setColumnSize(jtbMostSorNegClan);
        setColumnSize(jtbMostSorClan);
        setColumnSize(jtbMostTdNegClan);
        setColumnSize(jtbMostTdClan);

        setColumnSize(jtbMostPasNegClan);
        setColumnSize(jtbMostPasClan);
        setColumnSize(jtbMostIntNegClan);
        setColumnSize(jtbMostIntClan);

    }

    public void setColumnSize(JTable t) {
        FontMetrics fm = t.getFontMetrics(t.getFont());
        for (int i = 0; i < t.getColumnCount(); i++) {
            int max = 0;
            for (int j = 0; j < t.getRowCount(); j++) {
                Object value = t.getValueAt(j, i);
                String tmp = "";
                if (value instanceof String) {
                    tmp = (String) value;
                }
                if (value instanceof Integer) {
                    tmp = "" + (Integer) value;
                }
                int taille = fm.stringWidth(tmp);
                if (taille > max) {
                    max = taille;
                }
            }
            String nom = (String) t.getColumnModel().getColumn(i).getIdentifier();
            int taille = fm.stringWidth(nom);
            if (taille > max) {
                max = taille;
            }
            t.getColumnModel().getColumn(i).setPreferredWidth(max + 10);
        }
    }
}
