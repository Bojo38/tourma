/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JPNTeamRound.java
 *
 * Created on 20 juil. 2010, 10:47:49
 */
package tourma;

import java.awt.BorderLayout;
import tourma.tableModel.mjtRankingTeam;
import tourma.tableModel.mjtAnnexRankTeam;
import tourma.tableModel.mjtAnnexRank;
import java.awt.FontMetrics;
import java.util.HashMap;
import java.util.Vector;
import javax.swing.JTable;
import tourma.data.Round;
import tourma.data.Tournament;
import javax.swing.JScrollPane;
import tourma.data.Criteria;
import tourma.data.Match;
import tourma.data.Parameters;
import tourma.data.Team;
import tourma.tableModel.mjtMatchTeams;
import tourma.views.report.jdgGlobal;
import tourma.views.report.jdgRanking;
import tourma.views.report.jdgRound;

/**
 *
 * @author Frederic Berger
 */
public class JPNTeamRound extends javax.swing.JPanel {

    Round _round;
    Tournament _tournament;
    JTable _jtbTeamMatch = null;
    public boolean _round_only=false;

    /** Creates new form JPNTeamRound */
    public JPNTeamRound(Round r, Tournament t) {
        initComponents();
        _round = r;
        _tournament = t;

        if (_tournament.getParams()._teamPairing == 1) {
            JScrollPane jsp = new JScrollPane();
            _jtbTeamMatch = new JTable();
            jsp.setViewportView(_jtbTeamMatch);
            jtpTeams.add("Matchs", jsp);
            /*jpnTeam.add(jsp, BorderLayout.EAST);*/
            jbtShowMatchTeam.setVisible(true);
        } else {
            jbtShowMatchTeam.setVisible(false);
        }

        for (int i = 0; i < _tournament.getParams()._criterias.size(); i++) {
            Criteria criteria = _tournament.getParams()._criterias.get(i);
            JPNAnnexRanking jpn = new JPNAnnexRanking(criteria._name,
                    criteria, t, _round, false, true);
            jtpAnnexRank.add(criteria._name, jpn);
        }

        update();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jpnTeam = new javax.swing.JPanel();
        jtpTeams = new javax.swing.JTabbedPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtbRankingTeam = new javax.swing.JTable();
        jPanel8 = new javax.swing.JPanel();
        jbtGeneralTeam = new javax.swing.JButton();
        jbtGlobal = new javax.swing.JButton();
        jbtShowMatchTeam = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jtpAnnexRank = new javax.swing.JTabbedPane();

        setLayout(new java.awt.BorderLayout());

        jSplitPane1.setDividerLocation(600);

        jpnTeam.setLayout(new java.awt.BorderLayout());

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("tourma/languages/language"); // NOI18N
        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("GeneralRankingKey"))); // NOI18N
        jScrollPane3.setPreferredSize(new java.awt.Dimension(466, 300));

        jtbRankingTeam.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtbRankingTeam.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(jtbRankingTeam);

        jtpTeams.addTab("Classement", jScrollPane3);

        jpnTeam.add(jtpTeams, java.awt.BorderLayout.CENTER);

        jbtGeneralTeam.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tourma/images/Document.png"))); // NOI18N
        jbtGeneralTeam.setText(bundle.getString("GeneralRankingKey")); // NOI18N
        jbtGeneralTeam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtGeneralTeamActionPerformed(evt);
            }
        });
        jPanel8.add(jbtGeneralTeam);

        jbtGlobal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tourma/images/Document.png"))); // NOI18N
        jbtGlobal.setText(bundle.getString("GlobalRankingKey")); // NOI18N
        jbtGlobal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtGlobalActionPerformed(evt);
            }
        });
        jPanel8.add(jbtGlobal);

        jbtShowMatchTeam.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tourma/images/Document.png"))); // NOI18N
        jbtShowMatchTeam.setText(bundle.getString("TeamMatchViewKey")); // NOI18N
        jbtShowMatchTeam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtShowMatchTeamActionPerformed(evt);
            }
        });
        jPanel8.add(jbtShowMatchTeam);

        jpnTeam.add(jPanel8, java.awt.BorderLayout.SOUTH);

        jSplitPane1.setLeftComponent(jpnTeam);

        jPanel1.setLayout(new java.awt.BorderLayout());
        jPanel1.add(jtpAnnexRank, java.awt.BorderLayout.CENTER);

        jSplitPane1.setRightComponent(jPanel1);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jbtGeneralTeamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtGeneralTeamActionPerformed
        for (int i = 0; i < _tournament.getRounds().size(); i++) {
            if (_round == _tournament.getRounds().get(i)) {
                mjtRankingTeam model = new mjtRankingTeam(_tournament.getParams()._team_victory_only, i, _tournament.getParams()._ranking1, _tournament.getParams()._ranking2, _tournament.getParams()._ranking3, _tournament.getParams()._ranking4, _tournament.getParams()._ranking5, _tournament.getTeams(),_round_only);
                jdgRanking jdg = new jdgRanking(MainFrame.getMainFrame(), true, "General par Equipe", i + 1, _tournament, model, 0);
                jdg.setVisible(true);
                break;
            }
        }
}//GEN-LAST:event_jbtGeneralTeamActionPerformed

    private void jbtShowMatchTeamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtShowMatchTeamActionPerformed
        for (int i = 0; i < _tournament.getRounds().size(); i++) {
            if (_round == _tournament.getRounds().get(i)) {
                jdgRound jdg = new jdgRound(MainFrame.getMainFrame(), true, _round, i + 1, _tournament, true, true);
                jdg.setVisible(true);
                break;
            }
        }
}//GEN-LAST:event_jbtShowMatchTeamActionPerformed

    private void jbtGlobalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtGlobalActionPerformed
         for (int i = 0; i < _tournament.getRounds().size(); i++) {
            if (_round == _tournament.getRounds().get(i)) {
                mjtRankingTeam model = new mjtRankingTeam(_tournament.getParams()._team_victory_only, i, _tournament.getParams()._ranking1, _tournament.getParams()._ranking2, _tournament.getParams()._ranking3, _tournament.getParams()._ranking4, _tournament.getParams()._ranking5, _tournament.getTeams(),_round_only);
                HashMap<Criteria, mjtAnnexRank> annexForRankings = new HashMap<Criteria, mjtAnnexRank>();
                HashMap<Criteria, mjtAnnexRank> annexAgainstRankings = new  HashMap<Criteria, mjtAnnexRank>();
                for (int j = 0; j < _tournament.getParams()._criterias.size(); j++) {
                    Criteria crit=_tournament.getParams()._criterias.get(j);
                    mjtAnnexRank annex=new mjtAnnexRankTeam(i, crit, Parameters.C_RANKING_SUBTYPE_POSITIVE,
                            _tournament.getTeams(), true,
                            _tournament.getParams()._ranking1, _tournament.getParams()._ranking2,
                            _tournament.getParams()._ranking3, _tournament.getParams()._ranking4,
                            _tournament.getParams()._ranking5,_round_only);
                    annexForRankings.put(crit,annex);
                    annex=new mjtAnnexRankTeam(i, crit, Parameters.C_RANKING_SUBTYPE_NEGATIVE,
                            _tournament.getTeams(), true,
                            _tournament.getParams()._ranking1, _tournament.getParams()._ranking2,
                            _tournament.getParams()._ranking3, _tournament.getParams()._ranking4,
                            _tournament.getParams()._ranking5,_round_only);
                    annexAgainstRankings.put(crit,annex);
                }
                jdgGlobal jdg = new jdgGlobal(MainFrame.getMainFrame(), true, i + 1, _tournament, model, annexForRankings, annexAgainstRankings, false, false);
                jdg.setVisible(true);
                break;
            }
        }
    }//GEN-LAST:event_jbtGlobalActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JButton jbtGeneralTeam;
    private javax.swing.JButton jbtGlobal;
    private javax.swing.JButton jbtShowMatchTeam;
    private javax.swing.JPanel jpnTeam;
    private javax.swing.JTable jtbRankingTeam;
    private javax.swing.JTabbedPane jtpAnnexRank;
    private javax.swing.JTabbedPane jtpTeams;
    // End of variables declaration//GEN-END:variables

    public void update() {

        Vector<Round> v = new Vector<Round>();
        for (int i = 0; i < _tournament.getRounds().size(); i++) {
            if (_tournament.getRounds().get(i).getHeure().before(_round.getHeure())) {
                v.add(_tournament.getRounds().get(i));
            }
        }
        v.add(_round);


        for (int i = 0; i < jtpAnnexRank.getComponentCount(); i++) {
            JPNAnnexRanking jpn = (JPNAnnexRanking) jtpAnnexRank.getComponent(i);
            jpn.update();
        }

        mjtRankingTeam mRankingTeam = null;
        if (_tournament.getParams()._team_victory_only) {
            mRankingTeam = new mjtRankingTeam(true,v.size()-1, _tournament.getParams()._ranking1_team, _tournament.getParams()._ranking2_team, _tournament.getParams()._ranking3_team, _tournament.getParams()._ranking4_team, _tournament.getParams()._ranking5_team, _tournament.getTeams(),_round_only);
        } else {
            mRankingTeam = new mjtRankingTeam(false,v.size()-1, _tournament.getParams()._ranking1, _tournament.getParams()._ranking2, _tournament.getParams()._ranking3, _tournament.getParams()._ranking4, _tournament.getParams()._ranking5, _tournament.getTeams(),_round_only);
        }
        jtbRankingTeam.setModel(mRankingTeam);
        jtbRankingTeam.setDefaultRenderer(String.class, mRankingTeam);
        jtbRankingTeam.setDefaultRenderer(Integer.class, mRankingTeam);

        setColumnSize(jtbRankingTeam);

        if (_jtbTeamMatch != null) {
            Vector<Team> teams = new Vector<Team>();
            for (int i = 0; i < _round.getMatchs().size(); i++) {
                Match m = _round.getMatchs().get(i);
                Team team1 = m._coach1._teamMates;
                Team team2 = m._coach2._teamMates;
                if (!teams.contains(team1)) {
                    teams.add(team1);
                }
                if (!teams.contains(team2)) {
                    teams.add(team2);
                }
            }
            mjtMatchTeams model = new mjtMatchTeams(teams, _round);
            _jtbTeamMatch.setModel(model);
            _jtbTeamMatch.setDefaultRenderer(String.class, model);
            _jtbTeamMatch.setDefaultRenderer(Integer.class, model);
            setColumnSize(_jtbTeamMatch);

        }

    }



    public void setColumnSize(JTable t) {
        FontMetrics fm = t.getFontMetrics(t.getFont());
        for (int i = 0; i < t.getColumnCount(); i++) {
            int max = 0;
            for (int j = 0; j < t.getRowCount(); j++) {
                Object value = t.getValueAt(j, i);
                String tmp = "";
                if (value instanceof String) {
                    tmp = (String) value;
                }
                if (value instanceof Integer) {
                    tmp = "" + (Integer) value;
                }
                int taille = fm.stringWidth(tmp);
                if (taille > max) {
                    max = taille;
                }
            }
            String nom = (String) t.getColumnModel().getColumn(i).getIdentifier();
            int taille = fm.stringWidth(nom);
            if (taille > max) {
                max = taille;
            }
            t.getColumnModel().getColumn(i).setPreferredWidth(max + 10);
        }
    }
}
