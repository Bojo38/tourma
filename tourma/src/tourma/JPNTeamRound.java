/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JPNTeamRound.java
 *
 * Created on 20 juil. 2010, 10:47:49
 */
package tourma;

import java.awt.BorderLayout;
import tourma.tableModel.mjtAnnexRankIndiv;
import tourma.tableModel.mjtRankingTeam;
import tourma.tableModel.mjtAnnexRankTeam;
import java.awt.FontMetrics;
import java.util.Vector;
import javax.swing.JTable;
import tourma.data.Round;
import tourma.data.Tournament;
import javax.swing.JScrollPane;
import tourma.data.Match;
import tourma.data.Team;
import tourma.tableModel.mjtMatchTeams;
import tourma.views.report.jdgGlobal;
import tourma.views.report.jdgRanking;
import tourma.views.report.jdgRound;

/**
 *
 * @author Frederic Berger
 */
public class JPNTeamRound extends javax.swing.JPanel {

    Round _round;
    Tournament _tournament;
    JTable _jtbTeamMatch = null;

    /** Creates new form JPNTeamRound */
    public JPNTeamRound(Round r, Tournament t) {
        initComponents();
        _round = r;
        _tournament = t;

        if (_tournament.getParams()._teamPairing == 1) {
            JScrollPane jsp = new JScrollPane();
            _jtbTeamMatch = new JTable();
            jsp.setViewportView(_jtbTeamMatch);
            jpnTeam.add(jsp, BorderLayout.EAST);
            jbtShowMatchTeam.setVisible(true);
        } else {
            jbtShowMatchTeam.setVisible(false);
        }

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel8 = new javax.swing.JPanel();
        jbtGeneralTeam = new javax.swing.JButton();
        jbtScorePosTeam = new javax.swing.JButton();
        jbtScoreNegTeam = new javax.swing.JButton();
        jbtSorPosTeam = new javax.swing.JButton();
        jbtSorNegTeam = new javax.swing.JButton();
        jbtFoulPosTeam = new javax.swing.JButton();
        jbtFoulNegTeam = new javax.swing.JButton();
        jbtShowMatchTeam = new javax.swing.JButton();
        jbtGlobal = new javax.swing.JButton();
        jbtPasPosTeam = new javax.swing.JButton();
        jbtPasNegTeam = new javax.swing.JButton();
        jbtIntPosTeam = new javax.swing.JButton();
        jbtIntNegTeam = new javax.swing.JButton();
        jpnTeam = new javax.swing.JPanel();
        jSplitPane2 = new javax.swing.JSplitPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtbRankingTeam = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jtbMostTdTeam = new javax.swing.JTable();
        jScrollPane11 = new javax.swing.JScrollPane();
        jtbMostSorTeam = new javax.swing.JTable();
        jScrollPane12 = new javax.swing.JScrollPane();
        jtbMostFoulTeam = new javax.swing.JTable();
        jScrollPane16 = new javax.swing.JScrollPane();
        jtbMostPasTeam = new javax.swing.JTable();
        jScrollPane18 = new javax.swing.JScrollPane();
        jtbMostIntTeam = new javax.swing.JTable();
        jScrollPane13 = new javax.swing.JScrollPane();
        jtbMostTdNegTeam = new javax.swing.JTable();
        jScrollPane14 = new javax.swing.JScrollPane();
        jtbMostSorNegTeam = new javax.swing.JTable();
        jScrollPane15 = new javax.swing.JScrollPane();
        jtbMostFoulNegTeam = new javax.swing.JTable();
        jScrollPane17 = new javax.swing.JScrollPane();
        jtbMostPasNegTeam = new javax.swing.JTable();
        jScrollPane19 = new javax.swing.JScrollPane();
        jtbMostIntNegTeam = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        jbtGeneralTeam.setText("Général");
        jbtGeneralTeam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtGeneralTeamActionPerformed(evt);
            }
        });
        jPanel8.add(jbtGeneralTeam);

        jbtScorePosTeam.setText("Scoreur");
        jbtScorePosTeam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtScorePosTeamActionPerformed(evt);
            }
        });
        jPanel8.add(jbtScorePosTeam);

        jbtScoreNegTeam.setText("Passoire");
        jbtScoreNegTeam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtScoreNegTeamActionPerformed(evt);
            }
        });
        jPanel8.add(jbtScoreNegTeam);

        jbtSorPosTeam.setText("Destructeur");
        jbtSorPosTeam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtSorPosTeamActionPerformed(evt);
            }
        });
        jPanel8.add(jbtSorPosTeam);

        jbtSorNegTeam.setText("Punching Ball");
        jbtSorNegTeam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtSorNegTeamActionPerformed(evt);
            }
        });
        jPanel8.add(jbtSorNegTeam);

        jbtFoulPosTeam.setText("Crampon");
        jbtFoulPosTeam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtFoulPosTeamActionPerformed(evt);
            }
        });
        jPanel8.add(jbtFoulPosTeam);

        jbtFoulNegTeam.setText("Paillasson");
        jbtFoulNegTeam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtFoulNegTeamActionPerformed(evt);
            }
        });
        jPanel8.add(jbtFoulNegTeam);

        jbtShowMatchTeam.setText("Vue des Matchs par équipe");
        jbtShowMatchTeam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtShowMatchTeamActionPerformed(evt);
            }
        });
        jPanel8.add(jbtShowMatchTeam);

        jbtGlobal.setText("Global");
        jbtGlobal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtGlobalActionPerformed(evt);
            }
        });
        jPanel8.add(jbtGlobal);

        jbtPasPosTeam.setText("Main de Dieu");
        jbtPasPosTeam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtPasPosTeamActionPerformed(evt);
            }
        });
        jPanel8.add(jbtPasPosTeam);

        jbtPasNegTeam.setText("Hypnotisé");
        jbtPasNegTeam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtPasNegTeamActionPerformed(evt);
            }
        });
        jPanel8.add(jbtPasNegTeam);

        jbtIntPosTeam.setText("Intercepteur");
        jbtIntPosTeam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtIntPosTeamActionPerformed(evt);
            }
        });
        jPanel8.add(jbtIntPosTeam);

        jbtIntNegTeam.setText("Daltonien");
        jbtIntNegTeam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtIntNegTeamActionPerformed(evt);
            }
        });
        jPanel8.add(jbtIntNegTeam);

        add(jPanel8, java.awt.BorderLayout.SOUTH);

        jpnTeam.setLayout(new java.awt.BorderLayout());

        jSplitPane2.setDividerLocation(200);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder("Classement général"));
        jScrollPane3.setPreferredSize(new java.awt.Dimension(466, 300));

        jtbRankingTeam.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtbRankingTeam.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(jtbRankingTeam);

        jSplitPane2.setBottomComponent(jScrollPane3);

        jPanel7.setLayout(new java.awt.GridLayout(2, 5));

        jScrollPane7.setBorder(javax.swing.BorderFactory.createTitledBorder("Scoreur"));

        jtbMostTdTeam.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane7.setViewportView(jtbMostTdTeam);

        jPanel7.add(jScrollPane7);

        jScrollPane11.setBorder(javax.swing.BorderFactory.createTitledBorder("Desctructeur"));

        jtbMostSorTeam.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane11.setViewportView(jtbMostSorTeam);

        jPanel7.add(jScrollPane11);

        jScrollPane12.setBorder(javax.swing.BorderFactory.createTitledBorder("Crampon"));

        jtbMostFoulTeam.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane12.setViewportView(jtbMostFoulTeam);

        jPanel7.add(jScrollPane12);

        jScrollPane16.setBorder(javax.swing.BorderFactory.createTitledBorder("Main de Dieu"));

        jtbMostPasTeam.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane16.setViewportView(jtbMostPasTeam);

        jPanel7.add(jScrollPane16);

        jScrollPane18.setBorder(javax.swing.BorderFactory.createTitledBorder("Intercepteur"));

        jtbMostIntTeam.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane18.setViewportView(jtbMostIntTeam);

        jPanel7.add(jScrollPane18);

        jScrollPane13.setBorder(javax.swing.BorderFactory.createTitledBorder("Passoire"));

        jtbMostTdNegTeam.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane13.setViewportView(jtbMostTdNegTeam);

        jPanel7.add(jScrollPane13);

        jScrollPane14.setBorder(javax.swing.BorderFactory.createTitledBorder("Punching-Ball"));

        jtbMostSorNegTeam.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane14.setViewportView(jtbMostSorNegTeam);

        jPanel7.add(jScrollPane14);

        jScrollPane15.setBorder(javax.swing.BorderFactory.createTitledBorder("Paillasson"));

        jtbMostFoulNegTeam.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane15.setViewportView(jtbMostFoulNegTeam);

        jPanel7.add(jScrollPane15);

        jScrollPane17.setBorder(javax.swing.BorderFactory.createTitledBorder("Hypnotisé"));

        jtbMostPasNegTeam.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane17.setViewportView(jtbMostPasNegTeam);

        jPanel7.add(jScrollPane17);

        jScrollPane19.setBorder(javax.swing.BorderFactory.createTitledBorder("Daltonien"));

        jtbMostIntNegTeam.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane19.setViewportView(jtbMostIntNegTeam);

        jPanel7.add(jScrollPane19);

        jSplitPane2.setTopComponent(jPanel7);

        jpnTeam.add(jSplitPane2, java.awt.BorderLayout.CENTER);

        add(jpnTeam, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jbtGeneralTeamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtGeneralTeamActionPerformed
        for (int i = 0; i < _tournament.getRounds().size(); i++) {
            if (_round == _tournament.getRounds().get(i)) {
                jdgRanking jdg = new jdgRanking(MainFrame.getMainFrame(), true, _round, i + 1, _tournament, jdgRanking.RANKING_GENERAL, true);
                jdg.setVisible(true);
                break;
            }
        }
}//GEN-LAST:event_jbtGeneralTeamActionPerformed

    private void jbtScorePosTeamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtScorePosTeamActionPerformed
        for (int i = 0; i < _tournament.getRounds().size(); i++) {
            if (_round == _tournament.getRounds().get(i)) {
                jdgRanking jdg = new jdgRanking(MainFrame.getMainFrame(), true, _round, i + 1, _tournament, jdgRanking.RANKING_SCORER, true);
                jdg.setVisible(true);
                break;
            }
        }
}//GEN-LAST:event_jbtScorePosTeamActionPerformed

    private void jbtScoreNegTeamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtScoreNegTeamActionPerformed
        for (int i = 0; i < _tournament.getRounds().size(); i++) {
            if (_round == _tournament.getRounds().get(i)) {
                jdgRanking jdg = new jdgRanking(MainFrame.getMainFrame(), true, _round, i + 1, _tournament, jdgRanking.RANKING_SCORED, true);
                jdg.setVisible(true);
                break;
            }
        }
}//GEN-LAST:event_jbtScoreNegTeamActionPerformed

    private void jbtSorPosTeamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtSorPosTeamActionPerformed
        for (int i = 0; i < _tournament.getRounds().size(); i++) {
            if (_round == _tournament.getRounds().get(i)) {
                jdgRanking jdg = new jdgRanking(MainFrame.getMainFrame(), true, _round, i + 1, _tournament, jdgRanking.RANKING_DESTROYER, true);
                jdg.setVisible(true);
                break;
            }
        }
}//GEN-LAST:event_jbtSorPosTeamActionPerformed

    private void jbtSorNegTeamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtSorNegTeamActionPerformed
        for (int i = 0; i < _tournament.getRounds().size(); i++) {
            if (_round == _tournament.getRounds().get(i)) {
                jdgRanking jdg = new jdgRanking(MainFrame.getMainFrame(), true, _round, i + 1, _tournament, jdgRanking.RANKING_DESTROYED, true);
                jdg.setVisible(true);
                break;
            }
        }
}//GEN-LAST:event_jbtSorNegTeamActionPerformed

    private void jbtFoulPosTeamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtFoulPosTeamActionPerformed
        for (int i = 0; i < _tournament.getRounds().size(); i++) {
            if (_round == _tournament.getRounds().get(i)) {
                jdgRanking jdg = new jdgRanking(MainFrame.getMainFrame(), true, _round, i + 1, _tournament, jdgRanking.RANKING_FOULER, true);
                jdg.setVisible(true);
                break;
            }
        }
}//GEN-LAST:event_jbtFoulPosTeamActionPerformed

    private void jbtFoulNegTeamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtFoulNegTeamActionPerformed
        for (int i = 0; i < _tournament.getRounds().size(); i++) {
            if (_round == _tournament.getRounds().get(i)) {
                jdgRanking jdg = new jdgRanking(MainFrame.getMainFrame(), true, _round, i + 1, _tournament, jdgRanking.RANKING_FOULED, true);
                jdg.setVisible(true);
                break;
            }
        }
}//GEN-LAST:event_jbtFoulNegTeamActionPerformed

    private void jbtShowMatchTeamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtShowMatchTeamActionPerformed
        for (int i = 0; i < _tournament.getRounds().size(); i++) {
            if (_round == _tournament.getRounds().get(i)) {
                jdgRound jdg = new jdgRound(MainFrame.getMainFrame(), true, _round, i + 1, _tournament, true, true);
                jdg.setVisible(true);
                break;
            }
        }
}//GEN-LAST:event_jbtShowMatchTeamActionPerformed

    private void jbtGlobalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtGlobalActionPerformed
         for (int i = 0; i < _tournament.getRounds().size(); i++) {
            if (_round == _tournament.getRounds().get(i)) {
                jdgGlobal jdg = new jdgGlobal(MainFrame.getMainFrame(), true, _round, i + 1, _tournament, true);
                jdg.setVisible(true);
                break;
            }
        }
    }//GEN-LAST:event_jbtGlobalActionPerformed

    private void jbtPasPosTeamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtPasPosTeamActionPerformed
         for (int i = 0; i < _tournament.getRounds().size(); i++) {
            if (_round == _tournament.getRounds().get(i)) {
                jdgRanking jdg = new jdgRanking(MainFrame.getMainFrame(), true, _round, i + 1, _tournament, jdgRanking.RANKING_PASSER, true);
                jdg.setVisible(true);
                break;
            }
        }
    }//GEN-LAST:event_jbtPasPosTeamActionPerformed

    private void jbtPasNegTeamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtPasNegTeamActionPerformed
        for (int i = 0; i < _tournament.getRounds().size(); i++) {
            if (_round == _tournament.getRounds().get(i)) {
                jdgRanking jdg = new jdgRanking(MainFrame.getMainFrame(), true, _round, i + 1, _tournament, jdgRanking.RANKING_PASSED, true);
                jdg.setVisible(true);
                break;
            }
        }
    }//GEN-LAST:event_jbtPasNegTeamActionPerformed

    private void jbtIntPosTeamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtIntPosTeamActionPerformed
        for (int i = 0; i < _tournament.getRounds().size(); i++) {
            if (_round == _tournament.getRounds().get(i)) {
                jdgRanking jdg = new jdgRanking(MainFrame.getMainFrame(), true, _round, i + 1, _tournament, jdgRanking.RANKING_INTERCEPTER, true);
                jdg.setVisible(true);
                break;
            }
        }
    }//GEN-LAST:event_jbtIntPosTeamActionPerformed

    private void jbtIntNegTeamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtIntNegTeamActionPerformed
        for (int i = 0; i < _tournament.getRounds().size(); i++) {
            if (_round == _tournament.getRounds().get(i)) {
                jdgRanking jdg = new jdgRanking(MainFrame.getMainFrame(), true, _round, i + 1, _tournament, jdgRanking.RANKING_INTERCEPTER, true);
                jdg.setVisible(true);
                break;
            }
        }
    }//GEN-LAST:event_jbtIntNegTeamActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane18;
    private javax.swing.JScrollPane jScrollPane19;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JButton jbtFoulNegTeam;
    private javax.swing.JButton jbtFoulPosTeam;
    private javax.swing.JButton jbtGeneralTeam;
    private javax.swing.JButton jbtGlobal;
    private javax.swing.JButton jbtIntNegTeam;
    private javax.swing.JButton jbtIntPosTeam;
    private javax.swing.JButton jbtPasNegTeam;
    private javax.swing.JButton jbtPasPosTeam;
    private javax.swing.JButton jbtScoreNegTeam;
    private javax.swing.JButton jbtScorePosTeam;
    private javax.swing.JButton jbtShowMatchTeam;
    private javax.swing.JButton jbtSorNegTeam;
    private javax.swing.JButton jbtSorPosTeam;
    private javax.swing.JPanel jpnTeam;
    private javax.swing.JTable jtbMostFoulNegTeam;
    private javax.swing.JTable jtbMostFoulTeam;
    private javax.swing.JTable jtbMostIntNegTeam;
    private javax.swing.JTable jtbMostIntTeam;
    private javax.swing.JTable jtbMostPasNegTeam;
    private javax.swing.JTable jtbMostPasTeam;
    private javax.swing.JTable jtbMostSorNegTeam;
    private javax.swing.JTable jtbMostSorTeam;
    private javax.swing.JTable jtbMostTdNegTeam;
    private javax.swing.JTable jtbMostTdTeam;
    private javax.swing.JTable jtbRankingTeam;
    // End of variables declaration//GEN-END:variables

    public void update() {

        Vector<Round> v = new Vector<Round>();
        for (int i = 0; i < _tournament.getRounds().size(); i++) {
            if (_tournament.getRounds().get(i).getHeure().before(_round.getHeure())) {
                v.add(_tournament.getRounds().get(i));
            }
        }
        v.add(_round);

        mjtAnnexRankTeam mTdPosTeam = new mjtAnnexRankTeam(v, mjtAnnexRankIndiv.C_MOST_TD_POS, _tournament.getTeams(), false, _tournament.getParams()._ranking1, _tournament.getParams()._ranking2, _tournament.getParams()._ranking3, _tournament.getParams()._ranking4, _tournament.getParams()._ranking5);
        mjtAnnexRankTeam mTdNegTeam = new mjtAnnexRankTeam(v, mjtAnnexRankIndiv.C_MOST_TD_NEG, _tournament.getTeams(), false, _tournament.getParams()._ranking1, _tournament.getParams()._ranking2, _tournament.getParams()._ranking3, _tournament.getParams()._ranking4, _tournament.getParams()._ranking5);

        mjtAnnexRankTeam mSorPosTeam = new mjtAnnexRankTeam(v, mjtAnnexRankIndiv.C_MOST_SOR_POS, _tournament.getTeams(), false, _tournament.getParams()._ranking1, _tournament.getParams()._ranking2, _tournament.getParams()._ranking3, _tournament.getParams()._ranking4, _tournament.getParams()._ranking5);
        mjtAnnexRankTeam mSorNegTeam = new mjtAnnexRankTeam(v, mjtAnnexRankIndiv.C_MOST_SOR_NEG, _tournament.getTeams(), false, _tournament.getParams()._ranking1, _tournament.getParams()._ranking2, _tournament.getParams()._ranking3, _tournament.getParams()._ranking4, _tournament.getParams()._ranking5);
        mjtAnnexRankTeam mFoulPosTeam = new mjtAnnexRankTeam(v, mjtAnnexRankIndiv.C_MOST_FOUL_POS, _tournament.getTeams(), false, _tournament.getParams()._ranking1, _tournament.getParams()._ranking2, _tournament.getParams()._ranking3, _tournament.getParams()._ranking4, _tournament.getParams()._ranking5);
        mjtAnnexRankTeam mFoulNegTeam = new mjtAnnexRankTeam(v, mjtAnnexRankIndiv.C_MOST_FOUL_NEG, _tournament.getTeams(), false, _tournament.getParams()._ranking1, _tournament.getParams()._ranking2, _tournament.getParams()._ranking3, _tournament.getParams()._ranking4, _tournament.getParams()._ranking5);

        mjtAnnexRankTeam mPasPosTeam = new mjtAnnexRankTeam(v, mjtAnnexRankIndiv.C_MOST_PAS_POS, _tournament.getTeams(), false, _tournament.getParams()._ranking1, _tournament.getParams()._ranking2, _tournament.getParams()._ranking3, _tournament.getParams()._ranking4, _tournament.getParams()._ranking5);
        mjtAnnexRankTeam mPasNegTeam = new mjtAnnexRankTeam(v, mjtAnnexRankIndiv.C_MOST_PAS_NEG, _tournament.getTeams(), false, _tournament.getParams()._ranking1, _tournament.getParams()._ranking2, _tournament.getParams()._ranking3, _tournament.getParams()._ranking4, _tournament.getParams()._ranking5);
        mjtAnnexRankTeam mIntPosTeam = new mjtAnnexRankTeam(v, mjtAnnexRankIndiv.C_MOST_INT_POS, _tournament.getTeams(), false, _tournament.getParams()._ranking1, _tournament.getParams()._ranking2, _tournament.getParams()._ranking3, _tournament.getParams()._ranking4, _tournament.getParams()._ranking5);
        mjtAnnexRankTeam mIntNegTeam = new mjtAnnexRankTeam(v, mjtAnnexRankIndiv.C_MOST_INT_NEG, _tournament.getTeams(), false, _tournament.getParams()._ranking1, _tournament.getParams()._ranking2, _tournament.getParams()._ranking3, _tournament.getParams()._ranking4, _tournament.getParams()._ranking5);

        jtbMostTdTeam.setModel(mTdPosTeam);
        jtbMostTdTeam.setDefaultRenderer(String.class, mTdPosTeam);
        jtbMostTdTeam.setDefaultRenderer(Integer.class, mTdPosTeam);

        jtbMostTdNegTeam.setModel(mTdNegTeam);
        jtbMostTdNegTeam.setDefaultRenderer(String.class, mTdNegTeam);
        jtbMostTdNegTeam.setDefaultRenderer(Integer.class, mTdNegTeam);

        jtbMostSorTeam.setModel(mSorPosTeam);
        jtbMostSorTeam.setDefaultRenderer(String.class, mSorPosTeam);
        jtbMostSorTeam.setDefaultRenderer(Integer.class, mSorPosTeam);
        jtbMostSorNegTeam.setModel(mSorNegTeam);
        jtbMostSorNegTeam.setDefaultRenderer(String.class, mSorNegTeam);
        jtbMostSorNegTeam.setDefaultRenderer(Integer.class, mSorNegTeam);
        jtbMostFoulTeam.setModel(mFoulPosTeam);
        jtbMostFoulTeam.setDefaultRenderer(String.class, mFoulPosTeam);
        jtbMostFoulTeam.setDefaultRenderer(Integer.class, mFoulPosTeam);
        jtbMostFoulNegTeam.setModel(mFoulNegTeam);
        jtbMostFoulNegTeam.setDefaultRenderer(String.class, mFoulNegTeam);
        jtbMostFoulNegTeam.setDefaultRenderer(Integer.class, mFoulNegTeam);

        jtbMostPasTeam.setModel(mPasPosTeam);
        jtbMostPasTeam.setDefaultRenderer(String.class, mPasPosTeam);
        jtbMostPasTeam.setDefaultRenderer(Integer.class, mPasPosTeam);
        jtbMostPasNegTeam.setModel(mPasNegTeam);
        jtbMostPasNegTeam.setDefaultRenderer(String.class, mPasNegTeam);
        jtbMostPasNegTeam.setDefaultRenderer(Integer.class, mPasNegTeam);

        jtbMostIntTeam.setModel(mIntPosTeam);
        jtbMostIntTeam.setDefaultRenderer(String.class, mIntPosTeam);
        jtbMostIntTeam.setDefaultRenderer(Integer.class, mIntPosTeam);
        jtbMostIntNegTeam.setModel(mIntNegTeam);
        jtbMostIntNegTeam.setDefaultRenderer(String.class, mIntNegTeam);
        jtbMostIntNegTeam.setDefaultRenderer(Integer.class, mIntNegTeam);


        mjtRankingTeam mRankingTeam = null;
        if (_tournament.getParams()._team_victory_only)
        {
               mRankingTeam= new mjtRankingTeam(v, _tournament.getParams()._ranking1_team, _tournament.getParams()._ranking2_team, _tournament.getParams()._ranking3_team, _tournament.getParams()._ranking4_team, _tournament.getParams()._ranking5_team, _tournament.getTeams());
        }
        else
        {
            mRankingTeam= new mjtRankingTeam(v, _tournament.getParams()._ranking1, _tournament.getParams()._ranking2, _tournament.getParams()._ranking3, _tournament.getParams()._ranking4, _tournament.getParams()._ranking5, _tournament.getTeams());
        }
        jtbRankingTeam.setModel(mRankingTeam);
        jtbRankingTeam.setDefaultRenderer(String.class, mRankingTeam);
        jtbRankingTeam.setDefaultRenderer(Integer.class, mRankingTeam);

        setColumnSize(jtbRankingTeam);

        setColumnSize(jtbRankingTeam);
        setColumnSize(jtbMostFoulNegTeam);
        setColumnSize(jtbMostFoulTeam);
        setColumnSize(jtbMostSorNegTeam);
        setColumnSize(jtbMostSorTeam);
        setColumnSize(jtbMostTdNegTeam);
        setColumnSize(jtbMostTdTeam);

        setColumnSize(jtbMostPasNegTeam);
        setColumnSize(jtbMostPasTeam);
        setColumnSize(jtbMostIntNegTeam);
        setColumnSize(jtbMostIntTeam);

        if (_jtbTeamMatch != null) {
            Vector<Team> teams = new Vector<Team>();
            for (int i = 0; i < _round.getMatchs().size(); i++) {
                Match m = _round.getMatchs().get(i);
                Team team1 = m._coach1._teamMates;
                Team team2 = m._coach2._teamMates;
                if (!teams.contains(team1)) {
                    teams.add(team1);
                }
                if (!teams.contains(team2)) {
                    teams.add(team2);
                }
            }
            mjtMatchTeams model = new mjtMatchTeams(teams, _round);
            _jtbTeamMatch.setModel(model);
            _jtbTeamMatch.setDefaultRenderer(String.class, model);
            _jtbTeamMatch.setDefaultRenderer(Integer.class, model);
            setColumnSize(_jtbTeamMatch);

        }

    }

    public void setColumnSize(JTable t) {
        FontMetrics fm = t.getFontMetrics(t.getFont());
        for (int i = 0; i < t.getColumnCount(); i++) {
            int max = 0;
            for (int j = 0; j < t.getRowCount(); j++) {
                Object value = t.getValueAt(j, i);
                String tmp = "";
                if (value instanceof String) {
                    tmp = (String) value;
                }
                if (value instanceof Integer) {
                    tmp = "" + (Integer) value;
                }
                int taille = fm.stringWidth(tmp);
                if (taille > max) {
                    max = taille;
                }
            }
            String nom = (String) t.getColumnModel().getColumn(i).getIdentifier();
            int taille = fm.stringWidth(nom);
            if (taille > max) {
                max = taille;
            }
            t.getColumnModel().getColumn(i).setPreferredWidth(max + 10);
        }
    }
}
