/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JPNAnnexRanking.java
 *
 * Created on 13 mai 2011, 21:52:44
 */
package tourma;

import java.awt.FontMetrics;
import java.util.Vector;
import javax.swing.JTable;
import tourma.data.Coach;
import tourma.data.Team;
import tourma.data.Criteria;
import tourma.data.Parameters;
import tourma.data.Round;
import tourma.data.Tournament;
import tourma.tableModel.mjtAnnexRankIndiv;
import tourma.tableModel.mjtAnnexRank;
import tourma.tableModel.mjtAnnexRankClan;
import tourma.tableModel.mjtAnnexRankTeam;
import tourma.tableModel.mjtRanking;
import tourma.views.report.jdgRanking;

/**
 *
 * @author Administrateur
 */
public class JPNAnnexRanking extends javax.swing.JPanel {

    String _name = "";
    Criteria _criteria = null;
    Tournament _tour = null;
    Round _round = null;
    boolean _clan;
    boolean _team;
    public boolean _round_only = false;
    Vector<Coach> _coachs = null;
    Vector<Team> _teams = null;

    /**
     * Creates new form JPNAnnexRanking
     */
    public JPNAnnexRanking(String name, Criteria criteria, Tournament tour, Round round, boolean clan, boolean team) {
            this(name, criteria, tour, round, clan, team, tour.getCoachs(),tour.getTeams());
    }

    public JPNAnnexRanking(String name, Criteria criteria, Tournament tour, Round round, boolean clan, boolean team, Vector<Coach> v,Vector<Team> t) {
        initComponents();
        _name = name;
        _criteria = criteria;
        _tour = tour;
        _round = round;
        _clan = clan;
        _team = team;

        _coachs = v;
        _teams=t;

        int roundnumber = 0;
        while (round != tour.getRounds().get(roundnumber)) {
            roundnumber++;
        }

        if (clan) {
            jbtPositive.setText(name + "(Clan)");
            jbtNegative.setText(name + "(Adversaires)");
        } else {
            if (team) {
                jbtPositive.setText(name + "(Equipe)");
                jbtNegative.setText(name + "(Adversaires)");
            } else {
                jbtPositive.setText(name + "(Coach)");
                jbtNegative.setText(name + "(Adversaires)");
            }
        }

        update();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtbPositive = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jbtPositive = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtbNegative = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jbtNegative = new javax.swing.JButton();

        jLabel1.setText("jLabel1");

        setBorder(javax.swing.BorderFactory.createTitledBorder("Annex Ranking"));
        setLayout(new java.awt.GridLayout(2, 1, 1, 1));

        jPanel1.setLayout(new java.awt.BorderLayout());

        jtbPositive.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jtbPositive);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jbtPositive.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tourma/images/Document.png"))); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("tourma/languages/language"); // NOI18N
        jbtPositive.setText(bundle.getString("Positive")); // NOI18N
        jbtPositive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtPositiveActionPerformed(evt);
            }
        });
        jPanel3.add(jbtPositive);

        jPanel1.add(jPanel3, java.awt.BorderLayout.SOUTH);

        add(jPanel1);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jtbNegative.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jtbNegative);

        jPanel2.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jbtNegative.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tourma/images/Document.png"))); // NOI18N
        jbtNegative.setText(bundle.getString("Negative")); // NOI18N
        jbtNegative.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtNegativeActionPerformed(evt);
            }
        });
        jPanel4.add(jbtNegative);

        jPanel2.add(jPanel4, java.awt.BorderLayout.SOUTH);

        add(jPanel2);
    }// </editor-fold>//GEN-END:initComponents

    private void jbtPositiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtPositiveActionPerformed
        for (int i = 0; i < _tour.getRounds().size(); i++) {
            if (_round == _tour.getRounds().get(i)) {
                mjtAnnexRank model;
                if (_clan) {
                    model = new mjtAnnexRankClan(i, _criteria, Parameters.C_RANKING_SUBTYPE_POSITIVE,
                            _tour.getDisplayClans(), true, _tour.getParams()._ranking1,
                            _tour.getParams()._ranking2, _tour.getParams()._ranking3,
                            _tour.getParams()._ranking4, _tour.getParams()._ranking5, _round_only);
                } else {
                    if (_team) {
                        model = new mjtAnnexRankTeam(i, _criteria, Parameters.C_RANKING_SUBTYPE_POSITIVE,
                                _teams, true, _tour.getParams()._ranking1,
                                _tour.getParams()._ranking2, _tour.getParams()._ranking3,
                                _tour.getParams()._ranking4, _tour.getParams()._ranking5, _round_only);

                    } else {
                        model = new mjtAnnexRankIndiv(i, _criteria, Parameters.C_RANKING_SUBTYPE_POSITIVE, _coachs, true, _tour.getParams()._ranking1, _tour.getParams()._ranking2, _tour.getParams()._ranking3, _tour.getParams()._ranking4, _tour.getParams()._ranking5, _tour.getParams()._teamTournament, _round_only);
                    }
                }
                String name = _criteria._name;
                if (_clan) {
                    name = name + " par le clan";
                } else {
                    if (_team) {
                        name = name + " par l'équipe";
                    } else {
                        name = name + " par le coach";
                    }
                }
                jdgRanking jdg = new jdgRanking(MainFrame.getMainFrame(), true, name, i + 1, _tour, model, 0);
                jdg.setVisible(true);
                break;
            }
        }
    }//GEN-LAST:event_jbtPositiveActionPerformed

    private void jbtNegativeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtNegativeActionPerformed
        for (int i = 0; i < _tour.getRounds().size(); i++) {
            if (_round == _tour.getRounds().get(i)) {
                mjtAnnexRank model;
                if (_clan) {
                    model = new mjtAnnexRankClan(i, _criteria, Parameters.C_RANKING_SUBTYPE_NEGATIVE,
                            _tour.getDisplayClans(), true, _tour.getParams()._ranking1,
                            _tour.getParams()._ranking2, _tour.getParams()._ranking3,
                            _tour.getParams()._ranking4, _tour.getParams()._ranking5, _round_only);
                } else {
                    if (_team) {
                        model = new mjtAnnexRankTeam(i, _criteria, Parameters.C_RANKING_SUBTYPE_NEGATIVE,
                                _teams, true, _tour.getParams()._ranking1,
                                _tour.getParams()._ranking2, _tour.getParams()._ranking3,
                                _tour.getParams()._ranking4, _tour.getParams()._ranking5, _round_only);
                    } else {
                        model = new mjtAnnexRankIndiv(i, _criteria, Parameters.C_RANKING_SUBTYPE_NEGATIVE,
                                _coachs, true, _tour.getParams()._ranking1,
                                _tour.getParams()._ranking2, _tour.getParams()._ranking3,
                                _tour.getParams()._ranking4, _tour.getParams()._ranking5,
                                _tour.getParams()._teamTournament, _round_only);
                    }
                }
                String name = _criteria._name;
                if (_clan) {
                    name = name + " contre le clan";
                } else {
                    if (_team) {
                        name = name + " contre l'équipe";
                    } else {
                        name = name + " contre le coach";
                    }
                }
                jdgRanking jdg = new jdgRanking(MainFrame.getMainFrame(), true, name, i + 1, _tour, model, 0);
                jdg.setVisible(true);
                break;
            }
        }
    }//GEN-LAST:event_jbtNegativeActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbtNegative;
    private javax.swing.JButton jbtPositive;
    private javax.swing.JTable jtbNegative;
    private javax.swing.JTable jtbPositive;
    // End of variables declaration//GEN-END:variables

    public void setColumnSize(JTable t) {
        FontMetrics fm = t.getFontMetrics(t.getFont());
        for (int i = 0; i < t.getColumnCount(); i++) {
            int max = 0;
            for (int j = 0; j < t.getRowCount(); j++) {
                Object value = t.getValueAt(j, i);
                String tmp = "";
                if (value instanceof String) {
                    tmp = (String) value;
                }
                if (value instanceof Integer) {
                    tmp = "" + (Integer) value;
                }
                int taille = fm.stringWidth(tmp);
                if (taille > max) {
                    max = taille;
                }
            }
            String nom = (String) t.getColumnModel().getColumn(i).getIdentifier();
            int taille = fm.stringWidth(nom);
            if (taille > max) {
                max = taille;
            }
            t.getColumnModel().getColumn(i).setPreferredWidth(max + 10);
        }
    }

    public void update() {

        if (_round != null) {
            Vector<Round> v = new Vector<Round>();
            for (int i = 0; i < _tour.getRounds().size(); i++) {
                if (_tour.getRounds().get(i).getHeure().before(_round.getHeure())) {
                    v.add(_tour.getRounds().get(i));
                }
            }
            v.add(_round);

            mjtAnnexRank modelPos = null;
            mjtAnnexRank modelNeg = null;

            if (_clan) {
                modelPos =
                        new mjtAnnexRankClan(v.size() - 1, _criteria, Parameters.C_RANKING_SUBTYPE_POSITIVE,
                        _tour.getDisplayClans(), true, _tour.getParams()._ranking1, _tour.getParams()._ranking2, _tour.getParams()._ranking3, _tour.getParams()._ranking4, _tour.getParams()._ranking5, _round_only);
                modelNeg =
                        new mjtAnnexRankClan(v.size() - 1, _criteria, Parameters.C_RANKING_SUBTYPE_NEGATIVE,
                        _tour.getDisplayClans(), true, _tour.getParams()._ranking1, _tour.getParams()._ranking2, _tour.getParams()._ranking3, _tour.getParams()._ranking4, _tour.getParams()._ranking5, _round_only);
            } else {
                if (_team) {
                    modelPos =
                            new mjtAnnexRankTeam(v.size() - 1, _criteria, Parameters.C_RANKING_SUBTYPE_POSITIVE,
                            _teams, true, _tour.getParams()._ranking1, _tour.getParams()._ranking2, _tour.getParams()._ranking3, _tour.getParams()._ranking4, _tour.getParams()._ranking5, _round_only);
                    modelNeg =
                            new mjtAnnexRankTeam(v.size() - 1, _criteria, Parameters.C_RANKING_SUBTYPE_NEGATIVE,
                            _teams, true, _tour.getParams()._ranking1, _tour.getParams()._ranking2, _tour.getParams()._ranking3, _tour.getParams()._ranking4, _tour.getParams()._ranking5, _round_only);
                } else {
                    modelPos =
                            new mjtAnnexRankIndiv(v.size() - 1, _criteria, Parameters.C_RANKING_SUBTYPE_POSITIVE, this._coachs, true, _tour.getParams()._ranking1, _tour.getParams()._ranking2, _tour.getParams()._ranking3, _tour.getParams()._ranking4, _tour.getParams()._ranking5, _tour.getParams()._teamTournament, _round_only);
                    modelNeg =
                            new mjtAnnexRankIndiv(v.size() - 1, _criteria, Parameters.C_RANKING_SUBTYPE_NEGATIVE, this._coachs, true, _tour.getParams()._ranking1, _tour.getParams()._ranking2, _tour.getParams()._ranking3, _tour.getParams()._ranking4, _tour.getParams()._ranking5, _tour.getParams()._teamTournament, _round_only);
                }
            }
            jtbNegative.setModel(modelNeg);
            jtbPositive.setModel(modelPos);

            jtbNegative.setDefaultRenderer(String.class, modelNeg);
            jtbNegative.setDefaultRenderer(Integer.class, modelNeg);

            jtbPositive.setDefaultRenderer(String.class, modelPos);
            jtbPositive.setDefaultRenderer(Integer.class, modelPos);

            setColumnSize(jtbPositive);
            setColumnSize(jtbNegative);
            
            jtbPositive.setRowHeight(25);
            jtbNegative.setRowHeight(25);
        }
    }
}
