/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * jdgRoundReport.java
 *
 * Created on 28 juin 2010, 10:52:47
 */
package tourma.views.report;

import tourma.tableModel.mjtAnnexRankIndiv;
import tourma.tableModel.mjtRanking;
import tourma.*;
import tourma.data.Round;
import tourma.data.Tournament;
import freemarker.template.Configuration;
import freemarker.template.DefaultObjectWrapper;
import freemarker.template.Template;
import freemarker.template.TemplateException;

import java.awt.Dimension;
import java.awt.print.PrinterException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.net.URI;
import java.net.URISyntaxException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.TableModel;
import tourma.data.Criteria;
import tourma.tableModel.mjtAnnexRank;
import tourma.tableModel.mjtAnnexRankClan;
import tourma.tableModel.mjtAnnexRankTeam;
import tourma.tableModel.mjtRankingClan;
import tourma.tableModel.mjtRankingTeam;

/**
 *
 * @author Frederic Berger
 */
public class jdgGlobal extends javax.swing.JDialog {

    int _roundNumber;
    Tournament _tour;
    boolean _result;
    File _filename = null;
    mjtRanking _ranking;
    HashMap<Criteria, mjtAnnexRank> _annexAgainstRankings;
    HashMap<Criteria, mjtAnnexRank> _annexForRankings;
    boolean _clan;
    boolean _team;

    /** Creates new form jdgRoundReport */
    public jdgGlobal(java.awt.Frame parent, boolean modal,  int roundNumber, Tournament tour,mjtRanking model, HashMap<Criteria, mjtAnnexRank> annexForRankings,HashMap<Criteria, mjtAnnexRank> annexAgainstRankings, boolean clan, boolean team) {
        super(parent, modal);
        initComponents();
        //_round = round;
        _roundNumber = roundNumber;
        _tour = tour;

        _clan = clan;
        _team = team;

        _ranking = model;
        _annexForRankings = annexForRankings;
        _annexAgainstRankings = annexAgainstRankings;

        this.setTitle(tour.getParams()._tournament_name + java.util.ResourceBundle.getBundle("tourma/languages/language").getString(" - RONDE ") + roundNumber);
        try {
            jepHTML.setContentType("html");
            _filename = CreateReport();
            jepHTML.setPage(_filename.toURI().toURL());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(parent, e.getLocalizedMessage());
        }
        this.setPreferredSize(new Dimension(800, 600));
        pack();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jbtOK = new javax.swing.JButton();
        jbtPrint = new javax.swing.JButton();
        jbtExport = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jepHTML = new javax.swing.JEditorPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Ranking"); // NOI18N

        jbtOK.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tourma/images/Select.png"))); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("tourma/languages/language"); // NOI18N
        jbtOK.setText(bundle.getString("OK")); // NOI18N
        jbtOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtOKActionPerformed(evt);
            }
        });
        jPanel1.add(jbtOK);

        jbtPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tourma/images/Document.png"))); // NOI18N
        jbtPrint.setText(bundle.getString("IMPRIMER")); // NOI18N
        jbtPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtPrintActionPerformed(evt);
            }
        });
        jPanel1.add(jbtPrint);

        jbtExport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tourma/images/Html.png"))); // NOI18N
        jbtExport.setText(bundle.getString("EXPORT HTML")); // NOI18N
        jbtExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtExportActionPerformed(evt);
            }
        });
        jPanel1.add(jbtExport);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        jScrollPane1.setViewportView(jepHTML);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtOKActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_jbtOKActionPerformed

    private void jbtPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtPrintActionPerformed
        try {
            jepHTML.print();

        } catch (PrinterException e) {
            JOptionPane.showMessageDialog(MainFrame.getMainFrame(), e.getLocalizedMessage());
        }
    }//GEN-LAST:event_jbtPrintActionPerformed

    private void jbtExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtExportActionPerformed
        JFileChooser jfc = new JFileChooser();
        if (jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File export = jfc.getSelectedFile();

            try {
                FileReader in = new FileReader(_filename);
                FileWriter out = new FileWriter(export);
                int c;

                while ((c = in.read()) != -1) {
                    out.write(c);
                }

                in.close();
                out.close();
            } catch (FileNotFoundException fnf) {
                JOptionPane.showMessageDialog(this, fnf.getLocalizedMessage());
            } catch (IOException ioe) {
                JOptionPane.showMessageDialog(this, ioe.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_jbtExportActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtExport;
    private javax.swing.JButton jbtOK;
    private javax.swing.JButton jbtPrint;
    private javax.swing.JEditorPane jepHTML;
    // End of variables declaration//GEN-END:variables

    private File CreateReport() {

        File address = null;

        try {
            Configuration cfg = new Configuration();
            URI uri = getClass().getResource("/tourma/views/report").toURI();
            if (uri.toString().contains(".jar!")) {
                /*String tmp = uri.toString();
                tmp = tmp.substring(10, tmp.indexOf(".jar!") - 4);
                //tmp=tmp+"";
                cfg.setDirectoryForTemplateLoading(new File(tmp));*/
                cfg.setClassForTemplateLoading(getClass(), "");
            } else {
                cfg.setDirectoryForTemplateLoading(new File(uri));
            }
            cfg.setObjectWrapper(new DefaultObjectWrapper());
            Template temp = cfg.getTemplate("global.html");


            Vector<Round> rounds = new Vector();
            for (int i = 0; i < _tour.getRounds().size() && i < _roundNumber; i++) {
                rounds.add(_tour.getRounds().get(i));
            }

            Map root = new HashMap();
            root.put("nom", _tour.getParams()._tournament_name + java.util.ResourceBundle.getBundle("tourma/languages/language").getString(" - RONDE ") + _roundNumber);
            String name = "Classements";
            if (_clan) {
                name = " par clan";
            } else {
                if (_team) {
                    name = " par &eacute;quipe";
                } else {
                    name = " par coach";
                }
            }

            root.put("title", name);


            Vector titles = new Vector();
            for (int i = 0; i < _ranking.getColumnCount(); i++) {
                titles.add(_ranking.getColumnName(i));
            }
            root.put("titles", titles);

            Vector lines = new Vector();
            for (int i = 0; i < _ranking.getRowCount(); i++) {
                HashMap line = new HashMap();
                Vector cols = new Vector();
                for (int j = 0; j < _ranking.getColumnCount(); j++) {
                    cols.add(_ranking.getValueAt(i, j));
                }
                line.put("cols", cols);
                lines.add(line);
            }
            root.put("lines", lines);

            root.put("titreMoreFor","Le plus r&eacute;alis&eacute;");
            root.put("titreLessFor","Le moins r&eacute;alis&eacute;");
            root.put("titreMoreAgainst","Le plus subi");
            root.put("titreLessAgainst","Le moins subi");

            Vector criterias=new Vector();
            for (int i=0; i<_tour.getParams()._criterias.size(); i++)
            {
                HashMap criteria=new HashMap();
                Criteria c=_tour.getParams()._criterias.get(i);
                criteria.put("name", c._name);

                mjtAnnexRank annexFor=_annexForRankings.get(c);
                mjtAnnexRank annexAgainst=_annexAgainstRankings.get(c);
                criteria.put("MoreFor",annexFor.getValueAt(0, 1));
                criteria.put("LessFor",annexFor.getValueAt(annexFor.getRowCount()-1, 1));
                criteria.put("MoreAgainst",annexAgainst.getValueAt(0, 1));
                criteria.put("LessAgainst",annexAgainst.getValueAt(annexAgainst.getRowCount()-1, 1));

                criterias.add(criteria);
            }
            root.put("criterias",criterias);

            SimpleDateFormat format = new SimpleDateFormat("EEEEEEE dd MMMMMMMMMMM yyyy");
            SimpleDateFormat formatShort = new SimpleDateFormat("dd/MM/yyyy");
            root.put("dateGeneration", formatShort.format(new Date()));
            address = File.createTempFile("result" + format.format(new Date()), ".tmp");
            address.deleteOnExit();
            Writer out = new FileWriter(address);
            temp.process(root, out);
            out.flush();

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
        } catch (TemplateException e) {
            JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
        } catch (URISyntaxException e) {
            JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
        }


        return address;
    }
}
