/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package tourma;

import java.util.ArrayList;
import tourma.data.Coach;
import tourma.data.Criteria;
import tourma.data.Match;
import tourma.data.Round;
import tourma.data.Tournament;
import tourma.data.Value;
import tourma.views.JPNMatch;

/**
 *
 * @author WFMJ7631
 */
public class JPNCup extends javax.swing.JPanel {

    /**
     * Creates new form JPNCup
     */
    public JPNCup() {
        initComponents();

        update();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings({"unchecked", "PMD"})
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jsp1 = new javax.swing.JScrollPane();
        jpnCup = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        jpnCup.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jpnCup.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 40, -1, -1));

        jsp1.setViewportView(jpnCup);

        add(jsp1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jpnCup;
    private javax.swing.JScrollPane jsp1;
    // End of variables declaration//GEN-END:variables

    public void update() {
        final ArrayList<Round> rounds_with_cup = new ArrayList<Round>();
        final ArrayList<Round> rounds = Tournament.getTournament().getRounds();
        boolean bLooserCup=false;
        for (int i = 0; i < rounds.size(); i++) {
            if (rounds.get(i).mCup) {
                rounds_with_cup.add(rounds.get(i));
                if (rounds.get(i).mLooserCup)
                {
                    bLooserCup=true;
                }
            }
        }

        jpnCup.removeAll();
        final int max_width=rounds_with_cup.size() * 200;
        int max_heigth=(int) Math.pow(2, rounds_with_cup.size()) * 150;
        if (bLooserCup)
        {
            max_heigth+=max_heigth/2;
        }
        jpnCup.setSize(max_width,max_heigth );
        

        final int max_nb_match = (int) Math.pow(2, rounds_with_cup.get(0).mCupMaxTour - 1);
        final int base_high = 60;
        final int total_high = 60 * max_nb_match;


        int gap = 0;
        int nb_looseMatch = 0;
        int last_offset = 0;
        int offset = 0;
        for (int i = 0; i < rounds_with_cup.size(); i++) {
            final Round r = rounds_with_cup.get(i);
            final int remaining_tour = r.mCupMaxTour - r.mCupTour + 1;
            int nb_match = (int) Math.pow(2, remaining_tour - 1) / 2;
            if (nb_match == 0) {
                nb_match = 1;
            }
            final int last_gap = gap;
            gap = total_high / nb_match;
            last_offset = offset;
            offset = (gap - base_high) / 2 + 5;
            final int w = 175;
            final int h = 50;
            int x = i * 200 + 5;

           final  Tournament tour = Tournament.getTournament();
            for (int j = 0; j < nb_match; j++) {
                Match m;
                if ((tour.getParams().mTeamTournament)
                        && (tour.getParams().mTeamIndivPairing == 0)) {
                    m = r.getMatchs().get(j * Tournament.getTournament().getParams().mTeamMatesNumber);
                   final Coach c1 = new Coach();
                   final Coach c2 = new Coach();
                    c1.mName = m.mCoach1.mTeamMates.mName;
                    c2.mName = m.mCoach2.mTeamMates.mName;

                   final Criteria td = tour.getParams().mCriterias.get(0);
                    int nbVictory = 0;
                    int nbLost = 0;
                    
                    for (int k = 0; k < tour.getParams().mTeamMatesNumber; k++) {
                        m = r.getMatchs().get(j * tour.getParams().mTeamMatesNumber + k);
                        if (m.mValues.get(td).mValue1 > m.mValues.get(td).mValue2) {
                            nbVictory++;
                        } else {
                            if (m.mValues.get(td).mValue1 < m.mValues.get(td).mValue2) {
                                nbLost++;
                            } 
                        }
                    }
                    m = new Match();
                    m.mCoach1 = c1;
                    m.mCoach2 = c2;
                    final Value val = new Value(td);
                    val.mValue1 = nbVictory;
                    val.mValue2 = nbLost;
                    m.mValues.put(td, val);

                } else {
                    m = r.getMatchs().get(j);
                }
                final JPNMatch match = new JPNMatch(m, true);
                match.setSize(175, 50);
                //int y = j * gap + offset * 75 / 2 + 5;                
                final int y = j * gap + offset;
                jpnCup.add(match, new org.netbeans.lib.awtextra.AbsoluteConstraints(x, y, w, h));
            }

            if (r.mLooserCup) {
                if (r.mCupTour > 0) {
                    nb_looseMatch = nb_looseMatch / 2 + nb_match;

                    int factor=1;
                    if ((Tournament.getTournament().getParams().mTeamTournament)&&(Tournament.getTournament().getParams().mTeamPairing==1))
                    {
                       factor= Tournament.getTournament().getParams().mTeamMatesNumber;
                    }
                    for (int j = nb_match; (j < nb_match + nb_looseMatch) && (j  * factor< r.getMatchs().size()); j++) {
                        Match m;
                        if ((tour.getParams().mTeamTournament)
                                && (tour.getParams().mTeamIndivPairing == 0)) {
                            m = r.getMatchs().get(j * Tournament.getTournament().getParams().mTeamMatesNumber);
                            final Coach c1 = new Coach();
                            final Coach c2 = new Coach();
                            c1.mName = m.mCoach1.mTeamMates.mName;
                            c2.mName = m.mCoach2.mTeamMates.mName;

                            final Criteria td = tour.getParams().mCriterias.get(0);
                            int nbVictory = 0;
                            int nbLost = 0;
                            for (int k = 0; k < tour.getParams().mTeamMatesNumber; k++) {
                                m = r.getMatchs().get(j * tour.getParams().mTeamMatesNumber + k);
                                if (m.mValues.get(td).mValue1 > m.mValues.get(td).mValue2) {
                                    nbVictory++;
                                } else {
                                    if (m.mValues.get(td).mValue1 < m.mValues.get(td).mValue2) {
                                        nbLost++;
                                    } 
                                }
                            }
                            m = new Match();
                            m.mCoach1 = c1;
                            m.mCoach2 = c2;
                            final Value val = new Value(td);
                            val.mValue1 = nbVictory;
                            val.mValue2 = nbLost;
                            m.mValues.put(td, val);

                        } else {
                            m = r.getMatchs().get(j);
                        }

                        final JPNMatch match = new JPNMatch(m, false);
                        match.setSize(175, 50);
                        final int y = (j - nb_match) * last_gap + last_offset + 30 + total_high;
                        x = (i - 1) * 200 + 5;
                        jpnCup.add(match, new org.netbeans.lib.awtextra.AbsoluteConstraints(x, y, w, h));
                    }
                }
            }
        }        
    }
}
