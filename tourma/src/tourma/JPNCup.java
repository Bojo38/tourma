/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package tourma;

import java.util.Vector;
import tourma.data.Coach;
import tourma.data.Criteria;
import tourma.data.Match;
import tourma.data.Round;
import tourma.data.Tournament;
import tourma.data.Value;
import tourma.views.JPNMatch;

/**
 *
 * @author WFMJ7631
 */
public class JPNCup extends javax.swing.JPanel {

    /**
     * Creates new form JPNCup
     */
    public JPNCup() {
        initComponents();

        update();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jsp1 = new javax.swing.JScrollPane();
        jpnCup = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        jpnCup.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jpnCup.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 40, -1, -1));

        jsp1.setViewportView(jpnCup);

        add(jsp1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jpnCup;
    private javax.swing.JScrollPane jsp1;
    // End of variables declaration//GEN-END:variables

    public void update() {
        Vector<Round> rounds_with_cup = new Vector<Round>();
        Vector<Round> rounds = Tournament.getTournament().getRounds();
        for (int i = 0; i < rounds.size(); i++) {
            if (rounds.get(i)._cup) {
                rounds_with_cup.add(rounds.get(i));
            }
        }

        jpnCup.removeAll();
        jpnCup.setSize(rounds_with_cup.size() * 200, (int) Math.pow(2, rounds_with_cup.size()) * 150);


        int max_nb_match = (int) Math.pow(2, rounds_with_cup.get(0)._cup_max_tour - 1);
        int base_high = 60;
        int total_high = 60 * max_nb_match;


        int gap = 0;
        int nb_looseMatch = 0;
        int last_offset = 0;
        int offset = 0;
        for (int i = 0; i < rounds_with_cup.size(); i++) {
            Round r = rounds_with_cup.get(i);
            int remaining_tour = r._cup_max_tour - r._cup_tour + 1;
            int nb_match = (int) Math.pow(2, remaining_tour - 1) / 2;
            if (nb_match == 0) {
                nb_match = 1;
            }
            int last_gap = gap;
            gap = total_high / nb_match;
            last_offset = offset;
            offset = (gap - base_high) / 2 + 5;
            int w = 175;
            int h = 50;
            int x = i * 200 + 5;

            Tournament tour = Tournament.getTournament();
            for (int j = 0; j < nb_match; j++) {
                Match m;
                if ((tour.getParams()._teamTournament)
                        && (tour.getParams()._teamIndivPairing == 0)) {
                    m = r.getMatchs().get(j * Tournament.getTournament().getParams()._teamMatesNumber);
                    Coach c1 = new Coach();
                    Coach c2 = new Coach();
                    c1._name = m._coach1._teamMates._name;
                    c2._name = m._coach2._teamMates._name;

                    Criteria td = tour.getParams()._criterias.get(0);
                    int nbVictory = 0;
                    int nbLost = 0;
                    int nbDraw = 0;
                    for (int k = 0; k < tour.getParams()._teamMatesNumber; k++) {
                        m = r.getMatchs().get(j * tour.getParams()._teamMatesNumber + k);
                        if (m._values.get(td)._value1 > m._values.get(td)._value2) {
                            nbVictory++;
                        } else {
                            if (m._values.get(td)._value1 < m._values.get(td)._value2) {
                                nbLost++;
                            } else {
                                nbDraw++;
                            }
                        }
                    }
                    m = new Match();
                    m._coach1 = c1;
                    m._coach2 = c2;
                    Value val = new Value(td);
                    val._value1 = nbVictory;
                    val._value2 = nbLost;
                    m._values.put(td, val);

                } else {
                    m = r.getMatchs().get(j);
                }
                JPNMatch match = new JPNMatch(m, true);
                match.setSize(175, 50);
                //int y = j * gap + offset * 75 / 2 + 5;                
                int y = j * gap + offset;
                jpnCup.add(match, new org.netbeans.lib.awtextra.AbsoluteConstraints(x, y, w, h));
            }

            if (r._looser_cup) {
                if (r._cup_tour > 0) {
                    nb_looseMatch = nb_looseMatch / 2 + nb_match;

                    for (int j = nb_match; (j < nb_match + nb_looseMatch) && (j  * Tournament.getTournament().getParams()._teamMatesNumber< r.getMatchs().size()); j++) {
                        Match m;
                        if ((tour.getParams()._teamTournament)
                                && (tour.getParams()._teamIndivPairing == 0)) {
                            m = r.getMatchs().get(j * Tournament.getTournament().getParams()._teamMatesNumber);
                            Coach c1 = new Coach();
                            Coach c2 = new Coach();
                            c1._name = m._coach1._teamMates._name;
                            c2._name = m._coach2._teamMates._name;

                            Criteria td = tour.getParams()._criterias.get(0);
                            int nbVictory = 0;
                            int nbLost = 0;
                            int nbDraw = 0;
                            for (int k = 0; k < tour.getParams()._teamMatesNumber; k++) {
                                m = r.getMatchs().get(j * tour.getParams()._teamMatesNumber + k);
                                if (m._values.get(td)._value1 > m._values.get(td)._value2) {
                                    nbVictory++;
                                } else {
                                    if (m._values.get(td)._value1 < m._values.get(td)._value2) {
                                        nbLost++;
                                    } else {
                                        nbDraw++;
                                    }
                                }
                            }
                            m = new Match();
                            m._coach1 = c1;
                            m._coach2 = c2;
                            Value val = new Value(td);
                            val._value1 = nbVictory;
                            val._value2 = nbLost;
                            m._values.put(td, val);

                        } else {
                            m = r.getMatchs().get(j);
                        }

                        JPNMatch match = new JPNMatch(m, false);
                        match.setSize(175, 50);
                        int y = (j - nb_match) * last_gap + last_offset + 30 + total_high;
                        x = (i - 1) * 200 + 5;
                        jpnCup.add(match, new org.netbeans.lib.awtextra.AbsoluteConstraints(x, y, w, h));
                    }
                }
            }
        }
    }
}
