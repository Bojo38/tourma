<?xml version="1.0" encoding="UTF-8"?>
<yguard version="1.5">
<!--
  yGuard Bytecode Obfuscator, v2.5.2, a Product of yWorks GmbH - http://www.yworks.com

  Logfile created on Wed Sep 20 07:49:59 CEST 2017

  Jar file to be obfuscated:           yguard_temp_7576242171794122238.jar
  Target Jar file for obfuscated code: TourMa_obf.jar

-->
<!-- WARNING
Methods are called which may break in obfuscated version at runtime.
Please review your source code to ensure that the dangerous methods are not intended
to act on classes which have been obfuscated.
-->
<!--
     Your class com.itextpdf.text.PageSize calls the java.lang.Class method java.lang.reflect.Field getDeclaredField(java.lang.String)
-->
<!--
     Your class com.itextpdf.text.Version calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class com.itextpdf.text.io.ByteBufferRandomAccessSource$1 calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class com.itextpdf.text.pdf.MappedRandomAccessFile$1 calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class com.sun.deploy.uitoolkit.impl.fx.FXPluginToolkit$1 calls the java.lang.Class method java.lang.reflect.Field getDeclaredField(java.lang.String)
-->
<!--
     Your class com.sun.deploy.uitoolkit.impl.fx.FXPreloader$Notifier calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class com.sun.deploy.uitoolkit.impl.fx.HostServicesFactory$StandaloneHostService calls the java.lang.Class method java.lang.reflect.Method getDeclaredMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class com.sun.deploy.uitoolkit.impl.fx.ui.DialogTemplate calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class com.sun.deploy.uitoolkit.impl.fx.ui.ErrorPane$1 calls the java.lang.Class method java.lang.reflect.Method getDeclaredMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class com.sun.deploy.uitoolkit.impl.fx.ui.FXUIFactory calls the java.lang.Class method java.lang.reflect.Method getDeclaredMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class com.sun.deploy.uitoolkit.impl.fx.ui.MixedCodeInSwing calls the java.lang.Class method java.lang.reflect.Method getDeclaredMethod(java.lang.String, java.lang.Class[])
     Your class com.sun.deploy.uitoolkit.impl.fx.ui.MixedCodeInSwing calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class com.sun.javafx.application.HostServicesDelegate$1 calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class com.sun.javafx.application.LauncherImpl calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class com.sun.javafx.font.PrismFontLoader calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class com.sun.javafx.fxml.BeanAdapter calls the java.lang.Class method java.lang.reflect.Method getDeclaredMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class com.sun.javafx.logging.LoggingSupport$1 calls the java.lang.Class method java.lang.reflect.Field getDeclaredField(java.lang.String)
-->
<!--
     Your class com.sun.javafx.property.PropertyReference calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class com.sun.javafx.property.adapter.JavaBeanPropertyBuilderHelper calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class com.sun.javafx.property.adapter.PropertyDescriptor calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class com.sun.javafx.property.adapter.ReadOnlyJavaBeanPropertyBuilderHelper calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class com.sun.javafx.property.adapter.ReadOnlyPropertyDescriptor calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class com.sun.javafx.scene.control.WeakEventHandler calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class com.sun.javafx.scene.control.skin.FXVKSkin calls the java.lang.Class method java.lang.reflect.Field getDeclaredField(java.lang.String)
-->
<!--
     Your class com.sun.javafx.tk.desktop.PerformanceTrackerHelper$PerformanceTrackerDefaultImpl calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class com.sun.javafx.tk.quantum.QuantumToolkit$17 calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class com.sun.prism.GraphicsPipeline calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class com.sun.prism.d3d.D3DResourceFactory calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class com.sun.prism.impl.BufferUtil calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class com.sun.prism.j2d.J2DFontFactory$3 calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class com.sun.scenario.effect.impl.BufferUtil calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class com.sun.scenario.effect.impl.RendererFactory calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class com.sun.scenario.effect.impl.prism.PrRenderer calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class com.sun.webpane.sg.theme.ScrollBarThemeImpl calls the java.lang.Class method java.lang.reflect.Field getDeclaredField(java.lang.String)
-->
<!--
     Your class freemarker.cache.SoftCacheStorage calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class freemarker.cache.TemplateCache calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class freemarker.core.Configurable calls the java.lang.Class method java.lang.reflect.Field getField(java.lang.String)
-->
<!--
     Your class freemarker.debug.impl.RmiDebugModelImpl_Stub calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class freemarker.debug.impl.RmiDebuggedEnvironmentImpl_Stub calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class freemarker.debug.impl.RmiDebuggerImpl_Stub calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class freemarker.debug.impl.RmiDebuggerListenerImpl_Stub calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class freemarker.ext.beans.BeansWrapper calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class freemarker.ext.beans.MethodUtilities calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class freemarker.ext.jsp.JspTagModelBase calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class freemarker.ext.jsp.PageContextFactory calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
     Your class freemarker.ext.jsp.PageContextFactory calls the java.lang.Class method java.lang.reflect.Method getDeclaredMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class freemarker.ext.jython.JythonVersionAdapter calls the java.lang.Class method java.lang.reflect.Field getField(java.lang.String)
     Your class freemarker.ext.jython.JythonVersionAdapter calls the java.lang.ClassLoader method java.lang.Class loadClass(java.lang.String)
-->
<!--
     Your class freemarker.ext.rhino.RhinoWrapper$1 calls the java.lang.Class method java.lang.reflect.Field getField(java.lang.String)
-->
<!--
     Your class freemarker.ext.servlet.FreemarkerServlet calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class freemarker.ext.xml.NodeListModel calls the java.lang.Class method java.lang.reflect.Field getDeclaredField(java.lang.String)
-->
<!--
     Your class freemarker.template.DefaultObjectWrapper calls the java.lang.Class method java.lang.reflect.Field getField(java.lang.String)
-->
<!--
     Your class freemarker.template.TemplateException calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class javafx.embed.swt.FXCanvas calls the java.lang.Class method java.lang.reflect.Field getDeclaredField(java.lang.String)
-->
<!--
     Your class javafx.embed.swt.SWTEvents calls the java.lang.Class method java.lang.reflect.Method getDeclaredMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class javafx.embed.swt.SWTFXUtils$1 calls the java.lang.Class method java.lang.reflect.Field getDeclaredField(java.lang.String)
-->
<!--
     Your class javafx.embed.swt.SWTFXUtils$2 calls the java.lang.Class method java.lang.reflect.Method getDeclaredMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class javafx.embed.swt.SWTFXUtils$3 calls the java.lang.Class method java.lang.reflect.Method getDeclaredMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class javafx.embed.swt.SWTFXUtils$4 calls the java.lang.Class method java.lang.reflect.Method getDeclaredMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class javafx.fxml.FXMLLoader$ValueElement calls the java.lang.ClassLoader method java.lang.Class loadClass(java.lang.String)
-->
<!--
     Your class javafx.fxml.FXMLLoader calls the java.lang.ClassLoader method java.lang.Class loadClass(java.lang.String)
-->
<!--
     Your class javafx.fxml.JavaFXBuilderFactory calls the java.lang.ClassLoader method java.lang.Class loadClass(java.lang.String)
-->
<!--
     Your class javafx.scene.control.Control calls the java.lang.ClassLoader method java.lang.Class loadClass(java.lang.String)
-->
<!--
     Your class javax.xml.bind.ContextFinder calls the java.lang.ClassLoader method java.lang.Class loadClass(java.lang.String)
     Your class javax.xml.bind.ContextFinder calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class javax.xml.datatype.DatatypeConfigurationException calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class javax.xml.datatype.FactoryFinder calls the java.lang.ClassLoader method java.lang.Class loadClass(java.lang.String)
-->
<!--
     Your class javax.xml.parsers.FactoryFinder calls the java.lang.ClassLoader method java.lang.Class loadClass(java.lang.String)
-->
<!--
     Your class javax.xml.stream.FactoryFinder calls the java.lang.ClassLoader method java.lang.Class loadClass(java.lang.String)
-->
<!--
     Your class javax.xml.transform.FactoryFinder calls the java.lang.ClassLoader method java.lang.Class loadClass(java.lang.String)
-->
<!--
     Your class javax.xml.transform.TransformerException calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class javax.xml.validation.SchemaFactoryFinder calls the java.lang.ClassLoader method java.lang.Class loadClass(java.lang.String)
-->
<!--
     Your class javax.xml.xpath.XPathFactoryFinder calls the java.lang.ClassLoader method java.lang.Class loadClass(java.lang.String)
-->
<!--
     Your class org.apache.commons.lang3.ClassUtils calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class org.apache.commons.lang3.ObjectUtils calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class org.apache.commons.lang3.exception.ExceptionUtils calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class org.apache.commons.lang3.reflect.FieldUtils calls the java.lang.Class method java.lang.reflect.Field getDeclaredField(java.lang.String)
     Your class org.apache.commons.lang3.reflect.FieldUtils calls the java.lang.Class method java.lang.reflect.Field getField(java.lang.String)
-->
<!--
     Your class org.apache.commons.lang3.reflect.MethodUtils calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
     Your class org.apache.commons.lang3.reflect.MethodUtils calls the java.lang.Class method java.lang.reflect.Method getDeclaredMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class org.apache.commons.net.util.SSLSocketUtils calls the java.lang.Class method java.lang.reflect.Method getDeclaredMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class org.apache.html.dom.ObjectFactory calls the java.lang.ClassLoader method java.lang.Class loadClass(java.lang.String)
-->
<!--
     Your class org.apache.jcp.xml.dsig.internal.dom.DOMKeyValue$EC calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class org.apache.xerces.dom.ObjectFactory calls the java.lang.ClassLoader method java.lang.Class loadClass(java.lang.String)
-->
<!--
     Your class org.apache.xerces.impl.dv.ObjectFactory calls the java.lang.ClassLoader method java.lang.Class loadClass(java.lang.String)
-->
<!--
     Your class org.apache.xerces.parsers.ObjectFactory calls the java.lang.ClassLoader method java.lang.Class loadClass(java.lang.String)
-->
<!--
     Your class org.apache.xerces.util.DOMUtil$ThrowableMethods calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class org.apache.xerces.xinclude.ObjectFactory calls the java.lang.ClassLoader method java.lang.Class loadClass(java.lang.String)
-->
<!--
     Your class org.apache.xml.security.utils.ClassLoaderUtils calls the java.lang.ClassLoader method java.lang.Class loadClass(java.lang.String)
-->
<!--
     Your class org.apache.xml.security.utils.XalanXPathAPI calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class org.apache.xml.serialize.BaseMarkupSerializer calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class org.apache.xml.serialize.DOMSerializerImpl$DocumentMethods calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class org.apache.xml.serialize.DOMSerializerImpl calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class org.apache.xml.serialize.EncodingInfo$CharToByteConverterMethods calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class org.apache.xml.serialize.EncodingInfo$CharsetMethods calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class org.apache.xml.serialize.ObjectFactory calls the java.lang.ClassLoader method java.lang.Class loadClass(java.lang.String)
-->
<!--
     Your class org.bouncycastle.jce.provider.BouncyCastleProvider calls the java.lang.ClassLoader method java.lang.Class loadClass(java.lang.String)
-->
<!--
     Your class org.bouncycastle.pqc.jcajce.provider.BouncyCastlePQCProvider calls the java.lang.ClassLoader method java.lang.Class loadClass(java.lang.String)
-->
<!--
     Your class org.bouncycastle.x509.X509Util calls the java.lang.ClassLoader method java.lang.Class loadClass(java.lang.String)
-->
<!--
     Your class org.jdom.adapters.AbstractDOMAdapter calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class org.jdom.output.support.AbstractSAXOutputProcessor calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class org.jfree.base.AbstractBoot calls the java.lang.ClassLoader method java.lang.Class loadClass(java.lang.String)
     Your class org.jfree.base.AbstractBoot calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class org.jfree.base.BasicProjectInfo$OptionalLibraryHolder calls the java.lang.ClassLoader method java.lang.Class loadClass(java.lang.String)
     Your class org.jfree.base.BasicProjectInfo$OptionalLibraryHolder calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class org.jfree.base.modules.PackageManager calls the java.lang.ClassLoader method java.lang.Class loadClass(java.lang.String)
-->
<!--
     Your class org.jfree.chart.plot.PiePlot calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class org.jfree.chart.urls.URLUtilities calls the java.lang.Class method java.lang.reflect.Method getDeclaredMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class org.jfree.chart.util.PaintAlpha calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class org.jfree.data.KeyToGroupMap calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class org.jfree.data.time.TimeSeries calls the java.lang.Class method java.lang.reflect.Method getDeclaredMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class org.jfree.ui.RefineryUtilities calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class org.jfree.util.ObjectUtilities calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
     Your class org.jfree.util.ObjectUtilities calls the java.lang.ClassLoader method java.lang.Class loadClass(java.lang.String)
-->
<!--
     Your class org.jfree.util.PaintUtilities calls the java.lang.Class method java.lang.reflect.Field getField(java.lang.String)
-->
<!--
     Your class org.jfree.util.ResourceBundleSupport calls the java.lang.Class method java.lang.reflect.Field getField(java.lang.String)
-->
<!--
     Your class org.w3c.dom.bootstrap.DOMImplementationRegistry calls the java.lang.ClassLoader method java.lang.Class loadClass(java.lang.String)
-->
<!--
     Your class org.xml.sax.helpers.NewInstance calls the java.lang.ClassLoader method java.lang.Class loadClass(java.lang.String)
-->
</yguard>
