<?xml version="1.0" encoding="UTF-8"?>
<yshrink version="0.1">
<!-- parsing C:\Perso\tourma\dist\TourMa.jar -->
<entrypoints>
	<class name="tourma.MainFrame" />
	<method signature="void main(java.lang.String[])" class="tourma.MainFrame" />
	<class name="com.itextpdf.tool.xml.net.package-info" />
	<class name="com.itextpdf.tool.xml.pipeline.css.package-info" />
	<class name="com.itextpdf.tool.xml.pipeline.package-info" />
	<class name="com.itextpdf.tool.xml.parser.package-info" />
	<class name="com.itextpdf.tool.xml.html.table.package-info" />
	<class name="com.itextpdf.tool.xml.html.package-info" />
	<class name="com.itextpdf.tool.xml.parser.io.package-info" />
	<class name="com.itextpdf.tool.xml.html.head.package-info" />
	<class name="com.itextpdf.tool.xml.css.apply.package-info" />
	<class name="com.itextpdf.tool.xml.css.parser.state.package-info" />
	<class name="com.itextpdf.tool.xml.html.pdfelement.package-info" />
	<class name="com.itextpdf.text.api.package-info" />
	<class name="com.itextpdf.tool.xml.pipeline.html.package-info" />
	<class name="com.itextpdf.tool.xml.pipeline.ctx.package-info" />
	<class name="com.itextpdf.tool.xml.parser.state.package-info" />
	<class name="com.itextpdf.tool.xml.css.package-info" />
	<class name="com.itextpdf.tool.xml.package-info" />
	<class name="com.itextpdf.tool.xml.exceptions.package-info" />
	<class name="com.itextpdf.tool.xml.pipeline.end.package-info" />
	<class name="com.itextpdf.tool.xml.css.parser.package-info" />
</entrypoints>

<!-- writing shrinked C:\Perso\tourma\dist\TourMa.jar to C:\Perso\tourma\dist\TourMa_obf.jar. -->
<inOutPair in="C:\Perso\tourma\dist\TourMa.jar" out="C:\Perso\tourma\dist\TourMa_obf.jar">
	<removed-code>
		<class name="com.hexidec.component.EkitStandardParserCallback" />
		<class name="com.hexidec.ekit.Ekit" />
		<class name="com.hexidec.ekit.EkitApplet" />
		<field name="jcmbColorSelector" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_MENU_FILE" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_MENU_EDIT" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_MENU_VIEW" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_MENU_FONT" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_MENU_FORMAT" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_MENU_INSERT" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_MENU_TABLE" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_MENU_FORMS" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_MENU_SEARCH" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_MENU_TOOLS" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_MENU_HELP" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_MENU_DEBUG" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_SEP" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_NEW" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_NEWSTYLED" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_OPEN" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_SAVE" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_PRINT" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_CUT" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_COPY" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_PASTE" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_PASTEX" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_UNDO" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_REDO" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_BOLD" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_ITALIC" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_UNDERLINE" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_STRIKE" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_SUPER" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_SUB" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_ULIST" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_OLIST" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_ALIGNL" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_ALIGNC" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_ALIGNR" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_ALIGNJ" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_UNICODE" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_UNIMATH" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_FIND" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_ANCHOR" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_SOURCE" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_STYLES" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_FONTS" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_INSTABLE" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_EDITTABLE" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_EDITCELL" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_INSERTROW" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_INSERTCOL" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_DELETEROW" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_DELETECOL" class="com.hexidec.ekit.EkitCore" />
		<field name="TOOLBAR_DEFAULT_MULTI" class="com.hexidec.ekit.EkitCore" />
		<field name="TOOLBAR_DEFAULT_SINGLE" class="com.hexidec.ekit.EkitCore" />
		<field name="TOOLBAR_SINGLE" class="com.hexidec.ekit.EkitCore" />
		<field name="TOOLBAR_MAIN" class="com.hexidec.ekit.EkitCore" />
		<field name="TOOLBAR_FORMAT" class="com.hexidec.ekit.EkitCore" />
		<field name="TOOLBAR_STYLES" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_DOC_NEW" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_DOC_NEW_STYLED" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_DOC_OPEN_HTML" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_DOC_OPEN_CSS" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_DOC_OPEN_BASE64" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_DOC_SAVE" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_DOC_SAVE_AS" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_DOC_SAVE_BODY" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_DOC_SAVE_RTF" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_DOC_SAVE_BASE64" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_DOC_PRINT" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_DOC_SERIALIZE_OUT" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_DOC_SERIALIZE_IN" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_EXIT" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_SEARCH_FIND" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_SEARCH_FIND_AGAIN" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_SEARCH_REPLACE" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_CLIP_CUT" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_CLIP_COPY" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_CLIP_PASTE" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_CLIP_PASTE_PLAIN" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_TOGGLE_TOOLBAR_SINGLE" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_TOGGLE_TOOLBAR_MAIN" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_TOGGLE_TOOLBAR_FORMAT" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_TOGGLE_TOOLBAR_STYLES" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_TOGGLE_SOURCE_VIEW" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_TABLE_INSERT" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_TABLE_EDIT" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_TABLE_CELL_EDIT" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_TABLE_ROW_INSERT" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_TABLE_ROW_DELETE" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_TABLE_COLUMN_INSERT" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_TABLE_COLUMN_DELETE" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_INSERT_BREAK" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_INSERT_NBSP" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_INSERT_HR" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_INSERT_IMAGE_LOCAL" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_INSERT_IMAGE_URL" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_INSERT_UNICODE_CHAR" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_INSERT_UNICODE_MATH" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_INSERT_UNICODE_DRAW" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_INSERT_UNICODE_DING" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_INSERT_UNICODE_SIGS" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_INSERT_UNICODE_SPEC" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_FORM_INSERT" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_FORM_TEXTFIELD" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_FORM_TEXTAREA" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_FORM_CHECKBOX" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_FORM_RADIO" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_FORM_PASSWORD" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_FORM_BUTTON" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_FORM_SUBMIT" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_FORM_RESET" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_ENTER_PARAGRAPH" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_ENTER_BREAK" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_SPELLCHECK" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_HELP_ABOUT" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_DEBUG_DESCRIBE_DOC" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_DEBUG_DESCRIBE_CSS" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_DEBUG_CURRENT_TAGS" class="com.hexidec.ekit.EkitCore" />
		<method signature="void &lt;init&gt;(boolean,java.lang.String,java.net.URL,boolean,boolean,boolean,boolean,java.lang.String,java.lang.String,boolean,boolean,boolean,java.lang.String,boolean)" class="com.hexidec.ekit.EkitCore" />
		<method signature="void insertTableCell()" class="com.hexidec.ekit.EkitCore" />
		<method signature="java.lang.String getRTFDocument()" class="com.hexidec.ekit.EkitCore" />
		<method signature="void saveDocument()" class="com.hexidec.ekit.EkitCore" />
		<method signature="void loadDocument(java.io.File)" class="com.hexidec.ekit.EkitCore" />
		<method signature="void loadDocument(java.io.File,java.lang.String)" class="com.hexidec.ekit.EkitCore" />
		<method signature="void loadDocument(java.io.File,javax.swing.text.html.HTMLEditorKit$ParserCallback)" class="com.hexidec.ekit.EkitCore" />
		<method signature="void setFrame(java.awt.Frame)" class="com.hexidec.ekit.EkitCore" />
		<method signature="javax.swing.JMenuBar getCustomMenuBar(java.util.Vector)" class="com.hexidec.ekit.EkitCore" />
		<method signature="javax.swing.JToolBar getToolBar(boolean)" class="com.hexidec.ekit.EkitCore" />
		<method signature="java.io.File getCurrentFile()" class="com.hexidec.ekit.EkitCore" />
		<method signature="java.lang.String getAppName()" class="com.hexidec.ekit.EkitCore" />
		<method signature="java.lang.String getDocumentText()" class="com.hexidec.ekit.EkitCore" />
		<method signature="java.lang.String getDocumentSubText(java.lang.String)" class="com.hexidec.ekit.EkitCore" />
		<method signature="void setSourceDocument(javax.swing.text.StyledDocument)" class="com.hexidec.ekit.EkitCore" />
		<class name="com.hexidec.ekit.EkitCoreSpell" />
		<field name="sListType" class="com.hexidec.ekit.action.ListAutomationAction" />
		<method signature="void &lt;init&gt;(javax.swing.text.AbstractDocument$Content,javax.swing.text.html.StyleSheet)" class="com.hexidec.ekit.component.ExtendedHTMLDocument" />
		<method signature="void &lt;init&gt;()" class="com.hexidec.ekit.component.ExtendedHTMLDocument" />
		<method signature="void &lt;init&gt;(java.awt.Frame,java.lang.String,boolean,java.lang.String)" class="com.hexidec.ekit.component.FontSelectorDialog" />
		<method signature="void &lt;init&gt;()" class="com.hexidec.ekit.component.ImageFileChooser" />
		<field name="previewWidth" class="com.hexidec.ekit.component.ImageFileChooserPreview" />
		<field name="previewHeight" class="com.hexidec.ekit.component.ImageFileChooserPreview" />
		<method signature="java.lang.String getImageSrc()" class="com.hexidec.ekit.component.ImageFileDialog" />
		<method signature="java.lang.String getDecisionValue()" class="com.hexidec.ekit.component.ImageURLDialog" />
		<method signature="void &lt;init&gt;(java.lang.String,javax.swing.Icon)" class="com.hexidec.ekit.component.JButtonNoFocus" />
		<method signature="void &lt;init&gt;()" class="com.hexidec.ekit.component.JToggleButtonNoFocus" />
		<method signature="void &lt;init&gt;(javax.swing.Action)" class="com.hexidec.ekit.component.JToggleButtonNoFocus" />
		<method signature="void &lt;init&gt;(java.lang.String)" class="com.hexidec.ekit.component.JToggleButtonNoFocus" />
		<method signature="void &lt;init&gt;(java.lang.String,javax.swing.Icon)" class="com.hexidec.ekit.component.JToggleButtonNoFocus" />
		<method signature="void &lt;init&gt;(java.awt.Frame,java.lang.String[],java.lang.String[],java.lang.String,boolean)" class="com.hexidec.ekit.component.PropertiesDialog" />
		<field name="TOP" class="com.hexidec.ekit.component.RelativeImageView" />
		<field name="TEXTTOP" class="com.hexidec.ekit.component.RelativeImageView" />
		<field name="MIDDLE" class="com.hexidec.ekit.component.RelativeImageView" />
		<field name="ABSMIDDLE" class="com.hexidec.ekit.component.RelativeImageView" />
		<field name="CENTER" class="com.hexidec.ekit.component.RelativeImageView" />
		<field name="BOTTOM" class="com.hexidec.ekit.component.RelativeImageView" />
		<field name="IMAGE_CACHE_PROPERTY" class="com.hexidec.ekit.component.RelativeImageView" />
		<field name="PENDING_IMAGE_SRC" class="com.hexidec.ekit.component.RelativeImageView" />
		<field name="MISSING_IMAGE_SRC" class="com.hexidec.ekit.component.RelativeImageView" />
		<field name="DEFAULT_WIDTH" class="com.hexidec.ekit.component.RelativeImageView" />
		<field name="DEFAULT_HEIGHT" class="com.hexidec.ekit.component.RelativeImageView" />
		<field name="DEFAULT_BORDER" class="com.hexidec.ekit.component.RelativeImageView" />
		<method signature="java.awt.Color getHighlightColor()" class="com.hexidec.ekit.component.RelativeImageView" />
		<field name="ERROR" class="com.hexidec.ekit.component.SimpleInfoDialog" />
		<field name="INFO" class="com.hexidec.ekit.component.SimpleInfoDialog" />
		<field name="WARNING" class="com.hexidec.ekit.component.SimpleInfoDialog" />
		<field name="QUESTION" class="com.hexidec.ekit.component.SimpleInfoDialog" />
		<field name="PLAIN" class="com.hexidec.ekit.component.SimpleInfoDialog" />
		<field name="UNICODE_BASE" class="com.hexidec.ekit.component.UnicodeDialog" />
		<field name="UNICODE_SIGS" class="com.hexidec.ekit.component.UnicodeDialog" />
		<field name="UNICODE_SPEC" class="com.hexidec.ekit.component.UnicodeDialog" />
		<field name="UNICODE_MATH" class="com.hexidec.ekit.component.UnicodeDialog" />
		<field name="UNICODE_DRAW" class="com.hexidec.ekit.component.UnicodeDialog" />
		<field name="UNICODE_DING" class="com.hexidec.ekit.component.UnicodeDialog" />
		<field name="UNICODEBLOCKSIZE" class="com.hexidec.ekit.component.UnicodeDialog" />
		<field name="CMDCHANGEBLOCK" class="com.hexidec.ekit.component.UnicodeDialog" />
		<method signature="void setAnchor(java.lang.String)" class="com.hexidec.ekit.component.UserInputAnchorDialog" />
		<class name="com.hexidec.ekit.component.UserInputDialog$1" />
		<class name="com.hexidec.ekit.component.UserInputDialog$2" />
		<class name="com.hexidec.ekit.component.UserInputDialog$3" />
		<class name="com.hexidec.ekit.component.UserInputDialog" />
		<method signature="javax.swing.text.Document getDocument()" class="com.hexidec.ekit.thirdparty.print.DocumentRenderer" />
		<method signature="boolean getScaleWidthToFit()" class="com.hexidec.ekit.thirdparty.print.DocumentRenderer" />
		<method signature="void pageDialog()" class="com.hexidec.ekit.thirdparty.print.DocumentRenderer" />
		<method signature="void print(javax.swing.JEditorPane)" class="com.hexidec.ekit.thirdparty.print.DocumentRenderer" />
		<method signature="void print(javax.swing.text.PlainDocument)" class="com.hexidec.ekit.thirdparty.print.DocumentRenderer" />
		<method signature="void printHtmlString(java.lang.String)" class="com.hexidec.ekit.thirdparty.print.DocumentRenderer" />
		<method signature="void printHtmlString(java.lang.String,java.awt.Dimension)" class="com.hexidec.ekit.thirdparty.print.DocumentRenderer" />
		<method signature="void setDocument(javax.swing.JEditorPane)" class="com.hexidec.ekit.thirdparty.print.DocumentRenderer" />
		<method signature="void setDocument(javax.swing.text.PlainDocument)" class="com.hexidec.ekit.thirdparty.print.DocumentRenderer" />
		<method signature="void setScaleWidthToFit(boolean)" class="com.hexidec.ekit.thirdparty.print.DocumentRenderer" />
		<method signature="void setSize(java.awt.Dimension)" class="com.hexidec.ekit.thirdparty.print.DocumentRenderer" />
		<field name="BASE64PAD" class="com.hexidec.util.Base64Codec" />
		<field name="LINEFEED" class="com.hexidec.util.Base64Codec" />
		<field name="CARRIAGE" class="com.hexidec.util.Base64Codec" />
		<field name="LINEMAX" class="com.hexidec.util.Base64Codec" />
		<method signature="void &lt;init&gt;()" class="com.hexidec.util.Base64Codec" />
		<method signature="void &lt;init&gt;(java.lang.String)" class="com.hexidec.util.Translatrix" />
		<method signature="void setLocale(java.lang.String,java.lang.String)" class="com.hexidec.util.Translatrix" />
		<class name="com.itextpdf.awt.AsianFontMapper" />
		<class name="com.itextpdf.awt.DefaultFontMapper$BaseFontParameters" />
		<class name="com.itextpdf.awt.DefaultFontMapper" />
		<class name="com.itextpdf.awt.FontMapper" />
		<class name="com.itextpdf.awt.PdfGraphics2D$1" />
		<class name="com.itextpdf.awt.PdfGraphics2D$FakeComponent" />
		<class name="com.itextpdf.awt.PdfGraphics2D$HyperLinkKey" />
		<class name="com.itextpdf.awt.PdfGraphics2D$Kid" />
		<class name="com.itextpdf.awt.PdfGraphics2D" />
		<class name="com.itextpdf.awt.PdfPrinterGraphics2D" />
		<field name="serialVersionUID" class="com.itextpdf.awt.geom.AffineTransform" />
		<field name="TYPE_IDENTITY" class="com.itextpdf.awt.geom.AffineTransform" />
		<field name="TYPE_TRANSLATION" class="com.itextpdf.awt.geom.AffineTransform" />
		<field name="TYPE_UNIFORM_SCALE" class="com.itextpdf.awt.geom.AffineTransform" />
		<field name="TYPE_GENERAL_SCALE" class="com.itextpdf.awt.geom.AffineTransform" />
		<field name="TYPE_QUADRANT_ROTATION" class="com.itextpdf.awt.geom.AffineTransform" />
		<field name="TYPE_GENERAL_ROTATION" class="com.itextpdf.awt.geom.AffineTransform" />
		<field name="TYPE_GENERAL_TRANSFORM" class="com.itextpdf.awt.geom.AffineTransform" />
		<field name="TYPE_FLIP" class="com.itextpdf.awt.geom.AffineTransform" />
		<field name="TYPE_MASK_SCALE" class="com.itextpdf.awt.geom.AffineTransform" />
		<field name="TYPE_MASK_ROTATION" class="com.itextpdf.awt.geom.AffineTransform" />
		<field name="TYPE_UNKNOWN" class="com.itextpdf.awt.geom.AffineTransform" />
		<field name="ZERO" class="com.itextpdf.awt.geom.AffineTransform" />
		<method signature="void &lt;init&gt;(float,float,float,float,float,float)" class="com.itextpdf.awt.geom.AffineTransform" />
		<method signature="void &lt;init&gt;(float[])" class="com.itextpdf.awt.geom.AffineTransform" />
		<method signature="void &lt;init&gt;(double[])" class="com.itextpdf.awt.geom.AffineTransform" />
		<method signature="double getScaleX()" class="com.itextpdf.awt.geom.AffineTransform" />
		<method signature="double getScaleY()" class="com.itextpdf.awt.geom.AffineTransform" />
		<method signature="double getShearX()" class="com.itextpdf.awt.geom.AffineTransform" />
		<method signature="double getShearY()" class="com.itextpdf.awt.geom.AffineTransform" />
		<method signature="double getTranslateX()" class="com.itextpdf.awt.geom.AffineTransform" />
		<method signature="double getTranslateY()" class="com.itextpdf.awt.geom.AffineTransform" />
		<method signature="void getMatrix(double[])" class="com.itextpdf.awt.geom.AffineTransform" />
		<method signature="double getDeterminant()" class="com.itextpdf.awt.geom.AffineTransform" />
		<method signature="void setToIdentity()" class="com.itextpdf.awt.geom.AffineTransform" />
		<method signature="void setToTranslation(double,double)" class="com.itextpdf.awt.geom.AffineTransform" />
		<method signature="void setToScale(double,double)" class="com.itextpdf.awt.geom.AffineTransform" />
		<method signature="void setToShear(double,double)" class="com.itextpdf.awt.geom.AffineTransform" />
		<method signature="void setToRotation(double)" class="com.itextpdf.awt.geom.AffineTransform" />
		<method signature="void setToRotation(double,double,double)" class="com.itextpdf.awt.geom.AffineTransform" />
		<method signature="com.itextpdf.awt.geom.AffineTransform getTranslateInstance(double,double)" class="com.itextpdf.awt.geom.AffineTransform" />
		<method signature="com.itextpdf.awt.geom.AffineTransform getScaleInstance(double,double)" class="com.itextpdf.awt.geom.AffineTransform" />
		<method signature="com.itextpdf.awt.geom.AffineTransform getShearInstance(double,double)" class="com.itextpdf.awt.geom.AffineTransform" />
		<method signature="com.itextpdf.awt.geom.AffineTransform getRotateInstance(double)" class="com.itextpdf.awt.geom.AffineTransform" />
		<method signature="com.itextpdf.awt.geom.AffineTransform getRotateInstance(double,double,double)" class="com.itextpdf.awt.geom.AffineTransform" />
		<method signature="void translate(double,double)" class="com.itextpdf.awt.geom.AffineTransform" />
		<method signature="void scale(double,double)" class="com.itextpdf.awt.geom.AffineTransform" />
		<method signature="void shear(double,double)" class="com.itextpdf.awt.geom.AffineTransform" />
		<method signature="void rotate(double)" class="com.itextpdf.awt.geom.AffineTransform" />
		<method signature="void rotate(double,double,double)" class="com.itextpdf.awt.geom.AffineTransform" />
		<method signature="void preConcatenate(com.itextpdf.awt.geom.AffineTransform)" class="com.itextpdf.awt.geom.AffineTransform" />
		<method signature="com.itextpdf.awt.geom.AffineTransform createInverse()" class="com.itextpdf.awt.geom.AffineTransform" />
		<method signature="com.itextpdf.awt.geom.Point2D transform(com.itextpdf.awt.geom.Point2D,com.itextpdf.awt.geom.Point2D)" class="com.itextpdf.awt.geom.AffineTransform" />
		<method signature="void transform(double[],int,double[],int,int)" class="com.itextpdf.awt.geom.AffineTransform" />
		<method signature="void transform(float[],int,double[],int,int)" class="com.itextpdf.awt.geom.AffineTransform" />
		<method signature="void transform(double[],int,float[],int,int)" class="com.itextpdf.awt.geom.AffineTransform" />
		<method signature="com.itextpdf.awt.geom.Point2D deltaTransform(com.itextpdf.awt.geom.Point2D,com.itextpdf.awt.geom.Point2D)" class="com.itextpdf.awt.geom.AffineTransform" />
		<method signature="void deltaTransform(double[],int,double[],int,int)" class="com.itextpdf.awt.geom.AffineTransform" />
		<method signature="com.itextpdf.awt.geom.Point2D inverseTransform(com.itextpdf.awt.geom.Point2D,com.itextpdf.awt.geom.Point2D)" class="com.itextpdf.awt.geom.AffineTransform" />
		<method signature="void inverseTransform(double[],int,double[],int,int)" class="com.itextpdf.awt.geom.AffineTransform" />
		<method signature="void inverseTransform(float[],int,float[],int,int)" class="com.itextpdf.awt.geom.AffineTransform" />
		<method signature="com.itextpdf.awt.geom.Shape createTransformedShape(com.itextpdf.awt.geom.Shape)" class="com.itextpdf.awt.geom.AffineTransform" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="com.itextpdf.awt.geom.AffineTransform" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="com.itextpdf.awt.geom.AffineTransform" />
		<class name="com.itextpdf.awt.geom.CubicCurve2D$Double" />
		<class name="com.itextpdf.awt.geom.CubicCurve2D$Float" />
		<class name="com.itextpdf.awt.geom.CubicCurve2D$Iterator" />
		<class name="com.itextpdf.awt.geom.CubicCurve2D" />
		<class name="com.itextpdf.awt.geom.Dimension" />
		<class name="com.itextpdf.awt.geom.Dimension2D" />
		<class name="com.itextpdf.awt.geom.FlatteningPathIterator" />
		<class name="com.itextpdf.awt.geom.GeneralPath$Iterator" />
		<class name="com.itextpdf.awt.geom.GeneralPath" />
		<class name="com.itextpdf.awt.geom.IllegalPathStateException" />
		<class name="com.itextpdf.awt.geom.Line2D$Double" />
		<class name="com.itextpdf.awt.geom.Line2D$Float" />
		<class name="com.itextpdf.awt.geom.Line2D$Iterator" />
		<class name="com.itextpdf.awt.geom.Line2D" />
		<class name="com.itextpdf.awt.geom.NoninvertibleTransformException" />
		<class name="com.itextpdf.awt.geom.PathIterator" />
		<class name="com.itextpdf.awt.geom.Point" />
		<method signature="void &lt;init&gt;(double,double)" class="com.itextpdf.awt.geom.Point2D$Double" />
		<method signature="void setLocation(float,float)" class="com.itextpdf.awt.geom.Point2D$Float" />
		<method signature="void setLocation(com.itextpdf.awt.geom.Point2D)" class="com.itextpdf.awt.geom.Point2D" />
		<method signature="double distanceSq(double,double,double,double)" class="com.itextpdf.awt.geom.Point2D" />
		<method signature="double distanceSq(double,double)" class="com.itextpdf.awt.geom.Point2D" />
		<method signature="double distanceSq(com.itextpdf.awt.geom.Point2D)" class="com.itextpdf.awt.geom.Point2D" />
		<method signature="double distance(double,double,double,double)" class="com.itextpdf.awt.geom.Point2D" />
		<method signature="double distance(double,double)" class="com.itextpdf.awt.geom.Point2D" />
		<method signature="double distance(com.itextpdf.awt.geom.Point2D)" class="com.itextpdf.awt.geom.Point2D" />
		<class name="com.itextpdf.awt.geom.PolylineShape" />
		<class name="com.itextpdf.awt.geom.PolylineShapeIterator" />
		<class name="com.itextpdf.awt.geom.QuadCurve2D$Double" />
		<class name="com.itextpdf.awt.geom.QuadCurve2D$Float" />
		<class name="com.itextpdf.awt.geom.QuadCurve2D$Iterator" />
		<class name="com.itextpdf.awt.geom.QuadCurve2D" />
		<class name="com.itextpdf.awt.geom.Rectangle" />
		<class name="com.itextpdf.awt.geom.Rectangle2D$Double" />
		<class name="com.itextpdf.awt.geom.Rectangle2D$Float" />
		<class name="com.itextpdf.awt.geom.Rectangle2D$Iterator" />
		<class name="com.itextpdf.awt.geom.Rectangle2D" />
		<class name="com.itextpdf.awt.geom.RectangularShape" />
		<class name="com.itextpdf.awt.geom.Shape" />
		<class name="com.itextpdf.awt.geom.gl.Crossing$CubicCurve" />
		<class name="com.itextpdf.awt.geom.gl.Crossing$QuadCurve" />
		<class name="com.itextpdf.awt.geom.gl.Crossing" />
		<field name="EMPTY_HASH_CODE" class="com.itextpdf.awt.geom.misc.HashCode" />
		<method signature="int combine(int,boolean)" class="com.itextpdf.awt.geom.misc.HashCode" />
		<method signature="int combine(int,float)" class="com.itextpdf.awt.geom.misc.HashCode" />
		<method signature="int combine(int,java.lang.Object)" class="com.itextpdf.awt.geom.misc.HashCode" />
		<method signature="com.itextpdf.awt.geom.misc.HashCode append(int)" class="com.itextpdf.awt.geom.misc.HashCode" />
		<method signature="com.itextpdf.awt.geom.misc.HashCode append(long)" class="com.itextpdf.awt.geom.misc.HashCode" />
		<method signature="com.itextpdf.awt.geom.misc.HashCode append(float)" class="com.itextpdf.awt.geom.misc.HashCode" />
		<method signature="com.itextpdf.awt.geom.misc.HashCode append(boolean)" class="com.itextpdf.awt.geom.misc.HashCode" />
		<method signature="com.itextpdf.awt.geom.misc.HashCode append(java.lang.Object)" class="com.itextpdf.awt.geom.misc.HashCode" />
		<class name="com.itextpdf.awt.geom.misc.Messages" />
		<class name="com.itextpdf.awt.geom.misc.RenderingHints$Key" />
		<class name="com.itextpdf.awt.geom.misc.RenderingHints$KeyImpl" />
		<class name="com.itextpdf.awt.geom.misc.RenderingHints$KeyValue" />
		<class name="com.itextpdf.awt.geom.misc.RenderingHints" />
		<class name="com.itextpdf.testutils.CompareTool$1" />
		<class name="com.itextpdf.testutils.CompareTool$CmpMarkedContentRenderFilter" />
		<class name="com.itextpdf.testutils.CompareTool$CmpPngFileFilter" />
		<class name="com.itextpdf.testutils.CompareTool$CmpTaggedPdfReaderTool" />
		<class name="com.itextpdf.testutils.CompareTool$CompareResult" />
		<class name="com.itextpdf.testutils.CompareTool$ImageNameComparator" />
		<class name="com.itextpdf.testutils.CompareTool$ObjectPath$ArrayPathItem" />
		<class name="com.itextpdf.testutils.CompareTool$ObjectPath$DictPathItem" />
		<class name="com.itextpdf.testutils.CompareTool$ObjectPath$OffsetPathItem" />
		<class name="com.itextpdf.testutils.CompareTool$ObjectPath$Pair" />
		<class name="com.itextpdf.testutils.CompareTool$ObjectPath$PathItem" />
		<class name="com.itextpdf.testutils.CompareTool$ObjectPath" />
		<class name="com.itextpdf.testutils.CompareTool$PngFileFilter" />
		<class name="com.itextpdf.testutils.CompareTool" />
		<class name="com.itextpdf.testutils.ITextTest" />
		<field name="serialVersionUID" class="com.itextpdf.text.Anchor" />
		<field name="name" class="com.itextpdf.text.Anchor" />
		<field name="reference" class="com.itextpdf.text.Anchor" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.text.Anchor" />
		<method signature="void &lt;init&gt;(float)" class="com.itextpdf.text.Anchor" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.Chunk)" class="com.itextpdf.text.Anchor" />
		<method signature="void &lt;init&gt;(java.lang.String)" class="com.itextpdf.text.Anchor" />
		<method signature="void &lt;init&gt;(java.lang.String,com.itextpdf.text.Font)" class="com.itextpdf.text.Anchor" />
		<method signature="void &lt;init&gt;(float,com.itextpdf.text.Chunk)" class="com.itextpdf.text.Anchor" />
		<method signature="void &lt;init&gt;(float,java.lang.String)" class="com.itextpdf.text.Anchor" />
		<method signature="void &lt;init&gt;(float,java.lang.String,com.itextpdf.text.Font)" class="com.itextpdf.text.Anchor" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.Phrase)" class="com.itextpdf.text.Anchor" />
		<method signature="boolean process(com.itextpdf.text.ElementListener)" class="com.itextpdf.text.Anchor" />
		<method signature="java.util.List getChunks()" class="com.itextpdf.text.Anchor" />
		<method signature="boolean applyAnchor(com.itextpdf.text.Chunk,boolean,boolean)" class="com.itextpdf.text.Anchor" />
		<method signature="int type()" class="com.itextpdf.text.Anchor" />
		<method signature="void setName(java.lang.String)" class="com.itextpdf.text.Anchor" />
		<method signature="void setReference(java.lang.String)" class="com.itextpdf.text.Anchor" />
		<method signature="java.lang.String getName()" class="com.itextpdf.text.Anchor" />
		<method signature="java.net.URL getUrl()" class="com.itextpdf.text.Anchor" />
		<field name="TEXT" class="com.itextpdf.text.Annotation" />
		<field name="URL_NET" class="com.itextpdf.text.Annotation" />
		<field name="URL_AS_STRING" class="com.itextpdf.text.Annotation" />
		<field name="FILE_DEST" class="com.itextpdf.text.Annotation" />
		<field name="FILE_PAGE" class="com.itextpdf.text.Annotation" />
		<field name="NAMED_DEST" class="com.itextpdf.text.Annotation" />
		<field name="LAUNCH" class="com.itextpdf.text.Annotation" />
		<field name="SCREEN" class="com.itextpdf.text.Annotation" />
		<field name="TITLE" class="com.itextpdf.text.Annotation" />
		<field name="CONTENT" class="com.itextpdf.text.Annotation" />
		<field name="URL" class="com.itextpdf.text.Annotation" />
		<field name="FILE" class="com.itextpdf.text.Annotation" />
		<field name="DESTINATION" class="com.itextpdf.text.Annotation" />
		<field name="PAGE" class="com.itextpdf.text.Annotation" />
		<field name="NAMED" class="com.itextpdf.text.Annotation" />
		<field name="APPLICATION" class="com.itextpdf.text.Annotation" />
		<field name="PARAMETERS" class="com.itextpdf.text.Annotation" />
		<field name="OPERATION" class="com.itextpdf.text.Annotation" />
		<field name="DEFAULTDIR" class="com.itextpdf.text.Annotation" />
		<field name="LLX" class="com.itextpdf.text.Annotation" />
		<field name="LLY" class="com.itextpdf.text.Annotation" />
		<field name="URX" class="com.itextpdf.text.Annotation" />
		<field name="URY" class="com.itextpdf.text.Annotation" />
		<field name="MIMETYPE" class="com.itextpdf.text.Annotation" />
		<method signature="void &lt;init&gt;(float,float,float,float)" class="com.itextpdf.text.Annotation" />
		<method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="com.itextpdf.text.Annotation" />
		<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,float,float,float,float)" class="com.itextpdf.text.Annotation" />
		<method signature="void &lt;init&gt;(float,float,float,float,java.net.URL)" class="com.itextpdf.text.Annotation" />
		<method signature="void &lt;init&gt;(float,float,float,float,java.lang.String)" class="com.itextpdf.text.Annotation" />
		<method signature="void &lt;init&gt;(float,float,float,float,java.lang.String,java.lang.String)" class="com.itextpdf.text.Annotation" />
		<method signature="void &lt;init&gt;(float,float,float,float,java.lang.String,java.lang.String,boolean)" class="com.itextpdf.text.Annotation" />
		<method signature="void &lt;init&gt;(float,float,float,float,java.lang.String,int)" class="com.itextpdf.text.Annotation" />
		<method signature="void &lt;init&gt;(float,float,float,float,int)" class="com.itextpdf.text.Annotation" />
		<method signature="void &lt;init&gt;(float,float,float,float,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="com.itextpdf.text.Annotation" />
		<method signature="boolean isNestable()" class="com.itextpdf.text.Annotation" />
		<class name="com.itextpdf.text.BadElementException" />
		<field name="FACTOR" class="com.itextpdf.text.BaseColor" />
		<method signature="void &lt;init&gt;(int)" class="com.itextpdf.text.BaseColor" />
		<method signature="com.itextpdf.text.BaseColor brighter()" class="com.itextpdf.text.BaseColor" />
		<method signature="com.itextpdf.text.BaseColor darker()" class="com.itextpdf.text.BaseColor" />
		<field name="serialVersionUID" class="com.itextpdf.text.Chapter" />
		<method signature="void &lt;init&gt;(int)" class="com.itextpdf.text.Chapter" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.Paragraph,int)" class="com.itextpdf.text.Chapter" />
		<method signature="void &lt;init&gt;(java.lang.String,int)" class="com.itextpdf.text.Chapter" />
		<method signature="int type()" class="com.itextpdf.text.Chapter" />
		<method signature="boolean isNestable()" class="com.itextpdf.text.Chapter" />
		<field name="serialVersionUID" class="com.itextpdf.text.ChapterAutoNumber" />
		<field name="numberSet" class="com.itextpdf.text.ChapterAutoNumber" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.Paragraph)" class="com.itextpdf.text.ChapterAutoNumber" />
		<method signature="void &lt;init&gt;(java.lang.String)" class="com.itextpdf.text.ChapterAutoNumber" />
		<method signature="com.itextpdf.text.Section addSection(java.lang.String)" class="com.itextpdf.text.ChapterAutoNumber" />
		<method signature="com.itextpdf.text.Section addSection(com.itextpdf.text.Paragraph)" class="com.itextpdf.text.ChapterAutoNumber" />
		<field name="OBJECT_REPLACEMENT_CHARACTER" class="com.itextpdf.text.Chunk" />
		<field name="SEPARATOR" class="com.itextpdf.text.Chunk" />
		<field name="TAB" class="com.itextpdf.text.Chunk" />
		<field name="TABSETTINGS" class="com.itextpdf.text.Chunk" />
		<field name="HSCALE" class="com.itextpdf.text.Chunk" />
		<field name="UNDERLINE" class="com.itextpdf.text.Chunk" />
		<field name="SUBSUPSCRIPT" class="com.itextpdf.text.Chunk" />
		<field name="SKEW" class="com.itextpdf.text.Chunk" />
		<field name="BACKGROUND" class="com.itextpdf.text.Chunk" />
		<field name="TEXTRENDERMODE" class="com.itextpdf.text.Chunk" />
		<field name="SPLITCHARACTER" class="com.itextpdf.text.Chunk" />
		<field name="HYPHENATION" class="com.itextpdf.text.Chunk" />
		<field name="REMOTEGOTO" class="com.itextpdf.text.Chunk" />
		<field name="LOCALGOTO" class="com.itextpdf.text.Chunk" />
		<field name="LOCALDESTINATION" class="com.itextpdf.text.Chunk" />
		<field name="GENERICTAG" class="com.itextpdf.text.Chunk" />
		<field name="LINEHEIGHT" class="com.itextpdf.text.Chunk" />
		<field name="IMAGE" class="com.itextpdf.text.Chunk" />
		<field name="ACTION" class="com.itextpdf.text.Chunk" />
		<field name="NEWPAGE" class="com.itextpdf.text.Chunk" />
		<field name="PDFANNOTATION" class="com.itextpdf.text.Chunk" />
		<field name="COLOR" class="com.itextpdf.text.Chunk" />
		<field name="ENCODING" class="com.itextpdf.text.Chunk" />
		<field name="CHAR_SPACING" class="com.itextpdf.text.Chunk" />
		<field name="WORD_SPACING" class="com.itextpdf.text.Chunk" />
		<field name="WHITESPACE" class="com.itextpdf.text.Chunk" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.text.Chunk" />
		<method signature="void &lt;init&gt;(char,com.itextpdf.text.Font)" class="com.itextpdf.text.Chunk" />
		<method signature="void &lt;init&gt;(char)" class="com.itextpdf.text.Chunk" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.Image,float,float)" class="com.itextpdf.text.Chunk" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.pdf.draw.DrawInterface)" class="com.itextpdf.text.Chunk" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.pdf.draw.DrawInterface,boolean)" class="com.itextpdf.text.Chunk" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.pdf.draw.DrawInterface,float)" class="com.itextpdf.text.Chunk" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.pdf.draw.DrawInterface,float,boolean)" class="com.itextpdf.text.Chunk" />
		<method signature="float getWidthPoint()" class="com.itextpdf.text.Chunk" />
		<method signature="com.itextpdf.text.Chunk setHorizontalScaling(float)" class="com.itextpdf.text.Chunk" />
		<method signature="float getHorizontalScaling()" class="com.itextpdf.text.Chunk" />
		<method signature="com.itextpdf.text.Chunk setUnderline(float,float)" class="com.itextpdf.text.Chunk" />
		<method signature="com.itextpdf.text.Chunk setUnderline(com.itextpdf.text.BaseColor,float,float,float,float,int)" class="com.itextpdf.text.Chunk" />
		<method signature="com.itextpdf.text.Chunk setTextRise(float)" class="com.itextpdf.text.Chunk" />
		<method signature="float getTextRise()" class="com.itextpdf.text.Chunk" />
		<method signature="com.itextpdf.text.Chunk setSkew(float,float)" class="com.itextpdf.text.Chunk" />
		<method signature="com.itextpdf.text.Chunk setBackground(com.itextpdf.text.BaseColor)" class="com.itextpdf.text.Chunk" />
		<method signature="com.itextpdf.text.Chunk setBackground(com.itextpdf.text.BaseColor,float,float,float,float)" class="com.itextpdf.text.Chunk" />
		<method signature="com.itextpdf.text.Chunk setTextRenderMode(int,float,com.itextpdf.text.BaseColor)" class="com.itextpdf.text.Chunk" />
		<method signature="com.itextpdf.text.Chunk setSplitCharacter(com.itextpdf.text.SplitCharacter)" class="com.itextpdf.text.Chunk" />
		<method signature="com.itextpdf.text.Chunk setRemoteGoto(java.lang.String,java.lang.String)" class="com.itextpdf.text.Chunk" />
		<method signature="com.itextpdf.text.Chunk setRemoteGoto(java.lang.String,int)" class="com.itextpdf.text.Chunk" />
		<method signature="com.itextpdf.text.Chunk setLocalGoto(java.lang.String)" class="com.itextpdf.text.Chunk" />
		<method signature="com.itextpdf.text.Chunk setLocalDestination(java.lang.String)" class="com.itextpdf.text.Chunk" />
		<method signature="com.itextpdf.text.Chunk setGenericTag(java.lang.String)" class="com.itextpdf.text.Chunk" />
		<method signature="com.itextpdf.text.Chunk setLineHeight(float)" class="com.itextpdf.text.Chunk" />
		<method signature="com.itextpdf.text.Chunk setAction(com.itextpdf.text.pdf.PdfAction)" class="com.itextpdf.text.Chunk" />
		<method signature="com.itextpdf.text.Chunk setAnchor(java.net.URL)" class="com.itextpdf.text.Chunk" />
		<method signature="com.itextpdf.text.Chunk setAnchor(java.lang.String)" class="com.itextpdf.text.Chunk" />
		<method signature="com.itextpdf.text.Chunk setAnnotation(com.itextpdf.text.pdf.PdfAnnotation)" class="com.itextpdf.text.Chunk" />
		<method signature="boolean isNestable()" class="com.itextpdf.text.Chunk" />
		<method signature="com.itextpdf.text.Chunk setCharacterSpacing(float)" class="com.itextpdf.text.Chunk" />
		<method signature="float getCharacterSpacing()" class="com.itextpdf.text.Chunk" />
		<method signature="com.itextpdf.text.Chunk setWordSpacing(float)" class="com.itextpdf.text.Chunk" />
		<method signature="float getWordSpacing()" class="com.itextpdf.text.Chunk" />
		<method signature="com.itextpdf.text.Chunk createWhitespace(java.lang.String)" class="com.itextpdf.text.Chunk" />
		<method signature="com.itextpdf.text.Chunk createWhitespace(java.lang.String,boolean)" class="com.itextpdf.text.Chunk" />
		<method signature="boolean isWhitespace()" class="com.itextpdf.text.Chunk" />
		<method signature="com.itextpdf.text.Chunk createTabspace()" class="com.itextpdf.text.Chunk" />
		<method signature="com.itextpdf.text.Chunk createTabspace(float)" class="com.itextpdf.text.Chunk" />
		<method signature="boolean isTabspace()" class="com.itextpdf.text.Chunk" />
		<method signature="java.lang.String getTextExpansion()" class="com.itextpdf.text.Chunk" />
		<method signature="void setTextExpansion(java.lang.String)" class="com.itextpdf.text.Chunk" />
		<method signature="boolean setMarginMirroring(boolean)" class="com.itextpdf.text.DocListener" />
		<method signature="boolean setMarginMirroringTopBottom(boolean)" class="com.itextpdf.text.DocListener" />
		<method signature="void setPageCount(int)" class="com.itextpdf.text.DocListener" />
		<method signature="void resetPageCount()" class="com.itextpdf.text.DocListener" />
		<field name="NEWLINE" class="com.itextpdf.text.DocWriter" />
		<field name="TAB" class="com.itextpdf.text.DocWriter" />
		<field name="LT" class="com.itextpdf.text.DocWriter" />
		<field name="SPACE" class="com.itextpdf.text.DocWriter" />
		<field name="EQUALS" class="com.itextpdf.text.DocWriter" />
		<field name="QUOTE" class="com.itextpdf.text.DocWriter" />
		<field name="GT" class="com.itextpdf.text.DocWriter" />
		<field name="FORWARD" class="com.itextpdf.text.DocWriter" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.text.DocWriter" />
		<method signature="void resetPageCount()" class="com.itextpdf.text.DocWriter" />
		<method signature="void setPageCount(int)" class="com.itextpdf.text.DocWriter" />
		<method signature="void pause()" class="com.itextpdf.text.DocWriter" />
		<method signature="void resume()" class="com.itextpdf.text.DocWriter" />
		<method signature="void flush()" class="com.itextpdf.text.DocWriter" />
		<method signature="void write(java.lang.String)" class="com.itextpdf.text.DocWriter" />
		<method signature="void addTabs(int)" class="com.itextpdf.text.DocWriter" />
		<method signature="void write(java.lang.String,java.lang.String)" class="com.itextpdf.text.DocWriter" />
		<method signature="void writeStart(java.lang.String)" class="com.itextpdf.text.DocWriter" />
		<method signature="void writeEnd(java.lang.String)" class="com.itextpdf.text.DocWriter" />
		<method signature="void writeEnd()" class="com.itextpdf.text.DocWriter" />
		<method signature="boolean writeMarkupAttributes(java.util.Properties)" class="com.itextpdf.text.DocWriter" />
		<method signature="boolean isCloseStream()" class="com.itextpdf.text.DocWriter" />
		<method signature="void setCloseStream(boolean)" class="com.itextpdf.text.DocWriter" />
		<method signature="boolean setMarginMirroring(boolean)" class="com.itextpdf.text.DocWriter" />
		<method signature="boolean setMarginMirroringTopBottom(boolean)" class="com.itextpdf.text.DocWriter" />
		<method signature="void removeDocListener(com.itextpdf.text.DocListener)" class="com.itextpdf.text.Document" />
		<method signature="void resetPageCount()" class="com.itextpdf.text.Document" />
		<method signature="void setPageCount(int)" class="com.itextpdf.text.Document" />
		<method signature="boolean addHeader(java.lang.String,java.lang.String)" class="com.itextpdf.text.Document" />
		<method signature="boolean addKeywords(java.lang.String)" class="com.itextpdf.text.Document" />
		<method signature="boolean addLanguage(java.lang.String)" class="com.itextpdf.text.Document" />
		<method signature="float leftMargin()" class="com.itextpdf.text.Document" />
		<method signature="float rightMargin()" class="com.itextpdf.text.Document" />
		<method signature="float topMargin()" class="com.itextpdf.text.Document" />
		<method signature="float bottomMargin()" class="com.itextpdf.text.Document" />
		<method signature="float right()" class="com.itextpdf.text.Document" />
		<method signature="float bottom()" class="com.itextpdf.text.Document" />
		<method signature="com.itextpdf.text.Rectangle getPageSize()" class="com.itextpdf.text.Document" />
		<method signature="boolean isOpen()" class="com.itextpdf.text.Document" />
		<method signature="void setJavaScript_onLoad(java.lang.String)" class="com.itextpdf.text.Document" />
		<method signature="java.lang.String getJavaScript_onLoad()" class="com.itextpdf.text.Document" />
		<method signature="void setJavaScript_onUnLoad(java.lang.String)" class="com.itextpdf.text.Document" />
		<method signature="java.lang.String getJavaScript_onUnLoad()" class="com.itextpdf.text.Document" />
		<method signature="void setHtmlStyleClass(java.lang.String)" class="com.itextpdf.text.Document" />
		<method signature="java.lang.String getHtmlStyleClass()" class="com.itextpdf.text.Document" />
		<method signature="boolean setMarginMirroring(boolean)" class="com.itextpdf.text.Document" />
		<method signature="boolean setMarginMirroringTopBottom(boolean)" class="com.itextpdf.text.Document" />
		<method signature="boolean isMarginMirroring()" class="com.itextpdf.text.Document" />
		<field name="serialVersionUID" class="com.itextpdf.text.DocumentException" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.text.DocumentException" />
		<field name="HEADER" class="com.itextpdf.text.Element" />
		<field name="TITLE" class="com.itextpdf.text.Element" />
		<field name="SUBJECT" class="com.itextpdf.text.Element" />
		<field name="KEYWORDS" class="com.itextpdf.text.Element" />
		<field name="AUTHOR" class="com.itextpdf.text.Element" />
		<field name="PRODUCER" class="com.itextpdf.text.Element" />
		<field name="CREATIONDATE" class="com.itextpdf.text.Element" />
		<field name="CREATOR" class="com.itextpdf.text.Element" />
		<field name="LANGUAGE" class="com.itextpdf.text.Element" />
		<field name="CHUNK" class="com.itextpdf.text.Element" />
		<field name="PHRASE" class="com.itextpdf.text.Element" />
		<field name="PARAGRAPH" class="com.itextpdf.text.Element" />
		<field name="SECTION" class="com.itextpdf.text.Element" />
		<field name="LIST" class="com.itextpdf.text.Element" />
		<field name="LISTITEM" class="com.itextpdf.text.Element" />
		<field name="CHAPTER" class="com.itextpdf.text.Element" />
		<field name="ANCHOR" class="com.itextpdf.text.Element" />
		<field name="PTABLE" class="com.itextpdf.text.Element" />
		<field name="ANNOTATION" class="com.itextpdf.text.Element" />
		<field name="RECTANGLE" class="com.itextpdf.text.Element" />
		<field name="JPEG" class="com.itextpdf.text.Element" />
		<field name="JPEG2000" class="com.itextpdf.text.Element" />
		<field name="IMGRAW" class="com.itextpdf.text.Element" />
		<field name="IMGTEMPLATE" class="com.itextpdf.text.Element" />
		<field name="JBIG2" class="com.itextpdf.text.Element" />
		<field name="DIV" class="com.itextpdf.text.Element" />
		<field name="BODY" class="com.itextpdf.text.Element" />
		<field name="MARKED" class="com.itextpdf.text.Element" />
		<field name="YMARK" class="com.itextpdf.text.Element" />
		<field name="WRITABLE_DIRECT" class="com.itextpdf.text.Element" />
		<field name="ALIGN_UNDEFINED" class="com.itextpdf.text.Element" />
		<field name="ALIGN_LEFT" class="com.itextpdf.text.Element" />
		<field name="ALIGN_CENTER" class="com.itextpdf.text.Element" />
		<field name="ALIGN_RIGHT" class="com.itextpdf.text.Element" />
		<field name="ALIGN_JUSTIFIED" class="com.itextpdf.text.Element" />
		<field name="ALIGN_TOP" class="com.itextpdf.text.Element" />
		<field name="ALIGN_MIDDLE" class="com.itextpdf.text.Element" />
		<field name="ALIGN_BOTTOM" class="com.itextpdf.text.Element" />
		<field name="ALIGN_BASELINE" class="com.itextpdf.text.Element" />
		<field name="ALIGN_JUSTIFIED_ALL" class="com.itextpdf.text.Element" />
		<field name="CCITTG4" class="com.itextpdf.text.Element" />
		<field name="CCITTG3_1D" class="com.itextpdf.text.Element" />
		<field name="CCITTG3_2D" class="com.itextpdf.text.Element" />
		<field name="CCITT_BLACKIS1" class="com.itextpdf.text.Element" />
		<field name="CCITT_ENCODEDBYTEALIGN" class="com.itextpdf.text.Element" />
		<field name="CCITT_ENDOFLINE" class="com.itextpdf.text.Element" />
		<field name="CCITT_ENDOFBLOCK" class="com.itextpdf.text.Element" />
		<method signature="boolean isNestable()" class="com.itextpdf.text.Element" />
		<field name="serialVersionUID" class="com.itextpdf.text.ExceptionConverter" />
		<method signature="java.lang.Exception getException()" class="com.itextpdf.text.ExceptionConverter" />
		<class name="com.itextpdf.text.Font$FontStyle" />
		<field name="NORMAL" class="com.itextpdf.text.Font" />
		<field name="BOLD" class="com.itextpdf.text.Font" />
		<field name="ITALIC" class="com.itextpdf.text.Font" />
		<field name="UNDERLINE" class="com.itextpdf.text.Font" />
		<field name="STRIKETHRU" class="com.itextpdf.text.Font" />
		<field name="BOLDITALIC" class="com.itextpdf.text.Font" />
		<field name="UNDEFINED" class="com.itextpdf.text.Font" />
		<field name="DEFAULTSIZE" class="com.itextpdf.text.Font" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.pdf.BaseFont,float,int)" class="com.itextpdf.text.Font" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.pdf.BaseFont,float)" class="com.itextpdf.text.Font" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.pdf.BaseFont)" class="com.itextpdf.text.Font" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.Font$FontFamily,float)" class="com.itextpdf.text.Font" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.Font$FontFamily)" class="com.itextpdf.text.Font" />
		<method signature="void setFamily(java.lang.String)" class="com.itextpdf.text.Font" />
		<method signature="com.itextpdf.text.Font$FontFamily getFamily(java.lang.String)" class="com.itextpdf.text.Font" />
		<method signature="void setSize(float)" class="com.itextpdf.text.Font" />
		<method signature="int getCalculatedStyle()" class="com.itextpdf.text.Font" />
		<method signature="boolean isBold()" class="com.itextpdf.text.Font" />
		<method signature="boolean isItalic()" class="com.itextpdf.text.Font" />
		<method signature="void setStyle(java.lang.String)" class="com.itextpdf.text.Font" />
		<method signature="int getStyleValue(java.lang.String)" class="com.itextpdf.text.Font" />
		<method signature="void setColor(int,int,int)" class="com.itextpdf.text.Font" />
		<field name="COURIER" class="com.itextpdf.text.FontFactory" />
		<field name="COURIER_BOLD" class="com.itextpdf.text.FontFactory" />
		<field name="COURIER_OBLIQUE" class="com.itextpdf.text.FontFactory" />
		<field name="COURIER_BOLDOBLIQUE" class="com.itextpdf.text.FontFactory" />
		<field name="HELVETICA" class="com.itextpdf.text.FontFactory" />
		<field name="HELVETICA_BOLD" class="com.itextpdf.text.FontFactory" />
		<field name="HELVETICA_OBLIQUE" class="com.itextpdf.text.FontFactory" />
		<field name="HELVETICA_BOLDOBLIQUE" class="com.itextpdf.text.FontFactory" />
		<field name="SYMBOL" class="com.itextpdf.text.FontFactory" />
		<field name="TIMES" class="com.itextpdf.text.FontFactory" />
		<field name="TIMES_ROMAN" class="com.itextpdf.text.FontFactory" />
		<field name="TIMES_BOLD" class="com.itextpdf.text.FontFactory" />
		<field name="TIMES_ITALIC" class="com.itextpdf.text.FontFactory" />
		<field name="TIMES_BOLDITALIC" class="com.itextpdf.text.FontFactory" />
		<field name="ZAPFDINGBATS" class="com.itextpdf.text.FontFactory" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.text.FontFactory" />
		<method signature="com.itextpdf.text.Font getFont(java.lang.String,java.lang.String,boolean,float,int,com.itextpdf.text.BaseColor,boolean)" class="com.itextpdf.text.FontFactory" />
		<method signature="com.itextpdf.text.Font getFont(java.lang.String,java.lang.String,boolean,float,int)" class="com.itextpdf.text.FontFactory" />
		<method signature="com.itextpdf.text.Font getFont(java.lang.String,java.lang.String,boolean,float)" class="com.itextpdf.text.FontFactory" />
		<method signature="com.itextpdf.text.Font getFont(java.lang.String,java.lang.String,boolean)" class="com.itextpdf.text.FontFactory" />
		<method signature="com.itextpdf.text.Font getFont(java.lang.String,java.lang.String,float,int,com.itextpdf.text.BaseColor)" class="com.itextpdf.text.FontFactory" />
		<method signature="com.itextpdf.text.Font getFont(java.lang.String,java.lang.String,float,int)" class="com.itextpdf.text.FontFactory" />
		<method signature="com.itextpdf.text.Font getFont(java.lang.String,java.lang.String,float)" class="com.itextpdf.text.FontFactory" />
		<method signature="com.itextpdf.text.Font getFont(java.lang.String,java.lang.String)" class="com.itextpdf.text.FontFactory" />
		<method signature="com.itextpdf.text.Font getFont(java.lang.String,float,com.itextpdf.text.BaseColor)" class="com.itextpdf.text.FontFactory" />
		<method signature="com.itextpdf.text.Font getFont(java.lang.String,float,int)" class="com.itextpdf.text.FontFactory" />
		<method signature="com.itextpdf.text.Font getFont(java.lang.String,float)" class="com.itextpdf.text.FontFactory" />
		<method signature="com.itextpdf.text.Font getFont(java.lang.String)" class="com.itextpdf.text.FontFactory" />
		<method signature="void registerFamily(java.lang.String,java.lang.String,java.lang.String)" class="com.itextpdf.text.FontFactory" />
		<method signature="void register(java.lang.String)" class="com.itextpdf.text.FontFactory" />
		<method signature="void register(java.lang.String,java.lang.String)" class="com.itextpdf.text.FontFactory" />
		<method signature="int registerDirectory(java.lang.String)" class="com.itextpdf.text.FontFactory" />
		<method signature="int registerDirectory(java.lang.String,boolean)" class="com.itextpdf.text.FontFactory" />
		<method signature="int registerDirectories()" class="com.itextpdf.text.FontFactory" />
		<method signature="java.util.Set getRegisteredFonts()" class="com.itextpdf.text.FontFactory" />
		<method signature="java.util.Set getRegisteredFamilies()" class="com.itextpdf.text.FontFactory" />
		<method signature="boolean contains(java.lang.String)" class="com.itextpdf.text.FontFactory" />
		<method signature="boolean isRegistered(java.lang.String)" class="com.itextpdf.text.FontFactory" />
		<method signature="com.itextpdf.text.FontFactoryImp getFontImp()" class="com.itextpdf.text.FontFactory" />
		<method signature="void setFontImp(com.itextpdf.text.FontFactoryImp)" class="com.itextpdf.text.FontFactory" />
		<method signature="com.itextpdf.text.Font getFont(java.lang.String,java.lang.String,boolean,float,int)" class="com.itextpdf.text.FontFactoryImp" />
		<method signature="com.itextpdf.text.Font getFont(java.lang.String,java.lang.String,boolean,float)" class="com.itextpdf.text.FontFactoryImp" />
		<method signature="com.itextpdf.text.Font getFont(java.lang.String,java.lang.String,boolean)" class="com.itextpdf.text.FontFactoryImp" />
		<method signature="com.itextpdf.text.Font getFont(java.lang.String,java.lang.String,float,int,com.itextpdf.text.BaseColor)" class="com.itextpdf.text.FontFactoryImp" />
		<method signature="com.itextpdf.text.Font getFont(java.lang.String,java.lang.String,float,int)" class="com.itextpdf.text.FontFactoryImp" />
		<method signature="com.itextpdf.text.Font getFont(java.lang.String,java.lang.String,float)" class="com.itextpdf.text.FontFactoryImp" />
		<method signature="com.itextpdf.text.Font getFont(java.lang.String,float,com.itextpdf.text.BaseColor)" class="com.itextpdf.text.FontFactoryImp" />
		<method signature="com.itextpdf.text.Font getFont(java.lang.String,java.lang.String)" class="com.itextpdf.text.FontFactoryImp" />
		<method signature="com.itextpdf.text.Font getFont(java.lang.String,float,int,com.itextpdf.text.BaseColor)" class="com.itextpdf.text.FontFactoryImp" />
		<method signature="com.itextpdf.text.Font getFont(java.lang.String,float,int)" class="com.itextpdf.text.FontFactoryImp" />
		<method signature="com.itextpdf.text.Font getFont(java.lang.String,float)" class="com.itextpdf.text.FontFactoryImp" />
		<method signature="com.itextpdf.text.Font getFont(java.lang.String)" class="com.itextpdf.text.FontFactoryImp" />
		<method signature="java.util.Set getRegisteredFonts()" class="com.itextpdf.text.FontFactoryImp" />
		<method signature="java.util.Set getRegisteredFamilies()" class="com.itextpdf.text.FontFactoryImp" />
		<method signature="boolean isRegistered(java.lang.String)" class="com.itextpdf.text.FontFactoryImp" />
		<method signature="boolean isRegistered(java.lang.String)" class="com.itextpdf.text.FontProvider" />
		<method signature="com.itextpdf.text.Font getFont(java.lang.String,java.lang.String,boolean,float,int,com.itextpdf.text.BaseColor)" class="com.itextpdf.text.FontProvider" />
		<class name="com.itextpdf.text.GreekList" />
		<class name="com.itextpdf.text.Header" />
		<field name="DEFAULT" class="com.itextpdf.text.Image" />
		<field name="RIGHT" class="com.itextpdf.text.Image" />
		<field name="LEFT" class="com.itextpdf.text.Image" />
		<field name="MIDDLE" class="com.itextpdf.text.Image" />
		<field name="TEXTWRAP" class="com.itextpdf.text.Image" />
		<field name="UNDERLYING" class="com.itextpdf.text.Image" />
		<field name="AX" class="com.itextpdf.text.Image" />
		<field name="AY" class="com.itextpdf.text.Image" />
		<field name="BX" class="com.itextpdf.text.Image" />
		<field name="BY" class="com.itextpdf.text.Image" />
		<field name="CX" class="com.itextpdf.text.Image" />
		<field name="CY" class="com.itextpdf.text.Image" />
		<field name="DX" class="com.itextpdf.text.Image" />
		<field name="DY" class="com.itextpdf.text.Image" />
		<field name="ORIGINAL_NONE" class="com.itextpdf.text.Image" />
		<field name="ORIGINAL_JPEG" class="com.itextpdf.text.Image" />
		<field name="ORIGINAL_PNG" class="com.itextpdf.text.Image" />
		<field name="ORIGINAL_GIF" class="com.itextpdf.text.Image" />
		<field name="ORIGINAL_BMP" class="com.itextpdf.text.Image" />
		<field name="ORIGINAL_TIFF" class="com.itextpdf.text.Image" />
		<field name="ORIGINAL_WMF" class="com.itextpdf.text.Image" />
		<field name="ORIGINAL_PS" class="com.itextpdf.text.Image" />
		<field name="ORIGINAL_JPEG2000" class="com.itextpdf.text.Image" />
		<field name="ORIGINAL_JBIG2" class="com.itextpdf.text.Image" />
		<field name="type" class="com.itextpdf.text.Image" />
		<field name="url" class="com.itextpdf.text.Image" />
		<field name="rawData" class="com.itextpdf.text.Image" />
		<field name="bpc" class="com.itextpdf.text.Image" />
		<field name="template" class="com.itextpdf.text.Image" />
		<field name="alignment" class="com.itextpdf.text.Image" />
		<field name="alt" class="com.itextpdf.text.Image" />
		<field name="absoluteX" class="com.itextpdf.text.Image" />
		<field name="absoluteY" class="com.itextpdf.text.Image" />
		<field name="plainWidth" class="com.itextpdf.text.Image" />
		<field name="plainHeight" class="com.itextpdf.text.Image" />
		<field name="scaledWidth" class="com.itextpdf.text.Image" />
		<field name="scaledHeight" class="com.itextpdf.text.Image" />
		<field name="compressionLevel" class="com.itextpdf.text.Image" />
		<field name="mySerialId" class="com.itextpdf.text.Image" />
		<field name="role" class="com.itextpdf.text.Image" />
		<field name="accessibleAttributes" class="com.itextpdf.text.Image" />
		<field name="id" class="com.itextpdf.text.Image" />
		<field name="directReference" class="com.itextpdf.text.Image" />
		<field name="rotationRadians" class="com.itextpdf.text.Image" />
		<field name="initialRotation" class="com.itextpdf.text.Image" />
		<field name="indentationLeft" class="com.itextpdf.text.Image" />
		<field name="indentationRight" class="com.itextpdf.text.Image" />
		<field name="spacingBefore" class="com.itextpdf.text.Image" />
		<field name="spacingAfter" class="com.itextpdf.text.Image" />
		<field name="paddingTop" class="com.itextpdf.text.Image" />
		<field name="widthPercentage" class="com.itextpdf.text.Image" />
		<field name="scaleToFitLineWhenOverflow" class="com.itextpdf.text.Image" />
		<field name="scaleToFitHeight" class="com.itextpdf.text.Image" />
		<field name="annotation" class="com.itextpdf.text.Image" />
		<field name="layer" class="com.itextpdf.text.Image" />
		<field name="interpolation" class="com.itextpdf.text.Image" />
		<field name="originalType" class="com.itextpdf.text.Image" />
		<field name="originalData" class="com.itextpdf.text.Image" />
		<field name="deflated" class="com.itextpdf.text.Image" />
		<field name="dpiX" class="com.itextpdf.text.Image" />
		<field name="dpiY" class="com.itextpdf.text.Image" />
		<field name="XYRatio" class="com.itextpdf.text.Image" />
		<field name="colorspace" class="com.itextpdf.text.Image" />
		<field name="colortransform" class="com.itextpdf.text.Image" />
		<field name="invert" class="com.itextpdf.text.Image" />
		<field name="profile" class="com.itextpdf.text.Image" />
		<field name="additional" class="com.itextpdf.text.Image" />
		<field name="mask" class="com.itextpdf.text.Image" />
		<field name="imageMask" class="com.itextpdf.text.Image" />
		<field name="smask" class="com.itextpdf.text.Image" />
		<field name="transparency" class="com.itextpdf.text.Image" />
		<method signature="void &lt;init&gt;(java.net.URL)" class="com.itextpdf.text.Image" />
		<method signature="com.itextpdf.text.Image getInstance(java.net.URL)" class="com.itextpdf.text.Image" />
		<method signature="com.itextpdf.text.Image getInstance(java.net.URL,boolean)" class="com.itextpdf.text.Image" />
		<method signature="com.itextpdf.text.Image getInstance(java.lang.String)" class="com.itextpdf.text.Image" />
		<method signature="com.itextpdf.text.Image getInstance(java.lang.String,boolean)" class="com.itextpdf.text.Image" />
		<method signature="com.itextpdf.text.Image getInstance(byte[])" class="com.itextpdf.text.Image" />
		<method signature="com.itextpdf.text.Image getInstance(byte[],boolean)" class="com.itextpdf.text.Image" />
		<method signature="com.itextpdf.text.Image getInstance(int,int,int,int,byte[])" class="com.itextpdf.text.Image" />
		<method signature="com.itextpdf.text.Image getInstance(int,int,byte[],byte[])" class="com.itextpdf.text.Image" />
		<method signature="com.itextpdf.text.Image getInstance(int,int,boolean,int,int,byte[])" class="com.itextpdf.text.Image" />
		<method signature="com.itextpdf.text.Image getInstance(int,int,boolean,int,int,byte[],int[])" class="com.itextpdf.text.Image" />
		<method signature="com.itextpdf.text.Image getInstance(int,int,int,int,byte[],int[])" class="com.itextpdf.text.Image" />
		<method signature="com.itextpdf.text.Image getInstance(com.itextpdf.text.pdf.PdfTemplate)" class="com.itextpdf.text.Image" />
		<method signature="void setDirectReference(com.itextpdf.text.pdf.PdfIndirectReference)" class="com.itextpdf.text.Image" />
		<method signature="com.itextpdf.text.Image getInstance(com.itextpdf.text.pdf.PRIndirectReference)" class="com.itextpdf.text.Image" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.Image)" class="com.itextpdf.text.Image" />
		<method signature="boolean isNestable()" class="com.itextpdf.text.Image" />
		<method signature="boolean isJpeg()" class="com.itextpdf.text.Image" />
		<method signature="void setUrl(java.net.URL)" class="com.itextpdf.text.Image" />
		<method signature="void setTemplateData(com.itextpdf.text.pdf.PdfTemplate)" class="com.itextpdf.text.Image" />
		<method signature="void setAlignment(int)" class="com.itextpdf.text.Image" />
		<method signature="java.lang.String getAlt()" class="com.itextpdf.text.Image" />
		<method signature="void setAlt(java.lang.String)" class="com.itextpdf.text.Image" />
		<method signature="float getPlainWidth()" class="com.itextpdf.text.Image" />
		<method signature="float getPlainHeight()" class="com.itextpdf.text.Image" />
		<method signature="void scaleAbsolute(com.itextpdf.text.Rectangle)" class="com.itextpdf.text.Image" />
		<method signature="void scaleAbsolute(float,float)" class="com.itextpdf.text.Image" />
		<method signature="void scaleAbsoluteWidth(float)" class="com.itextpdf.text.Image" />
		<method signature="void scaleAbsoluteHeight(float)" class="com.itextpdf.text.Image" />
		<method signature="void scalePercent(float,float)" class="com.itextpdf.text.Image" />
		<method signature="void scaleToFit(com.itextpdf.text.Rectangle)" class="com.itextpdf.text.Image" />
		<method signature="void scaleToFit(float,float)" class="com.itextpdf.text.Image" />
		<method signature="java.lang.Long getSerialId()" class="com.itextpdf.text.Image" />
		<method signature="void setRotationDegrees(float)" class="com.itextpdf.text.Image" />
		<method signature="float getInitialRotation()" class="com.itextpdf.text.Image" />
		<method signature="void setInitialRotation(float)" class="com.itextpdf.text.Image" />
		<method signature="void setIndentationLeft(float)" class="com.itextpdf.text.Image" />
		<method signature="void setIndentationRight(float)" class="com.itextpdf.text.Image" />
		<method signature="void setSpacingBefore(float)" class="com.itextpdf.text.Image" />
		<method signature="void setSpacingAfter(float)" class="com.itextpdf.text.Image" />
		<method signature="void setPaddingTop(float)" class="com.itextpdf.text.Image" />
		<method signature="void setWidthPercentage(float)" class="com.itextpdf.text.Image" />
		<method signature="void setScaleToFitHeight(boolean)" class="com.itextpdf.text.Image" />
		<method signature="void setAnnotation(com.itextpdf.text.Annotation)" class="com.itextpdf.text.Image" />
		<method signature="void setLayer(com.itextpdf.text.pdf.PdfOCG)" class="com.itextpdf.text.Image" />
		<method signature="void setInterpolation(boolean)" class="com.itextpdf.text.Image" />
		<method signature="int getOriginalType()" class="com.itextpdf.text.Image" />
		<method signature="void setOriginalType(int)" class="com.itextpdf.text.Image" />
		<method signature="byte[] getOriginalData()" class="com.itextpdf.text.Image" />
		<method signature="void setOriginalData(byte[])" class="com.itextpdf.text.Image" />
		<method signature="void setDeflated(boolean)" class="com.itextpdf.text.Image" />
		<method signature="int getDpiX()" class="com.itextpdf.text.Image" />
		<method signature="int getDpiY()" class="com.itextpdf.text.Image" />
		<method signature="void setDpi(int,int)" class="com.itextpdf.text.Image" />
		<method signature="float getXYRatio()" class="com.itextpdf.text.Image" />
		<method signature="void setXYRatio(float)" class="com.itextpdf.text.Image" />
		<method signature="void setColorTransform(int)" class="com.itextpdf.text.Image" />
		<method signature="void setInverted(boolean)" class="com.itextpdf.text.Image" />
		<method signature="void tagICC(com.itextpdf.text.pdf.ICC_Profile)" class="com.itextpdf.text.Image" />
		<method signature="void setAdditional(com.itextpdf.text.pdf.PdfDictionary)" class="com.itextpdf.text.Image" />
		<method signature="void simplifyColorspace()" class="com.itextpdf.text.Image" />
		<method signature="com.itextpdf.text.pdf.PdfObject simplifyColorspace(com.itextpdf.text.pdf.PdfArray)" class="com.itextpdf.text.Image" />
		<method signature="void makeMask()" class="com.itextpdf.text.Image" />
		<method signature="boolean isMaskCandidate()" class="com.itextpdf.text.Image" />
		<method signature="void setImageMask(com.itextpdf.text.Image)" class="com.itextpdf.text.Image" />
		<method signature="void setSmask(boolean)" class="com.itextpdf.text.Image" />
		<method signature="void setTransparency(int[])" class="com.itextpdf.text.Image" />
		<method signature="void setCompressionLevel(int)" class="com.itextpdf.text.Image" />
		<method signature="com.itextpdf.text.Image getInstance(java.awt.Image,java.awt.Color,boolean)" class="com.itextpdf.text.Image" />
		<method signature="com.itextpdf.text.Image getInstance(java.awt.Image,java.awt.Color)" class="com.itextpdf.text.Image" />
		<method signature="com.itextpdf.text.Image getInstance(com.itextpdf.text.pdf.PdfWriter,java.awt.Image,float)" class="com.itextpdf.text.Image" />
		<method signature="com.itextpdf.text.Image getInstance(com.itextpdf.text.pdf.PdfContentByte,java.awt.Image,float)" class="com.itextpdf.text.Image" />
		<class name="com.itextpdf.text.ImgCCITT" />
		<field name="global" class="com.itextpdf.text.ImgJBIG2" />
		<field name="globalHash" class="com.itextpdf.text.ImgJBIG2" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.Image)" class="com.itextpdf.text.ImgJBIG2" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.text.ImgJBIG2" />
		<method signature="void &lt;init&gt;(int,int,byte[],byte[])" class="com.itextpdf.text.ImgJBIG2" />
		<method signature="byte[] getGlobalHash()" class="com.itextpdf.text.ImgJBIG2" />
		<class name="com.itextpdf.text.ImgRaw" />
		<class name="com.itextpdf.text.ImgTemplate" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.Image)" class="com.itextpdf.text.ImgWMF" />
		<method signature="void &lt;init&gt;(java.net.URL)" class="com.itextpdf.text.ImgWMF" />
		<method signature="void &lt;init&gt;(java.lang.String)" class="com.itextpdf.text.ImgWMF" />
		<method signature="void &lt;init&gt;(byte[])" class="com.itextpdf.text.ImgWMF" />
		<method signature="void processParameters()" class="com.itextpdf.text.ImgWMF" />
		<class name="com.itextpdf.text.Jpeg" />
		<class name="com.itextpdf.text.Jpeg2000$ColorSpecBox" />
		<class name="com.itextpdf.text.Jpeg2000$ZeroBoxSizeException" />
		<class name="com.itextpdf.text.Jpeg2000" />
		<method signature="void setComplete(boolean)" class="com.itextpdf.text.LargeElement" />
		<field name="ORDERED" class="com.itextpdf.text.List" />
		<field name="UNORDERED" class="com.itextpdf.text.List" />
		<field name="NUMERICAL" class="com.itextpdf.text.List" />
		<field name="ALPHABETICAL" class="com.itextpdf.text.List" />
		<field name="UPPERCASE" class="com.itextpdf.text.List" />
		<field name="LOWERCASE" class="com.itextpdf.text.List" />
		<field name="list" class="com.itextpdf.text.List" />
		<field name="numbered" class="com.itextpdf.text.List" />
		<field name="lettered" class="com.itextpdf.text.List" />
		<field name="lowercase" class="com.itextpdf.text.List" />
		<field name="autoindent" class="com.itextpdf.text.List" />
		<field name="alignindent" class="com.itextpdf.text.List" />
		<field name="first" class="com.itextpdf.text.List" />
		<field name="symbol" class="com.itextpdf.text.List" />
		<field name="preSymbol" class="com.itextpdf.text.List" />
		<field name="postSymbol" class="com.itextpdf.text.List" />
		<field name="indentationLeft" class="com.itextpdf.text.List" />
		<field name="indentationRight" class="com.itextpdf.text.List" />
		<field name="symbolIndent" class="com.itextpdf.text.List" />
		<field name="role" class="com.itextpdf.text.List" />
		<field name="accessibleAttributes" class="com.itextpdf.text.List" />
		<field name="id" class="com.itextpdf.text.List" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.text.List" />
		<method signature="void &lt;init&gt;(float)" class="com.itextpdf.text.List" />
		<method signature="void &lt;init&gt;(boolean)" class="com.itextpdf.text.List" />
		<method signature="void &lt;init&gt;(boolean,boolean)" class="com.itextpdf.text.List" />
		<method signature="void &lt;init&gt;(boolean,float)" class="com.itextpdf.text.List" />
		<method signature="void &lt;init&gt;(boolean,boolean,float)" class="com.itextpdf.text.List" />
		<method signature="boolean add(java.lang.String)" class="com.itextpdf.text.List" />
		<method signature="boolean add(com.itextpdf.text.Element)" class="com.itextpdf.text.List" />
		<method signature="com.itextpdf.text.List cloneShallow()" class="com.itextpdf.text.List" />
		<method signature="void populateProperties(com.itextpdf.text.List)" class="com.itextpdf.text.List" />
		<method signature="void setNumbered(boolean)" class="com.itextpdf.text.List" />
		<method signature="void setLettered(boolean)" class="com.itextpdf.text.List" />
		<method signature="void setLowercase(boolean)" class="com.itextpdf.text.List" />
		<method signature="void setAutoindent(boolean)" class="com.itextpdf.text.List" />
		<method signature="void setAlignindent(boolean)" class="com.itextpdf.text.List" />
		<method signature="void setFirst(int)" class="com.itextpdf.text.List" />
		<method signature="void setListSymbol(com.itextpdf.text.Chunk)" class="com.itextpdf.text.List" />
		<method signature="void setListSymbol(java.lang.String)" class="com.itextpdf.text.List" />
		<method signature="void setSymbolIndent(float)" class="com.itextpdf.text.List" />
		<method signature="int size()" class="com.itextpdf.text.List" />
		<method signature="boolean isEmpty()" class="com.itextpdf.text.List" />
		<method signature="float getTotalLeading()" class="com.itextpdf.text.List" />
		<method signature="int getFirst()" class="com.itextpdf.text.List" />
		<method signature="com.itextpdf.text.Chunk getSymbol()" class="com.itextpdf.text.List" />
		<method signature="float getSymbolIndent()" class="com.itextpdf.text.List" />
		<method signature="boolean isNestable()" class="com.itextpdf.text.List" />
		<method signature="java.lang.String getPostSymbol()" class="com.itextpdf.text.List" />
		<method signature="void setPostSymbol(java.lang.String)" class="com.itextpdf.text.List" />
		<method signature="java.lang.String getPreSymbol()" class="com.itextpdf.text.List" />
		<method signature="void setPreSymbol(java.lang.String)" class="com.itextpdf.text.List" />
		<field name="role" class="com.itextpdf.text.ListBody" />
		<field name="id" class="com.itextpdf.text.ListBody" />
		<field name="accessibleAttributes" class="com.itextpdf.text.ListBody" />
		<field name="parentItem" class="com.itextpdf.text.ListBody" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.ListItem)" class="com.itextpdf.text.ListBody" />
		<field name="serialVersionUID" class="com.itextpdf.text.ListItem" />
		<field name="symbol" class="com.itextpdf.text.ListItem" />
		<field name="listBody" class="com.itextpdf.text.ListItem" />
		<field name="listLabel" class="com.itextpdf.text.ListItem" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.text.ListItem" />
		<method signature="void &lt;init&gt;(float)" class="com.itextpdf.text.ListItem" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.Chunk)" class="com.itextpdf.text.ListItem" />
		<method signature="void &lt;init&gt;(java.lang.String)" class="com.itextpdf.text.ListItem" />
		<method signature="void &lt;init&gt;(java.lang.String,com.itextpdf.text.Font)" class="com.itextpdf.text.ListItem" />
		<method signature="void &lt;init&gt;(float,com.itextpdf.text.Chunk)" class="com.itextpdf.text.ListItem" />
		<method signature="void &lt;init&gt;(float,java.lang.String)" class="com.itextpdf.text.ListItem" />
		<method signature="void &lt;init&gt;(float,java.lang.String,com.itextpdf.text.Font)" class="com.itextpdf.text.ListItem" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.Phrase)" class="com.itextpdf.text.ListItem" />
		<method signature="int type()" class="com.itextpdf.text.ListItem" />
		<method signature="com.itextpdf.text.Paragraph cloneShallow(boolean)" class="com.itextpdf.text.ListItem" />
		<method signature="void setListSymbol(com.itextpdf.text.Chunk)" class="com.itextpdf.text.ListItem" />
		<method signature="void setIndentationLeft(float,boolean)" class="com.itextpdf.text.ListItem" />
		<method signature="void adjustListSymbolFont()" class="com.itextpdf.text.ListItem" />
		<field name="role" class="com.itextpdf.text.ListLabel" />
		<field name="indentation" class="com.itextpdf.text.ListLabel" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.ListItem)" class="com.itextpdf.text.ListLabel" />
		<method signature="com.itextpdf.text.pdf.PdfName getRole()" class="com.itextpdf.text.ListLabel" />
		<method signature="void setRole(com.itextpdf.text.pdf.PdfName)" class="com.itextpdf.text.ListLabel" />
		<method signature="boolean getTagLabelContent()" class="com.itextpdf.text.ListLabel" />
		<method signature="void setTagLabelContent(boolean)" class="com.itextpdf.text.ListLabel" />
		<method signature="boolean isInline()" class="com.itextpdf.text.ListLabel" />
		<field name="element" class="com.itextpdf.text.MarkedObject" />
		<field name="markupAttributes" class="com.itextpdf.text.MarkedObject" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.text.MarkedObject" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.Element)" class="com.itextpdf.text.MarkedObject" />
		<method signature="boolean isNestable()" class="com.itextpdf.text.MarkedObject" />
		<method signature="java.util.Properties getMarkupAttributes()" class="com.itextpdf.text.MarkedObject" />
		<method signature="void setMarkupAttribute(java.lang.String,java.lang.String)" class="com.itextpdf.text.MarkedObject" />
		<field name="title" class="com.itextpdf.text.MarkedSection" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.Section)" class="com.itextpdf.text.MarkedSection" />
		<method signature="void add(int,com.itextpdf.text.Element)" class="com.itextpdf.text.MarkedSection" />
		<method signature="boolean add(com.itextpdf.text.Element)" class="com.itextpdf.text.MarkedSection" />
		<method signature="boolean process(com.itextpdf.text.ElementListener)" class="com.itextpdf.text.MarkedSection" />
		<method signature="boolean addAll(java.util.Collection)" class="com.itextpdf.text.MarkedSection" />
		<method signature="com.itextpdf.text.MarkedSection addSection(float,int)" class="com.itextpdf.text.MarkedSection" />
		<method signature="com.itextpdf.text.MarkedSection addSection(float)" class="com.itextpdf.text.MarkedSection" />
		<method signature="com.itextpdf.text.MarkedSection addSection(int)" class="com.itextpdf.text.MarkedSection" />
		<method signature="com.itextpdf.text.MarkedSection addSection()" class="com.itextpdf.text.MarkedSection" />
		<method signature="void setTitle(com.itextpdf.text.MarkedObject)" class="com.itextpdf.text.MarkedSection" />
		<method signature="void setNumberDepth(int)" class="com.itextpdf.text.MarkedSection" />
		<method signature="void setIndentationLeft(float)" class="com.itextpdf.text.MarkedSection" />
		<method signature="void setIndentationRight(float)" class="com.itextpdf.text.MarkedSection" />
		<method signature="void setIndentation(float)" class="com.itextpdf.text.MarkedSection" />
		<method signature="void setBookmarkOpen(boolean)" class="com.itextpdf.text.MarkedSection" />
		<method signature="void setTriggerNewPage(boolean)" class="com.itextpdf.text.MarkedSection" />
		<method signature="void setBookmarkTitle(java.lang.String)" class="com.itextpdf.text.MarkedSection" />
		<method signature="void newPage()" class="com.itextpdf.text.MarkedSection" />
		<method signature="float getIndentationLeft()" class="com.itextpdf.text.MarkedSection" />
		<method signature="float getIndentationRight()" class="com.itextpdf.text.MarkedSection" />
		<field name="UNKNOWN" class="com.itextpdf.text.Meta" />
		<field name="PRODUCER" class="com.itextpdf.text.Meta" />
		<field name="CREATIONDATE" class="com.itextpdf.text.Meta" />
		<field name="AUTHOR" class="com.itextpdf.text.Meta" />
		<field name="KEYWORDS" class="com.itextpdf.text.Meta" />
		<field name="SUBJECT" class="com.itextpdf.text.Meta" />
		<field name="TITLE" class="com.itextpdf.text.Meta" />
		<method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="com.itextpdf.text.Meta" />
		<method signature="boolean isNestable()" class="com.itextpdf.text.Meta" />
		<method signature="java.lang.StringBuffer append(java.lang.String)" class="com.itextpdf.text.Meta" />
		<method signature="int getType(java.lang.String)" class="com.itextpdf.text.Meta" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.text.PageSize" />
		<method signature="com.itextpdf.text.Rectangle getRectangle(java.lang.String)" class="com.itextpdf.text.PageSize" />
		<field name="serialVersionUID" class="com.itextpdf.text.Paragraph" />
		<method signature="void &lt;init&gt;(float)" class="com.itextpdf.text.Paragraph" />
		<method signature="void &lt;init&gt;(float,com.itextpdf.text.Chunk)" class="com.itextpdf.text.Paragraph" />
		<method signature="void &lt;init&gt;(java.lang.String)" class="com.itextpdf.text.Paragraph" />
		<method signature="void &lt;init&gt;(java.lang.String,com.itextpdf.text.Font)" class="com.itextpdf.text.Paragraph" />
		<method signature="void &lt;init&gt;(float,java.lang.String)" class="com.itextpdf.text.Paragraph" />
		<method signature="void &lt;init&gt;(float,java.lang.String,com.itextpdf.text.Font)" class="com.itextpdf.text.Paragraph" />
		<method signature="float spacingBefore()" class="com.itextpdf.text.Paragraph" />
		<method signature="float spacingAfter()" class="com.itextpdf.text.Paragraph" />
		<method signature="void setPaddingTop(float)" class="com.itextpdf.text.Paragraph" />
		<field name="serialVersionUID" class="com.itextpdf.text.Phrase" />
		<method signature="void &lt;init&gt;(float,com.itextpdf.text.Chunk)" class="com.itextpdf.text.Phrase" />
		<method signature="void &lt;init&gt;(java.lang.String)" class="com.itextpdf.text.Phrase" />
		<method signature="void &lt;init&gt;(java.lang.String,com.itextpdf.text.Font)" class="com.itextpdf.text.Phrase" />
		<method signature="void &lt;init&gt;(float,java.lang.String)" class="com.itextpdf.text.Phrase" />
		<method signature="void &lt;init&gt;(float,java.lang.String,com.itextpdf.text.Font)" class="com.itextpdf.text.Phrase" />
		<method signature="boolean isNestable()" class="com.itextpdf.text.Phrase" />
		<method signature="boolean add(java.lang.String)" class="com.itextpdf.text.Phrase" />
		<method signature="void setLeading(float)" class="com.itextpdf.text.Phrase" />
		<method signature="void setMultipliedLeading(float)" class="com.itextpdf.text.Phrase" />
		<method signature="java.lang.String getContent()" class="com.itextpdf.text.Phrase" />
		<method signature="void &lt;init&gt;(boolean)" class="com.itextpdf.text.Phrase" />
		<method signature="com.itextpdf.text.Phrase getInstance(java.lang.String)" class="com.itextpdf.text.Phrase" />
		<method signature="com.itextpdf.text.Phrase getInstance(int,java.lang.String)" class="com.itextpdf.text.Phrase" />
		<method signature="com.itextpdf.text.Phrase getInstance(int,java.lang.String,com.itextpdf.text.Font)" class="com.itextpdf.text.Phrase" />
		<method signature="boolean trim()" class="com.itextpdf.text.Phrase" />
		<field name="UNDEFINED" class="com.itextpdf.text.Rectangle" />
		<field name="TOP" class="com.itextpdf.text.Rectangle" />
		<field name="BOTTOM" class="com.itextpdf.text.Rectangle" />
		<field name="LEFT" class="com.itextpdf.text.Rectangle" />
		<field name="RIGHT" class="com.itextpdf.text.Rectangle" />
		<field name="NO_BORDER" class="com.itextpdf.text.Rectangle" />
		<field name="BOX" class="com.itextpdf.text.Rectangle" />
		<method signature="void &lt;init&gt;(float,float,float,float,int)" class="com.itextpdf.text.Rectangle" />
		<method signature="void &lt;init&gt;(float,float,int)" class="com.itextpdf.text.Rectangle" />
		<method signature="void &lt;init&gt;(com.itextpdf.awt.geom.Rectangle)" class="com.itextpdf.text.Rectangle" />
		<method signature="boolean isNestable()" class="com.itextpdf.text.Rectangle" />
		<method signature="void normalize()" class="com.itextpdf.text.Rectangle" />
		<method signature="float getGrayFill()" class="com.itextpdf.text.Rectangle" />
		<method signature="void setGrayFill(float)" class="com.itextpdf.text.Rectangle" />
		<method signature="void setUseVariableBorders(boolean)" class="com.itextpdf.text.Rectangle" />
		<method signature="void enableBorderSide(int)" class="com.itextpdf.text.Rectangle" />
		<method signature="void disableBorderSide(int)" class="com.itextpdf.text.Rectangle" />
		<method signature="void updateBorderBasedOnWidth(float,int)" class="com.itextpdf.text.Rectangle" />
		<method signature="void setBorderWidthLeft(float)" class="com.itextpdf.text.Rectangle" />
		<method signature="void setBorderWidthRight(float)" class="com.itextpdf.text.Rectangle" />
		<method signature="void setBorderWidthTop(float)" class="com.itextpdf.text.Rectangle" />
		<method signature="void setBorderWidthBottom(float)" class="com.itextpdf.text.Rectangle" />
		<method signature="void setBorderColorLeft(com.itextpdf.text.BaseColor)" class="com.itextpdf.text.Rectangle" />
		<method signature="void setBorderColorRight(com.itextpdf.text.BaseColor)" class="com.itextpdf.text.Rectangle" />
		<method signature="void setBorderColorTop(com.itextpdf.text.BaseColor)" class="com.itextpdf.text.Rectangle" />
		<method signature="void setBorderColorBottom(com.itextpdf.text.BaseColor)" class="com.itextpdf.text.Rectangle" />
		<method signature="com.itextpdf.text.Rectangle rectangle(float,float)" class="com.itextpdf.text.Rectangle" />
		<method signature="void softCloneNonPositionParameters(com.itextpdf.text.Rectangle)" class="com.itextpdf.text.Rectangle" />
		<method signature="void &lt;init&gt;(float,float,float,float)" class="com.itextpdf.text.RectangleReadOnly" />
		<method signature="void &lt;init&gt;(float,float,float,float,int)" class="com.itextpdf.text.RectangleReadOnly" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.Rectangle)" class="com.itextpdf.text.RectangleReadOnly" />
		<method signature="void normalize()" class="com.itextpdf.text.RectangleReadOnly" />
		<method signature="void setGrayFill(float)" class="com.itextpdf.text.RectangleReadOnly" />
		<method signature="void setBorder(int)" class="com.itextpdf.text.RectangleReadOnly" />
		<method signature="void setUseVariableBorders(boolean)" class="com.itextpdf.text.RectangleReadOnly" />
		<method signature="void enableBorderSide(int)" class="com.itextpdf.text.RectangleReadOnly" />
		<method signature="void disableBorderSide(int)" class="com.itextpdf.text.RectangleReadOnly" />
		<method signature="void setBorderWidth(float)" class="com.itextpdf.text.RectangleReadOnly" />
		<method signature="void setBorderWidthLeft(float)" class="com.itextpdf.text.RectangleReadOnly" />
		<method signature="void setBorderWidthRight(float)" class="com.itextpdf.text.RectangleReadOnly" />
		<method signature="void setBorderWidthTop(float)" class="com.itextpdf.text.RectangleReadOnly" />
		<method signature="void setBorderWidthBottom(float)" class="com.itextpdf.text.RectangleReadOnly" />
		<method signature="void setBorderColor(com.itextpdf.text.BaseColor)" class="com.itextpdf.text.RectangleReadOnly" />
		<method signature="void setBorderColorLeft(com.itextpdf.text.BaseColor)" class="com.itextpdf.text.RectangleReadOnly" />
		<method signature="void setBorderColorRight(com.itextpdf.text.BaseColor)" class="com.itextpdf.text.RectangleReadOnly" />
		<method signature="void setBorderColorTop(com.itextpdf.text.BaseColor)" class="com.itextpdf.text.RectangleReadOnly" />
		<method signature="void setBorderColorBottom(com.itextpdf.text.BaseColor)" class="com.itextpdf.text.RectangleReadOnly" />
		<method signature="void softCloneNonPositionParameters(com.itextpdf.text.Rectangle)" class="com.itextpdf.text.RectangleReadOnly" />
		<class name="com.itextpdf.text.RomanList" />
		<field name="NUMBERSTYLE_DOTTED" class="com.itextpdf.text.Section" />
		<field name="NUMBERSTYLE_DOTTED_WITHOUT_FINAL_DOT" class="com.itextpdf.text.Section" />
		<field name="serialVersionUID" class="com.itextpdf.text.Section" />
		<field name="title" class="com.itextpdf.text.Section" />
		<field name="bookmarkTitle" class="com.itextpdf.text.Section" />
		<field name="numberDepth" class="com.itextpdf.text.Section" />
		<field name="numberStyle" class="com.itextpdf.text.Section" />
		<field name="indentationLeft" class="com.itextpdf.text.Section" />
		<field name="indentationRight" class="com.itextpdf.text.Section" />
		<field name="indentation" class="com.itextpdf.text.Section" />
		<field name="bookmarkOpen" class="com.itextpdf.text.Section" />
		<field name="triggerNewPage" class="com.itextpdf.text.Section" />
		<field name="subsections" class="com.itextpdf.text.Section" />
		<field name="numbers" class="com.itextpdf.text.Section" />
		<field name="complete" class="com.itextpdf.text.Section" />
		<field name="addedCompletely" class="com.itextpdf.text.Section" />
		<field name="notAddedYet" class="com.itextpdf.text.Section" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.text.Section" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.Paragraph,int)" class="com.itextpdf.text.Section" />
		<method signature="boolean isChapter()" class="com.itextpdf.text.Section" />
		<method signature="boolean isSection()" class="com.itextpdf.text.Section" />
		<method signature="boolean isNestable()" class="com.itextpdf.text.Section" />
		<method signature="void add(int,com.itextpdf.text.Element)" class="com.itextpdf.text.Section" />
		<method signature="boolean add(com.itextpdf.text.Element)" class="com.itextpdf.text.Section" />
		<method signature="boolean addAll(java.util.Collection)" class="com.itextpdf.text.Section" />
		<method signature="com.itextpdf.text.Section addSection(float,com.itextpdf.text.Paragraph,int)" class="com.itextpdf.text.Section" />
		<method signature="com.itextpdf.text.Section addSection(float,com.itextpdf.text.Paragraph)" class="com.itextpdf.text.Section" />
		<method signature="com.itextpdf.text.Section addSection(com.itextpdf.text.Paragraph,int)" class="com.itextpdf.text.Section" />
		<method signature="com.itextpdf.text.MarkedSection addMarkedSection()" class="com.itextpdf.text.Section" />
		<method signature="com.itextpdf.text.Section addSection(com.itextpdf.text.Paragraph)" class="com.itextpdf.text.Section" />
		<method signature="com.itextpdf.text.Section addSection(float,java.lang.String,int)" class="com.itextpdf.text.Section" />
		<method signature="com.itextpdf.text.Section addSection(java.lang.String,int)" class="com.itextpdf.text.Section" />
		<method signature="com.itextpdf.text.Section addSection(float,java.lang.String)" class="com.itextpdf.text.Section" />
		<method signature="com.itextpdf.text.Section addSection(java.lang.String)" class="com.itextpdf.text.Section" />
		<method signature="void setTitle(com.itextpdf.text.Paragraph)" class="com.itextpdf.text.Section" />
		<method signature="com.itextpdf.text.Paragraph constructTitle(com.itextpdf.text.Paragraph,java.util.ArrayList,int,int)" class="com.itextpdf.text.Section" />
		<method signature="void setNumberDepth(int)" class="com.itextpdf.text.Section" />
		<method signature="int getNumberDepth()" class="com.itextpdf.text.Section" />
		<method signature="void setNumberStyle(int)" class="com.itextpdf.text.Section" />
		<method signature="int getNumberStyle()" class="com.itextpdf.text.Section" />
		<method signature="void setIndentationLeft(float)" class="com.itextpdf.text.Section" />
		<method signature="void setIndentationRight(float)" class="com.itextpdf.text.Section" />
		<method signature="void setIndentation(float)" class="com.itextpdf.text.Section" />
		<method signature="void setBookmarkOpen(boolean)" class="com.itextpdf.text.Section" />
		<method signature="void setTriggerNewPage(boolean)" class="com.itextpdf.text.Section" />
		<method signature="void setBookmarkTitle(java.lang.String)" class="com.itextpdf.text.Section" />
		<method signature="void setChapterNumber(int)" class="com.itextpdf.text.Section" />
		<method signature="void setNumbers(int,java.util.ArrayList)" class="com.itextpdf.text.Section" />
		<method signature="void setNotAddedYet(boolean)" class="com.itextpdf.text.Section" />
		<method signature="boolean isAddedCompletely()" class="com.itextpdf.text.Section" />
		<method signature="void setAddedCompletely(boolean)" class="com.itextpdf.text.Section" />
		<method signature="void setComplete(boolean)" class="com.itextpdf.text.Section" />
		<method signature="void newPage()" class="com.itextpdf.text.Section" />
		<method signature="void add(int,java.lang.Object)" class="com.itextpdf.text.Section" />
		<method signature="boolean add(java.lang.Object)" class="com.itextpdf.text.Section" />
		<class name="com.itextpdf.text.SpecialSymbol" />
		<field name="DEFAULT_TAB_INTERVAL" class="com.itextpdf.text.TabSettings" />
		<field name="tabStops" class="com.itextpdf.text.TabSettings" />
		<field name="tabInterval" class="com.itextpdf.text.TabSettings" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.text.TabSettings" />
		<method signature="void &lt;init&gt;(java.util.List)" class="com.itextpdf.text.TabSettings" />
		<method signature="void &lt;init&gt;(float)" class="com.itextpdf.text.TabSettings" />
		<method signature="void &lt;init&gt;(java.util.List,float)" class="com.itextpdf.text.TabSettings" />
		<method signature="java.util.List getTabStops()" class="com.itextpdf.text.TabSettings" />
		<method signature="void setTabStops(java.util.List)" class="com.itextpdf.text.TabSettings" />
		<method signature="float getTabInterval()" class="com.itextpdf.text.TabSettings" />
		<method signature="void setTabInterval(float)" class="com.itextpdf.text.TabSettings" />
		<method signature="void &lt;init&gt;(float,com.itextpdf.text.pdf.draw.DrawInterface)" class="com.itextpdf.text.TabStop" />
		<method signature="void &lt;init&gt;(float,com.itextpdf.text.TabStop$Alignment,char)" class="com.itextpdf.text.TabStop" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.TabStop)" class="com.itextpdf.text.TabStop" />
		<method signature="void setAlignment(com.itextpdf.text.TabStop$Alignment)" class="com.itextpdf.text.TabStop" />
		<method signature="void setLeader(com.itextpdf.text.pdf.draw.DrawInterface)" class="com.itextpdf.text.TabStop" />
		<method signature="void setAnchorChar(char)" class="com.itextpdf.text.TabStop" />
		<method signature="boolean add(com.itextpdf.text.Element)" class="com.itextpdf.text.TextElementArray" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.text.Utilities" />
		<method signature="java.util.Set getKeySet(java.util.Hashtable)" class="com.itextpdf.text.Utilities" />
		<method signature="boolean checkTrueOrFalse(java.util.Properties,java.lang.String)" class="com.itextpdf.text.Utilities" />
		<method signature="java.lang.String unEscapeURL(java.lang.String)" class="com.itextpdf.text.Utilities" />
		<method signature="java.net.URL toURL(java.lang.String)" class="com.itextpdf.text.Utilities" />
		<method signature="void skip(java.io.InputStream,int)" class="com.itextpdf.text.Utilities" />
		<method signature="float millimetersToPoints(float)" class="com.itextpdf.text.Utilities" />
		<method signature="float millimetersToInches(float)" class="com.itextpdf.text.Utilities" />
		<method signature="float pointsToMillimeters(float)" class="com.itextpdf.text.Utilities" />
		<method signature="float pointsToInches(float)" class="com.itextpdf.text.Utilities" />
		<method signature="float inchesToMillimeters(float)" class="com.itextpdf.text.Utilities" />
		<method signature="float inchesToPoints(float)" class="com.itextpdf.text.Utilities" />
		<method signature="java.lang.String convertFromUtf32(int)" class="com.itextpdf.text.Utilities" />
		<method signature="java.lang.String readFileToString(java.lang.String)" class="com.itextpdf.text.Utilities" />
		<method signature="java.lang.String readFileToString(java.io.File)" class="com.itextpdf.text.Utilities" />
		<method signature="java.lang.String convertToHex(byte[])" class="com.itextpdf.text.Utilities" />
		<method signature="java.lang.String getProduct()" class="com.itextpdf.text.Version" />
		<field name="DIRECT_ELEMENT_TYPE_UNKNOWN" class="com.itextpdf.text.WritableDirectElement" />
		<field name="DIRECT_ELEMENT_TYPE_HEADER" class="com.itextpdf.text.WritableDirectElement" />
		<field name="directElementType" class="com.itextpdf.text.WritableDirectElement" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.text.WritableDirectElement" />
		<method signature="void &lt;init&gt;(int)" class="com.itextpdf.text.WritableDirectElement" />
		<method signature="boolean isNestable()" class="com.itextpdf.text.WritableDirectElement" />
		<class name="com.itextpdf.text.ZapfDingbatsList" />
		<class name="com.itextpdf.text.ZapfDingbatsNumberList" />
		<method signature="void setIndentationLeft(float)" class="com.itextpdf.text.api.Indentable" />
		<method signature="void setIndentationRight(float)" class="com.itextpdf.text.api.Indentable" />
		<method signature="float getIndentationLeft()" class="com.itextpdf.text.api.Indentable" />
		<method signature="float getIndentationRight()" class="com.itextpdf.text.api.Indentable" />
		<method signature="void setSpacingBefore(float)" class="com.itextpdf.text.api.Spaceable" />
		<method signature="void setSpacingAfter(float)" class="com.itextpdf.text.api.Spaceable" />
		<method signature="void setPaddingTop(float)" class="com.itextpdf.text.api.Spaceable" />
		<method signature="float getSpacingAfter()" class="com.itextpdf.text.api.Spaceable" />
		<field name="BASE_PATH" class="com.itextpdf.text.error_messages.MessageLocalization" />
		<method signature="boolean setLanguage(java.lang.String,java.lang.String)" class="com.itextpdf.text.error_messages.MessageLocalization" />
		<method signature="void setMessages(java.io.Reader)" class="com.itextpdf.text.error_messages.MessageLocalization" />
		<class name="com.itextpdf.text.exceptions.BadPasswordException" />
		<field name="serialVersionUID" class="com.itextpdf.text.exceptions.IllegalPdfSyntaxException" />
		<class name="com.itextpdf.text.exceptions.InvalidImageException" />
		<field name="serialVersionUID" class="com.itextpdf.text.exceptions.InvalidPdfException" />
		<class name="com.itextpdf.text.exceptions.UnsupportedPdfException" />
		<class name="com.itextpdf.text.factories.GreekAlphabetFactory" />
		<class name="com.itextpdf.text.factories.RomanAlphabetFactory" />
		<class name="com.itextpdf.text.factories.RomanNumberFactory$RomanDigit" />
		<class name="com.itextpdf.text.factories.RomanNumberFactory" />
		<class name="com.itextpdf.text.html.HtmlEncoder" />
		<class name="com.itextpdf.text.html.HtmlTags" />
		<class name="com.itextpdf.text.html.HtmlUtilities" />
		<field name="serialVersionUID" class="com.itextpdf.text.html.WebColors" />
		<method signature="boolean missingHashColorFormat(java.lang.String)" class="com.itextpdf.text.html.WebColors" />
		<method signature="com.itextpdf.text.BaseColor getRGBColor(java.lang.String)" class="com.itextpdf.text.html.WebColors" />
		<method signature="int getRGBChannelValue(java.lang.String)" class="com.itextpdf.text.html.WebColors" />
		<class name="com.itextpdf.text.html.simpleparser.CellWrapper" />
		<class name="com.itextpdf.text.html.simpleparser.ChainedProperties$TagAttributes" />
		<class name="com.itextpdf.text.html.simpleparser.ChainedProperties" />
		<class name="com.itextpdf.text.html.simpleparser.ElementFactory" />
		<class name="com.itextpdf.text.html.simpleparser.HTMLTagProcessor" />
		<class name="com.itextpdf.text.html.simpleparser.HTMLTagProcessors$1" />
		<class name="com.itextpdf.text.html.simpleparser.HTMLTagProcessors$10" />
		<class name="com.itextpdf.text.html.simpleparser.HTMLTagProcessors$11" />
		<class name="com.itextpdf.text.html.simpleparser.HTMLTagProcessors$12" />
		<class name="com.itextpdf.text.html.simpleparser.HTMLTagProcessors$13" />
		<class name="com.itextpdf.text.html.simpleparser.HTMLTagProcessors$14" />
		<class name="com.itextpdf.text.html.simpleparser.HTMLTagProcessors$2" />
		<class name="com.itextpdf.text.html.simpleparser.HTMLTagProcessors$3" />
		<class name="com.itextpdf.text.html.simpleparser.HTMLTagProcessors$4" />
		<class name="com.itextpdf.text.html.simpleparser.HTMLTagProcessors$5" />
		<class name="com.itextpdf.text.html.simpleparser.HTMLTagProcessors$6" />
		<class name="com.itextpdf.text.html.simpleparser.HTMLTagProcessors$7" />
		<class name="com.itextpdf.text.html.simpleparser.HTMLTagProcessors$8" />
		<class name="com.itextpdf.text.html.simpleparser.HTMLTagProcessors$9" />
		<class name="com.itextpdf.text.html.simpleparser.HTMLTagProcessors" />
		<class name="com.itextpdf.text.html.simpleparser.HTMLWorker" />
		<class name="com.itextpdf.text.html.simpleparser.ImageProcessor" />
		<class name="com.itextpdf.text.html.simpleparser.ImageProvider" />
		<class name="com.itextpdf.text.html.simpleparser.ImageStore" />
		<class name="com.itextpdf.text.html.simpleparser.LinkProcessor" />
		<class name="com.itextpdf.text.html.simpleparser.StyleSheet" />
		<class name="com.itextpdf.text.html.simpleparser.TableWrapper" />
		<field name="DEFAULT_TOTAL_BUFSIZE" class="com.itextpdf.text.io.PagedChannelRandomAccessSource" />
		<field name="DEFAULT_MAX_OPEN_BUFFERS" class="com.itextpdf.text.io.PagedChannelRandomAccessSource" />
		<class name="com.itextpdf.text.io.RASInputStream" />
		<method signature="com.itextpdf.text.io.RandomAccessSourceFactory setExclusivelyLockFile(boolean)" class="com.itextpdf.text.io.RandomAccessSourceFactory" />
		<method signature="com.itextpdf.text.io.RandomAccessSource createSource(java.io.RandomAccessFile)" class="com.itextpdf.text.io.RandomAccessSourceFactory" />
		<method signature="com.itextpdf.text.io.RandomAccessSource createRanged(com.itextpdf.text.io.RandomAccessSource,long[])" class="com.itextpdf.text.io.RandomAccessSourceFactory" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.text.io.StreamUtil" />
		<method signature="void CopyBytes(com.itextpdf.text.io.RandomAccessSource,long,long,java.io.OutputStream)" class="com.itextpdf.text.io.StreamUtil" />
		<field name="offset" class="com.itextpdf.text.io.TempFileCache$ObjectPosition" />
		<field name="length" class="com.itextpdf.text.io.TempFileCache$ObjectPosition" />
		<field name="this$0" class="com.itextpdf.text.io.TempFileCache$ObjectPosition" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.io.TempFileCache,long,int)" class="com.itextpdf.text.io.TempFileCache$ObjectPosition" />
		<field name="filename" class="com.itextpdf.text.io.TempFileCache" />
		<field name="cache" class="com.itextpdf.text.io.TempFileCache" />
		<field name="baos" class="com.itextpdf.text.io.TempFileCache" />
		<field name="buf" class="com.itextpdf.text.io.TempFileCache" />
		<method signature="void &lt;init&gt;(java.lang.String)" class="com.itextpdf.text.io.TempFileCache" />
		<method signature="byte[] getBuffer(int)" class="com.itextpdf.text.io.TempFileCache" />
		<method signature="void close()" class="com.itextpdf.text.io.TempFileCache" />
		<class name="com.itextpdf.text.io.WindowRandomAccessSource" />
		<method signature="void read(long)" class="com.itextpdf.text.log.Counter" />
		<method signature="com.itextpdf.text.log.CounterFactory getInstance()" class="com.itextpdf.text.log.CounterFactory" />
		<method signature="com.itextpdf.text.log.Counter getCounter()" class="com.itextpdf.text.log.CounterFactory" />
		<method signature="void setCounter(com.itextpdf.text.log.Counter)" class="com.itextpdf.text.log.CounterFactory" />
		<method signature="void read(long)" class="com.itextpdf.text.log.DefaultCounter" />
		<method signature="com.itextpdf.text.log.Logger getLogger(java.lang.String)" class="com.itextpdf.text.log.Logger" />
		<method signature="void warn(java.lang.String)" class="com.itextpdf.text.log.Logger" />
		<method signature="com.itextpdf.text.log.Logger getLogger(java.lang.String)" class="com.itextpdf.text.log.LoggerFactory" />
		<method signature="com.itextpdf.text.log.LoggerFactory getInstance()" class="com.itextpdf.text.log.LoggerFactory" />
		<method signature="void setLogger(com.itextpdf.text.log.Logger)" class="com.itextpdf.text.log.LoggerFactory" />
		<method signature="com.itextpdf.text.log.Logger logger()" class="com.itextpdf.text.log.LoggerFactory" />
		<class name="com.itextpdf.text.log.NoOpCounter" />
		<method signature="void warn(java.lang.String)" class="com.itextpdf.text.log.NoOpLogger" />
		<method signature="com.itextpdf.text.log.Logger getLogger(java.lang.String)" class="com.itextpdf.text.log.NoOpLogger" />
		<class name="com.itextpdf.text.log.SysoCounter" />
		<class name="com.itextpdf.text.log.SysoLogger" />
		<class name="com.itextpdf.text.pdf.AFRelationshipValue" />
		<class name="com.itextpdf.text.pdf.AcroFields$1" />
		<class name="com.itextpdf.text.pdf.AcroFields$FieldPosition" />
		<class name="com.itextpdf.text.pdf.AcroFields$InstHit" />
		<class name="com.itextpdf.text.pdf.AcroFields$Item" />
		<class name="com.itextpdf.text.pdf.AcroFields$SorterComparator" />
		<class name="com.itextpdf.text.pdf.AcroFields" />
		<field name="serialVersionUID" class="com.itextpdf.text.pdf.BadPdfFormatException" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.text.pdf.BadPdfFormatException" />
		<class name="com.itextpdf.text.pdf.Barcode" />
		<class name="com.itextpdf.text.pdf.Barcode128$1" />
		<class name="com.itextpdf.text.pdf.Barcode128$Barcode128CodeSet" />
		<class name="com.itextpdf.text.pdf.Barcode128" />
		<class name="com.itextpdf.text.pdf.Barcode39" />
		<class name="com.itextpdf.text.pdf.BarcodeCodabar" />
		<class name="com.itextpdf.text.pdf.BarcodeDatamatrix$DmParams" />
		<class name="com.itextpdf.text.pdf.BarcodeDatamatrix$Placement" />
		<class name="com.itextpdf.text.pdf.BarcodeDatamatrix$ReedSolomon" />
		<class name="com.itextpdf.text.pdf.BarcodeDatamatrix" />
		<class name="com.itextpdf.text.pdf.BarcodeEAN" />
		<class name="com.itextpdf.text.pdf.BarcodeEANSUPP" />
		<class name="com.itextpdf.text.pdf.BarcodeInter25" />
		<class name="com.itextpdf.text.pdf.BarcodePDF417$Segment" />
		<class name="com.itextpdf.text.pdf.BarcodePDF417$SegmentList" />
		<class name="com.itextpdf.text.pdf.BarcodePDF417" />
		<class name="com.itextpdf.text.pdf.BarcodePostnet" />
		<class name="com.itextpdf.text.pdf.BarcodeQRCode" />
		<class name="com.itextpdf.text.pdf.BaseField" />
		<field name="COURIER" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="COURIER_BOLD" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="COURIER_OBLIQUE" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="COURIER_BOLDOBLIQUE" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="HELVETICA" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="HELVETICA_BOLD" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="HELVETICA_OBLIQUE" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="HELVETICA_BOLDOBLIQUE" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="SYMBOL" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="TIMES_ROMAN" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="TIMES_BOLD" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="TIMES_ITALIC" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="TIMES_BOLDITALIC" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="ZAPFDINGBATS" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="ASCENT" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="CAPHEIGHT" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="DESCENT" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="ITALICANGLE" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="BBOXLLX" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="BBOXLLY" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="BBOXURX" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="BBOXURY" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="AWT_ASCENT" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="AWT_DESCENT" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="AWT_LEADING" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="AWT_MAXADVANCE" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="UNDERLINE_POSITION" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="UNDERLINE_THICKNESS" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="STRIKETHROUGH_POSITION" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="STRIKETHROUGH_THICKNESS" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="SUBSCRIPT_SIZE" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="SUBSCRIPT_OFFSET" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="SUPERSCRIPT_SIZE" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="SUPERSCRIPT_OFFSET" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="WEIGHT_CLASS" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="WIDTH_CLASS" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="FONT_WEIGHT" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="FONT_TYPE_T1" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="FONT_TYPE_TT" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="FONT_TYPE_CJK" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="FONT_TYPE_TTUNI" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="FONT_TYPE_DOCUMENT" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="FONT_TYPE_T3" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="IDENTITY_H" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="IDENTITY_V" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="CP1250" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="CP1252" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="CP1257" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="WINANSI" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="MACROMAN" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="EMBEDDED" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="NOT_EMBEDDED" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="CACHED" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="NOT_CACHED" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="RESOURCE_PATH" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="CID_NEWLINE" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="PARAGRAPH_SEPARATOR" class="com.itextpdf.text.pdf.BaseFont" />
		<field name="notdef" class="com.itextpdf.text.pdf.BaseFont" />
		<method signature="com.itextpdf.text.pdf.BaseFont createFont()" class="com.itextpdf.text.pdf.BaseFont" />
		<method signature="com.itextpdf.text.pdf.BaseFont createFont(java.lang.String,java.lang.String,boolean,boolean)" class="com.itextpdf.text.pdf.BaseFont" />
		<method signature="com.itextpdf.text.pdf.BaseFont createFont(com.itextpdf.text.pdf.PRIndirectReference)" class="com.itextpdf.text.pdf.BaseFont" />
		<method signature="boolean setKerning(int,int,int)" class="com.itextpdf.text.pdf.BaseFont" />
		<method signature="int getDescent(java.lang.String)" class="com.itextpdf.text.pdf.BaseFont" />
		<method signature="int getAscent(java.lang.String)" class="com.itextpdf.text.pdf.BaseFont" />
		<method signature="float getDescentPoint(java.lang.String,float)" class="com.itextpdf.text.pdf.BaseFont" />
		<method signature="float getAscentPoint(java.lang.String,float)" class="com.itextpdf.text.pdf.BaseFont" />
		<method signature="com.itextpdf.text.pdf.PdfStream getFullFontStream()" class="com.itextpdf.text.pdf.BaseFont" />
		<method signature="void setFontDescriptor(int,float)" class="com.itextpdf.text.pdf.BaseFont" />
		<method signature="void setPostscriptFontName(java.lang.String)" class="com.itextpdf.text.pdf.BaseFont" />
		<method signature="java.lang.String getSubfamily()" class="com.itextpdf.text.pdf.BaseFont" />
		<method signature="java.lang.String[][] getAllNameEntries()" class="com.itextpdf.text.pdf.BaseFont" />
		<method signature="java.lang.String[][] getFullFontName(java.lang.String,java.lang.String,byte[])" class="com.itextpdf.text.pdf.BaseFont" />
		<method signature="java.lang.String[][] getAllNameEntries(java.lang.String,java.lang.String,byte[])" class="com.itextpdf.text.pdf.BaseFont" />
		<method signature="java.lang.String[] getCodePagesSupported()" class="com.itextpdf.text.pdf.BaseFont" />
		<method signature="java.lang.String[] enumerateTTCNames(byte[])" class="com.itextpdf.text.pdf.BaseFont" />
		<method signature="int[] getWidths()" class="com.itextpdf.text.pdf.BaseFont" />
		<method signature="java.lang.String[] getDifferences()" class="com.itextpdf.text.pdf.BaseFont" />
		<method signature="char[] getUnicodeDifferences()" class="com.itextpdf.text.pdf.BaseFont" />
		<method signature="boolean isForceWidthsOutput()" class="com.itextpdf.text.pdf.BaseFont" />
		<method signature="void setForceWidthsOutput(boolean)" class="com.itextpdf.text.pdf.BaseFont" />
		<method signature="boolean isDirectTextToByte()" class="com.itextpdf.text.pdf.BaseFont" />
		<method signature="void setDirectTextToByte(boolean)" class="com.itextpdf.text.pdf.BaseFont" />
		<method signature="boolean isSubset()" class="com.itextpdf.text.pdf.BaseFont" />
		<method signature="int getCidCode(int)" class="com.itextpdf.text.pdf.BaseFont" />
		<method signature="boolean charExists(int)" class="com.itextpdf.text.pdf.BaseFont" />
		<method signature="boolean setCharAdvance(int,int)" class="com.itextpdf.text.pdf.BaseFont" />
		<method signature="void addFont(com.itextpdf.text.pdf.PRIndirectReference,com.itextpdf.text.pdf.IntHashtable,java.util.ArrayList)" class="com.itextpdf.text.pdf.BaseFont" />
		<method signature="void recourseFonts(com.itextpdf.text.pdf.PdfDictionary,com.itextpdf.text.pdf.IntHashtable,java.util.ArrayList,int,java.util.HashSet)" class="com.itextpdf.text.pdf.BaseFont" />
		<method signature="java.util.ArrayList getDocumentFonts(com.itextpdf.text.pdf.PdfReader)" class="com.itextpdf.text.pdf.BaseFont" />
		<method signature="java.util.ArrayList getDocumentFonts(com.itextpdf.text.pdf.PdfReader,int)" class="com.itextpdf.text.pdf.BaseFont" />
		<method signature="int[] getCharBBox(int)" class="com.itextpdf.text.pdf.BaseFont" />
		<method signature="double[] getFontMatrix()" class="com.itextpdf.text.pdf.BaseFont" />
		<method signature="void correctArabicAdvance()" class="com.itextpdf.text.pdf.BaseFont" />
		<method signature="void addSubsetRange(int[])" class="com.itextpdf.text.pdf.BaseFont" />
		<method signature="int getCompressionLevel()" class="com.itextpdf.text.pdf.BaseFont" />
		<method signature="void setCompressionLevel(int)" class="com.itextpdf.text.pdf.BaseFont" />
		<method signature="void clearChunks()" class="com.itextpdf.text.pdf.BidiLine" />
		<method signature="void addChunks(java.util.ArrayList)" class="com.itextpdf.text.pdf.BidiLine" />
		<method signature="int trimLeft(int,int)" class="com.itextpdf.text.pdf.BidiLine" />
		<method signature="java.lang.String processLTR(java.lang.String,int,int)" class="com.itextpdf.text.pdf.BidiLine" />
		<field name="L" class="com.itextpdf.text.pdf.BidiOrder" />
		<field name="LRE" class="com.itextpdf.text.pdf.BidiOrder" />
		<field name="LRO" class="com.itextpdf.text.pdf.BidiOrder" />
		<field name="R" class="com.itextpdf.text.pdf.BidiOrder" />
		<field name="AL" class="com.itextpdf.text.pdf.BidiOrder" />
		<field name="RLE" class="com.itextpdf.text.pdf.BidiOrder" />
		<field name="RLO" class="com.itextpdf.text.pdf.BidiOrder" />
		<field name="PDF" class="com.itextpdf.text.pdf.BidiOrder" />
		<field name="EN" class="com.itextpdf.text.pdf.BidiOrder" />
		<field name="ES" class="com.itextpdf.text.pdf.BidiOrder" />
		<field name="ET" class="com.itextpdf.text.pdf.BidiOrder" />
		<field name="AN" class="com.itextpdf.text.pdf.BidiOrder" />
		<field name="CS" class="com.itextpdf.text.pdf.BidiOrder" />
		<field name="NSM" class="com.itextpdf.text.pdf.BidiOrder" />
		<field name="BN" class="com.itextpdf.text.pdf.BidiOrder" />
		<field name="B" class="com.itextpdf.text.pdf.BidiOrder" />
		<field name="S" class="com.itextpdf.text.pdf.BidiOrder" />
		<field name="WS" class="com.itextpdf.text.pdf.BidiOrder" />
		<field name="ON" class="com.itextpdf.text.pdf.BidiOrder" />
		<field name="TYPE_MIN" class="com.itextpdf.text.pdf.BidiOrder" />
		<field name="TYPE_MAX" class="com.itextpdf.text.pdf.BidiOrder" />
		<method signature="void &lt;init&gt;(byte[])" class="com.itextpdf.text.pdf.BidiOrder" />
		<method signature="void &lt;init&gt;(byte[],byte)" class="com.itextpdf.text.pdf.BidiOrder" />
		<method signature="int[] getReordering(int[])" class="com.itextpdf.text.pdf.BidiOrder" />
		<method signature="int[] computeMultilineReordering(byte[],int[])" class="com.itextpdf.text.pdf.BidiOrder" />
		<method signature="int[] computeReordering(byte[])" class="com.itextpdf.text.pdf.BidiOrder" />
		<method signature="byte getBaseLevel()" class="com.itextpdf.text.pdf.BidiOrder" />
		<method signature="int findRunStart(int,byte[])" class="com.itextpdf.text.pdf.BidiOrder" />
		<method signature="void validateTypes(byte[])" class="com.itextpdf.text.pdf.BidiOrder" />
		<field name="ZERO" class="com.itextpdf.text.pdf.ByteBuffer" />
		<method signature="void setCacheSize(int)" class="com.itextpdf.text.pdf.ByteBuffer" />
		<method signature="void fillCache(int)" class="com.itextpdf.text.pdf.ByteBuffer" />
		<method signature="byte[] convertToBytes(int)" class="com.itextpdf.text.pdf.ByteBuffer" />
		<method signature="com.itextpdf.text.pdf.ByteBuffer append(long)" class="com.itextpdf.text.pdf.ByteBuffer" />
		<method signature="java.lang.String toString(java.lang.String)" class="com.itextpdf.text.pdf.ByteBuffer" />
		<method signature="byte[] getBuffer()" class="com.itextpdf.text.pdf.ByteBuffer" />
		<field name="fdprivateSubrs" class="com.itextpdf.text.pdf.CFFFont$Font" />
		<field name="charset" class="com.itextpdf.text.pdf.CFFFont$Font" />
		<method signature="byte[] getCID(java.lang.String)" class="com.itextpdf.text.pdf.CFFFont" />
		<method signature="boolean isCID(java.lang.String)" class="com.itextpdf.text.pdf.CFFFont" />
		<method signature="boolean exists(java.lang.String)" class="com.itextpdf.text.pdf.CFFFont" />
		<method signature="void ReadEncoding(int)" class="com.itextpdf.text.pdf.CFFFont" />
		<field name="ENDCHAR_OP" class="com.itextpdf.text.pdf.CFFFontSubset" />
		<field name="RETURN_OP" class="com.itextpdf.text.pdf.CFFFontSubset" />
		<method signature="int countEntireIndexRange(int)" class="com.itextpdf.text.pdf.CFFFontSubset" />
		<field name="CJK_ENCODING" class="com.itextpdf.text.pdf.CJKFont" />
		<field name="FIRST" class="com.itextpdf.text.pdf.CJKFont" />
		<field name="BRACKET" class="com.itextpdf.text.pdf.CJKFont" />
		<field name="SERIAL" class="com.itextpdf.text.pdf.CJKFont" />
		<field name="V1Y" class="com.itextpdf.text.pdf.CJKFont" />
		<field name="RESOURCE_PATH_CMAP" class="com.itextpdf.text.pdf.CJKFont" />
		<method signature="java.lang.String getUniMap()" class="com.itextpdf.text.pdf.CJKFont" />
		<method signature="java.lang.String GetCompatibleFont(java.lang.String)" class="com.itextpdf.text.pdf.CJKFont" />
		<method signature="com.itextpdf.text.pdf.PdfStream getFullFontStream()" class="com.itextpdf.text.pdf.CJKFont" />
		<method signature="java.lang.String[][] getAllNameEntries()" class="com.itextpdf.text.pdf.CJKFont" />
		<method signature="boolean charExists(int)" class="com.itextpdf.text.pdf.CJKFont" />
		<method signature="boolean setCharAdvance(int,int)" class="com.itextpdf.text.pdf.CJKFont" />
		<method signature="void setPostscriptFontName(java.lang.String)" class="com.itextpdf.text.pdf.CJKFont" />
		<method signature="boolean setKerning(int,int,int)" class="com.itextpdf.text.pdf.CJKFont" />
		<method signature="int[] getCharBBox(int)" class="com.itextpdf.text.pdf.CJKFont" />
		<field name="serialVersionUID" class="com.itextpdf.text.pdf.CMYKColor" />
		<method signature="void &lt;init&gt;(int,int,int,int)" class="com.itextpdf.text.pdf.CMYKColor" />
		<class name="com.itextpdf.text.pdf.CMapAwareDocumentFont" />
		<field name="AR_NOVOWEL" class="com.itextpdf.text.pdf.ColumnText" />
		<field name="AR_COMPOSEDTASHKEEL" class="com.itextpdf.text.pdf.ColumnText" />
		<field name="AR_LIG" class="com.itextpdf.text.pdf.ColumnText" />
		<field name="DIGITS_EN2AN" class="com.itextpdf.text.pdf.ColumnText" />
		<field name="DIGITS_AN2EN" class="com.itextpdf.text.pdf.ColumnText" />
		<field name="DIGITS_EN2AN_INIT_LR" class="com.itextpdf.text.pdf.ColumnText" />
		<field name="DIGITS_EN2AN_INIT_AL" class="com.itextpdf.text.pdf.ColumnText" />
		<field name="DIGIT_TYPE_AN" class="com.itextpdf.text.pdf.ColumnText" />
		<field name="DIGIT_TYPE_AN_EXTENDED" class="com.itextpdf.text.pdf.ColumnText" />
		<field name="GLOBAL_SPACE_CHAR_RATIO" class="com.itextpdf.text.pdf.ColumnText" />
		<field name="START_COLUMN" class="com.itextpdf.text.pdf.ColumnText" />
		<field name="NO_MORE_TEXT" class="com.itextpdf.text.pdf.ColumnText" />
		<field name="NO_MORE_COLUMN" class="com.itextpdf.text.pdf.ColumnText" />
		<field name="LINE_STATUS_OK" class="com.itextpdf.text.pdf.ColumnText" />
		<field name="LINE_STATUS_OFFLIMITS" class="com.itextpdf.text.pdf.ColumnText" />
		<field name="LINE_STATUS_NOLINE" class="com.itextpdf.text.pdf.ColumnText" />
		<method signature="void addText(com.itextpdf.text.Chunk)" class="com.itextpdf.text.pdf.ColumnText" />
		<method signature="boolean isAllowedElement(com.itextpdf.text.Element)" class="com.itextpdf.text.pdf.ColumnText" />
		<method signature="java.util.ArrayList convertColumn(float[])" class="com.itextpdf.text.pdf.ColumnText" />
		<method signature="void setColumns(float[],float[])" class="com.itextpdf.text.pdf.ColumnText" />
		<method signature="void setSimpleColumn(com.itextpdf.text.Rectangle)" class="com.itextpdf.text.pdf.ColumnText" />
		<method signature="float getLeading()" class="com.itextpdf.text.pdf.ColumnText" />
		<method signature="float getMultipliedLeading()" class="com.itextpdf.text.pdf.ColumnText" />
		<method signature="void setYLine(float)" class="com.itextpdf.text.pdf.ColumnText" />
		<method signature="int getRowsDrawn()" class="com.itextpdf.text.pdf.ColumnText" />
		<method signature="void setIndent(float)" class="com.itextpdf.text.pdf.ColumnText" />
		<method signature="float getFollowingIndent()" class="com.itextpdf.text.pdf.ColumnText" />
		<method signature="float getRightIndent()" class="com.itextpdf.text.pdf.ColumnText" />
		<method signature="float getCurrentLeading()" class="com.itextpdf.text.pdf.ColumnText" />
		<method signature="boolean getInheritGraphicState()" class="com.itextpdf.text.pdf.ColumnText" />
		<method signature="float getExtraParagraphSpace()" class="com.itextpdf.text.pdf.ColumnText" />
		<method signature="void clearChunks()" class="com.itextpdf.text.pdf.ColumnText" />
		<method signature="float getSpaceCharRatio()" class="com.itextpdf.text.pdf.ColumnText" />
		<method signature="int getArabicOptions()" class="com.itextpdf.text.pdf.ColumnText" />
		<method signature="float getWidth(com.itextpdf.text.Phrase,int,int)" class="com.itextpdf.text.pdf.ColumnText" />
		<method signature="float getWidth(com.itextpdf.text.Phrase)" class="com.itextpdf.text.pdf.ColumnText" />
		<method signature="float fitText(com.itextpdf.text.Font,java.lang.String,com.itextpdf.text.Rectangle,float,int)" class="com.itextpdf.text.pdf.ColumnText" />
		<method signature="com.itextpdf.text.pdf.PdfContentByte[] getCanvases()" class="com.itextpdf.text.pdf.ColumnText" />
		<method signature="boolean hasMoreText(int)" class="com.itextpdf.text.pdf.ColumnText" />
		<method signature="boolean isAdjustFirstLine()" class="com.itextpdf.text.pdf.ColumnText" />
		<method signature="void &lt;init&gt;(char)" class="com.itextpdf.text.pdf.DefaultSplitCharacter" />
		<method signature="void &lt;init&gt;(char[])" class="com.itextpdf.text.pdf.DefaultSplitCharacter" />
		<field name="metrics" class="com.itextpdf.text.pdf.DocumentFont" />
		<field name="fontName" class="com.itextpdf.text.pdf.DocumentFont" />
		<field name="refFont" class="com.itextpdf.text.pdf.DocumentFont" />
		<field name="font" class="com.itextpdf.text.pdf.DocumentFont" />
		<field name="uni2byte" class="com.itextpdf.text.pdf.DocumentFont" />
		<field name="byte2uni" class="com.itextpdf.text.pdf.DocumentFont" />
		<field name="diffmap" class="com.itextpdf.text.pdf.DocumentFont" />
		<field name="ascender" class="com.itextpdf.text.pdf.DocumentFont" />
		<field name="capHeight" class="com.itextpdf.text.pdf.DocumentFont" />
		<field name="descender" class="com.itextpdf.text.pdf.DocumentFont" />
		<field name="italicAngle" class="com.itextpdf.text.pdf.DocumentFont" />
		<field name="fontWeight" class="com.itextpdf.text.pdf.DocumentFont" />
		<field name="llx" class="com.itextpdf.text.pdf.DocumentFont" />
		<field name="lly" class="com.itextpdf.text.pdf.DocumentFont" />
		<field name="urx" class="com.itextpdf.text.pdf.DocumentFont" />
		<field name="ury" class="com.itextpdf.text.pdf.DocumentFont" />
		<field name="isType0" class="com.itextpdf.text.pdf.DocumentFont" />
		<field name="defaultWidth" class="com.itextpdf.text.pdf.DocumentFont" />
		<field name="hMetrics" class="com.itextpdf.text.pdf.DocumentFont" />
		<field name="cjkEncoding" class="com.itextpdf.text.pdf.DocumentFont" />
		<field name="uniMap" class="com.itextpdf.text.pdf.DocumentFont" />
		<field name="cjkMirror" class="com.itextpdf.text.pdf.DocumentFont" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.pdf.PdfDictionary)" class="com.itextpdf.text.pdf.DocumentFont" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.pdf.PRIndirectReference)" class="com.itextpdf.text.pdf.DocumentFont" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.pdf.PRIndirectReference,com.itextpdf.text.pdf.PdfDictionary)" class="com.itextpdf.text.pdf.DocumentFont" />
		<method signature="com.itextpdf.text.pdf.PdfDictionary getFontDictionary()" class="com.itextpdf.text.pdf.DocumentFont" />
		<method signature="void init()" class="com.itextpdf.text.pdf.DocumentFont" />
		<method signature="void processType0(com.itextpdf.text.pdf.PdfDictionary)" class="com.itextpdf.text.pdf.DocumentFont" />
		<method signature="com.itextpdf.text.pdf.IntHashtable readWidths(com.itextpdf.text.pdf.PdfArray)" class="com.itextpdf.text.pdf.DocumentFont" />
		<method signature="java.lang.String decodeString(com.itextpdf.text.pdf.PdfString)" class="com.itextpdf.text.pdf.DocumentFont" />
		<method signature="void fillMetricsIdentity(com.itextpdf.text.pdf.IntHashtable,int)" class="com.itextpdf.text.pdf.DocumentFont" />
		<method signature="void fillMetrics(byte[],com.itextpdf.text.pdf.IntHashtable,int)" class="com.itextpdf.text.pdf.DocumentFont" />
		<method signature="void doType1TT()" class="com.itextpdf.text.pdf.DocumentFont" />
		<method signature="void fillWidths()" class="com.itextpdf.text.pdf.DocumentFont" />
		<method signature="void fillDiffMap(com.itextpdf.text.pdf.PdfDictionary,com.itextpdf.text.pdf.fonts.cmaps.CMapToUnicode)" class="com.itextpdf.text.pdf.DocumentFont" />
		<method signature="com.itextpdf.text.pdf.fonts.cmaps.CMapToUnicode processToUnicode()" class="com.itextpdf.text.pdf.DocumentFont" />
		<method signature="void fillFontDesc(com.itextpdf.text.pdf.PdfDictionary)" class="com.itextpdf.text.pdf.DocumentFont" />
		<method signature="void fillEncoding(com.itextpdf.text.pdf.PdfName)" class="com.itextpdf.text.pdf.DocumentFont" />
		<method signature="java.lang.String[][] getFamilyFontName()" class="com.itextpdf.text.pdf.DocumentFont" />
		<method signature="float getFontDescriptor(int,float)" class="com.itextpdf.text.pdf.DocumentFont" />
		<method signature="java.lang.String[][] getFullFontName()" class="com.itextpdf.text.pdf.DocumentFont" />
		<method signature="java.lang.String[][] getAllNameEntries()" class="com.itextpdf.text.pdf.DocumentFont" />
		<method signature="int getKerning(int,int)" class="com.itextpdf.text.pdf.DocumentFont" />
		<method signature="java.lang.String getPostscriptFontName()" class="com.itextpdf.text.pdf.DocumentFont" />
		<method signature="int getRawWidth(int,java.lang.String)" class="com.itextpdf.text.pdf.DocumentFont" />
		<method signature="boolean hasKernPairs()" class="com.itextpdf.text.pdf.DocumentFont" />
		<method signature="void writeFont(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.pdf.PdfIndirectReference,java.lang.Object[])" class="com.itextpdf.text.pdf.DocumentFont" />
		<method signature="com.itextpdf.text.pdf.PdfStream getFullFontStream()" class="com.itextpdf.text.pdf.DocumentFont" />
		<method signature="int getWidth(int)" class="com.itextpdf.text.pdf.DocumentFont" />
		<method signature="int getWidth(java.lang.String)" class="com.itextpdf.text.pdf.DocumentFont" />
		<method signature="byte[] convertToBytes(java.lang.String)" class="com.itextpdf.text.pdf.DocumentFont" />
		<method signature="byte[] convertToBytes(int)" class="com.itextpdf.text.pdf.DocumentFont" />
		<method signature="boolean charExists(int)" class="com.itextpdf.text.pdf.DocumentFont" />
		<method signature="double[] getFontMatrix()" class="com.itextpdf.text.pdf.DocumentFont" />
		<method signature="void setPostscriptFontName(java.lang.String)" class="com.itextpdf.text.pdf.DocumentFont" />
		<method signature="boolean setKerning(int,int,int)" class="com.itextpdf.text.pdf.DocumentFont" />
		<method signature="int[] getCharBBox(int)" class="com.itextpdf.text.pdf.DocumentFont" />
		<method signature="int[] getRawCharBBox(int,java.lang.String)" class="com.itextpdf.text.pdf.DocumentFont" />
		<method signature="boolean isVertical()" class="com.itextpdf.text.pdf.DocumentFont" />
		<method signature="com.itextpdf.text.pdf.IntHashtable getUni2Byte()" class="com.itextpdf.text.pdf.DocumentFont" />
		<method signature="com.itextpdf.text.pdf.IntHashtable getByte2Uni()" class="com.itextpdf.text.pdf.DocumentFont" />
		<method signature="com.itextpdf.text.pdf.IntHashtable getDiffmap()" class="com.itextpdf.text.pdf.DocumentFont" />
		<method signature="boolean isSymbolic()" class="com.itextpdf.text.pdf.DocumentFont" />
		<method signature="void &lt;init&gt;(byte[])" class="com.itextpdf.text.pdf.EnumerateTTC" />
		<field name="serialVersionUID" class="com.itextpdf.text.pdf.ExtendedColor" />
		<field name="TYPE_RGB" class="com.itextpdf.text.pdf.ExtendedColor" />
		<field name="TYPE_GRAY" class="com.itextpdf.text.pdf.ExtendedColor" />
		<field name="TYPE_CMYK" class="com.itextpdf.text.pdf.ExtendedColor" />
		<field name="TYPE_SEPARATION" class="com.itextpdf.text.pdf.ExtendedColor" />
		<field name="TYPE_PATTERN" class="com.itextpdf.text.pdf.ExtendedColor" />
		<field name="TYPE_SHADING" class="com.itextpdf.text.pdf.ExtendedColor" />
		<field name="TYPE_DEVICEN" class="com.itextpdf.text.pdf.ExtendedColor" />
		<field name="TYPE_LAB" class="com.itextpdf.text.pdf.ExtendedColor" />
		<method signature="void &lt;init&gt;(int,int,int,int,int)" class="com.itextpdf.text.pdf.ExtendedColor" />
		<class name="com.itextpdf.text.pdf.FdfReader" />
		<class name="com.itextpdf.text.pdf.FdfWriter$Wrt" />
		<class name="com.itextpdf.text.pdf.FdfWriter" />
		<class name="com.itextpdf.text.pdf.FilterHandlers$1" />
		<class name="com.itextpdf.text.pdf.FilterHandlers$FilterHandler" />
		<class name="com.itextpdf.text.pdf.FilterHandlers$Filter_ASCII85DECODE" />
		<class name="com.itextpdf.text.pdf.FilterHandlers$Filter_ASCIIHEXDECODE" />
		<class name="com.itextpdf.text.pdf.FilterHandlers$Filter_CCITTFAXDECODE" />
		<class name="com.itextpdf.text.pdf.FilterHandlers$Filter_DoNothing" />
		<class name="com.itextpdf.text.pdf.FilterHandlers$Filter_FLATEDECODE" />
		<class name="com.itextpdf.text.pdf.FilterHandlers$Filter_LZWDECODE" />
		<class name="com.itextpdf.text.pdf.FilterHandlers$Filter_RUNLENGTHDECODE" />
		<class name="com.itextpdf.text.pdf.FilterHandlers" />
		<method signature="void setYLine(float)" class="com.itextpdf.text.pdf.FloatLayout" />
		<method signature="float getFilledWidth()" class="com.itextpdf.text.pdf.FloatLayout" />
		<method signature="void setFilledWidth(float)" class="com.itextpdf.text.pdf.FloatLayout" />
		<method signature="int getRunDirection()" class="com.itextpdf.text.pdf.FloatLayout" />
		<method signature="void setRunDirection(int)" class="com.itextpdf.text.pdf.FloatLayout" />
		<method signature="java.lang.Object[] convertToBytesGid(java.lang.String)" class="com.itextpdf.text.pdf.FontDetails" />
		<method signature="boolean isSubset()" class="com.itextpdf.text.pdf.FontDetails" />
		<class name="com.itextpdf.text.pdf.FontSelector" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.text.pdf.GlyphList" />
		<field name="serialVersionUID" class="com.itextpdf.text.pdf.GrayColor" />
		<class name="com.itextpdf.text.pdf.HyphenationAuto" />
		<method signature="java.lang.String getHyphenSymbol()" class="com.itextpdf.text.pdf.HyphenationEvent" />
		<field name="data" class="com.itextpdf.text.pdf.ICC_Profile" />
		<field name="numComponents" class="com.itextpdf.text.pdf.ICC_Profile" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.text.pdf.ICC_Profile" />
		<method signature="com.itextpdf.text.pdf.ICC_Profile getInstance(byte[],int)" class="com.itextpdf.text.pdf.ICC_Profile" />
		<method signature="com.itextpdf.text.pdf.ICC_Profile getInstance(byte[])" class="com.itextpdf.text.pdf.ICC_Profile" />
		<method signature="com.itextpdf.text.pdf.ICC_Profile getInstance(java.io.InputStream)" class="com.itextpdf.text.pdf.ICC_Profile" />
		<method signature="com.itextpdf.text.pdf.ICC_Profile GetInstance(java.lang.String)" class="com.itextpdf.text.pdf.ICC_Profile" />
		<method signature="boolean equals(java.lang.Object)" class="com.itextpdf.text.pdf.ICachedColorSpace" />
		<method signature="int hashCode()" class="com.itextpdf.text.pdf.ICachedColorSpace" />
		<method signature="int getKey()" class="com.itextpdf.text.pdf.IntHashtable$Entry" />
		<method signature="int getValue()" class="com.itextpdf.text.pdf.IntHashtable$Entry" />
		<class name="com.itextpdf.text.pdf.IntHashtable$IntHashtableIterator" />
		<method signature="boolean isEmpty()" class="com.itextpdf.text.pdf.IntHashtable" />
		<method signature="boolean contains(int)" class="com.itextpdf.text.pdf.IntHashtable" />
		<method signature="boolean containsValue(int)" class="com.itextpdf.text.pdf.IntHashtable" />
		<method signature="int remove(int)" class="com.itextpdf.text.pdf.IntHashtable" />
		<method signature="void clear()" class="com.itextpdf.text.pdf.IntHashtable" />
		<method signature="java.util.Iterator getEntryIterator()" class="com.itextpdf.text.pdf.IntHashtable" />
		<method signature="int getOneKey()" class="com.itextpdf.text.pdf.IntHashtable" />
		<class name="com.itextpdf.text.pdf.LZWDecoder" />
		<method signature="com.itextpdf.text.BaseColor toRgb()" class="com.itextpdf.text.pdf.LabColor" />
		<method signature="com.itextpdf.text.pdf.CMYKColor toCmyk()" class="com.itextpdf.text.pdf.LabColor" />
		<class name="com.itextpdf.text.pdf.LongHashtable$Entry" />
		<class name="com.itextpdf.text.pdf.LongHashtable$LongHashtableIterator" />
		<class name="com.itextpdf.text.pdf.LongHashtable" />
		<class name="com.itextpdf.text.pdf.MappedRandomAccessFile$1" />
		<class name="com.itextpdf.text.pdf.MappedRandomAccessFile" />
		<method signature="void &lt;init&gt;(java.util.List)" class="com.itextpdf.text.pdf.NumberArray" />
		<method signature="void resetCounter()" class="com.itextpdf.text.pdf.OutputStreamCounter" />
		<class name="com.itextpdf.text.pdf.OutputStreamEncryption" />
		<class name="com.itextpdf.text.pdf.PRAcroForm$FieldInformation" />
		<class name="com.itextpdf.text.pdf.PRAcroForm" />
		<field name="reader" class="com.itextpdf.text.pdf.PRIndirectReference" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.pdf.PdfReader,int,int)" class="com.itextpdf.text.pdf.PRIndirectReference" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.pdf.PdfReader,int)" class="com.itextpdf.text.pdf.PRIndirectReference" />
		<method signature="void toPdf(com.itextpdf.text.pdf.PdfWriter,java.io.OutputStream)" class="com.itextpdf.text.pdf.PRIndirectReference" />
		<method signature="void setNumber(int,int)" class="com.itextpdf.text.pdf.PRIndirectReference" />
		<class name="com.itextpdf.text.pdf.PRStream" />
		<field name="EMPTY" class="com.itextpdf.text.pdf.PRTokeniser" />
		<field name="reference" class="com.itextpdf.text.pdf.PRTokeniser" />
		<field name="generation" class="com.itextpdf.text.pdf.PRTokeniser" />
		<method signature="void seek(long)" class="com.itextpdf.text.pdf.PRTokeniser" />
		<method signature="long getFilePointer()" class="com.itextpdf.text.pdf.PRTokeniser" />
		<method signature="long length()" class="com.itextpdf.text.pdf.PRTokeniser" />
		<method signature="int read()" class="com.itextpdf.text.pdf.PRTokeniser" />
		<method signature="com.itextpdf.text.pdf.RandomAccessFileOrArray getSafeFile()" class="com.itextpdf.text.pdf.PRTokeniser" />
		<method signature="com.itextpdf.text.pdf.RandomAccessFileOrArray getFile()" class="com.itextpdf.text.pdf.PRTokeniser" />
		<method signature="java.lang.String readString(int)" class="com.itextpdf.text.pdf.PRTokeniser" />
		<method signature="boolean isDelimiter(int)" class="com.itextpdf.text.pdf.PRTokeniser" />
		<method signature="boolean isDelimiterWhitespace(int)" class="com.itextpdf.text.pdf.PRTokeniser" />
		<method signature="int getReference()" class="com.itextpdf.text.pdf.PRTokeniser" />
		<method signature="int getGeneration()" class="com.itextpdf.text.pdf.PRTokeniser" />
		<method signature="int getHeaderOffset()" class="com.itextpdf.text.pdf.PRTokeniser" />
		<method signature="char checkPdfHeader()" class="com.itextpdf.text.pdf.PRTokeniser" />
		<method signature="void checkFdfHeader()" class="com.itextpdf.text.pdf.PRTokeniser" />
		<method signature="long getStartxref()" class="com.itextpdf.text.pdf.PRTokeniser" />
		<method signature="void nextValidToken()" class="com.itextpdf.text.pdf.PRTokeniser" />
		<method signature="long longValue()" class="com.itextpdf.text.pdf.PRTokeniser" />
		<method signature="int intValue()" class="com.itextpdf.text.pdf.PRTokeniser" />
		<method signature="boolean readLineSegment(byte[])" class="com.itextpdf.text.pdf.PRTokeniser" />
		<method signature="boolean readLineSegment(byte[],boolean)" class="com.itextpdf.text.pdf.PRTokeniser" />
		<method signature="long[] checkObjectStart(byte[])" class="com.itextpdf.text.pdf.PRTokeniser" />
		<method signature="void setOriginalResources(com.itextpdf.text.pdf.PdfDictionary,int[])" class="com.itextpdf.text.pdf.PageResources" />
		<method signature="void addDefaultColor(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfObject)" class="com.itextpdf.text.pdf.PageResources" />
		<method signature="com.itextpdf.text.pdf.PdfName addShading(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfIndirectReference)" class="com.itextpdf.text.pdf.PageResources" />
		<method signature="boolean hasResources()" class="com.itextpdf.text.pdf.PageResources" />
		<field name="serialVersionUID" class="com.itextpdf.text.pdf.PatternColor" />
		<class name="com.itextpdf.text.pdf.PdfAConformanceException" />
		<class name="com.itextpdf.text.pdf.PdfAConformanceLevel" />
		<class name="com.itextpdf.text.pdf.PdfACopy$1" />
		<class name="com.itextpdf.text.pdf.PdfACopy" />
		<class name="com.itextpdf.text.pdf.PdfARadioCheckField" />
		<class name="com.itextpdf.text.pdf.PdfASmartCopy" />
		<class name="com.itextpdf.text.pdf.PdfAStamper" />
		<class name="com.itextpdf.text.pdf.PdfAStamperImp$1" />
		<class name="com.itextpdf.text.pdf.PdfAStamperImp" />
		<class name="com.itextpdf.text.pdf.PdfATtfUnicodeWriter" />
		<class name="com.itextpdf.text.pdf.PdfAWriter$1" />
		<class name="com.itextpdf.text.pdf.PdfAWriter" />
		<method signature="void setNeedAppearances(boolean)" class="com.itextpdf.text.pdf.PdfAcroForm" />
		<method signature="void addCalculationOrder(com.itextpdf.text.pdf.PdfFormField)" class="com.itextpdf.text.pdf.PdfAcroForm" />
		<method signature="void setSigFlags(int)" class="com.itextpdf.text.pdf.PdfAcroForm" />
		<method signature="void addFormField(com.itextpdf.text.pdf.PdfFormField)" class="com.itextpdf.text.pdf.PdfAcroForm" />
		<method signature="com.itextpdf.text.pdf.PdfFormField addHtmlPostButton(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.itextpdf.text.pdf.BaseFont,float,float,float,float,float)" class="com.itextpdf.text.pdf.PdfAcroForm" />
		<method signature="com.itextpdf.text.pdf.PdfFormField addResetButton(java.lang.String,java.lang.String,java.lang.String,com.itextpdf.text.pdf.BaseFont,float,float,float,float,float)" class="com.itextpdf.text.pdf.PdfAcroForm" />
		<method signature="com.itextpdf.text.pdf.PdfFormField addMap(java.lang.String,java.lang.String,java.lang.String,com.itextpdf.text.pdf.PdfContentByte,float,float,float,float)" class="com.itextpdf.text.pdf.PdfAcroForm" />
		<method signature="void setButtonParams(com.itextpdf.text.pdf.PdfFormField,int,java.lang.String,java.lang.String)" class="com.itextpdf.text.pdf.PdfAcroForm" />
		<method signature="void drawButton(com.itextpdf.text.pdf.PdfFormField,java.lang.String,com.itextpdf.text.pdf.BaseFont,float,float,float,float,float)" class="com.itextpdf.text.pdf.PdfAcroForm" />
		<method signature="com.itextpdf.text.pdf.PdfFormField addHiddenField(java.lang.String,java.lang.String)" class="com.itextpdf.text.pdf.PdfAcroForm" />
		<method signature="com.itextpdf.text.pdf.PdfFormField addSingleLineTextField(java.lang.String,java.lang.String,com.itextpdf.text.pdf.BaseFont,float,float,float,float,float)" class="com.itextpdf.text.pdf.PdfAcroForm" />
		<method signature="com.itextpdf.text.pdf.PdfFormField addMultiLineTextField(java.lang.String,java.lang.String,com.itextpdf.text.pdf.BaseFont,float,float,float,float,float)" class="com.itextpdf.text.pdf.PdfAcroForm" />
		<method signature="com.itextpdf.text.pdf.PdfFormField addSingleLinePasswordField(java.lang.String,java.lang.String,com.itextpdf.text.pdf.BaseFont,float,float,float,float,float)" class="com.itextpdf.text.pdf.PdfAcroForm" />
		<method signature="void setTextFieldParams(com.itextpdf.text.pdf.PdfFormField,java.lang.String,java.lang.String,float,float,float,float)" class="com.itextpdf.text.pdf.PdfAcroForm" />
		<method signature="void drawSingleLineOfText(com.itextpdf.text.pdf.PdfFormField,java.lang.String,com.itextpdf.text.pdf.BaseFont,float,float,float,float,float)" class="com.itextpdf.text.pdf.PdfAcroForm" />
		<method signature="void drawMultiLineOfText(com.itextpdf.text.pdf.PdfFormField,java.lang.String,com.itextpdf.text.pdf.BaseFont,float,float,float,float,float)" class="com.itextpdf.text.pdf.PdfAcroForm" />
		<method signature="com.itextpdf.text.pdf.PdfFormField addCheckBox(java.lang.String,java.lang.String,boolean,float,float,float,float)" class="com.itextpdf.text.pdf.PdfAcroForm" />
		<method signature="void setCheckBoxParams(com.itextpdf.text.pdf.PdfFormField,java.lang.String,java.lang.String,boolean,float,float,float,float)" class="com.itextpdf.text.pdf.PdfAcroForm" />
		<method signature="void drawCheckBoxAppearences(com.itextpdf.text.pdf.PdfFormField,java.lang.String,float,float,float,float)" class="com.itextpdf.text.pdf.PdfAcroForm" />
		<method signature="com.itextpdf.text.pdf.PdfFormField getRadioGroup(java.lang.String,java.lang.String,boolean)" class="com.itextpdf.text.pdf.PdfAcroForm" />
		<method signature="void addRadioGroup(com.itextpdf.text.pdf.PdfFormField)" class="com.itextpdf.text.pdf.PdfAcroForm" />
		<method signature="com.itextpdf.text.pdf.PdfFormField addRadioButton(com.itextpdf.text.pdf.PdfFormField,java.lang.String,float,float,float,float)" class="com.itextpdf.text.pdf.PdfAcroForm" />
		<method signature="void drawRadioAppearences(com.itextpdf.text.pdf.PdfFormField,java.lang.String,float,float,float,float)" class="com.itextpdf.text.pdf.PdfAcroForm" />
		<method signature="com.itextpdf.text.pdf.PdfFormField addSelectList(java.lang.String,java.lang.String[],java.lang.String,com.itextpdf.text.pdf.BaseFont,float,float,float,float,float)" class="com.itextpdf.text.pdf.PdfAcroForm" />
		<method signature="com.itextpdf.text.pdf.PdfFormField addSelectList(java.lang.String,java.lang.String[][],java.lang.String,com.itextpdf.text.pdf.BaseFont,float,float,float,float,float)" class="com.itextpdf.text.pdf.PdfAcroForm" />
		<method signature="com.itextpdf.text.pdf.PdfFormField addComboBox(java.lang.String,java.lang.String[],java.lang.String,boolean,com.itextpdf.text.pdf.BaseFont,float,float,float,float,float)" class="com.itextpdf.text.pdf.PdfAcroForm" />
		<method signature="com.itextpdf.text.pdf.PdfFormField addComboBox(java.lang.String,java.lang.String[][],java.lang.String,boolean,com.itextpdf.text.pdf.BaseFont,float,float,float,float,float)" class="com.itextpdf.text.pdf.PdfAcroForm" />
		<method signature="void setChoiceParams(com.itextpdf.text.pdf.PdfFormField,java.lang.String,java.lang.String,float,float,float,float)" class="com.itextpdf.text.pdf.PdfAcroForm" />
		<method signature="com.itextpdf.text.pdf.PdfFormField addSignature(java.lang.String,float,float,float,float)" class="com.itextpdf.text.pdf.PdfAcroForm" />
		<method signature="void setSignatureParams(com.itextpdf.text.pdf.PdfFormField,java.lang.String,float,float,float,float)" class="com.itextpdf.text.pdf.PdfAcroForm" />
		<method signature="void drawSignatureAppearences(com.itextpdf.text.pdf.PdfFormField,float,float,float,float)" class="com.itextpdf.text.pdf.PdfAcroForm" />
		<field name="FIRSTPAGE" class="com.itextpdf.text.pdf.PdfAction" />
		<field name="PREVPAGE" class="com.itextpdf.text.pdf.PdfAction" />
		<field name="NEXTPAGE" class="com.itextpdf.text.pdf.PdfAction" />
		<field name="LASTPAGE" class="com.itextpdf.text.pdf.PdfAction" />
		<field name="PRINTDIALOG" class="com.itextpdf.text.pdf.PdfAction" />
		<field name="SUBMIT_EXCLUDE" class="com.itextpdf.text.pdf.PdfAction" />
		<field name="SUBMIT_INCLUDE_NO_VALUE_FIELDS" class="com.itextpdf.text.pdf.PdfAction" />
		<field name="SUBMIT_HTML_FORMAT" class="com.itextpdf.text.pdf.PdfAction" />
		<field name="SUBMIT_HTML_GET" class="com.itextpdf.text.pdf.PdfAction" />
		<field name="SUBMIT_COORDINATES" class="com.itextpdf.text.pdf.PdfAction" />
		<field name="SUBMIT_XFDF" class="com.itextpdf.text.pdf.PdfAction" />
		<field name="SUBMIT_INCLUDE_APPEND_SAVES" class="com.itextpdf.text.pdf.PdfAction" />
		<field name="SUBMIT_INCLUDE_ANNOTATIONS" class="com.itextpdf.text.pdf.PdfAction" />
		<field name="SUBMIT_PDF" class="com.itextpdf.text.pdf.PdfAction" />
		<field name="SUBMIT_CANONICAL_FORMAT" class="com.itextpdf.text.pdf.PdfAction" />
		<field name="SUBMIT_EXCL_NON_USER_ANNOTS" class="com.itextpdf.text.pdf.PdfAction" />
		<field name="SUBMIT_EXCL_F_KEY" class="com.itextpdf.text.pdf.PdfAction" />
		<field name="SUBMIT_EMBED_FORM" class="com.itextpdf.text.pdf.PdfAction" />
		<field name="RESET_EXCLUDE" class="com.itextpdf.text.pdf.PdfAction" />
		<method signature="void &lt;init&gt;(java.net.URL,boolean)" class="com.itextpdf.text.pdf.PdfAction" />
		<method signature="com.itextpdf.text.pdf.PdfAction createLaunch(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="com.itextpdf.text.pdf.PdfAction" />
		<method signature="com.itextpdf.text.pdf.PdfAction createHide(com.itextpdf.text.pdf.PdfObject,boolean)" class="com.itextpdf.text.pdf.PdfAction" />
		<method signature="com.itextpdf.text.pdf.PdfAction createHide(com.itextpdf.text.pdf.PdfAnnotation,boolean)" class="com.itextpdf.text.pdf.PdfAction" />
		<method signature="com.itextpdf.text.pdf.PdfAction createHide(java.lang.String,boolean)" class="com.itextpdf.text.pdf.PdfAction" />
		<method signature="com.itextpdf.text.pdf.PdfArray buildArray(java.lang.Object[])" class="com.itextpdf.text.pdf.PdfAction" />
		<method signature="com.itextpdf.text.pdf.PdfAction createHide(java.lang.Object[],boolean)" class="com.itextpdf.text.pdf.PdfAction" />
		<method signature="com.itextpdf.text.pdf.PdfAction createSubmitForm(java.lang.String,java.lang.Object[],int)" class="com.itextpdf.text.pdf.PdfAction" />
		<method signature="com.itextpdf.text.pdf.PdfAction createResetForm(java.lang.Object[],int)" class="com.itextpdf.text.pdf.PdfAction" />
		<method signature="com.itextpdf.text.pdf.PdfAction createImportData(java.lang.String)" class="com.itextpdf.text.pdf.PdfAction" />
		<method signature="void next(com.itextpdf.text.pdf.PdfAction)" class="com.itextpdf.text.pdf.PdfAction" />
		<method signature="com.itextpdf.text.pdf.PdfAction gotoLocalPage(int,com.itextpdf.text.pdf.PdfDestination,com.itextpdf.text.pdf.PdfWriter)" class="com.itextpdf.text.pdf.PdfAction" />
		<method signature="com.itextpdf.text.pdf.PdfAction gotoLocalPage(java.lang.String,boolean)" class="com.itextpdf.text.pdf.PdfAction" />
		<method signature="com.itextpdf.text.pdf.PdfAction gotoRemotePage(java.lang.String,java.lang.String,boolean,boolean)" class="com.itextpdf.text.pdf.PdfAction" />
		<method signature="com.itextpdf.text.pdf.PdfAction gotoEmbedded(java.lang.String,com.itextpdf.text.pdf.collection.PdfTargetDictionary,java.lang.String,boolean,boolean)" class="com.itextpdf.text.pdf.PdfAction" />
		<method signature="com.itextpdf.text.pdf.PdfAction gotoEmbedded(java.lang.String,com.itextpdf.text.pdf.collection.PdfTargetDictionary,com.itextpdf.text.pdf.PdfObject,boolean)" class="com.itextpdf.text.pdf.PdfAction" />
		<method signature="com.itextpdf.text.pdf.PdfAction setOCGstate(java.util.ArrayList,boolean)" class="com.itextpdf.text.pdf.PdfAction" />
		<class name="com.itextpdf.text.pdf.PdfAnnotation$PdfImportedLink" />
		<field name="FLAGS_INVISIBLE" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<field name="FLAGS_HIDDEN" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<field name="FLAGS_PRINT" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<field name="FLAGS_NOZOOM" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<field name="FLAGS_NOROTATE" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<field name="FLAGS_NOVIEW" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<field name="FLAGS_READONLY" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<field name="FLAGS_LOCKED" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<field name="FLAGS_TOGGLENOVIEW" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<field name="FLAGS_LOCKEDCONTENTS" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<field name="MARKUP_HIGHLIGHT" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<field name="MARKUP_UNDERLINE" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<field name="MARKUP_STRIKEOUT" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<field name="MARKUP_SQUIGGLY" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<method signature="com.itextpdf.text.pdf.PdfAnnotation createText(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Rectangle,java.lang.String,java.lang.String,boolean,java.lang.String)" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<method signature="com.itextpdf.text.pdf.PdfAnnotation createLink(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Rectangle,com.itextpdf.text.pdf.PdfName)" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<method signature="com.itextpdf.text.pdf.PdfAnnotation createLink(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Rectangle,com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfAction)" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<method signature="com.itextpdf.text.pdf.PdfAnnotation createLink(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Rectangle,com.itextpdf.text.pdf.PdfName,java.lang.String)" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<method signature="com.itextpdf.text.pdf.PdfAnnotation createLink(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Rectangle,com.itextpdf.text.pdf.PdfName,int,com.itextpdf.text.pdf.PdfDestination)" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<method signature="com.itextpdf.text.pdf.PdfAnnotation createFreeText(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Rectangle,java.lang.String,com.itextpdf.text.pdf.PdfContentByte)" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<method signature="com.itextpdf.text.pdf.PdfAnnotation createLine(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Rectangle,java.lang.String,float,float,float,float)" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<method signature="com.itextpdf.text.pdf.PdfAnnotation createSquareCircle(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Rectangle,java.lang.String,boolean)" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<method signature="com.itextpdf.text.pdf.PdfAnnotation createMarkup(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Rectangle,java.lang.String,int,float[])" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<method signature="com.itextpdf.text.pdf.PdfAnnotation createStamp(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Rectangle,java.lang.String,java.lang.String)" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<method signature="com.itextpdf.text.pdf.PdfAnnotation createInk(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Rectangle,java.lang.String,float[][])" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<method signature="com.itextpdf.text.pdf.PdfAnnotation createFileAttachment(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Rectangle,java.lang.String,byte[],java.lang.String,java.lang.String)" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<method signature="com.itextpdf.text.pdf.PdfAnnotation createFileAttachment(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Rectangle,java.lang.String,com.itextpdf.text.pdf.PdfFileSpecification)" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<method signature="com.itextpdf.text.pdf.PdfAnnotation createPopup(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Rectangle,java.lang.String,boolean)" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<method signature="com.itextpdf.text.pdf.PdfAnnotation createPolygonPolyline(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Rectangle,java.lang.String,boolean,com.itextpdf.text.pdf.PdfArray)" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<method signature="void setDefaultAppearanceString(com.itextpdf.text.pdf.PdfContentByte)" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<method signature="void setFlags(int)" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<method signature="void setBorder(com.itextpdf.text.pdf.PdfBorderArray)" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<method signature="void setBorderStyle(com.itextpdf.text.pdf.PdfBorderDictionary)" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<method signature="void setHighlighting(com.itextpdf.text.pdf.PdfName)" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<method signature="void setAppearance(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfTemplate)" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<method signature="void setAppearance(com.itextpdf.text.pdf.PdfName,java.lang.String,com.itextpdf.text.pdf.PdfTemplate)" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<method signature="void setAppearanceState(java.lang.String)" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<method signature="void setColor(com.itextpdf.text.BaseColor)" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<method signature="void setTitle(java.lang.String)" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<method signature="void setPopup(com.itextpdf.text.pdf.PdfAnnotation)" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<method signature="void setAction(com.itextpdf.text.pdf.PdfAction)" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<method signature="void setAdditionalActions(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfAction)" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<method signature="void setPage(int)" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<method signature="void setPlaceInPage(int)" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<method signature="void setRotate(int)" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<method signature="com.itextpdf.text.pdf.PdfDictionary getMK()" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<method signature="void setMKRotation(int)" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<method signature="com.itextpdf.text.pdf.PdfArray getMKColor(com.itextpdf.text.BaseColor)" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<method signature="void setMKBorderColor(com.itextpdf.text.BaseColor)" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<method signature="void setMKBackgroundColor(com.itextpdf.text.BaseColor)" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<method signature="void setMKNormalCaption(java.lang.String)" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<method signature="void setMKRolloverCaption(java.lang.String)" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<method signature="void setMKAlternateCaption(java.lang.String)" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<method signature="void setMKNormalIcon(com.itextpdf.text.pdf.PdfTemplate)" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<method signature="void setMKRolloverIcon(com.itextpdf.text.pdf.PdfTemplate)" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<method signature="void setMKAlternateIcon(com.itextpdf.text.pdf.PdfTemplate)" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<method signature="void setMKIconFit(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfName,float,float,boolean)" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<method signature="void setMKTextPosition(int)" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<method signature="void setLayer(com.itextpdf.text.pdf.PdfOCG)" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<method signature="void setName(java.lang.String)" class="com.itextpdf.text.pdf.PdfAnnotation" />
		<class name="com.itextpdf.text.pdf.PdfAppearance" />
		<method signature="void &lt;init&gt;(int)" class="com.itextpdf.text.pdf.PdfArray" />
		<method signature="void &lt;init&gt;(java.util.List)" class="com.itextpdf.text.pdf.PdfArray" />
		<method signature="java.util.ListIterator listIterator()" class="com.itextpdf.text.pdf.PdfArray" />
		<method signature="com.itextpdf.text.pdf.PdfArray getAsArray(int)" class="com.itextpdf.text.pdf.PdfArray" />
		<method signature="com.itextpdf.text.pdf.PdfStream getAsStream(int)" class="com.itextpdf.text.pdf.PdfArray" />
		<method signature="com.itextpdf.text.pdf.PdfString getAsString(int)" class="com.itextpdf.text.pdf.PdfArray" />
		<method signature="com.itextpdf.text.pdf.PdfBoolean getAsBoolean(int)" class="com.itextpdf.text.pdf.PdfArray" />
		<method signature="com.itextpdf.text.pdf.PdfIndirectReference getAsIndirectObject(int)" class="com.itextpdf.text.pdf.PdfArray" />
		<method signature="long[] asLongArray()" class="com.itextpdf.text.pdf.PdfArray" />
		<method signature="double[] asDoubleArray()" class="com.itextpdf.text.pdf.PdfArray" />
		<class name="com.itextpdf.text.pdf.PdfArtifact$1" />
		<class name="com.itextpdf.text.pdf.PdfArtifact$ArtifactType" />
		<method signature="com.itextpdf.text.pdf.PdfString getType()" class="com.itextpdf.text.pdf.PdfArtifact" />
		<method signature="void setType(com.itextpdf.text.pdf.PdfString)" class="com.itextpdf.text.pdf.PdfArtifact" />
		<method signature="void setType(com.itextpdf.text.pdf.PdfArtifact$ArtifactType)" class="com.itextpdf.text.pdf.PdfArtifact" />
		<method signature="com.itextpdf.text.pdf.PdfArray getBBox()" class="com.itextpdf.text.pdf.PdfArtifact" />
		<method signature="void setBBox(com.itextpdf.text.pdf.PdfArray)" class="com.itextpdf.text.pdf.PdfArtifact" />
		<method signature="com.itextpdf.text.pdf.PdfArray getAttached()" class="com.itextpdf.text.pdf.PdfArtifact" />
		<method signature="void setAttached(com.itextpdf.text.pdf.PdfArray)" class="com.itextpdf.text.pdf.PdfArtifact" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.Rectangle)" class="com.itextpdf.text.pdf.PdfBody" />
		<method signature="boolean isNestable()" class="com.itextpdf.text.pdf.PdfBody" />
		<field name="TRUE" class="com.itextpdf.text.pdf.PdfBoolean" />
		<field name="FALSE" class="com.itextpdf.text.pdf.PdfBoolean" />
		<method signature="void &lt;init&gt;(java.lang.String)" class="com.itextpdf.text.pdf.PdfBoolean" />
		<class name="com.itextpdf.text.pdf.PdfBorderDictionary" />
		<field name="ITALIC_ANGLE" class="com.itextpdf.text.pdf.PdfChunk" />
		<field name="TABSTOP" class="com.itextpdf.text.pdf.PdfChunk" />
		<field name="UNDERLINE_THICKNESS" class="com.itextpdf.text.pdf.PdfChunk" />
		<field name="UNDERLINE_OFFSET" class="com.itextpdf.text.pdf.PdfChunk" />
		<method signature="void setImageOffsetX(float)" class="com.itextpdf.text.pdf.PdfChunk" />
		<method signature="void setImageOffsetY(float)" class="com.itextpdf.text.pdf.PdfChunk" />
		<method signature="void setValue(java.lang.String)" class="com.itextpdf.text.pdf.PdfChunk" />
		<method signature="java.lang.String getEncoding()" class="com.itextpdf.text.pdf.PdfChunk" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.BaseColor)" class="com.itextpdf.text.pdf.PdfColor" />
		<class name="com.itextpdf.text.pdf.PdfConcatenate" />
		<field name="ALIGN_CENTER" class="com.itextpdf.text.pdf.PdfContentByte" />
		<field name="ALIGN_LEFT" class="com.itextpdf.text.pdf.PdfContentByte" />
		<field name="ALIGN_RIGHT" class="com.itextpdf.text.pdf.PdfContentByte" />
		<field name="LINE_CAP_BUTT" class="com.itextpdf.text.pdf.PdfContentByte" />
		<field name="LINE_CAP_ROUND" class="com.itextpdf.text.pdf.PdfContentByte" />
		<field name="LINE_CAP_PROJECTING_SQUARE" class="com.itextpdf.text.pdf.PdfContentByte" />
		<field name="LINE_JOIN_MITER" class="com.itextpdf.text.pdf.PdfContentByte" />
		<field name="LINE_JOIN_ROUND" class="com.itextpdf.text.pdf.PdfContentByte" />
		<field name="LINE_JOIN_BEVEL" class="com.itextpdf.text.pdf.PdfContentByte" />
		<field name="TEXT_RENDER_MODE_FILL" class="com.itextpdf.text.pdf.PdfContentByte" />
		<field name="TEXT_RENDER_MODE_STROKE" class="com.itextpdf.text.pdf.PdfContentByte" />
		<field name="TEXT_RENDER_MODE_FILL_STROKE" class="com.itextpdf.text.pdf.PdfContentByte" />
		<field name="TEXT_RENDER_MODE_INVISIBLE" class="com.itextpdf.text.pdf.PdfContentByte" />
		<field name="TEXT_RENDER_MODE_FILL_CLIP" class="com.itextpdf.text.pdf.PdfContentByte" />
		<field name="TEXT_RENDER_MODE_STROKE_CLIP" class="com.itextpdf.text.pdf.PdfContentByte" />
		<field name="TEXT_RENDER_MODE_FILL_STROKE_CLIP" class="com.itextpdf.text.pdf.PdfContentByte" />
		<field name="TEXT_RENDER_MODE_CLIP" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="float getLeading()" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="float getWordSpacing()" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="float getHorizontalScaling()" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void setFlatness(float)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void setFlatness(double)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void setRenderingIntent(com.itextpdf.text.pdf.PdfName)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void setLineDash(float)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void setLineDash(double)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void setLineDash(float,float)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void setLineDash(double,double)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void setLineDash(float,float,float)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void setLineDash(double,double,double)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void setLineDash(float[],float)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void setLineDash(double[],double)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void setMiterLimit(float)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void setMiterLimit(double)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void eoClip()" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void setRGBColorFillF(float,float,float)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void setRGBColorStrokeF(float,float,float)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void resetCMYKColorFill()" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void resetCMYKColorStroke()" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void curveTo(float,float,float,float,float,float)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void curveTo(double,double,double,double,double,double)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void curveTo(float,float,float,float)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void curveTo(double,double,double,double)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void curveFromTo(float,float,float,float)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void curveFromTo(double,double,double,double)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void circle(float,float,float)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void circle(double,double,double)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void closePath()" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void closePathStroke()" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void eoFill()" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void fillStroke()" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void closePathFillStroke()" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void eoFillStroke()" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void closePathEoFillStroke()" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void addImage(com.itextpdf.text.Image,double,double,double,double,double,double)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void addImage(com.itextpdf.text.Image,com.itextpdf.awt.geom.AffineTransform)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void setHorizontalScaling(float)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void setLeading(float)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void showTextGid(java.lang.String)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="com.itextpdf.text.pdf.PdfTextArray getKernArray(java.lang.String,com.itextpdf.text.pdf.BaseFont)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void showTextKerned(java.lang.String)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void newlineShowText(java.lang.String)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void newlineShowText(float,float,java.lang.String)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void setTextMatrix(com.itextpdf.awt.geom.AffineTransform)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void moveTextWithLeading(float,float)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void newlineText()" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void addOutline(com.itextpdf.text.pdf.PdfOutline,java.lang.String)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="com.itextpdf.text.pdf.PdfOutline getRootOutline()" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="float getEffectiveStringWidth(java.lang.String,boolean)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void showTextAligned(int,java.lang.String,float,float,float)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void showTextAligned(int,java.lang.String,float,float,float,boolean)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void showTextAlignedKerned(int,java.lang.String,float,float,float)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void concatCTM(com.itextpdf.awt.geom.AffineTransform)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="java.util.ArrayList bezierArc(float,float,float,float,float,float)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="java.util.ArrayList bezierArc(double,double,double,double,double,double)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void arc(float,float,float,float,float,float)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void arc(double,double,double,double,double,double)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void ellipse(float,float,float,float)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void ellipse(double,double,double,double)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="com.itextpdf.text.pdf.PdfPatternPainter createPattern(float,float,float,float)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="com.itextpdf.text.pdf.PdfPatternPainter createPattern(float,float)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="com.itextpdf.text.pdf.PdfPatternPainter createPattern(float,float,float,float,com.itextpdf.text.BaseColor)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="com.itextpdf.text.pdf.PdfPatternPainter createPattern(float,float,com.itextpdf.text.BaseColor)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="com.itextpdf.text.pdf.PdfTemplate createTemplate(float,float)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="com.itextpdf.text.pdf.PdfTemplate createTemplate(float,float,com.itextpdf.text.pdf.PdfName)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="com.itextpdf.text.pdf.PdfAppearance createAppearance(float,float)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="com.itextpdf.text.pdf.PdfAppearance createAppearance(float,float,com.itextpdf.text.pdf.PdfName)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void addPSXObject(com.itextpdf.text.pdf.PdfPSXObject)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void addTemplate(com.itextpdf.text.pdf.PdfTemplate,float,float,float,float,float,float)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void addTemplate(com.itextpdf.text.pdf.PdfTemplate,double,double,double,double,double,double)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void addTemplate(com.itextpdf.text.pdf.PdfTemplate,float,float,float,float,float,float,boolean)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void addTemplate(com.itextpdf.text.pdf.PdfTemplate,double,double,double,double,double,double,boolean)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="com.itextpdf.text.pdf.PdfName addFormXObj(com.itextpdf.text.pdf.PdfStream,com.itextpdf.text.pdf.PdfName,float,float,float,float,float,float)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="com.itextpdf.text.pdf.PdfName addFormXObj(com.itextpdf.text.pdf.PdfStream,com.itextpdf.text.pdf.PdfName,double,double,double,double,double,double)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void addTemplate(com.itextpdf.text.pdf.PdfTemplate,com.itextpdf.awt.geom.AffineTransform)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void addTemplate(com.itextpdf.text.pdf.PdfTemplate,com.itextpdf.awt.geom.AffineTransform,boolean)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void addTemplateReference(com.itextpdf.text.pdf.PdfIndirectReference,com.itextpdf.text.pdf.PdfName,float,float,float,float,float,float)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void addTemplateReference(com.itextpdf.text.pdf.PdfIndirectReference,com.itextpdf.text.pdf.PdfName,double,double,double,double,double,double)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void addTemplate(com.itextpdf.text.pdf.PdfTemplate,float,float)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void addTemplate(com.itextpdf.text.pdf.PdfTemplate,double,double)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void addTemplate(com.itextpdf.text.pdf.PdfTemplate,float,float,boolean)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void addTemplate(com.itextpdf.text.pdf.PdfTemplate,double,double,boolean)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void setCMYKColorFill(int,int,int,int)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void setCMYKColorStroke(int,int,int,int)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void paintShading(com.itextpdf.text.pdf.PdfShading)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void paintShading(com.itextpdf.text.pdf.PdfShadingPattern)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void localGoto(java.lang.String,float,float,float,float)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="boolean localDestination(java.lang.String,com.itextpdf.text.pdf.PdfDestination)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void inheritGraphicState(com.itextpdf.text.pdf.PdfContentByte)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void remoteGoto(java.lang.String,java.lang.String,float,float,float,float)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void remoteGoto(java.lang.String,int,float,float,float,float)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void roundRectangle(float,float,float,float,float)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void roundRectangle(double,double,double,double,double)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void setAction(com.itextpdf.text.pdf.PdfAction,float,float,float,float)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void setLiteral(java.lang.String)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void setLiteral(char)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void setLiteral(float)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void drawRadioField(float,float,float,float,boolean)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void drawRadioField(double,double,double,double,boolean)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void drawTextField(float,float,float,float)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void drawTextField(double,double,double,double)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void drawButton(float,float,float,float,java.lang.String,com.itextpdf.text.pdf.BaseFont,float)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void drawButton(double,double,double,double,java.lang.String,com.itextpdf.text.pdf.BaseFont,float)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void transform(com.itextpdf.awt.geom.AffineTransform)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void setDefaultColorspace(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfObject)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="java.awt.Graphics2D createGraphicsShapes(float,float)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="java.awt.Graphics2D createPrinterGraphicsShapes(float,float,java.awt.print.PrinterJob)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="java.awt.Graphics2D createGraphics(float,float)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="java.awt.Graphics2D createPrinterGraphics(float,float,java.awt.print.PrinterJob)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="java.awt.Graphics2D createGraphics(float,float,boolean,float)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="java.awt.Graphics2D createPrinterGraphics(float,float,boolean,float,java.awt.print.PrinterJob)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="java.awt.Graphics2D createGraphicsShapes(float,float,boolean,float)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="java.awt.Graphics2D createPrinterGraphicsShapes(float,float,boolean,float,java.awt.print.PrinterJob)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="java.awt.Graphics2D createGraphics(float,float,com.itextpdf.awt.FontMapper)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="java.awt.Graphics2D createPrinterGraphics(float,float,com.itextpdf.awt.FontMapper,java.awt.print.PrinterJob)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="java.awt.Graphics2D createGraphics(float,float,com.itextpdf.awt.FontMapper,boolean,float)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="java.awt.Graphics2D createPrinterGraphics(float,float,com.itextpdf.awt.FontMapper,boolean,float,java.awt.print.PrinterJob)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void addImage(com.itextpdf.text.Image,java.awt.geom.AffineTransform)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void addTemplate(com.itextpdf.text.pdf.PdfTemplate,java.awt.geom.AffineTransform)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void concatCTM(java.awt.geom.AffineTransform)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void setTextMatrix(java.awt.geom.AffineTransform)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<method signature="void transform(java.awt.geom.AffineTransform)" class="com.itextpdf.text.pdf.PdfContentByte" />
		<field name="COMMAND_TYPE" class="com.itextpdf.text.pdf.PdfContentParser" />
		<method signature="com.itextpdf.text.pdf.PRTokeniser getTokeniser()" class="com.itextpdf.text.pdf.PdfContentParser" />
		<method signature="void setTokeniser(com.itextpdf.text.pdf.PRTokeniser)" class="com.itextpdf.text.pdf.PdfContentParser" />
		<class name="com.itextpdf.text.pdf.PdfCopy$ImportedPage" />
		<class name="com.itextpdf.text.pdf.PdfCopy$IndirectReferences" />
		<class name="com.itextpdf.text.pdf.PdfCopy$PageStamp" />
		<class name="com.itextpdf.text.pdf.PdfCopy$StampContent" />
		<class name="com.itextpdf.text.pdf.PdfCopy" />
		<class name="com.itextpdf.text.pdf.PdfCopyFields" />
		<class name="com.itextpdf.text.pdf.PdfCopyFieldsImp" />
		<class name="com.itextpdf.text.pdf.PdfCopyForms" />
		<class name="com.itextpdf.text.pdf.PdfCopyFormsImp" />
		<field name="dash" class="com.itextpdf.text.pdf.PdfDashPattern" />
		<field name="gap" class="com.itextpdf.text.pdf.PdfDashPattern" />
		<field name="phase" class="com.itextpdf.text.pdf.PdfDashPattern" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.text.pdf.PdfDashPattern" />
		<method signature="void &lt;init&gt;(float)" class="com.itextpdf.text.pdf.PdfDashPattern" />
		<method signature="void &lt;init&gt;(float,float)" class="com.itextpdf.text.pdf.PdfDashPattern" />
		<method signature="void &lt;init&gt;(float,float,float)" class="com.itextpdf.text.pdf.PdfDashPattern" />
		<method signature="void add(float)" class="com.itextpdf.text.pdf.PdfDashPattern" />
		<method signature="void toPdf(com.itextpdf.text.pdf.PdfWriter,java.io.OutputStream)" class="com.itextpdf.text.pdf.PdfDashPattern" />
		<method signature="java.lang.String getW3CDate()" class="com.itextpdf.text.pdf.PdfDate" />
		<method signature="java.lang.String getW3CDate(java.lang.String)" class="com.itextpdf.text.pdf.PdfDate" />
		<method signature="java.util.Calendar decode(java.lang.String)" class="com.itextpdf.text.pdf.PdfDate" />
		<field name="XYZ" class="com.itextpdf.text.pdf.PdfDestination" />
		<field name="FIT" class="com.itextpdf.text.pdf.PdfDestination" />
		<field name="FITH" class="com.itextpdf.text.pdf.PdfDestination" />
		<field name="FITV" class="com.itextpdf.text.pdf.PdfDestination" />
		<field name="FITR" class="com.itextpdf.text.pdf.PdfDestination" />
		<field name="FITB" class="com.itextpdf.text.pdf.PdfDestination" />
		<field name="FITBH" class="com.itextpdf.text.pdf.PdfDestination" />
		<field name="FITBV" class="com.itextpdf.text.pdf.PdfDestination" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.pdf.PdfDestination)" class="com.itextpdf.text.pdf.PdfDestination" />
		<method signature="void &lt;init&gt;(int)" class="com.itextpdf.text.pdf.PdfDestination" />
		<method signature="void &lt;init&gt;(int,float,float,float,float)" class="com.itextpdf.text.pdf.PdfDestination" />
		<method signature="void &lt;init&gt;(java.lang.String)" class="com.itextpdf.text.pdf.PdfDestination" />
		<class name="com.itextpdf.text.pdf.PdfDeveloperExtension" />
		<field name="spotColors" class="com.itextpdf.text.pdf.PdfDeviceNColor" />
		<field name="colorantsDetails" class="com.itextpdf.text.pdf.PdfDeviceNColor" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.pdf.PdfSpotColor[])" class="com.itextpdf.text.pdf.PdfDeviceNColor" />
		<method signature="int getNumberOfColorants()" class="com.itextpdf.text.pdf.PdfDeviceNColor" />
		<method signature="boolean equals(java.lang.Object)" class="com.itextpdf.text.pdf.PdfDeviceNColor" />
		<method signature="void &lt;init&gt;(int)" class="com.itextpdf.text.pdf.PdfDictionary" />
		<method signature="void putEx(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfObject)" class="com.itextpdf.text.pdf.PdfDictionary" />
		<method signature="void clear()" class="com.itextpdf.text.pdf.PdfDictionary" />
		<method signature="boolean isFont()" class="com.itextpdf.text.pdf.PdfDictionary" />
		<method signature="boolean isPage()" class="com.itextpdf.text.pdf.PdfDictionary" />
		<method signature="boolean isPages()" class="com.itextpdf.text.pdf.PdfDictionary" />
		<method signature="boolean isCatalog()" class="com.itextpdf.text.pdf.PdfDictionary" />
		<method signature="boolean isOutlineTree()" class="com.itextpdf.text.pdf.PdfDictionary" />
		<method signature="boolean checkType(com.itextpdf.text.pdf.PdfName)" class="com.itextpdf.text.pdf.PdfDictionary" />
		<method signature="com.itextpdf.text.pdf.PdfStream getAsStream(com.itextpdf.text.pdf.PdfName)" class="com.itextpdf.text.pdf.PdfDictionary" />
		<method signature="com.itextpdf.text.pdf.PdfNumber getAsNumber(com.itextpdf.text.pdf.PdfName)" class="com.itextpdf.text.pdf.PdfDictionary" />
		<method signature="com.itextpdf.text.pdf.PdfBoolean getAsBoolean(com.itextpdf.text.pdf.PdfName)" class="com.itextpdf.text.pdf.PdfDictionary" />
		<method signature="com.itextpdf.text.pdf.PdfIndirectReference getAsIndirectObject(com.itextpdf.text.pdf.PdfName)" class="com.itextpdf.text.pdf.PdfDictionary" />
		<class name="com.itextpdf.text.pdf.PdfDiv$BorderTopStyle" />
		<class name="com.itextpdf.text.pdf.PdfDiv$DisplayType" />
		<class name="com.itextpdf.text.pdf.PdfDiv$PositionType" />
		<field name="content" class="com.itextpdf.text.pdf.PdfDiv" />
		<field name="left" class="com.itextpdf.text.pdf.PdfDiv" />
		<field name="top" class="com.itextpdf.text.pdf.PdfDiv" />
		<field name="right" class="com.itextpdf.text.pdf.PdfDiv" />
		<field name="bottom" class="com.itextpdf.text.pdf.PdfDiv" />
		<field name="width" class="com.itextpdf.text.pdf.PdfDiv" />
		<field name="height" class="com.itextpdf.text.pdf.PdfDiv" />
		<field name="percentageHeight" class="com.itextpdf.text.pdf.PdfDiv" />
		<field name="percentageWidth" class="com.itextpdf.text.pdf.PdfDiv" />
		<field name="contentWidth" class="com.itextpdf.text.pdf.PdfDiv" />
		<field name="contentHeight" class="com.itextpdf.text.pdf.PdfDiv" />
		<field name="textAlignment" class="com.itextpdf.text.pdf.PdfDiv" />
		<field name="paddingLeft" class="com.itextpdf.text.pdf.PdfDiv" />
		<field name="paddingRight" class="com.itextpdf.text.pdf.PdfDiv" />
		<field name="paddingTop" class="com.itextpdf.text.pdf.PdfDiv" />
		<field name="paddingBottom" class="com.itextpdf.text.pdf.PdfDiv" />
		<field name="floatType" class="com.itextpdf.text.pdf.PdfDiv" />
		<field name="position" class="com.itextpdf.text.pdf.PdfDiv" />
		<field name="display" class="com.itextpdf.text.pdf.PdfDiv" />
		<field name="floatLayout" class="com.itextpdf.text.pdf.PdfDiv" />
		<field name="borderTopStyle" class="com.itextpdf.text.pdf.PdfDiv" />
		<field name="yLine" class="com.itextpdf.text.pdf.PdfDiv" />
		<field name="runDirection" class="com.itextpdf.text.pdf.PdfDiv" />
		<field name="keepTogether" class="com.itextpdf.text.pdf.PdfDiv" />
		<field name="role" class="com.itextpdf.text.pdf.PdfDiv" />
		<field name="accessibleAttributes" class="com.itextpdf.text.pdf.PdfDiv" />
		<field name="id" class="com.itextpdf.text.pdf.PdfDiv" />
		<field name="backgroundColor" class="com.itextpdf.text.pdf.PdfDiv" />
		<field name="backgroundImage" class="com.itextpdf.text.pdf.PdfDiv" />
		<field name="backgroundImageWidth" class="com.itextpdf.text.pdf.PdfDiv" />
		<field name="backgroundImageHeight" class="com.itextpdf.text.pdf.PdfDiv" />
		<field name="spacingBefore" class="com.itextpdf.text.pdf.PdfDiv" />
		<field name="spacingAfter" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="float getContentWidth()" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="void setContentWidth(float)" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="float getContentHeight()" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="void setContentHeight(float)" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="java.lang.Float getPercentageHeight()" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="void setPercentageHeight(java.lang.Float)" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="java.lang.Float getPercentageWidth()" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="void setPercentageWidth(java.lang.Float)" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="com.itextpdf.text.pdf.PdfDiv$DisplayType getDisplay()" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="void setDisplay(com.itextpdf.text.pdf.PdfDiv$DisplayType)" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="void setBackgroundColor(com.itextpdf.text.BaseColor)" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="void setBackgroundImage(com.itextpdf.text.Image)" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="void setBackgroundImage(com.itextpdf.text.Image,float,float)" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="int getRunDirection()" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="void setRunDirection(int)" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="void setKeepTogether(boolean)" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="boolean isNestable()" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="void setSpacingBefore(float)" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="void setSpacingAfter(float)" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="float getSpacingAfter()" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="void setTextAlignment(int)" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="void addElement(com.itextpdf.text.Element)" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="java.lang.Float getLeft()" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="void setLeft(java.lang.Float)" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="java.lang.Float getRight()" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="void setRight(java.lang.Float)" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="java.lang.Float getTop()" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="void setTop(java.lang.Float)" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="java.lang.Float getBottom()" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="void setBottom(java.lang.Float)" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="java.lang.Float getWidth()" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="void setWidth(java.lang.Float)" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="java.lang.Float getHeight()" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="void setHeight(java.lang.Float)" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="float getPaddingLeft()" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="void setPaddingLeft(float)" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="float getPaddingRight()" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="void setPaddingRight(float)" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="void setPaddingTop(float)" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="float getPaddingBottom()" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="void setPaddingBottom(float)" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="void setFloatType(com.itextpdf.text.pdf.PdfDiv$FloatType)" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="com.itextpdf.text.pdf.PdfDiv$PositionType getPosition()" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="void setPosition(com.itextpdf.text.pdf.PdfDiv$PositionType)" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="void setContent(java.util.ArrayList)" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="com.itextpdf.text.pdf.PdfDiv$BorderTopStyle getBorderTopStyle()" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="void setBorderTopStyle(com.itextpdf.text.pdf.PdfDiv$BorderTopStyle)" class="com.itextpdf.text.pdf.PdfDiv" />
		<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String)" class="com.itextpdf.text.pdf.PdfDocument$PdfInfo" />
		<field name="hangingPunctuation" class="com.itextpdf.text.pdf.PdfDocument" />
		<field name="jsCounter" class="com.itextpdf.text.pdf.PdfDocument" />
		<method signature="float getLeading()" class="com.itextpdf.text.pdf.PdfDocument" />
		<method signature="void setLeading(float)" class="com.itextpdf.text.pdf.PdfDocument" />
		<method signature="com.itextpdf.text.TabSettings getTabSettings()" class="com.itextpdf.text.pdf.PdfDocument" />
		<method signature="void setTabSettings(com.itextpdf.text.TabSettings)" class="com.itextpdf.text.pdf.PdfDocument" />
		<method signature="void setXmpMetadata(byte[])" class="com.itextpdf.text.pdf.PdfDocument" />
		<method signature="boolean setMarginMirroring(boolean)" class="com.itextpdf.text.pdf.PdfDocument" />
		<method signature="boolean setMarginMirroringTopBottom(boolean)" class="com.itextpdf.text.pdf.PdfDocument" />
		<method signature="void setPageCount(int)" class="com.itextpdf.text.pdf.PdfDocument" />
		<method signature="void resetPageCount()" class="com.itextpdf.text.pdf.PdfDocument" />
		<method signature="float getVerticalPosition(boolean)" class="com.itextpdf.text.pdf.PdfDocument" />
		<method signature="void addOutline(com.itextpdf.text.pdf.PdfOutline,java.lang.String)" class="com.itextpdf.text.pdf.PdfDocument" />
		<method signature="com.itextpdf.text.pdf.PdfOutline getRootOutline()" class="com.itextpdf.text.pdf.PdfDocument" />
		<method signature="void setViewerPreferences(int)" class="com.itextpdf.text.pdf.PdfDocument" />
		<method signature="void addViewerPreference(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfObject)" class="com.itextpdf.text.pdf.PdfDocument" />
		<method signature="void setPageLabels(com.itextpdf.text.pdf.PdfPageLabels)" class="com.itextpdf.text.pdf.PdfDocument" />
		<method signature="com.itextpdf.text.pdf.PdfPageLabels getPageLabels()" class="com.itextpdf.text.pdf.PdfDocument" />
		<method signature="void setAction(com.itextpdf.text.pdf.PdfAction,float,float,float,float)" class="com.itextpdf.text.pdf.PdfDocument" />
		<method signature="void addJavaScript(com.itextpdf.text.pdf.PdfAction)" class="com.itextpdf.text.pdf.PdfDocument" />
		<method signature="void addJavaScript(java.lang.String,com.itextpdf.text.pdf.PdfAction)" class="com.itextpdf.text.pdf.PdfDocument" />
		<method signature="void addFileAttachment(java.lang.String,com.itextpdf.text.pdf.PdfFileSpecification)" class="com.itextpdf.text.pdf.PdfDocument" />
		<method signature="java.util.HashMap getDocumentFileAttachment()" class="com.itextpdf.text.pdf.PdfDocument" />
		<method signature="void setOpenAction(java.lang.String)" class="com.itextpdf.text.pdf.PdfDocument" />
		<method signature="void setOpenAction(com.itextpdf.text.pdf.PdfAction)" class="com.itextpdf.text.pdf.PdfDocument" />
		<method signature="void addAdditionalAction(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfAction)" class="com.itextpdf.text.pdf.PdfDocument" />
		<method signature="void setCollection(com.itextpdf.text.pdf.collection.PdfCollection)" class="com.itextpdf.text.pdf.PdfDocument" />
		<method signature="com.itextpdf.text.pdf.PdfAcroForm getAcroForm()" class="com.itextpdf.text.pdf.PdfDocument" />
		<method signature="void setSigFlags(int)" class="com.itextpdf.text.pdf.PdfDocument" />
		<method signature="void addCalculationOrder(com.itextpdf.text.pdf.PdfFormField)" class="com.itextpdf.text.pdf.PdfDocument" />
		<method signature="void setCropBoxSize(com.itextpdf.text.Rectangle)" class="com.itextpdf.text.pdf.PdfDocument" />
		<method signature="void setBoxSize(java.lang.String,com.itextpdf.text.Rectangle)" class="com.itextpdf.text.pdf.PdfDocument" />
		<method signature="com.itextpdf.text.Rectangle getBoxSize(java.lang.String)" class="com.itextpdf.text.pdf.PdfDocument" />
		<method signature="void setPageEmpty(boolean)" class="com.itextpdf.text.pdf.PdfDocument" />
		<method signature="void setDuration(int)" class="com.itextpdf.text.pdf.PdfDocument" />
		<method signature="void setTransition(com.itextpdf.text.pdf.PdfTransition)" class="com.itextpdf.text.pdf.PdfDocument" />
		<method signature="void setPageAction(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfAction)" class="com.itextpdf.text.pdf.PdfDocument" />
		<method signature="void setThumbnail(com.itextpdf.text.Image)" class="com.itextpdf.text.pdf.PdfDocument" />
		<method signature="boolean isStrictImageSequence()" class="com.itextpdf.text.pdf.PdfDocument" />
		<method signature="void setStrictImageSequence(boolean)" class="com.itextpdf.text.pdf.PdfDocument" />
		<method signature="void clearTextWrap()" class="com.itextpdf.text.pdf.PdfDocument" />
		<method signature="int getNextMarkPoint(java.lang.Object)" class="com.itextpdf.text.pdf.PdfDocument" />
		<method signature="com.itextpdf.text.pdf.PdfLine getLastLine()" class="com.itextpdf.text.pdf.PdfDocument" />
		<method signature="void useExternalCache(com.itextpdf.text.io.TempFileCache)" class="com.itextpdf.text.pdf.PdfDocument" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.text.pdf.PdfEncodings" />
		<field name="STANDARD_ENCRYPTION_40" class="com.itextpdf.text.pdf.PdfEncryption" />
		<field name="STANDARD_ENCRYPTION_128" class="com.itextpdf.text.pdf.PdfEncryption" />
		<field name="AES_128" class="com.itextpdf.text.pdf.PdfEncryption" />
		<field name="AES_256" class="com.itextpdf.text.pdf.PdfEncryption" />
		<field name="key" class="com.itextpdf.text.pdf.PdfEncryption" />
		<field name="keySize" class="com.itextpdf.text.pdf.PdfEncryption" />
		<field name="mkey" class="com.itextpdf.text.pdf.PdfEncryption" />
		<field name="ownerKey" class="com.itextpdf.text.pdf.PdfEncryption" />
		<field name="userKey" class="com.itextpdf.text.pdf.PdfEncryption" />
		<field name="oeKey" class="com.itextpdf.text.pdf.PdfEncryption" />
		<field name="ueKey" class="com.itextpdf.text.pdf.PdfEncryption" />
		<field name="perms" class="com.itextpdf.text.pdf.PdfEncryption" />
		<field name="permissions" class="com.itextpdf.text.pdf.PdfEncryption" />
		<field name="documentID" class="com.itextpdf.text.pdf.PdfEncryption" />
		<field name="revision" class="com.itextpdf.text.pdf.PdfEncryption" />
		<field name="keyLength" class="com.itextpdf.text.pdf.PdfEncryption" />
		<field name="publicKeyHandler" class="com.itextpdf.text.pdf.PdfEncryption" />
		<field name="extra" class="com.itextpdf.text.pdf.PdfEncryption" />
		<field name="md5" class="com.itextpdf.text.pdf.PdfEncryption" />
		<field name="arcfour" class="com.itextpdf.text.pdf.PdfEncryption" />
		<field name="encryptMetadata" class="com.itextpdf.text.pdf.PdfEncryption" />
		<field name="embeddedFilesOnly" class="com.itextpdf.text.pdf.PdfEncryption" />
		<field name="cryptoMode" class="com.itextpdf.text.pdf.PdfEncryption" />
		<field name="VALIDATION_SALT_OFFSET" class="com.itextpdf.text.pdf.PdfEncryption" />
		<field name="KEY_SALT_OFFSET" class="com.itextpdf.text.pdf.PdfEncryption" />
		<field name="SALT_LENGHT" class="com.itextpdf.text.pdf.PdfEncryption" />
		<field name="OU_LENGHT" class="com.itextpdf.text.pdf.PdfEncryption" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.text.pdf.PdfEncryption" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.pdf.PdfEncryption)" class="com.itextpdf.text.pdf.PdfEncryption" />
		<method signature="void setCryptoMode(int,int)" class="com.itextpdf.text.pdf.PdfEncryption" />
		<method signature="int getCryptoMode()" class="com.itextpdf.text.pdf.PdfEncryption" />
		<method signature="long getPermissions()" class="com.itextpdf.text.pdf.PdfEncryption" />
		<method signature="byte[] padPassword(byte[])" class="com.itextpdf.text.pdf.PdfEncryption" />
		<method signature="byte[] computeOwnerKey(byte[],byte[])" class="com.itextpdf.text.pdf.PdfEncryption" />
		<method signature="void setupGlobalEncryptionKey(byte[],byte[],byte[],long)" class="com.itextpdf.text.pdf.PdfEncryption" />
		<method signature="void setupUserKey()" class="com.itextpdf.text.pdf.PdfEncryption" />
		<method signature="void setupAllKeys(byte[],byte[],int)" class="com.itextpdf.text.pdf.PdfEncryption" />
		<method signature="boolean readKey(com.itextpdf.text.pdf.PdfDictionary,byte[])" class="com.itextpdf.text.pdf.PdfEncryption" />
		<method signature="boolean compareArray(byte[],byte[],int)" class="com.itextpdf.text.pdf.PdfEncryption" />
		<method signature="void setupByUserPassword(byte[],byte[],byte[],long)" class="com.itextpdf.text.pdf.PdfEncryption" />
		<method signature="void setupByUserPad(byte[],byte[],byte[],long)" class="com.itextpdf.text.pdf.PdfEncryption" />
		<method signature="void setupByOwnerPassword(byte[],byte[],byte[],byte[],long)" class="com.itextpdf.text.pdf.PdfEncryption" />
		<method signature="void setupByOwnerPad(byte[],byte[],byte[],byte[],long)" class="com.itextpdf.text.pdf.PdfEncryption" />
		<method signature="void setKey(byte[])" class="com.itextpdf.text.pdf.PdfEncryption" />
		<method signature="void setupByEncryptionKey(byte[],int)" class="com.itextpdf.text.pdf.PdfEncryption" />
		<method signature="com.itextpdf.text.pdf.StandardDecryption getDecryptor()" class="com.itextpdf.text.pdf.PdfEncryption" />
		<method signature="byte[] decryptByteArray(byte[])" class="com.itextpdf.text.pdf.PdfEncryption" />
		<method signature="void addRecipient(java.security.cert.Certificate,int)" class="com.itextpdf.text.pdf.PdfEncryption" />
		<method signature="byte[] computeUserPassword(byte[])" class="com.itextpdf.text.pdf.PdfEncryption" />
		<class name="com.itextpdf.text.pdf.PdfEncryptor" />
		<field name="serialVersionUID" class="com.itextpdf.text.pdf.PdfException" />
		<method signature="void &lt;init&gt;(java.lang.Exception)" class="com.itextpdf.text.pdf.PdfException" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.text.pdf.PdfException" />
		<method signature="com.itextpdf.text.pdf.PdfFileSpecification url(com.itextpdf.text.pdf.PdfWriter,java.lang.String)" class="com.itextpdf.text.pdf.PdfFileSpecification" />
		<method signature="com.itextpdf.text.pdf.PdfFileSpecification fileEmbedded(com.itextpdf.text.pdf.PdfWriter,java.lang.String,java.lang.String,byte[],boolean)" class="com.itextpdf.text.pdf.PdfFileSpecification" />
		<method signature="com.itextpdf.text.pdf.PdfFileSpecification fileEmbedded(com.itextpdf.text.pdf.PdfWriter,java.lang.String,java.lang.String,byte[],boolean,java.lang.String,com.itextpdf.text.pdf.PdfDictionary)" class="com.itextpdf.text.pdf.PdfFileSpecification" />
		<method signature="void setMultiByteFileName(byte[])" class="com.itextpdf.text.pdf.PdfFileSpecification" />
		<method signature="void setVolatile(boolean)" class="com.itextpdf.text.pdf.PdfFileSpecification" />
		<method signature="void addDescription(java.lang.String,boolean)" class="com.itextpdf.text.pdf.PdfFileSpecification" />
		<method signature="void addCollectionItem(com.itextpdf.text.pdf.collection.PdfCollectionItem)" class="com.itextpdf.text.pdf.PdfFileSpecification" />
		<field name="FF_READ_ONLY" class="com.itextpdf.text.pdf.PdfFormField" />
		<field name="FF_REQUIRED" class="com.itextpdf.text.pdf.PdfFormField" />
		<field name="FF_NO_EXPORT" class="com.itextpdf.text.pdf.PdfFormField" />
		<field name="FF_NO_TOGGLE_TO_OFF" class="com.itextpdf.text.pdf.PdfFormField" />
		<field name="FF_RADIO" class="com.itextpdf.text.pdf.PdfFormField" />
		<field name="FF_PUSHBUTTON" class="com.itextpdf.text.pdf.PdfFormField" />
		<field name="FF_MULTILINE" class="com.itextpdf.text.pdf.PdfFormField" />
		<field name="FF_PASSWORD" class="com.itextpdf.text.pdf.PdfFormField" />
		<field name="FF_COMBO" class="com.itextpdf.text.pdf.PdfFormField" />
		<field name="FF_EDIT" class="com.itextpdf.text.pdf.PdfFormField" />
		<field name="FF_FILESELECT" class="com.itextpdf.text.pdf.PdfFormField" />
		<field name="FF_MULTISELECT" class="com.itextpdf.text.pdf.PdfFormField" />
		<field name="FF_DONOTSPELLCHECK" class="com.itextpdf.text.pdf.PdfFormField" />
		<field name="FF_DONOTSCROLL" class="com.itextpdf.text.pdf.PdfFormField" />
		<field name="FF_COMB" class="com.itextpdf.text.pdf.PdfFormField" />
		<field name="FF_RADIOSINUNISON" class="com.itextpdf.text.pdf.PdfFormField" />
		<field name="FF_RICHTEXT" class="com.itextpdf.text.pdf.PdfFormField" />
		<field name="Q_LEFT" class="com.itextpdf.text.pdf.PdfFormField" />
		<field name="Q_CENTER" class="com.itextpdf.text.pdf.PdfFormField" />
		<field name="Q_RIGHT" class="com.itextpdf.text.pdf.PdfFormField" />
		<field name="MK_NO_ICON" class="com.itextpdf.text.pdf.PdfFormField" />
		<field name="MK_NO_CAPTION" class="com.itextpdf.text.pdf.PdfFormField" />
		<field name="MK_CAPTION_BELOW" class="com.itextpdf.text.pdf.PdfFormField" />
		<field name="MK_CAPTION_ABOVE" class="com.itextpdf.text.pdf.PdfFormField" />
		<field name="MK_CAPTION_RIGHT" class="com.itextpdf.text.pdf.PdfFormField" />
		<field name="MK_CAPTION_LEFT" class="com.itextpdf.text.pdf.PdfFormField" />
		<field name="MK_CAPTION_OVERLAID" class="com.itextpdf.text.pdf.PdfFormField" />
		<field name="MULTILINE" class="com.itextpdf.text.pdf.PdfFormField" />
		<field name="SINGLELINE" class="com.itextpdf.text.pdf.PdfFormField" />
		<field name="PLAINTEXT" class="com.itextpdf.text.pdf.PdfFormField" />
		<field name="PASSWORD" class="com.itextpdf.text.pdf.PdfFormField" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.pdf.PdfWriter,float,float,float,float,com.itextpdf.text.pdf.PdfAction)" class="com.itextpdf.text.pdf.PdfFormField" />
		<method signature="void setWidget(com.itextpdf.text.Rectangle,com.itextpdf.text.pdf.PdfName)" class="com.itextpdf.text.pdf.PdfFormField" />
		<method signature="com.itextpdf.text.pdf.PdfFormField createEmpty(com.itextpdf.text.pdf.PdfWriter)" class="com.itextpdf.text.pdf.PdfFormField" />
		<method signature="void setButton(int)" class="com.itextpdf.text.pdf.PdfFormField" />
		<method signature="com.itextpdf.text.pdf.PdfFormField createButton(com.itextpdf.text.pdf.PdfWriter,int)" class="com.itextpdf.text.pdf.PdfFormField" />
		<method signature="com.itextpdf.text.pdf.PdfFormField createPushButton(com.itextpdf.text.pdf.PdfWriter)" class="com.itextpdf.text.pdf.PdfFormField" />
		<method signature="com.itextpdf.text.pdf.PdfFormField createCheckBox(com.itextpdf.text.pdf.PdfWriter)" class="com.itextpdf.text.pdf.PdfFormField" />
		<method signature="com.itextpdf.text.pdf.PdfFormField createRadioButton(com.itextpdf.text.pdf.PdfWriter,boolean)" class="com.itextpdf.text.pdf.PdfFormField" />
		<method signature="com.itextpdf.text.pdf.PdfFormField createTextField(com.itextpdf.text.pdf.PdfWriter,boolean,boolean,int)" class="com.itextpdf.text.pdf.PdfFormField" />
		<method signature="com.itextpdf.text.pdf.PdfFormField createChoice(com.itextpdf.text.pdf.PdfWriter,int,com.itextpdf.text.pdf.PdfArray,int)" class="com.itextpdf.text.pdf.PdfFormField" />
		<method signature="com.itextpdf.text.pdf.PdfFormField createList(com.itextpdf.text.pdf.PdfWriter,java.lang.String[],int)" class="com.itextpdf.text.pdf.PdfFormField" />
		<method signature="com.itextpdf.text.pdf.PdfFormField createList(com.itextpdf.text.pdf.PdfWriter,java.lang.String[][],int)" class="com.itextpdf.text.pdf.PdfFormField" />
		<method signature="com.itextpdf.text.pdf.PdfFormField createCombo(com.itextpdf.text.pdf.PdfWriter,boolean,java.lang.String[],int)" class="com.itextpdf.text.pdf.PdfFormField" />
		<method signature="com.itextpdf.text.pdf.PdfFormField createCombo(com.itextpdf.text.pdf.PdfWriter,boolean,java.lang.String[][],int)" class="com.itextpdf.text.pdf.PdfFormField" />
		<method signature="com.itextpdf.text.pdf.PdfArray processOptions(java.lang.String[])" class="com.itextpdf.text.pdf.PdfFormField" />
		<method signature="com.itextpdf.text.pdf.PdfArray processOptions(java.lang.String[][])" class="com.itextpdf.text.pdf.PdfFormField" />
		<method signature="com.itextpdf.text.pdf.PdfFormField createSignature(com.itextpdf.text.pdf.PdfWriter)" class="com.itextpdf.text.pdf.PdfFormField" />
		<method signature="void addKid(com.itextpdf.text.pdf.PdfFormField)" class="com.itextpdf.text.pdf.PdfFormField" />
		<method signature="int setFieldFlags(int)" class="com.itextpdf.text.pdf.PdfFormField" />
		<method signature="void setValueAsString(java.lang.String)" class="com.itextpdf.text.pdf.PdfFormField" />
		<method signature="void setValueAsName(java.lang.String)" class="com.itextpdf.text.pdf.PdfFormField" />
		<method signature="void setValue(com.itextpdf.text.pdf.PdfSignature)" class="com.itextpdf.text.pdf.PdfFormField" />
		<method signature="void setRichValue(java.lang.String)" class="com.itextpdf.text.pdf.PdfFormField" />
		<method signature="void setDefaultValueAsString(java.lang.String)" class="com.itextpdf.text.pdf.PdfFormField" />
		<method signature="void setDefaultValueAsName(java.lang.String)" class="com.itextpdf.text.pdf.PdfFormField" />
		<method signature="void setFieldName(java.lang.String)" class="com.itextpdf.text.pdf.PdfFormField" />
		<method signature="void setUserName(java.lang.String)" class="com.itextpdf.text.pdf.PdfFormField" />
		<method signature="void setMappingName(java.lang.String)" class="com.itextpdf.text.pdf.PdfFormField" />
		<method signature="void setQuadding(int)" class="com.itextpdf.text.pdf.PdfFormField" />
		<class name="com.itextpdf.text.pdf.PdfFunction" />
		<method signature="void setOverPrintStroking(boolean)" class="com.itextpdf.text.pdf.PdfGState" />
		<method signature="void setOverPrintNonStroking(boolean)" class="com.itextpdf.text.pdf.PdfGState" />
		<method signature="void setOverPrintMode(int)" class="com.itextpdf.text.pdf.PdfGState" />
		<method signature="void setAlphaIsShape(boolean)" class="com.itextpdf.text.pdf.PdfGState" />
		<method signature="void setTextKnockout(boolean)" class="com.itextpdf.text.pdf.PdfGState" />
		<method signature="void setBlendMode(com.itextpdf.text.pdf.PdfName)" class="com.itextpdf.text.pdf.PdfGState" />
		<method signature="void setRenderingIntent(com.itextpdf.text.pdf.PdfName)" class="com.itextpdf.text.pdf.PdfGState" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.pdf.ICC_Profile)" class="com.itextpdf.text.pdf.PdfICCBased" />
		<field name="TRANSFERSIZE" class="com.itextpdf.text.pdf.PdfImage" />
		<method signature="com.itextpdf.text.Image getImage()" class="com.itextpdf.text.pdf.PdfImage" />
		<method signature="void importAll(com.itextpdf.text.pdf.PdfImage)" class="com.itextpdf.text.pdf.PdfImage" />
		<field name="readerInstance" class="com.itextpdf.text.pdf.PdfImportedPage" />
		<field name="pageNumber" class="com.itextpdf.text.pdf.PdfImportedPage" />
		<field name="rotation" class="com.itextpdf.text.pdf.PdfImportedPage" />
		<field name="toCopy" class="com.itextpdf.text.pdf.PdfImportedPage" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.pdf.PdfReaderInstance,com.itextpdf.text.pdf.PdfWriter,int)" class="com.itextpdf.text.pdf.PdfImportedPage" />
		<method signature="com.itextpdf.text.pdf.PdfImportedPage getFromReader()" class="com.itextpdf.text.pdf.PdfImportedPage" />
		<method signature="int getPageNumber()" class="com.itextpdf.text.pdf.PdfImportedPage" />
		<method signature="int getRotation()" class="com.itextpdf.text.pdf.PdfImportedPage" />
		<method signature="void addImage(com.itextpdf.text.Image,float,float,float,float,float,float)" class="com.itextpdf.text.pdf.PdfImportedPage" />
		<method signature="void addTemplate(com.itextpdf.text.pdf.PdfTemplate,float,float,float,float,float,float)" class="com.itextpdf.text.pdf.PdfImportedPage" />
		<method signature="com.itextpdf.text.pdf.PdfContentByte getDuplicate()" class="com.itextpdf.text.pdf.PdfImportedPage" />
		<method signature="com.itextpdf.text.pdf.PdfStream getFormXObject(int)" class="com.itextpdf.text.pdf.PdfImportedPage" />
		<method signature="void setColorFill(com.itextpdf.text.pdf.PdfSpotColor,float)" class="com.itextpdf.text.pdf.PdfImportedPage" />
		<method signature="void setColorStroke(com.itextpdf.text.pdf.PdfSpotColor,float)" class="com.itextpdf.text.pdf.PdfImportedPage" />
		<method signature="com.itextpdf.text.pdf.PdfObject getResources()" class="com.itextpdf.text.pdf.PdfImportedPage" />
		<method signature="void setFontAndSize(com.itextpdf.text.pdf.BaseFont,float)" class="com.itextpdf.text.pdf.PdfImportedPage" />
		<method signature="void setGroup(com.itextpdf.text.pdf.PdfTransparencyGroup)" class="com.itextpdf.text.pdf.PdfImportedPage" />
		<method signature="void throwError()" class="com.itextpdf.text.pdf.PdfImportedPage" />
		<method signature="boolean isToCopy()" class="com.itextpdf.text.pdf.PdfImportedPage" />
		<method signature="void setCopied()" class="com.itextpdf.text.pdf.PdfImportedPage" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.pdf.PdfIndirectReference,com.itextpdf.text.pdf.PdfObject,com.itextpdf.text.pdf.PdfWriter)" class="com.itextpdf.text.pdf.PdfIndirectObject" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.text.pdf.PdfIndirectReference" />
		<field name="serialVersionUID" class="com.itextpdf.text.pdf.PdfIsoConformanceException" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.text.pdf.PdfIsoConformanceException" />
		<field name="whitePoint" class="com.itextpdf.text.pdf.PdfLabColor" />
		<field name="blackPoint" class="com.itextpdf.text.pdf.PdfLabColor" />
		<field name="range" class="com.itextpdf.text.pdf.PdfLabColor" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.text.pdf.PdfLabColor" />
		<method signature="void &lt;init&gt;(float[])" class="com.itextpdf.text.pdf.PdfLabColor" />
		<method signature="void &lt;init&gt;(float[],float[])" class="com.itextpdf.text.pdf.PdfLabColor" />
		<method signature="void &lt;init&gt;(float[],float[],float[])" class="com.itextpdf.text.pdf.PdfLabColor" />
		<method signature="com.itextpdf.text.pdf.CMYKColor lab2Cmyk(float,float,float)" class="com.itextpdf.text.pdf.PdfLabColor" />
		<method signature="double[] lab2RgbLinear(float,float,float)" class="com.itextpdf.text.pdf.PdfLabColor" />
		<method signature="com.itextpdf.text.pdf.LabColor rgb2lab(com.itextpdf.text.BaseColor)" class="com.itextpdf.text.pdf.PdfLabColor" />
		<method signature="double fXyz(double)" class="com.itextpdf.text.pdf.PdfLabColor" />
		<method signature="boolean equals(java.lang.Object)" class="com.itextpdf.text.pdf.PdfLabColor" />
		<method signature="int hashCode()" class="com.itextpdf.text.pdf.PdfLabColor" />
		<field name="ref" class="com.itextpdf.text.pdf.PdfLayer" />
		<field name="children" class="com.itextpdf.text.pdf.PdfLayer" />
		<field name="parent" class="com.itextpdf.text.pdf.PdfLayer" />
		<field name="title" class="com.itextpdf.text.pdf.PdfLayer" />
		<field name="on" class="com.itextpdf.text.pdf.PdfLayer" />
		<field name="onPanel" class="com.itextpdf.text.pdf.PdfLayer" />
		<method signature="void &lt;init&gt;(java.lang.String)" class="com.itextpdf.text.pdf.PdfLayer" />
		<method signature="com.itextpdf.text.pdf.PdfLayer createTitle(java.lang.String,com.itextpdf.text.pdf.PdfWriter)" class="com.itextpdf.text.pdf.PdfLayer" />
		<method signature="void &lt;init&gt;(java.lang.String,com.itextpdf.text.pdf.PdfWriter)" class="com.itextpdf.text.pdf.PdfLayer" />
		<method signature="void addChild(com.itextpdf.text.pdf.PdfLayer)" class="com.itextpdf.text.pdf.PdfLayer" />
		<method signature="void setRef(com.itextpdf.text.pdf.PdfIndirectReference)" class="com.itextpdf.text.pdf.PdfLayer" />
		<method signature="void setName(java.lang.String)" class="com.itextpdf.text.pdf.PdfLayer" />
		<method signature="void setOn(boolean)" class="com.itextpdf.text.pdf.PdfLayer" />
		<method signature="com.itextpdf.text.pdf.PdfDictionary getUsage()" class="com.itextpdf.text.pdf.PdfLayer" />
		<method signature="void setCreatorInfo(java.lang.String,java.lang.String)" class="com.itextpdf.text.pdf.PdfLayer" />
		<method signature="void setLanguage(java.lang.String,boolean)" class="com.itextpdf.text.pdf.PdfLayer" />
		<method signature="void setExport(boolean)" class="com.itextpdf.text.pdf.PdfLayer" />
		<method signature="void setZoom(float,float)" class="com.itextpdf.text.pdf.PdfLayer" />
		<method signature="void setPrint(java.lang.String,boolean)" class="com.itextpdf.text.pdf.PdfLayer" />
		<method signature="void setView(boolean)" class="com.itextpdf.text.pdf.PdfLayer" />
		<method signature="void setPageElement(java.lang.String)" class="com.itextpdf.text.pdf.PdfLayer" />
		<method signature="void setUser(java.lang.String,java.lang.String[])" class="com.itextpdf.text.pdf.PdfLayer" />
		<method signature="void setOnPanel(boolean)" class="com.itextpdf.text.pdf.PdfLayer" />
		<field name="ref" class="com.itextpdf.text.pdf.PdfLayerMembership" />
		<field name="members" class="com.itextpdf.text.pdf.PdfLayerMembership" />
		<field name="layers" class="com.itextpdf.text.pdf.PdfLayerMembership" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.pdf.PdfWriter)" class="com.itextpdf.text.pdf.PdfLayerMembership" />
		<method signature="void addMember(com.itextpdf.text.pdf.PdfLayer)" class="com.itextpdf.text.pdf.PdfLayerMembership" />
		<method signature="java.util.Collection getLayers()" class="com.itextpdf.text.pdf.PdfLayerMembership" />
		<method signature="void setVisibilityPolicy(com.itextpdf.text.pdf.PdfName)" class="com.itextpdf.text.pdf.PdfLayerMembership" />
		<method signature="void setVisibilityExpression(com.itextpdf.text.pdf.PdfVisibilityExpression)" class="com.itextpdf.text.pdf.PdfLayerMembership" />
		<method signature="float getWidthCorrected(float,float)" class="com.itextpdf.text.pdf.PdfLine" />
		<class name="com.itextpdf.text.pdf.PdfLister" />
		<method signature="void &lt;init&gt;(int)" class="com.itextpdf.text.pdf.PdfLiteral" />
		<method signature="void &lt;init&gt;(int,byte[])" class="com.itextpdf.text.pdf.PdfLiteral" />
		<method signature="long getPosition()" class="com.itextpdf.text.pdf.PdfLiteral" />
		<method signature="int getPosLength()" class="com.itextpdf.text.pdf.PdfLiteral" />
		<field name="leafSize" class="com.itextpdf.text.pdf.PdfNameTree" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.text.pdf.PdfNameTree" />
		<method signature="com.itextpdf.text.pdf.PdfString iterateItems(com.itextpdf.text.pdf.PdfDictionary,java.util.HashMap,com.itextpdf.text.pdf.PdfString)" class="com.itextpdf.text.pdf.PdfNameTree" />
		<method signature="java.util.HashMap readTree(com.itextpdf.text.pdf.PdfDictionary)" class="com.itextpdf.text.pdf.PdfNameTree" />
		<field name="CONTENT" class="com.itextpdf.text.pdf.PdfNull" />
		<method signature="long longValue()" class="com.itextpdf.text.pdf.PdfNumber" />
		<method signature="void increment()" class="com.itextpdf.text.pdf.PdfNumber" />
		<field name="leafSize" class="com.itextpdf.text.pdf.PdfNumberTree" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.text.pdf.PdfNumberTree" />
		<method signature="void iterateItems(com.itextpdf.text.pdf.PdfDictionary,java.util.HashMap)" class="com.itextpdf.text.pdf.PdfNumberTree" />
		<method signature="java.util.HashMap readTree(com.itextpdf.text.pdf.PdfDictionary)" class="com.itextpdf.text.pdf.PdfNumberTree" />
		<field name="BOOLEAN" class="com.itextpdf.text.pdf.PdfObject" />
		<field name="NUMBER" class="com.itextpdf.text.pdf.PdfObject" />
		<field name="STRING" class="com.itextpdf.text.pdf.PdfObject" />
		<field name="NAME" class="com.itextpdf.text.pdf.PdfObject" />
		<field name="ARRAY" class="com.itextpdf.text.pdf.PdfObject" />
		<field name="DICTIONARY" class="com.itextpdf.text.pdf.PdfObject" />
		<field name="STREAM" class="com.itextpdf.text.pdf.PdfObject" />
		<field name="NULL" class="com.itextpdf.text.pdf.PdfObject" />
		<field name="INDIRECT" class="com.itextpdf.text.pdf.PdfObject" />
		<field name="NOTHING" class="com.itextpdf.text.pdf.PdfObject" />
		<field name="TEXT_PDFDOCENCODING" class="com.itextpdf.text.pdf.PdfObject" />
		<field name="TEXT_UNICODE" class="com.itextpdf.text.pdf.PdfObject" />
		<method signature="int length()" class="com.itextpdf.text.pdf.PdfObject" />
		<method signature="boolean isBoolean()" class="com.itextpdf.text.pdf.PdfObject" />
		<method signature="boolean isStream()" class="com.itextpdf.text.pdf.PdfObject" />
		<field name="tag" class="com.itextpdf.text.pdf.PdfOutline" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.pdf.PdfOutline,com.itextpdf.text.pdf.PdfAction,java.lang.String)" class="com.itextpdf.text.pdf.PdfOutline" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.pdf.PdfOutline,com.itextpdf.text.pdf.PdfAction,java.lang.String,boolean)" class="com.itextpdf.text.pdf.PdfOutline" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.pdf.PdfOutline,com.itextpdf.text.pdf.PdfDestination,java.lang.String)" class="com.itextpdf.text.pdf.PdfOutline" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.pdf.PdfOutline,com.itextpdf.text.pdf.PdfDestination,java.lang.String,boolean)" class="com.itextpdf.text.pdf.PdfOutline" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.pdf.PdfOutline,com.itextpdf.text.pdf.PdfAction,com.itextpdf.text.pdf.PdfString)" class="com.itextpdf.text.pdf.PdfOutline" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.pdf.PdfOutline,com.itextpdf.text.pdf.PdfAction,com.itextpdf.text.pdf.PdfString,boolean)" class="com.itextpdf.text.pdf.PdfOutline" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.pdf.PdfOutline,com.itextpdf.text.pdf.PdfDestination,com.itextpdf.text.pdf.PdfString)" class="com.itextpdf.text.pdf.PdfOutline" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.pdf.PdfOutline,com.itextpdf.text.pdf.PdfDestination,com.itextpdf.text.pdf.PdfString,boolean)" class="com.itextpdf.text.pdf.PdfOutline" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.pdf.PdfOutline,com.itextpdf.text.pdf.PdfAction,com.itextpdf.text.Paragraph)" class="com.itextpdf.text.pdf.PdfOutline" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.pdf.PdfOutline,com.itextpdf.text.pdf.PdfAction,com.itextpdf.text.Paragraph,boolean)" class="com.itextpdf.text.pdf.PdfOutline" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.pdf.PdfOutline,com.itextpdf.text.pdf.PdfDestination,com.itextpdf.text.Paragraph)" class="com.itextpdf.text.pdf.PdfOutline" />
		<method signature="com.itextpdf.text.pdf.PdfDestination getPdfDestination()" class="com.itextpdf.text.pdf.PdfOutline" />
		<method signature="void setKids(java.util.ArrayList)" class="com.itextpdf.text.pdf.PdfOutline" />
		<method signature="java.lang.String getTag()" class="com.itextpdf.text.pdf.PdfOutline" />
		<method signature="void setTag(java.lang.String)" class="com.itextpdf.text.pdf.PdfOutline" />
		<method signature="java.lang.String getTitle()" class="com.itextpdf.text.pdf.PdfOutline" />
		<method signature="void setTitle(java.lang.String)" class="com.itextpdf.text.pdf.PdfOutline" />
		<method signature="void setOpen(boolean)" class="com.itextpdf.text.pdf.PdfOutline" />
		<method signature="com.itextpdf.text.BaseColor getColor()" class="com.itextpdf.text.pdf.PdfOutline" />
		<method signature="void setColor(com.itextpdf.text.BaseColor)" class="com.itextpdf.text.pdf.PdfOutline" />
		<method signature="int getStyle()" class="com.itextpdf.text.pdf.PdfOutline" />
		<method signature="void setStyle(int)" class="com.itextpdf.text.pdf.PdfOutline" />
		<field name="DEFAULT_BORDER_WIDTH" class="com.itextpdf.text.pdf.PdfPCell" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.Image)" class="com.itextpdf.text.pdf.PdfPCell" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.pdf.PdfPTable)" class="com.itextpdf.text.pdf.PdfPCell" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.pdf.PdfPTable,com.itextpdf.text.pdf.PdfPCell)" class="com.itextpdf.text.pdf.PdfPCell" />
		<method signature="com.itextpdf.text.Phrase getPhrase()" class="com.itextpdf.text.pdf.PdfPCell" />
		<method signature="void setHorizontalAlignment(int)" class="com.itextpdf.text.pdf.PdfPCell" />
		<method signature="void setVerticalAlignment(int)" class="com.itextpdf.text.pdf.PdfPCell" />
		<method signature="float getPaddingLeft()" class="com.itextpdf.text.pdf.PdfPCell" />
		<method signature="void setPaddingLeft(float)" class="com.itextpdf.text.pdf.PdfPCell" />
		<method signature="float getPaddingRight()" class="com.itextpdf.text.pdf.PdfPCell" />
		<method signature="void setPaddingRight(float)" class="com.itextpdf.text.pdf.PdfPCell" />
		<method signature="float getPaddingTop()" class="com.itextpdf.text.pdf.PdfPCell" />
		<method signature="void setPaddingTop(float)" class="com.itextpdf.text.pdf.PdfPCell" />
		<method signature="float getPaddingBottom()" class="com.itextpdf.text.pdf.PdfPCell" />
		<method signature="void setPaddingBottom(float)" class="com.itextpdf.text.pdf.PdfPCell" />
		<method signature="void setUseBorderPadding(boolean)" class="com.itextpdf.text.pdf.PdfPCell" />
		<method signature="void setLeading(float,float)" class="com.itextpdf.text.pdf.PdfPCell" />
		<method signature="float getLeading()" class="com.itextpdf.text.pdf.PdfPCell" />
		<method signature="float getMultipliedLeading()" class="com.itextpdf.text.pdf.PdfPCell" />
		<method signature="void setIndent(float)" class="com.itextpdf.text.pdf.PdfPCell" />
		<method signature="float getIndent()" class="com.itextpdf.text.pdf.PdfPCell" />
		<method signature="float getExtraParagraphSpace()" class="com.itextpdf.text.pdf.PdfPCell" />
		<method signature="void setExtraParagraphSpace(float)" class="com.itextpdf.text.pdf.PdfPCell" />
		<method signature="void setNoWrap(boolean)" class="com.itextpdf.text.pdf.PdfPCell" />
		<method signature="com.itextpdf.text.pdf.PdfPTable getTable()" class="com.itextpdf.text.pdf.PdfPCell" />
		<method signature="void setTable(com.itextpdf.text.pdf.PdfPTable)" class="com.itextpdf.text.pdf.PdfPCell" />
		<method signature="void setFollowingIndent(float)" class="com.itextpdf.text.pdf.PdfPCell" />
		<method signature="float getFollowingIndent()" class="com.itextpdf.text.pdf.PdfPCell" />
		<method signature="void setRightIndent(float)" class="com.itextpdf.text.pdf.PdfPCell" />
		<method signature="float getRightIndent()" class="com.itextpdf.text.pdf.PdfPCell" />
		<method signature="float getSpaceCharRatio()" class="com.itextpdf.text.pdf.PdfPCell" />
		<method signature="void setSpaceCharRatio(float)" class="com.itextpdf.text.pdf.PdfPCell" />
		<method signature="void setImage(com.itextpdf.text.Image)" class="com.itextpdf.text.pdf.PdfPCell" />
		<method signature="void setCellEvent(com.itextpdf.text.pdf.PdfPCellEvent)" class="com.itextpdf.text.pdf.PdfPCell" />
		<method signature="int getArabicOptions()" class="com.itextpdf.text.pdf.PdfPCell" />
		<method signature="void setArabicOptions(int)" class="com.itextpdf.text.pdf.PdfPCell" />
		<method signature="boolean isUseAscender()" class="com.itextpdf.text.pdf.PdfPCell" />
		<method signature="void setUseAscender(boolean)" class="com.itextpdf.text.pdf.PdfPCell" />
		<method signature="void setUseDescender(boolean)" class="com.itextpdf.text.pdf.PdfPCell" />
		<method signature="java.util.List getCompositeElements()" class="com.itextpdf.text.pdf.PdfPCell" />
		<method signature="void addHeader(com.itextpdf.text.pdf.PdfPHeaderCell)" class="com.itextpdf.text.pdf.PdfPCell" />
		<field name="NONE" class="com.itextpdf.text.pdf.PdfPHeaderCell" />
		<field name="ROW" class="com.itextpdf.text.pdf.PdfPHeaderCell" />
		<field name="COLUMN" class="com.itextpdf.text.pdf.PdfPHeaderCell" />
		<field name="BOTH" class="com.itextpdf.text.pdf.PdfPHeaderCell" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.text.pdf.PdfPHeaderCell" />
		<method signature="void setName(java.lang.String)" class="com.itextpdf.text.pdf.PdfPHeaderCell" />
		<method signature="void setScope(int)" class="com.itextpdf.text.pdf.PdfPHeaderCell" />
		<field name="BOTTOM_LIMIT" class="com.itextpdf.text.pdf.PdfPRow" />
		<field name="RIGHT_LIMIT" class="com.itextpdf.text.pdf.PdfPRow" />
		<method signature="void setMayNotBreak(boolean)" class="com.itextpdf.text.pdf.PdfPRow" />
		<method signature="boolean isCalculated()" class="com.itextpdf.text.pdf.PdfPRow" />
		<class name="com.itextpdf.text.pdf.PdfPSXObject" />
		<field name="BASECANVAS" class="com.itextpdf.text.pdf.PdfPTable" />
		<field name="BACKGROUNDCANVAS" class="com.itextpdf.text.pdf.PdfPTable" />
		<field name="LINECANVAS" class="com.itextpdf.text.pdf.PdfPTable" />
		<field name="TEXTCANVAS" class="com.itextpdf.text.pdf.PdfPTable" />
		<method signature="void &lt;init&gt;(float[])" class="com.itextpdf.text.pdf.PdfPTable" />
		<method signature="void setWidths(float[])" class="com.itextpdf.text.pdf.PdfPTable" />
		<method signature="void setWidths(int[])" class="com.itextpdf.text.pdf.PdfPTable" />
		<method signature="void setTotalWidth(float[])" class="com.itextpdf.text.pdf.PdfPTable" />
		<method signature="void setWidthPercentage(float[],com.itextpdf.text.Rectangle)" class="com.itextpdf.text.pdf.PdfPTable" />
		<method signature="void resetColumnCount(int)" class="com.itextpdf.text.pdf.PdfPTable" />
		<method signature="com.itextpdf.text.pdf.PdfPCell getDefaultCell()" class="com.itextpdf.text.pdf.PdfPTable" />
		<method signature="void addCell(java.lang.String)" class="com.itextpdf.text.pdf.PdfPTable" />
		<method signature="void addCell(com.itextpdf.text.pdf.PdfPTable)" class="com.itextpdf.text.pdf.PdfPTable" />
		<method signature="void addCell(com.itextpdf.text.Image)" class="com.itextpdf.text.pdf.PdfPTable" />
		<method signature="void addCell(com.itextpdf.text.Phrase)" class="com.itextpdf.text.pdf.PdfPTable" />
		<method signature="float writeSelectedRows(int,int,float,float,com.itextpdf.text.pdf.PdfContentByte[])" class="com.itextpdf.text.pdf.PdfPTable" />
		<method signature="float writeSelectedRows(int,int,int,int,float,float,com.itextpdf.text.pdf.PdfContentByte[])" class="com.itextpdf.text.pdf.PdfPTable" />
		<method signature="float writeSelectedRows(int,int,float,float,com.itextpdf.text.pdf.PdfContentByte)" class="com.itextpdf.text.pdf.PdfPTable" />
		<method signature="float writeSelectedRows(int,int,int,int,float,float,com.itextpdf.text.pdf.PdfContentByte)" class="com.itextpdf.text.pdf.PdfPTable" />
		<method signature="float getRowspanHeight(int,int)" class="com.itextpdf.text.pdf.PdfPTable" />
		<method signature="boolean deleteRow(int)" class="com.itextpdf.text.pdf.PdfPTable" />
		<method signature="boolean deleteLastRow()" class="com.itextpdf.text.pdf.PdfPTable" />
		<method signature="boolean isNestable()" class="com.itextpdf.text.pdf.PdfPTable" />
		<method signature="java.lang.String getSummary()" class="com.itextpdf.text.pdf.PdfPTable" />
		<method signature="void setSummary(java.lang.String)" class="com.itextpdf.text.pdf.PdfPTable" />
		<method signature="int getLastCompletedRowIndex()" class="com.itextpdf.text.pdf.PdfPTable" />
		<method signature="void setBreakPoints(int[])" class="com.itextpdf.text.pdf.PdfPTable" />
		<method signature="void keepRowsTogether(int[])" class="com.itextpdf.text.pdf.PdfPTable" />
		<method signature="void keepRowsTogether(int,int)" class="com.itextpdf.text.pdf.PdfPTable" />
		<method signature="void keepRowsTogether(int)" class="com.itextpdf.text.pdf.PdfPTable" />
		<method signature="void setTableEvent(com.itextpdf.text.pdf.PdfPTableEvent)" class="com.itextpdf.text.pdf.PdfPTable" />
		<method signature="float[] getAbsoluteWidths()" class="com.itextpdf.text.pdf.PdfPTable" />
		<method signature="void setSkipLastFooter(boolean)" class="com.itextpdf.text.pdf.PdfPTable" />
		<method signature="void setRunDirection(int)" class="com.itextpdf.text.pdf.PdfPTable" />
		<method signature="void setSplitRows(boolean)" class="com.itextpdf.text.pdf.PdfPTable" />
		<method signature="void setPaddingTop(float)" class="com.itextpdf.text.pdf.PdfPTable" />
		<method signature="void setExtendLastRow(boolean)" class="com.itextpdf.text.pdf.PdfPTable" />
		<method signature="void setExtendLastRow(boolean,boolean)" class="com.itextpdf.text.pdf.PdfPTable" />
		<method signature="void setFooterRows(int)" class="com.itextpdf.text.pdf.PdfPTable" />
		<method signature="void completeRow()" class="com.itextpdf.text.pdf.PdfPTable" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.pdf.PdfRectangle,java.util.HashMap,com.itextpdf.text.pdf.PdfDictionary)" class="com.itextpdf.text.pdf.PdfPage" />
		<method signature="boolean isParent()" class="com.itextpdf.text.pdf.PdfPage" />
		<method signature="com.itextpdf.text.pdf.PdfRectangle rotateMediaBox()" class="com.itextpdf.text.pdf.PdfPage" />
		<method signature="com.itextpdf.text.pdf.PdfRectangle getMediaBox()" class="com.itextpdf.text.pdf.PdfPage" />
		<class name="com.itextpdf.text.pdf.PdfPageElement" />
		<class name="com.itextpdf.text.pdf.PdfPageEventHelper" />
		<class name="com.itextpdf.text.pdf.PdfPageLabels$PdfPageLabelFormat" />
		<field name="DECIMAL_ARABIC_NUMERALS" class="com.itextpdf.text.pdf.PdfPageLabels" />
		<field name="UPPERCASE_ROMAN_NUMERALS" class="com.itextpdf.text.pdf.PdfPageLabels" />
		<field name="LOWERCASE_ROMAN_NUMERALS" class="com.itextpdf.text.pdf.PdfPageLabels" />
		<field name="UPPERCASE_LETTERS" class="com.itextpdf.text.pdf.PdfPageLabels" />
		<field name="LOWERCASE_LETTERS" class="com.itextpdf.text.pdf.PdfPageLabels" />
		<field name="EMPTY" class="com.itextpdf.text.pdf.PdfPageLabels" />
		<field name="map" class="com.itextpdf.text.pdf.PdfPageLabels" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.text.pdf.PdfPageLabels" />
		<method signature="void addPageLabel(int,int,java.lang.String,int)" class="com.itextpdf.text.pdf.PdfPageLabels" />
		<method signature="void addPageLabel(int,int,java.lang.String,int,boolean)" class="com.itextpdf.text.pdf.PdfPageLabels" />
		<method signature="void addPageLabel(int,int,java.lang.String)" class="com.itextpdf.text.pdf.PdfPageLabels" />
		<method signature="void addPageLabel(int,int)" class="com.itextpdf.text.pdf.PdfPageLabels" />
		<method signature="void addPageLabel(com.itextpdf.text.pdf.PdfPageLabels$PdfPageLabelFormat)" class="com.itextpdf.text.pdf.PdfPageLabels" />
		<method signature="void removePageLabel(int)" class="com.itextpdf.text.pdf.PdfPageLabels" />
		<method signature="java.lang.String[] getPageLabels(com.itextpdf.text.pdf.PdfReader)" class="com.itextpdf.text.pdf.PdfPageLabels" />
		<method signature="com.itextpdf.text.pdf.PdfPageLabels$PdfPageLabelFormat[] getPageLabelFormats(com.itextpdf.text.pdf.PdfReader)" class="com.itextpdf.text.pdf.PdfPageLabels" />
		<method signature="com.itextpdf.text.pdf.PdfIndirectReference addPageRef(com.itextpdf.text.pdf.PdfIndirectReference)" class="com.itextpdf.text.pdf.PdfPages" />
		<method signature="com.itextpdf.text.pdf.PdfIndirectReference getTopParent()" class="com.itextpdf.text.pdf.PdfPages" />
		<method signature="void setLinearMode(com.itextpdf.text.pdf.PdfIndirectReference)" class="com.itextpdf.text.pdf.PdfPages" />
		<method signature="void addPage(com.itextpdf.text.pdf.PdfIndirectReference)" class="com.itextpdf.text.pdf.PdfPages" />
		<method signature="int reorderPages(int[])" class="com.itextpdf.text.pdf.PdfPages" />
		<class name="com.itextpdf.text.pdf.PdfPattern" />
		<field name="xstep" class="com.itextpdf.text.pdf.PdfPatternPainter" />
		<field name="ystep" class="com.itextpdf.text.pdf.PdfPatternPainter" />
		<field name="stencil" class="com.itextpdf.text.pdf.PdfPatternPainter" />
		<field name="defaultColor" class="com.itextpdf.text.pdf.PdfPatternPainter" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.text.pdf.PdfPatternPainter" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.pdf.PdfWriter)" class="com.itextpdf.text.pdf.PdfPatternPainter" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.BaseColor)" class="com.itextpdf.text.pdf.PdfPatternPainter" />
		<method signature="void setXStep(float)" class="com.itextpdf.text.pdf.PdfPatternPainter" />
		<method signature="void setYStep(float)" class="com.itextpdf.text.pdf.PdfPatternPainter" />
		<method signature="float getXStep()" class="com.itextpdf.text.pdf.PdfPatternPainter" />
		<method signature="float getYStep()" class="com.itextpdf.text.pdf.PdfPatternPainter" />
		<method signature="void setPatternMatrix(float,float,float,float,float,float)" class="com.itextpdf.text.pdf.PdfPatternPainter" />
		<method signature="com.itextpdf.text.pdf.PdfPattern getPattern()" class="com.itextpdf.text.pdf.PdfPatternPainter" />
		<method signature="com.itextpdf.text.pdf.PdfContentByte getDuplicate()" class="com.itextpdf.text.pdf.PdfPatternPainter" />
		<method signature="void setGrayFill(float)" class="com.itextpdf.text.pdf.PdfPatternPainter" />
		<method signature="void resetGrayFill()" class="com.itextpdf.text.pdf.PdfPatternPainter" />
		<method signature="void setGrayStroke(float)" class="com.itextpdf.text.pdf.PdfPatternPainter" />
		<method signature="void resetGrayStroke()" class="com.itextpdf.text.pdf.PdfPatternPainter" />
		<method signature="void setRGBColorFillF(float,float,float)" class="com.itextpdf.text.pdf.PdfPatternPainter" />
		<method signature="void resetRGBColorFill()" class="com.itextpdf.text.pdf.PdfPatternPainter" />
		<method signature="void setRGBColorStrokeF(float,float,float)" class="com.itextpdf.text.pdf.PdfPatternPainter" />
		<method signature="void resetRGBColorStroke()" class="com.itextpdf.text.pdf.PdfPatternPainter" />
		<method signature="void setCMYKColorFillF(float,float,float,float)" class="com.itextpdf.text.pdf.PdfPatternPainter" />
		<method signature="void resetCMYKColorFill()" class="com.itextpdf.text.pdf.PdfPatternPainter" />
		<method signature="void setCMYKColorStrokeF(float,float,float,float)" class="com.itextpdf.text.pdf.PdfPatternPainter" />
		<method signature="void resetCMYKColorStroke()" class="com.itextpdf.text.pdf.PdfPatternPainter" />
		<method signature="void addImage(com.itextpdf.text.Image,float,float,float,float,float,float)" class="com.itextpdf.text.pdf.PdfPatternPainter" />
		<method signature="void setCMYKColorFill(int,int,int,int)" class="com.itextpdf.text.pdf.PdfPatternPainter" />
		<method signature="void setCMYKColorStroke(int,int,int,int)" class="com.itextpdf.text.pdf.PdfPatternPainter" />
		<method signature="void setRGBColorFill(int,int,int)" class="com.itextpdf.text.pdf.PdfPatternPainter" />
		<method signature="void setRGBColorStroke(int,int,int)" class="com.itextpdf.text.pdf.PdfPatternPainter" />
		<method signature="void setColorStroke(com.itextpdf.text.BaseColor)" class="com.itextpdf.text.pdf.PdfPatternPainter" />
		<method signature="void setColorFill(com.itextpdf.text.BaseColor)" class="com.itextpdf.text.pdf.PdfPatternPainter" />
		<method signature="void setColorFill(com.itextpdf.text.pdf.PdfSpotColor,float)" class="com.itextpdf.text.pdf.PdfPatternPainter" />
		<method signature="void setColorStroke(com.itextpdf.text.pdf.PdfSpotColor,float)" class="com.itextpdf.text.pdf.PdfPatternPainter" />
		<method signature="void setPatternFill(com.itextpdf.text.pdf.PdfPatternPainter)" class="com.itextpdf.text.pdf.PdfPatternPainter" />
		<method signature="void setPatternFill(com.itextpdf.text.pdf.PdfPatternPainter,com.itextpdf.text.BaseColor,float)" class="com.itextpdf.text.pdf.PdfPatternPainter" />
		<method signature="void setPatternStroke(com.itextpdf.text.pdf.PdfPatternPainter,com.itextpdf.text.BaseColor,float)" class="com.itextpdf.text.pdf.PdfPatternPainter" />
		<method signature="void setPatternStroke(com.itextpdf.text.pdf.PdfPatternPainter)" class="com.itextpdf.text.pdf.PdfPatternPainter" />
		<method signature="void checkNoColor()" class="com.itextpdf.text.pdf.PdfPatternPainter" />
		<class name="com.itextpdf.text.pdf.PdfPublicKeyRecipient" />
		<class name="com.itextpdf.text.pdf.PdfPublicKeySecurityHandler" />
		<class name="com.itextpdf.text.pdf.PdfReader$1" />
		<class name="com.itextpdf.text.pdf.PdfReader$PageRefs" />
		<field name="tokens" class="com.itextpdf.text.pdf.PdfReader" />
		<field name="xref" class="com.itextpdf.text.pdf.PdfReader" />
		<field name="objStmMark" class="com.itextpdf.text.pdf.PdfReader" />
		<field name="objStmToOffset" class="com.itextpdf.text.pdf.PdfReader" />
		<field name="newXrefType" class="com.itextpdf.text.pdf.PdfReader" />
		<field name="xrefObj" class="com.itextpdf.text.pdf.PdfReader" />
		<field name="rootPages" class="com.itextpdf.text.pdf.PdfReader" />
		<field name="trailer" class="com.itextpdf.text.pdf.PdfReader" />
		<field name="catalog" class="com.itextpdf.text.pdf.PdfReader" />
		<field name="pageRefs" class="com.itextpdf.text.pdf.PdfReader" />
		<field name="acroForm" class="com.itextpdf.text.pdf.PdfReader" />
		<field name="acroFormParsed" class="com.itextpdf.text.pdf.PdfReader" />
		<field name="encrypted" class="com.itextpdf.text.pdf.PdfReader" />
		<field name="rebuilt" class="com.itextpdf.text.pdf.PdfReader" />
		<field name="freeXref" class="com.itextpdf.text.pdf.PdfReader" />
		<field name="tampered" class="com.itextpdf.text.pdf.PdfReader" />
		<field name="lastXref" class="com.itextpdf.text.pdf.PdfReader" />
		<field name="eofPos" class="com.itextpdf.text.pdf.PdfReader" />
		<field name="pdfVersion" class="com.itextpdf.text.pdf.PdfReader" />
		<field name="decrypt" class="com.itextpdf.text.pdf.PdfReader" />
		<field name="password" class="com.itextpdf.text.pdf.PdfReader" />
		<field name="certificateKey" class="com.itextpdf.text.pdf.PdfReader" />
		<field name="certificate" class="com.itextpdf.text.pdf.PdfReader" />
		<field name="certificateKeyProvider" class="com.itextpdf.text.pdf.PdfReader" />
		<field name="externalDecryptionProcess" class="com.itextpdf.text.pdf.PdfReader" />
		<field name="ownerPasswordUsed" class="com.itextpdf.text.pdf.PdfReader" />
		<field name="strings" class="com.itextpdf.text.pdf.PdfReader" />
		<field name="sharedStreams" class="com.itextpdf.text.pdf.PdfReader" />
		<field name="consolidateNamedDestinations" class="com.itextpdf.text.pdf.PdfReader" />
		<field name="remoteToLocalNamedDestinations" class="com.itextpdf.text.pdf.PdfReader" />
		<field name="rValue" class="com.itextpdf.text.pdf.PdfReader" />
		<field name="pValue" class="com.itextpdf.text.pdf.PdfReader" />
		<field name="objNum" class="com.itextpdf.text.pdf.PdfReader" />
		<field name="objGen" class="com.itextpdf.text.pdf.PdfReader" />
		<field name="fileLength" class="com.itextpdf.text.pdf.PdfReader" />
		<field name="hybridXref" class="com.itextpdf.text.pdf.PdfReader" />
		<field name="lastXrefPartial" class="com.itextpdf.text.pdf.PdfReader" />
		<field name="partial" class="com.itextpdf.text.pdf.PdfReader" />
		<field name="cryptoRef" class="com.itextpdf.text.pdf.PdfReader" />
		<field name="viewerPreferences" class="com.itextpdf.text.pdf.PdfReader" />
		<field name="encryptionError" class="com.itextpdf.text.pdf.PdfReader" />
		<field name="readDepth" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="com.itextpdf.text.log.Counter getCounter()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.io.RandomAccessSource,boolean,byte[],java.security.cert.Certificate,java.security.Key,java.lang.String,com.itextpdf.text.pdf.security.ExternalDecryptionProcess,boolean)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void &lt;init&gt;(java.lang.String)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void &lt;init&gt;(java.lang.String,byte[])" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void &lt;init&gt;(java.lang.String,byte[],boolean)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void &lt;init&gt;(byte[])" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void &lt;init&gt;(byte[],byte[])" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void &lt;init&gt;(java.lang.String,java.security.cert.Certificate,java.security.Key,java.lang.String)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void &lt;init&gt;(java.lang.String,java.security.cert.Certificate,com.itextpdf.text.pdf.security.ExternalDecryptionProcess)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void &lt;init&gt;(byte[],java.security.cert.Certificate,com.itextpdf.text.pdf.security.ExternalDecryptionProcess)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void &lt;init&gt;(java.io.InputStream,java.security.cert.Certificate,com.itextpdf.text.pdf.security.ExternalDecryptionProcess)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void &lt;init&gt;(java.net.URL)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void &lt;init&gt;(java.net.URL,byte[])" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void &lt;init&gt;(java.io.InputStream,byte[])" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void &lt;init&gt;(java.io.InputStream)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.pdf.RandomAccessFileOrArray,byte[])" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.pdf.RandomAccessFileOrArray,byte[],boolean)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.pdf.PdfReader)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="com.itextpdf.text.pdf.PRTokeniser getOffsetTokeniser(com.itextpdf.text.io.RandomAccessSource)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="com.itextpdf.text.pdf.RandomAccessFileOrArray getSafeFile()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="int getNumberOfPages()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="com.itextpdf.text.pdf.PdfDictionary getCatalog()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="com.itextpdf.text.pdf.PRAcroForm getAcroForm()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="int getPageRotation(int)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="int getPageRotation(com.itextpdf.text.pdf.PdfDictionary)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="com.itextpdf.text.Rectangle getPageSizeWithRotation(int)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="com.itextpdf.text.Rectangle getPageSizeWithRotation(com.itextpdf.text.pdf.PdfDictionary)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="com.itextpdf.text.Rectangle getPageSize(int)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="com.itextpdf.text.Rectangle getPageSize(com.itextpdf.text.pdf.PdfDictionary)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="com.itextpdf.text.Rectangle getCropBox(int)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="com.itextpdf.text.Rectangle getBoxSize(int,java.lang.String)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="java.util.HashMap getInfo()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="com.itextpdf.text.Rectangle getNormalizedRectangle(com.itextpdf.text.pdf.PdfArray)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="boolean isTagged()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void readPdf()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void readPdfPartial()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="boolean equalsArray(byte[],byte[],int)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void readDecryptedDocObj()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="com.itextpdf.text.pdf.PdfObject getPdfObjectRelease(com.itextpdf.text.pdf.PdfObject)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="com.itextpdf.text.pdf.PdfObject getPdfObjectRelease(com.itextpdf.text.pdf.PdfObject,com.itextpdf.text.pdf.PdfObject)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="com.itextpdf.text.pdf.PdfObject getPdfObjectRelease(int)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void resetLastXrefPartial()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void releaseLastXrefPartial()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void releaseLastXrefPartial(com.itextpdf.text.pdf.PdfObject)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void setXrefPartialObject(int,com.itextpdf.text.pdf.PdfObject)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="com.itextpdf.text.pdf.PRIndirectReference addPdfObject(com.itextpdf.text.pdf.PdfObject)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void readPages()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void readDocObjPartial()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="com.itextpdf.text.pdf.PdfObject readSingleObject(int)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="com.itextpdf.text.pdf.PdfObject readOneObjStm(com.itextpdf.text.pdf.PRStream,int)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="double dumpPerc()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void readDocObj()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void checkPRStreamLength(com.itextpdf.text.pdf.PRStream)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void readObjStm(com.itextpdf.text.pdf.PRStream,com.itextpdf.text.pdf.IntHashtable)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="com.itextpdf.text.pdf.PdfObject killIndirect(com.itextpdf.text.pdf.PdfObject)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void ensureXrefSize(int)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void readXref()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="com.itextpdf.text.pdf.PdfDictionary readXrefSection()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="boolean readXRefStream(long)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void rebuildXref()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="com.itextpdf.text.pdf.PdfDictionary readDictionary()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="com.itextpdf.text.pdf.PdfArray readArray()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="com.itextpdf.text.pdf.PdfObject readPRObject()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="byte[] FlateDecode(byte[])" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="byte[] decodePredictor(byte[],com.itextpdf.text.pdf.PdfObject)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="byte[] FlateDecode(byte[],boolean)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="byte[] ASCIIHexDecode(byte[])" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="byte[] ASCII85Decode(byte[])" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="byte[] LZWDecode(byte[])" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="boolean isRebuilt()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="com.itextpdf.text.pdf.PdfDictionary getPageN(int)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="com.itextpdf.text.pdf.PdfDictionary getPageNRelease(int)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void releasePage(int)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void resetReleasePage()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="com.itextpdf.text.pdf.PRIndirectReference getPageOrigRef(int)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="byte[] getPageContent(int,com.itextpdf.text.pdf.RandomAccessFileOrArray)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="byte[] getPageContent(com.itextpdf.text.pdf.PdfDictionary)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="com.itextpdf.text.pdf.PdfDictionary getPageResources(int)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="com.itextpdf.text.pdf.PdfDictionary getPageResources(com.itextpdf.text.pdf.PdfDictionary)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="byte[] getPageContent(int)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void killXref(com.itextpdf.text.pdf.PdfObject)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void setPageContent(int,byte[])" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void setPageContent(int,byte[],int)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void setPageContent(int,byte[],int,boolean)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="byte[] decodeBytes(byte[],com.itextpdf.text.pdf.PdfDictionary)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="byte[] decodeBytes(byte[],com.itextpdf.text.pdf.PdfDictionary,java.util.Map)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="byte[] getStreamBytes(com.itextpdf.text.pdf.PRStream,com.itextpdf.text.pdf.RandomAccessFileOrArray)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="byte[] getStreamBytes(com.itextpdf.text.pdf.PRStream)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="byte[] getStreamBytesRaw(com.itextpdf.text.pdf.PRStream,com.itextpdf.text.pdf.RandomAccessFileOrArray)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="byte[] getStreamBytesRaw(com.itextpdf.text.pdf.PRStream)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void eliminateSharedStreams()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="boolean isTampered()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void setTampered(boolean)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="byte[] getMetadata()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="long getLastXref()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="int getXrefSize()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="long getEofPos()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="char getPdfVersion()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="boolean isEncrypted()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="long getPermissions()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="boolean is128Key()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="com.itextpdf.text.pdf.PdfDictionary getTrailer()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="com.itextpdf.text.pdf.PdfEncryption getDecrypt()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="boolean equalsn(byte[],byte[])" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="boolean existsName(com.itextpdf.text.pdf.PdfDictionary,com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfName)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="java.lang.String getFontName(com.itextpdf.text.pdf.PdfDictionary)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="java.lang.String getSubsetPrefix(com.itextpdf.text.pdf.PdfDictionary)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="int shuffleSubsetNames()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="int createFakeFontSubsets()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="com.itextpdf.text.pdf.PdfArray getNameArray(com.itextpdf.text.pdf.PdfObject)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="java.util.HashMap getNamedDestination()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="java.util.HashMap getNamedDestination(boolean)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="java.util.HashMap getNamedDestinationFromNames()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="java.util.HashMap getNamedDestinationFromNames(boolean)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="java.util.HashMap getNamedDestinationFromStrings()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void removeFields()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void removeAnnotations()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="java.util.ArrayList getLinks(int)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void iterateBookmarks(com.itextpdf.text.pdf.PdfObject,java.util.HashMap)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void makeRemoteNamedDestinationsLocal()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="boolean convertNamedDestination(com.itextpdf.text.pdf.PdfObject,java.util.HashMap)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void consolidateNamedDestinations()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="boolean replaceNamedDestination(com.itextpdf.text.pdf.PdfObject,java.util.HashMap)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="com.itextpdf.text.pdf.PdfDictionary duplicatePdfDictionary(com.itextpdf.text.pdf.PdfDictionary,com.itextpdf.text.pdf.PdfDictionary,com.itextpdf.text.pdf.PdfReader)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="com.itextpdf.text.pdf.PdfObject duplicatePdfObject(com.itextpdf.text.pdf.PdfObject,com.itextpdf.text.pdf.PdfReader)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void close()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void removeUnusedNode(com.itextpdf.text.pdf.PdfObject,boolean[])" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="int removeUnusedObjects()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="com.itextpdf.text.pdf.AcroFields getAcroFields()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="java.lang.String getJavaScript(com.itextpdf.text.pdf.RandomAccessFileOrArray)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="java.lang.String getJavaScript()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void selectPages(java.lang.String)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void selectPages(java.util.List)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void selectPages(java.util.List,boolean)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void setViewerPreferences(int)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void addViewerPreference(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfObject)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void setViewerPreferences(com.itextpdf.text.pdf.internal.PdfViewerPreferencesImp)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="int getSimpleViewerPreferences()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void setAppendable(boolean)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="boolean isNewXrefType()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="long getFileLength()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="boolean isHybridXref()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="com.itextpdf.text.pdf.PdfIndirectReference getCryptoRef()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="boolean hasUsageRights()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="void removeUsageRights()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="int getCertificationLevel()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="boolean isOpenedWithFullPermissions()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="int getCryptoMode()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="boolean isMetadataEncrypted()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="byte[] computeUserPassword()" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="boolean access$200(com.itextpdf.text.pdf.PdfReader)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="int access$300(com.itextpdf.text.pdf.PdfReader)" class="com.itextpdf.text.pdf.PdfReader" />
		<method signature="int access$302(com.itextpdf.text.pdf.PdfReader,int)" class="com.itextpdf.text.pdf.PdfReader" />
		<field name="myXref" class="com.itextpdf.text.pdf.PdfReaderInstance" />
		<field name="reader" class="com.itextpdf.text.pdf.PdfReaderInstance" />
		<field name="file" class="com.itextpdf.text.pdf.PdfReaderInstance" />
		<field name="importedPages" class="com.itextpdf.text.pdf.PdfReaderInstance" />
		<field name="writer" class="com.itextpdf.text.pdf.PdfReaderInstance" />
		<field name="visited" class="com.itextpdf.text.pdf.PdfReaderInstance" />
		<field name="nextRound" class="com.itextpdf.text.pdf.PdfReaderInstance" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.pdf.PdfReader,com.itextpdf.text.pdf.PdfWriter)" class="com.itextpdf.text.pdf.PdfReaderInstance" />
		<method signature="com.itextpdf.text.pdf.PdfImportedPage getImportedPage(int)" class="com.itextpdf.text.pdf.PdfReaderInstance" />
		<method signature="com.itextpdf.text.pdf.RandomAccessFileOrArray getReaderFile()" class="com.itextpdf.text.pdf.PdfReaderInstance" />
		<method signature="com.itextpdf.text.pdf.PdfObject getResources(int)" class="com.itextpdf.text.pdf.PdfReaderInstance" />
		<method signature="com.itextpdf.text.pdf.PdfStream getFormXObject(int,int)" class="com.itextpdf.text.pdf.PdfReaderInstance" />
		<method signature="void writeAllVisited()" class="com.itextpdf.text.pdf.PdfReaderInstance" />
		<method signature="void &lt;init&gt;(float,float,int)" class="com.itextpdf.text.pdf.PdfRectangle" />
		<method signature="com.itextpdf.text.Rectangle getRectangle()" class="com.itextpdf.text.pdf.PdfRectangle" />
		<method signature="void addFirst(com.itextpdf.text.pdf.PdfObject)" class="com.itextpdf.text.pdf.PdfRectangle" />
		<method signature="float left(int)" class="com.itextpdf.text.pdf.PdfRectangle" />
		<method signature="float right(int)" class="com.itextpdf.text.pdf.PdfRectangle" />
		<method signature="float top(int)" class="com.itextpdf.text.pdf.PdfRectangle" />
		<method signature="float bottom(int)" class="com.itextpdf.text.pdf.PdfRectangle" />
		<method signature="com.itextpdf.text.pdf.PdfRectangle rotate()" class="com.itextpdf.text.pdf.PdfRectangle" />
		<field name="shading" class="com.itextpdf.text.pdf.PdfShading" />
		<field name="writer" class="com.itextpdf.text.pdf.PdfShading" />
		<field name="shadingType" class="com.itextpdf.text.pdf.PdfShading" />
		<field name="colorDetails" class="com.itextpdf.text.pdf.PdfShading" />
		<field name="shadingName" class="com.itextpdf.text.pdf.PdfShading" />
		<field name="shadingReference" class="com.itextpdf.text.pdf.PdfShading" />
		<field name="cspace" class="com.itextpdf.text.pdf.PdfShading" />
		<field name="bBox" class="com.itextpdf.text.pdf.PdfShading" />
		<field name="antiAlias" class="com.itextpdf.text.pdf.PdfShading" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.pdf.PdfWriter)" class="com.itextpdf.text.pdf.PdfShading" />
		<method signature="void setColorSpace(com.itextpdf.text.BaseColor)" class="com.itextpdf.text.pdf.PdfShading" />
		<method signature="void throwColorSpaceError()" class="com.itextpdf.text.pdf.PdfShading" />
		<method signature="void checkCompatibleColors(com.itextpdf.text.BaseColor,com.itextpdf.text.BaseColor)" class="com.itextpdf.text.pdf.PdfShading" />
		<method signature="float[] getColorArray(com.itextpdf.text.BaseColor)" class="com.itextpdf.text.pdf.PdfShading" />
		<method signature="com.itextpdf.text.pdf.PdfShading type1(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.BaseColor,float[],float[],com.itextpdf.text.pdf.PdfFunction)" class="com.itextpdf.text.pdf.PdfShading" />
		<method signature="com.itextpdf.text.pdf.PdfShading type2(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.BaseColor,float[],float[],com.itextpdf.text.pdf.PdfFunction,boolean[])" class="com.itextpdf.text.pdf.PdfShading" />
		<method signature="com.itextpdf.text.pdf.PdfShading type3(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.BaseColor,float[],float[],com.itextpdf.text.pdf.PdfFunction,boolean[])" class="com.itextpdf.text.pdf.PdfShading" />
		<method signature="com.itextpdf.text.pdf.PdfShading simpleAxial(com.itextpdf.text.pdf.PdfWriter,float,float,float,float,com.itextpdf.text.BaseColor,com.itextpdf.text.BaseColor,boolean,boolean)" class="com.itextpdf.text.pdf.PdfShading" />
		<method signature="com.itextpdf.text.pdf.PdfShading simpleAxial(com.itextpdf.text.pdf.PdfWriter,float,float,float,float,com.itextpdf.text.BaseColor,com.itextpdf.text.BaseColor)" class="com.itextpdf.text.pdf.PdfShading" />
		<method signature="com.itextpdf.text.pdf.PdfShading simpleRadial(com.itextpdf.text.pdf.PdfWriter,float,float,float,float,float,float,com.itextpdf.text.BaseColor,com.itextpdf.text.BaseColor,boolean,boolean)" class="com.itextpdf.text.pdf.PdfShading" />
		<method signature="com.itextpdf.text.pdf.PdfShading simpleRadial(com.itextpdf.text.pdf.PdfWriter,float,float,float,float,float,float,com.itextpdf.text.BaseColor,com.itextpdf.text.BaseColor)" class="com.itextpdf.text.pdf.PdfShading" />
		<method signature="com.itextpdf.text.pdf.PdfName getShadingName()" class="com.itextpdf.text.pdf.PdfShading" />
		<method signature="com.itextpdf.text.pdf.PdfIndirectReference getShadingReference()" class="com.itextpdf.text.pdf.PdfShading" />
		<method signature="com.itextpdf.text.pdf.PdfWriter getWriter()" class="com.itextpdf.text.pdf.PdfShading" />
		<method signature="com.itextpdf.text.pdf.ColorDetails getColorDetails()" class="com.itextpdf.text.pdf.PdfShading" />
		<method signature="float[] getBBox()" class="com.itextpdf.text.pdf.PdfShading" />
		<method signature="void setBBox(float[])" class="com.itextpdf.text.pdf.PdfShading" />
		<method signature="boolean isAntiAlias()" class="com.itextpdf.text.pdf.PdfShading" />
		<method signature="void setAntiAlias(boolean)" class="com.itextpdf.text.pdf.PdfShading" />
		<field name="shading" class="com.itextpdf.text.pdf.PdfShadingPattern" />
		<field name="writer" class="com.itextpdf.text.pdf.PdfShadingPattern" />
		<field name="matrix" class="com.itextpdf.text.pdf.PdfShadingPattern" />
		<field name="patternName" class="com.itextpdf.text.pdf.PdfShadingPattern" />
		<field name="patternReference" class="com.itextpdf.text.pdf.PdfShadingPattern" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.pdf.PdfShading)" class="com.itextpdf.text.pdf.PdfShadingPattern" />
		<method signature="com.itextpdf.text.pdf.PdfName getShadingName()" class="com.itextpdf.text.pdf.PdfShadingPattern" />
		<method signature="com.itextpdf.text.pdf.PdfIndirectReference getShadingReference()" class="com.itextpdf.text.pdf.PdfShadingPattern" />
		<method signature="void setMatrix(float[])" class="com.itextpdf.text.pdf.PdfShadingPattern" />
		<method signature="float[] getMatrix()" class="com.itextpdf.text.pdf.PdfShadingPattern" />
		<class name="com.itextpdf.text.pdf.PdfSigLockDictionary$LockAction" />
		<class name="com.itextpdf.text.pdf.PdfSigLockDictionary$LockPermissions" />
		<class name="com.itextpdf.text.pdf.PdfSigLockDictionary" />
		<class name="com.itextpdf.text.pdf.PdfSignature" />
		<class name="com.itextpdf.text.pdf.PdfSignatureAppearance$1" />
		<class name="com.itextpdf.text.pdf.PdfSignatureAppearance$RenderingMode" />
		<class name="com.itextpdf.text.pdf.PdfSignatureAppearance$SignatureEvent" />
		<class name="com.itextpdf.text.pdf.PdfSignatureAppearance" />
		<class name="com.itextpdf.text.pdf.PdfSmartCopy$ByteStore" />
		<class name="com.itextpdf.text.pdf.PdfSmartCopy" />
		<field name="name" class="com.itextpdf.text.pdf.PdfSpotColor" />
		<field name="altcs" class="com.itextpdf.text.pdf.PdfSpotColor" />
		<field name="altColorDetails" class="com.itextpdf.text.pdf.PdfSpotColor" />
		<method signature="void &lt;init&gt;(java.lang.String,com.itextpdf.text.BaseColor)" class="com.itextpdf.text.pdf.PdfSpotColor" />
		<method signature="com.itextpdf.text.pdf.PdfName getName()" class="com.itextpdf.text.pdf.PdfSpotColor" />
		<method signature="com.itextpdf.text.pdf.PdfObject getSpotObject(com.itextpdf.text.pdf.PdfWriter)" class="com.itextpdf.text.pdf.PdfSpotColor" />
		<class name="com.itextpdf.text.pdf.PdfStamper" />
		<class name="com.itextpdf.text.pdf.PdfStamperImp$PageStamp" />
		<field name="readers2intrefs" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<field name="readers2file" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<field name="file" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<field name="reader" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<field name="myXref" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<field name="pagesToContent" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<field name="closed" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<field name="rotateContents" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<field name="acroFields" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<field name="flat" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<field name="flatFreeText" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<field name="flatannotations" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<field name="namePtr" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<field name="partialFlattening" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<field name="useVp" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<field name="viewerPreferences" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<field name="fieldTemplates" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<field name="fieldsAdded" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<field name="sigFlags" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<field name="append" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<field name="marked" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<field name="initialXrefSize" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<field name="openAction" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<field name="namedDestinations" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<field name="COUNTER" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<field name="originalLayersAreRead" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<field name="DEFAULT_MATRIX" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="com.itextpdf.text.log.Counter getCounter()" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.pdf.PdfReader,java.io.OutputStream,char,boolean)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void readColorProfile()" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void setViewerPreferences()" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void close(java.util.Map)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void close(com.itextpdf.text.pdf.PdfIndirectReference,int)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void applyRotation(com.itextpdf.text.pdf.PdfDictionary,com.itextpdf.text.pdf.ByteBuffer)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void alterContents()" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void alterResources(com.itextpdf.text.pdf.PdfStamperImp$PageStamp)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="int getNewObjectNumber(com.itextpdf.text.pdf.PdfReader,int,int)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="com.itextpdf.text.pdf.RandomAccessFileOrArray getReaderFile(com.itextpdf.text.pdf.PdfReader)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void registerReader(com.itextpdf.text.pdf.PdfReader,boolean)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void unRegisterReader(com.itextpdf.text.pdf.PdfReader)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void findAllObjects(com.itextpdf.text.pdf.PdfReader,com.itextpdf.text.pdf.PdfObject,com.itextpdf.text.pdf.IntHashtable)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void addComments(com.itextpdf.text.pdf.FdfReader)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="com.itextpdf.text.pdf.PdfStamperImp$PageStamp getPageStamp(int)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="com.itextpdf.text.pdf.PdfContentByte getUnderContent(int)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="com.itextpdf.text.pdf.PdfContentByte getOverContent(int)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void correctAcroFieldPages(int)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void moveRectangle(com.itextpdf.text.pdf.PdfDictionary,com.itextpdf.text.pdf.PdfReader,int,com.itextpdf.text.pdf.PdfName,java.lang.String)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void replacePage(com.itextpdf.text.pdf.PdfReader,int,int)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void insertPage(int,com.itextpdf.text.Rectangle)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="boolean isRotateContents()" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void setRotateContents(boolean)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="boolean isContentWritten()" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="com.itextpdf.text.pdf.AcroFields getAcroFields()" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void setFormFlattening(boolean)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void setFreeTextFlattening(boolean)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="boolean partialFormFlattening(java.lang.String)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void flatFields()" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void eliminateAcroformObjects()" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void sweepKids(com.itextpdf.text.pdf.PdfObject)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void setFlatAnnotations(boolean)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void flattenAnnotations()" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void flattenAnnotations(boolean)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="com.itextpdf.text.Rectangle transformBBoxByMatrix(com.itextpdf.text.Rectangle,double[])" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="com.itextpdf.awt.geom.Point transformPoint(double,double,double[])" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void flatFreeTextFields()" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="com.itextpdf.text.pdf.PdfIndirectReference getPageReference(int)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void addAnnotation(com.itextpdf.text.pdf.PdfAnnotation)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void addDocumentField(com.itextpdf.text.pdf.PdfIndirectReference)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void addFieldResources()" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void expandFields(com.itextpdf.text.pdf.PdfFormField,java.util.ArrayList)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void addAnnotation(com.itextpdf.text.pdf.PdfAnnotation,com.itextpdf.text.pdf.PdfDictionary)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void addAnnotation(com.itextpdf.text.pdf.PdfAnnotation,int)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void outlineTravel(com.itextpdf.text.pdf.PRIndirectReference)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void deleteOutlines()" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void setJavaScript()" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void addFileAttachments()" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void makePackage(com.itextpdf.text.pdf.collection.PdfCollection)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void setOutlines()" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void setViewerPreferences(int)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void addViewerPreference(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfObject)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void setSigFlags(int)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void setPageAction(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfAction)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void setPageAction(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfAction,int)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void setDuration(int)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void setTransition(com.itextpdf.text.pdf.PdfTransition)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void setDuration(int,int)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void setTransition(com.itextpdf.text.pdf.PdfTransition,int)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void markUsed(int)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="boolean isAppend()" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="com.itextpdf.text.pdf.PdfReader getPdfReader()" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void setAdditionalAction(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfAction)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void setOpenAction(com.itextpdf.text.pdf.PdfAction)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void setOpenAction(java.lang.String)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void setThumbnail(com.itextpdf.text.Image)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void setThumbnail(com.itextpdf.text.Image,int)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="com.itextpdf.text.pdf.PdfContentByte getDirectContentUnder()" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="com.itextpdf.text.pdf.PdfContentByte getDirectContent()" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void readOCProperties()" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void addOrder(com.itextpdf.text.pdf.PdfLayer,com.itextpdf.text.pdf.PdfArray,java.util.Map)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="java.util.Map getPdfLayers()" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void registerLayer(com.itextpdf.text.pdf.PdfOCG)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void createXmpMetadata()" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="java.util.HashMap getNamedDestinations()" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="void updateNamedDestinations()" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<method signature="com.itextpdf.text.pdf.PdfArray getLastChildInNameTree(com.itextpdf.text.pdf.PdfDictionary)" class="com.itextpdf.text.pdf.PdfStamperImp" />
		<field name="DEFAULT_COMPRESSION" class="com.itextpdf.text.pdf.PdfStream" />
		<field name="NO_COMPRESSION" class="com.itextpdf.text.pdf.PdfStream" />
		<field name="BEST_SPEED" class="com.itextpdf.text.pdf.PdfStream" />
		<field name="BEST_COMPRESSION" class="com.itextpdf.text.pdf.PdfStream" />
		<method signature="void flateCompress()" class="com.itextpdf.text.pdf.PdfStream" />
		<method signature="java.lang.String getEncoding()" class="com.itextpdf.text.pdf.PdfString" />
		<method signature="void setObjNum(int,int)" class="com.itextpdf.text.pdf.PdfString" />
		<method signature="void decrypt(com.itextpdf.text.pdf.PdfReader)" class="com.itextpdf.text.pdf.PdfString" />
		<method signature="byte[] getOriginalBytes()" class="com.itextpdf.text.pdf.PdfString" />
		<class name="com.itextpdf.text.pdf.PdfStructTreeController$1" />
		<class name="com.itextpdf.text.pdf.PdfStructTreeController$returnType" />
		<class name="com.itextpdf.text.pdf.PdfStructTreeController" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.pdf.PdfStructureElement,com.itextpdf.text.pdf.PdfName)" class="com.itextpdf.text.pdf.PdfStructureElement" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.pdf.PdfStructureTreeRoot,com.itextpdf.text.pdf.PdfName)" class="com.itextpdf.text.pdf.PdfStructureElement" />
		<method signature="void mapRole(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfName)" class="com.itextpdf.text.pdf.PdfStructureTreeRoot" />
		<method signature="void mapClass(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfObject)" class="com.itextpdf.text.pdf.PdfStructureTreeRoot" />
		<method signature="com.itextpdf.text.pdf.PdfObject getMappedClass(com.itextpdf.text.pdf.PdfName)" class="com.itextpdf.text.pdf.PdfStructureTreeRoot" />
		<method signature="java.util.HashMap getNumTree()" class="com.itextpdf.text.pdf.PdfStructureTreeRoot" />
		<method signature="void setAttribute(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfObject)" class="com.itextpdf.text.pdf.PdfStructureTreeRoot" />
		<field name="TYPE_TEMPLATE" class="com.itextpdf.text.pdf.PdfTemplate" />
		<field name="TYPE_IMPORTED" class="com.itextpdf.text.pdf.PdfTemplate" />
		<field name="TYPE_PATTERN" class="com.itextpdf.text.pdf.PdfTemplate" />
		<method signature="void setBoundingBox(com.itextpdf.text.Rectangle)" class="com.itextpdf.text.pdf.PdfTemplate" />
		<method signature="void setLayer(com.itextpdf.text.pdf.PdfOCG)" class="com.itextpdf.text.pdf.PdfTemplate" />
		<method signature="void setMatrix(float,float,float,float,float,float)" class="com.itextpdf.text.pdf.PdfTemplate" />
		<method signature="void beginVariableText()" class="com.itextpdf.text.pdf.PdfTemplate" />
		<method signature="void endVariableText()" class="com.itextpdf.text.pdf.PdfTemplate" />
		<method signature="void setGroup(com.itextpdf.text.pdf.PdfTransparencyGroup)" class="com.itextpdf.text.pdf.PdfTemplate" />
		<method signature="void setAdditional(com.itextpdf.text.pdf.PdfDictionary)" class="com.itextpdf.text.pdf.PdfTemplate" />
		<method signature="void add(com.itextpdf.text.pdf.PdfNumber)" class="com.itextpdf.text.pdf.PdfTextArray" />
		<class name="com.itextpdf.text.pdf.PdfTransition" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.text.pdf.PdfTransparencyGroup" />
		<method signature="void setIsolated(boolean)" class="com.itextpdf.text.pdf.PdfTransparencyGroup" />
		<method signature="void setKnockout(boolean)" class="com.itextpdf.text.pdf.PdfTransparencyGroup" />
		<class name="com.itextpdf.text.pdf.PdfVisibilityExpression" />
		<field name="OBJSINSTREAM" class="com.itextpdf.text.pdf.PdfWriter$PdfBody" />
		<method signature="void setRefnum(int)" class="com.itextpdf.text.pdf.PdfWriter$PdfBody" />
		<field name="GENERATION_MAX" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="colorProfile" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="VERSION_1_2" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="VERSION_1_3" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="VERSION_1_4" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="VERSION_1_5" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="VERSION_1_6" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="VERSION_1_7" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="PageLayoutSinglePage" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="PageLayoutOneColumn" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="PageLayoutTwoColumnLeft" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="PageLayoutTwoColumnRight" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="PageLayoutTwoPageLeft" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="PageLayoutTwoPageRight" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="PageModeUseNone" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="PageModeUseOutlines" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="PageModeUseThumbs" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="PageModeFullScreen" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="PageModeUseOC" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="PageModeUseAttachments" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="HideToolbar" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="HideMenubar" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="HideWindowUI" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="FitWindow" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="CenterWindow" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="DisplayDocTitle" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="NonFullScreenPageModeUseNone" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="NonFullScreenPageModeUseOutlines" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="NonFullScreenPageModeUseThumbs" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="NonFullScreenPageModeUseOC" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="DirectionL2R" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="DirectionR2L" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="PrintScalingNone" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="SIGNATURE_EXISTS" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="SIGNATURE_APPEND_ONLY" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="PDFXNONE" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="PDFX1A2001" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="PDFX32002" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="STANDARD_ENCRYPTION_40" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="STANDARD_ENCRYPTION_128" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="ENCRYPTION_AES_128" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="ENCRYPTION_AES_256" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="ENCRYPTION_MASK" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="DO_NOT_ENCRYPT_METADATA" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="EMBEDDED_FILES_ONLY" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="ALLOW_PRINTING" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="ALLOW_MODIFY_CONTENTS" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="ALLOW_COPY" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="ALLOW_MODIFY_ANNOTATIONS" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="ALLOW_FILL_IN" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="ALLOW_SCREENREADERS" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="ALLOW_ASSEMBLY" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="ALLOW_DEGRADED_PRINTING" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="AllowPrinting" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="AllowModifyContents" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="AllowCopy" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="AllowModifyAnnotations" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="AllowFillIn" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="AllowScreenReaders" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="AllowAssembly" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="AllowDegradedPrinting" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="STRENGTH40BITS" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="STRENGTH128BITS" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="markAll" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="markInlineElementsOnly" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="SPACE_CHAR_RATIO_DEFAULT" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="NO_SPACE_CHAR_RATIO" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="RUN_DIRECTION_DEFAULT" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="RUN_DIRECTION_NO_BIDI" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="RUN_DIRECTION_LTR" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="RUN_DIRECTION_RTL" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="com.itextpdf.text.pdf.PdfWriter getInstance(com.itextpdf.text.Document,java.io.OutputStream,com.itextpdf.text.DocListener)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="float getVerticalPosition(boolean)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void setInitialLeading(float)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="com.itextpdf.text.pdf.ICC_Profile getColorProfile()" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="com.itextpdf.text.pdf.PdfIndirectObject addToBody(com.itextpdf.text.pdf.PdfObject,int)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="com.itextpdf.text.pdf.PdfIndirectObject addToBody(com.itextpdf.text.pdf.PdfObject,int,boolean)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="int getIndirectReferenceNumber()" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void addPageDictEntry(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfObject)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void setLinearPageMode()" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="int reorderPages(int[])" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="int getPageNumber()" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void setPageViewport(com.itextpdf.text.pdf.PdfArray)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void setTabs(com.itextpdf.text.pdf.PdfName)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void setPageEvent(com.itextpdf.text.pdf.PdfPageEvent)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="com.itextpdf.text.pdf.PdfOutline getRootOutline()" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void setOutlines(java.util.List)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void setPdfVersion(char)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void setAtLeastPdfVersion(char)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void setPdfVersion(com.itextpdf.text.pdf.PdfName)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void addDeveloperExtension(com.itextpdf.text.pdf.PdfDeveloperExtension)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void setViewerPreferences(int)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void addViewerPreference(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfObject)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void setPageLabels(com.itextpdf.text.pdf.PdfPageLabels)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void addNamedDestinations(java.util.Map,int)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void addNamedDestination(java.lang.String,int,com.itextpdf.text.pdf.PdfDestination)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void addJavaScript(com.itextpdf.text.pdf.PdfAction)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void addJavaScript(java.lang.String,boolean)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void addJavaScript(java.lang.String)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void addJavaScript(java.lang.String,com.itextpdf.text.pdf.PdfAction)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void addJavaScript(java.lang.String,java.lang.String,boolean)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void addJavaScript(java.lang.String,java.lang.String)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void addFileAttachment(java.lang.String,byte[],java.lang.String,java.lang.String)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void addFileAttachment(java.lang.String,com.itextpdf.text.pdf.PdfFileSpecification)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void addFileAttachment(com.itextpdf.text.pdf.PdfFileSpecification)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void setOpenAction(java.lang.String)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void setOpenAction(com.itextpdf.text.pdf.PdfAction)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void setAdditionalAction(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfAction)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void setCollection(com.itextpdf.text.pdf.collection.PdfCollection)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="com.itextpdf.text.pdf.PdfAcroForm getAcroForm()" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void addAnnotation(com.itextpdf.text.pdf.PdfAnnotation,int)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void addCalculationOrder(com.itextpdf.text.pdf.PdfFormField)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void setSigFlags(int)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void setLanguage(java.lang.String)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void setXmpMetadata(byte[])" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void setPageXmpMetadata(byte[])" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="com.itextpdf.text.xml.xmp.XmpWriter getXmpWriter()" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void createXmpMetadata()" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void setPDFXConformance(int)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void setOutputIntents(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.itextpdf.text.pdf.ICC_Profile)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void setOutputIntents(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[])" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="boolean setOutputIntents(com.itextpdf.text.pdf.PdfReader,boolean)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="java.lang.String getNameString(com.itextpdf.text.pdf.PdfDictionary,com.itextpdf.text.pdf.PdfName)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void setEncryption(byte[],byte[],int,int)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void setEncryption(java.security.cert.Certificate[],int[],int)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void setEncryption(byte[],byte[],int,boolean)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void setEncryption(boolean,java.lang.String,java.lang.String,int)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void setEncryption(int,java.lang.String,java.lang.String,int)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void setFullCompression()" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void setCompressionLevel(int)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void releaseTemplate(com.itextpdf.text.pdf.PdfTemplate)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="com.itextpdf.text.pdf.PdfImportedPage getImportedPage(com.itextpdf.text.pdf.PdfReader,int)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void freeReader(com.itextpdf.text.pdf.PdfReader)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="long getCurrentDocumentSize()" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="com.itextpdf.text.pdf.RandomAccessFileOrArray getReaderFile(com.itextpdf.text.pdf.PdfReader)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void setTagged()" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void setTagged(int)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="com.itextpdf.text.pdf.PdfOCProperties getOCProperties()" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void addOCGRadioGroup(java.util.ArrayList)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void lockLayer(com.itextpdf.text.pdf.PdfLayer)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void registerLayer(com.itextpdf.text.pdf.PdfOCG)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="com.itextpdf.text.Rectangle getPageSize()" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void setCropBoxSize(com.itextpdf.text.Rectangle)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void setBoxSize(java.lang.String,com.itextpdf.text.Rectangle)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="com.itextpdf.text.Rectangle getBoxSize(java.lang.String)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="com.itextpdf.text.Rectangle getBoxSize(java.lang.String,com.itextpdf.text.Rectangle)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void setPageEmpty(boolean)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="boolean isPageEmpty()" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void setPageAction(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfAction)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void setDuration(int)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void setTransition(com.itextpdf.text.pdf.PdfTransition)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void setThumbnail(com.itextpdf.text.Image)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="com.itextpdf.text.pdf.PdfDictionary getGroup()" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void setGroup(com.itextpdf.text.pdf.PdfDictionary)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void setSpaceCharRatio(float)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void setRunDirection(int)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="int getRunDirection()" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void setUserunit(float)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="boolean isStrictImageSequence()" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void setStrictImageSequence(boolean)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void clearTextWrap()" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="boolean isUserProperties()" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void setUserProperties(boolean)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void setRgbTransparencyBlending(boolean)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="com.itextpdf.text.xml.xmp.XmpWriter createXmpWriter(java.io.ByteArrayOutputStream,com.itextpdf.text.pdf.PdfDictionary)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="com.itextpdf.text.xml.xmp.XmpWriter createXmpWriter(java.io.ByteArrayOutputStream,java.util.HashMap)" class="com.itextpdf.text.pdf.PdfWriter" />
		<method signature="void useExternalCacheForTagStructure(com.itextpdf.text.io.TempFileCache)" class="com.itextpdf.text.pdf.PdfWriter" />
		<field name="serialVersionUID" class="com.itextpdf.text.pdf.PdfXConformanceException" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.text.pdf.PdfXConformanceException" />
		<class name="com.itextpdf.text.pdf.PushbuttonField" />
		<class name="com.itextpdf.text.pdf.RadioCheckField" />
		<method signature="com.itextpdf.text.pdf.RandomAccessFileOrArray createView()" class="com.itextpdf.text.pdf.RandomAccessFileOrArray" />
		<method signature="com.itextpdf.text.io.RandomAccessSource createSourceView()" class="com.itextpdf.text.pdf.RandomAccessFileOrArray" />
		<method signature="void &lt;init&gt;(java.net.URL)" class="com.itextpdf.text.pdf.RandomAccessFileOrArray" />
		<method signature="void &lt;init&gt;(java.io.InputStream)" class="com.itextpdf.text.pdf.RandomAccessFileOrArray" />
		<method signature="com.itextpdf.text.io.RandomAccessSource getByteSource()" class="com.itextpdf.text.pdf.RandomAccessFileOrArray" />
		<method signature="int read(byte[])" class="com.itextpdf.text.pdf.RandomAccessFileOrArray" />
		<method signature="char readCharLE()" class="com.itextpdf.text.pdf.RandomAccessFileOrArray" />
		<method signature="long readUnsignedInt()" class="com.itextpdf.text.pdf.RandomAccessFileOrArray" />
		<method signature="long readUnsignedIntLE()" class="com.itextpdf.text.pdf.RandomAccessFileOrArray" />
		<method signature="long readLongLE()" class="com.itextpdf.text.pdf.RandomAccessFileOrArray" />
		<method signature="float readFloatLE()" class="com.itextpdf.text.pdf.RandomAccessFileOrArray" />
		<method signature="double readDoubleLE()" class="com.itextpdf.text.pdf.RandomAccessFileOrArray" />
		<class name="com.itextpdf.text.pdf.RefKey" />
		<class name="com.itextpdf.text.pdf.SequenceList" />
		<field name="serialVersionUID" class="com.itextpdf.text.pdf.ShadingColor" />
		<field name="topList" class="com.itextpdf.text.pdf.SimpleBookmark" />
		<field name="attr" class="com.itextpdf.text.pdf.SimpleBookmark" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.text.pdf.SimpleBookmark" />
		<method signature="java.util.List bookmarkDepth(com.itextpdf.text.pdf.PdfReader,com.itextpdf.text.pdf.PdfDictionary,com.itextpdf.text.pdf.IntHashtable,boolean)" class="com.itextpdf.text.pdf.SimpleBookmark" />
		<method signature="void mapGotoBookmark(java.util.HashMap,com.itextpdf.text.pdf.PdfObject,com.itextpdf.text.pdf.IntHashtable)" class="com.itextpdf.text.pdf.SimpleBookmark" />
		<method signature="java.lang.String makeBookmarkParam(com.itextpdf.text.pdf.PdfArray,com.itextpdf.text.pdf.IntHashtable)" class="com.itextpdf.text.pdf.SimpleBookmark" />
		<method signature="int getNumber(com.itextpdf.text.pdf.PdfIndirectReference)" class="com.itextpdf.text.pdf.SimpleBookmark" />
		<method signature="java.util.List getBookmark(com.itextpdf.text.pdf.PdfReader)" class="com.itextpdf.text.pdf.SimpleBookmark" />
		<method signature="java.util.List getBookmark(com.itextpdf.text.pdf.PdfReader,com.itextpdf.text.pdf.PdfDictionary,boolean)" class="com.itextpdf.text.pdf.SimpleBookmark" />
		<method signature="void eliminatePages(java.util.List,int[])" class="com.itextpdf.text.pdf.SimpleBookmark" />
		<method signature="void shiftPageNumbers(java.util.List,int,int[])" class="com.itextpdf.text.pdf.SimpleBookmark" />
		<method signature="void exportToXMLNode(java.util.List,java.io.Writer,int,boolean)" class="com.itextpdf.text.pdf.SimpleBookmark" />
		<method signature="void exportToXML(java.util.List,java.io.OutputStream,java.lang.String,boolean)" class="com.itextpdf.text.pdf.SimpleBookmark" />
		<method signature="void exportToXML(java.util.List,java.io.Writer,java.lang.String,boolean)" class="com.itextpdf.text.pdf.SimpleBookmark" />
		<method signature="java.util.List importFromXML(java.io.InputStream)" class="com.itextpdf.text.pdf.SimpleBookmark" />
		<method signature="java.util.List importFromXML(java.io.Reader)" class="com.itextpdf.text.pdf.SimpleBookmark" />
		<method signature="void endDocument()" class="com.itextpdf.text.pdf.SimpleBookmark" />
		<method signature="void endElement(java.lang.String)" class="com.itextpdf.text.pdf.SimpleBookmark" />
		<method signature="void startDocument()" class="com.itextpdf.text.pdf.SimpleBookmark" />
		<method signature="void startElement(java.lang.String,java.util.Map)" class="com.itextpdf.text.pdf.SimpleBookmark" />
		<method signature="void text(java.lang.String)" class="com.itextpdf.text.pdf.SimpleBookmark" />
		<class name="com.itextpdf.text.pdf.SimpleNamedDestination" />
		<field name="serialVersionUID" class="com.itextpdf.text.pdf.SpotColor" />
		<class name="com.itextpdf.text.pdf.StampContent" />
		<class name="com.itextpdf.text.pdf.StandardDecryption" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.text.pdf.StringUtils" />
		<class name="com.itextpdf.text.pdf.TextField" />
		<field name="glyphIdToChar" class="com.itextpdf.text.pdf.TrueTypeFont" />
		<method signature="com.itextpdf.text.pdf.PdfStream getFullFontStream()" class="com.itextpdf.text.pdf.TrueTypeFont" />
		<method signature="java.lang.String[] getCodePagesSupported()" class="com.itextpdf.text.pdf.TrueTypeFont" />
		<method signature="java.lang.String getSubfamily()" class="com.itextpdf.text.pdf.TrueTypeFont" />
		<method signature="java.lang.String[][] getAllNameEntries()" class="com.itextpdf.text.pdf.TrueTypeFont" />
		<method signature="void setPostscriptFontName(java.lang.String)" class="com.itextpdf.text.pdf.TrueTypeFont" />
		<method signature="boolean setKerning(int,int,int)" class="com.itextpdf.text.pdf.TrueTypeFont" />
		<field name="TABLE_CHECKSUM" class="com.itextpdf.text.pdf.TrueTypeFontSubSet" />
		<field name="TABLE_OFFSET" class="com.itextpdf.text.pdf.TrueTypeFontSubSet" />
		<field name="TABLE_LENGTH" class="com.itextpdf.text.pdf.TrueTypeFontSubSet" />
		<field name="HEAD_LOCA_FORMAT_OFFSET" class="com.itextpdf.text.pdf.TrueTypeFontSubSet" />
		<field name="ARG_1_AND_2_ARE_WORDS" class="com.itextpdf.text.pdf.TrueTypeFontSubSet" />
		<field name="WE_HAVE_A_SCALE" class="com.itextpdf.text.pdf.TrueTypeFontSubSet" />
		<field name="MORE_COMPONENTS" class="com.itextpdf.text.pdf.TrueTypeFontSubSet" />
		<field name="WE_HAVE_AN_X_AND_Y_SCALE" class="com.itextpdf.text.pdf.TrueTypeFontSubSet" />
		<field name="WE_HAVE_A_TWO_BY_TWO" class="com.itextpdf.text.pdf.TrueTypeFontSubSet" />
		<method signature="int GetCharFromGlyphId(int)" class="com.itextpdf.text.pdf.TrueTypeFontUnicode" />
		<method signature="com.itextpdf.text.pdf.PdfStream getFullFontStream()" class="com.itextpdf.text.pdf.TrueTypeFontUnicode" />
		<method signature="boolean charExists(int)" class="com.itextpdf.text.pdf.TrueTypeFontUnicode" />
		<method signature="boolean setCharAdvance(int,int)" class="com.itextpdf.text.pdf.TrueTypeFontUnicode" />
		<method signature="int[] getCharBBox(int)" class="com.itextpdf.text.pdf.TrueTypeFontUnicode" />
		<method signature="void readGsubTable()" class="com.itextpdf.text.pdf.TrueTypeFontUnicode" />
		<method signature="void setFontDescriptor(int,float)" class="com.itextpdf.text.pdf.Type1Font" />
		<method signature="java.lang.String[][] getAllNameEntries()" class="com.itextpdf.text.pdf.Type1Font" />
		<method signature="void setPostscriptFontName(java.lang.String)" class="com.itextpdf.text.pdf.Type1Font" />
		<method signature="boolean setKerning(int,int,int)" class="com.itextpdf.text.pdf.Type1Font" />
		<class name="com.itextpdf.text.pdf.Type3Font" />
		<class name="com.itextpdf.text.pdf.Type3Glyph" />
		<class name="com.itextpdf.text.pdf.VerticalText" />
		<class name="com.itextpdf.text.pdf.XfaForm$AcroFieldsSearch" />
		<class name="com.itextpdf.text.pdf.XfaForm$InverseStore" />
		<class name="com.itextpdf.text.pdf.XfaForm$Stack2" />
		<class name="com.itextpdf.text.pdf.XfaForm$Xml2Som" />
		<class name="com.itextpdf.text.pdf.XfaForm$Xml2SomDatasets" />
		<class name="com.itextpdf.text.pdf.XfaForm$Xml2SomTemplate" />
		<class name="com.itextpdf.text.pdf.XfaForm" />
		<class name="com.itextpdf.text.pdf.XfaXmlLocator" />
		<class name="com.itextpdf.text.pdf.XfaXpathConstructor$1" />
		<class name="com.itextpdf.text.pdf.XfaXpathConstructor$XdpPackage" />
		<class name="com.itextpdf.text.pdf.XfaXpathConstructor" />
		<class name="com.itextpdf.text.pdf.XfdfReader" />
		<class name="com.itextpdf.text.pdf.XmlSignatureAppearance" />
		<class name="com.itextpdf.text.pdf.codec.Base64$InputStream" />
		<class name="com.itextpdf.text.pdf.codec.Base64$OutputStream" />
		<field name="NO_OPTIONS" class="com.itextpdf.text.pdf.codec.Base64" />
		<field name="ENCODE" class="com.itextpdf.text.pdf.codec.Base64" />
		<field name="DECODE" class="com.itextpdf.text.pdf.codec.Base64" />
		<field name="GZIP" class="com.itextpdf.text.pdf.codec.Base64" />
		<field name="DONT_BREAK_LINES" class="com.itextpdf.text.pdf.codec.Base64" />
		<field name="URL_SAFE" class="com.itextpdf.text.pdf.codec.Base64" />
		<field name="ORDERED" class="com.itextpdf.text.pdf.codec.Base64" />
		<field name="MAX_LINE_LENGTH" class="com.itextpdf.text.pdf.codec.Base64" />
		<field name="EQUALS_SIGN" class="com.itextpdf.text.pdf.codec.Base64" />
		<field name="NEW_LINE" class="com.itextpdf.text.pdf.codec.Base64" />
		<field name="PREFERRED_ENCODING" class="com.itextpdf.text.pdf.codec.Base64" />
		<field name="WHITE_SPACE_ENC" class="com.itextpdf.text.pdf.codec.Base64" />
		<field name="EQUALS_SIGN_ENC" class="com.itextpdf.text.pdf.codec.Base64" />
		<method signature="byte[] getAlphabet(int)" class="com.itextpdf.text.pdf.codec.Base64" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.text.pdf.codec.Base64" />
		<method signature="void usage(java.lang.String)" class="com.itextpdf.text.pdf.codec.Base64" />
		<method signature="byte[] encode3to4(byte[],byte[],int,int)" class="com.itextpdf.text.pdf.codec.Base64" />
		<method signature="byte[] encode3to4(byte[],int,int,byte[],int,int)" class="com.itextpdf.text.pdf.codec.Base64" />
		<method signature="java.lang.String encodeObject(java.io.Serializable)" class="com.itextpdf.text.pdf.codec.Base64" />
		<method signature="java.lang.String encodeObject(java.io.Serializable,int)" class="com.itextpdf.text.pdf.codec.Base64" />
		<method signature="java.lang.String encodeBytes(byte[])" class="com.itextpdf.text.pdf.codec.Base64" />
		<method signature="java.lang.String encodeBytes(byte[],int)" class="com.itextpdf.text.pdf.codec.Base64" />
		<method signature="java.lang.String encodeBytes(byte[],int,int)" class="com.itextpdf.text.pdf.codec.Base64" />
		<method signature="java.lang.String encodeBytes(byte[],int,int,int)" class="com.itextpdf.text.pdf.codec.Base64" />
		<method signature="java.lang.Object decodeToObject(java.lang.String)" class="com.itextpdf.text.pdf.codec.Base64" />
		<method signature="boolean encodeToFile(byte[],java.lang.String)" class="com.itextpdf.text.pdf.codec.Base64" />
		<method signature="boolean decodeToFile(java.lang.String,java.lang.String)" class="com.itextpdf.text.pdf.codec.Base64" />
		<method signature="byte[] decodeFromFile(java.lang.String)" class="com.itextpdf.text.pdf.codec.Base64" />
		<method signature="java.lang.String encodeFromFile(java.lang.String)" class="com.itextpdf.text.pdf.codec.Base64" />
		<method signature="void encodeFileToFile(java.lang.String,java.lang.String)" class="com.itextpdf.text.pdf.codec.Base64" />
		<method signature="void decodeFileToFile(java.lang.String,java.lang.String)" class="com.itextpdf.text.pdf.codec.Base64" />
		<method signature="byte[] access$000(int)" class="com.itextpdf.text.pdf.codec.Base64" />
		<method signature="byte[] access$100(int)" class="com.itextpdf.text.pdf.codec.Base64" />
		<method signature="byte[] access$200(byte[],int,int,byte[],int,int)" class="com.itextpdf.text.pdf.codec.Base64" />
		<method signature="int access$300(byte[],int,byte[],int,int)" class="com.itextpdf.text.pdf.codec.Base64" />
		<method signature="byte[] access$400(byte[],byte[],int,int)" class="com.itextpdf.text.pdf.codec.Base64" />
		<class name="com.itextpdf.text.pdf.codec.BitFile" />
		<class name="com.itextpdf.text.pdf.codec.BmpImage" />
		<class name="com.itextpdf.text.pdf.codec.CCITTG4Encoder" />
		<class name="com.itextpdf.text.pdf.codec.GifImage$GifFrame" />
		<class name="com.itextpdf.text.pdf.codec.GifImage" />
		<class name="com.itextpdf.text.pdf.codec.JBIG2Image" />
		<class name="com.itextpdf.text.pdf.codec.JBIG2SegmentReader$JBIG2Page" />
		<class name="com.itextpdf.text.pdf.codec.JBIG2SegmentReader$JBIG2Segment" />
		<class name="com.itextpdf.text.pdf.codec.JBIG2SegmentReader" />
		<class name="com.itextpdf.text.pdf.codec.LZWCompressor" />
		<class name="com.itextpdf.text.pdf.codec.LZWStringTable" />
		<class name="com.itextpdf.text.pdf.codec.PngImage$NewByteArrayOutputStream" />
		<class name="com.itextpdf.text.pdf.codec.PngImage" />
		<class name="com.itextpdf.text.pdf.codec.PngWriter" />
		<class name="com.itextpdf.text.pdf.codec.TIFFConstants" />
		<class name="com.itextpdf.text.pdf.codec.TIFFDirectory" />
		<class name="com.itextpdf.text.pdf.codec.TIFFFaxDecoder" />
		<class name="com.itextpdf.text.pdf.codec.TIFFFaxDecompressor" />
		<class name="com.itextpdf.text.pdf.codec.TIFFField" />
		<class name="com.itextpdf.text.pdf.codec.TIFFLZWDecoder" />
		<class name="com.itextpdf.text.pdf.codec.TiffImage" />
		<class name="com.itextpdf.text.pdf.codec.TiffWriter$FieldAscii" />
		<class name="com.itextpdf.text.pdf.codec.TiffWriter$FieldBase" />
		<class name="com.itextpdf.text.pdf.codec.TiffWriter$FieldByte" />
		<class name="com.itextpdf.text.pdf.codec.TiffWriter$FieldImage" />
		<class name="com.itextpdf.text.pdf.codec.TiffWriter$FieldLong" />
		<class name="com.itextpdf.text.pdf.codec.TiffWriter$FieldRational" />
		<class name="com.itextpdf.text.pdf.codec.TiffWriter$FieldShort" />
		<class name="com.itextpdf.text.pdf.codec.TiffWriter$FieldUndefined" />
		<class name="com.itextpdf.text.pdf.codec.TiffWriter" />
		<class name="com.itextpdf.text.pdf.codec.wmf.InputMeta" />
		<class name="com.itextpdf.text.pdf.codec.wmf.MetaBrush" />
		<class name="com.itextpdf.text.pdf.codec.wmf.MetaDo" />
		<class name="com.itextpdf.text.pdf.codec.wmf.MetaFont" />
		<class name="com.itextpdf.text.pdf.codec.wmf.MetaObject" />
		<class name="com.itextpdf.text.pdf.codec.wmf.MetaPen" />
		<class name="com.itextpdf.text.pdf.codec.wmf.MetaState" />
		<class name="com.itextpdf.text.pdf.codec.wmf.Point" />
		<field name="DETAILS" class="com.itextpdf.text.pdf.collection.PdfCollection" />
		<field name="TILE" class="com.itextpdf.text.pdf.collection.PdfCollection" />
		<field name="HIDDEN" class="com.itextpdf.text.pdf.collection.PdfCollection" />
		<field name="CUSTOM" class="com.itextpdf.text.pdf.collection.PdfCollection" />
		<method signature="void &lt;init&gt;(int)" class="com.itextpdf.text.pdf.collection.PdfCollection" />
		<method signature="void setInitialDocument(java.lang.String)" class="com.itextpdf.text.pdf.collection.PdfCollection" />
		<method signature="void setSchema(com.itextpdf.text.pdf.collection.PdfCollectionSchema)" class="com.itextpdf.text.pdf.collection.PdfCollection" />
		<method signature="com.itextpdf.text.pdf.collection.PdfCollectionSchema getSchema()" class="com.itextpdf.text.pdf.collection.PdfCollection" />
		<method signature="void setSort(com.itextpdf.text.pdf.collection.PdfCollectionSort)" class="com.itextpdf.text.pdf.collection.PdfCollection" />
		<class name="com.itextpdf.text.pdf.collection.PdfCollectionField" />
		<class name="com.itextpdf.text.pdf.collection.PdfCollectionItem" />
		<class name="com.itextpdf.text.pdf.collection.PdfCollectionSchema" />
		<class name="com.itextpdf.text.pdf.collection.PdfCollectionSort" />
		<class name="com.itextpdf.text.pdf.collection.PdfTargetDictionary" />
		<class name="com.itextpdf.text.pdf.crypto.AESCipher" />
		<class name="com.itextpdf.text.pdf.crypto.AESCipherCBCnoPad" />
		<class name="com.itextpdf.text.pdf.crypto.ARCFOUREncryption" />
		<class name="com.itextpdf.text.pdf.crypto.IVGenerator" />
		<class name="com.itextpdf.text.pdf.draw.DottedLineSeparator" />
		<field name="lineWidth" class="com.itextpdf.text.pdf.draw.LineSeparator" />
		<field name="percentage" class="com.itextpdf.text.pdf.draw.LineSeparator" />
		<field name="lineColor" class="com.itextpdf.text.pdf.draw.LineSeparator" />
		<field name="alignment" class="com.itextpdf.text.pdf.draw.LineSeparator" />
		<method signature="void &lt;init&gt;(float,float,com.itextpdf.text.BaseColor,int,float)" class="com.itextpdf.text.pdf.draw.LineSeparator" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.Font)" class="com.itextpdf.text.pdf.draw.LineSeparator" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.text.pdf.draw.LineSeparator" />
		<method signature="void draw(com.itextpdf.text.pdf.PdfContentByte,float,float,float,float,float)" class="com.itextpdf.text.pdf.draw.LineSeparator" />
		<method signature="void drawLine(com.itextpdf.text.pdf.PdfContentByte,float,float,float)" class="com.itextpdf.text.pdf.draw.LineSeparator" />
		<method signature="float getLineWidth()" class="com.itextpdf.text.pdf.draw.LineSeparator" />
		<method signature="void setLineWidth(float)" class="com.itextpdf.text.pdf.draw.LineSeparator" />
		<method signature="void setPercentage(float)" class="com.itextpdf.text.pdf.draw.LineSeparator" />
		<method signature="com.itextpdf.text.BaseColor getLineColor()" class="com.itextpdf.text.pdf.draw.LineSeparator" />
		<method signature="void setLineColor(com.itextpdf.text.BaseColor)" class="com.itextpdf.text.pdf.draw.LineSeparator" />
		<method signature="int getAlignment()" class="com.itextpdf.text.pdf.draw.LineSeparator" />
		<method signature="void setAlignment(int)" class="com.itextpdf.text.pdf.draw.LineSeparator" />
		<field name="drawInterface" class="com.itextpdf.text.pdf.draw.VerticalPositionMark" />
		<field name="offset" class="com.itextpdf.text.pdf.draw.VerticalPositionMark" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.text.pdf.draw.VerticalPositionMark" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.pdf.draw.DrawInterface,float)" class="com.itextpdf.text.pdf.draw.VerticalPositionMark" />
		<method signature="boolean isNestable()" class="com.itextpdf.text.pdf.draw.VerticalPositionMark" />
		<method signature="com.itextpdf.text.pdf.draw.DrawInterface getDrawInterface()" class="com.itextpdf.text.pdf.draw.VerticalPositionMark" />
		<method signature="void setDrawInterface(com.itextpdf.text.pdf.draw.DrawInterface)" class="com.itextpdf.text.pdf.draw.VerticalPositionMark" />
		<method signature="float getOffset()" class="com.itextpdf.text.pdf.draw.VerticalPositionMark" />
		<method signature="void setOffset(float)" class="com.itextpdf.text.pdf.draw.VerticalPositionMark" />
		<class name="com.itextpdf.text.pdf.events.FieldPositioningEvents" />
		<class name="com.itextpdf.text.pdf.events.IndexEvents$1" />
		<class name="com.itextpdf.text.pdf.events.IndexEvents$Entry" />
		<class name="com.itextpdf.text.pdf.events.IndexEvents" />
		<class name="com.itextpdf.text.pdf.events.PdfPCellEventForwarder" />
		<class name="com.itextpdf.text.pdf.events.PdfPTableEventForwarder" />
		<class name="com.itextpdf.text.pdf.events.PdfPageEventForwarder" />
		<method signature="java.lang.String getName()" class="com.itextpdf.text.pdf.fonts.cmaps.AbstractCMap" />
		<class name="com.itextpdf.text.pdf.fonts.cmaps.CMapByteCid" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.text.pdf.fonts.cmaps.CMapCache" />
		<method signature="com.itextpdf.text.pdf.fonts.cmaps.CMapByteCid getCachedCMapByteCid(java.lang.String)" class="com.itextpdf.text.pdf.fonts.cmaps.CMapCache" />
		<field name="DEF" class="com.itextpdf.text.pdf.fonts.cmaps.CMapParserEx" />
		<field name="ENDCIDRANGE" class="com.itextpdf.text.pdf.fonts.cmaps.CMapParserEx" />
		<field name="ENDCIDCHAR" class="com.itextpdf.text.pdf.fonts.cmaps.CMapParserEx" />
		<field name="ENDBFRANGE" class="com.itextpdf.text.pdf.fonts.cmaps.CMapParserEx" />
		<field name="ENDBFCHAR" class="com.itextpdf.text.pdf.fonts.cmaps.CMapParserEx" />
		<field name="USECMAP" class="com.itextpdf.text.pdf.fonts.cmaps.CMapParserEx" />
		<field name="MAXLEVEL" class="com.itextpdf.text.pdf.fonts.cmaps.CMapParserEx" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.text.pdf.fonts.cmaps.CMapParserEx" />
		<method signature="void encodeSequence(int,byte[],char,java.util.ArrayList)" class="com.itextpdf.text.pdf.fonts.cmaps.CMapParserEx" />
		<class name="com.itextpdf.text.pdf.fonts.cmaps.CMapSequence" />
		<class name="com.itextpdf.text.pdf.fonts.cmaps.CMapToUnicode" />
		<method signature="com.itextpdf.text.pdf.fonts.cmaps.CMapToUnicode exportToUnicode()" class="com.itextpdf.text.pdf.fonts.cmaps.CMapUniCid" />
		<class name="com.itextpdf.text.pdf.fonts.cmaps.CidLocationFromByte" />
		<class name="com.itextpdf.text.pdf.fonts.cmaps.IdentityToUnicode" />
		<class name="com.itextpdf.text.pdf.fonts.otf.FontReadingException" />
		<class name="com.itextpdf.text.pdf.fonts.otf.GlyphPositioningTableReader$MarkRecord" />
		<class name="com.itextpdf.text.pdf.fonts.otf.GlyphPositioningTableReader$PosLookupRecord" />
		<class name="com.itextpdf.text.pdf.fonts.otf.GlyphPositioningTableReader" />
		<class name="com.itextpdf.text.pdf.fonts.otf.GlyphSubstitutionTableReader" />
		<method signature="boolean isSupported(java.lang.String)" class="com.itextpdf.text.pdf.fonts.otf.Language" />
		<class name="com.itextpdf.text.pdf.fonts.otf.OpenTypeFontTableReader" />
		<class name="com.itextpdf.text.pdf.fonts.otf.TableHeader" />
		<class name="com.itextpdf.text.pdf.hyphenation.ByteVector" />
		<class name="com.itextpdf.text.pdf.hyphenation.CharVector" />
		<class name="com.itextpdf.text.pdf.hyphenation.Hyphen" />
		<class name="com.itextpdf.text.pdf.hyphenation.Hyphenation" />
		<class name="com.itextpdf.text.pdf.hyphenation.HyphenationException" />
		<class name="com.itextpdf.text.pdf.hyphenation.HyphenationTree" />
		<class name="com.itextpdf.text.pdf.hyphenation.Hyphenator" />
		<class name="com.itextpdf.text.pdf.hyphenation.PatternConsumer" />
		<class name="com.itextpdf.text.pdf.hyphenation.SimplePatternParser" />
		<class name="com.itextpdf.text.pdf.hyphenation.TernaryTree$Iterator$Item" />
		<class name="com.itextpdf.text.pdf.hyphenation.TernaryTree$Iterator" />
		<class name="com.itextpdf.text.pdf.hyphenation.TernaryTree" />
		<method signature="java.lang.String getAlt()" class="com.itextpdf.text.pdf.interfaces.IAlternateDescription" />
		<method signature="void setAlt(java.lang.String)" class="com.itextpdf.text.pdf.interfaces.IAlternateDescription" />
		<method signature="void setAttribute(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfObject)" class="com.itextpdf.text.pdf.interfaces.IPdfStructureElement" />
		<class name="com.itextpdf.text.pdf.interfaces.PdfAConformance" />
		<method signature="com.itextpdf.text.pdf.PdfAcroForm getAcroForm()" class="com.itextpdf.text.pdf.interfaces.PdfAnnotations" />
		<method signature="void addAnnotation(com.itextpdf.text.pdf.PdfAnnotation)" class="com.itextpdf.text.pdf.interfaces.PdfAnnotations" />
		<method signature="void addCalculationOrder(com.itextpdf.text.pdf.PdfFormField)" class="com.itextpdf.text.pdf.interfaces.PdfAnnotations" />
		<method signature="void setSigFlags(int)" class="com.itextpdf.text.pdf.interfaces.PdfAnnotations" />
		<method signature="void setOpenAction(java.lang.String)" class="com.itextpdf.text.pdf.interfaces.PdfDocumentActions" />
		<method signature="void setOpenAction(com.itextpdf.text.pdf.PdfAction)" class="com.itextpdf.text.pdf.interfaces.PdfDocumentActions" />
		<method signature="void setAdditionalAction(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfAction)" class="com.itextpdf.text.pdf.interfaces.PdfDocumentActions" />
		<method signature="void setEncryption(byte[],byte[],int,int)" class="com.itextpdf.text.pdf.interfaces.PdfEncryptionSettings" />
		<method signature="void setEncryption(java.security.cert.Certificate[],int[],int)" class="com.itextpdf.text.pdf.interfaces.PdfEncryptionSettings" />
		<method signature="void setPageAction(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfAction)" class="com.itextpdf.text.pdf.interfaces.PdfPageActions" />
		<method signature="void setDuration(int)" class="com.itextpdf.text.pdf.interfaces.PdfPageActions" />
		<method signature="void setTransition(com.itextpdf.text.pdf.PdfTransition)" class="com.itextpdf.text.pdf.interfaces.PdfPageActions" />
		<method signature="void setRunDirection(int)" class="com.itextpdf.text.pdf.interfaces.PdfRunDirection" />
		<method signature="int getRunDirection()" class="com.itextpdf.text.pdf.interfaces.PdfRunDirection" />
		<method signature="void setPdfVersion(char)" class="com.itextpdf.text.pdf.interfaces.PdfVersion" />
		<method signature="void setAtLeastPdfVersion(char)" class="com.itextpdf.text.pdf.interfaces.PdfVersion" />
		<method signature="void setPdfVersion(com.itextpdf.text.pdf.PdfName)" class="com.itextpdf.text.pdf.interfaces.PdfVersion" />
		<method signature="void addDeveloperExtension(com.itextpdf.text.pdf.PdfDeveloperExtension)" class="com.itextpdf.text.pdf.interfaces.PdfVersion" />
		<method signature="void setViewerPreferences(int)" class="com.itextpdf.text.pdf.interfaces.PdfViewerPreferences" />
		<method signature="void addViewerPreference(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfObject)" class="com.itextpdf.text.pdf.interfaces.PdfViewerPreferences" />
		<method signature="void setPDFXConformance(int)" class="com.itextpdf.text.pdf.interfaces.PdfXConformance" />
		<class name="com.itextpdf.text.pdf.internal.PdfA1Checker" />
		<class name="com.itextpdf.text.pdf.internal.PdfA2Checker" />
		<class name="com.itextpdf.text.pdf.internal.PdfA3Checker" />
		<class name="com.itextpdf.text.pdf.internal.PdfAChecker" />
		<class name="com.itextpdf.text.pdf.internal.PdfAConformanceImp$1" />
		<class name="com.itextpdf.text.pdf.internal.PdfAConformanceImp" />
		<method signature="void setSigFlags(int)" class="com.itextpdf.text.pdf.internal.PdfAnnotationsImp" />
		<method signature="void addCalculationOrder(com.itextpdf.text.pdf.PdfFormField)" class="com.itextpdf.text.pdf.internal.PdfAnnotationsImp" />
		<class name="com.itextpdf.text.pdf.internal.PdfIsoKeys" />
		<method signature="void setPdfVersion(char)" class="com.itextpdf.text.pdf.internal.PdfVersionImp" />
		<method signature="void setAtLeastPdfVersion(char)" class="com.itextpdf.text.pdf.internal.PdfVersionImp" />
		<method signature="void setPdfVersion(com.itextpdf.text.pdf.PdfName)" class="com.itextpdf.text.pdf.internal.PdfVersionImp" />
		<method signature="void setAppendmode(boolean)" class="com.itextpdf.text.pdf.internal.PdfVersionImp" />
		<method signature="void addDeveloperExtension(com.itextpdf.text.pdf.PdfDeveloperExtension)" class="com.itextpdf.text.pdf.internal.PdfVersionImp" />
		<field name="viewerPreferencesMask" class="com.itextpdf.text.pdf.internal.PdfViewerPreferencesImp" />
		<method signature="int getPageLayoutAndMode()" class="com.itextpdf.text.pdf.internal.PdfViewerPreferencesImp" />
		<method signature="com.itextpdf.text.pdf.PdfDictionary getViewerPreferences()" class="com.itextpdf.text.pdf.internal.PdfViewerPreferencesImp" />
		<method signature="void setViewerPreferences(int)" class="com.itextpdf.text.pdf.internal.PdfViewerPreferencesImp" />
		<method signature="int getIndex(com.itextpdf.text.pdf.PdfName)" class="com.itextpdf.text.pdf.internal.PdfViewerPreferencesImp" />
		<method signature="boolean isPossibleValue(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfName[])" class="com.itextpdf.text.pdf.internal.PdfViewerPreferencesImp" />
		<method signature="void addViewerPreference(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfObject)" class="com.itextpdf.text.pdf.internal.PdfViewerPreferencesImp" />
		<method signature="com.itextpdf.text.pdf.internal.PdfViewerPreferencesImp getViewerPreferences(com.itextpdf.text.pdf.PdfDictionary)" class="com.itextpdf.text.pdf.internal.PdfViewerPreferencesImp" />
		<method signature="void setPDFXConformance(int)" class="com.itextpdf.text.pdf.internal.PdfXConformanceImp" />
		<class name="com.itextpdf.text.pdf.internal.ZugferdChecker" />
		<field name="ALEF" class="com.itextpdf.text.pdf.languages.ArabicLigaturizer" />
		<field name="ALEFHAMZA" class="com.itextpdf.text.pdf.languages.ArabicLigaturizer" />
		<field name="ALEFHAMZABELOW" class="com.itextpdf.text.pdf.languages.ArabicLigaturizer" />
		<field name="ALEFMADDA" class="com.itextpdf.text.pdf.languages.ArabicLigaturizer" />
		<field name="LAM" class="com.itextpdf.text.pdf.languages.ArabicLigaturizer" />
		<field name="HAMZA" class="com.itextpdf.text.pdf.languages.ArabicLigaturizer" />
		<field name="TATWEEL" class="com.itextpdf.text.pdf.languages.ArabicLigaturizer" />
		<field name="ZWJ" class="com.itextpdf.text.pdf.languages.ArabicLigaturizer" />
		<field name="HAMZAABOVE" class="com.itextpdf.text.pdf.languages.ArabicLigaturizer" />
		<field name="HAMZABELOW" class="com.itextpdf.text.pdf.languages.ArabicLigaturizer" />
		<field name="WAWHAMZA" class="com.itextpdf.text.pdf.languages.ArabicLigaturizer" />
		<field name="YEHHAMZA" class="com.itextpdf.text.pdf.languages.ArabicLigaturizer" />
		<field name="WAW" class="com.itextpdf.text.pdf.languages.ArabicLigaturizer" />
		<field name="ALEFMAKSURA" class="com.itextpdf.text.pdf.languages.ArabicLigaturizer" />
		<field name="YEH" class="com.itextpdf.text.pdf.languages.ArabicLigaturizer" />
		<field name="FARSIYEH" class="com.itextpdf.text.pdf.languages.ArabicLigaturizer" />
		<field name="SHADDA" class="com.itextpdf.text.pdf.languages.ArabicLigaturizer" />
		<field name="KASRA" class="com.itextpdf.text.pdf.languages.ArabicLigaturizer" />
		<field name="FATHA" class="com.itextpdf.text.pdf.languages.ArabicLigaturizer" />
		<field name="DAMMA" class="com.itextpdf.text.pdf.languages.ArabicLigaturizer" />
		<field name="MADDA" class="com.itextpdf.text.pdf.languages.ArabicLigaturizer" />
		<field name="LAM_ALEF" class="com.itextpdf.text.pdf.languages.ArabicLigaturizer" />
		<field name="LAM_ALEFHAMZA" class="com.itextpdf.text.pdf.languages.ArabicLigaturizer" />
		<field name="LAM_ALEFHAMZABELOW" class="com.itextpdf.text.pdf.languages.ArabicLigaturizer" />
		<field name="LAM_ALEFMADDA" class="com.itextpdf.text.pdf.languages.ArabicLigaturizer" />
		<field name="ar_nothing" class="com.itextpdf.text.pdf.languages.ArabicLigaturizer" />
		<field name="ar_novowel" class="com.itextpdf.text.pdf.languages.ArabicLigaturizer" />
		<field name="ar_composedtashkeel" class="com.itextpdf.text.pdf.languages.ArabicLigaturizer" />
		<field name="ar_lig" class="com.itextpdf.text.pdf.languages.ArabicLigaturizer" />
		<field name="DIGITS_EN2AN" class="com.itextpdf.text.pdf.languages.ArabicLigaturizer" />
		<field name="DIGITS_AN2EN" class="com.itextpdf.text.pdf.languages.ArabicLigaturizer" />
		<field name="DIGITS_EN2AN_INIT_LR" class="com.itextpdf.text.pdf.languages.ArabicLigaturizer" />
		<field name="DIGITS_EN2AN_INIT_AL" class="com.itextpdf.text.pdf.languages.ArabicLigaturizer" />
		<field name="DIGITS_RESERVED" class="com.itextpdf.text.pdf.languages.ArabicLigaturizer" />
		<field name="DIGITS_MASK" class="com.itextpdf.text.pdf.languages.ArabicLigaturizer" />
		<field name="DIGIT_TYPE_AN" class="com.itextpdf.text.pdf.languages.ArabicLigaturizer" />
		<field name="DIGIT_TYPE_AN_EXTENDED" class="com.itextpdf.text.pdf.languages.ArabicLigaturizer" />
		<field name="DIGIT_TYPE_MASK" class="com.itextpdf.text.pdf.languages.ArabicLigaturizer" />
		<field name="options" class="com.itextpdf.text.pdf.languages.ArabicLigaturizer" />
		<field name="runDirection" class="com.itextpdf.text.pdf.languages.ArabicLigaturizer" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.text.pdf.languages.ArabicLigaturizer" />
		<method signature="void &lt;init&gt;(int,int)" class="com.itextpdf.text.pdf.languages.ArabicLigaturizer" />
		<method signature="java.lang.String process(java.lang.String)" class="com.itextpdf.text.pdf.languages.ArabicLigaturizer" />
		<method signature="boolean isRTL()" class="com.itextpdf.text.pdf.languages.ArabicLigaturizer" />
		<class name="com.itextpdf.text.pdf.languages.DevanagariLigaturizer" />
		<class name="com.itextpdf.text.pdf.languages.GujaratiLigaturizer" />
		<class name="com.itextpdf.text.pdf.languages.HebrewProcessor" />
		<class name="com.itextpdf.text.pdf.languages.IndicLigaturizer" />
		<method signature="java.lang.String process(java.lang.String)" class="com.itextpdf.text.pdf.languages.LanguageProcessor" />
		<method signature="boolean isRTL()" class="com.itextpdf.text.pdf.languages.LanguageProcessor" />
		<class name="com.itextpdf.text.pdf.mc.MCFieldFlattener" />
		<class name="com.itextpdf.text.pdf.mc.MCParser$1" />
		<class name="com.itextpdf.text.pdf.mc.MCParser$BeginMarkedContentDictionaryOperator" />
		<class name="com.itextpdf.text.pdf.mc.MCParser$BeginTextOperator" />
		<class name="com.itextpdf.text.pdf.mc.MCParser$CopyContentOperator" />
		<class name="com.itextpdf.text.pdf.mc.MCParser$DoOperator" />
		<class name="com.itextpdf.text.pdf.mc.MCParser$EndTextOperator" />
		<class name="com.itextpdf.text.pdf.mc.MCParser$PdfOperator" />
		<class name="com.itextpdf.text.pdf.mc.MCParser$TextNewLineOperator" />
		<class name="com.itextpdf.text.pdf.mc.MCParser$TextPositioningOperator" />
		<class name="com.itextpdf.text.pdf.mc.MCParser$TextStateOperator" />
		<class name="com.itextpdf.text.pdf.mc.MCParser" />
		<class name="com.itextpdf.text.pdf.mc.StructureItem" />
		<class name="com.itextpdf.text.pdf.mc.StructureItems" />
		<class name="com.itextpdf.text.pdf.mc.StructureMCID" />
		<class name="com.itextpdf.text.pdf.mc.StructureObject" />
		<class name="com.itextpdf.text.pdf.ocg.OCGParser$1" />
		<class name="com.itextpdf.text.pdf.ocg.OCGParser$CopyContentOperator" />
		<class name="com.itextpdf.text.pdf.ocg.OCGParser$GraphicsOperator" />
		<class name="com.itextpdf.text.pdf.ocg.OCGParser$InlineImageOperator" />
		<class name="com.itextpdf.text.pdf.ocg.OCGParser$MarkedContentOperator" />
		<class name="com.itextpdf.text.pdf.ocg.OCGParser$PathConstructionOrPaintingOperator" />
		<class name="com.itextpdf.text.pdf.ocg.OCGParser$PdfOperator" />
		<class name="com.itextpdf.text.pdf.ocg.OCGParser$TextOperator" />
		<class name="com.itextpdf.text.pdf.ocg.OCGParser$XObjectOperator" />
		<class name="com.itextpdf.text.pdf.ocg.OCGParser" />
		<class name="com.itextpdf.text.pdf.ocg.OCGRemover" />
		<class name="com.itextpdf.text.pdf.parser.BezierCurve" />
		<class name="com.itextpdf.text.pdf.parser.ContentByteUtils" />
		<class name="com.itextpdf.text.pdf.parser.ContentOperator" />
		<class name="com.itextpdf.text.pdf.parser.ExtRenderListener" />
		<class name="com.itextpdf.text.pdf.parser.FilteredRenderListener" />
		<class name="com.itextpdf.text.pdf.parser.FilteredTextRenderListener" />
		<class name="com.itextpdf.text.pdf.parser.GlyphRenderListener" />
		<class name="com.itextpdf.text.pdf.parser.GlyphTextRenderListener" />
		<class name="com.itextpdf.text.pdf.parser.GraphicsState" />
		<class name="com.itextpdf.text.pdf.parser.ImageRenderInfo" />
		<class name="com.itextpdf.text.pdf.parser.InlineImageInfo" />
		<class name="com.itextpdf.text.pdf.parser.InlineImageUtils$InlineImageParseException" />
		<class name="com.itextpdf.text.pdf.parser.InlineImageUtils" />
		<class name="com.itextpdf.text.pdf.parser.Line" />
		<class name="com.itextpdf.text.pdf.parser.LineDashPattern$DashArrayElem" />
		<class name="com.itextpdf.text.pdf.parser.LineDashPattern" />
		<class name="com.itextpdf.text.pdf.parser.LineSegment" />
		<class name="com.itextpdf.text.pdf.parser.LocationTextExtractionStrategy$1" />
		<class name="com.itextpdf.text.pdf.parser.LocationTextExtractionStrategy$TextChunk" />
		<class name="com.itextpdf.text.pdf.parser.LocationTextExtractionStrategy$TextChunkFilter" />
		<class name="com.itextpdf.text.pdf.parser.LocationTextExtractionStrategy$TextChunkLocation" />
		<class name="com.itextpdf.text.pdf.parser.LocationTextExtractionStrategy$TextChunkLocationDefaultImp" />
		<class name="com.itextpdf.text.pdf.parser.LocationTextExtractionStrategy$TextChunkLocationStrategy" />
		<class name="com.itextpdf.text.pdf.parser.LocationTextExtractionStrategy" />
		<class name="com.itextpdf.text.pdf.parser.MarkedContentInfo" />
		<class name="com.itextpdf.text.pdf.parser.MarkedContentRenderFilter" />
		<class name="com.itextpdf.text.pdf.parser.Matrix" />
		<class name="com.itextpdf.text.pdf.parser.MultiFilteredRenderListener" />
		<class name="com.itextpdf.text.pdf.parser.Path" />
		<class name="com.itextpdf.text.pdf.parser.PathConstructionRenderInfo" />
		<class name="com.itextpdf.text.pdf.parser.PathPaintingRenderInfo" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentReaderTool" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$1" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$BeginMarkedContent" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$BeginMarkedContentDictionary" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$BeginText" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$ClipPath" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$CloseSubpath" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$Curve" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$CurveFirstPointDuplicated" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$CurveFourhPointDuplicated" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$Do" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$EndMarkedContent" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$EndPath" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$EndText" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$FormXObjectDoHandler" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$IgnoreOperatorContentOperator" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$IgnoreXObjectDoHandler" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$ImageXObjectDoHandler" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$LineTo" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$ModifyCurrentTransformationMatrix" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$MoveNextLineAndShowText" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$MoveNextLineAndShowTextWithSpacing" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$MoveTo" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$PaintPath" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$PopGraphicsState" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$ProcessGraphicsStateResource" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$PushGraphicsState" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$Rectangle" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$ResourceDictionary" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$SetCMYKFill" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$SetCMYKStroke" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$SetColorFill" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$SetColorSpaceFill" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$SetColorSpaceStroke" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$SetColorStroke" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$SetGrayFill" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$SetGrayStroke" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$SetLineCap" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$SetLineDashPattern" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$SetLineJoin" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$SetLineWidth" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$SetMiterLimit" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$SetRGBFill" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$SetRGBStroke" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$SetTextCharacterSpacing" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$SetTextFont" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$SetTextHorizontalScaling" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$SetTextLeading" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$SetTextRenderMode" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$SetTextRise" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$SetTextWordSpacing" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$ShowText" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$ShowTextArray" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$TextMoveNextLine" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$TextMoveStartNextLine" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$TextMoveStartNextLineWithLeading" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor$TextSetTextMatrix" />
		<class name="com.itextpdf.text.pdf.parser.PdfContentStreamProcessor" />
		<class name="com.itextpdf.text.pdf.parser.PdfImageObject$1" />
		<class name="com.itextpdf.text.pdf.parser.PdfImageObject$ImageBytesType" />
		<class name="com.itextpdf.text.pdf.parser.PdfImageObject$TrackingFilter" />
		<class name="com.itextpdf.text.pdf.parser.PdfImageObject" />
		<class name="com.itextpdf.text.pdf.parser.PdfReaderContentParser" />
		<class name="com.itextpdf.text.pdf.parser.PdfTextExtractor" />
		<class name="com.itextpdf.text.pdf.parser.RegionTextRenderFilter" />
		<class name="com.itextpdf.text.pdf.parser.RenderFilter" />
		<class name="com.itextpdf.text.pdf.parser.RenderListener" />
		<class name="com.itextpdf.text.pdf.parser.Shape" />
		<class name="com.itextpdf.text.pdf.parser.SimpleTextExtractionStrategy" />
		<class name="com.itextpdf.text.pdf.parser.Subpath" />
		<class name="com.itextpdf.text.pdf.parser.TaggedPdfReaderTool" />
		<class name="com.itextpdf.text.pdf.parser.TextExtractionStrategy" />
		<class name="com.itextpdf.text.pdf.parser.TextMarginFinder" />
		<class name="com.itextpdf.text.pdf.parser.TextRenderInfo" />
		<class name="com.itextpdf.text.pdf.parser.Vector" />
		<class name="com.itextpdf.text.pdf.parser.XObjectDoHandler" />
		<class name="com.itextpdf.text.pdf.parser.clipper.Clipper$ClipType" />
		<class name="com.itextpdf.text.pdf.parser.clipper.Clipper$Direction" />
		<class name="com.itextpdf.text.pdf.parser.clipper.Clipper$EndType" />
		<class name="com.itextpdf.text.pdf.parser.clipper.Clipper$JoinType" />
		<class name="com.itextpdf.text.pdf.parser.clipper.Clipper$PolyFillType" />
		<class name="com.itextpdf.text.pdf.parser.clipper.Clipper$PolyType" />
		<class name="com.itextpdf.text.pdf.parser.clipper.Clipper$ZFillCallback" />
		<class name="com.itextpdf.text.pdf.parser.clipper.Clipper" />
		<class name="com.itextpdf.text.pdf.parser.clipper.ClipperBase$LocalMinima" />
		<class name="com.itextpdf.text.pdf.parser.clipper.ClipperBase$Scanbeam" />
		<class name="com.itextpdf.text.pdf.parser.clipper.ClipperBase" />
		<class name="com.itextpdf.text.pdf.parser.clipper.ClipperOffset$1" />
		<class name="com.itextpdf.text.pdf.parser.clipper.ClipperOffset" />
		<class name="com.itextpdf.text.pdf.parser.clipper.DefaultClipper$1" />
		<class name="com.itextpdf.text.pdf.parser.clipper.DefaultClipper$2" />
		<class name="com.itextpdf.text.pdf.parser.clipper.DefaultClipper$IntersectNode" />
		<class name="com.itextpdf.text.pdf.parser.clipper.DefaultClipper" />
		<class name="com.itextpdf.text.pdf.parser.clipper.Edge$1" />
		<class name="com.itextpdf.text.pdf.parser.clipper.Edge$Side" />
		<class name="com.itextpdf.text.pdf.parser.clipper.Edge" />
		<class name="com.itextpdf.text.pdf.parser.clipper.LongRect" />
		<class name="com.itextpdf.text.pdf.parser.clipper.Path$Join" />
		<class name="com.itextpdf.text.pdf.parser.clipper.Path$Maxima" />
		<class name="com.itextpdf.text.pdf.parser.clipper.Path$OutPt" />
		<class name="com.itextpdf.text.pdf.parser.clipper.Path$OutRec" />
		<class name="com.itextpdf.text.pdf.parser.clipper.Path" />
		<class name="com.itextpdf.text.pdf.parser.clipper.Paths$1" />
		<class name="com.itextpdf.text.pdf.parser.clipper.Paths" />
		<class name="com.itextpdf.text.pdf.parser.clipper.Point$1" />
		<class name="com.itextpdf.text.pdf.parser.clipper.Point$DoublePoint" />
		<class name="com.itextpdf.text.pdf.parser.clipper.Point$LongPoint" />
		<class name="com.itextpdf.text.pdf.parser.clipper.Point$NumberComparator" />
		<class name="com.itextpdf.text.pdf.parser.clipper.Point" />
		<class name="com.itextpdf.text.pdf.parser.clipper.PolyNode$NodeType" />
		<class name="com.itextpdf.text.pdf.parser.clipper.PolyNode" />
		<class name="com.itextpdf.text.pdf.parser.clipper.PolyTree" />
		<class name="com.itextpdf.text.pdf.pdfcleanup.PdfCleanUpContentChunk$Image" />
		<class name="com.itextpdf.text.pdf.pdfcleanup.PdfCleanUpContentChunk$Text" />
		<class name="com.itextpdf.text.pdf.pdfcleanup.PdfCleanUpContentChunk" />
		<class name="com.itextpdf.text.pdf.pdfcleanup.PdfCleanUpContentOperator$1" />
		<class name="com.itextpdf.text.pdf.pdfcleanup.PdfCleanUpContentOperator" />
		<class name="com.itextpdf.text.pdf.pdfcleanup.PdfCleanUpContext" />
		<class name="com.itextpdf.text.pdf.pdfcleanup.PdfCleanUpLocation" />
		<class name="com.itextpdf.text.pdf.pdfcleanup.PdfCleanUpProcessor$1" />
		<class name="com.itextpdf.text.pdf.pdfcleanup.PdfCleanUpProcessor" />
		<class name="com.itextpdf.text.pdf.pdfcleanup.PdfCleanUpRegionFilter$1" />
		<class name="com.itextpdf.text.pdf.pdfcleanup.PdfCleanUpRegionFilter$StandardLine" />
		<class name="com.itextpdf.text.pdf.pdfcleanup.PdfCleanUpRegionFilter" />
		<class name="com.itextpdf.text.pdf.pdfcleanup.PdfCleanUpRenderListener" />
		<class name="com.itextpdf.text.pdf.qrcode.BitArray" />
		<class name="com.itextpdf.text.pdf.qrcode.BitMatrix" />
		<class name="com.itextpdf.text.pdf.qrcode.BitVector" />
		<class name="com.itextpdf.text.pdf.qrcode.BlockPair" />
		<class name="com.itextpdf.text.pdf.qrcode.ByteArray" />
		<class name="com.itextpdf.text.pdf.qrcode.ByteMatrix" />
		<class name="com.itextpdf.text.pdf.qrcode.CharacterSetECI" />
		<class name="com.itextpdf.text.pdf.qrcode.EncodeHintType" />
		<class name="com.itextpdf.text.pdf.qrcode.Encoder" />
		<class name="com.itextpdf.text.pdf.qrcode.ErrorCorrectionLevel" />
		<class name="com.itextpdf.text.pdf.qrcode.FormatInformation" />
		<class name="com.itextpdf.text.pdf.qrcode.GF256" />
		<class name="com.itextpdf.text.pdf.qrcode.GF256Poly" />
		<class name="com.itextpdf.text.pdf.qrcode.MaskUtil" />
		<class name="com.itextpdf.text.pdf.qrcode.MatrixUtil" />
		<class name="com.itextpdf.text.pdf.qrcode.Mode" />
		<class name="com.itextpdf.text.pdf.qrcode.QRCode" />
		<class name="com.itextpdf.text.pdf.qrcode.QRCodeWriter" />
		<class name="com.itextpdf.text.pdf.qrcode.ReedSolomonEncoder" />
		<class name="com.itextpdf.text.pdf.qrcode.ReedSolomonException" />
		<class name="com.itextpdf.text.pdf.qrcode.Version$ECB" />
		<class name="com.itextpdf.text.pdf.qrcode.Version$ECBlocks" />
		<class name="com.itextpdf.text.pdf.qrcode.Version" />
		<class name="com.itextpdf.text.pdf.qrcode.WriterException" />
		<class name="com.itextpdf.text.pdf.richmedia.CuePoint" />
		<class name="com.itextpdf.text.pdf.richmedia.RichMediaActivation" />
		<class name="com.itextpdf.text.pdf.richmedia.RichMediaAnimation" />
		<class name="com.itextpdf.text.pdf.richmedia.RichMediaAnnotation" />
		<class name="com.itextpdf.text.pdf.richmedia.RichMediaCommand" />
		<class name="com.itextpdf.text.pdf.richmedia.RichMediaConfiguration" />
		<class name="com.itextpdf.text.pdf.richmedia.RichMediaDeactivation" />
		<class name="com.itextpdf.text.pdf.richmedia.RichMediaExecuteAction" />
		<class name="com.itextpdf.text.pdf.richmedia.RichMediaInstance" />
		<class name="com.itextpdf.text.pdf.richmedia.RichMediaParams" />
		<class name="com.itextpdf.text.pdf.richmedia.RichMediaPosition" />
		<class name="com.itextpdf.text.pdf.richmedia.RichMediaPresentation" />
		<class name="com.itextpdf.text.pdf.richmedia.RichMediaWindow" />
		<class name="com.itextpdf.text.pdf.security.BouncyCastleDigest" />
		<class name="com.itextpdf.text.pdf.security.CRLVerifier" />
		<class name="com.itextpdf.text.pdf.security.CertificateInfo$X500Name" />
		<class name="com.itextpdf.text.pdf.security.CertificateInfo$X509NameTokenizer" />
		<class name="com.itextpdf.text.pdf.security.CertificateInfo" />
		<class name="com.itextpdf.text.pdf.security.CertificateUtil" />
		<class name="com.itextpdf.text.pdf.security.CertificateVerification" />
		<class name="com.itextpdf.text.pdf.security.CertificateVerifier" />
		<class name="com.itextpdf.text.pdf.security.CrlClient" />
		<class name="com.itextpdf.text.pdf.security.CrlClientOffline" />
		<class name="com.itextpdf.text.pdf.security.CrlClientOnline" />
		<class name="com.itextpdf.text.pdf.security.DigestAlgorithms" />
		<class name="com.itextpdf.text.pdf.security.EncryptionAlgorithms" />
		<class name="com.itextpdf.text.pdf.security.ExternalBlankSignatureContainer" />
		<class name="com.itextpdf.text.pdf.security.ExternalDecryptionProcess" />
		<class name="com.itextpdf.text.pdf.security.ExternalDigest" />
		<class name="com.itextpdf.text.pdf.security.ExternalSignature" />
		<class name="com.itextpdf.text.pdf.security.ExternalSignatureContainer" />
		<class name="com.itextpdf.text.pdf.security.KeyStoreUtil" />
		<class name="com.itextpdf.text.pdf.security.LtvTimestamp" />
		<class name="com.itextpdf.text.pdf.security.LtvVerification$1" />
		<class name="com.itextpdf.text.pdf.security.LtvVerification$CertificateInclusion" />
		<class name="com.itextpdf.text.pdf.security.LtvVerification$CertificateOption" />
		<class name="com.itextpdf.text.pdf.security.LtvVerification$Level" />
		<class name="com.itextpdf.text.pdf.security.LtvVerification$ValidationData" />
		<class name="com.itextpdf.text.pdf.security.LtvVerification" />
		<class name="com.itextpdf.text.pdf.security.LtvVerifier" />
		<class name="com.itextpdf.text.pdf.security.MakeSignature$CryptoStandard" />
		<class name="com.itextpdf.text.pdf.security.MakeSignature" />
		<class name="com.itextpdf.text.pdf.security.MakeXmlSignature$EmptyKey" />
		<class name="com.itextpdf.text.pdf.security.MakeXmlSignature" />
		<class name="com.itextpdf.text.pdf.security.OCSPVerifier" />
		<class name="com.itextpdf.text.pdf.security.OcspClient" />
		<class name="com.itextpdf.text.pdf.security.OcspClientBouncyCastle" />
		<class name="com.itextpdf.text.pdf.security.PdfPKCS7" />
		<class name="com.itextpdf.text.pdf.security.PdfSignatureAppDictionary" />
		<class name="com.itextpdf.text.pdf.security.PdfSignatureBuildProperties" />
		<class name="com.itextpdf.text.pdf.security.PrivateKeySignature" />
		<class name="com.itextpdf.text.pdf.security.ProviderDigest" />
		<class name="com.itextpdf.text.pdf.security.RootStoreVerifier" />
		<class name="com.itextpdf.text.pdf.security.SecurityConstants" />
		<class name="com.itextpdf.text.pdf.security.SecurityIDs" />
		<class name="com.itextpdf.text.pdf.security.SignaturePermissions$FieldLock" />
		<class name="com.itextpdf.text.pdf.security.SignaturePermissions" />
		<class name="com.itextpdf.text.pdf.security.TSAClient" />
		<class name="com.itextpdf.text.pdf.security.TSAClientBouncyCastle" />
		<class name="com.itextpdf.text.pdf.security.TSAInfoBouncyCastle" />
		<class name="com.itextpdf.text.pdf.security.VerificationException" />
		<class name="com.itextpdf.text.pdf.security.VerificationOK" />
		<class name="com.itextpdf.text.pdf.security.XmlLocator" />
		<class name="com.itextpdf.text.pdf.security.XpathConstructor" />
		<class name="com.itextpdf.text.pdf.spatial.CoordinateSystem" />
		<class name="com.itextpdf.text.pdf.spatial.GeographicCoordinateSystem" />
		<class name="com.itextpdf.text.pdf.spatial.Measure" />
		<class name="com.itextpdf.text.pdf.spatial.MeasureGeospatial" />
		<class name="com.itextpdf.text.pdf.spatial.MeasureRectilinear" />
		<class name="com.itextpdf.text.pdf.spatial.PointData" />
		<class name="com.itextpdf.text.pdf.spatial.ProjectedCoordinateSystem" />
		<class name="com.itextpdf.text.pdf.spatial.Viewport" />
		<class name="com.itextpdf.text.pdf.spatial.objects.NumberFormatArray" />
		<class name="com.itextpdf.text.pdf.spatial.objects.NumberFormatDictionary" />
		<class name="com.itextpdf.text.pdf.spatial.objects.XYArray" />
		<class name="com.itextpdf.text.pdf.spatial.units.Angular" />
		<class name="com.itextpdf.text.pdf.spatial.units.Fraction" />
		<class name="com.itextpdf.text.pdf.spatial.units.Linear" />
		<class name="com.itextpdf.text.pdf.spatial.units.PtIdentifier" />
		<class name="com.itextpdf.text.pdf.spatial.units.Square" />
		<class name="com.itextpdf.text.pdf.util.PdfResourceCounter" />
		<class name="com.itextpdf.text.pdf.util.SmartPdfSplitter" />
		<class name="com.itextpdf.text.xml.XMLUtil" />
		<class name="com.itextpdf.text.xml.XmlDomWriter" />
		<class name="com.itextpdf.text.xml.XmlToTxt" />
		<class name="com.itextpdf.text.xml.simpleparser.EntitiesToSymbol" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.text.xml.simpleparser.EntitiesToUnicode" />
		<method signature="java.lang.String decodeString(java.lang.String)" class="com.itextpdf.text.xml.simpleparser.EntitiesToUnicode" />
		<class name="com.itextpdf.text.xml.simpleparser.IanaEncodings" />
		<class name="com.itextpdf.text.xml.simpleparser.NewLineHandler" />
		<method signature="void startElement(java.lang.String,java.util.Map)" class="com.itextpdf.text.xml.simpleparser.SimpleXMLDocHandler" />
		<method signature="void endElement(java.lang.String)" class="com.itextpdf.text.xml.simpleparser.SimpleXMLDocHandler" />
		<method signature="void startDocument()" class="com.itextpdf.text.xml.simpleparser.SimpleXMLDocHandler" />
		<method signature="void endDocument()" class="com.itextpdf.text.xml.simpleparser.SimpleXMLDocHandler" />
		<method signature="void text(java.lang.String)" class="com.itextpdf.text.xml.simpleparser.SimpleXMLDocHandler" />
		<class name="com.itextpdf.text.xml.simpleparser.SimpleXMLDocHandlerComment" />
		<class name="com.itextpdf.text.xml.simpleparser.SimpleXMLParser" />
		<class name="com.itextpdf.text.xml.simpleparser.handler.HTMLNewLineHandler" />
		<class name="com.itextpdf.text.xml.simpleparser.handler.NeverNewLineHandler" />
		<class name="com.itextpdf.text.xml.xmp.DublinCoreProperties" />
		<class name="com.itextpdf.text.xml.xmp.DublinCoreSchema" />
		<class name="com.itextpdf.text.xml.xmp.LangAlt" />
		<class name="com.itextpdf.text.xml.xmp.PdfAProperties" />
		<class name="com.itextpdf.text.xml.xmp.PdfASchema" />
		<class name="com.itextpdf.text.xml.xmp.PdfAXmpWriter$1" />
		<class name="com.itextpdf.text.xml.xmp.PdfAXmpWriter" />
		<class name="com.itextpdf.text.xml.xmp.PdfProperties" />
		<class name="com.itextpdf.text.xml.xmp.PdfSchema" />
		<class name="com.itextpdf.text.xml.xmp.XmpArray" />
		<class name="com.itextpdf.text.xml.xmp.XmpBasicProperties" />
		<class name="com.itextpdf.text.xml.xmp.XmpBasicSchema" />
		<class name="com.itextpdf.text.xml.xmp.XmpMMProperties" />
		<class name="com.itextpdf.text.xml.xmp.XmpMMSchema" />
		<class name="com.itextpdf.text.xml.xmp.XmpReader" />
		<class name="com.itextpdf.text.xml.xmp.XmpSchema" />
		<field name="UTF8" class="com.itextpdf.text.xml.xmp.XmpWriter" />
		<field name="UTF16" class="com.itextpdf.text.xml.xmp.XmpWriter" />
		<field name="UTF16BE" class="com.itextpdf.text.xml.xmp.XmpWriter" />
		<field name="UTF16LE" class="com.itextpdf.text.xml.xmp.XmpWriter" />
		<field name="xmpMeta" class="com.itextpdf.text.xml.xmp.XmpWriter" />
		<field name="outputStream" class="com.itextpdf.text.xml.xmp.XmpWriter" />
		<field name="serializeOptions" class="com.itextpdf.text.xml.xmp.XmpWriter" />
		<method signature="void &lt;init&gt;(java.io.OutputStream,java.lang.String,int)" class="com.itextpdf.text.xml.xmp.XmpWriter" />
		<method signature="void &lt;init&gt;(java.io.OutputStream)" class="com.itextpdf.text.xml.xmp.XmpWriter" />
		<method signature="void &lt;init&gt;(java.io.OutputStream,com.itextpdf.text.pdf.PdfDictionary)" class="com.itextpdf.text.xml.xmp.XmpWriter" />
		<method signature="void &lt;init&gt;(java.io.OutputStream,java.util.Map)" class="com.itextpdf.text.xml.xmp.XmpWriter" />
		<method signature="com.itextpdf.xmp.XMPMeta getXmpMeta()" class="com.itextpdf.text.xml.xmp.XmpWriter" />
		<method signature="void setReadOnly()" class="com.itextpdf.text.xml.xmp.XmpWriter" />
		<method signature="void setAbout(java.lang.String)" class="com.itextpdf.text.xml.xmp.XmpWriter" />
		<method signature="void addRdfDescription(java.lang.String,java.lang.String)" class="com.itextpdf.text.xml.xmp.XmpWriter" />
		<method signature="void addRdfDescription(com.itextpdf.text.xml.xmp.XmpSchema)" class="com.itextpdf.text.xml.xmp.XmpWriter" />
		<method signature="void setProperty(java.lang.String,java.lang.String,java.lang.Object)" class="com.itextpdf.text.xml.xmp.XmpWriter" />
		<method signature="void appendArrayItem(java.lang.String,java.lang.String,java.lang.String)" class="com.itextpdf.text.xml.xmp.XmpWriter" />
		<method signature="void appendOrderedArrayItem(java.lang.String,java.lang.String,java.lang.String)" class="com.itextpdf.text.xml.xmp.XmpWriter" />
		<method signature="void appendAlternateArrayItem(java.lang.String,java.lang.String,java.lang.String)" class="com.itextpdf.text.xml.xmp.XmpWriter" />
		<method signature="void addDocInfoProperty(java.lang.Object,java.lang.String)" class="com.itextpdf.text.xml.xmp.XmpWriter" />
		<class name="com.itextpdf.text.zugferd.InvoiceDOM" />
		<class name="com.itextpdf.text.zugferd.checkers.CodeValidation" />
		<class name="com.itextpdf.text.zugferd.checkers.NumberChecker" />
		<class name="com.itextpdf.text.zugferd.checkers.basic.CountryCode" />
		<class name="com.itextpdf.text.zugferd.checkers.basic.CurrencyCode" />
		<class name="com.itextpdf.text.zugferd.checkers.basic.DateFormatCode" />
		<class name="com.itextpdf.text.zugferd.checkers.basic.DocumentTypeCode" />
		<class name="com.itextpdf.text.zugferd.checkers.basic.LanguageCode" />
		<class name="com.itextpdf.text.zugferd.checkers.basic.MeasurementUnitCode" />
		<class name="com.itextpdf.text.zugferd.checkers.basic.TaxIDTypeCode" />
		<class name="com.itextpdf.text.zugferd.checkers.basic.TaxTypeCode" />
		<class name="com.itextpdf.text.zugferd.checkers.comfort.FreeTextSubjectCode" />
		<class name="com.itextpdf.text.zugferd.checkers.comfort.GlobalIdentifierCode" />
		<class name="com.itextpdf.text.zugferd.checkers.comfort.PaymentMeansCode" />
		<class name="com.itextpdf.text.zugferd.checkers.comfort.TaxCategoryCode" />
		<class name="com.itextpdf.text.zugferd.checkers.extended.AdditionalReferencedDocumentsCode" />
		<class name="com.itextpdf.text.zugferd.checkers.extended.AllowanceChargeReasonCode" />
		<class name="com.itextpdf.text.zugferd.checkers.extended.IncotermsCode" />
		<class name="com.itextpdf.text.zugferd.checkers.extended.ProductClassificationSystemCode" />
		<class name="com.itextpdf.text.zugferd.checkers.extended.QuantityCode" />
		<class name="com.itextpdf.text.zugferd.checkers.extended.TransportIdentificationCode" />
		<class name="com.itextpdf.text.zugferd.checkers.extended.TransportMeansCode" />
		<class name="com.itextpdf.text.zugferd.exceptions.DataIncompleteException" />
		<class name="com.itextpdf.text.zugferd.exceptions.InvalidCodeException" />
		<class name="com.itextpdf.text.zugferd.profiles.BasicProfile" />
		<class name="com.itextpdf.text.zugferd.profiles.BasicProfileImp" />
		<class name="com.itextpdf.text.zugferd.profiles.ComfortProfile" />
		<class name="com.itextpdf.text.zugferd.profiles.ComfortProfileImp" />
		<class name="com.itextpdf.tool.xml.ElementHandler" />
		<class name="com.itextpdf.tool.xml.ElementList" />
		<class name="com.itextpdf.tool.xml.Experimental" />
		<field name="serialVersionUID" class="com.itextpdf.tool.xml.NoCustomContextException" />
		<method signature="void &lt;init&gt;(java.lang.String)" class="com.itextpdf.tool.xml.NoCustomContextException" />
		<method signature="void &lt;init&gt;(java.lang.Throwable)" class="com.itextpdf.tool.xml.NoCustomContextException" />
		<method signature="void &lt;init&gt;(java.lang.String,java.lang.Throwable)" class="com.itextpdf.tool.xml.NoCustomContextException" />
		<method signature="com.itextpdf.tool.xml.Pipeline getNext()" class="com.itextpdf.tool.xml.Pipeline" />
		<field name="serialVersionUID" class="com.itextpdf.tool.xml.PipelineException" />
		<method signature="void addAll(java.util.List)" class="com.itextpdf.tool.xml.ProcessObject" />
		<method signature="void &lt;init&gt;(java.lang.String,java.util.Map)" class="com.itextpdf.tool.xml.Tag" />
		<method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="com.itextpdf.tool.xml.Tag" />
		<method signature="java.lang.String getTag()" class="com.itextpdf.tool.xml.Tag" />
		<method signature="void setCSS(java.util.Map)" class="com.itextpdf.tool.xml.Tag" />
		<method signature="java.util.List getChildren(java.lang.String)" class="com.itextpdf.tool.xml.Tag" />
		<method signature="boolean compareTag(com.itextpdf.tool.xml.Tag)" class="com.itextpdf.tool.xml.Tag" />
		<method signature="com.itextpdf.tool.xml.Tag getChild(java.lang.String,java.lang.String)" class="com.itextpdf.tool.xml.Tag" />
		<method signature="com.itextpdf.tool.xml.Tag getChild(java.lang.String,java.lang.String,boolean)" class="com.itextpdf.tool.xml.Tag" />
		<method signature="boolean hasChildren()" class="com.itextpdf.tool.xml.Tag" />
		<method signature="boolean hasChild(java.lang.String,java.lang.String)" class="com.itextpdf.tool.xml.Tag" />
		<method signature="boolean hasChild(java.lang.String,java.lang.String,boolean)" class="com.itextpdf.tool.xml.Tag" />
		<method signature="boolean recursiveHasChild(com.itextpdf.tool.xml.Tag,java.lang.String,java.lang.String,boolean)" class="com.itextpdf.tool.xml.Tag" />
		<method signature="com.itextpdf.tool.xml.Tag recursiveGetChild(com.itextpdf.tool.xml.Tag,java.lang.String,java.lang.String,boolean)" class="com.itextpdf.tool.xml.Tag" />
		<class name="com.itextpdf.tool.xml.TagUtils" />
		<method signature="com.itextpdf.tool.xml.Tag getCurrentTag()" class="com.itextpdf.tool.xml.XMLWorker" />
		<field name="DONTLOOKFORFONTS" class="com.itextpdf.tool.xml.XMLWorkerFontProvider" />
		<method signature="void &lt;init&gt;(java.lang.String)" class="com.itextpdf.tool.xml.XMLWorkerFontProvider" />
		<method signature="void addFontSubstitute(java.lang.String,java.lang.String)" class="com.itextpdf.tool.xml.XMLWorkerFontProvider" />
		<method signature="void setUseUnicode(boolean)" class="com.itextpdf.tool.xml.XMLWorkerFontProvider" />
		<method signature="void parseXHtml(com.itextpdf.tool.xml.ElementHandler,java.io.Reader)" class="com.itextpdf.tool.xml.XMLWorkerHelper" />
		<method signature="void parseXHtml(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Document,java.io.InputStream)" class="com.itextpdf.tool.xml.XMLWorkerHelper" />
		<method signature="void parseXHtml(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Document,java.io.InputStream,java.nio.charset.Charset,com.itextpdf.text.FontProvider)" class="com.itextpdf.tool.xml.XMLWorkerHelper" />
		<method signature="void parseXHtml(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Document,java.io.InputStream,java.nio.charset.Charset)" class="com.itextpdf.tool.xml.XMLWorkerHelper" />
		<method signature="void parseXHtml(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Document,java.io.InputStream,java.io.InputStream,java.nio.charset.Charset,com.itextpdf.text.FontProvider)" class="com.itextpdf.tool.xml.XMLWorkerHelper" />
		<method signature="void parseXHtml(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Document,java.io.InputStream,java.io.InputStream,java.nio.charset.Charset,com.itextpdf.text.FontProvider,java.lang.String)" class="com.itextpdf.tool.xml.XMLWorkerHelper" />
		<method signature="void parseXHtml(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Document,java.io.InputStream,java.io.InputStream)" class="com.itextpdf.tool.xml.XMLWorkerHelper" />
		<method signature="void parseXHtml(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Document,java.io.InputStream,java.io.InputStream,com.itextpdf.text.FontProvider)" class="com.itextpdf.tool.xml.XMLWorkerHelper" />
		<method signature="void parseXHtml(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Document,java.io.InputStream,java.io.InputStream,java.nio.charset.Charset)" class="com.itextpdf.tool.xml.XMLWorkerHelper" />
		<method signature="void parseXHtml(com.itextpdf.tool.xml.ElementHandler,java.io.InputStream,java.nio.charset.Charset)" class="com.itextpdf.tool.xml.XMLWorkerHelper" />
		<method signature="com.itextpdf.tool.xml.pipeline.css.CSSResolver getDefaultCssResolver(boolean)" class="com.itextpdf.tool.xml.XMLWorkerHelper" />
		<method signature="com.itextpdf.tool.xml.ElementList parseToElementList(java.lang.String,java.lang.String)" class="com.itextpdf.tool.xml.XMLWorkerHelper" />
		<class name="com.itextpdf.tool.xml.css.CSS$Property" />
		<class name="com.itextpdf.tool.xml.css.CSS$Value" />
		<class name="com.itextpdf.tool.xml.css.CSS" />
		<method signature="void isPersistent(boolean)" class="com.itextpdf.tool.xml.css.CSSFileWrapper" />
		<method signature="void isPersistent(boolean)" class="com.itextpdf.tool.xml.css.CssFile" />
		<method signature="void isPersistent(boolean)" class="com.itextpdf.tool.xml.css.CssFileImpl" />
		<method signature="void add(com.itextpdf.tool.xml.css.CssFile)" class="com.itextpdf.tool.xml.css.CssFiles" />
		<method signature="void &lt;init&gt;(com.itextpdf.tool.xml.css.CssFile)" class="com.itextpdf.tool.xml.css.CssFilesImpl" />
		<field name="COLOR" class="com.itextpdf.tool.xml.css.CssUtils" />
		<field name="STYLE" class="com.itextpdf.tool.xml.css.CssUtils" />
		<field name="WIDTH" class="com.itextpdf.tool.xml.css.CssUtils" />
		<field name="BORDER2" class="com.itextpdf.tool.xml.css.CssUtils" />
		<field name="_0_LEFT_1" class="com.itextpdf.tool.xml.css.CssUtils" />
		<field name="_0_RIGHT_1" class="com.itextpdf.tool.xml.css.CssUtils" />
		<field name="_0_BOTTOM_1" class="com.itextpdf.tool.xml.css.CssUtils" />
		<field name="_0_TOP_1" class="com.itextpdf.tool.xml.css.CssUtils" />
		<field name="DEFAULT_FONT_SIZE_PT" class="com.itextpdf.tool.xml.css.CssUtils" />
		<method signature="float checkMetricStyle(com.itextpdf.tool.xml.Tag,java.lang.String)" class="com.itextpdf.tool.xml.css.CssUtils" />
		<method signature="java.lang.Float checkMetricStyle(java.util.Map,java.lang.String)" class="com.itextpdf.tool.xml.css.CssUtils" />
		<method signature="float parseValueToPt(java.lang.String,float)" class="com.itextpdf.tool.xml.css.CssUtils" />
		<method signature="float parseRelativeValue(java.lang.String,float)" class="com.itextpdf.tool.xml.css.CssUtils" />
		<method signature="float parsePxInCmMmPcToPt(java.lang.String,java.lang.String)" class="com.itextpdf.tool.xml.css.CssUtils" />
		<method signature="float parsePxInCmMmPcToPt(java.lang.String)" class="com.itextpdf.tool.xml.css.CssUtils" />
		<method signature="int determinePositionBetweenValueAndUnit(java.lang.String)" class="com.itextpdf.tool.xml.css.CssUtils" />
		<method signature="float getLeftAndRightMargin(com.itextpdf.tool.xml.Tag,float)" class="com.itextpdf.tool.xml.css.CssUtils" />
		<method signature="java.lang.String extractUrl(java.lang.String)" class="com.itextpdf.tool.xml.css.CssUtils" />
		<method signature="float validateTextHeight(java.util.Map,float)" class="com.itextpdf.tool.xml.css.CssUtils" />
		<method signature="float calculateMarginTop(java.lang.String,float,com.itextpdf.tool.xml.css.apply.MarginMemory)" class="com.itextpdf.tool.xml.css.CssUtils" />
		<method signature="float calculateMarginTop(float,com.itextpdf.tool.xml.css.apply.MarginMemory)" class="com.itextpdf.tool.xml.css.CssUtils" />
		<method signature="java.lang.String trimAndRemoveQuoutes(java.lang.String)" class="com.itextpdf.tool.xml.css.CssUtils" />
		<class name="com.itextpdf.tool.xml.css.FontSizeTranslator" />
		<class name="com.itextpdf.tool.xml.css.HeightCalculator" />
		<field name="STYLE" class="com.itextpdf.tool.xml.css.StyleAttrCSSResolver" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.tool.xml.css.StyleAttrCSSResolver" />
		<method signature="void &lt;init&gt;(com.itextpdf.tool.xml.css.CssFiles,com.itextpdf.tool.xml.net.FileRetrieve)" class="com.itextpdf.tool.xml.css.StyleAttrCSSResolver" />
		<method signature="void setCssInheritance(com.itextpdf.tool.xml.css.CssInheritanceRules)" class="com.itextpdf.tool.xml.css.StyleAttrCSSResolver" />
		<method signature="void addCss(java.lang.String,java.lang.String,boolean)" class="com.itextpdf.tool.xml.css.StyleAttrCSSResolver" />
		<method signature="void addCssFile(java.lang.String,boolean)" class="com.itextpdf.tool.xml.css.StyleAttrCSSResolver" />
		<method signature="void addCss(com.itextpdf.tool.xml.css.CssFile)" class="com.itextpdf.tool.xml.css.StyleAttrCSSResolver" />
		<method signature="void addCss(java.lang.String,boolean)" class="com.itextpdf.tool.xml.css.StyleAttrCSSResolver" />
		<method signature="void setCssInheritanceRules(com.itextpdf.tool.xml.css.CssInheritanceRules)" class="com.itextpdf.tool.xml.css.StyleAttrCSSResolver" />
		<method signature="void setFileRetrieve(com.itextpdf.tool.xml.net.FileRetrieve)" class="com.itextpdf.tool.xml.css.StyleAttrCSSResolver" />
		<class name="com.itextpdf.tool.xml.css.WidthCalculator" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.tool.xml.css.apply.ChunkCssApplier" />
		<method signature="com.itextpdf.text.Chunk apply(com.itextpdf.text.Chunk,com.itextpdf.tool.xml.Tag)" class="com.itextpdf.tool.xml.css.apply.ChunkCssApplier" />
		<method signature="com.itextpdf.text.Font applyFontStyles(com.itextpdf.tool.xml.Tag)" class="com.itextpdf.tool.xml.css.apply.ChunkCssApplier" />
		<method signature="float getWidestWord(com.itextpdf.text.Chunk)" class="com.itextpdf.tool.xml.css.apply.ChunkCssApplier" />
		<method signature="void copyChunkStyles(com.itextpdf.text.Chunk,com.itextpdf.text.Chunk)" class="com.itextpdf.tool.xml.css.apply.ChunkCssApplier" />
		<method signature="com.itextpdf.text.FontProvider getFontProvider()" class="com.itextpdf.tool.xml.css.apply.ChunkCssApplier" />
		<method signature="boolean isBoldValue(java.lang.String)" class="com.itextpdf.tool.xml.css.apply.ChunkCssApplier" />
		<method signature="com.itextpdf.text.pdf.PdfDiv apply(com.itextpdf.text.pdf.PdfDiv,com.itextpdf.tool.xml.Tag,com.itextpdf.tool.xml.css.apply.MarginMemory,com.itextpdf.tool.xml.css.apply.PageSizeContainable,com.itextpdf.tool.xml.pipeline.html.HtmlPipelineContext)" class="com.itextpdf.tool.xml.css.apply.DivCssApplier" />
		<method signature="com.itextpdf.tool.xml.html.pdfelement.HtmlCell apply(com.itextpdf.tool.xml.html.pdfelement.HtmlCell,com.itextpdf.tool.xml.Tag,com.itextpdf.tool.xml.css.apply.MarginMemory,com.itextpdf.tool.xml.css.apply.PageSizeContainable)" class="com.itextpdf.tool.xml.css.apply.HtmlCellCssApplier" />
		<method signature="void setTopOfBorder(com.itextpdf.tool.xml.html.pdfelement.HtmlCell,java.lang.String,java.lang.String,com.itextpdf.tool.xml.html.table.TableStyleValues)" class="com.itextpdf.tool.xml.css.apply.HtmlCellCssApplier" />
		<method signature="void setBottomOfBorder(com.itextpdf.tool.xml.html.pdfelement.HtmlCell,java.lang.String,java.lang.String,com.itextpdf.tool.xml.html.table.TableStyleValues)" class="com.itextpdf.tool.xml.css.apply.HtmlCellCssApplier" />
		<method signature="void setLeftOfBorder(com.itextpdf.tool.xml.html.pdfelement.HtmlCell,java.lang.String,java.lang.String,com.itextpdf.tool.xml.html.table.TableStyleValues)" class="com.itextpdf.tool.xml.css.apply.HtmlCellCssApplier" />
		<method signature="void setRightOfBorder(com.itextpdf.tool.xml.html.pdfelement.HtmlCell,java.lang.String,java.lang.String,com.itextpdf.tool.xml.html.table.TableStyleValues)" class="com.itextpdf.tool.xml.css.apply.HtmlCellCssApplier" />
		<method signature="com.itextpdf.text.Image apply(com.itextpdf.text.Image,com.itextpdf.tool.xml.Tag)" class="com.itextpdf.tool.xml.css.apply.ImageCssApplier" />
		<method signature="com.itextpdf.text.pdf.draw.LineSeparator apply(com.itextpdf.text.pdf.draw.LineSeparator,com.itextpdf.tool.xml.Tag,com.itextpdf.tool.xml.css.apply.PageSizeContainable)" class="com.itextpdf.tool.xml.css.apply.LineSeparatorCssApplier" />
		<method signature="com.itextpdf.text.List apply(com.itextpdf.text.List,com.itextpdf.tool.xml.Tag,com.itextpdf.tool.xml.pipeline.html.HtmlPipelineContext)" class="com.itextpdf.tool.xml.css.apply.ListStyleTypeCssApplier" />
		<method signature="void synchronizeSymbol(float,com.itextpdf.text.List,com.itextpdf.text.BaseColor)" class="com.itextpdf.tool.xml.css.apply.ListStyleTypeCssApplier" />
		<method signature="void shrinkSymbol(com.itextpdf.text.List,float,com.itextpdf.text.BaseColor)" class="com.itextpdf.tool.xml.css.apply.ListStyleTypeCssApplier" />
		<method signature="com.itextpdf.text.Element apply(com.itextpdf.text.List,com.itextpdf.tool.xml.Tag)" class="com.itextpdf.tool.xml.css.apply.ListStyleTypeCssApplier" />
		<method signature="java.lang.Float getLastMarginBottom()" class="com.itextpdf.tool.xml.css.apply.MarginMemory" />
		<method signature="java.util.List getRootTags()" class="com.itextpdf.tool.xml.css.apply.MarginMemory" />
		<method signature="void setLastMarginBottom(java.lang.Float)" class="com.itextpdf.tool.xml.css.apply.MarginMemory" />
		<class name="com.itextpdf.tool.xml.css.apply.MaxLeadingAndSize" />
		<method signature="com.itextpdf.tool.xml.html.pdfelement.NoNewLineParagraph apply(com.itextpdf.tool.xml.html.pdfelement.NoNewLineParagraph,com.itextpdf.tool.xml.Tag,com.itextpdf.tool.xml.css.apply.MarginMemory)" class="com.itextpdf.tool.xml.css.apply.NoNewLineParagraphCssApplier" />
		<method signature="com.itextpdf.text.Rectangle getPageSize()" class="com.itextpdf.tool.xml.css.apply.PageSizeContainable" />
		<method signature="com.itextpdf.text.Paragraph apply(com.itextpdf.text.Paragraph,com.itextpdf.tool.xml.Tag,com.itextpdf.tool.xml.css.apply.MarginMemory)" class="com.itextpdf.tool.xml.css.apply.ParagraphCssApplier" />
		<field name="selectorPatternString" class="com.itextpdf.tool.xml.css.parser.CssSelectorParser" />
		<field name="a" class="com.itextpdf.tool.xml.css.parser.CssSelectorParser" />
		<field name="b" class="com.itextpdf.tool.xml.css.parser.CssSelectorParser" />
		<field name="c" class="com.itextpdf.tool.xml.css.parser.CssSelectorParser" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.tool.xml.css.parser.CssSelectorParser" />
		<field name="serialVersionUID" class="com.itextpdf.tool.xml.exceptions.CssResolverException" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.tool.xml.exceptions.CssResolverException" />
		<method signature="void &lt;init&gt;(java.lang.String,java.lang.Throwable)" class="com.itextpdf.tool.xml.exceptions.CssResolverException" />
		<method signature="void &lt;init&gt;(java.lang.String)" class="com.itextpdf.tool.xml.exceptions.CssResolverException" />
		<method signature="void &lt;init&gt;(java.lang.Throwable)" class="com.itextpdf.tool.xml.exceptions.CssResolverException" />
		<field name="UNSUPPORTED_CHARSET" class="com.itextpdf.tool.xml.exceptions.LocaleMessages" />
		<field name="INVALID_NESTED_TAG" class="com.itextpdf.tool.xml.exceptions.LocaleMessages" />
		<field name="NO_CUSTOM_CONTEXT" class="com.itextpdf.tool.xml.exceptions.LocaleMessages" />
		<field name="CUSTOMCONTEXT_404_CONTINUE" class="com.itextpdf.tool.xml.exceptions.LocaleMessages" />
		<field name="UNSUPPORTED_CLONING" class="com.itextpdf.tool.xml.exceptions.LocaleMessages" />
		<field name="NO_TAGPROCESSOR" class="com.itextpdf.tool.xml.exceptions.LocaleMessages" />
		<field name="NO_SIBLING" class="com.itextpdf.tool.xml.exceptions.LocaleMessages" />
		<field name="PIPELINE_AUTODOC" class="com.itextpdf.tool.xml.exceptions.LocaleMessages" />
		<field name="STACK_404" class="com.itextpdf.tool.xml.exceptions.LocaleMessages" />
		<field name="OWN_CONTEXT_404" class="com.itextpdf.tool.xml.exceptions.LocaleMessages" />
		<field name="ELEMENT_NOT_ADDED" class="com.itextpdf.tool.xml.exceptions.LocaleMessages" />
		<field name="ELEMENT_NOT_ADDED_EXC" class="com.itextpdf.tool.xml.exceptions.LocaleMessages" />
		<field name="IMG_SRC_NOTCONVERTED" class="com.itextpdf.tool.xml.exceptions.LocaleMessages" />
		<field name="HTML_IMG_USE" class="com.itextpdf.tool.xml.exceptions.LocaleMessages" />
		<field name="HTML_IMG_RETRIEVE_FAIL" class="com.itextpdf.tool.xml.exceptions.LocaleMessages" />
		<field name="ADD_HEADER" class="com.itextpdf.tool.xml.exceptions.LocaleMessages" />
		<field name="HEADER_BM_DISABLED" class="com.itextpdf.tool.xml.exceptions.LocaleMessages" />
		<field name="A_LOCALGOTO" class="com.itextpdf.tool.xml.exceptions.LocaleMessages" />
		<field name="A_EXTERNAL" class="com.itextpdf.tool.xml.exceptions.LocaleMessages" />
		<field name="A_SETLOCALGOTO" class="com.itextpdf.tool.xml.exceptions.LocaleMessages" />
		<field name="SPACEHACK" class="com.itextpdf.tool.xml.exceptions.LocaleMessages" />
		<field name="COLSPAN" class="com.itextpdf.tool.xml.exceptions.LocaleMessages" />
		<field name="LINK_404" class="com.itextpdf.tool.xml.exceptions.LocaleMessages" />
		<field name="META_CC" class="com.itextpdf.tool.xml.exceptions.LocaleMessages" />
		<field name="META_404" class="com.itextpdf.tool.xml.exceptions.LocaleMessages" />
		<field name="STYLE_NOTPARSED" class="com.itextpdf.tool.xml.exceptions.LocaleMessages" />
		<method signature="void &lt;init&gt;(java.util.Locale)" class="com.itextpdf.tool.xml.exceptions.LocaleMessages" />
		<class name="com.itextpdf.tool.xml.exceptions.NoDataException" />
		<class name="com.itextpdf.tool.xml.exceptions.NoSiblingException" />
		<field name="serialVersionUID" class="com.itextpdf.tool.xml.exceptions.NoTagProcessorException" />
		<class name="com.itextpdf.tool.xml.exceptions.NotImplementedException" />
		<field name="serialVersionUID" class="com.itextpdf.tool.xml.exceptions.RuntimeWorkerException" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.tool.xml.exceptions.RuntimeWorkerException" />
		<method signature="void &lt;init&gt;(java.lang.String,java.lang.Throwable)" class="com.itextpdf.tool.xml.exceptions.RuntimeWorkerException" />
		<class name="com.itextpdf.tool.xml.html.AbstractTagProcessor" />
		<class name="com.itextpdf.tool.xml.html.Anchor$1" />
		<class name="com.itextpdf.tool.xml.html.Anchor" />
		<class name="com.itextpdf.tool.xml.html.Body" />
		<class name="com.itextpdf.tool.xml.html.Break" />
		<method signature="com.itextpdf.text.Element apply(com.itextpdf.text.Element,com.itextpdf.tool.xml.Tag,com.itextpdf.tool.xml.css.apply.MarginMemory,com.itextpdf.tool.xml.css.apply.PageSizeContainable,com.itextpdf.tool.xml.pipeline.html.HtmlPipelineContext)" class="com.itextpdf.tool.xml.html.CssAppliers" />
		<method signature="com.itextpdf.text.Element apply(com.itextpdf.text.Element,com.itextpdf.tool.xml.Tag,com.itextpdf.tool.xml.pipeline.html.HtmlPipelineContext)" class="com.itextpdf.tool.xml.html.CssAppliers" />
		<method signature="com.itextpdf.tool.xml.css.apply.ChunkCssApplier getChunkCssAplier()" class="com.itextpdf.tool.xml.html.CssAppliers" />
		<method signature="void setChunkCssAplier(com.itextpdf.tool.xml.css.apply.ChunkCssApplier)" class="com.itextpdf.tool.xml.html.CssAppliers" />
		<method signature="com.itextpdf.tool.xml.html.CssAppliers getCssAppliers()" class="com.itextpdf.tool.xml.html.CssAppliersAware" />
		<method signature="com.itextpdf.text.Element apply(com.itextpdf.text.Element,com.itextpdf.tool.xml.Tag,com.itextpdf.tool.xml.css.apply.MarginMemory,com.itextpdf.tool.xml.css.apply.PageSizeContainable,com.itextpdf.tool.xml.pipeline.html.HtmlPipelineContext)" class="com.itextpdf.tool.xml.html.CssAppliersImpl" />
		<method signature="com.itextpdf.text.Element apply(com.itextpdf.text.Element,com.itextpdf.tool.xml.Tag,com.itextpdf.tool.xml.pipeline.html.HtmlPipelineContext)" class="com.itextpdf.tool.xml.html.CssAppliersImpl" />
		<method signature="com.itextpdf.tool.xml.css.apply.ChunkCssApplier getChunkCssAplier()" class="com.itextpdf.tool.xml.html.CssAppliersImpl" />
		<method signature="void setChunkCssAplier(com.itextpdf.tool.xml.css.apply.ChunkCssApplier)" class="com.itextpdf.tool.xml.html.CssAppliersImpl" />
		<method signature="void &lt;init&gt;(com.itextpdf.tool.xml.html.DefaultTagProcessorFactory,java.lang.String,com.itextpdf.tool.xml.html.TagProcessor)" class="com.itextpdf.tool.xml.html.DefaultTagProcessorFactory$FactoryObject" />
		<method signature="java.lang.String getClassName()" class="com.itextpdf.tool.xml.html.DefaultTagProcessorFactory$FactoryObject" />
		<method signature="com.itextpdf.tool.xml.html.TagProcessor load(java.lang.String,java.lang.ClassLoader)" class="com.itextpdf.tool.xml.html.DefaultTagProcessorFactory" />
		<method signature="void addProcessor(java.lang.String,com.itextpdf.tool.xml.html.TagProcessor)" class="com.itextpdf.tool.xml.html.DefaultTagProcessorFactory" />
		<method signature="void addProcessor(com.itextpdf.tool.xml.html.TagProcessor,java.lang.String[])" class="com.itextpdf.tool.xml.html.DefaultTagProcessorFactory" />
		<method signature="void addProcessor(java.lang.String,java.lang.String[])" class="com.itextpdf.tool.xml.html.DefaultTagProcessorFactory" />
		<method signature="void removeProcessor(java.lang.String)" class="com.itextpdf.tool.xml.html.DefaultTagProcessorFactory" />
		<class name="com.itextpdf.tool.xml.html.Div" />
		<class name="com.itextpdf.tool.xml.html.DummyTagProcessor" />
		<class name="com.itextpdf.tool.xml.html.HTML$Attribute$Value" />
		<class name="com.itextpdf.tool.xml.html.HTML$Attribute" />
		<class name="com.itextpdf.tool.xml.html.HTML$Category" />
		<class name="com.itextpdf.tool.xml.html.HTML$Tag" />
		<class name="com.itextpdf.tool.xml.html.HTML" />
		<class name="com.itextpdf.tool.xml.html.HTMLUtils" />
		<class name="com.itextpdf.tool.xml.html.Header$1" />
		<class name="com.itextpdf.tool.xml.html.Header" />
		<class name="com.itextpdf.tool.xml.html.HeaderNode" />
		<class name="com.itextpdf.tool.xml.html.HorizontalRule" />
		<class name="com.itextpdf.tool.xml.html.Image" />
		<class name="com.itextpdf.tool.xml.html.NonSanitizedTag" />
		<class name="com.itextpdf.tool.xml.html.OrderedUnorderedList" />
		<class name="com.itextpdf.tool.xml.html.OrderedUnorderedListItem" />
		<class name="com.itextpdf.tool.xml.html.ParaGraph" />
		<class name="com.itextpdf.tool.xml.html.Span" />
		<method signature="void addProcessor(com.itextpdf.tool.xml.html.TagProcessor,java.lang.String[])" class="com.itextpdf.tool.xml.html.TagProcessorFactory" />
		<method signature="void removeProcessor(java.lang.String)" class="com.itextpdf.tool.xml.html.TagProcessorFactory" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.tool.xml.html.Tags" />
		<class name="com.itextpdf.tool.xml.html.head.Link" />
		<class name="com.itextpdf.tool.xml.html.head.Meta" />
		<class name="com.itextpdf.tool.xml.html.head.Style" />
		<class name="com.itextpdf.tool.xml.html.head.Title$1" />
		<class name="com.itextpdf.tool.xml.html.head.Title" />
		<class name="com.itextpdf.tool.xml.html.head.XML" />
		<class name="com.itextpdf.tool.xml.html.pdfelement.HtmlCell" />
		<class name="com.itextpdf.tool.xml.html.pdfelement.NoNewLineParagraph" />
		<class name="com.itextpdf.tool.xml.html.pdfelement.TabbedChunk" />
		<class name="com.itextpdf.tool.xml.html.table.CellSpacingEvent" />
		<class name="com.itextpdf.tool.xml.html.table.Table$1" />
		<class name="com.itextpdf.tool.xml.html.table.Table$NormalRowComparator" />
		<class name="com.itextpdf.tool.xml.html.table.Table$RepeatedRowComparator" />
		<class name="com.itextpdf.tool.xml.html.table.Table" />
		<class name="com.itextpdf.tool.xml.html.table.TableBorderEvent" />
		<class name="com.itextpdf.tool.xml.html.table.TableData" />
		<class name="com.itextpdf.tool.xml.html.table.TableRow" />
		<class name="com.itextpdf.tool.xml.html.table.TableRowElement$Place" />
		<class name="com.itextpdf.tool.xml.html.table.TableRowElement" />
		<class name="com.itextpdf.tool.xml.html.table.TableStyleValues" />
		<method signature="void processFromHref(java.lang.String,com.itextpdf.tool.xml.net.ReadingProcessor)" class="com.itextpdf.tool.xml.net.FileRetrieve" />
		<method signature="void processFromStream(java.io.InputStream,com.itextpdf.tool.xml.net.ReadingProcessor)" class="com.itextpdf.tool.xml.net.FileRetrieve" />
		<method signature="void &lt;init&gt;(java.lang.String[])" class="com.itextpdf.tool.xml.net.FileRetrieveImpl" />
		<method signature="void &lt;init&gt;(java.io.File)" class="com.itextpdf.tool.xml.net.FileRetrieveImpl" />
		<method signature="void processFromHref(java.lang.String,com.itextpdf.tool.xml.net.ReadingProcessor)" class="com.itextpdf.tool.xml.net.FileRetrieveImpl" />
		<method signature="java.net.URL detectWithRootUrls(java.lang.String)" class="com.itextpdf.tool.xml.net.FileRetrieveImpl" />
		<method signature="void processFromStream(java.io.InputStream,com.itextpdf.tool.xml.net.ReadingProcessor)" class="com.itextpdf.tool.xml.net.FileRetrieveImpl" />
		<method signature="void read(com.itextpdf.tool.xml.net.ReadingProcessor,java.io.InputStream)" class="com.itextpdf.tool.xml.net.FileRetrieveImpl" />
		<method signature="void addRootDir(java.io.File)" class="com.itextpdf.tool.xml.net.FileRetrieveImpl" />
		<method signature="void addURL(java.lang.String)" class="com.itextpdf.tool.xml.net.FileRetrieveImpl" />
		<class name="com.itextpdf.tool.xml.net.ImageRetrieve" />
		<method signature="void process(int)" class="com.itextpdf.tool.xml.net.ReadingProcessor" />
		<class name="com.itextpdf.tool.xml.net.exc.NoImageException" />
		<method signature="com.itextpdf.tool.xml.parser.XMLParser previousState()" class="com.itextpdf.tool.xml.parser.StateController" />
		<method signature="void &lt;init&gt;(com.itextpdf.tool.xml.parser.XMLParserListener,java.nio.charset.Charset)" class="com.itextpdf.tool.xml.parser.XMLParser" />
		<method signature="void &lt;init&gt;(boolean,com.itextpdf.tool.xml.parser.XMLParserListener,java.nio.charset.Charset)" class="com.itextpdf.tool.xml.parser.XMLParser" />
		<method signature="void &lt;init&gt;(boolean,com.itextpdf.tool.xml.parser.XMLParserListener)" class="com.itextpdf.tool.xml.parser.XMLParser" />
		<method signature="void &lt;init&gt;(com.itextpdf.tool.xml.parser.XMLParserListener)" class="com.itextpdf.tool.xml.parser.XMLParser" />
		<method signature="com.itextpdf.tool.xml.parser.XMLParser removeListener(com.itextpdf.tool.xml.parser.XMLParserListener)" class="com.itextpdf.tool.xml.parser.XMLParser" />
		<method signature="void parse(java.io.InputStream)" class="com.itextpdf.tool.xml.parser.XMLParser" />
		<method signature="void parse(java.io.InputStream,boolean)" class="com.itextpdf.tool.xml.parser.XMLParser" />
		<method signature="void parse(java.io.InputStream,java.nio.charset.Charset)" class="com.itextpdf.tool.xml.parser.XMLParser" />
		<method signature="java.io.InputStreamReader detectEncoding(java.io.InputStream)" class="com.itextpdf.tool.xml.parser.XMLParser" />
		<method signature="char currentLastChar()" class="com.itextpdf.tool.xml.parser.XMLParser" />
		<method signature="void setMonitor(com.itextpdf.tool.xml.parser.io.ParserMonitor)" class="com.itextpdf.tool.xml.parser.XMLParser" />
		<method signature="com.itextpdf.tool.xml.parser.XMLParser append(char[])" class="com.itextpdf.tool.xml.parser.XMLParser" />
		<method signature="java.nio.charset.Charset getCharset()" class="com.itextpdf.tool.xml.parser.XMLParser" />
		<class name="com.itextpdf.tool.xml.parser.io.Appender" />
		<class name="com.itextpdf.tool.xml.parser.io.EncodingUtil" />
		<class name="com.itextpdf.tool.xml.parser.io.ParserListenerWriter" />
		<method signature="void &lt;init&gt;(com.itextpdf.text.Element)" class="com.itextpdf.tool.xml.pipeline.WritableElement" />
		<method signature="void addCss(java.lang.String,java.lang.String,boolean)" class="com.itextpdf.tool.xml.pipeline.css.CSSResolver" />
		<method signature="void addCssFile(java.lang.String,boolean)" class="com.itextpdf.tool.xml.pipeline.css.CSSResolver" />
		<method signature="void addCss(java.lang.String,boolean)" class="com.itextpdf.tool.xml.pipeline.css.CSSResolver" />
		<method signature="void addCss(com.itextpdf.tool.xml.css.CssFile)" class="com.itextpdf.tool.xml.pipeline.css.CSSResolver" />
		<method signature="void setFileRetrieve(com.itextpdf.tool.xml.net.FileRetrieve)" class="com.itextpdf.tool.xml.pipeline.css.CSSResolver" />
		<field name="CSS_RESOLVER" class="com.itextpdf.tool.xml.pipeline.css.CssResolverPipeline" />
		<method signature="void setResolver(com.itextpdf.tool.xml.pipeline.css.CSSResolver)" class="com.itextpdf.tool.xml.pipeline.css.CssResolverPipeline" />
		<class name="com.itextpdf.tool.xml.pipeline.end.ElementHandlerPipeline" />
		<field name="DOCUMENT" class="com.itextpdf.tool.xml.pipeline.end.PdfWriterPipeline" />
		<field name="WRITER" class="com.itextpdf.tool.xml.pipeline.end.PdfWriterPipeline" />
		<field name="CONTINUOUS" class="com.itextpdf.tool.xml.pipeline.end.PdfWriterPipeline" />
		<method signature="void &lt;init&gt;()" class="com.itextpdf.tool.xml.pipeline.end.PdfWriterPipeline" />
		<method signature="void &lt;init&gt;(com.itextpdf.tool.xml.Pipeline)" class="com.itextpdf.tool.xml.pipeline.end.PdfWriterPipeline" />
		<method signature="void setDocument(com.itextpdf.text.Document)" class="com.itextpdf.tool.xml.pipeline.end.PdfWriterPipeline" />
		<method signature="void setWriter(com.itextpdf.text.pdf.PdfWriter)" class="com.itextpdf.tool.xml.pipeline.end.PdfWriterPipeline" />
		<class name="com.itextpdf.tool.xml.pipeline.html.AbstractImageProvider" />
		<class name="com.itextpdf.tool.xml.pipeline.html.AutoDocPipeline" />
		<class name="com.itextpdf.tool.xml.pipeline.html.FileMaker" />
		<field name="BOOKMARK_TREE" class="com.itextpdf.tool.xml.pipeline.html.HtmlPipelineContext" />
		<field name="LAST_MARGIN_BOTTOM" class="com.itextpdf.tool.xml.pipeline.html.HtmlPipelineContext" />
		<method signature="boolean isEmpty()" class="com.itextpdf.tool.xml.pipeline.html.HtmlPipelineContext" />
		<method signature="boolean autoBookmark()" class="com.itextpdf.tool.xml.pipeline.html.HtmlPipelineContext" />
		<method signature="com.itextpdf.tool.xml.pipeline.html.ImageProvider getImageProvider()" class="com.itextpdf.tool.xml.pipeline.html.HtmlPipelineContext" />
		<method signature="java.nio.charset.Charset charSet()" class="com.itextpdf.tool.xml.pipeline.html.HtmlPipelineContext" />
		<method signature="com.itextpdf.text.Rectangle getPageSize()" class="com.itextpdf.tool.xml.pipeline.html.HtmlPipelineContext" />
		<method signature="java.util.List getRootTags()" class="com.itextpdf.tool.xml.pipeline.html.HtmlPipelineContext" />
		<method signature="com.itextpdf.tool.xml.pipeline.html.LinkProvider getLinkProvider()" class="com.itextpdf.tool.xml.pipeline.html.HtmlPipelineContext" />
		<method signature="java.lang.Float getLastMarginBottom()" class="com.itextpdf.tool.xml.pipeline.html.HtmlPipelineContext" />
		<method signature="void setLastMarginBottom(java.lang.Float)" class="com.itextpdf.tool.xml.pipeline.html.HtmlPipelineContext" />
		<method signature="com.itextpdf.tool.xml.html.CssAppliers getCssAppliers()" class="com.itextpdf.tool.xml.pipeline.html.HtmlPipelineContext" />
		<method signature="java.lang.String getResourcesRootPath()" class="com.itextpdf.tool.xml.pipeline.html.HtmlPipelineContext" />
		<method signature="com.itextpdf.text.Image retrieve(java.lang.String)" class="com.itextpdf.tool.xml.pipeline.html.ImageProvider" />
		<method signature="java.lang.String getImageRootPath()" class="com.itextpdf.tool.xml.pipeline.html.ImageProvider" />
		<method signature="void store(java.lang.String,com.itextpdf.text.Image)" class="com.itextpdf.tool.xml.pipeline.html.ImageProvider" />
		<method signature="void reset()" class="com.itextpdf.tool.xml.pipeline.html.ImageProvider" />
		<method signature="java.lang.String getLinkRoot()" class="com.itextpdf.tool.xml.pipeline.html.LinkProvider" />
		<class name="com.itextpdf.tool.xml.pipeline.html.NoImageProviderException" />
		<field name="serialVersionUID" class="com.itextpdf.tool.xml.pipeline.html.NoStackException" />
		<method signature="void &lt;init&gt;(java.lang.String)" class="com.itextpdf.tool.xml.pipeline.html.NoStackException" />
		<method signature="void &lt;init&gt;(java.lang.Throwable)" class="com.itextpdf.tool.xml.pipeline.html.NoStackException" />
		<method signature="void &lt;init&gt;(java.lang.String,java.lang.Throwable)" class="com.itextpdf.tool.xml.pipeline.html.NoStackException" />
		<method signature="void add(java.util.Collection)" class="com.itextpdf.tool.xml.pipeline.html.StackKeeper" />
		<method signature="com.itextpdf.tool.xml.Tag getTag()" class="com.itextpdf.tool.xml.pipeline.html.StackKeeper" />
		<class name="com.itextpdf.tool.xml.pipeline.html.UrlLinkResolver" />
		<class name="com.itextpdf.tool.xml.util.ParentTreeUtil" />
		<class name="com.itextpdf.xmp.XMPConst" />
		<class name="com.itextpdf.xmp.XMPDateTime" />
		<class name="com.itextpdf.xmp.XMPDateTimeFactory" />
		<class name="com.itextpdf.xmp.XMPError" />
		<class name="com.itextpdf.xmp.XMPException" />
		<class name="com.itextpdf.xmp.XMPIterator" />
		<class name="com.itextpdf.xmp.XMPMeta" />
		<class name="com.itextpdf.xmp.XMPMetaFactory$1" />
		<class name="com.itextpdf.xmp.XMPMetaFactory" />
		<class name="com.itextpdf.xmp.XMPPathFactory" />
		<class name="com.itextpdf.xmp.XMPSchemaRegistry" />
		<class name="com.itextpdf.xmp.XMPUtils" />
		<class name="com.itextpdf.xmp.XMPVersionInfo" />
		<class name="com.itextpdf.xmp.impl.Base64" />
		<class name="com.itextpdf.xmp.impl.ByteBuffer" />
		<class name="com.itextpdf.xmp.impl.CountOutputStream" />
		<class name="com.itextpdf.xmp.impl.FixASCIIControlsReader" />
		<class name="com.itextpdf.xmp.impl.ISO8601Converter" />
		<class name="com.itextpdf.xmp.impl.Latin1Converter" />
		<class name="com.itextpdf.xmp.impl.ParameterAsserts" />
		<class name="com.itextpdf.xmp.impl.ParseRDF" />
		<class name="com.itextpdf.xmp.impl.ParseState" />
		<class name="com.itextpdf.xmp.impl.QName" />
		<class name="com.itextpdf.xmp.impl.Utils" />
		<class name="com.itextpdf.xmp.impl.XMPDateTimeImpl" />
		<class name="com.itextpdf.xmp.impl.XMPIteratorImpl$NodeIterator$1" />
		<class name="com.itextpdf.xmp.impl.XMPIteratorImpl$NodeIterator" />
		<class name="com.itextpdf.xmp.impl.XMPIteratorImpl$NodeIteratorChildren" />
		<class name="com.itextpdf.xmp.impl.XMPIteratorImpl" />
		<class name="com.itextpdf.xmp.impl.XMPMetaImpl$1" />
		<class name="com.itextpdf.xmp.impl.XMPMetaImpl$2" />
		<class name="com.itextpdf.xmp.impl.XMPMetaImpl" />
		<class name="com.itextpdf.xmp.impl.XMPMetaParser" />
		<class name="com.itextpdf.xmp.impl.XMPNode$1" />
		<class name="com.itextpdf.xmp.impl.XMPNode" />
		<class name="com.itextpdf.xmp.impl.XMPNodeUtils" />
		<class name="com.itextpdf.xmp.impl.XMPNormalizer" />
		<class name="com.itextpdf.xmp.impl.XMPSchemaRegistryImpl$1" />
		<class name="com.itextpdf.xmp.impl.XMPSchemaRegistryImpl" />
		<class name="com.itextpdf.xmp.impl.XMPSerializerHelper" />
		<class name="com.itextpdf.xmp.impl.XMPSerializerRDF" />
		<class name="com.itextpdf.xmp.impl.XMPUtilsImpl" />
		<class name="com.itextpdf.xmp.impl.xpath.PathPosition" />
		<class name="com.itextpdf.xmp.impl.xpath.XMPPath" />
		<class name="com.itextpdf.xmp.impl.xpath.XMPPathParser" />
		<class name="com.itextpdf.xmp.impl.xpath.XMPPathSegment" />
		<class name="com.itextpdf.xmp.options.AliasOptions" />
		<class name="com.itextpdf.xmp.options.IteratorOptions" />
		<class name="com.itextpdf.xmp.options.Options" />
		<class name="com.itextpdf.xmp.options.ParseOptions" />
		<class name="com.itextpdf.xmp.options.PropertyOptions" />
		<class name="com.itextpdf.xmp.options.SerializeOptions" />
		<class name="com.itextpdf.xmp.properties.XMPAliasInfo" />
		<class name="com.itextpdf.xmp.properties.XMPProperty" />
		<class name="com.itextpdf.xmp.properties.XMPPropertyInfo" />
		<class name="com.swabunga.spell.engine.Configuration" />
		<class name="com.swabunga.spell.engine.DoubleMeta" />
		<class name="com.swabunga.spell.engine.EditDistance" />
		<class name="com.swabunga.spell.engine.GenericTransformator$TransformationRule" />
		<class name="com.swabunga.spell.engine.GenericTransformator" />
		<class name="com.swabunga.spell.engine.PropertyConfiguration" />
		<class name="com.swabunga.spell.engine.SpellDictionary" />
		<class name="com.swabunga.spell.engine.Transformator" />
		<class name="com.swabunga.spell.engine.Word" />
		<class name="com.swabunga.spell.event.BasicSpellCheckEvent" />
		<class name="com.swabunga.spell.event.DocumentWordTokenizer" />
		<class name="com.swabunga.spell.event.SpellCheckEvent" />
		<class name="com.swabunga.spell.event.SpellCheckListener" />
		<class name="com.swabunga.spell.event.SpellChecker" />
		<class name="com.swabunga.spell.event.StringWordTokenizer" />
		<class name="com.swabunga.spell.event.WordTokenizer" />
		<class name="com.swabunga.spell.swing.JSpellDialog" />
		<class name="com.swabunga.spell.swing.JSpellForm" />
		<field name="n" class="fi.iki.elonen.NanoHTTPD$Cookie" />
		<field name="v" class="fi.iki.elonen.NanoHTTPD$Cookie" />
		<field name="e" class="fi.iki.elonen.NanoHTTPD$Cookie" />
		<method signature="java.lang.String getHTTPTime(int)" class="fi.iki.elonen.NanoHTTPD$Cookie" />
		<method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="fi.iki.elonen.NanoHTTPD$Cookie" />
		<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,int)" class="fi.iki.elonen.NanoHTTPD$Cookie" />
		<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String)" class="fi.iki.elonen.NanoHTTPD$Cookie" />
		<method signature="void delete(java.lang.String)" class="fi.iki.elonen.NanoHTTPD$CookieHandler" />
		<method signature="java.lang.String read(java.lang.String)" class="fi.iki.elonen.NanoHTTPD$CookieHandler" />
		<method signature="void set(fi.iki.elonen.NanoHTTPD$Cookie)" class="fi.iki.elonen.NanoHTTPD$CookieHandler" />
		<method signature="void set(java.lang.String,java.lang.String,int)" class="fi.iki.elonen.NanoHTTPD$CookieHandler" />
		<method signature="java.util.List getRunning()" class="fi.iki.elonen.NanoHTTPD$DefaultAsyncRunner" />
		<method signature="java.io.OutputStream open()" class="fi.iki.elonen.NanoHTTPD$DefaultTempFile" />
		<field name="BUFSIZE" class="fi.iki.elonen.NanoHTTPD$HTTPSession" />
		<method signature="void &lt;init&gt;(fi.iki.elonen.NanoHTTPD,fi.iki.elonen.NanoHTTPD$TempFileManager,java.io.InputStream,java.io.OutputStream)" class="fi.iki.elonen.NanoHTTPD$HTTPSession" />
		<method signature="fi.iki.elonen.NanoHTTPD$CookieHandler getCookies()" class="fi.iki.elonen.NanoHTTPD$HTTPSession" />
		<method signature="java.util.Map getHeaders()" class="fi.iki.elonen.NanoHTTPD$HTTPSession" />
		<method signature="java.io.InputStream getInputStream()" class="fi.iki.elonen.NanoHTTPD$HTTPSession" />
		<method signature="java.lang.String getQueryParameterString()" class="fi.iki.elonen.NanoHTTPD$HTTPSession" />
		<method signature="void execute()" class="fi.iki.elonen.NanoHTTPD$IHTTPSession" />
		<method signature="fi.iki.elonen.NanoHTTPD$CookieHandler getCookies()" class="fi.iki.elonen.NanoHTTPD$IHTTPSession" />
		<method signature="java.util.Map getHeaders()" class="fi.iki.elonen.NanoHTTPD$IHTTPSession" />
		<method signature="java.io.InputStream getInputStream()" class="fi.iki.elonen.NanoHTTPD$IHTTPSession" />
		<method signature="java.lang.String getQueryParameterString()" class="fi.iki.elonen.NanoHTTPD$IHTTPSession" />
		<method signature="int getRequestStatus()" class="fi.iki.elonen.NanoHTTPD$Response$IStatus" />
		<method signature="int getRequestStatus()" class="fi.iki.elonen.NanoHTTPD$Response$Status" />
		<method signature="java.io.InputStream getData()" class="fi.iki.elonen.NanoHTTPD$Response" />
		<method signature="fi.iki.elonen.NanoHTTPD$Method getRequestMethod()" class="fi.iki.elonen.NanoHTTPD$Response" />
		<method signature="fi.iki.elonen.NanoHTTPD$Response$IStatus getStatus()" class="fi.iki.elonen.NanoHTTPD$Response" />
		<method signature="void setData(java.io.InputStream)" class="fi.iki.elonen.NanoHTTPD$Response" />
		<method signature="void setMimeType(java.lang.String)" class="fi.iki.elonen.NanoHTTPD$Response" />
		<method signature="void setStatus(fi.iki.elonen.NanoHTTPD$Response$IStatus)" class="fi.iki.elonen.NanoHTTPD$Response" />
		<field name="serialVersionUID" class="fi.iki.elonen.NanoHTTPD$ResponseException" />
		<method signature="java.io.OutputStream open()" class="fi.iki.elonen.NanoHTTPD$TempFile" />
		<field name="CONTENT_DISPOSITION_REGEX" class="fi.iki.elonen.NanoHTTPD" />
		<field name="CONTENT_TYPE_REGEX" class="fi.iki.elonen.NanoHTTPD" />
		<field name="CONTENT_DISPOSITION_ATTRIBUTE_REGEX" class="fi.iki.elonen.NanoHTTPD" />
		<field name="SOCKET_READ_TIMEOUT" class="fi.iki.elonen.NanoHTTPD" />
		<field name="MIME_PLAINTEXT" class="fi.iki.elonen.NanoHTTPD" />
		<field name="MIME_HTML" class="fi.iki.elonen.NanoHTTPD" />
		<field name="QUERY_STRING_PARAMETER" class="fi.iki.elonen.NanoHTTPD" />
		<method signature="javax.net.ssl.SSLServerSocketFactory makeSSLSocketFactory(java.security.KeyStore,javax.net.ssl.KeyManager[])" class="fi.iki.elonen.NanoHTTPD" />
		<method signature="javax.net.ssl.SSLServerSocketFactory makeSSLSocketFactory(java.security.KeyStore,javax.net.ssl.KeyManagerFactory)" class="fi.iki.elonen.NanoHTTPD" />
		<method signature="javax.net.ssl.SSLServerSocketFactory makeSSLSocketFactory(java.lang.String,char[])" class="fi.iki.elonen.NanoHTTPD" />
		<method signature="void closeAllConnections()" class="fi.iki.elonen.NanoHTTPD" />
		<method signature="java.util.Map decodeParameters(java.util.Map)" class="fi.iki.elonen.NanoHTTPD" />
		<method signature="java.util.Map decodeParameters(java.lang.String)" class="fi.iki.elonen.NanoHTTPD" />
		<method signature="int getListeningPort()" class="fi.iki.elonen.NanoHTTPD" />
		<method signature="boolean isAlive()" class="fi.iki.elonen.NanoHTTPD" />
		<method signature="void makeSecure(javax.net.ssl.SSLServerSocketFactory)" class="fi.iki.elonen.NanoHTTPD" />
		<method signature="fi.iki.elonen.NanoHTTPD$Response newChunkedResponse(fi.iki.elonen.NanoHTTPD$Response$IStatus,java.lang.String,java.io.InputStream)" class="fi.iki.elonen.NanoHTTPD" />
		<method signature="fi.iki.elonen.NanoHTTPD$Response serve(java.lang.String,fi.iki.elonen.NanoHTTPD$Method,java.util.Map,java.util.Map,java.util.Map)" class="fi.iki.elonen.NanoHTTPD" />
		<method signature="boolean wasStarted()" class="fi.iki.elonen.NanoHTTPD" />
		<field name="CS_Name" class="teamma.data.LRB" />
		<field name="CS_Skills" class="teamma.data.LRB" />
		<field name="CS_Teams" class="teamma.data.LRB" />
		<field name="CS_Team" class="teamma.data.LRB" />
		<field name="CS_Picture" class="teamma.data.LRB" />
		<field name="CS_Starplayers" class="teamma.data.LRB" />
		<field name="CS_Inducements" class="teamma.data.LRB" />
		<field name="CS_Inducement" class="teamma.data.LRB" />
		<field name="CS_Mercenaries" class="teamma.data.LRB" />
		<field name="CS_Babes" class="teamma.data.LRB" />
		<field name="CS_Wizard" class="teamma.data.LRB" />
		<field name="CS_Cards" class="teamma.data.LRB" />
		<field name="CS_Check_nb_big_guys" class="teamma.data.LRB" />
		<field name="CS_ChaosWizard" class="teamma.data.LRB" />
		<field name="CS_KariColdstell" class="teamma.data.LRB" />
		<field name="CS_FinkDaFixer" class="teamma.data.LRB" />
		<field name="CS_PapaSkullbones" class="teamma.data.LRB" />
		<field name="CS_GalandrilSilverWater" class="teamma.data.LRB" />
		<field name="CS_KrotShockwhisker" class="teamma.data.LRB" />
		<field name="CS_HoracioXSchottenheim" class="teamma.data.LRB" />
		<field name="CS_Category" class="teamma.data.LRB" />
		<field name="CS_Accronym" class="teamma.data.LRB" />
		<field name="CS_Special" class="teamma.data.LRB" />
		<field name="CS_Skill" class="teamma.data.LRB" />
		<field name="CS_Reroll" class="teamma.data.LRB" />
		<field name="CS_Apothecary" class="teamma.data.LRB" />
		<field name="CS_MaxBigGuys" class="teamma.data.LRB" />
		<field name="CS_Chef" class="teamma.data.LRB" />
		<field name="CS_Igor" class="teamma.data.LRB" />
		<field name="CS_Bribe" class="teamma.data.LRB" />
		<field name="CS_PlayerTypes" class="teamma.data.LRB" />
		<field name="CS_PlayerType" class="teamma.data.LRB" />
		<field name="CS_Position" class="teamma.data.LRB" />
		<field name="CS_Limit" class="teamma.data.LRB" />
		<field name="CS_Movement" class="teamma.data.LRB" />
		<field name="CS_Strength" class="teamma.data.LRB" />
		<field name="CS_Agility" class="teamma.data.LRB" />
		<field name="CS_Armor" class="teamma.data.LRB" />
		<field name="CS_Cost" class="teamma.data.LRB" />
		<field name="CS_Pair_With" class="teamma.data.LRB" />
		<field name="CS_Max" class="teamma.data.LRB" />
		<field name="CS_Single" class="teamma.data.LRB" />
		<field name="CS_SkillType" class="teamma.data.LRB" />
		<field name="CS_Double" class="teamma.data.LRB" />
		<field name="CS_SkillNotFound" class="teamma.data.LRB" />
		<field name="CS_SkillTypeNotFound" class="teamma.data.LRB" />
		<field name="CS_RosterTypeNotFound" class="teamma.data.LRB" />
		<field name="CS_forThePlayer" class="teamma.data.LRB" />
		<field name="CS_Starplayer" class="teamma.data.LRB" />
		<method signature="boolean isChef_enabled()" class="teamma.data.LRB" />
		<method signature="teamma.data.LRB$E_Version getVersion()" class="teamma.data.LRB" />
		<method signature="boolean isStarplayers_enabled()" class="teamma.data.LRB" />
		<method signature="void setStarplayers_enabled(boolean)" class="teamma.data.LRB" />
		<method signature="boolean isBribes_enabled()" class="teamma.data.LRB" />
		<method signature="void setBribes_enabled(boolean)" class="teamma.data.LRB" />
		<method signature="void setCheckNbBigGuys(boolean)" class="teamma.data.LRB" />
		<method signature="java.lang.String getName()" class="teamma.data.LRB" />
		<method signature="void unloadLRB()" class="teamma.data.LRB" />
		<field name="CS_Plus1Movement" class="teamma.data.Player" />
		<field name="CS_Minus1Movement" class="teamma.data.Player" />
		<field name="CS_Plus1Strength" class="teamma.data.Player" />
		<field name="CS_Minus1Strength" class="teamma.data.Player" />
		<field name="CS_Plus1Agility" class="teamma.data.Player" />
		<field name="CS_Minus1Agility" class="teamma.data.Player" />
		<field name="CS_Plus1Armor" class="teamma.data.Player" />
		<field name="CS_Minus1Armor" class="teamma.data.Player" />
		<method signature="void setPlayertype(teamma.data.PlayerType)" class="teamma.data.Player" />
		<method signature="void setPosition(java.lang.String)" class="teamma.data.PlayerType" />
		<field name="CS_LRB" class="teamma.data.Roster" />
		<field name="CS_Roster" class="teamma.data.Roster" />
		<field name="CS_Composition" class="teamma.data.Roster" />
		<field name="CS_Apothecary" class="teamma.data.Roster" />
		<field name="CS_Assistants" class="teamma.data.Roster" />
		<field name="CS_Cheerleaders" class="teamma.data.Roster" />
		<field name="CS_FanFactor" class="teamma.data.Roster" />
		<field name="CS_Rerolls" class="teamma.data.Roster" />
		<field name="CS_Inducements" class="teamma.data.Roster" />
		<field name="CS_Inducement" class="teamma.data.Roster" />
		<field name="CS_Nb" class="teamma.data.Roster" />
		<field name="CS_Type" class="teamma.data.Roster" />
		<field name="CS_Chef" class="teamma.data.Roster" />
		<field name="CS_Igor" class="teamma.data.Roster" />
		<field name="CS_Wizard" class="teamma.data.Roster" />
		<field name="CS_Babes" class="teamma.data.Roster" />
		<field name="CS_Cards" class="teamma.data.Roster" />
		<field name="CS_Bribe" class="teamma.data.Roster" />
		<field name="CS_ExtraRerolls" class="teamma.data.Roster" />
		<field name="CS_LocalApothecary" class="teamma.data.Roster" />
		<field name="CS_StarPlayer" class="teamma.data.Roster" />
		<field name="CS_Name" class="teamma.data.Roster" />
		<field name="CS_Player" class="teamma.data.Roster" />
		<field name="CS_Position" class="teamma.data.Roster" />
		<field name="CS_Skill" class="teamma.data.Roster" />
		<field name="CS_Color" class="teamma.data.Roster" />
		<method signature="void removeChampion(int)" class="teamma.data.Roster" />
		<method signature="void setAssistant_cost(int)" class="teamma.data.RosterType" />
		<method signature="void setFan_factor_cost(int)" class="teamma.data.RosterType" />
		<method signature="void setCheerleader_cost(int)" class="teamma.data.RosterType" />
		<method signature="void setApothecary_cost(int)" class="teamma.data.RosterType" />
		<method signature="teamma.data.StarPlayer getStarPlayer(java.lang.String,boolean)" class="teamma.data.RosterType" />
		<method signature="void setName(java.lang.String)" class="teamma.data.RosterType" />
		<method signature="void clearAvailableStarPlayerType()" class="teamma.data.RosterType" />
		<field name="_C_SINGLE_COST" class="teamma.data.Skill" />
		<field name="_C_DOUBLE_COST" class="teamma.data.Skill" />
		<field name="_C_STRENGHT_COST" class="teamma.data.Skill" />
		<field name="_C_AGILITY_COST" class="teamma.data.Skill" />
		<field name="_C_ARMOR_COST" class="teamma.data.Skill" />
		<field name="_C_MOVEMENT_COST" class="teamma.data.Skill" />
		<method signature="void setmName(java.lang.String)" class="teamma.data.Skill" />
		<method signature="void setmCategory(teamma.data.SkillType)" class="teamma.data.Skill" />
		<method signature="void setName(java.lang.String)" class="teamma.data.SkillType" />
		<method signature="void setAccronym(java.lang.String)" class="teamma.data.SkillType" />
		<method signature="void clearSkills()" class="teamma.data.SkillType" />
		<field name="_limit" class="teamma.data.StarPlayer" />
		<method signature="void setName(java.lang.String)" class="teamma.data.StarPlayer" />
		<method signature="int getLimit()" class="teamma.data.StarPlayer" />
		<method signature="void setLimit(int)" class="teamma.data.StarPlayer" />
		<method signature="int getRosterCount()" class="teamma.data.StarPlayer" />
		<method signature="teamma.data.RosterType getRoster(int)" class="teamma.data.StarPlayer" />
		<method signature="void &lt;init&gt;()" class="teamma.languages.Translate" />
		<field name="CS_Limit" class="teamma.tableModel.MjtPlayerTypes" />
		<field name="CS_Position" class="teamma.tableModel.MjtPlayerTypes" />
		<field name="CS_M" class="teamma.tableModel.MjtPlayerTypes" />
		<field name="CS_S" class="teamma.tableModel.MjtPlayerTypes" />
		<field name="CS_Ag" class="teamma.tableModel.MjtPlayerTypes" />
		<field name="CS_Ar" class="teamma.tableModel.MjtPlayerTypes" />
		<field name="CS_Skills" class="teamma.tableModel.MjtPlayerTypes" />
		<field name="CS_SR" class="teamma.tableModel.MjtPlayerTypes" />
		<field name="CS_DR" class="teamma.tableModel.MjtPlayerTypes" />
		<field name="CS_BaseCost" class="teamma.tableModel.MjtPlayerTypes" />
		<field name="CS_Characteristics" class="teamma.tableModel.MjtPlayerTypes" />
		<field name="CS_Limit" class="teamma.tableModel.MjtStarPlayers" />
		<field name="CS_Position" class="teamma.tableModel.MjtStarPlayers" />
		<field name="CS_M" class="teamma.tableModel.MjtStarPlayers" />
		<field name="CS_S" class="teamma.tableModel.MjtStarPlayers" />
		<field name="CS_Ag" class="teamma.tableModel.MjtStarPlayers" />
		<field name="CS_Ar" class="teamma.tableModel.MjtStarPlayers" />
		<field name="CS_Skills" class="teamma.tableModel.MjtStarPlayers" />
		<field name="CS_BaseCost" class="teamma.tableModel.MjtStarPlayers" />
		<field name="CS_Characteristics" class="teamma.tableModel.MjtStarPlayers" />
		<field name="CS_Name" class="teamma.tableModel.MjtTeamPlayers" />
		<field name="CS_Position" class="teamma.tableModel.MjtTeamPlayers" />
		<field name="CS_M" class="teamma.tableModel.MjtTeamPlayers" />
		<field name="CS_S" class="teamma.tableModel.MjtTeamPlayers" />
		<field name="CS_Ag" class="teamma.tableModel.MjtTeamPlayers" />
		<field name="CS_Ar" class="teamma.tableModel.MjtTeamPlayers" />
		<field name="CS_Skills" class="teamma.tableModel.MjtTeamPlayers" />
		<field name="CS_SR" class="teamma.tableModel.MjtTeamPlayers" />
		<field name="CS_DR" class="teamma.tableModel.MjtTeamPlayers" />
		<field name="CS_BaseCost" class="teamma.tableModel.MjtTeamPlayers" />
		<field name="CS_Cost" class="teamma.tableModel.MjtTeamPlayers" />
		<field name="CS_Characteristics" class="teamma.tableModel.MjtTeamPlayers" />
		<field name="CS_Name" class="teamma.tableModel.MjtTeamStars" />
		<field name="CS_Position" class="teamma.tableModel.MjtTeamStars" />
		<field name="CS_M" class="teamma.tableModel.MjtTeamStars" />
		<field name="CS_S" class="teamma.tableModel.MjtTeamStars" />
		<field name="CS_Ag" class="teamma.tableModel.MjtTeamStars" />
		<field name="CS_Ar" class="teamma.tableModel.MjtTeamStars" />
		<field name="CS_Skills" class="teamma.tableModel.MjtTeamStars" />
		<field name="CS_Cost" class="teamma.tableModel.MjtTeamStars" />
		<field name="CS_ChooseRoster" class="teamma.views.JdgRoster" />
		<field name="CS_RosterChoice" class="teamma.views.JdgRoster" />
		<field name="CS_RosterChoiceError" class="teamma.views.JdgRoster" />
		<field name="CS_ChooseCoach" class="teamma.views.JdgRoster" />
		<field name="CS_CoachChoice" class="teamma.views.JdgRoster" />
		<field name="CS_SelectSkillToRemove" class="teamma.views.JdgRoster" />
		<field name="CS_Skill" class="teamma.views.JdgRoster" />
		<field name="CS_Big_Guy" class="teamma.views.JdgRoster" />
		<field name="CS_RosterTypeNotSelectedClieckOnRoster" class="teamma.views.JdgRoster" />
		<field name="CS_ChooseKindOfplayer" class="teamma.views.JdgRoster" />
		<field name="CS_PlayerChoice" class="teamma.views.JdgRoster" />
		<field name="CS_Roster" class="teamma.views.JdgRoster" />
		<field name="CS_Coach" class="teamma.views.JdgRoster" />
		<field name="CS_RosterUnknown" class="teamma.views.JdgRoster" />
		<field name="CS_AssociateACoach" class="teamma.views.JdgRoster" />
		<field name="CS_Error" class="teamma.views.JdgSelectPosition" />
		<field name="CS_NoSkillSelected" class="teamma.views.JdgSelectPosition" />
		<field name="CS_SingleRoll" class="teamma.views.JdgSelectSkill" />
		<field name="CS_DoubleRoll" class="teamma.views.JdgSelectSkill" />
		<field name="CS_Error" class="teamma.views.JdgSelectSkill" />
		<field name="CS_NoSkillSelected" class="teamma.views.JdgSelectSkill" />
		<method signature="void setPlayer(teamma.data.Player)" class="teamma.views.JdgSelectSkill" />
		<method signature="void setColor(java.awt.Color)" class="teamma.views.JdgSelectSkill" />
		<field name="CS_title" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_numero" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_name" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_position" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_movement" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_strength" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_agility" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_armor" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_skills" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_cost" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_nb" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_single" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_double" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_NBSP" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_players" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_teamname" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_apothecary" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_apo_price" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_apo_cost" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_coachname" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_assists" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_ass_price" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_ass_cost" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_race" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_cheer" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_cheer_price" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_cheer_cost" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_rank" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_reroll" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_reroll_price" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_reroll_cost" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_pop" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_pop_price" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_pop_cost" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_extra" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_extra_price" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_extra_cost" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_local" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_local_price" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_local_cost" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_igor" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_igor_price" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_igor_cost" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_bribe" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_bribe_price" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_bribe_cost" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_wizard" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_wizard_price" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_wizard_cost" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_babes" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_babes_price" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_babes_cost" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_chef" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_chef_price" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_chef_cost" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_cards" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_total" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_inducements" class="teamma.views.report.JdgPrintableRoster" />
		<field name="serialVersionUID" class="tourma.JdgChangePairing" />
		<field name="CS_Matchs" class="tourma.JdgChangePairing" />
		<field name="CS_Confirm" class="tourma.JdgChangePairing" />
		<field name="CS_DoYouConfirmNewpairing" class="tourma.JdgChangePairing" />
		<field name="CS_AnotherCoachHasTheSameName" class="tourma.JdgCoach" />
		<field name="CS_NameIsEmpty" class="tourma.JdgCoach" />
		<field name="CS_TeamIsEmpty" class="tourma.JdgCoach" />
		<field name="CS_RosterIsEmpty" class="tourma.JdgCoach" />
		<field name="CS_RostersChoice" class="tourma.JdgCoach" />
		<field name="CS_ChooseRoster" class="tourma.JdgCoach" />
		<field name="CS_RostersChoiceError0" class="tourma.JdgCoach" />
		<field name="CS_SelectPicture" class="tourma.JdgCoach" />
		<field name="CS_Picture" class="tourma.JdgCoach" />
		<field name="CS_PleaseSelectCategory" class="tourma.JdgCoach" />
		<field name="serialVersionUID" class="tourma.JdgMassAdd" />
		<field name="CS_DownloadFromNAF" class="tourma.JdgMassAdd" />
		<field name="CS_Downloading" class="tourma.JdgMassAdd" />
		<field name="CS_ACCR_Versus" class="tourma.JdgPairing" />
		<field name="CS_NewRoster" class="tourma.JdgRosters" />
		<field name="CS_NewRosterName" class="tourma.JdgRosters" />
		<class name="tourma.JdgSelectNumber$1" />
		<class name="tourma.JdgSelectNumber" />
		<field name="mTeamTournament" class="tourma.JdgTeam" />
		<field name="CS_EmptyTeamName" class="tourma.JdgTeam" />
		<field name="CS_SelectPicture" class="tourma.JdgTeam" />
		<field name="CS_Picture" class="tourma.JdgTeam" />
		<field name="CS_PleaseSelectCategory" class="tourma.JdgTeam" />
		<class name="tourma.JdgTeamPairing$1" />
		<class name="tourma.JdgTeamPairing$2" />
		<class name="tourma.JdgTeamPairing$3" />
		<class name="tourma.JdgTeamPairing$4" />
		<class name="tourma.JdgTeamPairing" />
		<field name="CS_TourMaXMLFile" class="tourma.MainFrame" />
		<field name="CS_None" class="tourma.MainFrame" />
		<field name="CS_NAFXMLFile" class="tourma.MainFrame" />
		<field name="CS_DoYouWantToSave" class="tourma.MainFrame" />
		<field name="CS_Exit" class="tourma.MainFrame" />
		<field name="CS_FBBCSVFile" class="tourma.MainFrame" />
		<field name="CS_FBBXMLFile" class="tourma.MainFrame" />
		<field name="CS_Check" class="tourma.MainFrame" />
		<field name="CS_LargeVictoryPointsAreNotSuperiorToVictoryPoints" class="tourma.MainFrame" />
		<field name="CS_LittleLossPointsAreNotSuperiorToLossPoints" class="tourma.MainFrame" />
		<field name="CS_LargeVictoryGapIsNotMoreThanOneTouchdown" class="tourma.MainFrame" />
		<field name="CS_LittleLostGapIsNotSuperiorTo0" class="tourma.MainFrame" />
		<field name="CS_2DrawsAreMoreThan1Victory" class="tourma.MainFrame" />
		<field name="CS_2LostAreMoreThan1Draw" class="tourma.MainFrame" />
		<field name="CS_2LittleLostAreMoreThanOneDraw" class="tourma.MainFrame" />
		<field name="CS_2TeamDrawsAreMoreThan1TeamVictory" class="tourma.MainFrame" />
		<field name="CS_2TeamLostAreMoreThan1TeamVictory" class="tourma.MainFrame" />
		<field name="CS_2TeamDrawBonusAreMoreThan1TeamVictoryBonus" class="tourma.MainFrame" />
		<field name="CS_Random" class="tourma.MainFrame" />
		<field name="CS_Cup" class="tourma.MainFrame" />
		<field name="CS_RegisteringOrder" class="tourma.MainFrame" />
		<field name="CS_RoundRobin" class="tourma.MainFrame" />
		<field name="CS_OddTeamNumber" class="tourma.MainFrame" />
		<field name="CS_ManualChoice" class="tourma.MainFrame" />
		<field name="CS_Pools" class="tourma.MainFrame" />
		<field name="CS_FreeRound" class="tourma.MainFrame" />
		<field name="CS_NafRanking" class="tourma.MainFrame" />
		<field name="CS_NafRankingAvg" class="tourma.MainFrame" />
		<field name="CS_RandomAndBalancing" class="tourma.MainFrame" />
		<field name="CS_Generation" class="tourma.MainFrame" />
		<field name="CS_ChooseGenerationMethod" class="tourma.MainFrame" />
		<field name="CS_DownloadFromNAF" class="tourma.MainFrame" />
		<field name="CS_Downloading" class="tourma.MainFrame" />
		<field name="CS_WhichCoachIsSubstituted" class="tourma.MainFrame" />
		<field name="CS_Substitution" class="tourma.MainFrame" />
		<field name="CS_Round" class="tourma.MainFrame" />
		<field name="CS_ACCR_Versus" class="tourma.MainFrame" />
		<field name="CS_WhichMatch" class="tourma.MainFrame" />
		<field name="CS_ChooseASubstitute" class="tourma.MainFrame" />
		<field name="CS_NewDOTDOTDOT" class="tourma.MainFrame" />
		<field name="CS_FirstTableCoef" class="tourma.MainFrame" />
		<field name="CS_LastTableCoef" class="tourma.MainFrame" />
		<field name="CS_RoundCoefficient" class="tourma.MainFrame" />
		<field name="CS_SwissRound" class="tourma.MainFrame" />
		<field name="CS_SwissRound_TopDown" class="tourma.MainFrame" />
		<field name="CS_AcceleratedSwissRound" class="tourma.MainFrame" />
		<field name="CS_Animation" class="tourma.MainFrame" />
		<field name="CS_Confirm" class="tourma.MainFrame" />
		<field name="CS_WebMacthNotChecked" class="tourma.MainFrame" />
		<field name="CS_FreeMatch" class="tourma.MainFrame" />
		<field name="CS_Error" class="tourma.MainFrame" />
		<field name="CS_ImpossibleMatch" class="tourma.MainFrame" />
		<field name="CS_MatchAlreadyConceededOrRefused" class="tourma.MainFrame" />
		<field name="CS_Cancel" class="tourma.MainFrame" />
		<field name="CS_ConceedAMatch" class="tourma.MainFrame" />
		<field name="CS_WhoConceedTheMatch" class="tourma.MainFrame" />
		<field name="CS_RefuseAMatch" class="tourma.MainFrame" />
		<field name="CS_WhoRefuseMatch" class="tourma.MainFrame" />
		<field name="COLOR_1" class="tourma.MainFrame" />
		<field name="COLOR_2" class="tourma.MainFrame" />
		<field name="COLOR_WRITING" class="tourma.MainFrame" />
		<field name="COLOR_BORDER" class="tourma.MainFrame" />
		<field name="CS_Download" class="tourma.MainFrame" />
		<field name="CS_NewGame" class="tourma.MainFrame" />
		<field name="CS_Open" class="tourma.MainFrame" />
		<field name="CS_UseRosterEditor" class="tourma.MainFrame" />
		<field name="CS_ClientViewer" class="tourma.MainFrame" />
		<field name="CS_NewGameOrOpen" class="tourma.MainFrame" />
		<field name="CS_EnterRemoteTourmaServer" class="tourma.MainFrame" />
		<field name="CS_Exiting" class="tourma.MainFrame" />
		<field name="CS_ConnectionImpossibleTo" class="tourma.MainFrame" />
		<field name="CS_ChooseFullScreen" class="tourma.MainFrame" />
		<field name="CS_IndividualRanking" class="tourma.MainFrame" />
		<field name="CS_IndividualAnnexRanking" class="tourma.MainFrame" />
		<field name="CS_TeamRanking" class="tourma.MainFrame" />
		<field name="CS_TeamAnnexRanking" class="tourma.MainFrame" />
		<field name="CS_ClanRanking" class="tourma.MainFrame" />
		<field name="CS_ClanAnnexRanking" class="tourma.MainFrame" />
		<field name="CS_MatchsClash" class="tourma.MainFrame" />
		<field name="CS_CategoryRanking" class="tourma.MainFrame" />
		<field name="CS_CategoryAnnexRanking" class="tourma.MainFrame" />
		<field name="CS_GroupeRanking" class="tourma.MainFrame" />
		<field name="CS_GroupeAnnexRanking" class="tourma.MainFrame" />
		<field name="CS_IndividualPoolRanking" class="tourma.MainFrame" />
		<field name="CS_IndividualPoolAnnexRanking" class="tourma.MainFrame" />
		<field name="CS_TeamPoolRanking" class="tourma.MainFrame" />
		<field name="CS_TeamPoolAnnexRanking" class="tourma.MainFrame" />
		<field name="CS_Matchs" class="tourma.MainFrame" />
		<field name="CS_Tournament" class="tourma.MainTreeModel" />
		<field name="CS_Statistics" class="tourma.MainTreeModel" />
		<field name="CS_Parameters" class="tourma.MainTreeModel" />
		<field name="CS_Round" class="tourma.MainTreeModel" />
		<field name="CS_Cup" class="tourma.MainTreeModel" />
		<method signature="void setParams(javax.swing.tree.DefaultMutableTreeNode)" class="tourma.MainTreeModel" />
		<method signature="void setUID(int)" class="tourma.data.Category" />
		<method signature="boolean isCategoryMapNull()" class="tourma.data.Category" />
		<method signature="void setXMLElement(org.jdom.Element)" class="tourma.data.Category" />
		<method signature="void setUID(int)" class="tourma.data.Clan" />
		<method signature="void delClan(java.lang.String)" class="tourma.data.Clan" />
		<method signature="void putClan(java.lang.String,tourma.data.Clan)" class="tourma.data.Clan" />
		<field name="CS_MESSAGE1" class="tourma.data.Coach" />
		<field name="CS_MESSAGE2" class="tourma.data.Coach" />
		<method signature="void setUID(int)" class="tourma.data.Coach" />
		<method signature="void printBalanced(tourma.data.Round)" class="tourma.data.Coach" />
		<method signature="java.util.ArrayList getMinimumTeamsBalanced(tourma.data.Round)" class="tourma.data.Coach" />
		<field name="C_STARTING_RANK" class="tourma.data.CoachMatch" />
		<field name="C_ELO_K" class="tourma.data.CoachMatch" />
		<method signature="void setUID(int)" class="tourma.data.CoachMatch" />
		<method signature="int getComputedValueCount()" class="tourma.data.CoachMatch" />
		<method signature="void setXMLElementForDisplay(org.jdom.Element)" class="tourma.data.CoachMatch" />
		<method signature="int getSubtypeByValue(int)" class="tourma.data.CoachMatch" />
		<method signature="tourma.data.Criteria getCriteriaByValue(int)" class="tourma.data.CoachMatch" />
		<method signature="void clearCategory()" class="tourma.data.Competitor" />
		<method signature="java.util.HashMap getTeamOppositionCount(java.util.ArrayList,tourma.data.Round)" class="tourma.data.Competitor" />
		<method signature="void setUID(int)" class="tourma.data.Criteria" />
		<method signature="void setNbMatchs(int)" class="tourma.data.CupRound" />
		<method signature="void setMatchs(java.util.ArrayList)" class="tourma.data.CupRound" />
		<method signature="void setCupRounds(java.util.ArrayList)" class="tourma.data.CupTable" />
		<method signature="void lambda$getXMLElement$1(org.jdom.Element,org.jdom.Element)" class="tourma.data.CupTable" />
		<method signature="org.jdom.Element lambda$getXMLElement$0(tourma.data.CupRound)" class="tourma.data.CupTable" />
		<method signature="void setUID(int)" class="tourma.data.Formula" />
		<method signature="void setUID(int)" class="tourma.data.Group" />
		<method signature="void newRosters()" class="tourma.data.Group" />
		<method signature="int getUID()" class="tourma.data.GroupPoints" />
		<method signature="void setUID(int)" class="tourma.data.GroupPoints" />
		<method signature="boolean containsCoach(tourma.data.Coach)" class="tourma.data.IContainCoachs" />
		<method signature="void addCoach(tourma.data.Coach)" class="tourma.data.IContainCoachs" />
		<method signature="void removeCoach(int)" class="tourma.data.IContainCoachs" />
		<method signature="void clearCoachs()" class="tourma.data.IContainCoachs" />
		<method signature="void setName(java.lang.String)" class="tourma.data.IWithNameAndPicture" />
		<method signature="void setPicture(javax.swing.ImageIcon)" class="tourma.data.IWithNameAndPicture" />
		<method signature="void setUID(int)" class="tourma.data.Match" />
		<method signature="void setValues_computed(boolean)" class="tourma.data.Match" />
		<method signature="int getValue(tourma.data.Criteria,int,tourma.data.Competitor)" class="tourma.data.Match" />
		<method signature="void setXMLElementForDisplay(org.jdom.Element)" class="tourma.data.Match" />
		<method signature="void setXMLElement(org.jdom.Element)" class="tourma.data.ObjectAnnexRanking" />
		<method signature="void setValue(int)" class="tourma.data.ObjectAnnexRanking" />
		<method signature="void setXMLElement(org.jdom.Element)" class="tourma.data.ObjectRanking" />
		<method signature="void setObject(java.lang.Comparable)" class="tourma.data.ObjectRanking" />
		<field name="C_RANKING_SUBTYPE_POSITIVE" class="tourma.data.Parameters" />
		<field name="C_RANKING_SUBTYPE_NEGATIVE" class="tourma.data.Parameters" />
		<field name="C_RANKING_SUBTYPE_DIFFERENCE" class="tourma.data.Parameters" />
		<field name="C_RANKING_NONE" class="tourma.data.Parameters" />
		<field name="C_RANKING_POINTS" class="tourma.data.Parameters" />
		<field name="C_RANKING_OPP_POINTS" class="tourma.data.Parameters" />
		<field name="C_RANKING_VND" class="tourma.data.Parameters" />
		<field name="C_RANKING_ELO" class="tourma.data.Parameters" />
		<field name="C_RANKING_ELO_OPP" class="tourma.data.Parameters" />
		<field name="C_RANKING_NB_MATCHS" class="tourma.data.Parameters" />
		<field name="C_RANKING_OPP_POINTS_OTHER_MATCHS" class="tourma.data.Parameters" />
		<field name="C_RANKING_TABLES" class="tourma.data.Parameters" />
		<field name="C_RANKING_POINTS_WITHOUT_BONUS" class="tourma.data.Parameters" />
		<field name="C_RANKING_BONUS_POINTS" class="tourma.data.Parameters" />
		<field name="C_RANKING_HEAD_BY_HEAD" class="tourma.data.Parameters" />
		<field name="C_RANKING_TIER" class="tourma.data.Parameters" />
		<field name="C_RANKING_TEAMMATES_POINTS" class="tourma.data.Parameters" />
		<field name="C_RANKING_TEAMMATES_VND" class="tourma.data.Parameters" />
		<field name="C_MAX_RANKING" class="tourma.data.Parameters" />
		<method signature="int getUID()" class="tourma.data.Parameters" />
		<method signature="void setUID(int)" class="tourma.data.Parameters" />
		<method signature="tourma.data.Formula getFormula(java.lang.String)" class="tourma.data.Parameters" />
		<method signature="int getIndexOfCriteria(tourma.data.Criteria)" class="tourma.data.Parameters" />
		<method signature="int getIndexOfFormula(tourma.data.Formula)" class="tourma.data.Parameters" />
		<method signature="int getUID()" class="tourma.data.Pool" />
		<method signature="void setUID(int)" class="tourma.data.Pool" />
		<field name="CS_Individual_Annex" class="tourma.data.Ranking" />
		<field name="CS_Team_Annex" class="tourma.data.Ranking" />
		<field name="CS_Clan_Annex" class="tourma.data.Ranking" />
		<field name="CS_Individual" class="tourma.data.Ranking" />
		<field name="CS_General" class="tourma.data.Ranking" />
		<field name="CS_Clan" class="tourma.data.Ranking" />
		<field name="CS_Group" class="tourma.data.Ranking" />
		<field name="CS_Positive" class="tourma.data.Ranking" />
		<field name="CS_Negative" class="tourma.data.Ranking" />
		<field name="CS_Team" class="tourma.data.Ranking" />
		<field name="CS_array" class="tourma.data.Ranking" />
		<field name="CS_Matchs" class="tourma.data.Ranking" />
		<field name="mCriterias" class="tourma.data.Ranking" />
		<method signature="int getUID()" class="tourma.data.Ranking" />
		<method signature="void setUID(int)" class="tourma.data.Ranking" />
		<method signature="void &lt;init&gt;(org.jdom.Element)" class="tourma.data.Ranking" />
		<method signature="void setXMLElement(org.jdom.Element)" class="tourma.data.Ranking" />
		<method signature="int getRankingNumber()" class="tourma.data.Ranking" />
		<method signature="void setRank(tourma.tableModel.MjtRanking)" class="tourma.data.Ranking" />
		<method signature="void setDetail(java.lang.String)" class="tourma.data.Ranking" />
		<method signature="void setName(java.lang.String)" class="tourma.data.Ranking" />
		<method signature="void setType(java.lang.String)" class="tourma.data.Ranking" />
		<method signature="void setValueType(java.lang.String)" class="tourma.data.Ranking" />
		<method signature="void initCollection(int)" class="tourma.data.RosterType" />
		<method signature="void setXMLElement(org.jdom.Element)" class="tourma.data.RosterType" />
		<method signature="void setUID(int)" class="tourma.data.Round" />
		<method signature="void setHour(java.lang.String)" class="tourma.data.Round" />
		<method signature="void setXMLElementForDisplay(org.jdom.Element)" class="tourma.data.Round" />
		<method signature="void removeMatch(int)" class="tourma.data.Round" />
		<method signature="int getUID()" class="tourma.data.Substitute" />
		<method signature="void setUID(int)" class="tourma.data.Substitute" />
		<method signature="tourma.data.CoachMatch getMatch()" class="tourma.data.Substitute" />
		<method signature="void setUID(int)" class="tourma.data.Team" />
		<method signature="void setNullTeam(tourma.data.Team)" class="tourma.data.Team" />
		<method signature="void setXMLElementForDisplay(org.jdom.Element)" class="tourma.data.Team" />
		<field name="C_STARTING_RANK" class="tourma.data.TeamMatch" />
		<field name="C_ELO_K" class="tourma.data.TeamMatch" />
		<method signature="void setUID(int)" class="tourma.data.TeamMatch" />
		<method signature="void setXMLElementForDisplay(org.jdom.Element)" class="tourma.data.TeamMatch" />
		<method signature="int getValue(tourma.data.Team,tourma.data.TeamMatch,tourma.data.Criteria,int)" class="tourma.data.TeamMatch" />
		<method signature="java.util.ArrayList getTeams()" class="tourma.data.Tournament" />
		<method signature="void removeClan(tourma.data.Clan)" class="tourma.data.Tournament" />
		<method signature="void clearClans()" class="tourma.data.Tournament" />
		<method signature="void clearCategories()" class="tourma.data.Tournament" />
		<method signature="boolean containsTeam(java.lang.String)" class="tourma.data.Tournament" />
		<method signature="boolean containsCoach(java.lang.String)" class="tourma.data.Tournament" />
		<method signature="int getTeamIndex(java.lang.String)" class="tourma.data.Tournament" />
		<method signature="void removeTeam(int)" class="tourma.data.Tournament" />
		<method signature="void clearTeams()" class="tourma.data.Tournament" />
		<method signature="java.util.ArrayList getDisplayCategories()" class="tourma.data.Tournament" />
		<method signature="boolean containsCoach(tourma.data.Coach)" class="tourma.data.Tournament" />
		<method signature="boolean containsClan(java.lang.String)" class="tourma.data.Tournament" />
		<method signature="void removeCoach(int)" class="tourma.data.Tournament" />
		<method signature="void clearCoachs()" class="tourma.data.Tournament" />
		<method signature="void removeGroup(tourma.data.Group)" class="tourma.data.Tournament" />
		<method signature="boolean containsGroup(tourma.data.Group)" class="tourma.data.Tournament" />
		<method signature="void setParams(tourma.data.Parameters)" class="tourma.data.Tournament" />
		<method signature="boolean isClansUpdated()" class="tourma.data.Tournament" />
		<method signature="boolean isCoachsUpdated()" class="tourma.data.Tournament" />
		<method signature="boolean isTeamsUpdated()" class="tourma.data.Tournament" />
		<method signature="boolean isRoundsUpdated()" class="tourma.data.Tournament" />
		<method signature="int getUID()" class="tourma.data.Value" />
		<method signature="void setUID(int)" class="tourma.data.Value" />
		<method signature="void setCriteria(tourma.data.Criteria)" class="tourma.data.Value" />
		<field name="CS_Touchdowns" class="tourma.languages.Translate" />
		<field name="CS_Injuries" class="tourma.languages.Translate" />
		<field name="CS_None" class="tourma.languages.Translate" />
		<field name="CS_Pool" class="tourma.languages.Translate" />
		<field name="CS_Cup" class="tourma.languages.Translate" />
		<field name="CS_Parameters" class="tourma.languages.Translate" />
		<field name="CS_Round_" class="tourma.languages.Translate" />
		<field name="CS_Clan" class="tourma.languages.Translate" />
		<field name="CS_Team" class="tourma.languages.Translate" />
		<field name="CS_Round" class="tourma.languages.Translate" />
		<field name="CS_Coach" class="tourma.languages.Translate" />
		<field name="CS_Opponent" class="tourma.languages.Translate" />
		<field name="CS_Roster" class="tourma.languages.Translate" />
		<field name="CS_RosterName" class="tourma.languages.Translate" />
		<field name="CS_Difference" class="tourma.languages.Translate" />
		<field name="CS_NAF" class="tourma.languages.Translate" />
		<field name="CS_Ranking" class="tourma.languages.Translate" />
		<field name="CS_Unknown" class="tourma.languages.Translate" />
		<field name="CS_Active" class="tourma.languages.Translate" />
		<field name="CS_Inactive" class="tourma.languages.Translate" />
		<field name="CS_Critera_Name" class="tourma.languages.Translate" />
		<field name="CS_Critera_Accronym" class="tourma.languages.Translate" />
		<field name="CS_Formula_Name" class="tourma.languages.Translate" />
		<field name="CS_Formula_Formula" class="tourma.languages.Translate" />
		<field name="CS_Error" class="tourma.languages.Translate" />
		<field name="CS_Points_Plus" class="tourma.languages.Translate" />
		<field name="CS_Points_Minus" class="tourma.languages.Translate" />
		<field name="CS_Points_Team_Plus" class="tourma.languages.Translate" />
		<field name="CS_Critical_Value_Threshold" class="tourma.languages.Translate" />
		<field name="CS_Points_Team_Minus" class="tourma.languages.Translate" />
		<field name="CS_Table" class="tourma.languages.Translate" />
		<field name="CS_Score" class="tourma.languages.Translate" />
		<field name="CS_Refused" class="tourma.languages.Translate" />
		<field name="CS_Conceeded" class="tourma.languages.Translate" />
		<field name="CS_Points" class="tourma.languages.Translate" />
		<field name="CS_TotalPoints" class="tourma.languages.Translate" />
		<field name="CS_Points_Without_Bonus" class="tourma.languages.Translate" />
		<field name="CS_Bonus_Points" class="tourma.languages.Translate" />
		<field name="CS_Nothing" class="tourma.languages.Translate" />
		<field name="CS_ELO" class="tourma.languages.Translate" />
		<field name="CS_OpponentsElo" class="tourma.languages.Translate" />
		<field name="CS_MatchCount" class="tourma.languages.Translate" />
		<field name="CS_TablesPoints" class="tourma.languages.Translate" />
		<field name="CS_HeadByHead" class="tourma.languages.Translate" />
		<field name="CS_Tier" class="tourma.languages.Translate" />
		<field name="CS_Teammates_Points" class="tourma.languages.Translate" />
		<field name="CS_Teammates_VND" class="tourma.languages.Translate" />
		<field name="CS_Name" class="tourma.languages.Translate" />
		<field name="CS_ACCR_Victory1" class="tourma.languages.Translate" />
		<field name="CS_ACCR_Victory2" class="tourma.languages.Translate" />
		<field name="CS_ACCR_Drawn" class="tourma.languages.Translate" />
		<field name="CS_ACCR_Versus" class="tourma.languages.Translate" />
		<field name="CS_ACCR_Opponent_Points" class="tourma.languages.Translate" />
		<field name="CS_ACCR_Opponent_Points_Without_Bonus" class="tourma.languages.Translate" />
		<field name="CS_ACCR_Victory_Drawn_Lost" class="tourma.languages.Translate" />
		<field name="CS_Offensive_Bonus_Threshold" class="tourma.languages.Translate" />
		<field name="CS_Offensive_Bonus_Value" class="tourma.languages.Translate" />
		<field name="CS_Diff_Offensive_Bonus_Threshold" class="tourma.languages.Translate" />
		<field name="CS_Diff_Offensive_Bonus_Value" class="tourma.languages.Translate" />
		<field name="CS_Diff_Defensive_Bonus_Threshold" class="tourma.languages.Translate" />
		<field name="CS_Diff_Defensive_Bonus_Value" class="tourma.languages.Translate" />
		<field name="CS_ForTeam_Offensive_Bonus_Value" class="tourma.languages.Translate" />
		<field name="CS_ForTeam_Diff_Offensive_Bonus_Value" class="tourma.languages.Translate" />
		<field name="CS_ForTeam_Diff_Defensive_Bonus_Value" class="tourma.languages.Translate" />
		<field name="CS_Team_Offensive_Bonus_Threshold" class="tourma.languages.Translate" />
		<field name="CS_Team_Offensive_Bonus_Value" class="tourma.languages.Translate" />
		<field name="CS_Team_Diff_Offensive_Bonus_Threshold" class="tourma.languages.Translate" />
		<field name="CS_Team_Diff_Offensive_Bonus_Value" class="tourma.languages.Translate" />
		<field name="CS_Team_Diff_Defensive_Bonus_Threshold" class="tourma.languages.Translate" />
		<field name="CS_Team_Diff_Defensive_Bonus_Value" class="tourma.languages.Translate" />
		<method signature="void &lt;init&gt;()" class="tourma.languages.Translate" />
		<method signature="void sortDatas()" class="tourma.tableModel.MjtAnnexRank" />
		<method signature="int getColumnCount()" class="tourma.tableModel.MjtAnnexRank" />
		<method signature="void setCriteria(tourma.data.Criteria)" class="tourma.tableModel.MjtAnnexRank" />
		<method signature="tourma.data.Formula getFormula()" class="tourma.tableModel.MjtAnnexRank" />
		<method signature="void setFormula(tourma.data.Formula)" class="tourma.tableModel.MjtAnnexRank" />
		<method signature="java.lang.String getColumnName(int)" class="tourma.tableModel.MjtAnnexRank" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="tourma.tableModel.MjtAnnexRank" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="tourma.tableModel.MjtAnnexRank" />
		<method signature="void &lt;init&gt;(int,tourma.data.Formula,int,boolean,java.util.ArrayList,boolean)" class="tourma.tableModel.MjtAnnexRankClan" />
		<method signature="void &lt;init&gt;(boolean,int,tourma.data.Formula,int,java.util.ArrayList,boolean,boolean)" class="tourma.tableModel.MjtAnnexRankTeam" />
		<field name="CS_CriteriaAlreadyExists" class="tourma.tableModel.MjtCriterias" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="tourma.tableModel.MjtCriterias" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="tourma.tableModel.MjtCriterias" />
		<field name="CS_CriteriaAlreadyExists" class="tourma.tableModel.MjtCriteriasIndivBonus" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="tourma.tableModel.MjtCriteriasIndivBonus" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="tourma.tableModel.MjtCriteriasIndivBonus" />
		<field name="CS_CriteriaAlreadyExists" class="tourma.tableModel.MjtCriteriasTeamBonus" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="tourma.tableModel.MjtCriteriasTeamBonus" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="tourma.tableModel.MjtCriteriasTeamBonus" />
		<field name="CS_FormulaAlreadyExists" class="tourma.tableModel.MjtFormulas" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="tourma.tableModel.MjtFormulas" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="tourma.tableModel.MjtFormulas" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="tourma.tableModel.MjtManualMatchs" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="tourma.tableModel.MjtManualMatchs" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="tourma.tableModel.MjtMatchTeams" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="tourma.tableModel.MjtMatchTeams" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="tourma.tableModel.MjtMatches" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="tourma.tableModel.MjtMatches" />
		<class name="tourma.tableModel.MjtPairs" />
		<method signature="int getRankingFromString(java.lang.String,java.util.ArrayList)" class="tourma.tableModel.MjtRanking" />
		<method signature="void sortDatas()" class="tourma.tableModel.MjtRanking" />
		<method signature="void delData(tourma.data.Competitor)" class="tourma.tableModel.MjtRankingManual" />
		<method signature="int getTeamVND(tourma.data.Team,java.util.ArrayList)" class="tourma.tableModel.MjtRankingTeam" />
		<method signature="int getTeamPoints(tourma.data.Team,java.util.ArrayList)" class="tourma.tableModel.MjtRankingTeam" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="tourma.tableModel.MjtTeams" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="tourma.tableModel.MjtTeams" />
		<method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="tourma.utility.ExtensionFileFilter" />
		<method signature="void setDescription(java.lang.String)" class="tourma.utility.ExtensionFileFilter" />
		<method signature="void setFirst(java.lang.Object)" class="tourma.utility.Pair" />
		<method signature="void setSecond(java.lang.Object)" class="tourma.utility.Pair" />
		<class name="tourma.utility.StringConstants" />
		<field name="CS_VERSION_RESOURCES" class="tourma.utility.Version" />
		<field name="CS_VERSION_KEY" class="tourma.utility.Version" />
		<class name="tourma.utils.Balancing" />
		<field name="GEN_ORDER" class="tourma.utils.Generation" />
		<field name="GEN_RANDOM" class="tourma.utils.Generation" />
		<field name="GEN_SWISS" class="tourma.utils.Generation" />
		<field name="GEN_QSWISS" class="tourma.utils.Generation" />
		<field name="GEN_CUP" class="tourma.utils.Generation" />
		<field name="GEN_RROBIN" class="tourma.utils.Generation" />
		<field name="GEN_MANUAL" class="tourma.utils.Generation" />
		<field name="GEN_POOL" class="tourma.utils.Generation" />
		<field name="GEN_NAF" class="tourma.utils.Generation" />
		<field name="GEN_FREE" class="tourma.utils.Generation" />
		<field name="GEN_BALANCED" class="tourma.utils.Generation" />
		<field name="GEN_NAF_AVG" class="tourma.utils.Generation" />
		<field name="GEN_SWISS_TOP_AND_DOWN" class="tourma.utils.Generation" />
		<field name="CS_GenerationError" class="tourma.utils.Generation" />
		<field name="CS_BadNumberOfActivePlayersForTeam" class="tourma.utils.Generation" />
		<field name="CS_OddNumberOfActiveCoachs" class="tourma.utils.Generation" />
		<field name="CS_DoYouWantATeamFirstPairing" class="tourma.utils.Generation" />
		<field name="CS_FirstRound" class="tourma.utils.Generation" />
		<field name="CS_NumberByPool" class="tourma.utils.Generation" />
		<field name="CS_TheNumberOfTeamsIsNotAMultipleOfYourChoice" class="tourma.utils.Generation" />
		<field name="CS_OddInPool" class="tourma.utils.Generation" />
		<field name="CS_DoYouWantToChooseRankTeam" class="tourma.utils.Generation" />
		<field name="CS_ChooseCompetitor" class="tourma.utils.Generation" />
		<field name="CS_ChooseOpponentFor" class="tourma.utils.Generation" />
		<field name="CS_ChoosOpponent" class="tourma.utils.Generation" />
		<field name="CS_IsItDoubleKickTournament" class="tourma.utils.Generation" />
		<field name="CS_NotEnoughRoundToAvoidSameMatch" class="tourma.utils.Generation" />
		<field name="CS_AccleratedSwissMethodIsNotApplicable" class="tourma.utils.Generation" />
		<field name="CS_DoYouWantToMixDraw" class="tourma.utils.Generation" />
		<field name="CS_FinalRoundReached" class="tourma.utils.Generation" />
		<field name="CS_DoYouWantToGenerateThirdPlaceMatch" class="tourma.utils.Generation" />
		<field name="CS_NumberOfTurns" class="tourma.utils.Generation" />
		<field name="CS_DoYouWantToUseCategoriesForTheCup" class="tourma.utils.Generation" />
		<field name="CS_PleaseSelectCategoriesToUseForTheCup" class="tourma.utils.Generation" />
		<field name="CS_MixAll" class="tourma.utils.Generation" />
		<field name="CS_MixByAbsoluteRanking" class="tourma.utils.Generation" />
		<field name="CS_MixByCategoryRanking" class="tourma.utils.Generation" />
		<field name="CS_KeepGroup" class="tourma.utils.Generation" />
		<field name="CS_AffectRoundsToRemainingCoachs" class="tourma.utils.Generation" />
		<field name="CS_UseSwissRoundOrRandom" class="tourma.utils.Generation" />
		<method signature="int factorielle(int)" class="tourma.utils.Generation" />
		<method signature="void &lt;init&gt;()" class="tourma.utils.Generation" />
		<method signature="void lambda$genCupFirst$1(tourma.data.Round,tourma.data.Match)" class="tourma.utils.Generation" />
		<method signature="void lambda$genCup$0(tourma.data.Round,tourma.data.Match)" class="tourma.utils.Generation" />
		<method signature="void &lt;init&gt;()" class="tourma.utils.Icons" />
		<method signature="void &lt;init&gt;()" class="tourma.utils.ImageTreatment" />
		<method signature="java.util.ArrayList getCoachs()" class="tourma.utils.NAF" />
		<method signature="tourma.utils.NAFCoach getCoachById(int)" class="tourma.utils.NAF" />
		<method signature="double getRanking(int,tourma.data.Coach)" class="tourma.utils.NAF" />
		<class name="tourma.utils.NAFIdUpdate" />
		<field name="CS_DownloadFromNAF" class="tourma.utils.NafTask" />
		<field name="CS_Downloading" class="tourma.utils.NafTask" />
		<field name="CS_Download" class="tourma.utils.NafTask" />
		<method signature="void setDetail(java.lang.String)" class="tourma.utils.display.IRanked" />
		<method signature="void &lt;init&gt;()" class="tourma.utils.display.TableFormat" />
		<method signature="void &lt;init&gt;()" class="tourma.utils.web.WebCup" />
		<field name="CS_ENTER_YOUR_PIN_CODE" class="tourma.utils.web.WebMatchResult" />
		<field name="CS_SelectYourName" class="tourma.utils.web.WebMatchResult" />
		<field name="CS_PIN_CODE" class="tourma.utils.web.WebMatchResult" />
		<field name="CS_WRONG_PIN_CODE" class="tourma.utils.web.WebMatchResult" />
		<field name="CS_COACH_NOT_FOUND" class="tourma.utils.web.WebMatchResult" />
		<field name="CS_MATCH_NOT_FOUND_FOR" class="tourma.utils.web.WebMatchResult" />
		<field name="CS_ENTER_OPPONENT_PIN_CODE" class="tourma.utils.web.WebMatchResult" />
		<method signature="void &lt;init&gt;()" class="tourma.utils.web.WebMatchResult" />
		<method signature="void &lt;init&gt;()" class="tourma.utils.web.WebPicture" />
		<method signature="java.lang.String getPictureAsHTML(java.awt.image.BufferedImage,int,int)" class="tourma.utils.web.WebPicture" />
		<method signature="void &lt;init&gt;()" class="tourma.utils.web.WebRound" />
		<field name="CS_Criterias" class="tourma.utils.web.WebRules" />
		<field name="CS_Individual_Points" class="tourma.utils.web.WebRules" />
		<field name="CS_LargeVictory" class="tourma.utils.web.WebRules" />
		<field name="CS_LargeVictoryGap" class="tourma.utils.web.WebRules" />
		<field name="CS_Victory" class="tourma.utils.web.WebRules" />
		<field name="CS_TeamVictoryBonus" class="tourma.utils.web.WebRules" />
		<field name="CS_TeamDrawBonus" class="tourma.utils.web.WebRules" />
		<field name="CS_Draw" class="tourma.utils.web.WebRules" />
		<field name="CS_Lost" class="tourma.utils.web.WebRules" />
		<field name="CS_LittleLost" class="tourma.utils.web.WebRules" />
		<field name="CS_LittleLostGap" class="tourma.utils.web.WebRules" />
		<field name="CS_Order" class="tourma.utils.web.WebRules" />
		<field name="CS_Options" class="tourma.utils.web.WebRules" />
		<field name="CS_ExceptBestAndWorst" class="tourma.utils.web.WebRules" />
		<field name="CS_UseBestResults" class="tourma.utils.web.WebRules" />
		<field name="CS_ExceptBestAndWorstForAnnex" class="tourma.utils.web.WebRules" />
		<field name="CS_NumberOfPlayersForClan" class="tourma.utils.web.WebRules" />
		<field name="CS_AvoidFirstRoundMatchClan" class="tourma.utils.web.WebRules" />
		<field name="CS_AvoidRoundMatchClan" class="tourma.utils.web.WebRules" />
		<field name="CS_Categories" class="tourma.utils.web.WebRules" />
		<field name="CS_Groups" class="tourma.utils.web.WebRules" />
		<field name="CS_MatchAdditional" class="tourma.utils.web.WebRules" />
		<method signature="void &lt;init&gt;()" class="tourma.utils.web.WebRules" />
		<field name="CS_EnterMatchResult" class="tourma.utils.web.WebServer" />
		<field name="CS_Home" class="tourma.utils.web.WebServer" />
		<field name="CS_Rules" class="tourma.utils.web.WebServer" />
		<field name="C_JQUERY1" class="tourma.utils.web.WebServer" />
		<field name="C_JQUERY2" class="tourma.utils.web.WebServer" />
		<field name="C_JQUERY3" class="tourma.utils.web.WebServer" />
		<field name="C_JQUERY4" class="tourma.utils.web.WebServer" />
		<method signature="void &lt;init&gt;()" class="tourma.utils.web.WebStatistics" />
		<field name="CS_OpponentByTeam" class="tourma.views.JPNStatistics" />
		<field name="CS_OpponentByCoach" class="tourma.views.JPNStatistics" />
		<field name="CS_Done" class="tourma.views.JPNStatistics" />
		<field name="CS_DoneAgainst" class="tourma.views.JPNStatistics" />
		<field name="CS_ValueByRoster" class="tourma.views.JPNStatistics" />
		<field name="CS_Roster" class="tourma.views.JPNStatistics" />
		<field name="CS_Number" class="tourma.views.JPNStatistics" />
		<field name="CS_Victories" class="tourma.views.JPNStatistics" />
		<field name="CS_Drawns" class="tourma.views.JPNStatistics" />
		<field name="CS_Losts" class="tourma.views.JPNStatistics" />
		<field name="CS_ResultsByRoster" class="tourma.views.JPNStatistics" />
		<field name="CS_Results" class="tourma.views.JPNStatistics" />
		<field name="CS_Groups" class="tourma.views.JPNStatistics" />
		<field name="CS_Points" class="tourma.views.JPNStatistics" />
		<field name="CS_OpponentsPoints" class="tourma.views.JPNStatistics" />
		<field name="CS_Rankings" class="tourma.views.JPNStatistics" />
		<field name="CS_TeamRankings" class="tourma.views.JPNStatistics" />
		<field name="CS_Ranking" class="tourma.views.JPNStatistics" />
		<field name="CS_Round" class="tourma.views.JPNStatistics" />
		<field name="CS_OpponentsByTeam" class="tourma.views.JPNStatistics" />
		<field name="CS_OpponentsByCoach" class="tourma.views.JPNStatistics" />
		<field name="CS_Opponents" class="tourma.views.JPNStatistics" />
		<field name="CS_MatchsCount" class="tourma.views.JPNStatistics" />
		<field name="parentFrame" class="tourma.views.fullscreen.JFullScreen$ClientLoop" />
		<field name="_screen" class="tourma.views.fullscreen.JFullScreen$ClientLoop" />
		<field name="this$0" class="tourma.views.fullscreen.JFullScreen$ClientLoop" />
		<method signature="void &lt;init&gt;(tourma.views.fullscreen.JFullScreen,tourma.views.fullscreen.JFullScreen,int)" class="tourma.views.fullscreen.JFullScreen$ClientLoop" />
		<method signature="void run()" class="tourma.views.fullscreen.JFullScreen$ClientLoop" />
		<method signature="void &lt;init&gt;(java.net.Socket)" class="tourma.views.fullscreen.JFullScreen" />
		<method signature="void clientLoop(int)" class="tourma.views.fullscreen.JFullScreen" />
		<method signature="void setStop(boolean)" class="tourma.views.fullscreen.JFullScreen" />
		<method signature="java.util.logging.Logger access$100()" class="tourma.views.fullscreen.JFullScreen" />
		<field name="serialVersionUID" class="tourma.views.fullscreen.JFullScreenClanRank" />
		<field name="CS_Clan" class="tourma.views.fullscreen.JFullScreenClanRank" />
		<field name="CS_Members" class="tourma.views.fullscreen.JFullScreenClanRank" />
		<method signature="void &lt;init&gt;(java.net.Socket)" class="tourma.views.fullscreen.JFullScreenClanRank" />
		<method signature="void clientLoop(int)" class="tourma.views.fullscreen.JFullScreenClanRank" />
		<method signature="void setStop(boolean)" class="tourma.views.fullscreen.JFullScreenClanRank" />
		<field name="CS_Clan" class="tourma.views.fullscreen.JFullScreenClanTeamAnnex" />
		<field name="CS_Team" class="tourma.views.fullscreen.JFullScreenClanTeamAnnex" />
		<field name="CS_Pool" class="tourma.views.fullscreen.JFullScreenClanTeamAnnex" />
		<method signature="void &lt;init&gt;(java.net.Socket,boolean)" class="tourma.views.fullscreen.JFullScreenClanTeamAnnex" />
		<method signature="void &lt;init&gt;(java.net.Socket,boolean,boolean)" class="tourma.views.fullscreen.JFullScreenClanTeamAnnex" />
		<method signature="void clientLoop(int)" class="tourma.views.fullscreen.JFullScreenClanTeamAnnex" />
		<method signature="void setStop(boolean)" class="tourma.views.fullscreen.JFullScreenClanTeamAnnex" />
		<field name="CS_Pool" class="tourma.views.fullscreen.JFullScreenIndivAnnex" />
		<field name="CS_Team" class="tourma.views.fullscreen.JFullScreenIndivAnnex" />
		<field name="CS_Clan" class="tourma.views.fullscreen.JFullScreenIndivAnnex" />
		<field name="CS_Coach" class="tourma.views.fullscreen.JFullScreenIndivAnnex" />
		<method signature="void &lt;init&gt;(java.net.Socket)" class="tourma.views.fullscreen.JFullScreenIndivAnnex" />
		<method signature="void &lt;init&gt;(java.net.Socket,int)" class="tourma.views.fullscreen.JFullScreenIndivAnnex" />
		<method signature="void clientLoop(int)" class="tourma.views.fullscreen.JFullScreenIndivAnnex" />
		<method signature="void setStop(boolean)" class="tourma.views.fullscreen.JFullScreenIndivAnnex" />
		<field name="serialVersionUID" class="tourma.views.fullscreen.JFullScreenIndivRank" />
		<field name="C_GENERAL" class="tourma.views.fullscreen.JFullScreenIndivRank" />
		<field name="C_CATEGORY" class="tourma.views.fullscreen.JFullScreenIndivRank" />
		<field name="C_GROUP" class="tourma.views.fullscreen.JFullScreenIndivRank" />
		<field name="C_POOL" class="tourma.views.fullscreen.JFullScreenIndivRank" />
		<field name="CS_Pool" class="tourma.views.fullscreen.JFullScreenIndivRank" />
		<field name="CS_Team" class="tourma.views.fullscreen.JFullScreenIndivRank" />
		<field name="CS_Clan" class="tourma.views.fullscreen.JFullScreenIndivRank" />
		<field name="CS_Coach" class="tourma.views.fullscreen.JFullScreenIndivRank" />
		<field name="CS_Roster" class="tourma.views.fullscreen.JFullScreenIndivRank" />
		<field name="CS_RosterName" class="tourma.views.fullscreen.JFullScreenIndivRank" />
		<method signature="void &lt;init&gt;(java.net.Socket)" class="tourma.views.fullscreen.JFullScreenIndivRank" />
		<method signature="void &lt;init&gt;(java.net.Socket,int)" class="tourma.views.fullscreen.JFullScreenIndivRank" />
		<method signature="void clientLoop(int)" class="tourma.views.fullscreen.JFullScreenIndivRank" />
		<method signature="void setStop(boolean)" class="tourma.views.fullscreen.JFullScreenIndivRank" />
		<field name="CS_Round" class="tourma.views.fullscreen.JFullScreenMatchs$Animation" />
		<field name="CS_Table" class="tourma.views.fullscreen.JFullScreenMatchs$Animation" />
		<method signature="void &lt;init&gt;(java.net.Socket)" class="tourma.views.fullscreen.JFullScreenMatchs" />
		<method signature="void &lt;init&gt;(java.net.Socket,boolean)" class="tourma.views.fullscreen.JFullScreenMatchs" />
		<method signature="void clientLoop(int)" class="tourma.views.fullscreen.JFullScreenMatchs" />
		<method signature="void setStop(boolean)" class="tourma.views.fullscreen.JFullScreenMatchs" />
		<field name="CS_Pool" class="tourma.views.fullscreen.JFullScreenTeamRank" />
		<field name="CS_Team" class="tourma.views.fullscreen.JFullScreenTeamRank" />
		<method signature="void &lt;init&gt;(java.net.Socket)" class="tourma.views.fullscreen.JFullScreenTeamRank" />
		<method signature="void &lt;init&gt;(java.net.Socket,boolean)" class="tourma.views.fullscreen.JFullScreenTeamRank" />
		<method signature="void clientLoop(int)" class="tourma.views.fullscreen.JFullScreenTeamRank" />
		<method signature="void setStop(boolean)" class="tourma.views.fullscreen.JFullScreenTeamRank" />
		<field name="CS_EnterCategoryNameKey" class="tourma.views.parameters.JPNParamCategories" />
		<field name="CS_EnterClanNameKey" class="tourma.views.parameters.JPNParamClan" />
		<field name="CS_SelectAnPicture" class="tourma.views.parameters.JPNParamClan" />
		<field name="CS_Picture" class="tourma.views.parameters.JPNParamClan" />
		<field name="CS_Criteria" class="tourma.views.parameters.JPNParamCriterias" />
		<field name="CS_Formula" class="tourma.views.parameters.JPNParamFormulas" />
		<field name="CS_Possible_Variables" class="tourma.views.parameters.JPNParamFormulas" />
		<field name="CS_EnterNewGroupName" class="tourma.views.parameters.JPNParamGroup" />
		<field name="CS_EnterGroupNewName" class="tourma.views.parameters.JPNParamGroup" />
		<field name="CS_None" class="tourma.views.parameters.JPNParamIndiv" />
		<field name="CS_Points" class="tourma.views.parameters.JPNParamIndiv" />
		<field name="CS_OpponentPoints" class="tourma.views.parameters.JPNParamIndiv" />
		<field name="CS_ACCR_VictoryDrawLost" class="tourma.views.parameters.JPNParamIndiv" />
		<field name="CS_ELO" class="tourma.views.parameters.JPNParamIndiv" />
		<field name="CS_OpponentsElo" class="tourma.views.parameters.JPNParamIndiv" />
		<field name="CS_MatchCount" class="tourma.views.parameters.JPNParamIndiv" />
		<field name="CS_OpponentsPointsExceptOwnMatch" class="tourma.views.parameters.JPNParamIndiv" />
		<field name="CS_TablesPoints" class="tourma.views.parameters.JPNParamIndiv" />
		<field name="CS_PointsWithoutBonus" class="tourma.views.parameters.JPNParamIndiv" />
		<field name="CS_BonusPoints" class="tourma.views.parameters.JPNParamIndiv" />
		<field name="CS_Player" class="tourma.views.parameters.JPNParamIndiv" />
		<field name="CS_Opponent" class="tourma.views.parameters.JPNParamIndiv" />
		<field name="CS_Difference" class="tourma.views.parameters.JPNParamIndiv" />
		<field name="CS_None" class="tourma.views.parameters.JPNParamTeam" />
		<field name="CS_Points" class="tourma.views.parameters.JPNParamTeam" />
		<field name="CS_OpponentPoints" class="tourma.views.parameters.JPNParamTeam" />
		<field name="CS_ACCR_VictoryDrawLost" class="tourma.views.parameters.JPNParamTeam" />
		<field name="CS_ELO" class="tourma.views.parameters.JPNParamTeam" />
		<field name="CS_OpponentsElo" class="tourma.views.parameters.JPNParamTeam" />
		<field name="CS_MatchCount" class="tourma.views.parameters.JPNParamTeam" />
		<field name="CS_OpponentsPointsExceptOwnMatch" class="tourma.views.parameters.JPNParamTeam" />
		<field name="CS_TablesPoints" class="tourma.views.parameters.JPNParamTeam" />
		<field name="CS_PointsWithoutBonus" class="tourma.views.parameters.JPNParamTeam" />
		<field name="CS_BonusPoints" class="tourma.views.parameters.JPNParamTeam" />
		<field name="CS_Player" class="tourma.views.parameters.JPNParamTeam" />
		<field name="CS_Opponent" class="tourma.views.parameters.JPNParamTeam" />
		<field name="CS_Difference" class="tourma.views.parameters.JPNParamTeam" />
		<field name="CS_Individual" class="tourma.views.parameters.JPNParameters" />
		<field name="CS_Criterias" class="tourma.views.parameters.JPNParameters" />
		<field name="CS_Formulas" class="tourma.views.parameters.JPNParameters" />
		<field name="CS_ByTeam" class="tourma.views.parameters.JPNParameters" />
		<field name="CS_Clan" class="tourma.views.parameters.JPNParameters" />
		<field name="CS_Group" class="tourma.views.parameters.JPNParameters" />
		<field name="CS_Category" class="tourma.views.parameters.JPNParameters" />
		<field name="CS_ByTeam" class="tourma.views.parameters.JPNTeams" />
		<field name="CS_Single" class="tourma.views.parameters.JPNTeams" />
		<field name="CS_Membersnumber" class="tourma.views.parameters.JPNTeams" />
		<method signature="void &lt;init&gt;()" class="tourma.views.report.HTMLtoPDF" />
		<method signature="void exportToPDF_Landscape(java.io.FileOutputStream,java.lang.String,java.lang.String)" class="tourma.views.report.HTMLtoPDF" />
		<field name="serialVersionUID" class="tourma.views.report.JdgGlobal" />
		<field name="CS_Round" class="tourma.views.report.JdgGlobal" />
		<field name="CS_ByClan" class="tourma.views.report.JdgGlobal" />
		<field name="CS_ByTeam" class="tourma.views.report.JdgGlobal" />
		<field name="CS_ByCoach" class="tourma.views.report.JdgGlobal" />
		<field name="CS_TheMostFor" class="tourma.views.report.JdgGlobal" />
		<field name="CS_TheLessFor" class="tourma.views.report.JdgGlobal" />
		<field name="CS_TheMoreAgainst" class="tourma.views.report.JdgGlobal" />
		<field name="CS_TheLessAgainst" class="tourma.views.report.JdgGlobal" />
		<field name="CS_ACCR_Versus" class="tourma.views.report.JdgPrintLabel" />
		<field name="CS_Round" class="tourma.views.report.JdgRanking" />
		<field name="serialVersionUID" class="tourma.views.report.JdgReport" />
		<field name="CS_IncludeMembersReports" class="tourma.views.report.JdgReport" />
		<field name="C_INDIVIDUAL" class="tourma.views.report.JdgReport" />
		<field name="C_CLAN" class="tourma.views.report.JdgReport" />
		<field name="C_TEAM" class="tourma.views.report.JdgReport" />
		<field name="CS_TheMostFor" class="tourma.views.report.JdgReport" />
		<field name="CS_TheLessFor" class="tourma.views.report.JdgReport" />
		<field name="CS_TheMoreAgainst" class="tourma.views.report.JdgReport" />
		<field name="CS_TheLessAgainst" class="tourma.views.report.JdgReport" />
		<field name="mTeams1" class="tourma.views.report.JdgRound" />
		<field name="mTeams2" class="tourma.views.report.JdgRound" />
		<field name="CS_Round" class="tourma.views.report.JdgRound" />
		<method signature="void &lt;init&gt;(java.awt.Frame,boolean,java.util.ArrayList,java.util.ArrayList,int,tourma.data.Tournament)" class="tourma.views.report.JdgRound" />
		<method signature="java.io.File createEmptyTeamReport()" class="tourma.views.report.JdgRound" />
		<class name="tourma.views.report.Match" />
		<class name="tourma.views.report.ReportKeys" />
		<field name="CS_Clan" class="tourma.views.round.JPNAnnexRanking" />
		<field name="CS_Opponents" class="tourma.views.round.JPNAnnexRanking" />
		<field name="CS_Team" class="tourma.views.round.JPNAnnexRanking" />
		<field name="CS_Coach" class="tourma.views.round.JPNAnnexRanking" />
		<field name="CS_ByTheClan" class="tourma.views.round.JPNAnnexRanking" />
		<field name="CS_ByTheCoach" class="tourma.views.round.JPNAnnexRanking" />
		<field name="CS_ByTheTeam" class="tourma.views.round.JPNAnnexRanking" />
		<field name="CS_AgainstTheClan" class="tourma.views.round.JPNAnnexRanking" />
		<field name="CS_AgainstTheCoach" class="tourma.views.round.JPNAnnexRanking" />
		<field name="CS_AgainstTheTeam" class="tourma.views.round.JPNAnnexRanking" />
		<field name="CS_GeneralByCategory" class="tourma.views.round.JPNCategory" />
		<field name="CS_GeneralByClan" class="tourma.views.round.JPNClan" />
		<field name="CS_Group" class="tourma.views.round.JPNGroup" />
		<field name="serialVersionUID" class="tourma.views.round.JPNPool" />
		<field name="CS_GeneralByPool" class="tourma.views.round.JPNPool" />
		<field name="serialVersionUID" class="tourma.views.round.JPNRound" />
		<field name="CS_ByTeam" class="tourma.views.round.JPNRound" />
		<field name="CS_ByClan" class="tourma.views.round.JPNRound" />
		<field name="CS_None" class="tourma.views.round.JPNRound" />
		<field name="CS_Group" class="tourma.views.round.JPNRound" />
		<field name="CS_Category" class="tourma.views.round.JPNRound" />
		<field name="CS_Pool" class="tourma.views.round.JPNRound" />
		<field name="CS_GeneralByCoach" class="tourma.views.round.JPNRound" />
		<field name="CS_ChooseARosterFor" class="tourma.views.round.JPNRound" />
		<field name="CS_Roster" class="tourma.views.round.JPNRound" />
		<field name="CS_Matchs" class="tourma.views.round.JPNTeamRound" />
		<field name="CS_generalByTeam" class="tourma.views.round.JPNTeamRound" />
		<field name="CS_Name" class="tourma.views.system.JdgAbout" />
		<field name="CS_Date" class="tourma.views.system.JdgAbout" />
		<field name="CS_Version" class="tourma.views.system.JdgAbout" />
		<field name="CS_Version" class="tourma.views.system.MtRevisions" />
		<field name="CS_Description" class="tourma.views.system.MtRevisions" />
	</removed-code>
	<removed-resources>
	</removed-resources>
<!-- 	shrinked C:\Perso\tourma\dist\TourMa.jar BY 60,10 %. -->
<!-- 	size before: 16833 KB, size after: 6716 KB. -->
<!-- 	removed 857 classes, 2474 methods, 1830 fields, 0 resources. -->
<!-- 	1009 classes remaining of 1866 total. -->
</inOutPair>
</yshrink>

