<?xml version="1.0" encoding="UTF-8"?>
<yshrink version="0.1">
<!-- parsing C:\Perso\Tourma\store\TourMa.jar -->
<entrypoints>
	<class name="org.jfree.chart.plot.PlotRenderingInfo" />
	<method signature="org.jfree.chart.plot.PlotRenderingInfo getSubplotInfo(int)" class="org.jfree.chart.plot.PlotRenderingInfo" />
	<method signature="void &lt;init&gt;(org.jfree.chart.ChartRenderingInfo)" class="org.jfree.chart.plot.PlotRenderingInfo" />
	<method signature="void setDataArea(java.awt.geom.Rectangle2D)" class="org.jfree.chart.plot.PlotRenderingInfo" />
	<method signature="java.awt.geom.Rectangle2D getDataArea()" class="org.jfree.chart.plot.PlotRenderingInfo" />
	<method signature="int getSubplotCount()" class="org.jfree.chart.plot.PlotRenderingInfo" />
	<method signature="void setPlotArea(java.awt.geom.Rectangle2D)" class="org.jfree.chart.plot.PlotRenderingInfo" />
	<method signature="org.jfree.chart.ChartRenderingInfo getOwner()" class="org.jfree.chart.plot.PlotRenderingInfo" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.plot.PlotRenderingInfo" />
	<method signature="int getSubplotIndex(java.awt.geom.Point2D)" class="org.jfree.chart.plot.PlotRenderingInfo" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.plot.PlotRenderingInfo" />
	<method signature="void addSubplotInfo(org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.plot.PlotRenderingInfo" />
	<method signature="java.awt.geom.Rectangle2D getPlotArea()" class="org.jfree.chart.plot.PlotRenderingInfo" />
	<class name="org.jfree.data.general.KeyedValues2DDataset" />
	<class name="com.hexidec.ekit.action.ListAutomationAction" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="com.hexidec.ekit.action.ListAutomationAction" />
	<method signature="void &lt;init&gt;(com.hexidec.ekit.EkitCore,java.lang.String,javax.swing.text.html.HTML$Tag)" class="com.hexidec.ekit.action.ListAutomationAction" />
	<class name="org.apache.xerces.impl.dv.xs.IDREFDV" />
	<method signature="void checkExtraRules(java.lang.Object,org.apache.xerces.impl.dv.ValidationContext)" class="org.apache.xerces.impl.dv.xs.IDREFDV" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.xs.IDREFDV" />
	<method signature="java.lang.Object getActualValue(java.lang.String,org.apache.xerces.impl.dv.ValidationContext)" class="org.apache.xerces.impl.dv.xs.IDREFDV" />
	<method signature="short getAllowedFacets()" class="org.apache.xerces.impl.dv.xs.IDREFDV" />
	<class name="org.apache.html.dom.HTMLTableCaptionElementImpl" />
	<method signature="void setAlign(java.lang.String)" class="org.apache.html.dom.HTMLTableCaptionElementImpl" />
	<method signature="java.lang.String getAlign()" class="org.apache.html.dom.HTMLTableCaptionElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLTableCaptionElementImpl" />
	<class name="com.google.zxing.common.DefaultGridSampler" />
	<method signature="com.google.zxing.common.BitMatrix sampleGrid(com.google.zxing.common.BitMatrix,int,int,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float)" class="com.google.zxing.common.DefaultGridSampler" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.common.DefaultGridSampler" />
	<method signature="com.google.zxing.common.BitMatrix sampleGrid(com.google.zxing.common.BitMatrix,int,int,com.google.zxing.common.PerspectiveTransform)" class="com.google.zxing.common.DefaultGridSampler" />
	<class name="org.apache.wml.WMLPElement" />
	<method signature="void setAlign(java.lang.String)" class="org.apache.wml.WMLPElement" />
	<method signature="java.lang.String getXmlLang()" class="org.apache.wml.WMLPElement" />
	<method signature="void setXmlLang(java.lang.String)" class="org.apache.wml.WMLPElement" />
	<method signature="java.lang.String getMode()" class="org.apache.wml.WMLPElement" />
	<method signature="java.lang.String getAlign()" class="org.apache.wml.WMLPElement" />
	<method signature="void setMode(java.lang.String)" class="org.apache.wml.WMLPElement" />
	<class name="tourma.utility.Sleeping" />
	<method signature="void sleep(long,int)" class="tourma.utility.Sleeping" />
	<method signature="void &lt;init&gt;(tourma.utility.Suspendable)" class="tourma.utility.Sleeping" />
	<class name="com.google.zxing.qrcode.decoder.ErrorCorrectionLevel" />
	<method signature="com.google.zxing.qrcode.decoder.ErrorCorrectionLevel valueOf(java.lang.String)" class="com.google.zxing.qrcode.decoder.ErrorCorrectionLevel" />
	<method signature="int getBits()" class="com.google.zxing.qrcode.decoder.ErrorCorrectionLevel" />
	<method signature="com.google.zxing.qrcode.decoder.ErrorCorrectionLevel forBits(int)" class="com.google.zxing.qrcode.decoder.ErrorCorrectionLevel" />
	<method signature="com.google.zxing.qrcode.decoder.ErrorCorrectionLevel[] values()" class="com.google.zxing.qrcode.decoder.ErrorCorrectionLevel" />
	<class name="org.apache.xerces.dom.DeferredCDATASectionImpl" />
	<method signature="int getNodeIndex()" class="org.apache.xerces.dom.DeferredCDATASectionImpl" />
	<class name="org.jdom2.CDATA" />
	<method signature="org.jdom2.CDATA setText(java.lang.String)" class="org.jdom2.CDATA" />
	<method signature="void append(java.lang.String)" class="org.jdom2.CDATA" />
	<method signature="org.jdom2.Text setText(java.lang.String)" class="org.jdom2.CDATA" />
	<method signature="org.jdom2.Content detach()" class="org.jdom2.CDATA" />
	<method signature="org.jdom2.Content clone()" class="org.jdom2.CDATA" />
	<method signature="org.jdom2.Text clone()" class="org.jdom2.CDATA" />
	<method signature="java.lang.Object clone()" class="org.jdom2.CDATA" />
	<method signature="void append(org.jdom2.Text)" class="org.jdom2.CDATA" />
	<method signature="org.jdom2.Text detach()" class="org.jdom2.CDATA" />
	<method signature="java.lang.String toString()" class="org.jdom2.CDATA" />
	<method signature="org.jdom2.CDATA detach()" class="org.jdom2.CDATA" />
	<method signature="org.jdom2.CDATA clone()" class="org.jdom2.CDATA" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jdom2.CDATA" />
	<method signature="org.jdom2.CloneBase clone()" class="org.jdom2.CDATA" />
	<class name="org.apache.xerces.dom3.as.DOMASException" />
	<method signature="void &lt;init&gt;(short,java.lang.String)" class="org.apache.xerces.dom3.as.DOMASException" />
	<class name="org.jdom2.input.sax.XMLReaders" />
	<method signature="boolean isValidating()" class="org.jdom2.input.sax.XMLReaders" />
	<method signature="org.jdom2.input.sax.XMLReaders valueOf(java.lang.String)" class="org.jdom2.input.sax.XMLReaders" />
	<method signature="org.xml.sax.XMLReader createXMLReader()" class="org.jdom2.input.sax.XMLReaders" />
	<method signature="org.jdom2.input.sax.XMLReaders[] values()" class="org.jdom2.input.sax.XMLReaders" />
	<class name="org.jfree.ui.SerialDateChooserPanel" />
	<method signature="void &lt;init&gt;(org.jfree.date.SerialDate,boolean)" class="org.jfree.ui.SerialDateChooserPanel" />
	<method signature="org.jfree.date.SerialDate getDate()" class="org.jfree.ui.SerialDateChooserPanel" />
	<method signature="void setDate(org.jfree.date.SerialDate)" class="org.jfree.ui.SerialDateChooserPanel" />
	<method signature="void &lt;init&gt;(org.jfree.date.SerialDate,boolean,java.awt.Color,java.awt.Color)" class="org.jfree.ui.SerialDateChooserPanel" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="org.jfree.ui.SerialDateChooserPanel" />
	<method signature="void &lt;init&gt;()" class="org.jfree.ui.SerialDateChooserPanel" />
	<class name="javax.annotation.concurrent.NotThreadSafe" />
	<class name="org.jfree.data.statistics.HistogramType" />
	<method signature="int hashCode()" class="org.jfree.data.statistics.HistogramType" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.statistics.HistogramType" />
	<method signature="java.lang.String toString()" class="org.jfree.data.statistics.HistogramType" />
	<class name="org.jdom2.output.support.SAXOutputProcessor" />
	<method signature="void process(org.jdom2.output.support.SAXTarget,org.jdom2.output.Format,org.jdom2.Comment)" class="org.jdom2.output.support.SAXOutputProcessor" />
	<method signature="void processAsDocument(org.jdom2.output.support.SAXTarget,org.jdom2.output.Format,org.jdom2.Element)" class="org.jdom2.output.support.SAXOutputProcessor" />
	<method signature="void process(org.jdom2.output.support.SAXTarget,org.jdom2.output.Format,org.jdom2.Text)" class="org.jdom2.output.support.SAXOutputProcessor" />
	<method signature="void process(org.jdom2.output.support.SAXTarget,org.jdom2.output.Format,java.util.List)" class="org.jdom2.output.support.SAXOutputProcessor" />
	<method signature="void process(org.jdom2.output.support.SAXTarget,org.jdom2.output.Format,org.jdom2.CDATA)" class="org.jdom2.output.support.SAXOutputProcessor" />
	<method signature="void process(org.jdom2.output.support.SAXTarget,org.jdom2.output.Format,org.jdom2.EntityRef)" class="org.jdom2.output.support.SAXOutputProcessor" />
	<method signature="void process(org.jdom2.output.support.SAXTarget,org.jdom2.output.Format,org.jdom2.Document)" class="org.jdom2.output.support.SAXOutputProcessor" />
	<method signature="void processAsDocument(org.jdom2.output.support.SAXTarget,org.jdom2.output.Format,java.util.List)" class="org.jdom2.output.support.SAXOutputProcessor" />
	<method signature="void process(org.jdom2.output.support.SAXTarget,org.jdom2.output.Format,org.jdom2.DocType)" class="org.jdom2.output.support.SAXOutputProcessor" />
	<method signature="void process(org.jdom2.output.support.SAXTarget,org.jdom2.output.Format,org.jdom2.Element)" class="org.jdom2.output.support.SAXOutputProcessor" />
	<method signature="void process(org.jdom2.output.support.SAXTarget,org.jdom2.output.Format,org.jdom2.ProcessingInstruction)" class="org.jdom2.output.support.SAXOutputProcessor" />
	<class name="com.toedter.components.UTF8ResourceBundle" />
	<method signature="java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)" class="com.toedter.components.UTF8ResourceBundle" />
	<method signature="void &lt;init&gt;()" class="com.toedter.components.UTF8ResourceBundle" />
	<class name="org.apache.xerces.dom3.as.ASElementDeclaration" />
	<method signature="short getContentType()" class="org.apache.xerces.dom3.as.ASElementDeclaration" />
	<method signature="java.lang.String getSystemId()" class="org.apache.xerces.dom3.as.ASElementDeclaration" />
	<method signature="void setSystemId(java.lang.String)" class="org.apache.xerces.dom3.as.ASElementDeclaration" />
	<method signature="boolean getStrictMixedContent()" class="org.apache.xerces.dom3.as.ASElementDeclaration" />
	<method signature="org.apache.xerces.dom3.as.ASNamedObjectMap getASAttributeDecls()" class="org.apache.xerces.dom3.as.ASElementDeclaration" />
	<method signature="org.apache.xerces.dom3.as.ASDataType getElementType()" class="org.apache.xerces.dom3.as.ASElementDeclaration" />
	<method signature="org.apache.xerces.dom3.as.ASAttributeDeclaration removeASAttributeDecl(org.apache.xerces.dom3.as.ASAttributeDeclaration)" class="org.apache.xerces.dom3.as.ASElementDeclaration" />
	<method signature="void setContentType(short)" class="org.apache.xerces.dom3.as.ASElementDeclaration" />
	<method signature="void setIsPCDataOnly(boolean)" class="org.apache.xerces.dom3.as.ASElementDeclaration" />
	<method signature="org.apache.xerces.dom3.as.ASContentModel getAsCM()" class="org.apache.xerces.dom3.as.ASElementDeclaration" />
	<method signature="void setStrictMixedContent(boolean)" class="org.apache.xerces.dom3.as.ASElementDeclaration" />
	<method signature="boolean getIsPCDataOnly()" class="org.apache.xerces.dom3.as.ASElementDeclaration" />
	<method signature="void setAsCM(org.apache.xerces.dom3.as.ASContentModel)" class="org.apache.xerces.dom3.as.ASElementDeclaration" />
	<method signature="void setElementType(org.apache.xerces.dom3.as.ASDataType)" class="org.apache.xerces.dom3.as.ASElementDeclaration" />
	<method signature="void setASAttributeDecls(org.apache.xerces.dom3.as.ASNamedObjectMap)" class="org.apache.xerces.dom3.as.ASElementDeclaration" />
	<method signature="void addASAttributeDecl(org.apache.xerces.dom3.as.ASAttributeDeclaration)" class="org.apache.xerces.dom3.as.ASElementDeclaration" />
	<class name="org.apache.xerces.impl.dv.DTDDVFactory" />
	<method signature="org.apache.xerces.impl.dv.DTDDVFactory getInstance()" class="org.apache.xerces.impl.dv.DTDDVFactory" />
	<method signature="java.util.Hashtable getBuiltInTypes()" class="org.apache.xerces.impl.dv.DTDDVFactory" />
	<method signature="org.apache.xerces.impl.dv.DatatypeValidator getBuiltInDV(java.lang.String)" class="org.apache.xerces.impl.dv.DTDDVFactory" />
	<method signature="org.apache.xerces.impl.dv.DTDDVFactory getInstance(java.lang.String)" class="org.apache.xerces.impl.dv.DTDDVFactory" />
	<class name="org.apache.xerces.dom.CommentImpl" />
	<method signature="short getNodeType()" class="org.apache.xerces.dom.CommentImpl" />
	<method signature="void &lt;init&gt;(org.apache.xerces.dom.CoreDocumentImpl,java.lang.String)" class="org.apache.xerces.dom.CommentImpl" />
	<method signature="java.lang.String getNodeName()" class="org.apache.xerces.dom.CommentImpl" />
	<class name="org.apache.xerces.xs.datatypes.ObjectList" />
	<method signature="boolean contains(java.lang.Object)" class="org.apache.xerces.xs.datatypes.ObjectList" />
	<method signature="java.lang.Object item(int)" class="org.apache.xerces.xs.datatypes.ObjectList" />
	<method signature="int getLength()" class="org.apache.xerces.xs.datatypes.ObjectList" />
	<class name="org.w3c.dom.ls.LSException" />
	<method signature="void &lt;init&gt;(short,java.lang.String)" class="org.w3c.dom.ls.LSException" />
	<class name="org.apache.xerces.dom.DOMStringListImpl" />
	<method signature="void &lt;init&gt;(java.util.ArrayList)" class="org.apache.xerces.dom.DOMStringListImpl" />
	<method signature="java.lang.String item(int)" class="org.apache.xerces.dom.DOMStringListImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.dom.DOMStringListImpl" />
	<method signature="void add(java.lang.String)" class="org.apache.xerces.dom.DOMStringListImpl" />
	<method signature="boolean contains(java.lang.String)" class="org.apache.xerces.dom.DOMStringListImpl" />
	<method signature="void &lt;init&gt;(java.util.Vector)" class="org.apache.xerces.dom.DOMStringListImpl" />
	<method signature="int getLength()" class="org.apache.xerces.dom.DOMStringListImpl" />
	<class name="freemarker.ext.jdom.NodeListModel" />
	<method signature="int size()" class="freemarker.ext.jdom.NodeListModel" />
	<method signature="void &lt;init&gt;(java.util.List,boolean)" class="freemarker.ext.jdom.NodeListModel" />
	<method signature="java.lang.String getAsString()" class="freemarker.ext.jdom.NodeListModel" />
	<method signature="freemarker.template.TemplateModel get(int)" class="freemarker.ext.jdom.NodeListModel" />
	<method signature="boolean isEmpty()" class="freemarker.ext.jdom.NodeListModel" />
	<method signature="void main(java.lang.String[])" class="freemarker.ext.jdom.NodeListModel" />
	<method signature="void &lt;init&gt;(java.util.List)" class="freemarker.ext.jdom.NodeListModel" />
	<method signature="void &lt;init&gt;(org.jdom.Element)" class="freemarker.ext.jdom.NodeListModel" />
	<method signature="void &lt;init&gt;(org.jdom.Document)" class="freemarker.ext.jdom.NodeListModel" />
	<method signature="freemarker.template.TemplateModelIterator iterator()" class="freemarker.ext.jdom.NodeListModel" />
	<method signature="java.lang.Object exec(java.util.List)" class="freemarker.ext.jdom.NodeListModel" />
	<method signature="void registerNamespace(java.lang.String,java.lang.String)" class="freemarker.ext.jdom.NodeListModel" />
	<method signature="freemarker.template.TemplateModel get(java.lang.String)" class="freemarker.ext.jdom.NodeListModel" />
	<class name="org.jfree.chart.util.XYCoordinateType" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.util.XYCoordinateType" />
	<method signature="java.lang.String toString()" class="org.jfree.chart.util.XYCoordinateType" />
	<class name="javax.xml.stream.XMLStreamWriter" />
	<method signature="void writeStartDocument()" class="javax.xml.stream.XMLStreamWriter" />
	<method signature="void setNamespaceContext(javax.xml.namespace.NamespaceContext)" class="javax.xml.stream.XMLStreamWriter" />
	<method signature="void writeDefaultNamespace(java.lang.String)" class="javax.xml.stream.XMLStreamWriter" />
	<method signature="void writeProcessingInstruction(java.lang.String)" class="javax.xml.stream.XMLStreamWriter" />
	<method signature="void writeProcessingInstruction(java.lang.String,java.lang.String)" class="javax.xml.stream.XMLStreamWriter" />
	<method signature="void writeAttribute(java.lang.String,java.lang.String)" class="javax.xml.stream.XMLStreamWriter" />
	<method signature="void writeCharacters(char[],int,int)" class="javax.xml.stream.XMLStreamWriter" />
	<method signature="void writeDTD(java.lang.String)" class="javax.xml.stream.XMLStreamWriter" />
	<method signature="java.lang.String getPrefix(java.lang.String)" class="javax.xml.stream.XMLStreamWriter" />
	<method signature="void writeComment(java.lang.String)" class="javax.xml.stream.XMLStreamWriter" />
	<method signature="void writeNamespace(java.lang.String,java.lang.String)" class="javax.xml.stream.XMLStreamWriter" />
	<method signature="javax.xml.namespace.NamespaceContext getNamespaceContext()" class="javax.xml.stream.XMLStreamWriter" />
	<method signature="void writeEndDocument()" class="javax.xml.stream.XMLStreamWriter" />
	<method signature="void writeAttribute(java.lang.String,java.lang.String,java.lang.String)" class="javax.xml.stream.XMLStreamWriter" />
	<method signature="void writeEmptyElement(java.lang.String,java.lang.String,java.lang.String)" class="javax.xml.stream.XMLStreamWriter" />
	<method signature="void setPrefix(java.lang.String,java.lang.String)" class="javax.xml.stream.XMLStreamWriter" />
	<method signature="void close()" class="javax.xml.stream.XMLStreamWriter" />
	<method signature="void setDefaultNamespace(java.lang.String)" class="javax.xml.stream.XMLStreamWriter" />
	<method signature="void writeEndElement()" class="javax.xml.stream.XMLStreamWriter" />
	<method signature="void writeStartElement(java.lang.String)" class="javax.xml.stream.XMLStreamWriter" />
	<method signature="void writeStartElement(java.lang.String,java.lang.String)" class="javax.xml.stream.XMLStreamWriter" />
	<method signature="void writeAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="javax.xml.stream.XMLStreamWriter" />
	<method signature="void writeCData(java.lang.String)" class="javax.xml.stream.XMLStreamWriter" />
	<method signature="void writeStartDocument(java.lang.String)" class="javax.xml.stream.XMLStreamWriter" />
	<method signature="void writeStartDocument(java.lang.String,java.lang.String)" class="javax.xml.stream.XMLStreamWriter" />
	<method signature="void flush()" class="javax.xml.stream.XMLStreamWriter" />
	<method signature="void writeEmptyElement(java.lang.String)" class="javax.xml.stream.XMLStreamWriter" />
	<method signature="void writeEmptyElement(java.lang.String,java.lang.String)" class="javax.xml.stream.XMLStreamWriter" />
	<method signature="void writeEntityRef(java.lang.String)" class="javax.xml.stream.XMLStreamWriter" />
	<method signature="void writeCharacters(java.lang.String)" class="javax.xml.stream.XMLStreamWriter" />
	<method signature="void writeStartElement(java.lang.String,java.lang.String,java.lang.String)" class="javax.xml.stream.XMLStreamWriter" />
	<method signature="java.lang.Object getProperty(java.lang.String)" class="javax.xml.stream.XMLStreamWriter" />
	<class name="org.jdom2.output.support.WalkerNORMALIZE" />
	<method signature="void &lt;init&gt;(java.util.List,org.jdom2.output.support.FormatStack,boolean)" class="org.jdom2.output.support.WalkerNORMALIZE" />
	<class name="org.apache.xerces.impl.dv.xs.MonthDV" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.xs.MonthDV" />
	<method signature="java.lang.Object getActualValue(java.lang.String,org.apache.xerces.impl.dv.ValidationContext)" class="org.apache.xerces.impl.dv.xs.MonthDV" />
	<class name="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="org.apache.xerces.xs.XSNotationDeclaration getNotationDeclaration(java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="void addAnnotation(org.apache.xerces.impl.xs.XSAnnotationImpl)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="void addGlobalAttributeGroupDecl(org.apache.xerces.impl.xs.XSAttributeGroupDecl,java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="void addGlobalTypeDecl(org.apache.xerces.xs.XSTypeDefinition,java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="void addGlobalSimpleTypeDecl(org.apache.xerces.impl.dv.XSSimpleType,java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="void addDocument(java.lang.Object,java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="void addGlobalElementDeclAll(org.apache.xerces.impl.xs.XSElementDecl)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="org.apache.xerces.xs.XSTypeDefinition getTypeDefinition(java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="void addGlobalElementDecl(org.apache.xerces.impl.xs.XSElementDecl,java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="void &lt;init&gt;(org.apache.xerces.impl.xs.SchemaGrammar)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="void addGlobalAttributeDecl(org.apache.xerces.impl.xs.XSAttributeDecl)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="void resetComponents()" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="org.apache.xerces.xs.datatypes.ObjectList getComponentsExt(short)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="void addGlobalTypeDecl(org.apache.xerces.xs.XSTypeDefinition)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="org.apache.xerces.xs.XSIDCDefinition getIDCDefinition(java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="void addGlobalComplexTypeDecl(org.apache.xerces.impl.xs.XSComplexTypeDecl,java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="org.apache.xerces.impl.xs.XSAttributeDecl getGlobalAttributeDecl(java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="org.apache.xerces.xs.XSAttributeGroupDefinition getAttributeGroup(java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="void addGlobalAttributeGroupDecl(org.apache.xerces.impl.xs.XSAttributeGroupDecl)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="org.apache.xerces.impl.xs.identity.IdentityConstraint getIDConstraintDecl(java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="org.apache.xerces.impl.xs.XSAttributeDecl getGlobalAttributeDecl(java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="org.apache.xerces.xs.XSTypeDefinition getGlobalTypeDecl(java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="boolean isImmutable()" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="org.apache.xerces.xs.XSModelGroupDefinition getModelGroupDefinition(java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="org.apache.xerces.impl.xs.XSAttributeGroupDecl getGlobalAttributeGroupDecl(java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="void addComplexTypeDecl(org.apache.xerces.impl.xs.XSComplexTypeDecl,org.apache.xerces.impl.xs.util.SimpleLocator)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="org.apache.xerces.xs.XSElementDeclaration getElementDeclaration(java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="void setImportedGrammars(java.util.Vector)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="org.apache.xerces.xs.XSTypeDefinition getGlobalTypeDecl(java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="java.util.Vector getImportedGrammars()" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="void addGlobalElementDecl(org.apache.xerces.impl.xs.XSElementDecl)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="void &lt;init&gt;(java.lang.String,org.apache.xerces.impl.xs.XSDDescription,org.apache.xerces.util.SymbolTable)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="boolean hasIDConstraints()" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="void addGlobalSimpleTypeDecl(org.apache.xerces.impl.dv.XSSimpleType)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="void setImmutable(boolean)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="org.apache.xerces.impl.xs.SchemaGrammar getS4SGrammar(short)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="void addGlobalNotationDecl(org.apache.xerces.impl.xs.XSNotationDecl,java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="org.apache.xerces.xs.XSAttributeDeclaration getAttributeDeclaration(java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="void addGlobalGroupDecl(org.apache.xerces.impl.xs.XSGroupDecl)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="org.apache.xerces.impl.xs.XSGroupDecl getGlobalGroupDecl(java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="org.apache.xerces.xs.StringList getDocumentLocations()" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="void addRedefinedGroupDecl(org.apache.xerces.impl.xs.XSGroupDecl,org.apache.xerces.impl.xs.XSGroupDecl,org.apache.xerces.impl.xs.util.SimpleLocator)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="void addGlobalComplexTypeDecl(org.apache.xerces.impl.xs.XSComplexTypeDecl)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="org.apache.xerces.impl.xs.XSNotationDecl getGlobalNotationDecl(java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="java.lang.String getTargetNamespace()" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="void addGlobalGroupDecl(org.apache.xerces.impl.xs.XSGroupDecl,java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="java.lang.String getSchemaNamespace()" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="boolean isNamespaceAware()" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="void addGlobalAttributeDecl(org.apache.xerces.impl.xs.XSAttributeDecl,java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="org.apache.xerces.impl.xs.XSElementDecl getGlobalElementDecl(java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="void addGlobalNotationDecl(org.apache.xerces.impl.xs.XSNotationDecl)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="org.apache.xerces.impl.xs.identity.IdentityConstraint getIDConstraintDecl(java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="org.apache.xerces.xni.grammars.XMLGrammarDescription getGrammarDescription()" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="org.apache.xerces.impl.xs.XSElementDecl getGlobalElementDecl(java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="org.apache.xerces.xs.XSModel toXSModel()" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="org.apache.xerces.xs.XSObjectList getAnnotations()" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="org.apache.xerces.impl.xs.XSNotationDecl getGlobalNotationDecl(java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="org.apache.xerces.xs.XSModel toXSModel(org.apache.xerces.xni.grammars.XSGrammar[])" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="org.apache.xerces.xs.XSNamedMap getComponents(short)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="void removeDocument(int)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="void addIDConstraintDecl(org.apache.xerces.impl.xs.XSElementDecl,org.apache.xerces.impl.xs.identity.IdentityConstraint,java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="void addIDConstraintDecl(org.apache.xerces.impl.xs.XSElementDecl,org.apache.xerces.impl.xs.identity.IdentityConstraint)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="org.apache.xerces.impl.xs.XSAttributeGroupDecl getGlobalAttributeGroupDecl(java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<method signature="org.apache.xerces.impl.xs.XSGroupDecl getGlobalGroupDecl(java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar" />
	<class name="org.jfree.ui.about.AboutDialog" />
	<method signature="void &lt;init&gt;(java.lang.String,org.jfree.ui.about.ProjectInfo)" class="org.jfree.ui.about.AboutDialog" />
	<method signature="void &lt;init&gt;(java.awt.Frame,java.lang.String,org.jfree.ui.about.ProjectInfo)" class="org.jfree.ui.about.AboutDialog" />
	<method signature="void &lt;init&gt;(java.awt.Dialog,java.lang.String,org.jfree.ui.about.ProjectInfo)" class="org.jfree.ui.about.AboutDialog" />
	<method signature="java.awt.Dimension getPreferredSize()" class="org.jfree.ui.about.AboutDialog" />
	<class name="org.apache.xerces.xni.parser.XMLDTDContentModelSource" />
	<method signature="org.apache.xerces.xni.XMLDTDContentModelHandler getDTDContentModelHandler()" class="org.apache.xerces.xni.parser.XMLDTDContentModelSource" />
	<method signature="void setDTDContentModelHandler(org.apache.xerces.xni.XMLDTDContentModelHandler)" class="org.apache.xerces.xni.parser.XMLDTDContentModelSource" />
	<class name="org.jdom2.input.sax.XMLReaderSchemaFactory" />
	<method signature="void &lt;init&gt;(javax.xml.validation.Schema)" class="org.jdom2.input.sax.XMLReaderSchemaFactory" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.ClassLoader,javax.xml.validation.Schema)" class="org.jdom2.input.sax.XMLReaderSchemaFactory" />
	<class name="org.jfree.chart.annotations.XYTitleAnnotation" />
	<method signature="double getY()" class="org.jfree.chart.annotations.XYTitleAnnotation" />
	<method signature="int hashCode()" class="org.jfree.chart.annotations.XYTitleAnnotation" />
	<method signature="double getX()" class="org.jfree.chart.annotations.XYTitleAnnotation" />
	<method signature="org.jfree.chart.title.Title getTitle()" class="org.jfree.chart.annotations.XYTitleAnnotation" />
	<method signature="org.jfree.ui.RectangleAnchor getTitleAnchor()" class="org.jfree.chart.annotations.XYTitleAnnotation" />
	<method signature="void setMaxHeight(double)" class="org.jfree.chart.annotations.XYTitleAnnotation" />
	<method signature="org.jfree.chart.util.XYCoordinateType getCoordinateType()" class="org.jfree.chart.annotations.XYTitleAnnotation" />
	<method signature="double getMaxHeight()" class="org.jfree.chart.annotations.XYTitleAnnotation" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.annotations.XYTitleAnnotation" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.annotations.XYTitleAnnotation" />
	<method signature="void &lt;init&gt;(double,double,org.jfree.chart.title.Title)" class="org.jfree.chart.annotations.XYTitleAnnotation" />
	<method signature="void setMaxWidth(double)" class="org.jfree.chart.annotations.XYTitleAnnotation" />
	<method signature="void &lt;init&gt;(double,double,org.jfree.chart.title.Title,org.jfree.ui.RectangleAnchor)" class="org.jfree.chart.annotations.XYTitleAnnotation" />
	<method signature="void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.annotations.XYTitleAnnotation" />
	<method signature="double getMaxWidth()" class="org.jfree.chart.annotations.XYTitleAnnotation" />
	<class name="org.w3c.dom.html.HTMLDirectoryElement" />
	<method signature="void setCompact(boolean)" class="org.w3c.dom.html.HTMLDirectoryElement" />
	<method signature="boolean getCompact()" class="org.w3c.dom.html.HTMLDirectoryElement" />
	<class name="javax.annotation.meta.When" />
	<method signature="javax.annotation.meta.When valueOf(java.lang.String)" class="javax.annotation.meta.When" />
	<method signature="javax.annotation.meta.When[] values()" class="javax.annotation.meta.When" />
	<class name="org.w3c.dom.html.HTMLTableElement" />
	<method signature="void setTFoot(org.w3c.dom.html.HTMLTableSectionElement)" class="org.w3c.dom.html.HTMLTableElement" />
	<method signature="void deleteTHead()" class="org.w3c.dom.html.HTMLTableElement" />
	<method signature="void setBgColor(java.lang.String)" class="org.w3c.dom.html.HTMLTableElement" />
	<method signature="java.lang.String getBorder()" class="org.w3c.dom.html.HTMLTableElement" />
	<method signature="void setFrame(java.lang.String)" class="org.w3c.dom.html.HTMLTableElement" />
	<method signature="java.lang.String getFrame()" class="org.w3c.dom.html.HTMLTableElement" />
	<method signature="org.w3c.dom.html.HTMLElement insertRow(int)" class="org.w3c.dom.html.HTMLTableElement" />
	<method signature="java.lang.String getWidth()" class="org.w3c.dom.html.HTMLTableElement" />
	<method signature="void setRules(java.lang.String)" class="org.w3c.dom.html.HTMLTableElement" />
	<method signature="org.w3c.dom.html.HTMLElement createTHead()" class="org.w3c.dom.html.HTMLTableElement" />
	<method signature="java.lang.String getRules()" class="org.w3c.dom.html.HTMLTableElement" />
	<method signature="org.w3c.dom.html.HTMLTableSectionElement getTFoot()" class="org.w3c.dom.html.HTMLTableElement" />
	<method signature="java.lang.String getCellPadding()" class="org.w3c.dom.html.HTMLTableElement" />
	<method signature="void deleteTFoot()" class="org.w3c.dom.html.HTMLTableElement" />
	<method signature="void setAlign(java.lang.String)" class="org.w3c.dom.html.HTMLTableElement" />
	<method signature="void setBorder(java.lang.String)" class="org.w3c.dom.html.HTMLTableElement" />
	<method signature="java.lang.String getCellSpacing()" class="org.w3c.dom.html.HTMLTableElement" />
	<method signature="java.lang.String getSummary()" class="org.w3c.dom.html.HTMLTableElement" />
	<method signature="void setCellSpacing(java.lang.String)" class="org.w3c.dom.html.HTMLTableElement" />
	<method signature="org.w3c.dom.html.HTMLCollection getRows()" class="org.w3c.dom.html.HTMLTableElement" />
	<method signature="void setCaption(org.w3c.dom.html.HTMLTableCaptionElement)" class="org.w3c.dom.html.HTMLTableElement" />
	<method signature="org.w3c.dom.html.HTMLTableSectionElement getTHead()" class="org.w3c.dom.html.HTMLTableElement" />
	<method signature="java.lang.String getAlign()" class="org.w3c.dom.html.HTMLTableElement" />
	<method signature="void setTHead(org.w3c.dom.html.HTMLTableSectionElement)" class="org.w3c.dom.html.HTMLTableElement" />
	<method signature="org.w3c.dom.html.HTMLElement createTFoot()" class="org.w3c.dom.html.HTMLTableElement" />
	<method signature="void deleteRow(int)" class="org.w3c.dom.html.HTMLTableElement" />
	<method signature="org.w3c.dom.html.HTMLElement createCaption()" class="org.w3c.dom.html.HTMLTableElement" />
	<method signature="void setCellPadding(java.lang.String)" class="org.w3c.dom.html.HTMLTableElement" />
	<method signature="void setSummary(java.lang.String)" class="org.w3c.dom.html.HTMLTableElement" />
	<method signature="org.w3c.dom.html.HTMLCollection getTBodies()" class="org.w3c.dom.html.HTMLTableElement" />
	<method signature="org.w3c.dom.html.HTMLTableCaptionElement getCaption()" class="org.w3c.dom.html.HTMLTableElement" />
	<method signature="void deleteCaption()" class="org.w3c.dom.html.HTMLTableElement" />
	<method signature="void setWidth(java.lang.String)" class="org.w3c.dom.html.HTMLTableElement" />
	<method signature="java.lang.String getBgColor()" class="org.w3c.dom.html.HTMLTableElement" />
	<class name="org.w3c.dom.ls.LSOutput" />
	<method signature="java.lang.String getSystemId()" class="org.w3c.dom.ls.LSOutput" />
	<method signature="void setCharacterStream(java.io.Writer)" class="org.w3c.dom.ls.LSOutput" />
	<method signature="void setSystemId(java.lang.String)" class="org.w3c.dom.ls.LSOutput" />
	<method signature="java.lang.String getEncoding()" class="org.w3c.dom.ls.LSOutput" />
	<method signature="void setEncoding(java.lang.String)" class="org.w3c.dom.ls.LSOutput" />
	<method signature="void setByteStream(java.io.OutputStream)" class="org.w3c.dom.ls.LSOutput" />
	<method signature="java.io.OutputStream getByteStream()" class="org.w3c.dom.ls.LSOutput" />
	<method signature="java.io.Writer getCharacterStream()" class="org.w3c.dom.ls.LSOutput" />
	<class name="tourma.MainFrame" />
	<method signature="boolean isRoundOnly()" class="tourma.MainFrame" />
	<method signature="void &lt;init&gt;(int)" class="tourma.MainFrame" />
	<method signature="void main(java.lang.String[])" class="tourma.MainFrame" />
	<method signature="tourma.MainFrame getMainFrame(int)" class="tourma.MainFrame" />
	<method signature="void update()" class="tourma.MainFrame" />
	<method signature="tourma.MainFrame getMainFrame()" class="tourma.MainFrame" />
	<method signature="void propertyChange(java.beans.PropertyChangeEvent)" class="tourma.MainFrame" />
	<method signature="boolean isNafOnly()" class="tourma.MainFrame" />
	<method signature="void updateTree()" class="tourma.MainFrame" />
	<class name="tourma.tableModel.MjtAnnexRankTeam" />
	<method signature="java.awt.Component getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)" class="tourma.tableModel.MjtAnnexRankTeam" />
	<method signature="java.lang.String getColumnName(int)" class="tourma.tableModel.MjtAnnexRankTeam" />
	<method signature="java.lang.Object getValueAt(int,int)" class="tourma.tableModel.MjtAnnexRankTeam" />
	<method signature="void &lt;init&gt;(boolean,int,tourma.data.Criteria,int,java.util.ArrayList,boolean,boolean)" class="tourma.tableModel.MjtAnnexRankTeam" />
	<method signature="void &lt;init&gt;(int,tourma.data.Criteria,int,java.util.ArrayList,boolean,int,int,int,int,int,boolean)" class="tourma.tableModel.MjtAnnexRankTeam" />
	<method signature="int getColumnCount()" class="tourma.tableModel.MjtAnnexRankTeam" />
	<class name="org.w3c.dom.html.HTMLMapElement" />
	<method signature="java.lang.String getName()" class="org.w3c.dom.html.HTMLMapElement" />
	<method signature="org.w3c.dom.html.HTMLCollection getAreas()" class="org.w3c.dom.html.HTMLMapElement" />
	<method signature="void setName(java.lang.String)" class="org.w3c.dom.html.HTMLMapElement" />
	<class name="org.w3c.dom.xpath.XPathNSResolver" />
	<method signature="java.lang.String lookupNamespaceURI(java.lang.String)" class="org.w3c.dom.xpath.XPathNSResolver" />
	<class name="com.google.zxing.client.result.ExpandedProductResultParser" />
	<method signature="com.google.zxing.client.result.ExpandedProductParsedResult parse(com.google.zxing.Result)" class="com.google.zxing.client.result.ExpandedProductResultParser" />
	<method signature="com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result)" class="com.google.zxing.client.result.ExpandedProductResultParser" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.client.result.ExpandedProductResultParser" />
	<class name="org.jdom2.output.support.XMLOutputProcessor" />
	<method signature="void process(java.io.Writer,org.jdom2.output.Format,org.jdom2.Element)" class="org.jdom2.output.support.XMLOutputProcessor" />
	<method signature="void process(java.io.Writer,org.jdom2.output.Format,org.jdom2.ProcessingInstruction)" class="org.jdom2.output.support.XMLOutputProcessor" />
	<method signature="void process(java.io.Writer,org.jdom2.output.Format,org.jdom2.CDATA)" class="org.jdom2.output.support.XMLOutputProcessor" />
	<method signature="void process(java.io.Writer,org.jdom2.output.Format,org.jdom2.Document)" class="org.jdom2.output.support.XMLOutputProcessor" />
	<method signature="void process(java.io.Writer,org.jdom2.output.Format,org.jdom2.DocType)" class="org.jdom2.output.support.XMLOutputProcessor" />
	<method signature="void process(java.io.Writer,org.jdom2.output.Format,java.util.List)" class="org.jdom2.output.support.XMLOutputProcessor" />
	<method signature="void process(java.io.Writer,org.jdom2.output.Format,org.jdom2.Text)" class="org.jdom2.output.support.XMLOutputProcessor" />
	<method signature="void process(java.io.Writer,org.jdom2.output.Format,org.jdom2.Comment)" class="org.jdom2.output.support.XMLOutputProcessor" />
	<method signature="void process(java.io.Writer,org.jdom2.output.Format,org.jdom2.EntityRef)" class="org.jdom2.output.support.XMLOutputProcessor" />
	<class name="com.google.zxing.Result" />
	<method signature="void &lt;init&gt;(java.lang.String,byte[],com.google.zxing.ResultPoint[],com.google.zxing.BarcodeFormat,long)" class="com.google.zxing.Result" />
	<method signature="long getTimestamp()" class="com.google.zxing.Result" />
	<method signature="java.lang.String getText()" class="com.google.zxing.Result" />
	<method signature="com.google.zxing.ResultPoint[] getResultPoints()" class="com.google.zxing.Result" />
	<method signature="void putMetadata(com.google.zxing.ResultMetadataType,java.lang.Object)" class="com.google.zxing.Result" />
	<method signature="void putAllMetadata(java.util.Map)" class="com.google.zxing.Result" />
	<method signature="void addResultPoints(com.google.zxing.ResultPoint[])" class="com.google.zxing.Result" />
	<method signature="void &lt;init&gt;(java.lang.String,byte[],com.google.zxing.ResultPoint[],com.google.zxing.BarcodeFormat)" class="com.google.zxing.Result" />
	<method signature="java.util.Map getResultMetadata()" class="com.google.zxing.Result" />
	<method signature="com.google.zxing.BarcodeFormat getBarcodeFormat()" class="com.google.zxing.Result" />
	<method signature="java.lang.String toString()" class="com.google.zxing.Result" />
	<method signature="byte[] getRawBytes()" class="com.google.zxing.Result" />
	<class name="freemarker.debug.Breakpoint" />
	<method signature="int compareTo(java.lang.Object)" class="freemarker.debug.Breakpoint" />
	<method signature="int hashCode()" class="freemarker.debug.Breakpoint" />
	<method signature="boolean equals(java.lang.Object)" class="freemarker.debug.Breakpoint" />
	<method signature="java.lang.String getLocationString()" class="freemarker.debug.Breakpoint" />
	<method signature="java.lang.String getTemplateName()" class="freemarker.debug.Breakpoint" />
	<method signature="int getLine()" class="freemarker.debug.Breakpoint" />
	<method signature="void &lt;init&gt;(java.lang.String,int)" class="freemarker.debug.Breakpoint" />
	<class name="freemarker.cache.MruCacheStorage" />
	<method signature="void clear()" class="freemarker.cache.MruCacheStorage" />
	<method signature="void put(java.lang.Object,java.lang.Object)" class="freemarker.cache.MruCacheStorage" />
	<method signature="void &lt;init&gt;(int,int)" class="freemarker.cache.MruCacheStorage" />
	<method signature="java.lang.Object get(java.lang.Object)" class="freemarker.cache.MruCacheStorage" />
	<method signature="void remove(java.lang.Object)" class="freemarker.cache.MruCacheStorage" />
	<class name="org.unbescape.javascript.JavaScriptEscapeLevel" />
	<method signature="int getEscapeLevel()" class="org.unbescape.javascript.JavaScriptEscapeLevel" />
	<method signature="org.unbescape.javascript.JavaScriptEscapeLevel valueOf(java.lang.String)" class="org.unbescape.javascript.JavaScriptEscapeLevel" />
	<method signature="org.unbescape.javascript.JavaScriptEscapeLevel forLevel(int)" class="org.unbescape.javascript.JavaScriptEscapeLevel" />
	<method signature="org.unbescape.javascript.JavaScriptEscapeLevel[] values()" class="org.unbescape.javascript.JavaScriptEscapeLevel" />
	<class name="freemarker.template.SimpleDate" />
	<method signature="void &lt;init&gt;(java.util.Date,int)" class="freemarker.template.SimpleDate" />
	<method signature="void &lt;init&gt;(java.sql.Time)" class="freemarker.template.SimpleDate" />
	<method signature="void &lt;init&gt;(java.sql.Timestamp)" class="freemarker.template.SimpleDate" />
	<method signature="java.lang.String toString()" class="freemarker.template.SimpleDate" />
	<method signature="void &lt;init&gt;(java.sql.Date)" class="freemarker.template.SimpleDate" />
	<method signature="java.util.Date getAsDate()" class="freemarker.template.SimpleDate" />
	<method signature="int getDateType()" class="freemarker.template.SimpleDate" />
	<class name="com.hexidec.ekit.EkitApplet" />
	<method signature="void setDocumentText(java.lang.String)" class="com.hexidec.ekit.EkitApplet" />
	<method signature="void start()" class="com.hexidec.ekit.EkitApplet" />
	<method signature="void destroy()" class="com.hexidec.ekit.EkitApplet" />
	<method signature="void &lt;init&gt;()" class="com.hexidec.ekit.EkitApplet" />
	<method signature="java.lang.String getDocumentBody()" class="com.hexidec.ekit.EkitApplet" />
	<method signature="void init()" class="com.hexidec.ekit.EkitApplet" />
	<method signature="void stop()" class="com.hexidec.ekit.EkitApplet" />
	<method signature="java.lang.String getDocumentText()" class="com.hexidec.ekit.EkitApplet" />
	<method signature="java.lang.String getRTFDocument()" class="com.hexidec.ekit.EkitApplet" />
	<class name="freemarker.core.ReturnInstruction$Return" />
	<class name="org.apache.xerces.stax.events.CommentImpl" />
	<method signature="java.lang.String getText()" class="org.apache.xerces.stax.events.CommentImpl" />
	<method signature="void writeAsEncodedUnicode(java.io.Writer)" class="org.apache.xerces.stax.events.CommentImpl" />
	<method signature="void &lt;init&gt;(java.lang.String,javax.xml.stream.Location)" class="org.apache.xerces.stax.events.CommentImpl" />
	<class name="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="void empty(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="org.apache.xerces.xni.parser.XMLDTDContentModelSource getDTDContentModelSource()" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="boolean isEntityUnparsed(java.lang.String)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="void elementDecl(java.lang.String,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="int getElementDeclIndex(org.apache.xerces.xni.QName)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="void unparsedEntityDecl(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="void endExternalSubset(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="boolean getElementDecl(int,org.apache.xerces.impl.dtd.XMLElementDecl)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="boolean getNotationDecl(int,org.apache.xerces.impl.dtd.XMLNotationDecl)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="void startContentModel(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="void pcdata(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="short getContentSpecType(int)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="void startParameterEntity(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="void startGroup(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="int getNotationDeclIndex(java.lang.String)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="int getFirstAttributeDeclIndex(int)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="void separator(short,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="void startExternalSubset(org.apache.xerces.xni.XMLResourceIdentifier,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="void endContentModel(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="void printElements()" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="boolean getElementDeclIsExternal(int)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="void startDTD(org.apache.xerces.xni.XMLLocator,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="boolean getAttributeDeclIsExternal(int)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="org.apache.xerces.xni.parser.XMLDTDSource getDTDSource()" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="int getAttributeDeclIndex(int,java.lang.String)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="int getNextElementDeclIndex(int)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="void startConditional(short,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable,org.apache.xerces.impl.dtd.XMLDTDDescription)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="void any(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="void comment(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="boolean isEntityDeclared(java.lang.String)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="void endGroup(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="void setDTDContentModelSource(org.apache.xerces.xni.parser.XMLDTDContentModelSource)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="org.apache.xerces.util.SymbolTable getSymbolTable()" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="void processingInstruction(java.lang.String,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="void externalEntityDecl(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="void printAttributes(int)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="void attributeDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="void internalEntityDecl(java.lang.String,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="void textDecl(java.lang.String,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="int getEntityDeclIndex(java.lang.String)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="boolean isCDATAAttribute(org.apache.xerces.xni.QName,org.apache.xerces.xni.QName)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="void endAttlist(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="void endConditional(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="int getContentSpecIndex(int)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="int getNextAttributeDeclIndex(int)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="void occurrence(short,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="void startAttlist(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="int getElementDeclIndex(java.lang.String)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="void notationDecl(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="boolean getContentSpec(int,org.apache.xerces.impl.dtd.XMLContentSpec)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="int getFirstElementDeclIndex()" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="boolean isNamespaceAware()" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="void setDTDSource(org.apache.xerces.xni.parser.XMLDTDSource)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="boolean getAttributeDecl(int,org.apache.xerces.impl.dtd.XMLAttributeDecl)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="java.lang.String getContentSpecAsString(int)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="boolean getEntityDecl(int,org.apache.xerces.impl.dtd.XMLEntityDecl)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="void element(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="org.apache.xerces.xni.grammars.XMLGrammarDescription getGrammarDescription()" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="void endParameterEntity(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="void ignoredCharacters(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<method signature="void endDTD(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
	<class name="tourma.tableModel.MjtAnnexRankClan" />
	<method signature="void &lt;init&gt;(int,tourma.data.Criteria,int,boolean,java.util.ArrayList,boolean)" class="tourma.tableModel.MjtAnnexRankClan" />
	<method signature="java.awt.Component getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)" class="tourma.tableModel.MjtAnnexRankClan" />
	<method signature="java.lang.String getColumnName(int)" class="tourma.tableModel.MjtAnnexRankClan" />
	<method signature="java.lang.Object getValueAt(int,int)" class="tourma.tableModel.MjtAnnexRankClan" />
	<method signature="void &lt;init&gt;(int,tourma.data.Criteria,int,java.util.ArrayList,boolean,int,int,int,int,int,boolean)" class="tourma.tableModel.MjtAnnexRankClan" />
	<method signature="int getColumnCount()" class="tourma.tableModel.MjtAnnexRankClan" />
	<class name="edu.umd.cs.findbugs.annotations.SuppressWarnings" />
	<method signature="java.lang.String[] value()" class="edu.umd.cs.findbugs.annotations.SuppressWarnings" />
	<method signature="java.lang.String justification()" class="edu.umd.cs.findbugs.annotations.SuppressWarnings" />
	<class name="freemarker.ext.rhino.RhinoWrapper" />
	<method signature="void &lt;init&gt;()" class="freemarker.ext.rhino.RhinoWrapper" />
	<method signature="freemarker.template.TemplateModel wrap(java.lang.Object)" class="freemarker.ext.rhino.RhinoWrapper" />
	<class name="freemarker.ext.jsp.EventForwarding" />
	<method signature="void contextInitialized(javax.servlet.ServletContextEvent)" class="freemarker.ext.jsp.EventForwarding" />
	<method signature="void attributeReplaced(javax.servlet.ServletContextAttributeEvent)" class="freemarker.ext.jsp.EventForwarding" />
	<method signature="void attributeReplaced(javax.servlet.http.HttpSessionBindingEvent)" class="freemarker.ext.jsp.EventForwarding" />
	<method signature="void contextDestroyed(javax.servlet.ServletContextEvent)" class="freemarker.ext.jsp.EventForwarding" />
	<method signature="void attributeAdded(javax.servlet.ServletContextAttributeEvent)" class="freemarker.ext.jsp.EventForwarding" />
	<method signature="void attributeRemoved(javax.servlet.ServletContextAttributeEvent)" class="freemarker.ext.jsp.EventForwarding" />
	<method signature="void attributeAdded(javax.servlet.http.HttpSessionBindingEvent)" class="freemarker.ext.jsp.EventForwarding" />
	<method signature="void attributeRemoved(javax.servlet.http.HttpSessionBindingEvent)" class="freemarker.ext.jsp.EventForwarding" />
	<method signature="void sessionDestroyed(javax.servlet.http.HttpSessionEvent)" class="freemarker.ext.jsp.EventForwarding" />
	<method signature="void sessionCreated(javax.servlet.http.HttpSessionEvent)" class="freemarker.ext.jsp.EventForwarding" />
	<method signature="void &lt;init&gt;()" class="freemarker.ext.jsp.EventForwarding" />
	<class name="tourma.tableModel.MjtRankingIndiv" />
	<method signature="void &lt;init&gt;(int,int,int,int,int,int,java.util.ArrayList,boolean,boolean,boolean)" class="tourma.tableModel.MjtRankingIndiv" />
	<method signature="void &lt;init&gt;(int,java.util.ArrayList,boolean,boolean)" class="tourma.tableModel.MjtRankingIndiv" />
	<method signature="java.awt.Component getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)" class="tourma.tableModel.MjtRankingIndiv" />
	<method signature="java.lang.String getColumnName(int)" class="tourma.tableModel.MjtRankingIndiv" />
	<method signature="java.lang.Object getValueAt(int,int)" class="tourma.tableModel.MjtRankingIndiv" />
	<method signature="int getColumnCount()" class="tourma.tableModel.MjtRankingIndiv" />
	<class name="org.apache.xerces.impl.xs.XSAttributeDecl" />
	<method signature="java.lang.String getName()" class="org.apache.xerces.impl.xs.XSAttributeDecl" />
	<method signature="void reset()" class="org.apache.xerces.impl.xs.XSAttributeDecl" />
	<method signature="short getScope()" class="org.apache.xerces.impl.xs.XSAttributeDecl" />
	<method signature="org.apache.xerces.xs.ShortList getItemValueTypes()" class="org.apache.xerces.impl.xs.XSAttributeDecl" />
	<method signature="short getConstraintType()" class="org.apache.xerces.impl.xs.XSAttributeDecl" />
	<method signature="org.apache.xerces.xs.XSAnnotation getAnnotation()" class="org.apache.xerces.impl.xs.XSAttributeDecl" />
	<method signature="org.apache.xerces.xs.XSObjectList getAnnotations()" class="org.apache.xerces.impl.xs.XSAttributeDecl" />
	<method signature="short getType()" class="org.apache.xerces.impl.xs.XSAttributeDecl" />
	<method signature="void setValues(java.lang.String,java.lang.String,org.apache.xerces.impl.dv.XSSimpleType,short,short,org.apache.xerces.impl.dv.ValidatedInfo,org.apache.xerces.impl.xs.XSComplexTypeDecl,org.apache.xerces.xs.XSObjectList)" class="org.apache.xerces.impl.xs.XSAttributeDecl" />
	<method signature="org.apache.xerces.xs.XSNamespaceItem getNamespaceItem()" class="org.apache.xerces.impl.xs.XSAttributeDecl" />
	<method signature="org.apache.xerces.xs.XSValue getValueConstraintValue()" class="org.apache.xerces.impl.xs.XSAttributeDecl" />
	<method signature="java.lang.String getConstraintValue()" class="org.apache.xerces.impl.xs.XSAttributeDecl" />
	<method signature="org.apache.xerces.impl.dv.ValidatedInfo getValInfo()" class="org.apache.xerces.impl.xs.XSAttributeDecl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xs.XSAttributeDecl" />
	<method signature="java.lang.String getNamespace()" class="org.apache.xerces.impl.xs.XSAttributeDecl" />
	<method signature="org.apache.xerces.xs.XSSimpleTypeDefinition getTypeDefinition()" class="org.apache.xerces.impl.xs.XSAttributeDecl" />
	<method signature="java.lang.Object getActualVC()" class="org.apache.xerces.impl.xs.XSAttributeDecl" />
	<method signature="org.apache.xerces.xs.XSComplexTypeDefinition getEnclosingCTDefinition()" class="org.apache.xerces.impl.xs.XSAttributeDecl" />
	<method signature="short getActualVCType()" class="org.apache.xerces.impl.xs.XSAttributeDecl" />
	<class name="org.apache.wml.WMLSmallElement" />
	<method signature="java.lang.String getXmlLang()" class="org.apache.wml.WMLSmallElement" />
	<method signature="void setXmlLang(java.lang.String)" class="org.apache.wml.WMLSmallElement" />
	<class name="org.jdom2.JDOMFactory" />
	<method signature="org.jdom2.DocType docType(java.lang.String)" class="org.jdom2.JDOMFactory" />
	<method signature="org.jdom2.ProcessingInstruction processingInstruction(int,int,java.lang.String)" class="org.jdom2.JDOMFactory" />
	<method signature="org.jdom2.EntityRef entityRef(java.lang.String,java.lang.String,java.lang.String)" class="org.jdom2.JDOMFactory" />
	<method signature="org.jdom2.Element element(java.lang.String)" class="org.jdom2.JDOMFactory" />
	<method signature="org.jdom2.ProcessingInstruction processingInstruction(java.lang.String,java.util.Map)" class="org.jdom2.JDOMFactory" />
	<method signature="org.jdom2.Text text(int,int,java.lang.String)" class="org.jdom2.JDOMFactory" />
	<method signature="org.jdom2.Attribute attribute(java.lang.String,java.lang.String,int,org.jdom2.Namespace)" class="org.jdom2.JDOMFactory" />
	<method signature="org.jdom2.Document document(org.jdom2.Element,org.jdom2.DocType)" class="org.jdom2.JDOMFactory" />
	<method signature="org.jdom2.Attribute attribute(java.lang.String,java.lang.String,org.jdom2.AttributeType)" class="org.jdom2.JDOMFactory" />
	<method signature="org.jdom2.Attribute attribute(java.lang.String,java.lang.String,int)" class="org.jdom2.JDOMFactory" />
	<method signature="org.jdom2.DocType docType(java.lang.String,java.lang.String)" class="org.jdom2.JDOMFactory" />
	<method signature="void setAttribute(org.jdom2.Element,org.jdom2.Attribute)" class="org.jdom2.JDOMFactory" />
	<method signature="org.jdom2.Element element(java.lang.String,java.lang.String,java.lang.String)" class="org.jdom2.JDOMFactory" />
	<method signature="org.jdom2.ProcessingInstruction processingInstruction(int,int,java.lang.String,java.util.Map)" class="org.jdom2.JDOMFactory" />
	<method signature="void addContent(org.jdom2.Parent,org.jdom2.Content)" class="org.jdom2.JDOMFactory" />
	<method signature="org.jdom2.EntityRef entityRef(int,int,java.lang.String)" class="org.jdom2.JDOMFactory" />
	<method signature="org.jdom2.EntityRef entityRef(int,int,java.lang.String,java.lang.String)" class="org.jdom2.JDOMFactory" />
	<method signature="org.jdom2.ProcessingInstruction processingInstruction(java.lang.String,java.lang.String)" class="org.jdom2.JDOMFactory" />
	<method signature="org.jdom2.EntityRef entityRef(java.lang.String,java.lang.String)" class="org.jdom2.JDOMFactory" />
	<method signature="org.jdom2.Attribute attribute(java.lang.String,java.lang.String,org.jdom2.AttributeType,org.jdom2.Namespace)" class="org.jdom2.JDOMFactory" />
	<method signature="org.jdom2.EntityRef entityRef(int,int,java.lang.String,java.lang.String,java.lang.String)" class="org.jdom2.JDOMFactory" />
	<method signature="void setRoot(org.jdom2.Document,org.jdom2.Element)" class="org.jdom2.JDOMFactory" />
	<method signature="org.jdom2.ProcessingInstruction processingInstruction(java.lang.String)" class="org.jdom2.JDOMFactory" />
	<method signature="org.jdom2.DocType docType(java.lang.String,java.lang.String,java.lang.String)" class="org.jdom2.JDOMFactory" />
	<method signature="org.jdom2.Comment comment(java.lang.String)" class="org.jdom2.JDOMFactory" />
	<method signature="org.jdom2.Element element(int,int,java.lang.String,org.jdom2.Namespace)" class="org.jdom2.JDOMFactory" />
	<method signature="org.jdom2.Text text(java.lang.String)" class="org.jdom2.JDOMFactory" />
	<method signature="org.jdom2.Element element(int,int,java.lang.String)" class="org.jdom2.JDOMFactory" />
	<method signature="org.jdom2.EntityRef entityRef(java.lang.String)" class="org.jdom2.JDOMFactory" />
	<method signature="org.jdom2.Attribute attribute(java.lang.String,java.lang.String)" class="org.jdom2.JDOMFactory" />
	<method signature="org.jdom2.DocType docType(int,int,java.lang.String,java.lang.String,java.lang.String)" class="org.jdom2.JDOMFactory" />
	<method signature="org.jdom2.DocType docType(int,int,java.lang.String,java.lang.String)" class="org.jdom2.JDOMFactory" />
	<method signature="org.jdom2.ProcessingInstruction processingInstruction(int,int,java.lang.String,java.lang.String)" class="org.jdom2.JDOMFactory" />
	<method signature="org.jdom2.Document document(org.jdom2.Element)" class="org.jdom2.JDOMFactory" />
	<method signature="org.jdom2.Comment comment(int,int,java.lang.String)" class="org.jdom2.JDOMFactory" />
	<method signature="org.jdom2.Element element(java.lang.String,org.jdom2.Namespace)" class="org.jdom2.JDOMFactory" />
	<method signature="org.jdom2.CDATA cdata(java.lang.String)" class="org.jdom2.JDOMFactory" />
	<method signature="org.jdom2.Document document(org.jdom2.Element,org.jdom2.DocType,java.lang.String)" class="org.jdom2.JDOMFactory" />
	<method signature="org.jdom2.Attribute attribute(java.lang.String,java.lang.String,org.jdom2.Namespace)" class="org.jdom2.JDOMFactory" />
	<method signature="org.jdom2.DocType docType(int,int,java.lang.String)" class="org.jdom2.JDOMFactory" />
	<method signature="org.jdom2.CDATA cdata(int,int,java.lang.String)" class="org.jdom2.JDOMFactory" />
	<method signature="org.jdom2.Element element(int,int,java.lang.String,java.lang.String)" class="org.jdom2.JDOMFactory" />
	<method signature="org.jdom2.Element element(int,int,java.lang.String,java.lang.String,java.lang.String)" class="org.jdom2.JDOMFactory" />
	<method signature="void addNamespaceDeclaration(org.jdom2.Element,org.jdom2.Namespace)" class="org.jdom2.JDOMFactory" />
	<method signature="org.jdom2.Element element(java.lang.String,java.lang.String)" class="org.jdom2.JDOMFactory" />
	<class name="org.apache.xerces.impl.xs.models.CMBuilder" />
	<method signature="void setDeclPool(org.apache.xerces.impl.xs.XSDeclarationPool)" class="org.apache.xerces.impl.xs.models.CMBuilder" />
	<method signature="org.apache.xerces.impl.xs.models.XSCMValidator getContentModel(org.apache.xerces.impl.xs.XSComplexTypeDecl,boolean)" class="org.apache.xerces.impl.xs.models.CMBuilder" />
	<method signature="void &lt;init&gt;(org.apache.xerces.impl.xs.models.CMNodeFactory)" class="org.apache.xerces.impl.xs.models.CMBuilder" />
	<class name="org.apache.html.dom.HTMLBuilder" />
	<method signature="void startElement(java.lang.String,org.xml.sax.AttributeList)" class="org.apache.html.dom.HTMLBuilder" />
	<method signature="void endElement(java.lang.String)" class="org.apache.html.dom.HTMLBuilder" />
	<method signature="void characters(char[],int,int)" class="org.apache.html.dom.HTMLBuilder" />
	<method signature="void &lt;init&gt;()" class="org.apache.html.dom.HTMLBuilder" />
	<method signature="void startDocument()" class="org.apache.html.dom.HTMLBuilder" />
	<method signature="void endDocument()" class="org.apache.html.dom.HTMLBuilder" />
	<method signature="void characters(java.lang.String)" class="org.apache.html.dom.HTMLBuilder" />
	<method signature="void ignorableWhitespace(char[],int,int)" class="org.apache.html.dom.HTMLBuilder" />
	<method signature="void processingInstruction(java.lang.String,java.lang.String)" class="org.apache.html.dom.HTMLBuilder" />
	<method signature="org.w3c.dom.html.HTMLDocument getHTMLDocument()" class="org.apache.html.dom.HTMLBuilder" />
	<method signature="void setDocumentLocator(org.xml.sax.Locator)" class="org.apache.html.dom.HTMLBuilder" />
	<class name="org.apache.xerces.xni.XMLResourceIdentifier" />
	<method signature="void setLiteralSystemId(java.lang.String)" class="org.apache.xerces.xni.XMLResourceIdentifier" />
	<method signature="java.lang.String getExpandedSystemId()" class="org.apache.xerces.xni.XMLResourceIdentifier" />
	<method signature="java.lang.String getNamespace()" class="org.apache.xerces.xni.XMLResourceIdentifier" />
	<method signature="void setExpandedSystemId(java.lang.String)" class="org.apache.xerces.xni.XMLResourceIdentifier" />
	<method signature="void setNamespace(java.lang.String)" class="org.apache.xerces.xni.XMLResourceIdentifier" />
	<method signature="void setPublicId(java.lang.String)" class="org.apache.xerces.xni.XMLResourceIdentifier" />
	<method signature="java.lang.String getPublicId()" class="org.apache.xerces.xni.XMLResourceIdentifier" />
	<method signature="java.lang.String getLiteralSystemId()" class="org.apache.xerces.xni.XMLResourceIdentifier" />
	<method signature="void setBaseSystemId(java.lang.String)" class="org.apache.xerces.xni.XMLResourceIdentifier" />
	<method signature="java.lang.String getBaseSystemId()" class="org.apache.xerces.xni.XMLResourceIdentifier" />
	<class name="javax.xml.bind.PropertyException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Object)" class="javax.xml.bind.PropertyException" />
	<method signature="void &lt;init&gt;(java.lang.Throwable)" class="javax.xml.bind.PropertyException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Throwable)" class="javax.xml.bind.PropertyException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.Throwable)" class="javax.xml.bind.PropertyException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="javax.xml.bind.PropertyException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="javax.xml.bind.PropertyException" />
	<class name="org.jfree.chart.axis.ValueTick" />
	<method signature="double getValue()" class="org.jfree.chart.axis.ValueTick" />
	<method signature="void &lt;init&gt;(org.jfree.chart.axis.TickType,double,java.lang.String,org.jfree.ui.TextAnchor,org.jfree.ui.TextAnchor,double)" class="org.jfree.chart.axis.ValueTick" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.axis.ValueTick" />
	<method signature="org.jfree.chart.axis.TickType getTickType()" class="org.jfree.chart.axis.ValueTick" />
	<method signature="void &lt;init&gt;(double,java.lang.String,org.jfree.ui.TextAnchor,org.jfree.ui.TextAnchor,double)" class="org.jfree.chart.axis.ValueTick" />
	<class name="freemarker.core.LibraryLoad" />
	<method signature="java.lang.String getTemplateName()" class="freemarker.core.LibraryLoad" />
	<method signature="java.lang.String getCanonicalForm()" class="freemarker.core.LibraryLoad" />
	<method signature="java.lang.String getDescription()" class="freemarker.core.LibraryLoad" />
	<class name="org.jfree.chart.entity.XYAnnotationEntity" />
	<method signature="int getRendererIndex()" class="org.jfree.chart.entity.XYAnnotationEntity" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.entity.XYAnnotationEntity" />
	<method signature="void setRendererIndex(int)" class="org.jfree.chart.entity.XYAnnotationEntity" />
	<method signature="void &lt;init&gt;(java.awt.Shape,int,java.lang.String,java.lang.String)" class="org.jfree.chart.entity.XYAnnotationEntity" />
	<class name="org.jfree.chart.renderer.category.CategoryStepRenderer$State" />
	<method signature="void &lt;init&gt;(org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.renderer.category.CategoryStepRenderer$State" />
	<class name="org.jfree.chart.renderer.AreaRendererEndType" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.AreaRendererEndType" />
	<method signature="java.lang.String toString()" class="org.jfree.chart.renderer.AreaRendererEndType" />
	<class name="com.google.zxing.common.detector.WhiteRectangleDetector" />
	<method signature="void &lt;init&gt;(com.google.zxing.common.BitMatrix)" class="com.google.zxing.common.detector.WhiteRectangleDetector" />
	<method signature="com.google.zxing.ResultPoint[] detect()" class="com.google.zxing.common.detector.WhiteRectangleDetector" />
	<method signature="void &lt;init&gt;(com.google.zxing.common.BitMatrix,int,int,int)" class="com.google.zxing.common.detector.WhiteRectangleDetector" />
	<class name="com.hexidec.ekit.component.SearchDialog" />
	<method signature="java.lang.String getFindTerm()" class="com.hexidec.ekit.component.SearchDialog" />
	<method signature="boolean getCaseSensitive()" class="com.hexidec.ekit.component.SearchDialog" />
	<method signature="java.lang.String getReplaceTerm()" class="com.hexidec.ekit.component.SearchDialog" />
	<method signature="void &lt;init&gt;(java.awt.Frame,java.lang.String,boolean,boolean,boolean,boolean)" class="com.hexidec.ekit.component.SearchDialog" />
	<method signature="boolean getReplaceAll()" class="com.hexidec.ekit.component.SearchDialog" />
	<method signature="boolean getStartAtTop()" class="com.hexidec.ekit.component.SearchDialog" />
	<class name="org.apache.xerces.xni.grammars.XMLGrammarLoader" />
	<method signature="void setEntityResolver(org.apache.xerces.xni.parser.XMLEntityResolver)" class="org.apache.xerces.xni.grammars.XMLGrammarLoader" />
	<method signature="java.lang.String[] getRecognizedProperties()" class="org.apache.xerces.xni.grammars.XMLGrammarLoader" />
	<method signature="void setLocale(java.util.Locale)" class="org.apache.xerces.xni.grammars.XMLGrammarLoader" />
	<method signature="java.lang.String[] getRecognizedFeatures()" class="org.apache.xerces.xni.grammars.XMLGrammarLoader" />
	<method signature="boolean getFeature(java.lang.String)" class="org.apache.xerces.xni.grammars.XMLGrammarLoader" />
	<method signature="java.util.Locale getLocale()" class="org.apache.xerces.xni.grammars.XMLGrammarLoader" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="org.apache.xerces.xni.grammars.XMLGrammarLoader" />
	<method signature="org.apache.xerces.xni.grammars.Grammar loadGrammar(org.apache.xerces.xni.parser.XMLInputSource)" class="org.apache.xerces.xni.grammars.XMLGrammarLoader" />
	<method signature="org.apache.xerces.xni.parser.XMLErrorHandler getErrorHandler()" class="org.apache.xerces.xni.grammars.XMLGrammarLoader" />
	<method signature="void setErrorHandler(org.apache.xerces.xni.parser.XMLErrorHandler)" class="org.apache.xerces.xni.grammars.XMLGrammarLoader" />
	<method signature="org.apache.xerces.xni.parser.XMLEntityResolver getEntityResolver()" class="org.apache.xerces.xni.grammars.XMLGrammarLoader" />
	<method signature="void setFeature(java.lang.String,boolean)" class="org.apache.xerces.xni.grammars.XMLGrammarLoader" />
	<method signature="java.lang.Object getProperty(java.lang.String)" class="org.apache.xerces.xni.grammars.XMLGrammarLoader" />
	<class name="org.jfree.data.general.SeriesDataset" />
	<method signature="java.lang.Comparable getSeriesKey(int)" class="org.jfree.data.general.SeriesDataset" />
	<method signature="int indexOf(java.lang.Comparable)" class="org.jfree.data.general.SeriesDataset" />
	<method signature="int getSeriesCount()" class="org.jfree.data.general.SeriesDataset" />
	<class name="com.google.zxing.oned.Code39Reader" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.oned.Code39Reader" />
	<method signature="void &lt;init&gt;(boolean,boolean)" class="com.google.zxing.oned.Code39Reader" />
	<method signature="void &lt;init&gt;(boolean)" class="com.google.zxing.oned.Code39Reader" />
	<method signature="com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map)" class="com.google.zxing.oned.Code39Reader" />
	<class name="org.jfree.chart.entity.CategoryItemEntity" />
	<method signature="int getSeries()" class="org.jfree.chart.entity.CategoryItemEntity" />
	<method signature="java.lang.Object getCategory()" class="org.jfree.chart.entity.CategoryItemEntity" />
	<method signature="void &lt;init&gt;(java.awt.Shape,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,java.lang.Comparable,java.lang.Comparable)" class="org.jfree.chart.entity.CategoryItemEntity" />
	<method signature="java.lang.Comparable getRowKey()" class="org.jfree.chart.entity.CategoryItemEntity" />
	<method signature="void setRowKey(java.lang.Comparable)" class="org.jfree.chart.entity.CategoryItemEntity" />
	<method signature="void &lt;init&gt;(java.awt.Shape,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,int,java.lang.Object,int)" class="org.jfree.chart.entity.CategoryItemEntity" />
	<method signature="void setSeries(int)" class="org.jfree.chart.entity.CategoryItemEntity" />
	<method signature="void setDataset(org.jfree.data.category.CategoryDataset)" class="org.jfree.chart.entity.CategoryItemEntity" />
	<method signature="int getCategoryIndex()" class="org.jfree.chart.entity.CategoryItemEntity" />
	<method signature="void setCategory(java.lang.Object)" class="org.jfree.chart.entity.CategoryItemEntity" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.entity.CategoryItemEntity" />
	<method signature="java.lang.String toString()" class="org.jfree.chart.entity.CategoryItemEntity" />
	<method signature="org.jfree.data.category.CategoryDataset getDataset()" class="org.jfree.chart.entity.CategoryItemEntity" />
	<method signature="void setColumnKey(java.lang.Comparable)" class="org.jfree.chart.entity.CategoryItemEntity" />
	<method signature="void setCategoryIndex(int)" class="org.jfree.chart.entity.CategoryItemEntity" />
	<method signature="java.lang.Comparable getColumnKey()" class="org.jfree.chart.entity.CategoryItemEntity" />
	<class name="org.w3c.dom.css.CSSRuleList" />
	<method signature="org.w3c.dom.css.CSSRule item(int)" class="org.w3c.dom.css.CSSRuleList" />
	<method signature="int getLength()" class="org.w3c.dom.css.CSSRuleList" />
	<class name="org.apache.xerces.impl.dv.xs.AbstractDateTimeDV" />
	<method signature="boolean isIdentical(java.lang.Object,java.lang.Object)" class="org.apache.xerces.impl.dv.xs.AbstractDateTimeDV" />
	<method signature="int compare(java.lang.Object,java.lang.Object)" class="org.apache.xerces.impl.dv.xs.AbstractDateTimeDV" />
	<method signature="short getAllowedFacets()" class="org.apache.xerces.impl.dv.xs.AbstractDateTimeDV" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.xs.AbstractDateTimeDV" />
	<class name="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<method signature="org.jfree.chart.labels.XYItemLabelGenerator getSeriesItemLabelGenerator(int)" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<method signature="void drawDomainMarker(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<method signature="org.jfree.chart.urls.XYURLGenerator getURLGenerator()" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<method signature="org.jfree.chart.LegendItem getLegendItem(int,int)" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<method signature="void setURLGenerator(org.jfree.chart.urls.XYURLGenerator)" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<method signature="void addAnnotation(org.jfree.chart.annotations.XYAnnotation)" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<method signature="void addAnnotation(org.jfree.chart.annotations.XYAnnotation,org.jfree.ui.Layer)" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<method signature="void drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<method signature="void fillDomainGridBand(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,double)" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<method signature="org.jfree.chart.labels.XYItemLabelGenerator getBaseItemLabelGenerator()" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<method signature="void drawDomainLine(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,java.awt.Paint,java.awt.Stroke)" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<method signature="org.jfree.chart.labels.XYItemLabelGenerator getItemLabelGenerator()" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<method signature="void annotationChanged(org.jfree.chart.event.AnnotationChangeEvent)" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<method signature="boolean isPointInRect(java.awt.geom.Rectangle2D,double,double)" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<method signature="org.jfree.chart.labels.XYSeriesLabelGenerator getLegendItemURLGenerator()" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<method signature="org.jfree.chart.labels.XYToolTipGenerator getBaseToolTipGenerator()" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<method signature="org.jfree.chart.labels.XYItemLabelGenerator getItemLabelGenerator(int,int)" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<method signature="org.jfree.chart.plot.XYPlot getPlot()" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<method signature="void drawRangeLine(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,java.awt.Paint,java.awt.Stroke)" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<method signature="void setPlot(org.jfree.chart.plot.XYPlot)" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<method signature="void setLegendItemURLGenerator(org.jfree.chart.labels.XYSeriesLabelGenerator)" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<method signature="int getPassCount()" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<method signature="void setBaseItemLabelGenerator(org.jfree.chart.labels.XYItemLabelGenerator)" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<method signature="org.jfree.chart.plot.DrawingSupplier getDrawingSupplier()" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<method signature="void setLegendItemToolTipGenerator(org.jfree.chart.labels.XYSeriesLabelGenerator)" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<method signature="void setToolTipGenerator(org.jfree.chart.labels.XYToolTipGenerator)" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<method signature="org.jfree.chart.labels.XYSeriesLabelGenerator getLegendItemLabelGenerator()" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<method signature="org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset)" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<method signature="org.jfree.chart.labels.XYToolTipGenerator getSeriesToolTipGenerator(int)" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<method signature="void setSeriesToolTipGenerator(int,org.jfree.chart.labels.XYToolTipGenerator)" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<method signature="org.jfree.chart.labels.XYToolTipGenerator getToolTipGenerator()" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<method signature="org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<method signature="org.jfree.chart.labels.XYToolTipGenerator getToolTipGenerator(int,int)" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<method signature="org.jfree.chart.labels.XYSeriesLabelGenerator getLegendItemToolTipGenerator()" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<method signature="void setBaseToolTipGenerator(org.jfree.chart.labels.XYToolTipGenerator)" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<method signature="void removeAnnotations()" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<method signature="org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<method signature="void setLegendItemLabelGenerator(org.jfree.chart.labels.XYSeriesLabelGenerator)" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<method signature="java.util.Collection getAnnotations()" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<method signature="void drawDomainGridLine(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double)" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<method signature="boolean removeAnnotation(org.jfree.chart.annotations.XYAnnotation)" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<method signature="void fillRangeGridBand(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,double)" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<method signature="void setItemLabelGenerator(org.jfree.chart.labels.XYItemLabelGenerator)" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<method signature="void drawAnnotations(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.ui.Layer,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<method signature="void setSeriesItemLabelGenerator(int,org.jfree.chart.labels.XYItemLabelGenerator)" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<method signature="org.jfree.chart.LegendItemCollection getLegendItems()" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
	<class name="org.jfree.date.DateUtilities" />
	<method signature="java.util.Date createDate(int,int,int,int,int)" class="org.jfree.date.DateUtilities" />
	<method signature="java.util.Date createDate(int,int,int)" class="org.jfree.date.DateUtilities" />
	<class name="org.apache.xerces.impl.dv.xs.IDDV" />
	<method signature="void checkExtraRules(java.lang.Object,org.apache.xerces.impl.dv.ValidationContext)" class="org.apache.xerces.impl.dv.xs.IDDV" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.xs.IDDV" />
	<method signature="java.lang.Object getActualValue(java.lang.String,org.apache.xerces.impl.dv.ValidationContext)" class="org.apache.xerces.impl.dv.xs.IDDV" />
	<method signature="short getAllowedFacets()" class="org.apache.xerces.impl.dv.xs.IDDV" />
	<class name="org.apache.wml.WMLDoElement" />
	<method signature="java.lang.String getOptional()" class="org.apache.wml.WMLDoElement" />
	<method signature="java.lang.String getLabel()" class="org.apache.wml.WMLDoElement" />
	<method signature="java.lang.String getName()" class="org.apache.wml.WMLDoElement" />
	<method signature="java.lang.String getXmlLang()" class="org.apache.wml.WMLDoElement" />
	<method signature="void setXmlLang(java.lang.String)" class="org.apache.wml.WMLDoElement" />
	<method signature="void setName(java.lang.String)" class="org.apache.wml.WMLDoElement" />
	<method signature="java.lang.String getType()" class="org.apache.wml.WMLDoElement" />
	<method signature="void setOptional(java.lang.String)" class="org.apache.wml.WMLDoElement" />
	<method signature="void setType(java.lang.String)" class="org.apache.wml.WMLDoElement" />
	<method signature="void setLabel(java.lang.String)" class="org.apache.wml.WMLDoElement" />
	<class name="org.jfree.chart.event.PlotChangeListener" />
	<method signature="void plotChanged(org.jfree.chart.event.PlotChangeEvent)" class="org.jfree.chart.event.PlotChangeListener" />
	<class name="org.jdom2.output.Format" />
	<method signature="boolean getExpandEmptyElements()" class="org.jdom2.output.Format" />
	<method signature="java.lang.String trimRight(java.lang.String)" class="org.jdom2.output.Format" />
	<method signature="org.jdom2.output.Format clone()" class="org.jdom2.output.Format" />
	<method signature="void setSpecifiedAttributesOnly(boolean)" class="org.jdom2.output.Format" />
	<method signature="org.jdom2.output.EscapeStrategy getEscapeStrategy()" class="org.jdom2.output.Format" />
	<method signature="boolean isSpecifiedAttributesOnly()" class="org.jdom2.output.Format" />
	<method signature="java.lang.Object clone()" class="org.jdom2.output.Format" />
	<method signature="java.lang.String getEncoding()" class="org.jdom2.output.Format" />
	<method signature="org.jdom2.output.Format setEscapeStrategy(org.jdom2.output.EscapeStrategy)" class="org.jdom2.output.Format" />
	<method signature="boolean getIgnoreTrAXEscapingPIs()" class="org.jdom2.output.Format" />
	<method signature="org.jdom2.output.Format getCompactFormat()" class="org.jdom2.output.Format" />
	<method signature="boolean getOmitEncoding()" class="org.jdom2.output.Format" />
	<method signature="java.lang.String escapeAttribute(org.jdom2.output.EscapeStrategy,java.lang.String)" class="org.jdom2.output.Format" />
	<method signature="org.jdom2.output.Format setOmitEncoding(boolean)" class="org.jdom2.output.Format" />
	<method signature="org.jdom2.output.Format setExpandEmptyElements(boolean)" class="org.jdom2.output.Format" />
	<method signature="org.jdom2.output.Format setOmitDeclaration(boolean)" class="org.jdom2.output.Format" />
	<method signature="org.jdom2.output.Format getPrettyFormat()" class="org.jdom2.output.Format" />
	<method signature="java.lang.String escapeText(org.jdom2.output.EscapeStrategy,java.lang.String,java.lang.String)" class="org.jdom2.output.Format" />
	<method signature="java.lang.String trimLeft(java.lang.String)" class="org.jdom2.output.Format" />
	<method signature="java.lang.String getIndent()" class="org.jdom2.output.Format" />
	<method signature="org.jdom2.output.Format setLineSeparator(java.lang.String)" class="org.jdom2.output.Format" />
	<method signature="java.lang.String getLineSeparator()" class="org.jdom2.output.Format" />
	<method signature="org.jdom2.output.Format setIndent(java.lang.String)" class="org.jdom2.output.Format" />
	<method signature="void setIgnoreTrAXEscapingPIs(boolean)" class="org.jdom2.output.Format" />
	<method signature="java.lang.String trimBoth(java.lang.String)" class="org.jdom2.output.Format" />
	<method signature="java.lang.String compact(java.lang.String)" class="org.jdom2.output.Format" />
	<method signature="org.jdom2.output.Format$TextMode getTextMode()" class="org.jdom2.output.Format" />
	<method signature="org.jdom2.output.Format getRawFormat()" class="org.jdom2.output.Format" />
	<method signature="boolean getOmitDeclaration()" class="org.jdom2.output.Format" />
	<method signature="org.jdom2.output.Format setTextMode(org.jdom2.output.Format$TextMode)" class="org.jdom2.output.Format" />
	<method signature="org.jdom2.output.Format setEncoding(java.lang.String)" class="org.jdom2.output.Format" />
	<method signature="org.jdom2.output.Format setLineSeparator(org.jdom2.output.LineSeparator)" class="org.jdom2.output.Format" />
	<class name="org.apache.html.dom.HTMLLegendElementImpl" />
	<method signature="void setAccessKey(java.lang.String)" class="org.apache.html.dom.HTMLLegendElementImpl" />
	<method signature="void setAlign(java.lang.String)" class="org.apache.html.dom.HTMLLegendElementImpl" />
	<method signature="java.lang.String getAlign()" class="org.apache.html.dom.HTMLLegendElementImpl" />
	<method signature="java.lang.String getAccessKey()" class="org.apache.html.dom.HTMLLegendElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLLegendElementImpl" />
	<class name="org.jfree.data.time.Day" />
	<method signature="int getYear()" class="org.jfree.data.time.Day" />
	<method signature="int compareTo(java.lang.Object)" class="org.jfree.data.time.Day" />
	<method signature="int hashCode()" class="org.jfree.data.time.Day" />
	<method signature="void &lt;init&gt;(java.util.Date,java.util.TimeZone)" class="org.jfree.data.time.Day" />
	<method signature="org.jfree.data.time.RegularTimePeriod previous()" class="org.jfree.data.time.Day" />
	<method signature="void &lt;init&gt;(org.jfree.date.SerialDate)" class="org.jfree.data.time.Day" />
	<method signature="long getLastMillisecond()" class="org.jfree.data.time.Day" />
	<method signature="org.jfree.date.SerialDate getSerialDate()" class="org.jfree.data.time.Day" />
	<method signature="org.jfree.data.time.RegularTimePeriod next()" class="org.jfree.data.time.Day" />
	<method signature="long getLastMillisecond(java.util.Calendar)" class="org.jfree.data.time.Day" />
	<method signature="int getMonth()" class="org.jfree.data.time.Day" />
	<method signature="int getDayOfMonth()" class="org.jfree.data.time.Day" />
	<method signature="void &lt;init&gt;(java.util.Date)" class="org.jfree.data.time.Day" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.time.Day" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.time.Day" />
	<method signature="long getFirstMillisecond()" class="org.jfree.data.time.Day" />
	<method signature="void peg(java.util.Calendar)" class="org.jfree.data.time.Day" />
	<method signature="void &lt;init&gt;(java.util.Date,java.util.TimeZone,java.util.Locale)" class="org.jfree.data.time.Day" />
	<method signature="java.lang.String toString()" class="org.jfree.data.time.Day" />
	<method signature="long getFirstMillisecond(java.util.Calendar)" class="org.jfree.data.time.Day" />
	<method signature="org.jfree.data.time.Day parseDay(java.lang.String)" class="org.jfree.data.time.Day" />
	<method signature="long getSerialIndex()" class="org.jfree.data.time.Day" />
	<method signature="void &lt;init&gt;(int,int,int)" class="org.jfree.data.time.Day" />
	<class name="org.jfree.chart.plot.ContourPlotUtilities" />
	<method signature="org.jfree.data.Range visibleRange(org.jfree.data.contour.ContourDataset,org.jfree.data.Range,org.jfree.data.Range)" class="org.jfree.chart.plot.ContourPlotUtilities" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.plot.ContourPlotUtilities" />
	<class name="tourma.data.Match" />
	<method signature="tourma.data.Competitor getLooser()" class="tourma.data.Match" />
	<method signature="tourma.data.Competitor getCompetitor2()" class="tourma.data.Match" />
	<method signature="void setRound(tourma.data.Round)" class="tourma.data.Match" />
	<method signature="tourma.data.Competitor getWinner()" class="tourma.data.Match" />
	<method signature="org.jdom2.Element getXMLElementForDisplay()" class="tourma.data.Match" />
	<method signature="void &lt;init&gt;(tourma.data.Round)" class="tourma.data.Match" />
	<method signature="void setLooser(tourma.data.Competitor)" class="tourma.data.Match" />
	<method signature="tourma.data.Round getRound()" class="tourma.data.Match" />
	<method signature="void setWinner(tourma.data.Competitor)" class="tourma.data.Match" />
	<method signature="tourma.data.Competitor getCompetitor1()" class="tourma.data.Match" />
	<method signature="void resetWL()" class="tourma.data.Match" />
	<method signature="void setCompetitor2(tourma.data.Competitor)" class="tourma.data.Match" />
	<method signature="void setCompetitor1(tourma.data.Competitor)" class="tourma.data.Match" />
	<method signature="void setXMLElementForDisplay(org.jdom2.Element)" class="tourma.data.Match" />
	<class name="org.apache.xerces.impl.dv.xs.SchemaDVFactoryImpl" />
	<method signature="org.apache.xerces.impl.dv.XSSimpleType getBuiltInType(java.lang.String)" class="org.apache.xerces.impl.dv.xs.SchemaDVFactoryImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.xs.SchemaDVFactoryImpl" />
	<method signature="org.apache.xerces.util.SymbolHash getBuiltInTypes()" class="org.apache.xerces.impl.dv.xs.SchemaDVFactoryImpl" />
	<class name="freemarker.ext.util.IdentityHashMap" />
	<method signature="int size()" class="freemarker.ext.util.IdentityHashMap" />
	<method signature="boolean containsKey(java.lang.Object)" class="freemarker.ext.util.IdentityHashMap" />
	<method signature="void putAll(java.util.Map)" class="freemarker.ext.util.IdentityHashMap" />
	<method signature="java.util.Collection values()" class="freemarker.ext.util.IdentityHashMap" />
	<method signature="java.lang.Object clone()" class="freemarker.ext.util.IdentityHashMap" />
	<method signature="java.lang.Object put(java.lang.Object,java.lang.Object)" class="freemarker.ext.util.IdentityHashMap" />
	<method signature="void clear()" class="freemarker.ext.util.IdentityHashMap" />
	<method signature="boolean isEmpty()" class="freemarker.ext.util.IdentityHashMap" />
	<method signature="void &lt;init&gt;()" class="freemarker.ext.util.IdentityHashMap" />
	<method signature="java.util.Set entrySet()" class="freemarker.ext.util.IdentityHashMap" />
	<method signature="java.lang.Object remove(java.lang.Object)" class="freemarker.ext.util.IdentityHashMap" />
	<method signature="java.util.Set keySet()" class="freemarker.ext.util.IdentityHashMap" />
	<method signature="boolean containsValue(java.lang.Object)" class="freemarker.ext.util.IdentityHashMap" />
	<method signature="void &lt;init&gt;(int,float)" class="freemarker.ext.util.IdentityHashMap" />
	<method signature="void &lt;init&gt;(int)" class="freemarker.ext.util.IdentityHashMap" />
	<method signature="void &lt;init&gt;(java.util.Map)" class="freemarker.ext.util.IdentityHashMap" />
	<method signature="java.lang.Object get(java.lang.Object)" class="freemarker.ext.util.IdentityHashMap" />
	<class name="com.google.zxing.qrcode.decoder.Decoder" />
	<method signature="com.google.zxing.common.DecoderResult decode(com.google.zxing.common.BitMatrix)" class="com.google.zxing.qrcode.decoder.Decoder" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.qrcode.decoder.Decoder" />
	<method signature="com.google.zxing.common.DecoderResult decode(com.google.zxing.common.BitMatrix,java.util.Map)" class="com.google.zxing.qrcode.decoder.Decoder" />
	<method signature="com.google.zxing.common.DecoderResult decode(boolean[][])" class="com.google.zxing.qrcode.decoder.Decoder" />
	<method signature="com.google.zxing.common.DecoderResult decode(boolean[][],java.util.Map)" class="com.google.zxing.qrcode.decoder.Decoder" />
	<class name="org.apache.xerces.impl.xs.XSWildcardDecl" />
	<method signature="java.lang.String getName()" class="org.apache.xerces.impl.xs.XSWildcardDecl" />
	<method signature="org.apache.xerces.xs.StringList getNsConstraintList()" class="org.apache.xerces.impl.xs.XSWildcardDecl" />
	<method signature="org.apache.xerces.impl.xs.XSWildcardDecl performIntersectionWith(org.apache.xerces.impl.xs.XSWildcardDecl,short)" class="org.apache.xerces.impl.xs.XSWildcardDecl" />
	<method signature="boolean isSubsetOf(org.apache.xerces.impl.xs.XSWildcardDecl)" class="org.apache.xerces.impl.xs.XSWildcardDecl" />
	<method signature="short getConstraintType()" class="org.apache.xerces.impl.xs.XSWildcardDecl" />
	<method signature="org.apache.xerces.xs.XSAnnotation getAnnotation()" class="org.apache.xerces.impl.xs.XSWildcardDecl" />
	<method signature="org.apache.xerces.xs.XSObjectList getAnnotations()" class="org.apache.xerces.impl.xs.XSWildcardDecl" />
	<method signature="org.apache.xerces.impl.xs.XSWildcardDecl performUnionWith(org.apache.xerces.impl.xs.XSWildcardDecl,short)" class="org.apache.xerces.impl.xs.XSWildcardDecl" />
	<method signature="short getType()" class="org.apache.xerces.impl.xs.XSWildcardDecl" />
	<method signature="short getProcessContents()" class="org.apache.xerces.impl.xs.XSWildcardDecl" />
	<method signature="org.apache.xerces.xs.XSNamespaceItem getNamespaceItem()" class="org.apache.xerces.impl.xs.XSWildcardDecl" />
	<method signature="java.lang.String getProcessContentsAsString()" class="org.apache.xerces.impl.xs.XSWildcardDecl" />
	<method signature="boolean weakerProcessContents(org.apache.xerces.impl.xs.XSWildcardDecl)" class="org.apache.xerces.impl.xs.XSWildcardDecl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xs.XSWildcardDecl" />
	<method signature="java.lang.String getNamespace()" class="org.apache.xerces.impl.xs.XSWildcardDecl" />
	<method signature="java.lang.String toString()" class="org.apache.xerces.impl.xs.XSWildcardDecl" />
	<method signature="boolean allowNamespace(java.lang.String)" class="org.apache.xerces.impl.xs.XSWildcardDecl" />
	<class name="javax.annotation.Nonnull" />
	<method signature="javax.annotation.meta.When when()" class="javax.annotation.Nonnull" />
	<class name="org.jfree.chart.ChartTransferable" />
	<method signature="java.lang.Object getTransferData(java.awt.datatransfer.DataFlavor)" class="org.jfree.chart.ChartTransferable" />
	<method signature="java.awt.datatransfer.DataFlavor[] getTransferDataFlavors()" class="org.jfree.chart.ChartTransferable" />
	<method signature="void &lt;init&gt;(org.jfree.chart.JFreeChart,int,int,boolean)" class="org.jfree.chart.ChartTransferable" />
	<method signature="void &lt;init&gt;(org.jfree.chart.JFreeChart,int,int,int,int,int,int,boolean)" class="org.jfree.chart.ChartTransferable" />
	<method signature="boolean isDataFlavorSupported(java.awt.datatransfer.DataFlavor)" class="org.jfree.chart.ChartTransferable" />
	<method signature="void &lt;init&gt;(org.jfree.chart.JFreeChart,int,int)" class="org.jfree.chart.ChartTransferable" />
	<class name="org.apache.wml.dom.WMLMetaElementImpl" />
	<method signature="java.lang.String getScheme()" class="org.apache.wml.dom.WMLMetaElementImpl" />
	<method signature="java.lang.String getName()" class="org.apache.wml.dom.WMLMetaElementImpl" />
	<method signature="java.lang.String getContent()" class="org.apache.wml.dom.WMLMetaElementImpl" />
	<method signature="java.lang.String getId()" class="org.apache.wml.dom.WMLMetaElementImpl" />
	<method signature="boolean getForua()" class="org.apache.wml.dom.WMLMetaElementImpl" />
	<method signature="java.lang.String getHttpEquiv()" class="org.apache.wml.dom.WMLMetaElementImpl" />
	<method signature="void setId(java.lang.String)" class="org.apache.wml.dom.WMLMetaElementImpl" />
	<method signature="void setHttpEquiv(java.lang.String)" class="org.apache.wml.dom.WMLMetaElementImpl" />
	<method signature="void setContent(java.lang.String)" class="org.apache.wml.dom.WMLMetaElementImpl" />
	<method signature="void setName(java.lang.String)" class="org.apache.wml.dom.WMLMetaElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.wml.dom.WMLDocumentImpl,java.lang.String)" class="org.apache.wml.dom.WMLMetaElementImpl" />
	<method signature="void setForua(boolean)" class="org.apache.wml.dom.WMLMetaElementImpl" />
	<method signature="java.lang.String getClassName()" class="org.apache.wml.dom.WMLMetaElementImpl" />
	<method signature="void setScheme(java.lang.String)" class="org.apache.wml.dom.WMLMetaElementImpl" />
	<method signature="void setClassName(java.lang.String)" class="org.apache.wml.dom.WMLMetaElementImpl" />
	<class name="org.apache.xerces.xs.XSAttributeDeclaration" />
	<method signature="org.apache.xerces.xs.XSValue getValueConstraintValue()" class="org.apache.xerces.xs.XSAttributeDeclaration" />
	<method signature="java.lang.String getConstraintValue()" class="org.apache.xerces.xs.XSAttributeDeclaration" />
	<method signature="short getScope()" class="org.apache.xerces.xs.XSAttributeDeclaration" />
	<method signature="org.apache.xerces.xs.XSSimpleTypeDefinition getTypeDefinition()" class="org.apache.xerces.xs.XSAttributeDeclaration" />
	<method signature="org.apache.xerces.xs.ShortList getItemValueTypes()" class="org.apache.xerces.xs.XSAttributeDeclaration" />
	<method signature="short getConstraintType()" class="org.apache.xerces.xs.XSAttributeDeclaration" />
	<method signature="org.apache.xerces.xs.XSAnnotation getAnnotation()" class="org.apache.xerces.xs.XSAttributeDeclaration" />
	<method signature="org.apache.xerces.xs.XSObjectList getAnnotations()" class="org.apache.xerces.xs.XSAttributeDeclaration" />
	<method signature="java.lang.Object getActualVC()" class="org.apache.xerces.xs.XSAttributeDeclaration" />
	<method signature="org.apache.xerces.xs.XSComplexTypeDefinition getEnclosingCTDefinition()" class="org.apache.xerces.xs.XSAttributeDeclaration" />
	<method signature="short getActualVCType()" class="org.apache.xerces.xs.XSAttributeDeclaration" />
	<class name="org.w3c.dom.traversal.NodeIterator" />
	<method signature="boolean getExpandEntityReferences()" class="org.w3c.dom.traversal.NodeIterator" />
	<method signature="void detach()" class="org.w3c.dom.traversal.NodeIterator" />
	<method signature="org.w3c.dom.traversal.NodeFilter getFilter()" class="org.w3c.dom.traversal.NodeIterator" />
	<method signature="int getWhatToShow()" class="org.w3c.dom.traversal.NodeIterator" />
	<method signature="org.w3c.dom.Node nextNode()" class="org.w3c.dom.traversal.NodeIterator" />
	<method signature="org.w3c.dom.Node getRoot()" class="org.w3c.dom.traversal.NodeIterator" />
	<method signature="org.w3c.dom.Node previousNode()" class="org.w3c.dom.traversal.NodeIterator" />
	<class name="org.apache.xerces.dom3.as.ASContentModel" />
	<method signature="org.apache.xerces.dom3.as.ASObjectList getSubModels()" class="org.apache.xerces.dom3.as.ASContentModel" />
	<method signature="void removesubModel(org.apache.xerces.dom3.as.ASObject)" class="org.apache.xerces.dom3.as.ASContentModel" />
	<method signature="void setMaxOccurs(int)" class="org.apache.xerces.dom3.as.ASContentModel" />
	<method signature="short getListOperator()" class="org.apache.xerces.dom3.as.ASContentModel" />
	<method signature="void setMinOccurs(int)" class="org.apache.xerces.dom3.as.ASContentModel" />
	<method signature="void insertsubModel(org.apache.xerces.dom3.as.ASObject)" class="org.apache.xerces.dom3.as.ASContentModel" />
	<method signature="void setSubModels(org.apache.xerces.dom3.as.ASObjectList)" class="org.apache.xerces.dom3.as.ASContentModel" />
	<method signature="int getMinOccurs()" class="org.apache.xerces.dom3.as.ASContentModel" />
	<method signature="void setListOperator(short)" class="org.apache.xerces.dom3.as.ASContentModel" />
	<method signature="int getMaxOccurs()" class="org.apache.xerces.dom3.as.ASContentModel" />
	<method signature="int appendsubModel(org.apache.xerces.dom3.as.ASObject)" class="org.apache.xerces.dom3.as.ASContentModel" />
	<class name="org.apache.xerces.util.NamespaceSupport" />
	<method signature="void reset()" class="org.apache.xerces.util.NamespaceSupport" />
	<method signature="void &lt;init&gt;(org.apache.xerces.xni.NamespaceContext)" class="org.apache.xerces.util.NamespaceSupport" />
	<method signature="void popContext()" class="org.apache.xerces.util.NamespaceSupport" />
	<method signature="void pushContext()" class="org.apache.xerces.util.NamespaceSupport" />
	<method signature="java.lang.String getURI(java.lang.String)" class="org.apache.xerces.util.NamespaceSupport" />
	<method signature="boolean containsPrefix(java.lang.String)" class="org.apache.xerces.util.NamespaceSupport" />
	<method signature="java.lang.String getPrefix(java.lang.String)" class="org.apache.xerces.util.NamespaceSupport" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.util.NamespaceSupport" />
	<method signature="int getDeclaredPrefixCount()" class="org.apache.xerces.util.NamespaceSupport" />
	<method signature="java.util.Enumeration getAllPrefixes()" class="org.apache.xerces.util.NamespaceSupport" />
	<method signature="boolean declarePrefix(java.lang.String,java.lang.String)" class="org.apache.xerces.util.NamespaceSupport" />
	<method signature="java.lang.String getDeclaredPrefixAt(int)" class="org.apache.xerces.util.NamespaceSupport" />
	<class name="com.hexidec.ekit.component.FontSelectorDialog" />
	<method signature="java.lang.String getFontName()" class="com.hexidec.ekit.component.FontSelectorDialog" />
	<method signature="void itemStateChanged(java.awt.event.ItemEvent)" class="com.hexidec.ekit.component.FontSelectorDialog" />
	<method signature="void &lt;init&gt;(java.awt.Frame,java.lang.String,boolean,java.lang.String)" class="com.hexidec.ekit.component.FontSelectorDialog" />
	<method signature="void &lt;init&gt;(java.awt.Frame,java.lang.String,boolean,java.lang.String,java.lang.String)" class="com.hexidec.ekit.component.FontSelectorDialog" />
	<class name="org.jfree.chart.plot.dial.DialPointer" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.plot.dial.DialPointer" />
	<method signature="int hashCode()" class="org.jfree.chart.plot.dial.DialPointer" />
	<method signature="void setRadius(double)" class="org.jfree.chart.plot.dial.DialPointer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.plot.dial.DialPointer" />
	<method signature="void setDatasetIndex(int)" class="org.jfree.chart.plot.dial.DialPointer" />
	<method signature="double getRadius()" class="org.jfree.chart.plot.dial.DialPointer" />
	<method signature="boolean isClippedToWindow()" class="org.jfree.chart.plot.dial.DialPointer" />
	<method signature="int getDatasetIndex()" class="org.jfree.chart.plot.dial.DialPointer" />
	<class name="freemarker.ext.beans.CollectionModel" />
	<method signature="int size()" class="freemarker.ext.beans.CollectionModel" />
	<method signature="freemarker.template.TemplateModel get(int)" class="freemarker.ext.beans.CollectionModel" />
	<method signature="freemarker.template.TemplateModelIterator iterator()" class="freemarker.ext.beans.CollectionModel" />
	<method signature="void &lt;init&gt;(java.util.Collection,freemarker.ext.beans.BeansWrapper)" class="freemarker.ext.beans.CollectionModel" />
	<method signature="boolean getSupportsIndexedAccess()" class="freemarker.ext.beans.CollectionModel" />
	<class name="org.jfree.ui.tabbedui.VerticalLayout" />
	<method signature="boolean isUseSizeFromParent()" class="org.jfree.ui.tabbedui.VerticalLayout" />
	<method signature="void addLayoutComponent(java.lang.String,java.awt.Component)" class="org.jfree.ui.tabbedui.VerticalLayout" />
	<method signature="void &lt;init&gt;()" class="org.jfree.ui.tabbedui.VerticalLayout" />
	<method signature="void layoutContainer(java.awt.Container)" class="org.jfree.ui.tabbedui.VerticalLayout" />
	<method signature="void &lt;init&gt;(boolean)" class="org.jfree.ui.tabbedui.VerticalLayout" />
	<method signature="void removeLayoutComponent(java.awt.Component)" class="org.jfree.ui.tabbedui.VerticalLayout" />
	<method signature="java.awt.Dimension preferredLayoutSize(java.awt.Container)" class="org.jfree.ui.tabbedui.VerticalLayout" />
	<method signature="java.awt.Dimension minimumLayoutSize(java.awt.Container)" class="org.jfree.ui.tabbedui.VerticalLayout" />
	<class name="tourma.views.JPNStatistics" />
	<method signature="void updatePositions()" class="tourma.views.JPNStatistics" />
	<method signature="void updateBalancedTeam()" class="tourma.views.JPNStatistics" />
	<method signature="void updateTeamPositions()" class="tourma.views.JPNStatistics" />
	<method signature="void update()" class="tourma.views.JPNStatistics" />
	<method signature="void updateBalancedIndiv()" class="tourma.views.JPNStatistics" />
	<method signature="void &lt;init&gt;()" class="tourma.views.JPNStatistics" />
	<method signature="javax.swing.JTabbedPane getTabbedPane()" class="tourma.views.JPNStatistics" />
	<class name="org.jfree.chart.ChartMouseListener" />
	<method signature="void chartMouseMoved(org.jfree.chart.ChartMouseEvent)" class="org.jfree.chart.ChartMouseListener" />
	<method signature="void chartMouseClicked(org.jfree.chart.ChartMouseEvent)" class="org.jfree.chart.ChartMouseListener" />
	<class name="com.google.zxing.RGBLuminanceSource" />
	<method signature="void &lt;init&gt;(int,int,int[])" class="com.google.zxing.RGBLuminanceSource" />
	<method signature="com.google.zxing.LuminanceSource crop(int,int,int,int)" class="com.google.zxing.RGBLuminanceSource" />
	<method signature="boolean isCropSupported()" class="com.google.zxing.RGBLuminanceSource" />
	<method signature="byte[] getRow(int,byte[])" class="com.google.zxing.RGBLuminanceSource" />
	<method signature="byte[] getMatrix()" class="com.google.zxing.RGBLuminanceSource" />
	<class name="org.jfree.chart.annotations.CategoryPointerAnnotation" />
	<method signature="void setArrowStroke(java.awt.Stroke)" class="org.jfree.chart.annotations.CategoryPointerAnnotation" />
	<method signature="int hashCode()" class="org.jfree.chart.annotations.CategoryPointerAnnotation" />
	<method signature="double getAngle()" class="org.jfree.chart.annotations.CategoryPointerAnnotation" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Comparable,double,double)" class="org.jfree.chart.annotations.CategoryPointerAnnotation" />
	<method signature="void setLabelOffset(double)" class="org.jfree.chart.annotations.CategoryPointerAnnotation" />
	<method signature="double getLabelOffset()" class="org.jfree.chart.annotations.CategoryPointerAnnotation" />
	<method signature="double getArrowLength()" class="org.jfree.chart.annotations.CategoryPointerAnnotation" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.annotations.CategoryPointerAnnotation" />
	<method signature="double getArrowWidth()" class="org.jfree.chart.annotations.CategoryPointerAnnotation" />
	<method signature="java.awt.Paint getArrowPaint()" class="org.jfree.chart.annotations.CategoryPointerAnnotation" />
	<method signature="double getBaseRadius()" class="org.jfree.chart.annotations.CategoryPointerAnnotation" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.annotations.CategoryPointerAnnotation" />
	<method signature="void setArrowWidth(double)" class="org.jfree.chart.annotations.CategoryPointerAnnotation" />
	<method signature="void setArrowPaint(java.awt.Paint)" class="org.jfree.chart.annotations.CategoryPointerAnnotation" />
	<method signature="void draw(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis)" class="org.jfree.chart.annotations.CategoryPointerAnnotation" />
	<method signature="void setBaseRadius(double)" class="org.jfree.chart.annotations.CategoryPointerAnnotation" />
	<method signature="java.awt.Stroke getArrowStroke()" class="org.jfree.chart.annotations.CategoryPointerAnnotation" />
	<method signature="void setAngle(double)" class="org.jfree.chart.annotations.CategoryPointerAnnotation" />
	<method signature="void setTipRadius(double)" class="org.jfree.chart.annotations.CategoryPointerAnnotation" />
	<method signature="void setArrowLength(double)" class="org.jfree.chart.annotations.CategoryPointerAnnotation" />
	<method signature="double getTipRadius()" class="org.jfree.chart.annotations.CategoryPointerAnnotation" />
	<class name="org.apache.xerces.xni.parser.XMLParseException" />
	<method signature="void &lt;init&gt;(org.apache.xerces.xni.XMLLocator,java.lang.String,java.lang.Exception)" class="org.apache.xerces.xni.parser.XMLParseException" />
	<method signature="int getCharacterOffset()" class="org.apache.xerces.xni.parser.XMLParseException" />
	<method signature="java.lang.String getExpandedSystemId()" class="org.apache.xerces.xni.parser.XMLParseException" />
	<method signature="int getLineNumber()" class="org.apache.xerces.xni.parser.XMLParseException" />
	<method signature="void &lt;init&gt;(org.apache.xerces.xni.XMLLocator,java.lang.String)" class="org.apache.xerces.xni.parser.XMLParseException" />
	<method signature="java.lang.String toString()" class="org.apache.xerces.xni.parser.XMLParseException" />
	<method signature="java.lang.String getPublicId()" class="org.apache.xerces.xni.parser.XMLParseException" />
	<method signature="java.lang.String getLiteralSystemId()" class="org.apache.xerces.xni.parser.XMLParseException" />
	<method signature="int getColumnNumber()" class="org.apache.xerces.xni.parser.XMLParseException" />
	<method signature="java.lang.String getBaseSystemId()" class="org.apache.xerces.xni.parser.XMLParseException" />
	<class name="org.apache.xerces.dom.events.UIEventImpl" />
	<method signature="int getDetail()" class="org.apache.xerces.dom.events.UIEventImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.dom.events.UIEventImpl" />
	<method signature="void initUIEvent(java.lang.String,boolean,boolean,org.w3c.dom.views.AbstractView,int)" class="org.apache.xerces.dom.events.UIEventImpl" />
	<method signature="org.w3c.dom.views.AbstractView getView()" class="org.apache.xerces.dom.events.UIEventImpl" />
	<class name="tourma.data.EIndivPairing" />
	<method signature="tourma.data.EIndivPairing[] values()" class="tourma.data.EIndivPairing" />
	<method signature="tourma.data.EIndivPairing valueOf(java.lang.String)" class="tourma.data.EIndivPairing" />
	<class name="org.xml.sax.HandlerBase" />
	<method signature="void warning(org.xml.sax.SAXParseException)" class="org.xml.sax.HandlerBase" />
	<method signature="void startElement(java.lang.String,org.xml.sax.AttributeList)" class="org.xml.sax.HandlerBase" />
	<method signature="void endElement(java.lang.String)" class="org.xml.sax.HandlerBase" />
	<method signature="void notationDecl(java.lang.String,java.lang.String,java.lang.String)" class="org.xml.sax.HandlerBase" />
	<method signature="void processingInstruction(java.lang.String,java.lang.String)" class="org.xml.sax.HandlerBase" />
	<method signature="void unparsedEntityDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.xml.sax.HandlerBase" />
	<method signature="org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)" class="org.xml.sax.HandlerBase" />
	<method signature="void setDocumentLocator(org.xml.sax.Locator)" class="org.xml.sax.HandlerBase" />
	<method signature="void characters(char[],int,int)" class="org.xml.sax.HandlerBase" />
	<method signature="void error(org.xml.sax.SAXParseException)" class="org.xml.sax.HandlerBase" />
	<method signature="void &lt;init&gt;()" class="org.xml.sax.HandlerBase" />
	<method signature="void startDocument()" class="org.xml.sax.HandlerBase" />
	<method signature="void endDocument()" class="org.xml.sax.HandlerBase" />
	<method signature="void ignorableWhitespace(char[],int,int)" class="org.xml.sax.HandlerBase" />
	<method signature="void fatalError(org.xml.sax.SAXParseException)" class="org.xml.sax.HandlerBase" />
	<class name="tourma.data.Competitor" />
	<method signature="java.lang.String getName()" class="tourma.data.Competitor" />
	<method signature="void delCategory(tourma.data.Category)" class="tourma.data.Competitor" />
	<method signature="void newMatchs()" class="tourma.data.Competitor" />
	<method signature="tourma.data.Clan getClan()" class="tourma.data.Competitor" />
	<method signature="void addMatch(tourma.data.Competitor,tourma.data.Round)" class="tourma.data.Competitor" />
	<method signature="int getCategoryCount()" class="tourma.data.Competitor" />
	<method signature="boolean isMatchsNotNull()" class="tourma.data.Competitor" />
	<method signature="void clearCategory()" class="tourma.data.Competitor" />
	<method signature="java.util.ArrayList getPossibleOpponents(java.util.ArrayList,tourma.data.Round)" class="tourma.data.Competitor" />
	<method signature="boolean equals(java.lang.Object)" class="tourma.data.Competitor" />
	<method signature="boolean havePlayed(tourma.data.Competitor)" class="tourma.data.Competitor" />
	<method signature="int getMatchCount()" class="tourma.data.Competitor" />
	<method signature="void &lt;init&gt;()" class="tourma.data.Competitor" />
	<method signature="void setName(java.lang.String)" class="tourma.data.Competitor" />
	<method signature="void setPicture(java.awt.image.BufferedImage)" class="tourma.data.Competitor" />
	<method signature="java.awt.image.BufferedImage getPicture()" class="tourma.data.Competitor" />
	<method signature="java.awt.Color generateRandomColor(java.awt.Color)" class="tourma.data.Competitor" />
	<method signature="void addMatch(tourma.data.Match)" class="tourma.data.Competitor" />
	<method signature="tourma.data.Match getMatch(int)" class="tourma.data.Competitor" />
	<method signature="tourma.data.Category getCategory(int)" class="tourma.data.Competitor" />
	<method signature="void setColor(java.awt.Color)" class="tourma.data.Competitor" />
	<method signature="int hashCode()" class="tourma.data.Competitor" />
	<method signature="java.util.HashMap getTeamOppositionCount(java.util.ArrayList,tourma.data.Round)" class="tourma.data.Competitor" />
	<method signature="void roundCheck(tourma.data.Round)" class="tourma.data.Competitor" />
	<method signature="boolean containsCategory(tourma.data.Category)" class="tourma.data.Competitor" />
	<method signature="java.lang.String getDecoratedName()" class="tourma.data.Competitor" />
	<method signature="void addMatchRoundRobin(tourma.data.Competitor,tourma.data.Round,boolean)" class="tourma.data.Competitor" />
	<method signature="int matchIndex(tourma.data.Match)" class="tourma.data.Competitor" />
	<method signature="void addCategory(tourma.data.Category)" class="tourma.data.Competitor" />
	<method signature="void setClan(tourma.data.Clan)" class="tourma.data.Competitor" />
	<method signature="void removeMatch(tourma.data.Match)" class="tourma.data.Competitor" />
	<method signature="void clearMatchs()" class="tourma.data.Competitor" />
	<method signature="java.awt.Color getColor()" class="tourma.data.Competitor" />
	<method signature="java.lang.String toString()" class="tourma.data.Competitor" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="tourma.data.Competitor" />
	<class name="com.google.zxing.oned.EAN8Writer" />
	<method signature="com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map)" class="com.google.zxing.oned.EAN8Writer" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.oned.EAN8Writer" />
	<method signature="boolean[] encode(java.lang.String)" class="com.google.zxing.oned.EAN8Writer" />
	<class name="org.jfree.chart.plot.PlotState" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.plot.PlotState" />
	<method signature="java.util.Map getSharedAxisStates()" class="org.jfree.chart.plot.PlotState" />
	<class name="org.apache.html.dom.HTMLDirectoryElementImpl" />
	<method signature="void setCompact(boolean)" class="org.apache.html.dom.HTMLDirectoryElementImpl" />
	<method signature="boolean getCompact()" class="org.apache.html.dom.HTMLDirectoryElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLDirectoryElementImpl" />
	<class name="org.jfree.data.time.TimeTableXYDataset" />
	<method signature="boolean getDomainIsPointsInTime()" class="org.jfree.data.time.TimeTableXYDataset" />
	<method signature="double getEndXValue(int,int)" class="org.jfree.data.time.TimeTableXYDataset" />
	<method signature="java.lang.Number getX(int,int)" class="org.jfree.data.time.TimeTableXYDataset" />
	<method signature="void add(org.jfree.data.time.TimePeriod,java.lang.Number,java.lang.Comparable,boolean)" class="org.jfree.data.time.TimeTableXYDataset" />
	<method signature="java.lang.Number getY(int,int)" class="org.jfree.data.time.TimeTableXYDataset" />
	<method signature="void remove(org.jfree.data.time.TimePeriod,java.lang.Comparable)" class="org.jfree.data.time.TimeTableXYDataset" />
	<method signature="void &lt;init&gt;(java.util.TimeZone)" class="org.jfree.data.time.TimeTableXYDataset" />
	<method signature="int getSeriesCount()" class="org.jfree.data.time.TimeTableXYDataset" />
	<method signature="org.jfree.data.Range getDomainBounds(boolean)" class="org.jfree.data.time.TimeTableXYDataset" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.time.TimeTableXYDataset" />
	<method signature="java.lang.Comparable getSeriesKey(int)" class="org.jfree.data.time.TimeTableXYDataset" />
	<method signature="void remove(org.jfree.data.time.TimePeriod,java.lang.Comparable,boolean)" class="org.jfree.data.time.TimeTableXYDataset" />
	<method signature="void clear()" class="org.jfree.data.time.TimeTableXYDataset" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.time.TimeTableXYDataset" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.time.TimeTableXYDataset" />
	<method signature="java.lang.Number getEndX(int,int)" class="org.jfree.data.time.TimeTableXYDataset" />
	<method signature="int getItemCount(int)" class="org.jfree.data.time.TimeTableXYDataset" />
	<method signature="java.lang.Number getEndY(int,int)" class="org.jfree.data.time.TimeTableXYDataset" />
	<method signature="double getDomainUpperBound(boolean)" class="org.jfree.data.time.TimeTableXYDataset" />
	<method signature="double getXValue(int,int)" class="org.jfree.data.time.TimeTableXYDataset" />
	<method signature="org.jfree.data.time.TimePeriod getTimePeriod(int)" class="org.jfree.data.time.TimeTableXYDataset" />
	<method signature="void add(org.jfree.data.time.TimePeriod,double,java.lang.Comparable)" class="org.jfree.data.time.TimeTableXYDataset" />
	<method signature="void &lt;init&gt;(java.util.TimeZone,java.util.Locale)" class="org.jfree.data.time.TimeTableXYDataset" />
	<method signature="void setDomainIsPointsInTime(boolean)" class="org.jfree.data.time.TimeTableXYDataset" />
	<method signature="org.jfree.data.time.TimePeriodAnchor getXPosition()" class="org.jfree.data.time.TimeTableXYDataset" />
	<method signature="double getDomainLowerBound(boolean)" class="org.jfree.data.time.TimeTableXYDataset" />
	<method signature="void setXPosition(org.jfree.data.time.TimePeriodAnchor)" class="org.jfree.data.time.TimeTableXYDataset" />
	<method signature="int getItemCount()" class="org.jfree.data.time.TimeTableXYDataset" />
	<method signature="double getStartXValue(int,int)" class="org.jfree.data.time.TimeTableXYDataset" />
	<method signature="java.lang.Number getStartX(int,int)" class="org.jfree.data.time.TimeTableXYDataset" />
	<method signature="java.lang.Number getStartY(int,int)" class="org.jfree.data.time.TimeTableXYDataset" />
	<class name="org.apache.xerces.dom.CDATASectionImpl" />
	<method signature="short getNodeType()" class="org.apache.xerces.dom.CDATASectionImpl" />
	<method signature="void &lt;init&gt;(org.apache.xerces.dom.CoreDocumentImpl,java.lang.String)" class="org.apache.xerces.dom.CDATASectionImpl" />
	<method signature="java.lang.String getNodeName()" class="org.apache.xerces.dom.CDATASectionImpl" />
	<class name="org.apache.xerces.xs.XSParticle" />
	<method signature="org.apache.xerces.xs.XSTerm getTerm()" class="org.apache.xerces.xs.XSParticle" />
	<method signature="org.apache.xerces.xs.XSObjectList getAnnotations()" class="org.apache.xerces.xs.XSParticle" />
	<method signature="int getMinOccurs()" class="org.apache.xerces.xs.XSParticle" />
	<method signature="boolean getMaxOccursUnbounded()" class="org.apache.xerces.xs.XSParticle" />
	<method signature="int getMaxOccurs()" class="org.apache.xerces.xs.XSParticle" />
	<class name="org.jfree.base.modules.PackageManager" />
	<method signature="void load(java.lang.String)" class="org.jfree.base.modules.PackageManager" />
	<method signature="org.jfree.base.modules.Module[] getAllModules()" class="org.jfree.base.modules.PackageManager" />
	<method signature="boolean isModuleAvailable(org.jfree.base.modules.ModuleInfo)" class="org.jfree.base.modules.PackageManager" />
	<method signature="void addModule(java.lang.String)" class="org.jfree.base.modules.PackageManager" />
	<method signature="org.jfree.base.modules.PackageManager$PackageConfiguration getPackageConfiguration()" class="org.jfree.base.modules.PackageManager" />
	<method signature="void initializeModules()" class="org.jfree.base.modules.PackageManager" />
	<method signature="org.jfree.base.modules.Module[] getActiveModules()" class="org.jfree.base.modules.PackageManager" />
	<method signature="org.jfree.base.modules.PackageManager createInstance(org.jfree.base.AbstractBoot)" class="org.jfree.base.modules.PackageManager" />
	<method signature="void printUsedModules(java.io.PrintStream)" class="org.jfree.base.modules.PackageManager" />
	<class name="org.apache.xerces.util.XMLGrammarPoolImpl" />
	<method signature="void cacheGrammars(java.lang.String,org.apache.xerces.xni.grammars.Grammar[])" class="org.apache.xerces.util.XMLGrammarPoolImpl" />
	<method signature="org.apache.xerces.xni.grammars.Grammar retrieveGrammar(org.apache.xerces.xni.grammars.XMLGrammarDescription)" class="org.apache.xerces.util.XMLGrammarPoolImpl" />
	<method signature="boolean containsGrammar(org.apache.xerces.xni.grammars.XMLGrammarDescription)" class="org.apache.xerces.util.XMLGrammarPoolImpl" />
	<method signature="void putGrammar(org.apache.xerces.xni.grammars.Grammar)" class="org.apache.xerces.util.XMLGrammarPoolImpl" />
	<method signature="boolean equals(org.apache.xerces.xni.grammars.XMLGrammarDescription,org.apache.xerces.xni.grammars.XMLGrammarDescription)" class="org.apache.xerces.util.XMLGrammarPoolImpl" />
	<method signature="int hashCode(org.apache.xerces.xni.grammars.XMLGrammarDescription)" class="org.apache.xerces.util.XMLGrammarPoolImpl" />
	<method signature="org.apache.xerces.xni.grammars.Grammar[] retrieveInitialGrammarSet(java.lang.String)" class="org.apache.xerces.util.XMLGrammarPoolImpl" />
	<method signature="org.apache.xerces.xni.grammars.Grammar removeGrammar(org.apache.xerces.xni.grammars.XMLGrammarDescription)" class="org.apache.xerces.util.XMLGrammarPoolImpl" />
	<method signature="void lockPool()" class="org.apache.xerces.util.XMLGrammarPoolImpl" />
	<method signature="void &lt;init&gt;(int)" class="org.apache.xerces.util.XMLGrammarPoolImpl" />
	<method signature="void clear()" class="org.apache.xerces.util.XMLGrammarPoolImpl" />
	<method signature="org.apache.xerces.xni.grammars.Grammar getGrammar(org.apache.xerces.xni.grammars.XMLGrammarDescription)" class="org.apache.xerces.util.XMLGrammarPoolImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.util.XMLGrammarPoolImpl" />
	<method signature="void unlockPool()" class="org.apache.xerces.util.XMLGrammarPoolImpl" />
	<class name="org.apache.xerces.stax.events.NamespaceImpl" />
	<method signature="java.lang.String getPrefix()" class="org.apache.xerces.stax.events.NamespaceImpl" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,javax.xml.stream.Location)" class="org.apache.xerces.stax.events.NamespaceImpl" />
	<method signature="boolean isDefaultNamespaceDeclaration()" class="org.apache.xerces.stax.events.NamespaceImpl" />
	<method signature="java.lang.String getNamespaceURI()" class="org.apache.xerces.stax.events.NamespaceImpl" />
	<class name="org.jfree.chart.plot.FastScatterPlot" />
	<method signature="void zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)" class="org.jfree.chart.plot.FastScatterPlot" />
	<method signature="void render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.CrosshairState)" class="org.jfree.chart.plot.FastScatterPlot" />
	<method signature="org.jfree.chart.axis.ValueAxis getRangeAxis()" class="org.jfree.chart.plot.FastScatterPlot" />
	<method signature="boolean isDomainGridlinesVisible()" class="org.jfree.chart.plot.FastScatterPlot" />
	<method signature="void setRangeGridlinePaint(java.awt.Paint)" class="org.jfree.chart.plot.FastScatterPlot" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.plot.FastScatterPlot" />
	<method signature="void setData(float[][])" class="org.jfree.chart.plot.FastScatterPlot" />
	<method signature="void setDomainPannable(boolean)" class="org.jfree.chart.plot.FastScatterPlot" />
	<method signature="void panRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" class="org.jfree.chart.plot.FastScatterPlot" />
	<method signature="void zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" class="org.jfree.chart.plot.FastScatterPlot" />
	<method signature="java.awt.Paint getRangeGridlinePaint()" class="org.jfree.chart.plot.FastScatterPlot" />
	<method signature="org.jfree.chart.plot.PlotOrientation getOrientation()" class="org.jfree.chart.plot.FastScatterPlot" />
	<method signature="void setDomainAxis(org.jfree.chart.axis.ValueAxis)" class="org.jfree.chart.plot.FastScatterPlot" />
	<method signature="java.awt.Paint getPaint()" class="org.jfree.chart.plot.FastScatterPlot" />
	<method signature="void setRangePannable(boolean)" class="org.jfree.chart.plot.FastScatterPlot" />
	<method signature="void setDomainGridlineStroke(java.awt.Stroke)" class="org.jfree.chart.plot.FastScatterPlot" />
	<method signature="void zoomDomainAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" class="org.jfree.chart.plot.FastScatterPlot" />
	<method signature="java.awt.Paint getDomainGridlinePaint()" class="org.jfree.chart.plot.FastScatterPlot" />
	<method signature="java.awt.Stroke getDomainGridlineStroke()" class="org.jfree.chart.plot.FastScatterPlot" />
	<method signature="org.jfree.chart.axis.ValueAxis getDomainAxis()" class="org.jfree.chart.plot.FastScatterPlot" />
	<method signature="boolean isDomainPannable()" class="org.jfree.chart.plot.FastScatterPlot" />
	<method signature="java.lang.String getPlotType()" class="org.jfree.chart.plot.FastScatterPlot" />
	<method signature="void zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" class="org.jfree.chart.plot.FastScatterPlot" />
	<method signature="java.awt.Stroke getRangeGridlineStroke()" class="org.jfree.chart.plot.FastScatterPlot" />
	<method signature="void setRangeGridlineStroke(java.awt.Stroke)" class="org.jfree.chart.plot.FastScatterPlot" />
	<method signature="boolean isRangeGridlinesVisible()" class="org.jfree.chart.plot.FastScatterPlot" />
	<method signature="void setRangeAxis(org.jfree.chart.axis.ValueAxis)" class="org.jfree.chart.plot.FastScatterPlot" />
	<method signature="void setRangeGridlinesVisible(boolean)" class="org.jfree.chart.plot.FastScatterPlot" />
	<method signature="org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)" class="org.jfree.chart.plot.FastScatterPlot" />
	<method signature="void setPaint(java.awt.Paint)" class="org.jfree.chart.plot.FastScatterPlot" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.plot.FastScatterPlot" />
	<method signature="void setDomainGridlinesVisible(boolean)" class="org.jfree.chart.plot.FastScatterPlot" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.plot.FastScatterPlot" />
	<method signature="void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.plot.FastScatterPlot" />
	<method signature="float[][] getData()" class="org.jfree.chart.plot.FastScatterPlot" />
	<method signature="void zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)" class="org.jfree.chart.plot.FastScatterPlot" />
	<method signature="boolean isDomainZoomable()" class="org.jfree.chart.plot.FastScatterPlot" />
	<method signature="void setDomainGridlinePaint(java.awt.Paint)" class="org.jfree.chart.plot.FastScatterPlot" />
	<method signature="boolean isRangePannable()" class="org.jfree.chart.plot.FastScatterPlot" />
	<method signature="void zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" class="org.jfree.chart.plot.FastScatterPlot" />
	<method signature="boolean isRangeZoomable()" class="org.jfree.chart.plot.FastScatterPlot" />
	<method signature="void panDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" class="org.jfree.chart.plot.FastScatterPlot" />
	<method signature="void &lt;init&gt;(float[][],org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis)" class="org.jfree.chart.plot.FastScatterPlot" />
	<class name="edu.umd.cs.findbugs.annotations.CheckForNull" />
	<class name="org.jfree.chart.plot.dial.DialPlot" />
	<method signature="java.lang.String getPlotType()" class="org.jfree.chart.plot.dial.DialPlot" />
	<method signature="void setCap(org.jfree.chart.plot.dial.DialLayer)" class="org.jfree.chart.plot.dial.DialPlot" />
	<method signature="int getLayerIndex(org.jfree.chart.plot.dial.DialLayer)" class="org.jfree.chart.plot.dial.DialPlot" />
	<method signature="org.jfree.data.general.ValueDataset getDataset(int)" class="org.jfree.chart.plot.dial.DialPlot" />
	<method signature="java.awt.geom.Rectangle2D rectangleByRadius(java.awt.geom.Rectangle2D,double,double)" class="org.jfree.chart.plot.dial.DialPlot" />
	<method signature="org.jfree.chart.plot.dial.DialLayer getBackground()" class="org.jfree.chart.plot.dial.DialPlot" />
	<method signature="void setDataset(int,org.jfree.data.general.ValueDataset)" class="org.jfree.chart.plot.dial.DialPlot" />
	<method signature="void &lt;init&gt;(org.jfree.data.general.ValueDataset)" class="org.jfree.chart.plot.dial.DialPlot" />
	<method signature="org.jfree.chart.plot.dial.DialFrame getDialFrame()" class="org.jfree.chart.plot.dial.DialPlot" />
	<method signature="org.jfree.data.general.ValueDataset getDataset()" class="org.jfree.chart.plot.dial.DialPlot" />
	<method signature="void removeLayer(org.jfree.chart.plot.dial.DialLayer)" class="org.jfree.chart.plot.dial.DialPlot" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.plot.dial.DialPlot" />
	<method signature="void setDataset(org.jfree.data.general.ValueDataset)" class="org.jfree.chart.plot.dial.DialPlot" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.plot.dial.DialPlot" />
	<method signature="void removePointer(org.jfree.chart.plot.dial.DialPointer)" class="org.jfree.chart.plot.dial.DialPlot" />
	<method signature="void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.plot.dial.DialPlot" />
	<method signature="void addScale(int,org.jfree.chart.plot.dial.DialScale)" class="org.jfree.chart.plot.dial.DialPlot" />
	<method signature="void mapDatasetToScale(int,int)" class="org.jfree.chart.plot.dial.DialPlot" />
	<method signature="void setBackground(org.jfree.chart.plot.dial.DialLayer)" class="org.jfree.chart.plot.dial.DialPlot" />
	<method signature="int getDatasetCount()" class="org.jfree.chart.plot.dial.DialPlot" />
	<method signature="void removeLayer(int)" class="org.jfree.chart.plot.dial.DialPlot" />
	<method signature="void dialLayerChanged(org.jfree.chart.plot.dial.DialLayerChangeEvent)" class="org.jfree.chart.plot.dial.DialPlot" />
	<method signature="org.jfree.chart.plot.dial.DialLayer getCap()" class="org.jfree.chart.plot.dial.DialPlot" />
	<method signature="double getViewX()" class="org.jfree.chart.plot.dial.DialPlot" />
	<method signature="void addPointer(org.jfree.chart.plot.dial.DialPointer)" class="org.jfree.chart.plot.dial.DialPlot" />
	<method signature="org.jfree.chart.plot.dial.DialScale getScaleForDataset(int)" class="org.jfree.chart.plot.dial.DialPlot" />
	<method signature="double getViewY()" class="org.jfree.chart.plot.dial.DialPlot" />
	<method signature="void addLayer(org.jfree.chart.plot.dial.DialLayer)" class="org.jfree.chart.plot.dial.DialPlot" />
	<method signature="int hashCode()" class="org.jfree.chart.plot.dial.DialPlot" />
	<method signature="void removePointer(int)" class="org.jfree.chart.plot.dial.DialPlot" />
	<method signature="int getPointerIndex(org.jfree.chart.plot.dial.DialPointer)" class="org.jfree.chart.plot.dial.DialPlot" />
	<method signature="double getViewWidth()" class="org.jfree.chart.plot.dial.DialPlot" />
	<method signature="double getViewHeight()" class="org.jfree.chart.plot.dial.DialPlot" />
	<method signature="org.jfree.chart.plot.dial.DialPointer getPointerForDataset(int)" class="org.jfree.chart.plot.dial.DialPlot" />
	<method signature="double getValue(int)" class="org.jfree.chart.plot.dial.DialPlot" />
	<method signature="org.jfree.chart.plot.dial.DialScale getScale(int)" class="org.jfree.chart.plot.dial.DialPlot" />
	<method signature="void setDialFrame(org.jfree.chart.plot.dial.DialFrame)" class="org.jfree.chart.plot.dial.DialPlot" />
	<method signature="void setView(double,double,double,double)" class="org.jfree.chart.plot.dial.DialPlot" />
	<class name="org.jfree.data.xy.Vector" />
	<method signature="double getY()" class="org.jfree.data.xy.Vector" />
	<method signature="int hashCode()" class="org.jfree.data.xy.Vector" />
	<method signature="double getX()" class="org.jfree.data.xy.Vector" />
	<method signature="double getAngle()" class="org.jfree.data.xy.Vector" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.xy.Vector" />
	<method signature="double getLength()" class="org.jfree.data.xy.Vector" />
	<method signature="void &lt;init&gt;(double,double)" class="org.jfree.data.xy.Vector" />
	<class name="org.jfree.chart.plot.DefaultDrawingSupplier" />
	<method signature="void &lt;init&gt;(java.awt.Paint[],java.awt.Paint[],java.awt.Stroke[],java.awt.Stroke[],java.awt.Shape[])" class="org.jfree.chart.plot.DefaultDrawingSupplier" />
	<method signature="void &lt;init&gt;(java.awt.Paint[],java.awt.Paint[],java.awt.Paint[],java.awt.Stroke[],java.awt.Stroke[],java.awt.Shape[])" class="org.jfree.chart.plot.DefaultDrawingSupplier" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.plot.DefaultDrawingSupplier" />
	<method signature="java.awt.Shape[] createStandardSeriesShapes()" class="org.jfree.chart.plot.DefaultDrawingSupplier" />
	<method signature="java.awt.Paint getNextOutlinePaint()" class="org.jfree.chart.plot.DefaultDrawingSupplier" />
	<method signature="java.awt.Stroke getNextStroke()" class="org.jfree.chart.plot.DefaultDrawingSupplier" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.plot.DefaultDrawingSupplier" />
	<method signature="java.awt.Paint getNextFillPaint()" class="org.jfree.chart.plot.DefaultDrawingSupplier" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.plot.DefaultDrawingSupplier" />
	<method signature="java.awt.Stroke getNextOutlineStroke()" class="org.jfree.chart.plot.DefaultDrawingSupplier" />
	<method signature="java.awt.Paint getNextPaint()" class="org.jfree.chart.plot.DefaultDrawingSupplier" />
	<method signature="java.awt.Shape getNextShape()" class="org.jfree.chart.plot.DefaultDrawingSupplier" />
	<class name="javax.xml.xpath.XPathVariableResolver" />
	<method signature="java.lang.Object resolveVariable(javax.xml.namespace.QName)" class="javax.xml.xpath.XPathVariableResolver" />
	<class name="org.jfree.chart.DrawableLegendItem" />
	<method signature="java.awt.geom.Line2D getLine()" class="org.jfree.chart.DrawableLegendItem" />
	<method signature="void &lt;init&gt;(org.jfree.chart.LegendItem)" class="org.jfree.chart.DrawableLegendItem" />
	<method signature="double getY()" class="org.jfree.chart.DrawableLegendItem" />
	<method signature="double getX()" class="org.jfree.chart.DrawableLegendItem" />
	<method signature="double getHeight()" class="org.jfree.chart.DrawableLegendItem" />
	<method signature="void setLine(java.awt.geom.Line2D)" class="org.jfree.chart.DrawableLegendItem" />
	<method signature="void setLabelPosition(java.awt.geom.Point2D)" class="org.jfree.chart.DrawableLegendItem" />
	<method signature="org.jfree.chart.LegendItem getItem()" class="org.jfree.chart.DrawableLegendItem" />
	<method signature="java.awt.geom.Point2D getLabelPosition()" class="org.jfree.chart.DrawableLegendItem" />
	<method signature="void setBounds(double,double,double,double)" class="org.jfree.chart.DrawableLegendItem" />
	<method signature="void setMarker(java.awt.Shape)" class="org.jfree.chart.DrawableLegendItem" />
	<method signature="double getMaxY()" class="org.jfree.chart.DrawableLegendItem" />
	<method signature="double getMaxX()" class="org.jfree.chart.DrawableLegendItem" />
	<method signature="double getWidth()" class="org.jfree.chart.DrawableLegendItem" />
	<method signature="java.awt.Shape getMarker()" class="org.jfree.chart.DrawableLegendItem" />
	<method signature="void setX(double)" class="org.jfree.chart.DrawableLegendItem" />
	<method signature="void setY(double)" class="org.jfree.chart.DrawableLegendItem" />
	<class name="org.jfree.chart.PolarChartPanel" />
	<method signature="void setChart(org.jfree.chart.JFreeChart)" class="org.jfree.chart.PolarChartPanel" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="org.jfree.chart.PolarChartPanel" />
	<method signature="void &lt;init&gt;(org.jfree.chart.JFreeChart)" class="org.jfree.chart.PolarChartPanel" />
	<method signature="void &lt;init&gt;(org.jfree.chart.JFreeChart,boolean)" class="org.jfree.chart.PolarChartPanel" />
	<class name="tourma.utils.display.TMultiServer" />
	<method signature="void run()" class="tourma.utils.display.TMultiServer" />
	<method signature="void &lt;init&gt;()" class="tourma.utils.display.TMultiServer" />
	<method signature="void stopServer()" class="tourma.utils.display.TMultiServer" />
	<class name="org.apache.xerces.parsers.AbstractSAXParser$AttributesProxy" />
	<method signature="java.lang.String getValue(int)" class="org.apache.xerces.parsers.AbstractSAXParser$AttributesProxy" />
	<method signature="java.lang.String getType(java.lang.String)" class="org.apache.xerces.parsers.AbstractSAXParser$AttributesProxy" />
	<method signature="boolean isDeclared(java.lang.String,java.lang.String)" class="org.apache.xerces.parsers.AbstractSAXParser$AttributesProxy" />
	<method signature="java.lang.String getLocalName(int)" class="org.apache.xerces.parsers.AbstractSAXParser$AttributesProxy" />
	<method signature="java.lang.String getType(int)" class="org.apache.xerces.parsers.AbstractSAXParser$AttributesProxy" />
	<method signature="java.lang.String getValue(java.lang.String)" class="org.apache.xerces.parsers.AbstractSAXParser$AttributesProxy" />
	<method signature="boolean isDeclared(int)" class="org.apache.xerces.parsers.AbstractSAXParser$AttributesProxy" />
	<method signature="int getIndex(java.lang.String,java.lang.String)" class="org.apache.xerces.parsers.AbstractSAXParser$AttributesProxy" />
	<method signature="boolean isSpecified(java.lang.String,java.lang.String)" class="org.apache.xerces.parsers.AbstractSAXParser$AttributesProxy" />
	<method signature="java.lang.String getQName(int)" class="org.apache.xerces.parsers.AbstractSAXParser$AttributesProxy" />
	<method signature="int getLength()" class="org.apache.xerces.parsers.AbstractSAXParser$AttributesProxy" />
	<method signature="boolean isSpecified(int)" class="org.apache.xerces.parsers.AbstractSAXParser$AttributesProxy" />
	<method signature="java.lang.String getURI(int)" class="org.apache.xerces.parsers.AbstractSAXParser$AttributesProxy" />
	<method signature="java.lang.String getName(int)" class="org.apache.xerces.parsers.AbstractSAXParser$AttributesProxy" />
	<method signature="void setAttributes(org.apache.xerces.xni.XMLAttributes)" class="org.apache.xerces.parsers.AbstractSAXParser$AttributesProxy" />
	<method signature="int getIndex(java.lang.String)" class="org.apache.xerces.parsers.AbstractSAXParser$AttributesProxy" />
	<method signature="boolean isSpecified(java.lang.String)" class="org.apache.xerces.parsers.AbstractSAXParser$AttributesProxy" />
	<method signature="java.lang.String getType(java.lang.String,java.lang.String)" class="org.apache.xerces.parsers.AbstractSAXParser$AttributesProxy" />
	<method signature="java.lang.String getValue(java.lang.String,java.lang.String)" class="org.apache.xerces.parsers.AbstractSAXParser$AttributesProxy" />
	<method signature="boolean isDeclared(java.lang.String)" class="org.apache.xerces.parsers.AbstractSAXParser$AttributesProxy" />
	<class name="org.jfree.chart.event.OverlayChangeEvent" />
	<method signature="void &lt;init&gt;(java.lang.Object)" class="org.jfree.chart.event.OverlayChangeEvent" />
	<class name="freemarker.template.Configuration" />
	<method signature="java.lang.String getDefaultEncoding()" class="freemarker.template.Configuration" />
	<method signature="void setSetting(java.lang.String,java.lang.String)" class="freemarker.template.Configuration" />
	<method signature="java.lang.String getVersionNumber()" class="freemarker.template.Configuration" />
	<method signature="void setWhitespaceStripping(boolean)" class="freemarker.template.Configuration" />
	<method signature="java.util.Set getSharedVariableNames()" class="freemarker.template.Configuration" />
	<method signature="void setLocalizedLookup(boolean)" class="freemarker.template.Configuration" />
	<method signature="void setIncompatibleEnhancements(java.lang.String)" class="freemarker.template.Configuration" />
	<method signature="void setDefaultConfiguration(freemarker.template.Configuration)" class="freemarker.template.Configuration" />
	<method signature="void setClassForTemplateLoading(java.lang.Class,java.lang.String)" class="freemarker.template.Configuration" />
	<method signature="void &lt;init&gt;()" class="freemarker.template.Configuration" />
	<method signature="void removeTemplateFromCache(java.lang.String,java.util.Locale,java.lang.String)" class="freemarker.template.Configuration" />
	<method signature="boolean getWhitespaceStripping()" class="freemarker.template.Configuration" />
	<method signature="void setServletContextForTemplateLoading(java.lang.Object,java.lang.String)" class="freemarker.template.Configuration" />
	<method signature="void removeAutoImport(java.lang.String)" class="freemarker.template.Configuration" />
	<method signature="void setTemplateUpdateDelay(int)" class="freemarker.template.Configuration" />
	<method signature="void setDirectoryForTemplateLoading(java.io.File)" class="freemarker.template.Configuration" />
	<method signature="int getParsedIncompatibleEnhancements()" class="freemarker.template.Configuration" />
	<method signature="void clearEncodingMap()" class="freemarker.template.Configuration" />
	<method signature="void setSharedVariable(java.lang.String,freemarker.template.TemplateModel)" class="freemarker.template.Configuration" />
	<method signature="void removeTemplateFromCache(java.lang.String,java.util.Locale)" class="freemarker.template.Configuration" />
	<method signature="void removeTemplateFromCache(java.lang.String,java.util.Locale,java.lang.String,boolean)" class="freemarker.template.Configuration" />
	<method signature="int getTagSyntax()" class="freemarker.template.Configuration" />
	<method signature="void setDefaultEncoding(java.lang.String)" class="freemarker.template.Configuration" />
	<method signature="void removeTemplateFromCache(java.lang.String)" class="freemarker.template.Configuration" />
	<method signature="void removeTemplateFromCache(java.lang.String,java.lang.String)" class="freemarker.template.Configuration" />
	<method signature="boolean getLocalizedLookup()" class="freemarker.template.Configuration" />
	<method signature="void setStrictSyntaxMode(boolean)" class="freemarker.template.Configuration" />
	<method signature="freemarker.template.Template getTemplate(java.lang.String,java.util.Locale,java.lang.String)" class="freemarker.template.Configuration" />
	<method signature="void clearTemplateCache()" class="freemarker.template.Configuration" />
	<method signature="java.lang.String getIncompatibleEnhancements()" class="freemarker.template.Configuration" />
	<method signature="void setEncoding(java.util.Locale,java.lang.String)" class="freemarker.template.Configuration" />
	<method signature="freemarker.template.Configuration getDefaultConfiguration()" class="freemarker.template.Configuration" />
	<method signature="freemarker.template.Template getTemplate(java.lang.String,java.util.Locale,java.lang.String,boolean)" class="freemarker.template.Configuration" />
	<method signature="freemarker.template.Template getTemplate(java.lang.String,java.util.Locale)" class="freemarker.template.Configuration" />
	<method signature="void setTemplateLoader(freemarker.cache.TemplateLoader)" class="freemarker.template.Configuration" />
	<method signature="void addAutoImport(java.lang.String,java.lang.String)" class="freemarker.template.Configuration" />
	<method signature="void removeAutoInclude(java.lang.String)" class="freemarker.template.Configuration" />
	<method signature="java.lang.Object clone()" class="freemarker.template.Configuration" />
	<method signature="freemarker.cache.TemplateLoader getTemplateLoader()" class="freemarker.template.Configuration" />
	<method signature="freemarker.template.Template getTemplate(java.lang.String,java.lang.String)" class="freemarker.template.Configuration" />
	<method signature="freemarker.template.Template getTemplate(java.lang.String)" class="freemarker.template.Configuration" />
	<method signature="void setCacheStorage(freemarker.cache.CacheStorage)" class="freemarker.template.Configuration" />
	<method signature="boolean getStrictSyntaxMode()" class="freemarker.template.Configuration" />
	<method signature="java.lang.String getEncoding(java.util.Locale)" class="freemarker.template.Configuration" />
	<method signature="void addAutoInclude(java.lang.String)" class="freemarker.template.Configuration" />
	<method signature="void setAllSharedVariables(freemarker.template.TemplateHashModelEx)" class="freemarker.template.Configuration" />
	<method signature="void setAutoIncludes(java.util.List)" class="freemarker.template.Configuration" />
	<method signature="void loadBuiltInEncodingMap()" class="freemarker.template.Configuration" />
	<method signature="freemarker.template.TemplateModel getSharedVariable(java.lang.String)" class="freemarker.template.Configuration" />
	<method signature="void setAutoImports(java.util.Map)" class="freemarker.template.Configuration" />
	<method signature="void setTagSyntax(int)" class="freemarker.template.Configuration" />
	<method signature="void clearSharedVariables()" class="freemarker.template.Configuration" />
	<method signature="void setSharedVariable(java.lang.String,java.lang.Object)" class="freemarker.template.Configuration" />
	<class name="org.apache.xerces.xs.XSModelGroupDefinition" />
	<method signature="org.apache.xerces.xs.XSModelGroup getModelGroup()" class="org.apache.xerces.xs.XSModelGroupDefinition" />
	<method signature="org.apache.xerces.xs.XSAnnotation getAnnotation()" class="org.apache.xerces.xs.XSModelGroupDefinition" />
	<method signature="org.apache.xerces.xs.XSObjectList getAnnotations()" class="org.apache.xerces.xs.XSModelGroupDefinition" />
	<class name="org.apache.xerces.util.DOMUtil" />
	<method signature="void setVisible(org.w3c.dom.Node)" class="org.apache.xerces.util.DOMUtil" />
	<method signature="org.w3c.dom.ls.LSException createLSException(short,java.lang.Throwable)" class="org.apache.xerces.util.DOMUtil" />
	<method signature="org.w3c.dom.Element getFirstVisibleChildElement(org.w3c.dom.Node)" class="org.apache.xerces.util.DOMUtil" />
	<method signature="org.w3c.dom.Attr getAttr(org.w3c.dom.Element,java.lang.String)" class="org.apache.xerces.util.DOMUtil" />
	<method signature="java.lang.String getAttrValue(org.w3c.dom.Element,java.lang.String)" class="org.apache.xerces.util.DOMUtil" />
	<method signature="java.lang.String getName(org.w3c.dom.Node)" class="org.apache.xerces.util.DOMUtil" />
	<method signature="org.w3c.dom.Element getLastVisibleChildElement(org.w3c.dom.Node,java.util.Hashtable)" class="org.apache.xerces.util.DOMUtil" />
	<method signature="org.w3c.dom.DOMException createDOMException(short,java.lang.Throwable)" class="org.apache.xerces.util.DOMUtil" />
	<method signature="java.lang.String getValue(org.w3c.dom.Attr)" class="org.apache.xerces.util.DOMUtil" />
	<method signature="java.lang.String getNamespaceURI(org.w3c.dom.Node)" class="org.apache.xerces.util.DOMUtil" />
	<method signature="org.w3c.dom.Element getNextVisibleSiblingElement(org.w3c.dom.Node)" class="org.apache.xerces.util.DOMUtil" />
	<method signature="java.lang.String getAnnotation(org.w3c.dom.Node)" class="org.apache.xerces.util.DOMUtil" />
	<method signature="org.w3c.dom.Element getFirstChildElementNS(org.w3c.dom.Node,java.lang.String[][])" class="org.apache.xerces.util.DOMUtil" />
	<method signature="void setHidden(org.w3c.dom.Node)" class="org.apache.xerces.util.DOMUtil" />
	<method signature="java.lang.String getSyntheticAnnotation(org.w3c.dom.Node)" class="org.apache.xerces.util.DOMUtil" />
	<method signature="org.w3c.dom.Element getFirstChildElementNS(org.w3c.dom.Node,java.lang.String,java.lang.String)" class="org.apache.xerces.util.DOMUtil" />
	<method signature="boolean isHidden(org.w3c.dom.Node,java.util.Hashtable)" class="org.apache.xerces.util.DOMUtil" />
	<method signature="java.lang.String getPrefix(org.w3c.dom.Node)" class="org.apache.xerces.util.DOMUtil" />
	<method signature="org.w3c.dom.Element getNextSiblingElementNS(org.w3c.dom.Node,java.lang.String,java.lang.String)" class="org.apache.xerces.util.DOMUtil" />
	<method signature="org.w3c.dom.Element getLastVisibleChildElement(org.w3c.dom.Node)" class="org.apache.xerces.util.DOMUtil" />
	<method signature="org.w3c.dom.Element getFirstChildElement(org.w3c.dom.Node,java.lang.String[])" class="org.apache.xerces.util.DOMUtil" />
	<method signature="org.w3c.dom.Element getLastChildElement(org.w3c.dom.Node,java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.util.DOMUtil" />
	<method signature="org.w3c.dom.Element getNextVisibleSiblingElement(org.w3c.dom.Node,java.util.Hashtable)" class="org.apache.xerces.util.DOMUtil" />
	<method signature="org.w3c.dom.Element getLastChildElementNS(org.w3c.dom.Node,java.lang.String[][])" class="org.apache.xerces.util.DOMUtil" />
	<method signature="org.w3c.dom.Element getFirstChildElement(org.w3c.dom.Node)" class="org.apache.xerces.util.DOMUtil" />
	<method signature="org.w3c.dom.Element getNextSiblingElement(org.w3c.dom.Node,java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.util.DOMUtil" />
	<method signature="boolean isHidden(org.w3c.dom.Node)" class="org.apache.xerces.util.DOMUtil" />
	<method signature="org.w3c.dom.Element getLastChildElementNS(org.w3c.dom.Node,java.lang.String,java.lang.String)" class="org.apache.xerces.util.DOMUtil" />
	<method signature="java.lang.String getAttrValueNS(org.w3c.dom.Element,java.lang.String,java.lang.String)" class="org.apache.xerces.util.DOMUtil" />
	<method signature="void copyInto(org.w3c.dom.Node,org.w3c.dom.Node)" class="org.apache.xerces.util.DOMUtil" />
	<method signature="org.w3c.dom.Element getLastChildElement(org.w3c.dom.Node,java.lang.String)" class="org.apache.xerces.util.DOMUtil" />
	<method signature="org.w3c.dom.Attr getAttrNS(org.w3c.dom.Element,java.lang.String,java.lang.String)" class="org.apache.xerces.util.DOMUtil" />
	<method signature="void setHidden(org.w3c.dom.Node,java.util.Hashtable)" class="org.apache.xerces.util.DOMUtil" />
	<method signature="org.w3c.dom.Element getNextSiblingElementNS(org.w3c.dom.Node,java.lang.String[][])" class="org.apache.xerces.util.DOMUtil" />
	<method signature="org.w3c.dom.Element getRoot(org.w3c.dom.Document)" class="org.apache.xerces.util.DOMUtil" />
	<method signature="org.w3c.dom.Element getNextSiblingElement(org.w3c.dom.Node,java.lang.String)" class="org.apache.xerces.util.DOMUtil" />
	<method signature="org.w3c.dom.Attr[] getAttrs(org.w3c.dom.Element)" class="org.apache.xerces.util.DOMUtil" />
	<method signature="org.w3c.dom.Element getLastChildElement(org.w3c.dom.Node)" class="org.apache.xerces.util.DOMUtil" />
	<method signature="org.w3c.dom.Element getNextSiblingElement(org.w3c.dom.Node,java.lang.String[])" class="org.apache.xerces.util.DOMUtil" />
	<method signature="org.w3c.dom.Element getFirstVisibleChildElement(org.w3c.dom.Node,java.util.Hashtable)" class="org.apache.xerces.util.DOMUtil" />
	<method signature="java.lang.String getLocalName(org.w3c.dom.Node)" class="org.apache.xerces.util.DOMUtil" />
	<method signature="void setVisible(org.w3c.dom.Node,java.util.Hashtable)" class="org.apache.xerces.util.DOMUtil" />
	<method signature="java.lang.String getChildText(org.w3c.dom.Node)" class="org.apache.xerces.util.DOMUtil" />
	<method signature="org.w3c.dom.Element getNextSiblingElement(org.w3c.dom.Node)" class="org.apache.xerces.util.DOMUtil" />
	<method signature="org.w3c.dom.Element getLastChildElement(org.w3c.dom.Node,java.lang.String[])" class="org.apache.xerces.util.DOMUtil" />
	<method signature="org.w3c.dom.Element getFirstChildElement(org.w3c.dom.Node,java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.util.DOMUtil" />
	<method signature="org.w3c.dom.Element getParent(org.w3c.dom.Element)" class="org.apache.xerces.util.DOMUtil" />
	<method signature="org.w3c.dom.Document getDocument(org.w3c.dom.Node)" class="org.apache.xerces.util.DOMUtil" />
	<method signature="org.w3c.dom.Element getFirstChildElement(org.w3c.dom.Node,java.lang.String)" class="org.apache.xerces.util.DOMUtil" />
	<class name="org.jfree.chart.labels.StandardPieSectionLabelGenerator" />
	<method signature="void &lt;init&gt;(java.util.Locale)" class="org.jfree.chart.labels.StandardPieSectionLabelGenerator" />
	<method signature="java.text.AttributedString getAttributedLabel(int)" class="org.jfree.chart.labels.StandardPieSectionLabelGenerator" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.labels.StandardPieSectionLabelGenerator" />
	<method signature="void &lt;init&gt;(java.lang.String,java.util.Locale)" class="org.jfree.chart.labels.StandardPieSectionLabelGenerator" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.labels.StandardPieSectionLabelGenerator" />
	<method signature="java.lang.String generateSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)" class="org.jfree.chart.labels.StandardPieSectionLabelGenerator" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.labels.StandardPieSectionLabelGenerator" />
	<method signature="java.text.AttributedString generateAttributedSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)" class="org.jfree.chart.labels.StandardPieSectionLabelGenerator" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.chart.labels.StandardPieSectionLabelGenerator" />
	<method signature="void &lt;init&gt;(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" class="org.jfree.chart.labels.StandardPieSectionLabelGenerator" />
	<method signature="void setAttributedLabel(int,java.text.AttributedString)" class="org.jfree.chart.labels.StandardPieSectionLabelGenerator" />
	<class name="org.jfree.data.function.NormalDistributionFunction2D" />
	<method signature="double getStandardDeviation()" class="org.jfree.data.function.NormalDistributionFunction2D" />
	<method signature="int hashCode()" class="org.jfree.data.function.NormalDistributionFunction2D" />
	<method signature="double getValue(double)" class="org.jfree.data.function.NormalDistributionFunction2D" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.function.NormalDistributionFunction2D" />
	<method signature="double getMean()" class="org.jfree.data.function.NormalDistributionFunction2D" />
	<method signature="void &lt;init&gt;(double,double)" class="org.jfree.data.function.NormalDistributionFunction2D" />
	<class name="com.hexidec.ekit.action.CustomAction" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="com.hexidec.ekit.action.CustomAction" />
	<method signature="void &lt;init&gt;(com.hexidec.ekit.EkitCore,java.lang.String,javax.swing.text.html.HTML$Tag,java.util.Hashtable)" class="com.hexidec.ekit.action.CustomAction" />
	<method signature="void &lt;init&gt;(com.hexidec.ekit.EkitCore,java.lang.String,javax.swing.text.html.HTML$Tag)" class="com.hexidec.ekit.action.CustomAction" />
	<class name="org.apache.commons.lang3.ClassUtils$Interfaces" />
	<method signature="org.apache.commons.lang3.ClassUtils$Interfaces[] values()" class="org.apache.commons.lang3.ClassUtils$Interfaces" />
	<method signature="org.apache.commons.lang3.ClassUtils$Interfaces valueOf(java.lang.String)" class="org.apache.commons.lang3.ClassUtils$Interfaces" />
	<class name="com.google.zxing.MultiFormatReader" />
	<method signature="com.google.zxing.Result decode(com.google.zxing.BinaryBitmap)" class="com.google.zxing.MultiFormatReader" />
	<method signature="void reset()" class="com.google.zxing.MultiFormatReader" />
	<method signature="com.google.zxing.Result decodeWithState(com.google.zxing.BinaryBitmap)" class="com.google.zxing.MultiFormatReader" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.MultiFormatReader" />
	<method signature="com.google.zxing.Result decode(com.google.zxing.BinaryBitmap,java.util.Map)" class="com.google.zxing.MultiFormatReader" />
	<method signature="void setHints(java.util.Map)" class="com.google.zxing.MultiFormatReader" />
	<class name="org.jfree.chart.axis.Axis" />
	<method signature="java.lang.String getLabel()" class="org.jfree.chart.axis.Axis" />
	<method signature="void addChangeListener(org.jfree.chart.event.AxisChangeListener)" class="org.jfree.chart.axis.Axis" />
	<method signature="java.awt.Paint getTickLabelPaint()" class="org.jfree.chart.axis.Axis" />
	<method signature="boolean isMinorTickMarksVisible()" class="org.jfree.chart.axis.Axis" />
	<method signature="boolean hasListener(java.util.EventListener)" class="org.jfree.chart.axis.Axis" />
	<method signature="void setTickLabelFont(java.awt.Font)" class="org.jfree.chart.axis.Axis" />
	<method signature="void setPlot(org.jfree.chart.plot.Plot)" class="org.jfree.chart.axis.Axis" />
	<method signature="org.jfree.ui.RectangleInsets getLabelInsets()" class="org.jfree.chart.axis.Axis" />
	<method signature="java.awt.Paint getTickMarkPaint()" class="org.jfree.chart.axis.Axis" />
	<method signature="void setTickLabelsVisible(boolean)" class="org.jfree.chart.axis.Axis" />
	<method signature="void setLabelAngle(double)" class="org.jfree.chart.axis.Axis" />
	<method signature="boolean isVisible()" class="org.jfree.chart.axis.Axis" />
	<method signature="java.awt.Paint getAxisLinePaint()" class="org.jfree.chart.axis.Axis" />
	<method signature="void setLabelInsets(org.jfree.ui.RectangleInsets)" class="org.jfree.chart.axis.Axis" />
	<method signature="void setTickLabelPaint(java.awt.Paint)" class="org.jfree.chart.axis.Axis" />
	<method signature="float getTickMarkInsideLength()" class="org.jfree.chart.axis.Axis" />
	<method signature="java.awt.Paint getLabelPaint()" class="org.jfree.chart.axis.Axis" />
	<method signature="boolean isTickLabelsVisible()" class="org.jfree.chart.axis.Axis" />
	<method signature="void setLabelInsets(org.jfree.ui.RectangleInsets,boolean)" class="org.jfree.chart.axis.Axis" />
	<method signature="java.awt.Stroke getAxisLineStroke()" class="org.jfree.chart.axis.Axis" />
	<method signature="void setLabelPaint(java.awt.Paint)" class="org.jfree.chart.axis.Axis" />
	<method signature="java.awt.Font getLabelFont()" class="org.jfree.chart.axis.Axis" />
	<method signature="org.jfree.chart.plot.Plot getPlot()" class="org.jfree.chart.axis.Axis" />
	<method signature="float getMinorTickMarkInsideLength()" class="org.jfree.chart.axis.Axis" />
	<method signature="org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.axis.Axis" />
	<method signature="java.awt.Stroke getTickMarkStroke()" class="org.jfree.chart.axis.Axis" />
	<method signature="void setMinorTickMarksVisible(boolean)" class="org.jfree.chart.axis.Axis" />
	<method signature="double getLabelAngle()" class="org.jfree.chart.axis.Axis" />
	<method signature="void setAxisLinePaint(java.awt.Paint)" class="org.jfree.chart.axis.Axis" />
	<method signature="void setTickLabelInsets(org.jfree.ui.RectangleInsets)" class="org.jfree.chart.axis.Axis" />
	<method signature="void setTickMarkPaint(java.awt.Paint)" class="org.jfree.chart.axis.Axis" />
	<method signature="java.awt.Font getTickLabelFont()" class="org.jfree.chart.axis.Axis" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.axis.Axis" />
	<method signature="void configure()" class="org.jfree.chart.axis.Axis" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.axis.Axis" />
	<method signature="void setVisible(boolean)" class="org.jfree.chart.axis.Axis" />
	<method signature="void setTickMarkInsideLength(float)" class="org.jfree.chart.axis.Axis" />
	<method signature="void setMinorTickMarkInsideLength(float)" class="org.jfree.chart.axis.Axis" />
	<method signature="void setTickMarkOutsideLength(float)" class="org.jfree.chart.axis.Axis" />
	<method signature="void setTickMarkStroke(java.awt.Stroke)" class="org.jfree.chart.axis.Axis" />
	<method signature="void setAxisLineVisible(boolean)" class="org.jfree.chart.axis.Axis" />
	<method signature="double getFixedDimension()" class="org.jfree.chart.axis.Axis" />
	<method signature="void setAxisLineStroke(java.awt.Stroke)" class="org.jfree.chart.axis.Axis" />
	<method signature="void setLabelFont(java.awt.Font)" class="org.jfree.chart.axis.Axis" />
	<method signature="void setFixedDimension(double)" class="org.jfree.chart.axis.Axis" />
	<method signature="void setLabel(java.lang.String)" class="org.jfree.chart.axis.Axis" />
	<method signature="org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge,org.jfree.chart.axis.AxisSpace)" class="org.jfree.chart.axis.Axis" />
	<method signature="boolean isTickMarksVisible()" class="org.jfree.chart.axis.Axis" />
	<method signature="float getMinorTickMarkOutsideLength()" class="org.jfree.chart.axis.Axis" />
	<method signature="void setMinorTickMarkOutsideLength(float)" class="org.jfree.chart.axis.Axis" />
	<method signature="java.util.List refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.axis.Axis" />
	<method signature="float getTickMarkOutsideLength()" class="org.jfree.chart.axis.Axis" />
	<method signature="void setTickMarksVisible(boolean)" class="org.jfree.chart.axis.Axis" />
	<method signature="boolean isAxisLineVisible()" class="org.jfree.chart.axis.Axis" />
	<method signature="org.jfree.ui.RectangleInsets getTickLabelInsets()" class="org.jfree.chart.axis.Axis" />
	<method signature="void removeChangeListener(org.jfree.chart.event.AxisChangeListener)" class="org.jfree.chart.axis.Axis" />
	<class name="javax.xml.bind.helpers.AbstractUnmarshallerImpl" />
	<method signature="void setEventHandler(javax.xml.bind.ValidationEventHandler)" class="javax.xml.bind.helpers.AbstractUnmarshallerImpl" />
	<method signature="javax.xml.bind.ValidationEventHandler getEventHandler()" class="javax.xml.bind.helpers.AbstractUnmarshallerImpl" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="javax.xml.bind.helpers.AbstractUnmarshallerImpl" />
	<method signature="void setValidating(boolean)" class="javax.xml.bind.helpers.AbstractUnmarshallerImpl" />
	<method signature="java.lang.Object unmarshal(java.net.URL)" class="javax.xml.bind.helpers.AbstractUnmarshallerImpl" />
	<method signature="boolean isValidating()" class="javax.xml.bind.helpers.AbstractUnmarshallerImpl" />
	<method signature="void &lt;init&gt;()" class="javax.xml.bind.helpers.AbstractUnmarshallerImpl" />
	<method signature="java.lang.Object unmarshal(java.io.File)" class="javax.xml.bind.helpers.AbstractUnmarshallerImpl" />
	<method signature="java.lang.Object unmarshal(org.xml.sax.InputSource)" class="javax.xml.bind.helpers.AbstractUnmarshallerImpl" />
	<method signature="java.lang.Object unmarshal(java.io.InputStream)" class="javax.xml.bind.helpers.AbstractUnmarshallerImpl" />
	<method signature="java.lang.Object unmarshal(javax.xml.transform.Source)" class="javax.xml.bind.helpers.AbstractUnmarshallerImpl" />
	<method signature="java.lang.Object getProperty(java.lang.String)" class="javax.xml.bind.helpers.AbstractUnmarshallerImpl" />
	<class name="com.bric.awt.PaintUtils" />
	<method signature="void paintFocus(java.awt.Graphics2D,java.awt.Shape,int)" class="com.bric.awt.PaintUtils" />
	<method signature="void &lt;init&gt;()" class="com.bric.awt.PaintUtils" />
	<method signature="java.awt.Color getFocusRingColor()" class="com.bric.awt.PaintUtils" />
	<method signature="void drawBevel(java.awt.Graphics,java.awt.Rectangle)" class="com.bric.awt.PaintUtils" />
	<class name="org.apache.xerces.xni.parser.XMLPullParserConfiguration" />
	<method signature="boolean parse(boolean)" class="org.apache.xerces.xni.parser.XMLPullParserConfiguration" />
	<method signature="void setInputSource(org.apache.xerces.xni.parser.XMLInputSource)" class="org.apache.xerces.xni.parser.XMLPullParserConfiguration" />
	<method signature="void cleanup()" class="org.apache.xerces.xni.parser.XMLPullParserConfiguration" />
	<class name="com.google.zxing.datamatrix.decoder.Decoder" />
	<method signature="com.google.zxing.common.DecoderResult decode(com.google.zxing.common.BitMatrix)" class="com.google.zxing.datamatrix.decoder.Decoder" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.datamatrix.decoder.Decoder" />
	<method signature="com.google.zxing.common.DecoderResult decode(boolean[][])" class="com.google.zxing.datamatrix.decoder.Decoder" />
	<class name="org.apache.xerces.util.SymbolTable" />
	<method signature="boolean containsSymbol(char[],int,int)" class="org.apache.xerces.util.SymbolTable" />
	<method signature="void &lt;init&gt;(int)" class="org.apache.xerces.util.SymbolTable" />
	<method signature="boolean containsSymbol(java.lang.String)" class="org.apache.xerces.util.SymbolTable" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.util.SymbolTable" />
	<method signature="int hash(char[],int,int)" class="org.apache.xerces.util.SymbolTable" />
	<method signature="java.lang.String addSymbol(char[],int,int)" class="org.apache.xerces.util.SymbolTable" />
	<method signature="int hash(java.lang.String)" class="org.apache.xerces.util.SymbolTable" />
	<method signature="void &lt;init&gt;(int,float)" class="org.apache.xerces.util.SymbolTable" />
	<method signature="java.lang.String addSymbol(java.lang.String)" class="org.apache.xerces.util.SymbolTable" />
	<class name="org.apache.html.dom.HTMLSelectElementImpl" />
	<method signature="java.lang.String getName()" class="org.apache.html.dom.HTMLSelectElementImpl" />
	<method signature="org.w3c.dom.NodeList getChildNodes()" class="org.apache.html.dom.HTMLSelectElementImpl" />
	<method signature="int getSize()" class="org.apache.html.dom.HTMLSelectElementImpl" />
	<method signature="org.w3c.dom.Node cloneNode(boolean)" class="org.apache.html.dom.HTMLSelectElementImpl" />
	<method signature="int getSelectedIndex()" class="org.apache.html.dom.HTMLSelectElementImpl" />
	<method signature="int getLength()" class="org.apache.html.dom.HTMLSelectElementImpl" />
	<method signature="void setSize(int)" class="org.apache.html.dom.HTMLSelectElementImpl" />
	<method signature="boolean getDisabled()" class="org.apache.html.dom.HTMLSelectElementImpl" />
	<method signature="void remove(int)" class="org.apache.html.dom.HTMLSelectElementImpl" />
	<method signature="void add(org.w3c.dom.html.HTMLElement,org.w3c.dom.html.HTMLElement)" class="org.apache.html.dom.HTMLSelectElementImpl" />
	<method signature="int getTabIndex()" class="org.apache.html.dom.HTMLSelectElementImpl" />
	<method signature="org.w3c.dom.html.HTMLCollection getOptions()" class="org.apache.html.dom.HTMLSelectElementImpl" />
	<method signature="void setName(java.lang.String)" class="org.apache.html.dom.HTMLSelectElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLSelectElementImpl" />
	<method signature="void setValue(java.lang.String)" class="org.apache.html.dom.HTMLSelectElementImpl" />
	<method signature="void setSelectedIndex(int)" class="org.apache.html.dom.HTMLSelectElementImpl" />
	<method signature="boolean getMultiple()" class="org.apache.html.dom.HTMLSelectElementImpl" />
	<method signature="void setTabIndex(int)" class="org.apache.html.dom.HTMLSelectElementImpl" />
	<method signature="void setMultiple(boolean)" class="org.apache.html.dom.HTMLSelectElementImpl" />
	<method signature="void setDisabled(boolean)" class="org.apache.html.dom.HTMLSelectElementImpl" />
	<method signature="java.lang.String getValue()" class="org.apache.html.dom.HTMLSelectElementImpl" />
	<method signature="void blur()" class="org.apache.html.dom.HTMLSelectElementImpl" />
	<method signature="void focus()" class="org.apache.html.dom.HTMLSelectElementImpl" />
	<method signature="java.lang.String getType()" class="org.apache.html.dom.HTMLSelectElementImpl" />
	<class name="org.jfree.chart.axis.PeriodAxisLabelInfo" />
	<method signature="java.lang.Class getPeriodClass()" class="org.jfree.chart.axis.PeriodAxisLabelInfo" />
	<method signature="java.awt.Stroke getDividerStroke()" class="org.jfree.chart.axis.PeriodAxisLabelInfo" />
	<method signature="int hashCode()" class="org.jfree.chart.axis.PeriodAxisLabelInfo" />
	<method signature="org.jfree.data.time.RegularTimePeriod createInstance(java.util.Date,java.util.TimeZone)" class="org.jfree.chart.axis.PeriodAxisLabelInfo" />
	<method signature="java.text.DateFormat getDateFormat()" class="org.jfree.chart.axis.PeriodAxisLabelInfo" />
	<method signature="java.awt.Paint getLabelPaint()" class="org.jfree.chart.axis.PeriodAxisLabelInfo" />
	<method signature="org.jfree.ui.RectangleInsets getPadding()" class="org.jfree.chart.axis.PeriodAxisLabelInfo" />
	<method signature="org.jfree.data.time.RegularTimePeriod createInstance(java.util.Date,java.util.TimeZone,java.util.Locale)" class="org.jfree.chart.axis.PeriodAxisLabelInfo" />
	<method signature="boolean getDrawDividers()" class="org.jfree.chart.axis.PeriodAxisLabelInfo" />
	<method signature="void &lt;init&gt;(java.lang.Class,java.text.DateFormat,org.jfree.ui.RectangleInsets,java.awt.Font,java.awt.Paint,boolean,java.awt.Stroke,java.awt.Paint)" class="org.jfree.chart.axis.PeriodAxisLabelInfo" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.axis.PeriodAxisLabelInfo" />
	<method signature="java.awt.Font getLabelFont()" class="org.jfree.chart.axis.PeriodAxisLabelInfo" />
	<method signature="java.awt.Paint getDividerPaint()" class="org.jfree.chart.axis.PeriodAxisLabelInfo" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.axis.PeriodAxisLabelInfo" />
	<method signature="void &lt;init&gt;(java.lang.Class,java.text.DateFormat)" class="org.jfree.chart.axis.PeriodAxisLabelInfo" />
	<class name="org.apache.wml.dom.WMLHeadElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.wml.dom.WMLDocumentImpl,java.lang.String)" class="org.apache.wml.dom.WMLHeadElementImpl" />
	<method signature="java.lang.String getId()" class="org.apache.wml.dom.WMLHeadElementImpl" />
	<method signature="java.lang.String getClassName()" class="org.apache.wml.dom.WMLHeadElementImpl" />
	<method signature="void setClassName(java.lang.String)" class="org.apache.wml.dom.WMLHeadElementImpl" />
	<method signature="void setId(java.lang.String)" class="org.apache.wml.dom.WMLHeadElementImpl" />
	<class name="fi.iki.elonen.NanoHTTPD$Cookie" />
	<method signature="java.lang.String getHTTPHeader()" class="fi.iki.elonen.NanoHTTPD$Cookie" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="fi.iki.elonen.NanoHTTPD$Cookie" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String)" class="fi.iki.elonen.NanoHTTPD$Cookie" />
	<method signature="java.lang.String getHTTPTime(int)" class="fi.iki.elonen.NanoHTTPD$Cookie" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,int)" class="fi.iki.elonen.NanoHTTPD$Cookie" />
	<class name="org.jfree.base.ClassPathDebugger" />
	<method signature="void &lt;init&gt;()" class="org.jfree.base.ClassPathDebugger" />
	<method signature="void main(java.lang.String[])" class="org.jfree.base.ClassPathDebugger" />
	<class name="org.jfree.chart.urls.StandardXYURLGenerator" />
	<method signature="java.lang.String generateURL(org.jfree.data.xy.XYDataset,int,int)" class="org.jfree.chart.urls.StandardXYURLGenerator" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.urls.StandardXYURLGenerator" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.urls.StandardXYURLGenerator" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.chart.urls.StandardXYURLGenerator" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String)" class="org.jfree.chart.urls.StandardXYURLGenerator" />
	<class name="org.apache.xerces.parsers.DOMASBuilderImpl" />
	<method signature="org.apache.xerces.dom3.as.ASModel parseASInputSource(org.w3c.dom.ls.LSInput)" class="org.apache.xerces.parsers.DOMASBuilderImpl" />
	<method signature="void &lt;init&gt;(org.apache.xerces.parsers.XMLGrammarCachingConfiguration)" class="org.apache.xerces.parsers.DOMASBuilderImpl" />
	<method signature="void setAbstractSchema(org.apache.xerces.dom3.as.ASModel)" class="org.apache.xerces.parsers.DOMASBuilderImpl" />
	<method signature="org.apache.xerces.dom3.as.ASModel parseASURI(java.lang.String)" class="org.apache.xerces.parsers.DOMASBuilderImpl" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable)" class="org.apache.xerces.parsers.DOMASBuilderImpl" />
	<method signature="org.apache.xerces.dom3.as.ASModel getAbstractSchema()" class="org.apache.xerces.parsers.DOMASBuilderImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.parsers.DOMASBuilderImpl" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable,org.apache.xerces.xni.grammars.XMLGrammarPool)" class="org.apache.xerces.parsers.DOMASBuilderImpl" />
	<class name="org.jfree.data.xml.KeyHandler" />
	<method signature="void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" class="org.jfree.data.xml.KeyHandler" />
	<method signature="void endElement(java.lang.String,java.lang.String,java.lang.String)" class="org.jfree.data.xml.KeyHandler" />
	<method signature="void characters(char[],int,int)" class="org.jfree.data.xml.KeyHandler" />
	<method signature="void &lt;init&gt;(org.jfree.data.xml.RootHandler,org.jfree.data.xml.ItemHandler)" class="org.jfree.data.xml.KeyHandler" />
	<class name="org.w3c.dom.html.HTMLTextAreaElement" />
	<method signature="void setAccessKey(java.lang.String)" class="org.w3c.dom.html.HTMLTextAreaElement" />
	<method signature="java.lang.String getName()" class="org.w3c.dom.html.HTMLTextAreaElement" />
	<method signature="void setValue(java.lang.String)" class="org.w3c.dom.html.HTMLTextAreaElement" />
	<method signature="int getCols()" class="org.w3c.dom.html.HTMLTextAreaElement" />
	<method signature="void setCols(int)" class="org.w3c.dom.html.HTMLTextAreaElement" />
	<method signature="boolean getReadOnly()" class="org.w3c.dom.html.HTMLTextAreaElement" />
	<method signature="void setReadOnly(boolean)" class="org.w3c.dom.html.HTMLTextAreaElement" />
	<method signature="void setRows(int)" class="org.w3c.dom.html.HTMLTextAreaElement" />
	<method signature="void setTabIndex(int)" class="org.w3c.dom.html.HTMLTextAreaElement" />
	<method signature="java.lang.String getDefaultValue()" class="org.w3c.dom.html.HTMLTextAreaElement" />
	<method signature="boolean getDisabled()" class="org.w3c.dom.html.HTMLTextAreaElement" />
	<method signature="void setDisabled(boolean)" class="org.w3c.dom.html.HTMLTextAreaElement" />
	<method signature="java.lang.String getValue()" class="org.w3c.dom.html.HTMLTextAreaElement" />
	<method signature="void blur()" class="org.w3c.dom.html.HTMLTextAreaElement" />
	<method signature="void focus()" class="org.w3c.dom.html.HTMLTextAreaElement" />
	<method signature="int getTabIndex()" class="org.w3c.dom.html.HTMLTextAreaElement" />
	<method signature="void setDefaultValue(java.lang.String)" class="org.w3c.dom.html.HTMLTextAreaElement" />
	<method signature="void setName(java.lang.String)" class="org.w3c.dom.html.HTMLTextAreaElement" />
	<method signature="java.lang.String getType()" class="org.w3c.dom.html.HTMLTextAreaElement" />
	<method signature="void select()" class="org.w3c.dom.html.HTMLTextAreaElement" />
	<method signature="java.lang.String getAccessKey()" class="org.w3c.dom.html.HTMLTextAreaElement" />
	<method signature="org.w3c.dom.html.HTMLFormElement getForm()" class="org.w3c.dom.html.HTMLTextAreaElement" />
	<method signature="int getRows()" class="org.w3c.dom.html.HTMLTextAreaElement" />
	<class name="org.jfree.base.config.PropertyFileConfiguration" />
	<method signature="void load(java.lang.String)" class="org.jfree.base.config.PropertyFileConfiguration" />
	<method signature="void load(java.lang.String,java.lang.Class)" class="org.jfree.base.config.PropertyFileConfiguration" />
	<method signature="void &lt;init&gt;()" class="org.jfree.base.config.PropertyFileConfiguration" />
	<method signature="void load(java.io.InputStream)" class="org.jfree.base.config.PropertyFileConfiguration" />
	<class name="org.apache.xerces.impl.xs.identity.Selector$XPath" />
	<method signature="void &lt;init&gt;(java.lang.String,org.apache.xerces.util.SymbolTable,org.apache.xerces.xni.NamespaceContext)" class="org.apache.xerces.impl.xs.identity.Selector$XPath" />
	<class name="org.apache.xerces.parsers.IntegratedParserConfiguration" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable)" class="org.apache.xerces.parsers.IntegratedParserConfiguration" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable,org.apache.xerces.xni.grammars.XMLGrammarPool,org.apache.xerces.xni.parser.XMLComponentManager)" class="org.apache.xerces.parsers.IntegratedParserConfiguration" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.parsers.IntegratedParserConfiguration" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable,org.apache.xerces.xni.grammars.XMLGrammarPool)" class="org.apache.xerces.parsers.IntegratedParserConfiguration" />
	<class name="org.jfree.data.xy.DefaultXYDataset" />
	<method signature="double getXValue(int,int)" class="org.jfree.data.xy.DefaultXYDataset" />
	<method signature="int hashCode()" class="org.jfree.data.xy.DefaultXYDataset" />
	<method signature="java.lang.Number getX(int,int)" class="org.jfree.data.xy.DefaultXYDataset" />
	<method signature="java.lang.Number getY(int,int)" class="org.jfree.data.xy.DefaultXYDataset" />
	<method signature="int getSeriesCount()" class="org.jfree.data.xy.DefaultXYDataset" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.xy.DefaultXYDataset" />
	<method signature="java.lang.Comparable getSeriesKey(int)" class="org.jfree.data.xy.DefaultXYDataset" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.xy.DefaultXYDataset" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.xy.DefaultXYDataset" />
	<method signature="int indexOf(java.lang.Comparable)" class="org.jfree.data.xy.DefaultXYDataset" />
	<method signature="org.jfree.data.DomainOrder getDomainOrder()" class="org.jfree.data.xy.DefaultXYDataset" />
	<method signature="void addSeries(java.lang.Comparable,double[][])" class="org.jfree.data.xy.DefaultXYDataset" />
	<method signature="void removeSeries(java.lang.Comparable)" class="org.jfree.data.xy.DefaultXYDataset" />
	<method signature="int getItemCount(int)" class="org.jfree.data.xy.DefaultXYDataset" />
	<method signature="double getYValue(int,int)" class="org.jfree.data.xy.DefaultXYDataset" />
	<class name="org.apache.commons.lang3.StringEscapeUtils" />
	<method signature="java.lang.String unescapeHtml4(java.lang.String)" class="org.apache.commons.lang3.StringEscapeUtils" />
	<method signature="java.lang.String unescapeHtml3(java.lang.String)" class="org.apache.commons.lang3.StringEscapeUtils" />
	<method signature="java.lang.String unescapeJava(java.lang.String)" class="org.apache.commons.lang3.StringEscapeUtils" />
	<method signature="java.lang.String escapeJson(java.lang.String)" class="org.apache.commons.lang3.StringEscapeUtils" />
	<method signature="java.lang.String unescapeXml(java.lang.String)" class="org.apache.commons.lang3.StringEscapeUtils" />
	<method signature="java.lang.String escapeJava(java.lang.String)" class="org.apache.commons.lang3.StringEscapeUtils" />
	<method signature="java.lang.String escapeEcmaScript(java.lang.String)" class="org.apache.commons.lang3.StringEscapeUtils" />
	<method signature="java.lang.String unescapeEcmaScript(java.lang.String)" class="org.apache.commons.lang3.StringEscapeUtils" />
	<method signature="java.lang.String escapeXml(java.lang.String)" class="org.apache.commons.lang3.StringEscapeUtils" />
	<method signature="java.lang.String escapeHtml3(java.lang.String)" class="org.apache.commons.lang3.StringEscapeUtils" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.StringEscapeUtils" />
	<method signature="java.lang.String unescapeCsv(java.lang.String)" class="org.apache.commons.lang3.StringEscapeUtils" />
	<method signature="java.lang.String unescapeJson(java.lang.String)" class="org.apache.commons.lang3.StringEscapeUtils" />
	<method signature="java.lang.String escapeXml10(java.lang.String)" class="org.apache.commons.lang3.StringEscapeUtils" />
	<method signature="java.lang.String escapeCsv(java.lang.String)" class="org.apache.commons.lang3.StringEscapeUtils" />
	<method signature="java.lang.String escapeHtml4(java.lang.String)" class="org.apache.commons.lang3.StringEscapeUtils" />
	<method signature="java.lang.String escapeXml11(java.lang.String)" class="org.apache.commons.lang3.StringEscapeUtils" />
	<class name="org.apache.wml.WMLNoopElement" />
	<class name="org.apache.xerces.xs.XSModel" />
	<method signature="org.apache.xerces.xs.XSAttributeDeclaration getAttributeDeclaration(java.lang.String,java.lang.String)" class="org.apache.xerces.xs.XSModel" />
	<method signature="org.apache.xerces.xs.XSNamespaceItemList getNamespaceItems()" class="org.apache.xerces.xs.XSModel" />
	<method signature="org.apache.xerces.xs.XSNotationDeclaration getNotationDeclaration(java.lang.String,java.lang.String)" class="org.apache.xerces.xs.XSModel" />
	<method signature="org.apache.xerces.xs.XSModelGroupDefinition getModelGroupDefinition(java.lang.String,java.lang.String)" class="org.apache.xerces.xs.XSModel" />
	<method signature="org.apache.xerces.xs.XSNamedMap getComponentsByNamespace(short,java.lang.String)" class="org.apache.xerces.xs.XSModel" />
	<method signature="org.apache.xerces.xs.XSObjectList getAnnotations()" class="org.apache.xerces.xs.XSModel" />
	<method signature="org.apache.xerces.xs.XSAttributeGroupDefinition getAttributeGroup(java.lang.String,java.lang.String)" class="org.apache.xerces.xs.XSModel" />
	<method signature="org.apache.xerces.xs.XSNamedMap getComponents(short)" class="org.apache.xerces.xs.XSModel" />
	<method signature="org.apache.xerces.xs.StringList getNamespaces()" class="org.apache.xerces.xs.XSModel" />
	<method signature="org.apache.xerces.xs.XSObjectList getSubstitutionGroup(org.apache.xerces.xs.XSElementDeclaration)" class="org.apache.xerces.xs.XSModel" />
	<method signature="org.apache.xerces.xs.XSIDCDefinition getIDCDefinition(java.lang.String,java.lang.String)" class="org.apache.xerces.xs.XSModel" />
	<method signature="org.apache.xerces.xs.XSElementDeclaration getElementDeclaration(java.lang.String,java.lang.String)" class="org.apache.xerces.xs.XSModel" />
	<method signature="org.apache.xerces.xs.XSTypeDefinition getTypeDefinition(java.lang.String,java.lang.String)" class="org.apache.xerces.xs.XSModel" />
	<class name="com.toedter.components.LocaleEditor" />
	<method signature="void &lt;init&gt;()" class="com.toedter.components.LocaleEditor" />
	<method signature="java.lang.String[] getTags()" class="com.toedter.components.LocaleEditor" />
	<method signature="void setAsText(java.lang.String)" class="com.toedter.components.LocaleEditor" />
	<method signature="java.lang.String getAsText()" class="com.toedter.components.LocaleEditor" />
	<class name="org.apache.xerces.dom.DeferredEntityReferenceImpl" />
	<method signature="int getNodeIndex()" class="org.apache.xerces.dom.DeferredEntityReferenceImpl" />
	<class name="org.apache.commons.lang3.builder.EqualsBuilder" />
	<method signature="boolean isEquals()" class="org.apache.commons.lang3.builder.EqualsBuilder" />
	<method signature="void reset()" class="org.apache.commons.lang3.builder.EqualsBuilder" />
	<method signature="org.apache.commons.lang3.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)" class="org.apache.commons.lang3.builder.EqualsBuilder" />
	<method signature="boolean reflectionEquals(java.lang.Object,java.lang.Object,java.lang.String[])" class="org.apache.commons.lang3.builder.EqualsBuilder" />
	<method signature="org.apache.commons.lang3.builder.EqualsBuilder append(int,int)" class="org.apache.commons.lang3.builder.EqualsBuilder" />
	<method signature="org.apache.commons.lang3.builder.EqualsBuilder append(boolean[],boolean[])" class="org.apache.commons.lang3.builder.EqualsBuilder" />
	<method signature="org.apache.commons.lang3.builder.EqualsBuilder append(byte[],byte[])" class="org.apache.commons.lang3.builder.EqualsBuilder" />
	<method signature="org.apache.commons.lang3.builder.EqualsBuilder append(byte,byte)" class="org.apache.commons.lang3.builder.EqualsBuilder" />
	<method signature="org.apache.commons.lang3.builder.EqualsBuilder append(long,long)" class="org.apache.commons.lang3.builder.EqualsBuilder" />
	<method signature="org.apache.commons.lang3.builder.EqualsBuilder append(double,double)" class="org.apache.commons.lang3.builder.EqualsBuilder" />
	<method signature="boolean reflectionEquals(java.lang.Object,java.lang.Object,boolean)" class="org.apache.commons.lang3.builder.EqualsBuilder" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.builder.EqualsBuilder" />
	<method signature="org.apache.commons.lang3.builder.EqualsBuilder append(java.lang.Object[],java.lang.Object[])" class="org.apache.commons.lang3.builder.EqualsBuilder" />
	<method signature="org.apache.commons.lang3.builder.EqualsBuilder append(char[],char[])" class="org.apache.commons.lang3.builder.EqualsBuilder" />
	<method signature="org.apache.commons.lang3.builder.EqualsBuilder append(double[],double[])" class="org.apache.commons.lang3.builder.EqualsBuilder" />
	<method signature="org.apache.commons.lang3.builder.EqualsBuilder append(long[],long[])" class="org.apache.commons.lang3.builder.EqualsBuilder" />
	<method signature="org.apache.commons.lang3.builder.EqualsBuilder append(float[],float[])" class="org.apache.commons.lang3.builder.EqualsBuilder" />
	<method signature="boolean reflectionEquals(java.lang.Object,java.lang.Object,boolean,java.lang.Class,java.lang.String[])" class="org.apache.commons.lang3.builder.EqualsBuilder" />
	<method signature="org.apache.commons.lang3.builder.EqualsBuilder append(int[],int[])" class="org.apache.commons.lang3.builder.EqualsBuilder" />
	<method signature="boolean reflectionEquals(java.lang.Object,java.lang.Object,java.util.Collection)" class="org.apache.commons.lang3.builder.EqualsBuilder" />
	<method signature="java.lang.Object build()" class="org.apache.commons.lang3.builder.EqualsBuilder" />
	<method signature="org.apache.commons.lang3.builder.EqualsBuilder append(short,short)" class="org.apache.commons.lang3.builder.EqualsBuilder" />
	<method signature="org.apache.commons.lang3.builder.EqualsBuilder appendSuper(boolean)" class="org.apache.commons.lang3.builder.EqualsBuilder" />
	<method signature="org.apache.commons.lang3.builder.EqualsBuilder append(float,float)" class="org.apache.commons.lang3.builder.EqualsBuilder" />
	<method signature="org.apache.commons.lang3.builder.EqualsBuilder append(boolean,boolean)" class="org.apache.commons.lang3.builder.EqualsBuilder" />
	<method signature="org.apache.commons.lang3.builder.EqualsBuilder append(char,char)" class="org.apache.commons.lang3.builder.EqualsBuilder" />
	<method signature="org.apache.commons.lang3.builder.EqualsBuilder append(short[],short[])" class="org.apache.commons.lang3.builder.EqualsBuilder" />
	<method signature="java.lang.Boolean build()" class="org.apache.commons.lang3.builder.EqualsBuilder" />
	<class name="teamma.data.Roster" />
	<method signature="int getValue(boolean)" class="teamma.data.Roster" />
	<method signature="void setWizard(boolean)" class="teamma.data.Roster" />
	<method signature="void setRerolls(int)" class="teamma.data.Roster" />
	<method signature="int getAssistants()" class="teamma.data.Roster" />
	<method signature="void setXMLElement(org.jdom2.Element)" class="teamma.data.Roster" />
	<method signature="int getBloodweiserbabes()" class="teamma.data.Roster" />
	<method signature="boolean isChef()" class="teamma.data.Roster" />
	<method signature="teamma.data.RosterType getRoster()" class="teamma.data.Roster" />
	<method signature="void setAssistants(int)" class="teamma.data.Roster" />
	<method signature="teamma.data.StarPlayer getChampion(int)" class="teamma.data.Roster" />
	<method signature="void removePlayer(int)" class="teamma.data.Roster" />
	<method signature="void addPlayer(teamma.data.Player)" class="teamma.data.Roster" />
	<method signature="boolean isIgor()" class="teamma.data.Roster" />
	<method signature="void &lt;init&gt;()" class="teamma.data.Roster" />
	<method signature="void setCheerleaders(int)" class="teamma.data.Roster" />
	<method signature="void setLocalapothecary(int)" class="teamma.data.Roster" />
	<method signature="void setCorruptions(int)" class="teamma.data.Roster" />
	<method signature="int getChampionCount()" class="teamma.data.Roster" />
	<method signature="void setExtrarerolls(int)" class="teamma.data.Roster" />
	<method signature="void addChampion(teamma.data.StarPlayer)" class="teamma.data.Roster" />
	<method signature="void setApothecary(boolean)" class="teamma.data.Roster" />
	<method signature="void setRoster(teamma.data.RosterType)" class="teamma.data.Roster" />
	<method signature="int getLocalapothecary()" class="teamma.data.Roster" />
	<method signature="int getFanfactor()" class="teamma.data.Roster" />
	<method signature="void removeChampion(int)" class="teamma.data.Roster" />
	<method signature="int getRerolls()" class="teamma.data.Roster" />
	<method signature="boolean isApothecary()" class="teamma.data.Roster" />
	<method signature="void setFanfactor(int)" class="teamma.data.Roster" />
	<method signature="void setBloodweiserbabes(int)" class="teamma.data.Roster" />
	<method signature="int getCards()" class="teamma.data.Roster" />
	<method signature="int getCheerleaders()" class="teamma.data.Roster" />
	<method signature="org.jdom2.Element getXMLElement()" class="teamma.data.Roster" />
	<method signature="int getPlayerCount()" class="teamma.data.Roster" />
	<method signature="void setCards(int)" class="teamma.data.Roster" />
	<method signature="int getExtrarerolls()" class="teamma.data.Roster" />
	<method signature="void setChef(boolean)" class="teamma.data.Roster" />
	<method signature="void clearPlayers()" class="teamma.data.Roster" />
	<method signature="boolean isWizard()" class="teamma.data.Roster" />
	<method signature="int getCorruptions()" class="teamma.data.Roster" />
	<method signature="teamma.data.Player getPlayer(int)" class="teamma.data.Roster" />
	<method signature="void setIgor(boolean)" class="teamma.data.Roster" />
	<class name="com.google.zxing.oned.UPCAReader" />
	<method signature="com.google.zxing.Result decode(com.google.zxing.BinaryBitmap)" class="com.google.zxing.oned.UPCAReader" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.oned.UPCAReader" />
	<method signature="com.google.zxing.Result decode(com.google.zxing.BinaryBitmap,java.util.Map)" class="com.google.zxing.oned.UPCAReader" />
	<method signature="com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,int[],java.util.Map)" class="com.google.zxing.oned.UPCAReader" />
	<method signature="com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map)" class="com.google.zxing.oned.UPCAReader" />
	<class name="com.toedter.calendar.MinMaxDateEvaluator" />
	<method signature="java.awt.Color getSpecialForegroundColor()" class="com.toedter.calendar.MinMaxDateEvaluator" />
	<method signature="java.lang.String getSpecialTooltip()" class="com.toedter.calendar.MinMaxDateEvaluator" />
	<method signature="java.util.Date setMinSelectableDate(java.util.Date)" class="com.toedter.calendar.MinMaxDateEvaluator" />
	<method signature="boolean isSpecial(java.util.Date)" class="com.toedter.calendar.MinMaxDateEvaluator" />
	<method signature="java.lang.String getInvalidTooltip()" class="com.toedter.calendar.MinMaxDateEvaluator" />
	<method signature="java.util.Date getMaxSelectableDate()" class="com.toedter.calendar.MinMaxDateEvaluator" />
	<method signature="java.awt.Color getInvalidBackroundColor()" class="com.toedter.calendar.MinMaxDateEvaluator" />
	<method signature="java.awt.Color getSpecialBackroundColor()" class="com.toedter.calendar.MinMaxDateEvaluator" />
	<method signature="boolean isInvalid(java.util.Date)" class="com.toedter.calendar.MinMaxDateEvaluator" />
	<method signature="void &lt;init&gt;()" class="com.toedter.calendar.MinMaxDateEvaluator" />
	<method signature="java.util.Date setMaxSelectableDate(java.util.Date)" class="com.toedter.calendar.MinMaxDateEvaluator" />
	<method signature="java.awt.Color getInvalidForegroundColor()" class="com.toedter.calendar.MinMaxDateEvaluator" />
	<method signature="java.util.Date getMinSelectableDate()" class="com.toedter.calendar.MinMaxDateEvaluator" />
	<class name="org.jdom2.transform.XSLTransformer" />
	<method signature="void &lt;init&gt;(java.io.InputStream)" class="org.jdom2.transform.XSLTransformer" />
	<method signature="void &lt;init&gt;(java.io.File)" class="org.jdom2.transform.XSLTransformer" />
	<method signature="void setFactory(org.jdom2.JDOMFactory)" class="org.jdom2.transform.XSLTransformer" />
	<method signature="void &lt;init&gt;(java.io.Reader)" class="org.jdom2.transform.XSLTransformer" />
	<method signature="void &lt;init&gt;(org.jdom2.Document)" class="org.jdom2.transform.XSLTransformer" />
	<method signature="org.jdom2.JDOMFactory getFactory()" class="org.jdom2.transform.XSLTransformer" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jdom2.transform.XSLTransformer" />
	<method signature="org.jdom2.Document transform(org.jdom2.Document)" class="org.jdom2.transform.XSLTransformer" />
	<method signature="org.jdom2.Document transform(org.jdom2.Document,org.xml.sax.EntityResolver)" class="org.jdom2.transform.XSLTransformer" />
	<method signature="java.util.List transform(java.util.List)" class="org.jdom2.transform.XSLTransformer" />
	<class name="org.w3c.dom.xpath.XPathNamespace" />
	<method signature="org.w3c.dom.Element getOwnerElement()" class="org.w3c.dom.xpath.XPathNamespace" />
	<class name="org.apache.xerces.impl.dtd.DTDGrammar$QNameHashtable" />
	<method signature="int get(java.lang.String)" class="org.apache.xerces.impl.dtd.DTDGrammar$QNameHashtable" />
	<method signature="void put(java.lang.String,int)" class="org.apache.xerces.impl.dtd.DTDGrammar$QNameHashtable" />
	<class name="org.w3c.dom.css.CSSValueList" />
	<method signature="org.w3c.dom.css.CSSValue item(int)" class="org.w3c.dom.css.CSSValueList" />
	<method signature="int getLength()" class="org.w3c.dom.css.CSSValueList" />
	<class name="org.apache.xerces.dom.ASModelImpl" />
	<method signature="short getAsNodeType()" class="org.apache.xerces.dom.ASModelImpl" />
	<method signature="org.apache.xerces.dom3.as.ASNamedObjectMap getNotationDeclarations()" class="org.apache.xerces.dom.ASModelImpl" />
	<method signature="void setOwnerASModel(org.apache.xerces.dom3.as.ASModel)" class="org.apache.xerces.dom.ASModelImpl" />
	<method signature="void setNamespaceURI(java.lang.String)" class="org.apache.xerces.dom.ASModelImpl" />
	<method signature="org.apache.xerces.dom3.as.ASObject cloneASObject(boolean)" class="org.apache.xerces.dom.ASModelImpl" />
	<method signature="java.lang.String getAsLocation()" class="org.apache.xerces.dom.ASModelImpl" />
	<method signature="void setAsHint(java.lang.String)" class="org.apache.xerces.dom.ASModelImpl" />
	<method signature="org.apache.xerces.dom3.as.ASAttributeDeclaration createASAttributeDeclaration(java.lang.String,java.lang.String)" class="org.apache.xerces.dom.ASModelImpl" />
	<method signature="void insertASObject(org.apache.xerces.dom3.as.ASObject)" class="org.apache.xerces.dom.ASModelImpl" />
	<method signature="org.apache.xerces.dom3.as.ASContentModel createASContentModel(int,int,short)" class="org.apache.xerces.dom.ASModelImpl" />
	<method signature="org.apache.xerces.dom3.as.ASNamedObjectMap getAttributeDeclarations()" class="org.apache.xerces.dom.ASModelImpl" />
	<method signature="org.apache.xerces.dom3.as.ASObjectList getASModels()" class="org.apache.xerces.dom.ASModelImpl" />
	<method signature="void importASObject(org.apache.xerces.dom3.as.ASObject)" class="org.apache.xerces.dom.ASModelImpl" />
	<method signature="org.apache.xerces.dom3.as.ASEntityDeclaration createASEntityDeclaration(java.lang.String)" class="org.apache.xerces.dom.ASModelImpl" />
	<method signature="org.apache.xerces.dom3.as.ASModel getOwnerASModel()" class="org.apache.xerces.dom.ASModelImpl" />
	<method signature="short getUsageLocation()" class="org.apache.xerces.dom.ASModelImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.dom.ASModelImpl" />
	<method signature="org.apache.xerces.impl.xs.SchemaGrammar getGrammar()" class="org.apache.xerces.dom.ASModelImpl" />
	<method signature="java.lang.String getAsHint()" class="org.apache.xerces.dom.ASModelImpl" />
	<method signature="boolean getContainer()" class="org.apache.xerces.dom.ASModelImpl" />
	<method signature="void &lt;init&gt;(boolean)" class="org.apache.xerces.dom.ASModelImpl" />
	<method signature="org.apache.xerces.dom3.as.ASNamedObjectMap getElementDeclarations()" class="org.apache.xerces.dom.ASModelImpl" />
	<method signature="java.lang.String getPrefix()" class="org.apache.xerces.dom.ASModelImpl" />
	<method signature="void setPrefix(java.lang.String)" class="org.apache.xerces.dom.ASModelImpl" />
	<method signature="boolean validate()" class="org.apache.xerces.dom.ASModelImpl" />
	<method signature="java.lang.String getNodeName()" class="org.apache.xerces.dom.ASModelImpl" />
	<method signature="void setLocalName(java.lang.String)" class="org.apache.xerces.dom.ASModelImpl" />
	<method signature="org.apache.xerces.dom3.as.ASNamedObjectMap getEntityDeclarations()" class="org.apache.xerces.dom.ASModelImpl" />
	<method signature="void addASModel(org.apache.xerces.dom3.as.ASModel)" class="org.apache.xerces.dom.ASModelImpl" />
	<method signature="void removeAS(org.apache.xerces.dom3.as.ASModel)" class="org.apache.xerces.dom.ASModelImpl" />
	<method signature="void setGrammar(org.apache.xerces.impl.xs.SchemaGrammar)" class="org.apache.xerces.dom.ASModelImpl" />
	<method signature="org.apache.xerces.dom3.as.ASElementDeclaration createASElementDeclaration(java.lang.String,java.lang.String)" class="org.apache.xerces.dom.ASModelImpl" />
	<method signature="java.lang.String getLocalName()" class="org.apache.xerces.dom.ASModelImpl" />
	<method signature="java.lang.String getNamespaceURI()" class="org.apache.xerces.dom.ASModelImpl" />
	<method signature="void setNodeName(java.lang.String)" class="org.apache.xerces.dom.ASModelImpl" />
	<method signature="org.apache.xerces.dom3.as.ASNotationDeclaration createASNotationDeclaration(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.dom.ASModelImpl" />
	<method signature="org.apache.xerces.dom3.as.ASNamedObjectMap getContentModelDeclarations()" class="org.apache.xerces.dom.ASModelImpl" />
	<method signature="boolean getIsNamespaceAware()" class="org.apache.xerces.dom.ASModelImpl" />
	<method signature="void setAsLocation(java.lang.String)" class="org.apache.xerces.dom.ASModelImpl" />
	<method signature="java.util.Vector getInternalASModels()" class="org.apache.xerces.dom.ASModelImpl" />
	<class name="org.jdom2.output.support.SAXTarget" />
	<method signature="org.xml.sax.EntityResolver getEntityResolver()" class="org.jdom2.output.support.SAXTarget" />
	<method signature="void &lt;init&gt;(org.xml.sax.ContentHandler,org.xml.sax.ErrorHandler,org.xml.sax.DTDHandler,org.xml.sax.EntityResolver,org.xml.sax.ext.LexicalHandler,org.xml.sax.ext.DeclHandler,boolean,boolean,java.lang.String,java.lang.String)" class="org.jdom2.output.support.SAXTarget" />
	<method signature="org.xml.sax.ext.DeclHandler getDeclHandler()" class="org.jdom2.output.support.SAXTarget" />
	<method signature="boolean isDeclareNamespaces()" class="org.jdom2.output.support.SAXTarget" />
	<method signature="org.xml.sax.ext.LexicalHandler getLexicalHandler()" class="org.jdom2.output.support.SAXTarget" />
	<method signature="org.xml.sax.ErrorHandler getErrorHandler()" class="org.jdom2.output.support.SAXTarget" />
	<method signature="org.xml.sax.ContentHandler getContentHandler()" class="org.jdom2.output.support.SAXTarget" />
	<method signature="org.jdom2.output.support.SAXTarget$SAXLocator getLocator()" class="org.jdom2.output.support.SAXTarget" />
	<method signature="boolean isReportDTDEvents()" class="org.jdom2.output.support.SAXTarget" />
	<method signature="org.xml.sax.DTDHandler getDTDHandler()" class="org.jdom2.output.support.SAXTarget" />
	<class name="freemarker.ext.dom.XPathSupport" />
	<method signature="freemarker.template.TemplateModel executeQuery(java.lang.Object,java.lang.String)" class="freemarker.ext.dom.XPathSupport" />
	<class name="teamma.views.JdgSelectSkill" />
	<method signature="void &lt;init&gt;(java.awt.Frame,boolean,teamma.data.Player)" class="teamma.views.JdgSelectSkill" />
	<class name="org.jfree.data.xy.AbstractXYZDataset" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.xy.AbstractXYZDataset" />
	<method signature="double getZValue(int,int)" class="org.jfree.data.xy.AbstractXYZDataset" />
	<class name="tourma.views.fullscreen.JFullScreenClanTeamAnnex" />
	<method signature="void &lt;init&gt;(int,boolean,boolean)" class="tourma.views.fullscreen.JFullScreenClanTeamAnnex" />
	<method signature="void &lt;init&gt;(java.net.Socket,boolean,boolean)" class="tourma.views.fullscreen.JFullScreenClanTeamAnnex" />
	<method signature="void &lt;init&gt;(int,boolean,boolean,boolean)" class="tourma.views.fullscreen.JFullScreenClanTeamAnnex" />
	<method signature="void &lt;init&gt;(java.net.Socket,boolean)" class="tourma.views.fullscreen.JFullScreenClanTeamAnnex" />
	<class name="org.jfree.chart.axis.SubCategoryAxis" />
	<method signature="void setSubLabelPaint(java.awt.Paint)" class="org.jfree.chart.axis.SubCategoryAxis" />
	<method signature="org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge,org.jfree.chart.axis.AxisSpace)" class="org.jfree.chart.axis.SubCategoryAxis" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.axis.SubCategoryAxis" />
	<method signature="void addSubCategory(java.lang.Comparable)" class="org.jfree.chart.axis.SubCategoryAxis" />
	<method signature="void setSubLabelFont(java.awt.Font)" class="org.jfree.chart.axis.SubCategoryAxis" />
	<method signature="org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.axis.SubCategoryAxis" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.chart.axis.SubCategoryAxis" />
	<method signature="java.awt.Font getSubLabelFont()" class="org.jfree.chart.axis.SubCategoryAxis" />
	<method signature="java.awt.Paint getSubLabelPaint()" class="org.jfree.chart.axis.SubCategoryAxis" />
	<class name="org.jfree.chart.plot.AbstractPieLabelDistributor" />
	<method signature="void clear()" class="org.jfree.chart.plot.AbstractPieLabelDistributor" />
	<method signature="void addPieLabelRecord(org.jfree.chart.plot.PieLabelRecord)" class="org.jfree.chart.plot.AbstractPieLabelDistributor" />
	<method signature="int getItemCount()" class="org.jfree.chart.plot.AbstractPieLabelDistributor" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.plot.AbstractPieLabelDistributor" />
	<method signature="org.jfree.chart.plot.PieLabelRecord getPieLabelRecord(int)" class="org.jfree.chart.plot.AbstractPieLabelDistributor" />
	<method signature="void distributeLabels(double,double)" class="org.jfree.chart.plot.AbstractPieLabelDistributor" />
	<class name="org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder" />
	<method signature="org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder priority(int)" class="org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder" />
	<method signature="void reset()" class="org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder" />
	<method signature="org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder uncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)" class="org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder" />
	<method signature="org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder daemon(boolean)" class="org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder" />
	<method signature="org.apache.commons.lang3.concurrent.BasicThreadFactory build()" class="org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder" />
	<method signature="org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder wrappedFactory(java.util.concurrent.ThreadFactory)" class="org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder" />
	<method signature="org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder namingPattern(java.lang.String)" class="org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder" />
	<method signature="java.lang.Object build()" class="org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder" />
	<class name="org.jfree.chart.annotations.XYPointerAnnotation" />
	<method signature="void setArrowStroke(java.awt.Stroke)" class="org.jfree.chart.annotations.XYPointerAnnotation" />
	<method signature="int hashCode()" class="org.jfree.chart.annotations.XYPointerAnnotation" />
	<method signature="double getAngle()" class="org.jfree.chart.annotations.XYPointerAnnotation" />
	<method signature="void setLabelOffset(double)" class="org.jfree.chart.annotations.XYPointerAnnotation" />
	<method signature="double getLabelOffset()" class="org.jfree.chart.annotations.XYPointerAnnotation" />
	<method signature="double getArrowLength()" class="org.jfree.chart.annotations.XYPointerAnnotation" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.annotations.XYPointerAnnotation" />
	<method signature="double getArrowWidth()" class="org.jfree.chart.annotations.XYPointerAnnotation" />
	<method signature="java.awt.Paint getArrowPaint()" class="org.jfree.chart.annotations.XYPointerAnnotation" />
	<method signature="double getBaseRadius()" class="org.jfree.chart.annotations.XYPointerAnnotation" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.annotations.XYPointerAnnotation" />
	<method signature="void setArrowWidth(double)" class="org.jfree.chart.annotations.XYPointerAnnotation" />
	<method signature="void &lt;init&gt;(java.lang.String,double,double,double)" class="org.jfree.chart.annotations.XYPointerAnnotation" />
	<method signature="void setArrowPaint(java.awt.Paint)" class="org.jfree.chart.annotations.XYPointerAnnotation" />
	<method signature="void setBaseRadius(double)" class="org.jfree.chart.annotations.XYPointerAnnotation" />
	<method signature="java.awt.Stroke getArrowStroke()" class="org.jfree.chart.annotations.XYPointerAnnotation" />
	<method signature="void setAngle(double)" class="org.jfree.chart.annotations.XYPointerAnnotation" />
	<method signature="void setTipRadius(double)" class="org.jfree.chart.annotations.XYPointerAnnotation" />
	<method signature="void setArrowLength(double)" class="org.jfree.chart.annotations.XYPointerAnnotation" />
	<method signature="void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.annotations.XYPointerAnnotation" />
	<method signature="double getTipRadius()" class="org.jfree.chart.annotations.XYPointerAnnotation" />
	<class name="org.apache.xerces.util.XMLChar" />
	<method signature="boolean isNameStart(int)" class="org.apache.xerces.util.XMLChar" />
	<method signature="boolean isName(int)" class="org.apache.xerces.util.XMLChar" />
	<method signature="java.lang.String trim(java.lang.String)" class="org.apache.xerces.util.XMLChar" />
	<method signature="boolean isSupplemental(int)" class="org.apache.xerces.util.XMLChar" />
	<method signature="boolean isValidNmtoken(java.lang.String)" class="org.apache.xerces.util.XMLChar" />
	<method signature="boolean isLowSurrogate(int)" class="org.apache.xerces.util.XMLChar" />
	<method signature="boolean isNCName(int)" class="org.apache.xerces.util.XMLChar" />
	<method signature="boolean isNCNameStart(int)" class="org.apache.xerces.util.XMLChar" />
	<method signature="boolean isValidNCName(java.lang.String)" class="org.apache.xerces.util.XMLChar" />
	<method signature="char lowSurrogate(int)" class="org.apache.xerces.util.XMLChar" />
	<method signature="boolean isValidIANAEncoding(java.lang.String)" class="org.apache.xerces.util.XMLChar" />
	<method signature="char highSurrogate(int)" class="org.apache.xerces.util.XMLChar" />
	<method signature="int supplemental(char,char)" class="org.apache.xerces.util.XMLChar" />
	<method signature="boolean isValidJavaEncoding(java.lang.String)" class="org.apache.xerces.util.XMLChar" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.util.XMLChar" />
	<method signature="boolean isValid(int)" class="org.apache.xerces.util.XMLChar" />
	<method signature="boolean isContent(int)" class="org.apache.xerces.util.XMLChar" />
	<method signature="boolean isPubid(int)" class="org.apache.xerces.util.XMLChar" />
	<method signature="boolean isHighSurrogate(int)" class="org.apache.xerces.util.XMLChar" />
	<method signature="boolean isMarkup(int)" class="org.apache.xerces.util.XMLChar" />
	<method signature="boolean isValidName(java.lang.String)" class="org.apache.xerces.util.XMLChar" />
	<method signature="boolean isInvalid(int)" class="org.apache.xerces.util.XMLChar" />
	<method signature="boolean isSpace(int)" class="org.apache.xerces.util.XMLChar" />
	<class name="org.jdom2.filter.AttributeFilter" />
	<method signature="int hashCode()" class="org.jdom2.filter.AttributeFilter" />
	<method signature="org.jdom2.Attribute filter(java.lang.Object)" class="org.jdom2.filter.AttributeFilter" />
	<method signature="boolean equals(java.lang.Object)" class="org.jdom2.filter.AttributeFilter" />
	<method signature="void &lt;init&gt;()" class="org.jdom2.filter.AttributeFilter" />
	<method signature="void &lt;init&gt;(org.jdom2.Namespace)" class="org.jdom2.filter.AttributeFilter" />
	<method signature="java.lang.Object filter(java.lang.Object)" class="org.jdom2.filter.AttributeFilter" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jdom2.filter.AttributeFilter" />
	<method signature="void &lt;init&gt;(java.lang.String,org.jdom2.Namespace)" class="org.jdom2.filter.AttributeFilter" />
	<class name="org.jfree.ui.UIUtilities" />
	<method signature="void setupUI()" class="org.jfree.ui.UIUtilities" />
	<class name="org.jdom2.input.sax.XMLReaderJAXPFactory" />
	<method signature="boolean isValidating()" class="org.jdom2.input.sax.XMLReaderJAXPFactory" />
	<method signature="org.xml.sax.XMLReader createXMLReader()" class="org.jdom2.input.sax.XMLReaderJAXPFactory" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.ClassLoader,boolean)" class="org.jdom2.input.sax.XMLReaderJAXPFactory" />
	<class name="org.jdom2.input.StAXStreamBuilder" />
	<method signature="org.jdom2.Content fragment(javax.xml.stream.XMLStreamReader)" class="org.jdom2.input.StAXStreamBuilder" />
	<method signature="org.jdom2.Document build(javax.xml.stream.XMLStreamReader)" class="org.jdom2.input.StAXStreamBuilder" />
	<method signature="void setFactory(org.jdom2.JDOMFactory)" class="org.jdom2.input.StAXStreamBuilder" />
	<method signature="org.jdom2.JDOMFactory getFactory()" class="org.jdom2.input.StAXStreamBuilder" />
	<method signature="java.util.List buildFragments(javax.xml.stream.XMLStreamReader,org.jdom2.input.stax.StAXFilter)" class="org.jdom2.input.StAXStreamBuilder" />
	<method signature="void &lt;init&gt;()" class="org.jdom2.input.StAXStreamBuilder" />
	<class name="org.apache.wml.dom.WMLGoElementImpl" />
	<method signature="java.lang.String getHref()" class="org.apache.wml.dom.WMLGoElementImpl" />
	<method signature="void setMethod(java.lang.String)" class="org.apache.wml.dom.WMLGoElementImpl" />
	<method signature="java.lang.String getId()" class="org.apache.wml.dom.WMLGoElementImpl" />
	<method signature="java.lang.String getMethod()" class="org.apache.wml.dom.WMLGoElementImpl" />
	<method signature="void setAcceptCharset(java.lang.String)" class="org.apache.wml.dom.WMLGoElementImpl" />
	<method signature="java.lang.String getAcceptCharset()" class="org.apache.wml.dom.WMLGoElementImpl" />
	<method signature="void setSendreferer(java.lang.String)" class="org.apache.wml.dom.WMLGoElementImpl" />
	<method signature="void setId(java.lang.String)" class="org.apache.wml.dom.WMLGoElementImpl" />
	<method signature="void setHref(java.lang.String)" class="org.apache.wml.dom.WMLGoElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.wml.dom.WMLDocumentImpl,java.lang.String)" class="org.apache.wml.dom.WMLGoElementImpl" />
	<method signature="java.lang.String getClassName()" class="org.apache.wml.dom.WMLGoElementImpl" />
	<method signature="java.lang.String getSendreferer()" class="org.apache.wml.dom.WMLGoElementImpl" />
	<method signature="void setClassName(java.lang.String)" class="org.apache.wml.dom.WMLGoElementImpl" />
	<class name="org.jfree.ui.L1R2ButtonPanel" />
	<method signature="javax.swing.JButton getRightButton2()" class="org.jfree.ui.L1R2ButtonPanel" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String)" class="org.jfree.ui.L1R2ButtonPanel" />
	<method signature="javax.swing.JButton getLeftButton()" class="org.jfree.ui.L1R2ButtonPanel" />
	<method signature="javax.swing.JButton getRightButton1()" class="org.jfree.ui.L1R2ButtonPanel" />
	<class name="org.w3c.dom.html.HTMLSelectElement" />
	<method signature="void setValue(java.lang.String)" class="org.w3c.dom.html.HTMLSelectElement" />
	<method signature="java.lang.String getName()" class="org.w3c.dom.html.HTMLSelectElement" />
	<method signature="void setSelectedIndex(int)" class="org.w3c.dom.html.HTMLSelectElement" />
	<method signature="int getSize()" class="org.w3c.dom.html.HTMLSelectElement" />
	<method signature="boolean getMultiple()" class="org.w3c.dom.html.HTMLSelectElement" />
	<method signature="void setTabIndex(int)" class="org.w3c.dom.html.HTMLSelectElement" />
	<method signature="int getSelectedIndex()" class="org.w3c.dom.html.HTMLSelectElement" />
	<method signature="int getLength()" class="org.w3c.dom.html.HTMLSelectElement" />
	<method signature="void setSize(int)" class="org.w3c.dom.html.HTMLSelectElement" />
	<method signature="boolean getDisabled()" class="org.w3c.dom.html.HTMLSelectElement" />
	<method signature="void setMultiple(boolean)" class="org.w3c.dom.html.HTMLSelectElement" />
	<method signature="void setDisabled(boolean)" class="org.w3c.dom.html.HTMLSelectElement" />
	<method signature="void remove(int)" class="org.w3c.dom.html.HTMLSelectElement" />
	<method signature="java.lang.String getValue()" class="org.w3c.dom.html.HTMLSelectElement" />
	<method signature="void blur()" class="org.w3c.dom.html.HTMLSelectElement" />
	<method signature="void focus()" class="org.w3c.dom.html.HTMLSelectElement" />
	<method signature="void add(org.w3c.dom.html.HTMLElement,org.w3c.dom.html.HTMLElement)" class="org.w3c.dom.html.HTMLSelectElement" />
	<method signature="int getTabIndex()" class="org.w3c.dom.html.HTMLSelectElement" />
	<method signature="org.w3c.dom.html.HTMLCollection getOptions()" class="org.w3c.dom.html.HTMLSelectElement" />
	<method signature="void setName(java.lang.String)" class="org.w3c.dom.html.HTMLSelectElement" />
	<method signature="java.lang.String getType()" class="org.w3c.dom.html.HTMLSelectElement" />
	<method signature="org.w3c.dom.html.HTMLFormElement getForm()" class="org.w3c.dom.html.HTMLSelectElement" />
	<class name="org.jfree.data.xy.XIntervalDataItem" />
	<method signature="double getYValue()" class="org.jfree.data.xy.XIntervalDataItem" />
	<method signature="void &lt;init&gt;(double,double,double,double)" class="org.jfree.data.xy.XIntervalDataItem" />
	<method signature="java.lang.Number getX()" class="org.jfree.data.xy.XIntervalDataItem" />
	<method signature="double getXLowValue()" class="org.jfree.data.xy.XIntervalDataItem" />
	<method signature="double getXHighValue()" class="org.jfree.data.xy.XIntervalDataItem" />
	<class name="org.xml.sax.helpers.XMLFilterImpl" />
	<method signature="void warning(org.xml.sax.SAXParseException)" class="org.xml.sax.helpers.XMLFilterImpl" />
	<method signature="void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" class="org.xml.sax.helpers.XMLFilterImpl" />
	<method signature="org.xml.sax.ErrorHandler getErrorHandler()" class="org.xml.sax.helpers.XMLFilterImpl" />
	<method signature="void startPrefixMapping(java.lang.String,java.lang.String)" class="org.xml.sax.helpers.XMLFilterImpl" />
	<method signature="boolean getFeature(java.lang.String)" class="org.xml.sax.helpers.XMLFilterImpl" />
	<method signature="void notationDecl(java.lang.String,java.lang.String,java.lang.String)" class="org.xml.sax.helpers.XMLFilterImpl" />
	<method signature="void unparsedEntityDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.xml.sax.helpers.XMLFilterImpl" />
	<method signature="org.xml.sax.DTDHandler getDTDHandler()" class="org.xml.sax.helpers.XMLFilterImpl" />
	<method signature="void parse(org.xml.sax.InputSource)" class="org.xml.sax.helpers.XMLFilterImpl" />
	<method signature="org.xml.sax.EntityResolver getEntityResolver()" class="org.xml.sax.helpers.XMLFilterImpl" />
	<method signature="void endPrefixMapping(java.lang.String)" class="org.xml.sax.helpers.XMLFilterImpl" />
	<method signature="void endElement(java.lang.String,java.lang.String,java.lang.String)" class="org.xml.sax.helpers.XMLFilterImpl" />
	<method signature="void error(org.xml.sax.SAXParseException)" class="org.xml.sax.helpers.XMLFilterImpl" />
	<method signature="void &lt;init&gt;()" class="org.xml.sax.helpers.XMLFilterImpl" />
	<method signature="void startDocument()" class="org.xml.sax.helpers.XMLFilterImpl" />
	<method signature="void endDocument()" class="org.xml.sax.helpers.XMLFilterImpl" />
	<method signature="void setFeature(java.lang.String,boolean)" class="org.xml.sax.helpers.XMLFilterImpl" />
	<method signature="void setParent(org.xml.sax.XMLReader)" class="org.xml.sax.helpers.XMLFilterImpl" />
	<method signature="void setDTDHandler(org.xml.sax.DTDHandler)" class="org.xml.sax.helpers.XMLFilterImpl" />
	<method signature="void skippedEntity(java.lang.String)" class="org.xml.sax.helpers.XMLFilterImpl" />
	<method signature="void &lt;init&gt;(org.xml.sax.XMLReader)" class="org.xml.sax.helpers.XMLFilterImpl" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="org.xml.sax.helpers.XMLFilterImpl" />
	<method signature="void processingInstruction(java.lang.String,java.lang.String)" class="org.xml.sax.helpers.XMLFilterImpl" />
	<method signature="org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)" class="org.xml.sax.helpers.XMLFilterImpl" />
	<method signature="void setDocumentLocator(org.xml.sax.Locator)" class="org.xml.sax.helpers.XMLFilterImpl" />
	<method signature="void characters(char[],int,int)" class="org.xml.sax.helpers.XMLFilterImpl" />
	<method signature="void setContentHandler(org.xml.sax.ContentHandler)" class="org.xml.sax.helpers.XMLFilterImpl" />
	<method signature="org.xml.sax.XMLReader getParent()" class="org.xml.sax.helpers.XMLFilterImpl" />
	<method signature="org.xml.sax.ContentHandler getContentHandler()" class="org.xml.sax.helpers.XMLFilterImpl" />
	<method signature="void ignorableWhitespace(char[],int,int)" class="org.xml.sax.helpers.XMLFilterImpl" />
	<method signature="void setEntityResolver(org.xml.sax.EntityResolver)" class="org.xml.sax.helpers.XMLFilterImpl" />
	<method signature="void parse(java.lang.String)" class="org.xml.sax.helpers.XMLFilterImpl" />
	<method signature="void fatalError(org.xml.sax.SAXParseException)" class="org.xml.sax.helpers.XMLFilterImpl" />
	<method signature="java.lang.Object getProperty(java.lang.String)" class="org.xml.sax.helpers.XMLFilterImpl" />
	<method signature="void setErrorHandler(org.xml.sax.ErrorHandler)" class="org.xml.sax.helpers.XMLFilterImpl" />
	<class name="org.jfree.base.modules.PackageSorter" />
	<method signature="void sort(java.util.List)" class="org.jfree.base.modules.PackageSorter" />
	<class name="org.jfree.data.general.DatasetChangeListener" />
	<method signature="void datasetChanged(org.jfree.data.general.DatasetChangeEvent)" class="org.jfree.data.general.DatasetChangeListener" />
	<class name="tourma.utils.web.WebCup" />
	<method signature="void &lt;init&gt;()" class="tourma.utils.web.WebCup" />
	<method signature="java.lang.String getHTML()" class="tourma.utils.web.WebCup" />
	<class name="org.apache.xerces.impl.Version" />
	<method signature="java.lang.String getVersion()" class="org.apache.xerces.impl.Version" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.Version" />
	<method signature="void main(java.lang.String[])" class="org.apache.xerces.impl.Version" />
	<class name="org.jfree.date.SerialDateUtilities" />
	<method signature="int dayCountActual(org.jfree.date.SerialDate,org.jfree.date.SerialDate)" class="org.jfree.date.SerialDateUtilities" />
	<method signature="boolean isLastDayOfFebruary(org.jfree.date.SerialDate)" class="org.jfree.date.SerialDateUtilities" />
	<method signature="java.lang.String[] getMonths()" class="org.jfree.date.SerialDateUtilities" />
	<method signature="int dayCount30PSA(org.jfree.date.SerialDate,org.jfree.date.SerialDate)" class="org.jfree.date.SerialDateUtilities" />
	<method signature="void &lt;init&gt;()" class="org.jfree.date.SerialDateUtilities" />
	<method signature="int dayCount30E(org.jfree.date.SerialDate,org.jfree.date.SerialDate)" class="org.jfree.date.SerialDateUtilities" />
	<method signature="java.lang.String[] getWeekdays()" class="org.jfree.date.SerialDateUtilities" />
	<method signature="int stringToWeekday(java.lang.String)" class="org.jfree.date.SerialDateUtilities" />
	<method signature="int countFeb29s(org.jfree.date.SerialDate,org.jfree.date.SerialDate)" class="org.jfree.date.SerialDateUtilities" />
	<method signature="int dayCount30(org.jfree.date.SerialDate,org.jfree.date.SerialDate)" class="org.jfree.date.SerialDateUtilities" />
	<method signature="int dayCount30ISDA(org.jfree.date.SerialDate,org.jfree.date.SerialDate)" class="org.jfree.date.SerialDateUtilities" />
	<class name="org.unbescape.css.CssIdentifierEscapeType" />
	<method signature="boolean getUseBackslashEscapes()" class="org.unbescape.css.CssIdentifierEscapeType" />
	<method signature="boolean getUseCompactHexa()" class="org.unbescape.css.CssIdentifierEscapeType" />
	<method signature="org.unbescape.css.CssIdentifierEscapeType valueOf(java.lang.String)" class="org.unbescape.css.CssIdentifierEscapeType" />
	<method signature="org.unbescape.css.CssIdentifierEscapeType[] values()" class="org.unbescape.css.CssIdentifierEscapeType" />
	<class name="org.apache.xerces.impl.xs.models.XSCMLeaf" />
	<method signature="java.lang.String toString()" class="org.apache.xerces.impl.xs.models.XSCMLeaf" />
	<method signature="void &lt;init&gt;(int,java.lang.Object,int,int)" class="org.apache.xerces.impl.xs.models.XSCMLeaf" />
	<method signature="boolean isNullable()" class="org.apache.xerces.impl.xs.models.XSCMLeaf" />
	<class name="org.apache.xerces.impl.io.ASCIIReader" />
	<method signature="void mark(int)" class="org.apache.xerces.impl.io.ASCIIReader" />
	<method signature="int read(char[],int,int)" class="org.apache.xerces.impl.io.ASCIIReader" />
	<method signature="long skip(long)" class="org.apache.xerces.impl.io.ASCIIReader" />
	<method signature="void &lt;init&gt;(java.io.InputStream,int,org.apache.xerces.util.MessageFormatter,java.util.Locale)" class="org.apache.xerces.impl.io.ASCIIReader" />
	<method signature="void reset()" class="org.apache.xerces.impl.io.ASCIIReader" />
	<method signature="void &lt;init&gt;(java.io.InputStream,org.apache.xerces.util.MessageFormatter,java.util.Locale)" class="org.apache.xerces.impl.io.ASCIIReader" />
	<method signature="void &lt;init&gt;(java.io.InputStream,byte[],org.apache.xerces.util.MessageFormatter,java.util.Locale)" class="org.apache.xerces.impl.io.ASCIIReader" />
	<method signature="int read()" class="org.apache.xerces.impl.io.ASCIIReader" />
	<method signature="void close()" class="org.apache.xerces.impl.io.ASCIIReader" />
	<method signature="boolean ready()" class="org.apache.xerces.impl.io.ASCIIReader" />
	<method signature="boolean markSupported()" class="org.apache.xerces.impl.io.ASCIIReader" />
	<class name="org.jfree.chart.util.HexNumberFormat" />
	<method signature="java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.FieldPosition)" class="org.jfree.chart.util.HexNumberFormat" />
	<method signature="void &lt;init&gt;(int)" class="org.jfree.chart.util.HexNumberFormat" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.util.HexNumberFormat" />
	<method signature="java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.FieldPosition)" class="org.jfree.chart.util.HexNumberFormat" />
	<method signature="int getNumberOfDigits()" class="org.jfree.chart.util.HexNumberFormat" />
	<method signature="java.lang.Number parse(java.lang.String,java.text.ParsePosition)" class="org.jfree.chart.util.HexNumberFormat" />
	<method signature="void setNumberOfDigits(int)" class="org.jfree.chart.util.HexNumberFormat" />
	<class name="org.jfree.JCommon" />
	<method signature="void main(java.lang.String[])" class="org.jfree.JCommon" />
	<class name="com.google.zxing.client.result.ISBNParsedResult" />
	<method signature="java.lang.String getDisplayResult()" class="com.google.zxing.client.result.ISBNParsedResult" />
	<method signature="java.lang.String getISBN()" class="com.google.zxing.client.result.ISBNParsedResult" />
	<class name="org.jdom2.output.support.FormatStack" />
	<method signature="void setTextMode(org.jdom2.output.Format$TextMode)" class="org.jdom2.output.support.FormatStack" />
	<method signature="java.lang.String getLevelIndent()" class="org.jdom2.output.support.FormatStack" />
	<method signature="org.jdom2.output.EscapeStrategy getEscapeStrategy()" class="org.jdom2.output.support.FormatStack" />
	<method signature="boolean isSpecifiedAttributesOnly()" class="org.jdom2.output.support.FormatStack" />
	<method signature="boolean getEscapeOutput()" class="org.jdom2.output.support.FormatStack" />
	<method signature="boolean isOmitDeclaration()" class="org.jdom2.output.support.FormatStack" />
	<method signature="java.lang.String getEncoding()" class="org.jdom2.output.support.FormatStack" />
	<method signature="void push()" class="org.jdom2.output.support.FormatStack" />
	<method signature="org.jdom2.output.Format$TextMode getDefaultMode()" class="org.jdom2.output.support.FormatStack" />
	<method signature="void setLevelIndent(java.lang.String)" class="org.jdom2.output.support.FormatStack" />
	<method signature="java.lang.String getLevelEOL()" class="org.jdom2.output.support.FormatStack" />
	<method signature="boolean isExpandEmptyElements()" class="org.jdom2.output.support.FormatStack" />
	<method signature="java.lang.String getIndent()" class="org.jdom2.output.support.FormatStack" />
	<method signature="boolean isIgnoreTrAXEscapingPIs()" class="org.jdom2.output.support.FormatStack" />
	<method signature="void setEscapeOutput(boolean)" class="org.jdom2.output.support.FormatStack" />
	<method signature="java.lang.String getPadLast()" class="org.jdom2.output.support.FormatStack" />
	<method signature="java.lang.String getLineSeparator()" class="org.jdom2.output.support.FormatStack" />
	<method signature="void &lt;init&gt;(org.jdom2.output.Format)" class="org.jdom2.output.support.FormatStack" />
	<method signature="void pop()" class="org.jdom2.output.support.FormatStack" />
	<method signature="void setIgnoreTrAXEscapingPIs(boolean)" class="org.jdom2.output.support.FormatStack" />
	<method signature="void setLevelEOL(java.lang.String)" class="org.jdom2.output.support.FormatStack" />
	<method signature="org.jdom2.output.Format$TextMode getTextMode()" class="org.jdom2.output.support.FormatStack" />
	<method signature="boolean isOmitEncoding()" class="org.jdom2.output.support.FormatStack" />
	<method signature="java.lang.String getPadBetween()" class="org.jdom2.output.support.FormatStack" />
	<class name="org.apache.xerces.impl.XMLDocumentFragmentScannerImpl$Dispatcher" />
	<method signature="boolean dispatch(boolean)" class="org.apache.xerces.impl.XMLDocumentFragmentScannerImpl$Dispatcher" />
	<class name="freemarker.ext.rhino.RhinoScriptableModel" />
	<method signature="int size()" class="freemarker.ext.rhino.RhinoScriptableModel" />
	<method signature="java.lang.Object getAdaptedObject(java.lang.Class)" class="freemarker.ext.rhino.RhinoScriptableModel" />
	<method signature="void &lt;init&gt;(org.mozilla.javascript.Scriptable,freemarker.ext.beans.BeansWrapper)" class="freemarker.ext.rhino.RhinoScriptableModel" />
	<method signature="freemarker.template.TemplateCollectionModel keys()" class="freemarker.ext.rhino.RhinoScriptableModel" />
	<method signature="freemarker.template.TemplateCollectionModel values()" class="freemarker.ext.rhino.RhinoScriptableModel" />
	<method signature="freemarker.template.TemplateModel get(int)" class="freemarker.ext.rhino.RhinoScriptableModel" />
	<method signature="java.lang.String getAsString()" class="freemarker.ext.rhino.RhinoScriptableModel" />
	<method signature="boolean getAsBoolean()" class="freemarker.ext.rhino.RhinoScriptableModel" />
	<method signature="java.lang.Number getAsNumber()" class="freemarker.ext.rhino.RhinoScriptableModel" />
	<method signature="boolean isEmpty()" class="freemarker.ext.rhino.RhinoScriptableModel" />
	<method signature="freemarker.template.TemplateModel get(java.lang.String)" class="freemarker.ext.rhino.RhinoScriptableModel" />
	<class name="org.jfree.chart.block.BlockFrame" />
	<method signature="void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" class="org.jfree.chart.block.BlockFrame" />
	<method signature="org.jfree.ui.RectangleInsets getInsets()" class="org.jfree.chart.block.BlockFrame" />
	<class name="org.jfree.data.UnknownKeyException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.data.UnknownKeyException" />
	<class name="freemarker.ext.ant.JythonAntTask" />
	<method signature="void addText(java.lang.String)" class="freemarker.ext.ant.JythonAntTask" />
	<method signature="void &lt;init&gt;()" class="freemarker.ext.ant.JythonAntTask" />
	<method signature="void setFile(java.io.File)" class="freemarker.ext.ant.JythonAntTask" />
	<method signature="void execute(java.util.Map)" class="freemarker.ext.ant.JythonAntTask" />
	<class name="org.jdom2.located.LocatedText" />
	<method signature="void setLine(int)" class="org.jdom2.located.LocatedText" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jdom2.located.LocatedText" />
	<method signature="int getLine()" class="org.jdom2.located.LocatedText" />
	<method signature="int getColumn()" class="org.jdom2.located.LocatedText" />
	<method signature="void setColumn(int)" class="org.jdom2.located.LocatedText" />
	<class name="org.jfree.chart.axis.MarkerAxisBand" />
	<method signature="void &lt;init&gt;(org.jfree.chart.axis.NumberAxis,double,double,double,double,java.awt.Font)" class="org.jfree.chart.axis.MarkerAxisBand" />
	<method signature="void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,double,double)" class="org.jfree.chart.axis.MarkerAxisBand" />
	<method signature="int hashCode()" class="org.jfree.chart.axis.MarkerAxisBand" />
	<method signature="void addMarker(org.jfree.chart.plot.IntervalMarker)" class="org.jfree.chart.axis.MarkerAxisBand" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.axis.MarkerAxisBand" />
	<method signature="double getHeight(java.awt.Graphics2D)" class="org.jfree.chart.axis.MarkerAxisBand" />
	<class name="javax.xml.stream.StreamFilter" />
	<method signature="boolean accept(javax.xml.stream.XMLStreamReader)" class="javax.xml.stream.StreamFilter" />
	<class name="org.jfree.chart.labels.MultipleXYSeriesLabelGenerator" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.labels.MultipleXYSeriesLabelGenerator" />
	<method signature="java.lang.String generateLabel(org.jfree.data.xy.XYDataset,int)" class="org.jfree.chart.labels.MultipleXYSeriesLabelGenerator" />
	<method signature="void clearSeriesLabels(int)" class="org.jfree.chart.labels.MultipleXYSeriesLabelGenerator" />
	<method signature="int hashCode()" class="org.jfree.chart.labels.MultipleXYSeriesLabelGenerator" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.labels.MultipleXYSeriesLabelGenerator" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.labels.MultipleXYSeriesLabelGenerator" />
	<method signature="void addSeriesLabel(int,java.lang.String)" class="org.jfree.chart.labels.MultipleXYSeriesLabelGenerator" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.chart.labels.MultipleXYSeriesLabelGenerator" />
	<class name="org.w3c.dom.html.HTMLFontElement" />
	<method signature="java.lang.String getSize()" class="org.w3c.dom.html.HTMLFontElement" />
	<method signature="void setFace(java.lang.String)" class="org.w3c.dom.html.HTMLFontElement" />
	<method signature="void setColor(java.lang.String)" class="org.w3c.dom.html.HTMLFontElement" />
	<method signature="void setSize(java.lang.String)" class="org.w3c.dom.html.HTMLFontElement" />
	<method signature="java.lang.String getColor()" class="org.w3c.dom.html.HTMLFontElement" />
	<method signature="java.lang.String getFace()" class="org.w3c.dom.html.HTMLFontElement" />
	<class name="org.apache.xml.serialize.XHTMLSerializer" />
	<method signature="void &lt;init&gt;(java.io.Writer,org.apache.xml.serialize.OutputFormat)" class="org.apache.xml.serialize.XHTMLSerializer" />
	<method signature="void &lt;init&gt;()" class="org.apache.xml.serialize.XHTMLSerializer" />
	<method signature="void &lt;init&gt;(java.io.OutputStream,org.apache.xml.serialize.OutputFormat)" class="org.apache.xml.serialize.XHTMLSerializer" />
	<method signature="void setOutputFormat(org.apache.xml.serialize.OutputFormat)" class="org.apache.xml.serialize.XHTMLSerializer" />
	<method signature="void &lt;init&gt;(org.apache.xml.serialize.OutputFormat)" class="org.apache.xml.serialize.XHTMLSerializer" />
	<class name="org.jfree.chart.block.FlowArrangement" />
	<method signature="org.jfree.ui.Size2D arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" class="org.jfree.chart.block.FlowArrangement" />
	<method signature="void &lt;init&gt;(org.jfree.ui.HorizontalAlignment,org.jfree.ui.VerticalAlignment,double,double)" class="org.jfree.chart.block.FlowArrangement" />
	<method signature="void add(org.jfree.chart.block.Block,java.lang.Object)" class="org.jfree.chart.block.FlowArrangement" />
	<method signature="void clear()" class="org.jfree.chart.block.FlowArrangement" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.block.FlowArrangement" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.block.FlowArrangement" />
	<class name="javax.xml.stream.EventFilter" />
	<method signature="boolean accept(javax.xml.stream.events.XMLEvent)" class="javax.xml.stream.EventFilter" />
	<class name="org.apache.xerces.impl.xs.opti.NamedNodeMapImpl" />
	<method signature="org.w3c.dom.Node item(int)" class="org.apache.xerces.impl.xs.opti.NamedNodeMapImpl" />
	<method signature="void &lt;init&gt;(org.w3c.dom.Attr[])" class="org.apache.xerces.impl.xs.opti.NamedNodeMapImpl" />
	<method signature="org.w3c.dom.Node setNamedItem(org.w3c.dom.Node)" class="org.apache.xerces.impl.xs.opti.NamedNodeMapImpl" />
	<method signature="org.w3c.dom.Node removeNamedItemNS(java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.opti.NamedNodeMapImpl" />
	<method signature="org.w3c.dom.Node removeNamedItem(java.lang.String)" class="org.apache.xerces.impl.xs.opti.NamedNodeMapImpl" />
	<method signature="org.w3c.dom.Node getNamedItem(java.lang.String)" class="org.apache.xerces.impl.xs.opti.NamedNodeMapImpl" />
	<method signature="int getLength()" class="org.apache.xerces.impl.xs.opti.NamedNodeMapImpl" />
	<method signature="org.w3c.dom.Node getNamedItemNS(java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.opti.NamedNodeMapImpl" />
	<method signature="org.w3c.dom.Node setNamedItemNS(org.w3c.dom.Node)" class="org.apache.xerces.impl.xs.opti.NamedNodeMapImpl" />
	<class name="org.apache.wml.dom.WMLSmallElementImpl" />
	<method signature="java.lang.String getXmlLang()" class="org.apache.wml.dom.WMLSmallElementImpl" />
	<method signature="void setXmlLang(java.lang.String)" class="org.apache.wml.dom.WMLSmallElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.wml.dom.WMLDocumentImpl,java.lang.String)" class="org.apache.wml.dom.WMLSmallElementImpl" />
	<method signature="java.lang.String getId()" class="org.apache.wml.dom.WMLSmallElementImpl" />
	<method signature="java.lang.String getClassName()" class="org.apache.wml.dom.WMLSmallElementImpl" />
	<method signature="void setClassName(java.lang.String)" class="org.apache.wml.dom.WMLSmallElementImpl" />
	<method signature="void setId(java.lang.String)" class="org.apache.wml.dom.WMLSmallElementImpl" />
	<class name="org.jfree.data.function.Function2D" />
	<method signature="double getValue(double)" class="org.jfree.data.function.Function2D" />
	<class name="org.jfree.util.PaintList" />
	<method signature="java.awt.Paint getPaint(int)" class="org.jfree.util.PaintList" />
	<method signature="int hashCode()" class="org.jfree.util.PaintList" />
	<method signature="void setPaint(int,java.awt.Paint)" class="org.jfree.util.PaintList" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.util.PaintList" />
	<method signature="void &lt;init&gt;()" class="org.jfree.util.PaintList" />
	<class name="org.apache.xerces.impl.xs.identity.FieldActivator" />
	<method signature="void endValueScopeFor(org.apache.xerces.impl.xs.identity.IdentityConstraint,int)" class="org.apache.xerces.impl.xs.identity.FieldActivator" />
	<method signature="void startValueScopeFor(org.apache.xerces.impl.xs.identity.IdentityConstraint,int)" class="org.apache.xerces.impl.xs.identity.FieldActivator" />
	<method signature="org.apache.xerces.impl.xs.identity.XPathMatcher activateField(org.apache.xerces.impl.xs.identity.Field,int)" class="org.apache.xerces.impl.xs.identity.FieldActivator" />
	<class name="org.jdom2.xpath.XPath" />
	<method signature="java.lang.Number numberValueOf(java.lang.Object)" class="org.jdom2.xpath.XPath" />
	<method signature="void addNamespace(org.jdom2.Namespace)" class="org.jdom2.xpath.XPath" />
	<method signature="void addNamespace(java.lang.String,java.lang.String)" class="org.jdom2.xpath.XPath" />
	<method signature="java.util.List selectNodes(java.lang.Object)" class="org.jdom2.xpath.XPath" />
	<method signature="java.util.List selectNodes(java.lang.Object,java.lang.String)" class="org.jdom2.xpath.XPath" />
	<method signature="org.jdom2.xpath.XPath newInstance(java.lang.String)" class="org.jdom2.xpath.XPath" />
	<method signature="void setXPathClass(java.lang.Class)" class="org.jdom2.xpath.XPath" />
	<method signature="void &lt;init&gt;()" class="org.jdom2.xpath.XPath" />
	<method signature="void setVariable(java.lang.String,java.lang.Object)" class="org.jdom2.xpath.XPath" />
	<method signature="java.lang.Object selectSingleNode(java.lang.Object,java.lang.String)" class="org.jdom2.xpath.XPath" />
	<method signature="java.lang.String valueOf(java.lang.Object)" class="org.jdom2.xpath.XPath" />
	<method signature="java.lang.String getXPath()" class="org.jdom2.xpath.XPath" />
	<method signature="java.lang.Object selectSingleNode(java.lang.Object)" class="org.jdom2.xpath.XPath" />
	<class name="org.apache.xerces.stax.EmptyLocation" />
	<method signature="java.lang.String getSystemId()" class="org.apache.xerces.stax.EmptyLocation" />
	<method signature="int getCharacterOffset()" class="org.apache.xerces.stax.EmptyLocation" />
	<method signature="int getLineNumber()" class="org.apache.xerces.stax.EmptyLocation" />
	<method signature="int getColumnNumber()" class="org.apache.xerces.stax.EmptyLocation" />
	<method signature="java.lang.String getPublicId()" class="org.apache.xerces.stax.EmptyLocation" />
	<method signature="org.apache.xerces.stax.EmptyLocation getInstance()" class="org.apache.xerces.stax.EmptyLocation" />
	<class name="org.apache.xerces.xni.parser.XMLComponentManager" />
	<method signature="boolean getFeature(java.lang.String)" class="org.apache.xerces.xni.parser.XMLComponentManager" />
	<method signature="java.lang.Object getProperty(java.lang.String)" class="org.apache.xerces.xni.parser.XMLComponentManager" />
	<class name="org.jdom2.xpath.XPathDiagnostic" />
	<method signature="java.util.List getFilteredResults()" class="org.jdom2.xpath.XPathDiagnostic" />
	<method signature="java.lang.Object getContext()" class="org.jdom2.xpath.XPathDiagnostic" />
	<method signature="boolean isFirstOnly()" class="org.jdom2.xpath.XPathDiagnostic" />
	<method signature="org.jdom2.xpath.XPathExpression getXPathExpression()" class="org.jdom2.xpath.XPathDiagnostic" />
	<method signature="java.util.List getRawResults()" class="org.jdom2.xpath.XPathDiagnostic" />
	<method signature="java.util.List getResult()" class="org.jdom2.xpath.XPathDiagnostic" />
	<class name="javax.annotation.CheckForSigned" />
	<class name="org.jfree.data.time.FixedMillisecond" />
	<method signature="int compareTo(java.lang.Object)" class="org.jfree.data.time.FixedMillisecond" />
	<method signature="int hashCode()" class="org.jfree.data.time.FixedMillisecond" />
	<method signature="org.jfree.data.time.RegularTimePeriod previous()" class="org.jfree.data.time.FixedMillisecond" />
	<method signature="long getMiddleMillisecond()" class="org.jfree.data.time.FixedMillisecond" />
	<method signature="long getLastMillisecond()" class="org.jfree.data.time.FixedMillisecond" />
	<method signature="org.jfree.data.time.RegularTimePeriod next()" class="org.jfree.data.time.FixedMillisecond" />
	<method signature="long getLastMillisecond(java.util.Calendar)" class="org.jfree.data.time.FixedMillisecond" />
	<method signature="long getMiddleMillisecond(java.util.Calendar)" class="org.jfree.data.time.FixedMillisecond" />
	<method signature="void &lt;init&gt;(long)" class="org.jfree.data.time.FixedMillisecond" />
	<method signature="void &lt;init&gt;(java.util.Date)" class="org.jfree.data.time.FixedMillisecond" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.time.FixedMillisecond" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.time.FixedMillisecond" />
	<method signature="void peg(java.util.Calendar)" class="org.jfree.data.time.FixedMillisecond" />
	<method signature="long getFirstMillisecond()" class="org.jfree.data.time.FixedMillisecond" />
	<method signature="long getFirstMillisecond(java.util.Calendar)" class="org.jfree.data.time.FixedMillisecond" />
	<method signature="long getSerialIndex()" class="org.jfree.data.time.FixedMillisecond" />
	<method signature="java.util.Date getTime()" class="org.jfree.data.time.FixedMillisecond" />
	<class name="org.jfree.chart.plot.WaferMapPlot" />
	<method signature="java.lang.String getPlotType()" class="org.jfree.chart.plot.WaferMapPlot" />
	<method signature="void &lt;init&gt;(org.jfree.data.general.WaferMapDataset)" class="org.jfree.chart.plot.WaferMapPlot" />
	<method signature="void rendererChanged(org.jfree.chart.event.RendererChangeEvent)" class="org.jfree.chart.plot.WaferMapPlot" />
	<method signature="void setDataset(org.jfree.data.general.WaferMapDataset)" class="org.jfree.chart.plot.WaferMapPlot" />
	<method signature="org.jfree.data.general.WaferMapDataset getDataset()" class="org.jfree.chart.plot.WaferMapPlot" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.plot.WaferMapPlot" />
	<method signature="void setRenderer(org.jfree.chart.renderer.WaferMapRenderer)" class="org.jfree.chart.plot.WaferMapPlot" />
	<method signature="org.jfree.chart.LegendItemCollection getLegendItems()" class="org.jfree.chart.plot.WaferMapPlot" />
	<method signature="void &lt;init&gt;(org.jfree.data.general.WaferMapDataset,org.jfree.chart.renderer.WaferMapRenderer)" class="org.jfree.chart.plot.WaferMapPlot" />
	<method signature="void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.plot.WaferMapPlot" />
	<class name="com.google.zxing.pdf417.PDF417Reader" />
	<method signature="com.google.zxing.Result decode(com.google.zxing.BinaryBitmap)" class="com.google.zxing.pdf417.PDF417Reader" />
	<method signature="void reset()" class="com.google.zxing.pdf417.PDF417Reader" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.pdf417.PDF417Reader" />
	<method signature="com.google.zxing.Result decode(com.google.zxing.BinaryBitmap,java.util.Map)" class="com.google.zxing.pdf417.PDF417Reader" />
	<class name="org.jfree.data.general.SeriesChangeEvent" />
	<method signature="void &lt;init&gt;(java.lang.Object)" class="org.jfree.data.general.SeriesChangeEvent" />
	<class name="org.apache.html.dom.HTMLTextAreaElementImpl" />
	<method signature="void setAccessKey(java.lang.String)" class="org.apache.html.dom.HTMLTextAreaElementImpl" />
	<method signature="java.lang.String getName()" class="org.apache.html.dom.HTMLTextAreaElementImpl" />
	<method signature="void setValue(java.lang.String)" class="org.apache.html.dom.HTMLTextAreaElementImpl" />
	<method signature="int getCols()" class="org.apache.html.dom.HTMLTextAreaElementImpl" />
	<method signature="void setCols(int)" class="org.apache.html.dom.HTMLTextAreaElementImpl" />
	<method signature="boolean getReadOnly()" class="org.apache.html.dom.HTMLTextAreaElementImpl" />
	<method signature="void setReadOnly(boolean)" class="org.apache.html.dom.HTMLTextAreaElementImpl" />
	<method signature="void setRows(int)" class="org.apache.html.dom.HTMLTextAreaElementImpl" />
	<method signature="void setTabIndex(int)" class="org.apache.html.dom.HTMLTextAreaElementImpl" />
	<method signature="java.lang.String getDefaultValue()" class="org.apache.html.dom.HTMLTextAreaElementImpl" />
	<method signature="boolean getDisabled()" class="org.apache.html.dom.HTMLTextAreaElementImpl" />
	<method signature="void setDisabled(boolean)" class="org.apache.html.dom.HTMLTextAreaElementImpl" />
	<method signature="java.lang.String getValue()" class="org.apache.html.dom.HTMLTextAreaElementImpl" />
	<method signature="void blur()" class="org.apache.html.dom.HTMLTextAreaElementImpl" />
	<method signature="void focus()" class="org.apache.html.dom.HTMLTextAreaElementImpl" />
	<method signature="int getTabIndex()" class="org.apache.html.dom.HTMLTextAreaElementImpl" />
	<method signature="void setDefaultValue(java.lang.String)" class="org.apache.html.dom.HTMLTextAreaElementImpl" />
	<method signature="void setName(java.lang.String)" class="org.apache.html.dom.HTMLTextAreaElementImpl" />
	<method signature="java.lang.String getType()" class="org.apache.html.dom.HTMLTextAreaElementImpl" />
	<method signature="void select()" class="org.apache.html.dom.HTMLTextAreaElementImpl" />
	<method signature="java.lang.String getAccessKey()" class="org.apache.html.dom.HTMLTextAreaElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLTextAreaElementImpl" />
	<method signature="int getRows()" class="org.apache.html.dom.HTMLTextAreaElementImpl" />
	<class name="org.unbescape.uri.UriEscape" />
	<method signature="void escapeUriPathSegment(char[],int,int,java.io.Writer)" class="org.unbescape.uri.UriEscape" />
	<method signature="java.lang.String unescapeUriQueryParam(java.lang.String)" class="org.unbescape.uri.UriEscape" />
	<method signature="void unescapeUriFragmentId(char[],int,int,java.io.Writer,java.lang.String)" class="org.unbescape.uri.UriEscape" />
	<method signature="java.lang.String escapeUriFragmentId(java.lang.String)" class="org.unbescape.uri.UriEscape" />
	<method signature="java.lang.String unescapeUriFragmentId(java.lang.String,java.lang.String)" class="org.unbescape.uri.UriEscape" />
	<method signature="java.lang.String unescapeUriPath(java.lang.String)" class="org.unbescape.uri.UriEscape" />
	<method signature="void escapeUriPath(char[],int,int,java.io.Writer,java.lang.String)" class="org.unbescape.uri.UriEscape" />
	<method signature="java.lang.String escapeUriPath(java.lang.String,java.lang.String)" class="org.unbescape.uri.UriEscape" />
	<method signature="void escapeUriQueryParam(char[],int,int,java.io.Writer)" class="org.unbescape.uri.UriEscape" />
	<method signature="java.lang.String unescapeUriPathSegment(java.lang.String,java.lang.String)" class="org.unbescape.uri.UriEscape" />
	<method signature="void unescapeUriPathSegment(char[],int,int,java.io.Writer,java.lang.String)" class="org.unbescape.uri.UriEscape" />
	<method signature="java.lang.String escapeUriQueryParam(java.lang.String)" class="org.unbescape.uri.UriEscape" />
	<method signature="java.lang.String escapeUriPathSegment(java.lang.String)" class="org.unbescape.uri.UriEscape" />
	<method signature="void unescapeUriQueryParam(char[],int,int,java.io.Writer)" class="org.unbescape.uri.UriEscape" />
	<method signature="void escapeUriFragmentId(char[],int,int,java.io.Writer)" class="org.unbescape.uri.UriEscape" />
	<method signature="void unescapeUriPath(char[],int,int,java.io.Writer)" class="org.unbescape.uri.UriEscape" />
	<method signature="java.lang.String escapeUriPathSegment(java.lang.String,java.lang.String)" class="org.unbescape.uri.UriEscape" />
	<method signature="void unescapeUriFragmentId(char[],int,int,java.io.Writer)" class="org.unbescape.uri.UriEscape" />
	<method signature="void escapeUriPathSegment(char[],int,int,java.io.Writer,java.lang.String)" class="org.unbescape.uri.UriEscape" />
	<method signature="java.lang.String unescapeUriPathSegment(java.lang.String)" class="org.unbescape.uri.UriEscape" />
	<method signature="void escapeUriQueryParam(char[],int,int,java.io.Writer,java.lang.String)" class="org.unbescape.uri.UriEscape" />
	<method signature="void escapeUriPath(char[],int,int,java.io.Writer)" class="org.unbescape.uri.UriEscape" />
	<method signature="java.lang.String escapeUriQueryParam(java.lang.String,java.lang.String)" class="org.unbescape.uri.UriEscape" />
	<method signature="void unescapeUriPathSegment(char[],int,int,java.io.Writer)" class="org.unbescape.uri.UriEscape" />
	<method signature="java.lang.String escapeUriPath(java.lang.String)" class="org.unbescape.uri.UriEscape" />
	<method signature="void unescapeUriPath(char[],int,int,java.io.Writer,java.lang.String)" class="org.unbescape.uri.UriEscape" />
	<method signature="void escapeUriFragmentId(char[],int,int,java.io.Writer,java.lang.String)" class="org.unbescape.uri.UriEscape" />
	<method signature="java.lang.String unescapeUriQueryParam(java.lang.String,java.lang.String)" class="org.unbescape.uri.UriEscape" />
	<method signature="java.lang.String escapeUriFragmentId(java.lang.String,java.lang.String)" class="org.unbescape.uri.UriEscape" />
	<method signature="void unescapeUriQueryParam(char[],int,int,java.io.Writer,java.lang.String)" class="org.unbescape.uri.UriEscape" />
	<method signature="java.lang.String unescapeUriFragmentId(java.lang.String)" class="org.unbescape.uri.UriEscape" />
	<method signature="java.lang.String unescapeUriPath(java.lang.String,java.lang.String)" class="org.unbescape.uri.UriEscape" />
	<class name="org.apache.xerces.impl.xs.XMLSchemaValidator" />
	<method signature="java.lang.String[] getRecognizedProperties()" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
	<method signature="void processingInstruction(java.lang.String,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
	<method signature="void endElement(org.apache.xerces.xni.QName,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
	<method signature="java.lang.Boolean getFeatureDefault(java.lang.String)" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
	<method signature="void doctypeDecl(java.lang.String,java.lang.String,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
	<method signature="void reset(org.apache.xerces.xni.parser.XMLComponentManager)" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
	<method signature="void ignorableWhitespace(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
	<method signature="void textDecl(java.lang.String,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
	<method signature="void emptyElement(org.apache.xerces.xni.QName,org.apache.xerces.xni.XMLAttributes,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
	<method signature="org.apache.xerces.impl.xs.identity.XPathMatcher activateField(org.apache.xerces.impl.xs.identity.Field,int)" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
	<method signature="org.apache.xerces.impl.xs.XSElementDecl getGlobalElementDecl(org.apache.xerces.xni.QName)" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
	<method signature="void startValueScopeFor(org.apache.xerces.impl.xs.identity.IdentityConstraint,int)" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
	<method signature="java.lang.String[] getRecognizedFeatures()" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
	<method signature="void endDocument(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
	<method signature="void startElement(org.apache.xerces.xni.QName,org.apache.xerces.xni.XMLAttributes,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
	<method signature="void startDocument(org.apache.xerces.xni.XMLLocator,java.lang.String,org.apache.xerces.xni.NamespaceContext,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
	<method signature="void startGeneralEntity(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
	<method signature="void endGeneralEntity(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
	<method signature="void elementDefault(java.lang.String)" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
	<method signature="void endValueScopeFor(org.apache.xerces.impl.xs.identity.IdentityConstraint,int)" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
	<method signature="void setDocumentSource(org.apache.xerces.xni.parser.XMLDocumentSource)" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
	<method signature="void setDocumentHandler(org.apache.xerces.xni.XMLDocumentHandler)" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
	<method signature="void startCDATA(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
	<method signature="void endCDATA(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
	<method signature="org.apache.xerces.xni.parser.XMLDocumentSource getDocumentSource()" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
	<method signature="void characters(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
	<method signature="void setFeature(java.lang.String,boolean)" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
	<method signature="void xmlDecl(java.lang.String,java.lang.String,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
	<method signature="org.apache.xerces.xni.XMLDocumentHandler getDocumentHandler()" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
	<method signature="java.lang.Object getPropertyDefault(java.lang.String)" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
	<method signature="void comment(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
	<method signature="boolean characterData(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
	<class name="org.apache.xerces.xni.XMLAttributes" />
	<method signature="java.lang.String getType(java.lang.String)" class="org.apache.xerces.xni.XMLAttributes" />
	<method signature="java.lang.String getValue(java.lang.String)" class="org.apache.xerces.xni.XMLAttributes" />
	<method signature="void setName(int,org.apache.xerces.xni.QName)" class="org.apache.xerces.xni.XMLAttributes" />
	<method signature="void setSpecified(int,boolean)" class="org.apache.xerces.xni.XMLAttributes" />
	<method signature="void getName(int,org.apache.xerces.xni.QName)" class="org.apache.xerces.xni.XMLAttributes" />
	<method signature="java.lang.String getQName(int)" class="org.apache.xerces.xni.XMLAttributes" />
	<method signature="int getLength()" class="org.apache.xerces.xni.XMLAttributes" />
	<method signature="boolean isSpecified(int)" class="org.apache.xerces.xni.XMLAttributes" />
	<method signature="int getIndex(java.lang.String)" class="org.apache.xerces.xni.XMLAttributes" />
	<method signature="void setAugmentations(int,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLAttributes" />
	<method signature="void removeAllAttributes()" class="org.apache.xerces.xni.XMLAttributes" />
	<method signature="void setNonNormalizedValue(int,java.lang.String)" class="org.apache.xerces.xni.XMLAttributes" />
	<method signature="int addAttribute(org.apache.xerces.xni.QName,java.lang.String,java.lang.String)" class="org.apache.xerces.xni.XMLAttributes" />
	<method signature="org.apache.xerces.xni.Augmentations getAugmentations(int)" class="org.apache.xerces.xni.XMLAttributes" />
	<method signature="void removeAttributeAt(int)" class="org.apache.xerces.xni.XMLAttributes" />
	<method signature="java.lang.String getValue(int)" class="org.apache.xerces.xni.XMLAttributes" />
	<method signature="java.lang.String getLocalName(int)" class="org.apache.xerces.xni.XMLAttributes" />
	<method signature="java.lang.String getType(int)" class="org.apache.xerces.xni.XMLAttributes" />
	<method signature="int getIndex(java.lang.String,java.lang.String)" class="org.apache.xerces.xni.XMLAttributes" />
	<method signature="void setType(int,java.lang.String)" class="org.apache.xerces.xni.XMLAttributes" />
	<method signature="java.lang.String getURI(int)" class="org.apache.xerces.xni.XMLAttributes" />
	<method signature="org.apache.xerces.xni.Augmentations getAugmentations(java.lang.String)" class="org.apache.xerces.xni.XMLAttributes" />
	<method signature="java.lang.String getPrefix(int)" class="org.apache.xerces.xni.XMLAttributes" />
	<method signature="void setValue(int,java.lang.String)" class="org.apache.xerces.xni.XMLAttributes" />
	<method signature="org.apache.xerces.xni.Augmentations getAugmentations(java.lang.String,java.lang.String)" class="org.apache.xerces.xni.XMLAttributes" />
	<method signature="java.lang.String getType(java.lang.String,java.lang.String)" class="org.apache.xerces.xni.XMLAttributes" />
	<method signature="java.lang.String getNonNormalizedValue(int)" class="org.apache.xerces.xni.XMLAttributes" />
	<method signature="java.lang.String getValue(java.lang.String,java.lang.String)" class="org.apache.xerces.xni.XMLAttributes" />
	<class name="org.jfree.ui.InsetsTextField" />
	<method signature="void setInsets(java.awt.Insets)" class="org.jfree.ui.InsetsTextField" />
	<method signature="java.lang.String formatInsetsString(java.awt.Insets)" class="org.jfree.ui.InsetsTextField" />
	<method signature="void &lt;init&gt;(java.awt.Insets)" class="org.jfree.ui.InsetsTextField" />
	<class name="org.jfree.chart.renderer.WaferMapRenderer" />
	<method signature="org.jfree.chart.plot.WaferMapPlot getPlot()" class="org.jfree.chart.renderer.WaferMapRenderer" />
	<method signature="org.jfree.chart.LegendItemCollection getLegendCollection()" class="org.jfree.chart.renderer.WaferMapRenderer" />
	<method signature="org.jfree.chart.plot.DrawingSupplier getDrawingSupplier()" class="org.jfree.chart.renderer.WaferMapRenderer" />
	<method signature="void &lt;init&gt;(int,int)" class="org.jfree.chart.renderer.WaferMapRenderer" />
	<method signature="java.awt.Paint getChipColor(java.lang.Number)" class="org.jfree.chart.renderer.WaferMapRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.WaferMapRenderer" />
	<method signature="void setPlot(org.jfree.chart.plot.WaferMapPlot)" class="org.jfree.chart.renderer.WaferMapRenderer" />
	<method signature="void &lt;init&gt;(java.lang.Integer,java.lang.Integer)" class="org.jfree.chart.renderer.WaferMapRenderer" />
	<class name="org.w3c.dom.css.CSSValue" />
	<method signature="java.lang.String getCssText()" class="org.w3c.dom.css.CSSValue" />
	<method signature="void setCssText(java.lang.String)" class="org.w3c.dom.css.CSSValue" />
	<method signature="short getCssValueType()" class="org.w3c.dom.css.CSSValue" />
	<class name="org.apache.xerces.impl.xs.identity.Field" />
	<method signature="org.apache.xerces.impl.xpath.XPath getXPath()" class="org.apache.xerces.impl.xs.identity.Field" />
	<method signature="org.apache.xerces.impl.xs.identity.IdentityConstraint getIdentityConstraint()" class="org.apache.xerces.impl.xs.identity.Field" />
	<method signature="void &lt;init&gt;(org.apache.xerces.impl.xs.identity.Field$XPath,org.apache.xerces.impl.xs.identity.IdentityConstraint)" class="org.apache.xerces.impl.xs.identity.Field" />
	<method signature="java.lang.String toString()" class="org.apache.xerces.impl.xs.identity.Field" />
	<method signature="org.apache.xerces.impl.xs.identity.XPathMatcher createMatcher(org.apache.xerces.impl.xs.identity.ValueStore)" class="org.apache.xerces.impl.xs.identity.Field" />
	<class name="org.jfree.chart.axis.StandardTickUnitSource" />
	<method signature="int hashCode()" class="org.jfree.chart.axis.StandardTickUnitSource" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.axis.StandardTickUnitSource" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.axis.StandardTickUnitSource" />
	<method signature="org.jfree.chart.axis.TickUnit getLargerTickUnit(org.jfree.chart.axis.TickUnit)" class="org.jfree.chart.axis.StandardTickUnitSource" />
	<method signature="org.jfree.chart.axis.TickUnit getCeilingTickUnit(org.jfree.chart.axis.TickUnit)" class="org.jfree.chart.axis.StandardTickUnitSource" />
	<method signature="org.jfree.chart.axis.TickUnit getCeilingTickUnit(double)" class="org.jfree.chart.axis.StandardTickUnitSource" />
	<class name="org.jfree.ui.SortableTable" />
	<method signature="void setSortableModel(org.jfree.ui.SortableTableModel)" class="org.jfree.ui.SortableTable" />
	<method signature="void &lt;init&gt;(org.jfree.ui.SortableTableModel)" class="org.jfree.ui.SortableTable" />
	<class name="org.apache.xerces.impl.XMLEntityHandler" />
	<method signature="void endEntity(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.XMLEntityHandler" />
	<method signature="void startEntity(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.XMLEntityHandler" />
	<class name="freemarker.template.TemplateDirectiveModel" />
	<method signature="void execute(freemarker.core.Environment,java.util.Map,freemarker.template.TemplateModel[],freemarker.template.TemplateDirectiveBody)" class="freemarker.template.TemplateDirectiveModel" />
	<class name="javax.xml.validation.Validator" />
	<method signature="void reset()" class="javax.xml.validation.Validator" />
	<method signature="void validate(javax.xml.transform.Source,javax.xml.transform.Result)" class="javax.xml.validation.Validator" />
	<method signature="org.xml.sax.ErrorHandler getErrorHandler()" class="javax.xml.validation.Validator" />
	<method signature="void setResourceResolver(org.w3c.dom.ls.LSResourceResolver)" class="javax.xml.validation.Validator" />
	<method signature="boolean getFeature(java.lang.String)" class="javax.xml.validation.Validator" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="javax.xml.validation.Validator" />
	<method signature="void validate(javax.xml.transform.Source)" class="javax.xml.validation.Validator" />
	<method signature="org.w3c.dom.ls.LSResourceResolver getResourceResolver()" class="javax.xml.validation.Validator" />
	<method signature="void setFeature(java.lang.String,boolean)" class="javax.xml.validation.Validator" />
	<method signature="void setErrorHandler(org.xml.sax.ErrorHandler)" class="javax.xml.validation.Validator" />
	<method signature="java.lang.Object getProperty(java.lang.String)" class="javax.xml.validation.Validator" />
	<class name="org.apache.xerces.util.DOMEntityResolverWrapper" />
	<method signature="void &lt;init&gt;(org.w3c.dom.ls.LSResourceResolver)" class="org.apache.xerces.util.DOMEntityResolverWrapper" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.util.DOMEntityResolverWrapper" />
	<method signature="org.apache.xerces.xni.parser.XMLInputSource resolveEntity(org.apache.xerces.xni.XMLResourceIdentifier)" class="org.apache.xerces.util.DOMEntityResolverWrapper" />
	<method signature="void setEntityResolver(org.w3c.dom.ls.LSResourceResolver)" class="org.apache.xerces.util.DOMEntityResolverWrapper" />
	<method signature="org.w3c.dom.ls.LSResourceResolver getEntityResolver()" class="org.apache.xerces.util.DOMEntityResolverWrapper" />
	<class name="org.jfree.chart.entity.TickLabelEntity" />
	<method signature="void &lt;init&gt;(java.awt.Shape,java.lang.String,java.lang.String)" class="org.jfree.chart.entity.TickLabelEntity" />
	<class name="com.google.zxing.oned.EAN8Reader" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.oned.EAN8Reader" />
	<class name="org.jfree.ui.ExtensionFileFilter" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="org.jfree.ui.ExtensionFileFilter" />
	<method signature="boolean accept(java.io.File)" class="org.jfree.ui.ExtensionFileFilter" />
	<method signature="java.lang.String getDescription()" class="org.jfree.ui.ExtensionFileFilter" />
	<class name="org.apache.commons.lang3.text.StrMatcher" />
	<method signature="org.apache.commons.lang3.text.StrMatcher spaceMatcher()" class="org.apache.commons.lang3.text.StrMatcher" />
	<method signature="org.apache.commons.lang3.text.StrMatcher charSetMatcher(char[])" class="org.apache.commons.lang3.text.StrMatcher" />
	<method signature="org.apache.commons.lang3.text.StrMatcher commaMatcher()" class="org.apache.commons.lang3.text.StrMatcher" />
	<method signature="org.apache.commons.lang3.text.StrMatcher splitMatcher()" class="org.apache.commons.lang3.text.StrMatcher" />
	<method signature="org.apache.commons.lang3.text.StrMatcher singleQuoteMatcher()" class="org.apache.commons.lang3.text.StrMatcher" />
	<method signature="org.apache.commons.lang3.text.StrMatcher stringMatcher(java.lang.String)" class="org.apache.commons.lang3.text.StrMatcher" />
	<method signature="org.apache.commons.lang3.text.StrMatcher doubleQuoteMatcher()" class="org.apache.commons.lang3.text.StrMatcher" />
	<method signature="org.apache.commons.lang3.text.StrMatcher charSetMatcher(java.lang.String)" class="org.apache.commons.lang3.text.StrMatcher" />
	<method signature="int isMatch(char[],int)" class="org.apache.commons.lang3.text.StrMatcher" />
	<method signature="int isMatch(char[],int,int,int)" class="org.apache.commons.lang3.text.StrMatcher" />
	<method signature="org.apache.commons.lang3.text.StrMatcher noneMatcher()" class="org.apache.commons.lang3.text.StrMatcher" />
	<method signature="org.apache.commons.lang3.text.StrMatcher trimMatcher()" class="org.apache.commons.lang3.text.StrMatcher" />
	<method signature="org.apache.commons.lang3.text.StrMatcher tabMatcher()" class="org.apache.commons.lang3.text.StrMatcher" />
	<method signature="org.apache.commons.lang3.text.StrMatcher charMatcher(char)" class="org.apache.commons.lang3.text.StrMatcher" />
	<method signature="org.apache.commons.lang3.text.StrMatcher quoteMatcher()" class="org.apache.commons.lang3.text.StrMatcher" />
	<class name="org.xml.sax.helpers.AttributesImpl" />
	<method signature="java.lang.String getType(java.lang.String)" class="org.xml.sax.helpers.AttributesImpl" />
	<method signature="void removeAttribute(int)" class="org.xml.sax.helpers.AttributesImpl" />
	<method signature="java.lang.String getValue(java.lang.String)" class="org.xml.sax.helpers.AttributesImpl" />
	<method signature="java.lang.String getQName(int)" class="org.xml.sax.helpers.AttributesImpl" />
	<method signature="int getLength()" class="org.xml.sax.helpers.AttributesImpl" />
	<method signature="void setAttributes(org.xml.sax.Attributes)" class="org.xml.sax.helpers.AttributesImpl" />
	<method signature="void clear()" class="org.xml.sax.helpers.AttributesImpl" />
	<method signature="int getIndex(java.lang.String)" class="org.xml.sax.helpers.AttributesImpl" />
	<method signature="void &lt;init&gt;()" class="org.xml.sax.helpers.AttributesImpl" />
	<method signature="void setQName(int,java.lang.String)" class="org.xml.sax.helpers.AttributesImpl" />
	<method signature="void setAttribute(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.xml.sax.helpers.AttributesImpl" />
	<method signature="java.lang.String getValue(int)" class="org.xml.sax.helpers.AttributesImpl" />
	<method signature="java.lang.String getLocalName(int)" class="org.xml.sax.helpers.AttributesImpl" />
	<method signature="java.lang.String getType(int)" class="org.xml.sax.helpers.AttributesImpl" />
	<method signature="void &lt;init&gt;(org.xml.sax.Attributes)" class="org.xml.sax.helpers.AttributesImpl" />
	<method signature="int getIndex(java.lang.String,java.lang.String)" class="org.xml.sax.helpers.AttributesImpl" />
	<method signature="void setType(int,java.lang.String)" class="org.xml.sax.helpers.AttributesImpl" />
	<method signature="void setURI(int,java.lang.String)" class="org.xml.sax.helpers.AttributesImpl" />
	<method signature="java.lang.String getURI(int)" class="org.xml.sax.helpers.AttributesImpl" />
	<method signature="void addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.xml.sax.helpers.AttributesImpl" />
	<method signature="void setValue(int,java.lang.String)" class="org.xml.sax.helpers.AttributesImpl" />
	<method signature="void setLocalName(int,java.lang.String)" class="org.xml.sax.helpers.AttributesImpl" />
	<method signature="java.lang.String getType(java.lang.String,java.lang.String)" class="org.xml.sax.helpers.AttributesImpl" />
	<method signature="java.lang.String getValue(java.lang.String,java.lang.String)" class="org.xml.sax.helpers.AttributesImpl" />
	<class name="javax.xml.parsers.DocumentBuilder" />
	<method signature="org.w3c.dom.DOMImplementation getDOMImplementation()" class="javax.xml.parsers.DocumentBuilder" />
	<method signature="boolean isXIncludeAware()" class="javax.xml.parsers.DocumentBuilder" />
	<method signature="void reset()" class="javax.xml.parsers.DocumentBuilder" />
	<method signature="org.w3c.dom.Document parse(java.io.InputStream)" class="javax.xml.parsers.DocumentBuilder" />
	<method signature="org.w3c.dom.Document parse(org.xml.sax.InputSource)" class="javax.xml.parsers.DocumentBuilder" />
	<method signature="org.w3c.dom.Document parse(java.io.InputStream,java.lang.String)" class="javax.xml.parsers.DocumentBuilder" />
	<method signature="org.w3c.dom.Document newDocument()" class="javax.xml.parsers.DocumentBuilder" />
	<method signature="javax.xml.validation.Schema getSchema()" class="javax.xml.parsers.DocumentBuilder" />
	<method signature="boolean isValidating()" class="javax.xml.parsers.DocumentBuilder" />
	<method signature="org.w3c.dom.Document parse(java.io.File)" class="javax.xml.parsers.DocumentBuilder" />
	<method signature="boolean isNamespaceAware()" class="javax.xml.parsers.DocumentBuilder" />
	<method signature="void setEntityResolver(org.xml.sax.EntityResolver)" class="javax.xml.parsers.DocumentBuilder" />
	<method signature="org.w3c.dom.Document parse(java.lang.String)" class="javax.xml.parsers.DocumentBuilder" />
	<method signature="void setErrorHandler(org.xml.sax.ErrorHandler)" class="javax.xml.parsers.DocumentBuilder" />
	<class name="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String[] splitByCharacterTypeCamelCase(java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="boolean isAnyEmpty(java.lang.CharSequence[])" class="org.apache.commons.lang3.StringUtils" />
	<method signature="int lastIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String center(java.lang.String,int)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String abbreviate(java.lang.String,int)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="boolean containsAny(java.lang.CharSequence,java.lang.CharSequence)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="int lastIndexOf(java.lang.CharSequence,int,int)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String strip(java.lang.String,java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="boolean isAnyBlank(java.lang.CharSequence[])" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String[] split(java.lang.String,java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String substring(java.lang.String,int,int)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String replaceEachRepeatedly(java.lang.String,java.lang.String[],java.lang.String[])" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String defaultString(java.lang.String,java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String[] split(java.lang.String,java.lang.String,int)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="int indexOfAnyBut(java.lang.CharSequence,java.lang.CharSequence)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String join(long[],char)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="boolean equals(java.lang.CharSequence,java.lang.CharSequence)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String join(java.lang.Object[],java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String appendIfMissingIgnoreCase(java.lang.String,java.lang.CharSequence,java.lang.CharSequence[])" class="org.apache.commons.lang3.StringUtils" />
	<method signature="boolean isAllUpperCase(java.lang.CharSequence)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String lowerCase(java.lang.String,java.util.Locale)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String join(java.lang.Iterable,java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String removeEnd(java.lang.String,java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String join(int[],char)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String toString(byte[],java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String rightPad(java.lang.String,int)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="int ordinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="boolean isAsciiPrintable(java.lang.CharSequence)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String replaceChars(java.lang.String,java.lang.String,java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String lowerCase(java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String join(java.lang.Object[],char,int,int)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String removeStart(java.lang.String,java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String removeStartIgnoreCase(java.lang.String,java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="int lastOrdinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String join(int[],char,int,int)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String normalizeSpace(java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="boolean containsOnly(java.lang.CharSequence,java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="boolean endsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="int indexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String join(float[],char)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String right(java.lang.String,int)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String join(byte[],char)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.CharSequence defaultIfEmpty(java.lang.CharSequence,java.lang.CharSequence)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="int lastIndexOfAny(java.lang.CharSequence,java.lang.CharSequence[])" class="org.apache.commons.lang3.StringUtils" />
	<method signature="int indexOf(java.lang.CharSequence,java.lang.CharSequence)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String join(double[],char)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String chomp(java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String leftPad(java.lang.String,int)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String substringBetween(java.lang.String,java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String join(float[],char,int,int)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="boolean isAlphaSpace(java.lang.CharSequence)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.CharSequence defaultIfBlank(java.lang.CharSequence,java.lang.CharSequence)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="int lastIndexOf(java.lang.CharSequence,int)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="int getFuzzyDistance(java.lang.CharSequence,java.lang.CharSequence,java.util.Locale)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="boolean startsWith(java.lang.CharSequence,java.lang.CharSequence)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="boolean startsWithAny(java.lang.CharSequence,java.lang.CharSequence[])" class="org.apache.commons.lang3.StringUtils" />
	<method signature="int indexOfDifference(java.lang.CharSequence[])" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String[] splitPreserveAllTokens(java.lang.String,java.lang.String,int)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String join(java.lang.Iterable,char)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="double getJaroWinklerDistance(java.lang.CharSequence,java.lang.CharSequence)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String join(short[],char)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String left(java.lang.String,int)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String[] splitPreserveAllTokens(java.lang.String,java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String capitalize(java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String repeat(java.lang.String,java.lang.String,int)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="int lastIndexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence,int)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String prependIfMissing(java.lang.String,java.lang.CharSequence,java.lang.CharSequence[])" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String join(java.lang.Object[])" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String replacePattern(java.lang.String,java.lang.String,java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String trim(java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String join(java.util.Iterator,java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String[] splitByCharacterType(java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="boolean containsOnly(java.lang.CharSequence,char[])" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String replaceOnce(java.lang.String,java.lang.String,java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="boolean contains(java.lang.CharSequence,int)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String stripAccents(java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String abbreviate(java.lang.String,int,int)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String stripToEmpty(java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String prependIfMissingIgnoreCase(java.lang.String,java.lang.CharSequence,java.lang.CharSequence[])" class="org.apache.commons.lang3.StringUtils" />
	<method signature="int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="boolean endsWith(java.lang.CharSequence,java.lang.CharSequence)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String stripToNull(java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="boolean contains(java.lang.CharSequence,java.lang.CharSequence)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String[] split(java.lang.String,char)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String join(java.lang.Object[],java.lang.String,int,int)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="int countMatches(java.lang.CharSequence,java.lang.CharSequence)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="int indexOfAny(java.lang.CharSequence,java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="boolean isNoneEmpty(java.lang.CharSequence[])" class="org.apache.commons.lang3.StringUtils" />
	<method signature="boolean isBlank(java.lang.CharSequence)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String center(java.lang.String,int,char)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String[] splitPreserveAllTokens(java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="int lastIndexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String substring(java.lang.String,int)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String substringBetween(java.lang.String,java.lang.String,java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String join(char[],char)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="boolean equalsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String center(java.lang.String,int,java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String trimToNull(java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="boolean endsWithAny(java.lang.CharSequence,java.lang.CharSequence[])" class="org.apache.commons.lang3.StringUtils" />
	<method signature="int length(java.lang.CharSequence)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String replaceEach(java.lang.String,java.lang.String[],java.lang.String[])" class="org.apache.commons.lang3.StringUtils" />
	<method signature="boolean isEmpty(java.lang.CharSequence)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String repeat(java.lang.String,int)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String stripStart(java.lang.String,java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String remove(java.lang.String,java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String upperCase(java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String join(byte[],char,int,int)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="boolean startsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String repeat(char,int)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="boolean isNotBlank(java.lang.CharSequence)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String rightPad(java.lang.String,int,char)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String defaultString(java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String removeEndIgnoreCase(java.lang.String,java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String replaceChars(java.lang.String,char,char)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String substringAfter(java.lang.String,java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String toEncodedString(byte[],java.nio.charset.Charset)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String join(short[],char,int,int)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String strip(java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String join(java.util.Iterator,char)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="boolean isNumeric(java.lang.CharSequence)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="int countMatches(java.lang.CharSequence,char)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="int indexOf(java.lang.CharSequence,java.lang.CharSequence,int)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String swapCase(java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="boolean isNotEmpty(java.lang.CharSequence)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="boolean containsNone(java.lang.CharSequence,char[])" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String wrap(java.lang.String,char)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String rightPad(java.lang.String,int,java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String join(java.lang.Object[],char)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String upperCase(java.lang.String,java.util.Locale)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="boolean isWhitespace(java.lang.CharSequence)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="boolean containsWhitespace(java.lang.CharSequence)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="int indexOf(java.lang.CharSequence,int,int)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String[] substringsBetween(java.lang.String,java.lang.String,java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String replace(java.lang.String,java.lang.String,java.lang.String,int)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String[] stripAll(java.lang.String[],java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String leftPad(java.lang.String,int,java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="int indexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence,int)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="boolean isAlphanumeric(java.lang.CharSequence)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String uncapitalize(java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="boolean containsAny(java.lang.CharSequence,java.lang.CharSequence[])" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String[] splitByWholeSeparatorPreserveAllTokens(java.lang.String,java.lang.String,int)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String substringAfterLast(java.lang.String,java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String join(long[],char,int,int)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String[] splitByWholeSeparatorPreserveAllTokens(java.lang.String,java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String reverse(java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String[] stripAll(java.lang.String[])" class="org.apache.commons.lang3.StringUtils" />
	<method signature="int indexOfAny(java.lang.CharSequence,char[])" class="org.apache.commons.lang3.StringUtils" />
	<method signature="int indexOfAnyBut(java.lang.CharSequence,char[])" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String[] splitByWholeSeparator(java.lang.String,java.lang.String,int)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String deleteWhitespace(java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="int indexOfDifference(java.lang.CharSequence,java.lang.CharSequence)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String substringBeforeLast(java.lang.String,java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String mid(java.lang.String,int,int)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="int indexOf(java.lang.CharSequence,int)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String substringBefore(java.lang.String,java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String[] splitByWholeSeparator(java.lang.String,java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String difference(java.lang.String,java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="boolean isAllLowerCase(java.lang.CharSequence)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="boolean isNumericSpace(java.lang.CharSequence)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String getCommonPrefix(java.lang.String[])" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String leftPad(java.lang.String,int,char)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String join(double[],char,int,int)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String remove(java.lang.String,char)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="boolean isAlphanumericSpace(java.lang.CharSequence)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String join(char[],char,int,int)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="boolean containsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String stripEnd(java.lang.String,java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="int indexOfAny(java.lang.CharSequence,java.lang.CharSequence[])" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String trimToEmpty(java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String chop(java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="boolean isNoneBlank(java.lang.CharSequence[])" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String appendIfMissing(java.lang.String,java.lang.CharSequence,java.lang.CharSequence[])" class="org.apache.commons.lang3.StringUtils" />
	<method signature="boolean containsNone(java.lang.CharSequence,java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String chomp(java.lang.String,java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String abbreviateMiddle(java.lang.String,java.lang.String,int)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String[] split(java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="boolean containsAny(java.lang.CharSequence,char[])" class="org.apache.commons.lang3.StringUtils" />
	<method signature="int lastIndexOf(java.lang.CharSequence,java.lang.CharSequence)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String wrap(java.lang.String,java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="boolean isAlpha(java.lang.CharSequence)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String overlay(java.lang.String,java.lang.String,int,int)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String[] splitPreserveAllTokens(java.lang.String,char)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String removePattern(java.lang.String,java.lang.String)" class="org.apache.commons.lang3.StringUtils" />
	<method signature="java.lang.String reverseDelimited(java.lang.String,char)" class="org.apache.commons.lang3.StringUtils" />
	<class name="org.jdom2.adapters.JAXPDOMAdapter" />
	<method signature="void &lt;init&gt;()" class="org.jdom2.adapters.JAXPDOMAdapter" />
	<method signature="org.w3c.dom.Document createDocument()" class="org.jdom2.adapters.JAXPDOMAdapter" />
	<class name="javax.xml.bind.DatatypeConverterInterface" />
	<method signature="short parseShort(java.lang.String)" class="javax.xml.bind.DatatypeConverterInterface" />
	<method signature="java.lang.String parseString(java.lang.String)" class="javax.xml.bind.DatatypeConverterInterface" />
	<method signature="long parseUnsignedInt(java.lang.String)" class="javax.xml.bind.DatatypeConverterInterface" />
	<method signature="java.lang.String printUnsignedShort(int)" class="javax.xml.bind.DatatypeConverterInterface" />
	<method signature="java.lang.String printDouble(double)" class="javax.xml.bind.DatatypeConverterInterface" />
	<method signature="java.lang.String printString(java.lang.String)" class="javax.xml.bind.DatatypeConverterInterface" />
	<method signature="double parseDouble(java.lang.String)" class="javax.xml.bind.DatatypeConverterInterface" />
	<method signature="java.math.BigDecimal parseDecimal(java.lang.String)" class="javax.xml.bind.DatatypeConverterInterface" />
	<method signature="java.lang.String printFloat(float)" class="javax.xml.bind.DatatypeConverterInterface" />
	<method signature="java.lang.String printShort(short)" class="javax.xml.bind.DatatypeConverterInterface" />
	<method signature="java.lang.String printByte(byte)" class="javax.xml.bind.DatatypeConverterInterface" />
	<method signature="java.util.Calendar parseDate(java.lang.String)" class="javax.xml.bind.DatatypeConverterInterface" />
	<method signature="java.lang.String printQName(javax.xml.namespace.QName,javax.xml.namespace.NamespaceContext)" class="javax.xml.bind.DatatypeConverterInterface" />
	<method signature="byte[] parseHexBinary(java.lang.String)" class="javax.xml.bind.DatatypeConverterInterface" />
	<method signature="java.lang.String printAnySimpleType(java.lang.String)" class="javax.xml.bind.DatatypeConverterInterface" />
	<method signature="float parseFloat(java.lang.String)" class="javax.xml.bind.DatatypeConverterInterface" />
	<method signature="int parseInt(java.lang.String)" class="javax.xml.bind.DatatypeConverterInterface" />
	<method signature="boolean parseBoolean(java.lang.String)" class="javax.xml.bind.DatatypeConverterInterface" />
	<method signature="java.lang.String printBoolean(boolean)" class="javax.xml.bind.DatatypeConverterInterface" />
	<method signature="byte[] parseBase64Binary(java.lang.String)" class="javax.xml.bind.DatatypeConverterInterface" />
	<method signature="java.lang.String printTime(java.util.Calendar)" class="javax.xml.bind.DatatypeConverterInterface" />
	<method signature="long parseLong(java.lang.String)" class="javax.xml.bind.DatatypeConverterInterface" />
	<method signature="javax.xml.namespace.QName parseQName(java.lang.String,javax.xml.namespace.NamespaceContext)" class="javax.xml.bind.DatatypeConverterInterface" />
	<method signature="java.lang.String printInt(int)" class="javax.xml.bind.DatatypeConverterInterface" />
	<method signature="java.lang.String printUnsignedInt(long)" class="javax.xml.bind.DatatypeConverterInterface" />
	<method signature="int parseUnsignedShort(java.lang.String)" class="javax.xml.bind.DatatypeConverterInterface" />
	<method signature="java.math.BigInteger parseInteger(java.lang.String)" class="javax.xml.bind.DatatypeConverterInterface" />
	<method signature="java.lang.String printInteger(java.math.BigInteger)" class="javax.xml.bind.DatatypeConverterInterface" />
	<method signature="java.util.Calendar parseDateTime(java.lang.String)" class="javax.xml.bind.DatatypeConverterInterface" />
	<method signature="java.lang.String printBase64Binary(byte[])" class="javax.xml.bind.DatatypeConverterInterface" />
	<method signature="byte parseByte(java.lang.String)" class="javax.xml.bind.DatatypeConverterInterface" />
	<method signature="java.util.Calendar parseTime(java.lang.String)" class="javax.xml.bind.DatatypeConverterInterface" />
	<method signature="java.lang.String parseAnySimpleType(java.lang.String)" class="javax.xml.bind.DatatypeConverterInterface" />
	<method signature="java.lang.String printDateTime(java.util.Calendar)" class="javax.xml.bind.DatatypeConverterInterface" />
	<method signature="java.lang.String printLong(long)" class="javax.xml.bind.DatatypeConverterInterface" />
	<method signature="java.lang.String printDecimal(java.math.BigDecimal)" class="javax.xml.bind.DatatypeConverterInterface" />
	<method signature="java.lang.String printHexBinary(byte[])" class="javax.xml.bind.DatatypeConverterInterface" />
	<method signature="java.lang.String printDate(java.util.Calendar)" class="javax.xml.bind.DatatypeConverterInterface" />
	<class name="com.google.zxing.aztec.decoder.Decoder" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.aztec.decoder.Decoder" />
	<method signature="com.google.zxing.common.DecoderResult decode(com.google.zxing.aztec.AztecDetectorResult)" class="com.google.zxing.aztec.decoder.Decoder" />
	<class name="org.apache.html.dom.HTMLDocumentImpl" />
	<method signature="void open()" class="org.apache.html.dom.HTMLDocumentImpl" />
	<method signature="org.w3c.dom.Node cloneNode(boolean)" class="org.apache.html.dom.HTMLDocumentImpl" />
	<method signature="org.w3c.dom.html.HTMLElement getBody()" class="org.apache.html.dom.HTMLDocumentImpl" />
	<method signature="org.w3c.dom.html.HTMLCollection getApplets()" class="org.apache.html.dom.HTMLDocumentImpl" />
	<method signature="void write(java.lang.String)" class="org.apache.html.dom.HTMLDocumentImpl" />
	<method signature="org.w3c.dom.Element createElementNS(java.lang.String,java.lang.String)" class="org.apache.html.dom.HTMLDocumentImpl" />
	<method signature="java.lang.String getCookie()" class="org.apache.html.dom.HTMLDocumentImpl" />
	<method signature="java.lang.String getTitle()" class="org.apache.html.dom.HTMLDocumentImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.html.dom.HTMLDocumentImpl" />
	<method signature="org.w3c.dom.Element createElement(java.lang.String)" class="org.apache.html.dom.HTMLDocumentImpl" />
	<method signature="java.lang.String getReferrer()" class="org.apache.html.dom.HTMLDocumentImpl" />
	<method signature="org.w3c.dom.Element getDocumentElement()" class="org.apache.html.dom.HTMLDocumentImpl" />
	<method signature="org.w3c.dom.html.HTMLCollection getAnchors()" class="org.apache.html.dom.HTMLDocumentImpl" />
	<method signature="void close()" class="org.apache.html.dom.HTMLDocumentImpl" />
	<method signature="org.w3c.dom.Element createElementNS(java.lang.String,java.lang.String,java.lang.String)" class="org.apache.html.dom.HTMLDocumentImpl" />
	<method signature="void setBody(org.w3c.dom.html.HTMLElement)" class="org.apache.html.dom.HTMLDocumentImpl" />
	<method signature="org.w3c.dom.html.HTMLCollection getLinks()" class="org.apache.html.dom.HTMLDocumentImpl" />
	<method signature="org.w3c.dom.Element getElementById(java.lang.String)" class="org.apache.html.dom.HTMLDocumentImpl" />
	<method signature="org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String,java.lang.String)" class="org.apache.html.dom.HTMLDocumentImpl" />
	<method signature="org.w3c.dom.NodeList getElementsByTagName(java.lang.String)" class="org.apache.html.dom.HTMLDocumentImpl" />
	<method signature="java.lang.String getDomain()" class="org.apache.html.dom.HTMLDocumentImpl" />
	<method signature="org.w3c.dom.html.HTMLCollection getImages()" class="org.apache.html.dom.HTMLDocumentImpl" />
	<method signature="java.lang.String getURL()" class="org.apache.html.dom.HTMLDocumentImpl" />
	<method signature="org.w3c.dom.Attr createAttribute(java.lang.String)" class="org.apache.html.dom.HTMLDocumentImpl" />
	<method signature="org.w3c.dom.NodeList getElementsByName(java.lang.String)" class="org.apache.html.dom.HTMLDocumentImpl" />
	<method signature="org.w3c.dom.html.HTMLElement getHead()" class="org.apache.html.dom.HTMLDocumentImpl" />
	<method signature="org.w3c.dom.html.HTMLCollection getForms()" class="org.apache.html.dom.HTMLDocumentImpl" />
	<method signature="void setCookie(java.lang.String)" class="org.apache.html.dom.HTMLDocumentImpl" />
	<method signature="void writeln(java.lang.String)" class="org.apache.html.dom.HTMLDocumentImpl" />
	<method signature="void setTitle(java.lang.String)" class="org.apache.html.dom.HTMLDocumentImpl" />
	<class name="org.jfree.data.xy.XYIntervalSeriesCollection" />
	<method signature="void addSeries(org.jfree.data.xy.XYIntervalSeries)" class="org.jfree.data.xy.XYIntervalSeriesCollection" />
	<method signature="double getEndXValue(int,int)" class="org.jfree.data.xy.XYIntervalSeriesCollection" />
	<method signature="java.lang.Number getX(int,int)" class="org.jfree.data.xy.XYIntervalSeriesCollection" />
	<method signature="double getStartYValue(int,int)" class="org.jfree.data.xy.XYIntervalSeriesCollection" />
	<method signature="java.lang.Number getY(int,int)" class="org.jfree.data.xy.XYIntervalSeriesCollection" />
	<method signature="void removeSeries(int)" class="org.jfree.data.xy.XYIntervalSeriesCollection" />
	<method signature="int getSeriesCount()" class="org.jfree.data.xy.XYIntervalSeriesCollection" />
	<method signature="double getEndYValue(int,int)" class="org.jfree.data.xy.XYIntervalSeriesCollection" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.xy.XYIntervalSeriesCollection" />
	<method signature="java.lang.Comparable getSeriesKey(int)" class="org.jfree.data.xy.XYIntervalSeriesCollection" />
	<method signature="void removeSeries(org.jfree.data.xy.XYIntervalSeries)" class="org.jfree.data.xy.XYIntervalSeriesCollection" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.xy.XYIntervalSeriesCollection" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.xy.XYIntervalSeriesCollection" />
	<method signature="java.lang.Number getEndX(int,int)" class="org.jfree.data.xy.XYIntervalSeriesCollection" />
	<method signature="double getStartXValue(int,int)" class="org.jfree.data.xy.XYIntervalSeriesCollection" />
	<method signature="java.lang.Number getStartX(int,int)" class="org.jfree.data.xy.XYIntervalSeriesCollection" />
	<method signature="org.jfree.data.xy.XYIntervalSeries getSeries(int)" class="org.jfree.data.xy.XYIntervalSeriesCollection" />
	<method signature="java.lang.Number getStartY(int,int)" class="org.jfree.data.xy.XYIntervalSeriesCollection" />
	<method signature="int getItemCount(int)" class="org.jfree.data.xy.XYIntervalSeriesCollection" />
	<method signature="double getYValue(int,int)" class="org.jfree.data.xy.XYIntervalSeriesCollection" />
	<method signature="java.lang.Number getEndY(int,int)" class="org.jfree.data.xy.XYIntervalSeriesCollection" />
	<method signature="void removeAllSeries()" class="org.jfree.data.xy.XYIntervalSeriesCollection" />
	<class name="com.google.zxing.qrcode.detector.FinderPatternInfo" />
	<method signature="com.google.zxing.qrcode.detector.FinderPattern getBottomLeft()" class="com.google.zxing.qrcode.detector.FinderPatternInfo" />
	<method signature="com.google.zxing.qrcode.detector.FinderPattern getTopLeft()" class="com.google.zxing.qrcode.detector.FinderPatternInfo" />
	<method signature="void &lt;init&gt;(com.google.zxing.qrcode.detector.FinderPattern[])" class="com.google.zxing.qrcode.detector.FinderPatternInfo" />
	<method signature="com.google.zxing.qrcode.detector.FinderPattern getTopRight()" class="com.google.zxing.qrcode.detector.FinderPatternInfo" />
	<class name="tourma.data.RosterType" />
	<method signature="java.lang.String getName()" class="tourma.data.RosterType" />
	<method signature="tourma.data.RosterType getRosterType(java.lang.String)" class="tourma.data.RosterType" />
	<method signature="void setXMLElement(org.jdom2.Element)" class="tourma.data.RosterType" />
	<method signature="tourma.data.RosterType getRosterType(int)" class="tourma.data.RosterType" />
	<method signature="java.lang.String getRostersName(int)" class="tourma.data.RosterType" />
	<method signature="void newRostersNames()" class="tourma.data.RosterType" />
	<method signature="java.lang.String getRosterTranslation(java.lang.String)" class="tourma.data.RosterType" />
	<method signature="void putRosterType(java.lang.String,tourma.data.RosterType)" class="tourma.data.RosterType" />
	<method signature="org.jdom2.Element getXMLElement()" class="tourma.data.RosterType" />
	<method signature="void addRosterName(java.lang.String)" class="tourma.data.RosterType" />
	<method signature="java.lang.String[] getRostersNames()" class="tourma.data.RosterType" />
	<method signature="void &lt;init&gt;(int)" class="tourma.data.RosterType" />
	<method signature="javax.swing.DefaultComboBoxModel getRostersNamesModel()" class="tourma.data.RosterType" />
	<method signature="void setName(java.lang.String)" class="tourma.data.RosterType" />
	<method signature="void newRostersTypes()" class="tourma.data.RosterType" />
	<method signature="java.lang.String translate(java.lang.String)" class="tourma.data.RosterType" />
	<method signature="void initCollection(int)" class="tourma.data.RosterType" />
	<method signature="int getRostersNamesCount()" class="tourma.data.RosterType" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="tourma.data.RosterType" />
	<method signature="java.lang.String getRosterName(java.lang.String)" class="tourma.data.RosterType" />
	<method signature="void initCollection()" class="tourma.data.RosterType" />
	<class name="javax.xml.transform.sax.SAXTransformerFactory" />
	<method signature="javax.xml.transform.sax.TransformerHandler newTransformerHandler(javax.xml.transform.Templates)" class="javax.xml.transform.sax.SAXTransformerFactory" />
	<method signature="org.xml.sax.XMLFilter newXMLFilter(javax.xml.transform.Source)" class="javax.xml.transform.sax.SAXTransformerFactory" />
	<method signature="javax.xml.transform.sax.TransformerHandler newTransformerHandler(javax.xml.transform.Source)" class="javax.xml.transform.sax.SAXTransformerFactory" />
	<method signature="org.xml.sax.XMLFilter newXMLFilter(javax.xml.transform.Templates)" class="javax.xml.transform.sax.SAXTransformerFactory" />
	<method signature="javax.xml.transform.sax.TransformerHandler newTransformerHandler()" class="javax.xml.transform.sax.SAXTransformerFactory" />
	<method signature="javax.xml.transform.sax.TemplatesHandler newTemplatesHandler()" class="javax.xml.transform.sax.SAXTransformerFactory" />
	<class name="org.jfree.chart.axis.SegmentedTimeline" />
	<method signature="boolean getAdjustForDaylightSaving()" class="org.jfree.chart.axis.SegmentedTimeline" />
	<method signature="org.jfree.chart.axis.SegmentedTimeline$Segment getSegment(long)" class="org.jfree.chart.axis.SegmentedTimeline" />
	<method signature="void addException(java.util.Date)" class="org.jfree.chart.axis.SegmentedTimeline" />
	<method signature="void addBaseTimelineException(java.util.Date)" class="org.jfree.chart.axis.SegmentedTimeline" />
	<method signature="void addExceptions(java.util.List)" class="org.jfree.chart.axis.SegmentedTimeline" />
	<method signature="boolean containsDomainValue(long)" class="org.jfree.chart.axis.SegmentedTimeline" />
	<method signature="boolean containsDomainRange(long,long)" class="org.jfree.chart.axis.SegmentedTimeline" />
	<method signature="org.jfree.chart.axis.SegmentedTimeline getBaseTimeline()" class="org.jfree.chart.axis.SegmentedTimeline" />
	<method signature="java.util.List getExceptionSegments()" class="org.jfree.chart.axis.SegmentedTimeline" />
	<method signature="long getSegmentSize()" class="org.jfree.chart.axis.SegmentedTimeline" />
	<method signature="void setStartTime(long)" class="org.jfree.chart.axis.SegmentedTimeline" />
	<method signature="long firstMondayAfter1900()" class="org.jfree.chart.axis.SegmentedTimeline" />
	<method signature="long getStartTime()" class="org.jfree.chart.axis.SegmentedTimeline" />
	<method signature="void setExceptionSegments(java.util.List)" class="org.jfree.chart.axis.SegmentedTimeline" />
	<method signature="void addBaseTimelineExclusions(long,long)" class="org.jfree.chart.axis.SegmentedTimeline" />
	<method signature="long getSegmentsExcludedSize()" class="org.jfree.chart.axis.SegmentedTimeline" />
	<method signature="long toTimelineValue(long)" class="org.jfree.chart.axis.SegmentedTimeline" />
	<method signature="org.jfree.chart.axis.SegmentedTimeline newMondayThroughFridayTimeline()" class="org.jfree.chart.axis.SegmentedTimeline" />
	<method signature="int getSegmentsExcluded()" class="org.jfree.chart.axis.SegmentedTimeline" />
	<method signature="int getGroupSegmentCount()" class="org.jfree.chart.axis.SegmentedTimeline" />
	<method signature="void addException(long)" class="org.jfree.chart.axis.SegmentedTimeline" />
	<method signature="void addException(long,long)" class="org.jfree.chart.axis.SegmentedTimeline" />
	<method signature="void addBaseTimelineException(long)" class="org.jfree.chart.axis.SegmentedTimeline" />
	<method signature="void &lt;init&gt;(long,int,int)" class="org.jfree.chart.axis.SegmentedTimeline" />
	<method signature="org.jfree.chart.axis.SegmentedTimeline$Segment getSegment(java.util.Date)" class="org.jfree.chart.axis.SegmentedTimeline" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.axis.SegmentedTimeline" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.axis.SegmentedTimeline" />
	<method signature="int getSegmentsIncluded()" class="org.jfree.chart.axis.SegmentedTimeline" />
	<method signature="long getSegmentsIncludedSize()" class="org.jfree.chart.axis.SegmentedTimeline" />
	<method signature="boolean containsDomainValue(java.util.Date)" class="org.jfree.chart.axis.SegmentedTimeline" />
	<method signature="boolean containsDomainRange(java.util.Date,java.util.Date)" class="org.jfree.chart.axis.SegmentedTimeline" />
	<method signature="int hashCode()" class="org.jfree.chart.axis.SegmentedTimeline" />
	<method signature="void setBaseTimeline(org.jfree.chart.axis.SegmentedTimeline)" class="org.jfree.chart.axis.SegmentedTimeline" />
	<method signature="long getSegmentsGroupSize()" class="org.jfree.chart.axis.SegmentedTimeline" />
	<method signature="java.util.Date getDate(long)" class="org.jfree.chart.axis.SegmentedTimeline" />
	<method signature="long toMillisecond(long)" class="org.jfree.chart.axis.SegmentedTimeline" />
	<method signature="void setAdjustForDaylightSaving(boolean)" class="org.jfree.chart.axis.SegmentedTimeline" />
	<method signature="org.jfree.chart.axis.SegmentedTimeline newFifteenMinuteTimeline()" class="org.jfree.chart.axis.SegmentedTimeline" />
	<method signature="long toTimelineValue(java.util.Date)" class="org.jfree.chart.axis.SegmentedTimeline" />
	<method signature="long getTime(java.util.Date)" class="org.jfree.chart.axis.SegmentedTimeline" />
	<method signature="long getExceptionSegmentCount(long,long)" class="org.jfree.chart.axis.SegmentedTimeline" />
	<method signature="long getTimeFromLong(long)" class="org.jfree.chart.axis.SegmentedTimeline" />
	<class name="org.jfree.data.statistics.HistogramDataset" />
	<method signature="void addSeries(java.lang.Comparable,double[],int,double,double)" class="org.jfree.data.statistics.HistogramDataset" />
	<method signature="org.jfree.data.statistics.HistogramType getType()" class="org.jfree.data.statistics.HistogramDataset" />
	<method signature="void setType(org.jfree.data.statistics.HistogramType)" class="org.jfree.data.statistics.HistogramDataset" />
	<method signature="java.lang.Number getX(int,int)" class="org.jfree.data.statistics.HistogramDataset" />
	<method signature="java.lang.Number getY(int,int)" class="org.jfree.data.statistics.HistogramDataset" />
	<method signature="int getSeriesCount()" class="org.jfree.data.statistics.HistogramDataset" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.statistics.HistogramDataset" />
	<method signature="java.lang.Comparable getSeriesKey(int)" class="org.jfree.data.statistics.HistogramDataset" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.statistics.HistogramDataset" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.statistics.HistogramDataset" />
	<method signature="void addSeries(java.lang.Comparable,double[],int)" class="org.jfree.data.statistics.HistogramDataset" />
	<method signature="java.lang.Number getEndX(int,int)" class="org.jfree.data.statistics.HistogramDataset" />
	<method signature="java.lang.Number getStartX(int,int)" class="org.jfree.data.statistics.HistogramDataset" />
	<method signature="java.lang.Number getStartY(int,int)" class="org.jfree.data.statistics.HistogramDataset" />
	<method signature="int getItemCount(int)" class="org.jfree.data.statistics.HistogramDataset" />
	<method signature="java.lang.Number getEndY(int,int)" class="org.jfree.data.statistics.HistogramDataset" />
	<class name="org.apache.xerces.util.XMLResourceIdentifierImpl" />
	<method signature="void setLiteralSystemId(java.lang.String)" class="org.apache.xerces.util.XMLResourceIdentifierImpl" />
	<method signature="int hashCode()" class="org.apache.xerces.util.XMLResourceIdentifierImpl" />
	<method signature="void setValues(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.util.XMLResourceIdentifierImpl" />
	<method signature="void setNamespace(java.lang.String)" class="org.apache.xerces.util.XMLResourceIdentifierImpl" />
	<method signature="java.lang.String getPublicId()" class="org.apache.xerces.util.XMLResourceIdentifierImpl" />
	<method signature="java.lang.String getLiteralSystemId()" class="org.apache.xerces.util.XMLResourceIdentifierImpl" />
	<method signature="void setBaseSystemId(java.lang.String)" class="org.apache.xerces.util.XMLResourceIdentifierImpl" />
	<method signature="void setValues(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.util.XMLResourceIdentifierImpl" />
	<method signature="java.lang.String getBaseSystemId()" class="org.apache.xerces.util.XMLResourceIdentifierImpl" />
	<method signature="void clear()" class="org.apache.xerces.util.XMLResourceIdentifierImpl" />
	<method signature="java.lang.String getExpandedSystemId()" class="org.apache.xerces.util.XMLResourceIdentifierImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.util.XMLResourceIdentifierImpl" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.util.XMLResourceIdentifierImpl" />
	<method signature="java.lang.String getNamespace()" class="org.apache.xerces.util.XMLResourceIdentifierImpl" />
	<method signature="void setExpandedSystemId(java.lang.String)" class="org.apache.xerces.util.XMLResourceIdentifierImpl" />
	<method signature="java.lang.String toString()" class="org.apache.xerces.util.XMLResourceIdentifierImpl" />
	<method signature="void setPublicId(java.lang.String)" class="org.apache.xerces.util.XMLResourceIdentifierImpl" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.util.XMLResourceIdentifierImpl" />
	<class name="tourma.utils.web.WebRules" />
	<method signature="void &lt;init&gt;()" class="tourma.utils.web.WebRules" />
	<method signature="java.lang.String getHTML()" class="tourma.utils.web.WebRules" />
	<class name="org.jdom2.JDOMConstants" />
	<class name="org.jfree.ui.IntegerDocument" />
	<method signature="void insertString(int,java.lang.String,javax.swing.text.AttributeSet)" class="org.jfree.ui.IntegerDocument" />
	<method signature="void &lt;init&gt;()" class="org.jfree.ui.IntegerDocument" />
	<class name="com.hexidec.ekit.thirdparty.print.DocumentRenderer" />
	<method signature="void print(javax.swing.text.PlainDocument)" class="com.hexidec.ekit.thirdparty.print.DocumentRenderer" />
	<method signature="void setDocument(javax.swing.text.PlainDocument)" class="com.hexidec.ekit.thirdparty.print.DocumentRenderer" />
	<method signature="void printHtmlString(java.lang.String)" class="com.hexidec.ekit.thirdparty.print.DocumentRenderer" />
	<method signature="void print(javax.swing.JEditorPane)" class="com.hexidec.ekit.thirdparty.print.DocumentRenderer" />
	<method signature="void setDocument(javax.swing.JEditorPane)" class="com.hexidec.ekit.thirdparty.print.DocumentRenderer" />
	<method signature="void pageDialog()" class="com.hexidec.ekit.thirdparty.print.DocumentRenderer" />
	<method signature="void setScaleWidthToFit(boolean)" class="com.hexidec.ekit.thirdparty.print.DocumentRenderer" />
	<method signature="void &lt;init&gt;()" class="com.hexidec.ekit.thirdparty.print.DocumentRenderer" />
	<method signature="void setSize(java.awt.Dimension)" class="com.hexidec.ekit.thirdparty.print.DocumentRenderer" />
	<method signature="int print(java.awt.Graphics,java.awt.print.PageFormat,int)" class="com.hexidec.ekit.thirdparty.print.DocumentRenderer" />
	<method signature="javax.swing.text.Document getDocument()" class="com.hexidec.ekit.thirdparty.print.DocumentRenderer" />
	<method signature="boolean getScaleWidthToFit()" class="com.hexidec.ekit.thirdparty.print.DocumentRenderer" />
	<method signature="void printHtmlString(java.lang.String,java.awt.Dimension)" class="com.hexidec.ekit.thirdparty.print.DocumentRenderer" />
	<method signature="void print(javax.swing.text.html.HTMLDocument)" class="com.hexidec.ekit.thirdparty.print.DocumentRenderer" />
	<method signature="void setDocument(javax.swing.text.html.HTMLDocument)" class="com.hexidec.ekit.thirdparty.print.DocumentRenderer" />
	<class name="javax.xml.bind.helpers.NotIdentifiableEventImpl" />
	<method signature="void &lt;init&gt;(int,java.lang.String,javax.xml.bind.ValidationEventLocator,java.lang.Throwable)" class="javax.xml.bind.helpers.NotIdentifiableEventImpl" />
	<method signature="void &lt;init&gt;(int,java.lang.String,javax.xml.bind.ValidationEventLocator)" class="javax.xml.bind.helpers.NotIdentifiableEventImpl" />
	<class name="org.jfree.data.xy.IntervalXYZDataset" />
	<method signature="java.lang.Number getEndZValue(int,int)" class="org.jfree.data.xy.IntervalXYZDataset" />
	<method signature="java.lang.Number getStartXValue(int,int)" class="org.jfree.data.xy.IntervalXYZDataset" />
	<method signature="java.lang.Number getStartYValue(int,int)" class="org.jfree.data.xy.IntervalXYZDataset" />
	<method signature="java.lang.Number getStartZValue(int,int)" class="org.jfree.data.xy.IntervalXYZDataset" />
	<method signature="java.lang.Number getEndXValue(int,int)" class="org.jfree.data.xy.IntervalXYZDataset" />
	<method signature="java.lang.Number getEndYValue(int,int)" class="org.jfree.data.xy.IntervalXYZDataset" />
	<class name="org.apache.xerces.impl.xs.opti.AttrImpl" />
	<method signature="java.lang.String getName()" class="org.apache.xerces.impl.xs.opti.AttrImpl" />
	<method signature="void setValue(java.lang.String)" class="org.apache.xerces.impl.xs.opti.AttrImpl" />
	<method signature="org.w3c.dom.TypeInfo getSchemaTypeInfo()" class="org.apache.xerces.impl.xs.opti.AttrImpl" />
	<method signature="boolean isId()" class="org.apache.xerces.impl.xs.opti.AttrImpl" />
	<method signature="org.w3c.dom.Element getOwnerElement()" class="org.apache.xerces.impl.xs.opti.AttrImpl" />
	<method signature="boolean getSpecified()" class="org.apache.xerces.impl.xs.opti.AttrImpl" />
	<method signature="java.lang.String getNodeValue()" class="org.apache.xerces.impl.xs.opti.AttrImpl" />
	<method signature="java.lang.String getValue()" class="org.apache.xerces.impl.xs.opti.AttrImpl" />
	<method signature="void &lt;init&gt;(org.w3c.dom.Element,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.opti.AttrImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xs.opti.AttrImpl" />
	<method signature="java.lang.String toString()" class="org.apache.xerces.impl.xs.opti.AttrImpl" />
	<method signature="org.w3c.dom.Document getOwnerDocument()" class="org.apache.xerces.impl.xs.opti.AttrImpl" />
	<class name="org.apache.xerces.parsers.DOMParserImpl" />
	<method signature="org.w3c.dom.Document parseURI(java.lang.String)" class="org.apache.xerces.parsers.DOMParserImpl" />
	<method signature="void reset()" class="org.apache.xerces.parsers.DOMParserImpl" />
	<method signature="java.lang.Object getParameter(java.lang.String)" class="org.apache.xerces.parsers.DOMParserImpl" />
	<method signature="void setParameter(java.lang.String,java.lang.Object)" class="org.apache.xerces.parsers.DOMParserImpl" />
	<method signature="org.w3c.dom.Node parseWithContext(org.w3c.dom.ls.LSInput,org.w3c.dom.Node,short)" class="org.apache.xerces.parsers.DOMParserImpl" />
	<method signature="void setFilter(org.w3c.dom.ls.LSParserFilter)" class="org.apache.xerces.parsers.DOMParserImpl" />
	<method signature="void abort()" class="org.apache.xerces.parsers.DOMParserImpl" />
	<method signature="boolean getAsync()" class="org.apache.xerces.parsers.DOMParserImpl" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable)" class="org.apache.xerces.parsers.DOMParserImpl" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable,org.apache.xerces.xni.grammars.XMLGrammarPool)" class="org.apache.xerces.parsers.DOMParserImpl" />
	<method signature="org.w3c.dom.ls.LSParserFilter getFilter()" class="org.apache.xerces.parsers.DOMParserImpl" />
	<method signature="void &lt;init&gt;(org.apache.xerces.xni.parser.XMLParserConfiguration)" class="org.apache.xerces.parsers.DOMParserImpl" />
	<method signature="org.w3c.dom.Document parse(org.w3c.dom.ls.LSInput)" class="org.apache.xerces.parsers.DOMParserImpl" />
	<method signature="boolean getBusy()" class="org.apache.xerces.parsers.DOMParserImpl" />
	<method signature="boolean canSetParameter(java.lang.String,java.lang.Object)" class="org.apache.xerces.parsers.DOMParserImpl" />
	<method signature="org.w3c.dom.DOMStringList getParameterNames()" class="org.apache.xerces.parsers.DOMParserImpl" />
	<method signature="void startElement(org.apache.xerces.xni.QName,org.apache.xerces.xni.XMLAttributes,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.DOMParserImpl" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="org.apache.xerces.parsers.DOMParserImpl" />
	<method signature="org.w3c.dom.DOMConfiguration getDomConfig()" class="org.apache.xerces.parsers.DOMParserImpl" />
	<class name="org.jdom2.output.EscapeStrategy" />
	<method signature="boolean shouldEscape(char)" class="org.jdom2.output.EscapeStrategy" />
	<class name="org.jfree.io.IOUtils" />
	<method signature="boolean isSubDirectory(java.io.File,java.io.File)" class="org.jfree.io.IOUtils" />
	<method signature="org.jfree.io.IOUtils getInstance()" class="org.jfree.io.IOUtils" />
	<method signature="java.lang.String createRelativeURL(java.net.URL,java.net.URL)" class="org.jfree.io.IOUtils" />
	<method signature="void copyStreams(java.io.InputStream,java.io.OutputStream,int)" class="org.jfree.io.IOUtils" />
	<method signature="java.lang.String stripFileExtension(java.lang.String)" class="org.jfree.io.IOUtils" />
	<method signature="java.lang.String getFileExtension(java.lang.String)" class="org.jfree.io.IOUtils" />
	<method signature="java.lang.String getFileName(java.net.URL)" class="org.jfree.io.IOUtils" />
	<method signature="void copyWriter(java.io.Reader,java.io.Writer,int)" class="org.jfree.io.IOUtils" />
	<method signature="void copyStreams(java.io.InputStream,java.io.OutputStream)" class="org.jfree.io.IOUtils" />
	<method signature="void copyWriter(java.io.Reader,java.io.Writer)" class="org.jfree.io.IOUtils" />
	<class name="org.apache.xerces.dom.DOMMessageFormatter" />
	<method signature="void setLocale(java.util.Locale)" class="org.apache.xerces.dom.DOMMessageFormatter" />
	<method signature="void init()" class="org.apache.xerces.dom.DOMMessageFormatter" />
	<method signature="java.lang.String formatMessage(java.lang.String,java.lang.String,java.lang.Object[])" class="org.apache.xerces.dom.DOMMessageFormatter" />
	<class name="org.jfree.chart.labels.StandardXYZToolTipGenerator" />
	<method signature="java.lang.String generateToolTip(org.jfree.data.xy.XYZDataset,int,int)" class="org.jfree.chart.labels.StandardXYZToolTipGenerator" />
	<method signature="java.text.DateFormat getZDateFormat()" class="org.jfree.chart.labels.StandardXYZToolTipGenerator" />
	<method signature="void &lt;init&gt;(java.lang.String,java.text.DateFormat,java.text.DateFormat,java.text.DateFormat)" class="org.jfree.chart.labels.StandardXYZToolTipGenerator" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.labels.StandardXYZToolTipGenerator" />
	<method signature="java.text.NumberFormat getZFormat()" class="org.jfree.chart.labels.StandardXYZToolTipGenerator" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.labels.StandardXYZToolTipGenerator" />
	<method signature="java.lang.String generateLabelString(org.jfree.data.xy.XYDataset,int,int)" class="org.jfree.chart.labels.StandardXYZToolTipGenerator" />
	<method signature="void &lt;init&gt;(java.lang.String,java.text.NumberFormat,java.text.NumberFormat,java.text.NumberFormat)" class="org.jfree.chart.labels.StandardXYZToolTipGenerator" />
	<class name="org.jfree.ui.action.AbstractFileSelectionAction" />
	<method signature="void &lt;init&gt;(java.awt.Component)" class="org.jfree.ui.action.AbstractFileSelectionAction" />
	<class name="javax.xml.transform.dom.DOMLocator" />
	<method signature="org.w3c.dom.Node getOriginatingNode()" class="javax.xml.transform.dom.DOMLocator" />
	<class name="com.google.zxing.MultiFormatWriter" />
	<method signature="com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int)" class="com.google.zxing.MultiFormatWriter" />
	<method signature="com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map)" class="com.google.zxing.MultiFormatWriter" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.MultiFormatWriter" />
	<class name="javax.xml.datatype.Duration" />
	<method signature="int getSign()" class="javax.xml.datatype.Duration" />
	<method signature="int compare(javax.xml.datatype.Duration)" class="javax.xml.datatype.Duration" />
	<method signature="javax.xml.datatype.Duration multiply(int)" class="javax.xml.datatype.Duration" />
	<method signature="int getDays()" class="javax.xml.datatype.Duration" />
	<method signature="int getSeconds()" class="javax.xml.datatype.Duration" />
	<method signature="void addTo(java.util.Date)" class="javax.xml.datatype.Duration" />
	<method signature="javax.xml.datatype.Duration normalizeWith(java.util.Calendar)" class="javax.xml.datatype.Duration" />
	<method signature="boolean equals(java.lang.Object)" class="javax.xml.datatype.Duration" />
	<method signature="void &lt;init&gt;()" class="javax.xml.datatype.Duration" />
	<method signature="javax.xml.datatype.Duration negate()" class="javax.xml.datatype.Duration" />
	<method signature="boolean isLongerThan(javax.xml.datatype.Duration)" class="javax.xml.datatype.Duration" />
	<method signature="long getTimeInMillis(java.util.Date)" class="javax.xml.datatype.Duration" />
	<method signature="int getMinutes()" class="javax.xml.datatype.Duration" />
	<method signature="javax.xml.datatype.Duration subtract(javax.xml.datatype.Duration)" class="javax.xml.datatype.Duration" />
	<method signature="javax.xml.datatype.Duration add(javax.xml.datatype.Duration)" class="javax.xml.datatype.Duration" />
	<method signature="void addTo(java.util.Calendar)" class="javax.xml.datatype.Duration" />
	<method signature="int getYears()" class="javax.xml.datatype.Duration" />
	<method signature="int hashCode()" class="javax.xml.datatype.Duration" />
	<method signature="int getHours()" class="javax.xml.datatype.Duration" />
	<method signature="boolean isShorterThan(javax.xml.datatype.Duration)" class="javax.xml.datatype.Duration" />
	<method signature="java.lang.Number getField(javax.xml.datatype.DatatypeConstants$Field)" class="javax.xml.datatype.Duration" />
	<method signature="long getTimeInMillis(java.util.Calendar)" class="javax.xml.datatype.Duration" />
	<method signature="javax.xml.datatype.Duration multiply(java.math.BigDecimal)" class="javax.xml.datatype.Duration" />
	<method signature="javax.xml.namespace.QName getXMLSchemaType()" class="javax.xml.datatype.Duration" />
	<method signature="java.lang.String toString()" class="javax.xml.datatype.Duration" />
	<method signature="int getMonths()" class="javax.xml.datatype.Duration" />
	<method signature="boolean isSet(javax.xml.datatype.DatatypeConstants$Field)" class="javax.xml.datatype.Duration" />
	<class name="com.google.zxing.client.result.EmailAddressParsedResult" />
	<method signature="java.lang.String getEmailAddress()" class="com.google.zxing.client.result.EmailAddressParsedResult" />
	<method signature="java.lang.String getSubject()" class="com.google.zxing.client.result.EmailAddressParsedResult" />
	<method signature="java.lang.String getMailtoURI()" class="com.google.zxing.client.result.EmailAddressParsedResult" />
	<method signature="java.lang.String getDisplayResult()" class="com.google.zxing.client.result.EmailAddressParsedResult" />
	<method signature="java.lang.String getBody()" class="com.google.zxing.client.result.EmailAddressParsedResult" />
	<class name="org.apache.commons.lang3.time.DurationFormatUtils" />
	<method signature="java.lang.String formatPeriod(long,long,java.lang.String)" class="org.apache.commons.lang3.time.DurationFormatUtils" />
	<method signature="java.lang.String formatPeriodISO(long,long)" class="org.apache.commons.lang3.time.DurationFormatUtils" />
	<method signature="java.lang.String formatDurationISO(long)" class="org.apache.commons.lang3.time.DurationFormatUtils" />
	<method signature="java.lang.String formatDuration(long,java.lang.String,boolean)" class="org.apache.commons.lang3.time.DurationFormatUtils" />
	<method signature="java.lang.String formatDurationWords(long,boolean,boolean)" class="org.apache.commons.lang3.time.DurationFormatUtils" />
	<method signature="java.lang.String formatDuration(long,java.lang.String)" class="org.apache.commons.lang3.time.DurationFormatUtils" />
	<method signature="java.lang.String formatDurationHMS(long)" class="org.apache.commons.lang3.time.DurationFormatUtils" />
	<method signature="java.lang.String formatPeriod(long,long,java.lang.String,boolean,java.util.TimeZone)" class="org.apache.commons.lang3.time.DurationFormatUtils" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.time.DurationFormatUtils" />
	<class name="org.w3c.dom.DOMImplementationSource" />
	<method signature="org.w3c.dom.DOMImplementation getDOMImplementation(java.lang.String)" class="org.w3c.dom.DOMImplementationSource" />
	<method signature="org.w3c.dom.DOMImplementationList getDOMImplementationList(java.lang.String)" class="org.w3c.dom.DOMImplementationSource" />
	<class name="org.jfree.util.ShapeUtilities" />
	<method signature="java.awt.geom.Point2D getPointInRectangle(double,double,java.awt.geom.Rectangle2D)" class="org.jfree.util.ShapeUtilities" />
	<method signature="java.awt.Shape createRegularCross(float,float)" class="org.jfree.util.ShapeUtilities" />
	<method signature="boolean equal(java.awt.geom.Line2D,java.awt.geom.Line2D)" class="org.jfree.util.ShapeUtilities" />
	<method signature="java.awt.Shape createLineRegion(java.awt.geom.Line2D,float)" class="org.jfree.util.ShapeUtilities" />
	<method signature="java.awt.Shape createDiagonalCross(float,float)" class="org.jfree.util.ShapeUtilities" />
	<method signature="void drawRotatedShape(java.awt.Graphics2D,java.awt.Shape,double,float,float)" class="org.jfree.util.ShapeUtilities" />
	<method signature="boolean equal(java.awt.Shape,java.awt.Shape)" class="org.jfree.util.ShapeUtilities" />
	<method signature="java.awt.Shape clone(java.awt.Shape)" class="org.jfree.util.ShapeUtilities" />
	<method signature="java.awt.Shape rotateShape(java.awt.Shape,double,float,float)" class="org.jfree.util.ShapeUtilities" />
	<method signature="java.awt.Shape createUpTriangle(float)" class="org.jfree.util.ShapeUtilities" />
	<method signature="boolean intersects(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)" class="org.jfree.util.ShapeUtilities" />
	<method signature="java.awt.Shape createDownTriangle(float)" class="org.jfree.util.ShapeUtilities" />
	<method signature="java.awt.Shape createDiamond(float)" class="org.jfree.util.ShapeUtilities" />
	<method signature="boolean equal(java.awt.geom.Arc2D,java.awt.geom.Arc2D)" class="org.jfree.util.ShapeUtilities" />
	<method signature="java.awt.Shape createTranslatedShape(java.awt.Shape,org.jfree.ui.RectangleAnchor,double,double)" class="org.jfree.util.ShapeUtilities" />
	<method signature="boolean equal(java.awt.geom.Ellipse2D,java.awt.geom.Ellipse2D)" class="org.jfree.util.ShapeUtilities" />
	<method signature="boolean equal(java.awt.Polygon,java.awt.Polygon)" class="org.jfree.util.ShapeUtilities" />
	<method signature="java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)" class="org.jfree.util.ShapeUtilities" />
	<method signature="boolean contains(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)" class="org.jfree.util.ShapeUtilities" />
	<method signature="boolean equal(java.awt.geom.GeneralPath,java.awt.geom.GeneralPath)" class="org.jfree.util.ShapeUtilities" />
	<class name="org.apache.xerces.parsers.XML11NonValidatingConfiguration" />
	<method signature="void setLocale(java.util.Locale)" class="org.apache.xerces.parsers.XML11NonValidatingConfiguration" />
	<method signature="org.apache.xerces.xni.XMLDTDContentModelHandler getDTDContentModelHandler()" class="org.apache.xerces.parsers.XML11NonValidatingConfiguration" />
	<method signature="void parse(org.apache.xerces.xni.parser.XMLInputSource)" class="org.apache.xerces.parsers.XML11NonValidatingConfiguration" />
	<method signature="boolean getFeature(java.lang.String)" class="org.apache.xerces.parsers.XML11NonValidatingConfiguration" />
	<method signature="java.util.Locale getLocale()" class="org.apache.xerces.parsers.XML11NonValidatingConfiguration" />
	<method signature="void setDocumentHandler(org.apache.xerces.xni.XMLDocumentHandler)" class="org.apache.xerces.parsers.XML11NonValidatingConfiguration" />
	<method signature="void cleanup()" class="org.apache.xerces.parsers.XML11NonValidatingConfiguration" />
	<method signature="org.apache.xerces.xni.parser.XMLErrorHandler getErrorHandler()" class="org.apache.xerces.parsers.XML11NonValidatingConfiguration" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable)" class="org.apache.xerces.parsers.XML11NonValidatingConfiguration" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.parsers.XML11NonValidatingConfiguration" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable,org.apache.xerces.xni.grammars.XMLGrammarPool)" class="org.apache.xerces.parsers.XML11NonValidatingConfiguration" />
	<method signature="void setInputSource(org.apache.xerces.xni.parser.XMLInputSource)" class="org.apache.xerces.parsers.XML11NonValidatingConfiguration" />
	<method signature="void setDTDHandler(org.apache.xerces.xni.XMLDTDHandler)" class="org.apache.xerces.parsers.XML11NonValidatingConfiguration" />
	<method signature="void setFeature(java.lang.String,boolean)" class="org.apache.xerces.parsers.XML11NonValidatingConfiguration" />
	<method signature="org.apache.xerces.xni.XMLDTDHandler getDTDHandler()" class="org.apache.xerces.parsers.XML11NonValidatingConfiguration" />
	<method signature="void setEntityResolver(org.apache.xerces.xni.parser.XMLEntityResolver)" class="org.apache.xerces.parsers.XML11NonValidatingConfiguration" />
	<method signature="boolean parse(boolean)" class="org.apache.xerces.parsers.XML11NonValidatingConfiguration" />
	<method signature="org.apache.xerces.xni.XMLDocumentHandler getDocumentHandler()" class="org.apache.xerces.parsers.XML11NonValidatingConfiguration" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="org.apache.xerces.parsers.XML11NonValidatingConfiguration" />
	<method signature="void setErrorHandler(org.apache.xerces.xni.parser.XMLErrorHandler)" class="org.apache.xerces.parsers.XML11NonValidatingConfiguration" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable,org.apache.xerces.xni.grammars.XMLGrammarPool,org.apache.xerces.xni.parser.XMLComponentManager)" class="org.apache.xerces.parsers.XML11NonValidatingConfiguration" />
	<method signature="void setDTDContentModelHandler(org.apache.xerces.xni.XMLDTDContentModelHandler)" class="org.apache.xerces.parsers.XML11NonValidatingConfiguration" />
	<method signature="org.apache.xerces.xni.parser.XMLEntityResolver getEntityResolver()" class="org.apache.xerces.parsers.XML11NonValidatingConfiguration" />
	<class name="org.jfree.chart.encoders.SunJPEGEncoderAdapter" />
	<method signature="boolean isEncodingAlpha()" class="org.jfree.chart.encoders.SunJPEGEncoderAdapter" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.encoders.SunJPEGEncoderAdapter" />
	<method signature="float getQuality()" class="org.jfree.chart.encoders.SunJPEGEncoderAdapter" />
	<method signature="void setEncodingAlpha(boolean)" class="org.jfree.chart.encoders.SunJPEGEncoderAdapter" />
	<method signature="byte[] encode(java.awt.image.BufferedImage)" class="org.jfree.chart.encoders.SunJPEGEncoderAdapter" />
	<method signature="void setQuality(float)" class="org.jfree.chart.encoders.SunJPEGEncoderAdapter" />
	<method signature="void encode(java.awt.image.BufferedImage,java.io.OutputStream)" class="org.jfree.chart.encoders.SunJPEGEncoderAdapter" />
	<class name="org.w3c.dom.bootstrap.DOMImplementationRegistry" />
	<method signature="org.w3c.dom.DOMImplementation getDOMImplementation(java.lang.String)" class="org.w3c.dom.bootstrap.DOMImplementationRegistry" />
	<method signature="void addSource(org.w3c.dom.DOMImplementationSource)" class="org.w3c.dom.bootstrap.DOMImplementationRegistry" />
	<method signature="org.w3c.dom.bootstrap.DOMImplementationRegistry newInstance()" class="org.w3c.dom.bootstrap.DOMImplementationRegistry" />
	<method signature="org.w3c.dom.DOMImplementationList getDOMImplementationList(java.lang.String)" class="org.w3c.dom.bootstrap.DOMImplementationRegistry" />
	<class name="org.apache.html.dom.HTMLFrameSetElementImpl" />
	<method signature="void setRows(java.lang.String)" class="org.apache.html.dom.HTMLFrameSetElementImpl" />
	<method signature="java.lang.String getCols()" class="org.apache.html.dom.HTMLFrameSetElementImpl" />
	<method signature="java.lang.String getRows()" class="org.apache.html.dom.HTMLFrameSetElementImpl" />
	<method signature="void setCols(java.lang.String)" class="org.apache.html.dom.HTMLFrameSetElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLFrameSetElementImpl" />
	<class name="com.google.zxing.common.GlobalHistogramBinarizer" />
	<method signature="com.google.zxing.common.BitArray getBlackRow(int,com.google.zxing.common.BitArray)" class="com.google.zxing.common.GlobalHistogramBinarizer" />
	<method signature="com.google.zxing.Binarizer createBinarizer(com.google.zxing.LuminanceSource)" class="com.google.zxing.common.GlobalHistogramBinarizer" />
	<method signature="com.google.zxing.common.BitMatrix getBlackMatrix()" class="com.google.zxing.common.GlobalHistogramBinarizer" />
	<method signature="void &lt;init&gt;(com.google.zxing.LuminanceSource)" class="com.google.zxing.common.GlobalHistogramBinarizer" />
	<class name="org.jdom2.Attribute" />
	<method signature="java.lang.String getName()" class="org.jdom2.Attribute" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,int,org.jdom2.Namespace)" class="org.jdom2.Attribute" />
	<method signature="java.util.List getNamespacesInherited()" class="org.jdom2.Attribute" />
	<method signature="float getFloatValue()" class="org.jdom2.Attribute" />
	<method signature="org.jdom2.Attribute setName(java.lang.String)" class="org.jdom2.Attribute" />
	<method signature="org.jdom2.Attribute setAttributeType(org.jdom2.AttributeType)" class="org.jdom2.Attribute" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,org.jdom2.AttributeType,org.jdom2.Namespace)" class="org.jdom2.Attribute" />
	<method signature="org.jdom2.Namespace getNamespace()" class="org.jdom2.Attribute" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,org.jdom2.AttributeType)" class="org.jdom2.Attribute" />
	<method signature="java.lang.Object clone()" class="org.jdom2.Attribute" />
	<method signature="java.lang.String getQualifiedName()" class="org.jdom2.Attribute" />
	<method signature="java.lang.String getNamespacePrefix()" class="org.jdom2.Attribute" />
	<method signature="boolean isSpecified()" class="org.jdom2.Attribute" />
	<method signature="org.jdom2.Attribute clone()" class="org.jdom2.Attribute" />
	<method signature="org.jdom2.Attribute detach()" class="org.jdom2.Attribute" />
	<method signature="long getLongValue()" class="org.jdom2.Attribute" />
	<method signature="boolean getBooleanValue()" class="org.jdom2.Attribute" />
	<method signature="org.jdom2.Attribute setNamespace(org.jdom2.Namespace)" class="org.jdom2.Attribute" />
	<method signature="void setSpecified(boolean)" class="org.jdom2.Attribute" />
	<method signature="org.jdom2.Document getDocument()" class="org.jdom2.Attribute" />
	<method signature="org.jdom2.AttributeType getAttributeType()" class="org.jdom2.Attribute" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,int)" class="org.jdom2.Attribute" />
	<method signature="org.jdom2.Element getParent()" class="org.jdom2.Attribute" />
	<method signature="org.jdom2.Attribute setValue(java.lang.String)" class="org.jdom2.Attribute" />
	<method signature="int getIntValue()" class="org.jdom2.Attribute" />
	<method signature="java.util.List getNamespacesInScope()" class="org.jdom2.Attribute" />
	<method signature="java.lang.String getValue()" class="org.jdom2.Attribute" />
	<method signature="org.jdom2.Attribute setAttributeType(int)" class="org.jdom2.Attribute" />
	<method signature="java.util.List getNamespacesIntroduced()" class="org.jdom2.Attribute" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,org.jdom2.Namespace)" class="org.jdom2.Attribute" />
	<method signature="java.lang.String getNamespaceURI()" class="org.jdom2.Attribute" />
	<method signature="java.lang.String toString()" class="org.jdom2.Attribute" />
	<method signature="double getDoubleValue()" class="org.jdom2.Attribute" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="org.jdom2.Attribute" />
	<method signature="org.jdom2.CloneBase clone()" class="org.jdom2.Attribute" />
	<class name="org.jfree.chart.renderer.category.BoxAndWhiskerRenderer" />
	<method signature="java.awt.Paint getArtifactPaint()" class="org.jfree.chart.renderer.category.BoxAndWhiskerRenderer" />
	<method signature="void setItemMargin(double)" class="org.jfree.chart.renderer.category.BoxAndWhiskerRenderer" />
	<method signature="boolean isMedianVisible()" class="org.jfree.chart.renderer.category.BoxAndWhiskerRenderer" />
	<method signature="double getMaximumBarWidth()" class="org.jfree.chart.renderer.category.BoxAndWhiskerRenderer" />
	<method signature="double getWhiskerWidth()" class="org.jfree.chart.renderer.category.BoxAndWhiskerRenderer" />
	<method signature="org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)" class="org.jfree.chart.renderer.category.BoxAndWhiskerRenderer" />
	<method signature="org.jfree.chart.LegendItem getLegendItem(int,int)" class="org.jfree.chart.renderer.category.BoxAndWhiskerRenderer" />
	<method signature="void setMeanVisible(boolean)" class="org.jfree.chart.renderer.category.BoxAndWhiskerRenderer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.category.BoxAndWhiskerRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.category.BoxAndWhiskerRenderer" />
	<method signature="double getItemMargin()" class="org.jfree.chart.renderer.category.BoxAndWhiskerRenderer" />
	<method signature="boolean isMeanVisible()" class="org.jfree.chart.renderer.category.BoxAndWhiskerRenderer" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)" class="org.jfree.chart.renderer.category.BoxAndWhiskerRenderer" />
	<method signature="void setMaximumBarWidth(double)" class="org.jfree.chart.renderer.category.BoxAndWhiskerRenderer" />
	<method signature="void drawVerticalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int)" class="org.jfree.chart.renderer.category.BoxAndWhiskerRenderer" />
	<method signature="void setArtifactPaint(java.awt.Paint)" class="org.jfree.chart.renderer.category.BoxAndWhiskerRenderer" />
	<method signature="void setUseOutlinePaintForWhiskers(boolean)" class="org.jfree.chart.renderer.category.BoxAndWhiskerRenderer" />
	<method signature="boolean getUseOutlinePaintForWhiskers()" class="org.jfree.chart.renderer.category.BoxAndWhiskerRenderer" />
	<method signature="void setMedianVisible(boolean)" class="org.jfree.chart.renderer.category.BoxAndWhiskerRenderer" />
	<method signature="void drawHorizontalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int)" class="org.jfree.chart.renderer.category.BoxAndWhiskerRenderer" />
	<method signature="boolean getFillBox()" class="org.jfree.chart.renderer.category.BoxAndWhiskerRenderer" />
	<method signature="org.jfree.chart.renderer.category.CategoryItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.renderer.category.BoxAndWhiskerRenderer" />
	<method signature="void setWhiskerWidth(double)" class="org.jfree.chart.renderer.category.BoxAndWhiskerRenderer" />
	<method signature="void setFillBox(boolean)" class="org.jfree.chart.renderer.category.BoxAndWhiskerRenderer" />
	<class name="org.jfree.chart.renderer.category.StackedBarRenderer" />
	<method signature="boolean getRenderAsPercentages()" class="org.jfree.chart.renderer.category.StackedBarRenderer" />
	<method signature="void setRenderAsPercentages(boolean)" class="org.jfree.chart.renderer.category.StackedBarRenderer" />
	<method signature="int getPassCount()" class="org.jfree.chart.renderer.category.StackedBarRenderer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.category.StackedBarRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.category.StackedBarRenderer" />
	<method signature="void &lt;init&gt;(boolean)" class="org.jfree.chart.renderer.category.StackedBarRenderer" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)" class="org.jfree.chart.renderer.category.StackedBarRenderer" />
	<method signature="org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)" class="org.jfree.chart.renderer.category.StackedBarRenderer" />
	<class name="org.jfree.data.xy.TableXYDataset" />
	<method signature="int getItemCount()" class="org.jfree.data.xy.TableXYDataset" />
	<class name="javax.annotation.Untainted" />
	<method signature="javax.annotation.meta.When when()" class="javax.annotation.Untainted" />
	<class name="javax.xml.xpath.XPathConstants" />
	<class name="org.apache.commons.lang3.mutable.MutableByte" />
	<method signature="int compareTo(org.apache.commons.lang3.mutable.MutableByte)" class="org.apache.commons.lang3.mutable.MutableByte" />
	<method signature="void decrement()" class="org.apache.commons.lang3.mutable.MutableByte" />
	<method signature="void setValue(byte)" class="org.apache.commons.lang3.mutable.MutableByte" />
	<method signature="byte byteValue()" class="org.apache.commons.lang3.mutable.MutableByte" />
	<method signature="int intValue()" class="org.apache.commons.lang3.mutable.MutableByte" />
	<method signature="java.lang.Byte getValue()" class="org.apache.commons.lang3.mutable.MutableByte" />
	<method signature="boolean equals(java.lang.Object)" class="org.apache.commons.lang3.mutable.MutableByte" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.mutable.MutableByte" />
	<method signature="void &lt;init&gt;(byte)" class="org.apache.commons.lang3.mutable.MutableByte" />
	<method signature="void setValue(java.lang.Object)" class="org.apache.commons.lang3.mutable.MutableByte" />
	<method signature="java.lang.Object getValue()" class="org.apache.commons.lang3.mutable.MutableByte" />
	<method signature="void add(byte)" class="org.apache.commons.lang3.mutable.MutableByte" />
	<method signature="double doubleValue()" class="org.apache.commons.lang3.mutable.MutableByte" />
	<method signature="float floatValue()" class="org.apache.commons.lang3.mutable.MutableByte" />
	<method signature="void subtract(byte)" class="org.apache.commons.lang3.mutable.MutableByte" />
	<method signature="int compareTo(java.lang.Object)" class="org.apache.commons.lang3.mutable.MutableByte" />
	<method signature="int hashCode()" class="org.apache.commons.lang3.mutable.MutableByte" />
	<method signature="java.lang.Byte toByte()" class="org.apache.commons.lang3.mutable.MutableByte" />
	<method signature="void setValue(java.lang.Number)" class="org.apache.commons.lang3.mutable.MutableByte" />
	<method signature="void increment()" class="org.apache.commons.lang3.mutable.MutableByte" />
	<method signature="void &lt;init&gt;(java.lang.Number)" class="org.apache.commons.lang3.mutable.MutableByte" />
	<method signature="java.lang.String toString()" class="org.apache.commons.lang3.mutable.MutableByte" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.apache.commons.lang3.mutable.MutableByte" />
	<method signature="void add(java.lang.Number)" class="org.apache.commons.lang3.mutable.MutableByte" />
	<method signature="long longValue()" class="org.apache.commons.lang3.mutable.MutableByte" />
	<method signature="void subtract(java.lang.Number)" class="org.apache.commons.lang3.mutable.MutableByte" />
	<class name="org.apache.commons.lang3.text.translate.NumericEntityEscaper" />
	<method signature="org.apache.commons.lang3.text.translate.NumericEntityEscaper above(int)" class="org.apache.commons.lang3.text.translate.NumericEntityEscaper" />
	<method signature="org.apache.commons.lang3.text.translate.NumericEntityEscaper between(int,int)" class="org.apache.commons.lang3.text.translate.NumericEntityEscaper" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.text.translate.NumericEntityEscaper" />
	<method signature="org.apache.commons.lang3.text.translate.NumericEntityEscaper outsideOf(int,int)" class="org.apache.commons.lang3.text.translate.NumericEntityEscaper" />
	<method signature="org.apache.commons.lang3.text.translate.NumericEntityEscaper below(int)" class="org.apache.commons.lang3.text.translate.NumericEntityEscaper" />
	<method signature="boolean translate(int,java.io.Writer)" class="org.apache.commons.lang3.text.translate.NumericEntityEscaper" />
	<class name="org.jdom2.xpath.XPathExpression" />
	<method signature="java.lang.Object setVariable(java.lang.String,org.jdom2.Namespace,java.lang.Object)" class="org.jdom2.xpath.XPathExpression" />
	<method signature="java.util.List evaluate(java.lang.Object)" class="org.jdom2.xpath.XPathExpression" />
	<method signature="org.jdom2.xpath.XPathExpression clone()" class="org.jdom2.xpath.XPathExpression" />
	<method signature="org.jdom2.filter.Filter getFilter()" class="org.jdom2.xpath.XPathExpression" />
	<method signature="org.jdom2.xpath.XPathDiagnostic diagnose(java.lang.Object,boolean)" class="org.jdom2.xpath.XPathExpression" />
	<method signature="java.lang.String getExpression()" class="org.jdom2.xpath.XPathExpression" />
	<method signature="java.lang.Object getVariable(java.lang.String)" class="org.jdom2.xpath.XPathExpression" />
	<method signature="org.jdom2.Namespace getNamespace(java.lang.String)" class="org.jdom2.xpath.XPathExpression" />
	<method signature="java.lang.Object setVariable(java.lang.String,java.lang.Object)" class="org.jdom2.xpath.XPathExpression" />
	<method signature="java.lang.Object getVariable(java.lang.String,org.jdom2.Namespace)" class="org.jdom2.xpath.XPathExpression" />
	<method signature="java.lang.Object evaluateFirst(java.lang.Object)" class="org.jdom2.xpath.XPathExpression" />
	<method signature="org.jdom2.Namespace[] getNamespaces()" class="org.jdom2.xpath.XPathExpression" />
	<class name="com.google.zxing.client.result.ParsedResult" />
	<method signature="void maybeAppend(java.lang.String[],java.lang.StringBuilder)" class="com.google.zxing.client.result.ParsedResult" />
	<method signature="java.lang.String getDisplayResult()" class="com.google.zxing.client.result.ParsedResult" />
	<method signature="java.lang.String toString()" class="com.google.zxing.client.result.ParsedResult" />
	<method signature="com.google.zxing.client.result.ParsedResultType getType()" class="com.google.zxing.client.result.ParsedResult" />
	<method signature="void maybeAppend(java.lang.String,java.lang.StringBuilder)" class="com.google.zxing.client.result.ParsedResult" />
	<class name="org.jfree.chart.labels.StandardContourToolTipGenerator" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.labels.StandardContourToolTipGenerator" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.labels.StandardContourToolTipGenerator" />
	<method signature="java.lang.String generateToolTip(org.jfree.data.contour.ContourDataset,int)" class="org.jfree.chart.labels.StandardContourToolTipGenerator" />
	<class name="freemarker.template.utility.SecurityUtilities" />
	<method signature="java.lang.Integer getSystemProperty(java.lang.String,int)" class="freemarker.template.utility.SecurityUtilities" />
	<method signature="java.lang.String getSystemProperty(java.lang.String)" class="freemarker.template.utility.SecurityUtilities" />
	<method signature="java.lang.String getSystemProperty(java.lang.String,java.lang.String)" class="freemarker.template.utility.SecurityUtilities" />
	<class name="javax.xml.namespace.QName" />
	<method signature="java.lang.String getPrefix()" class="javax.xml.namespace.QName" />
	<method signature="javax.xml.namespace.QName valueOf(java.lang.String)" class="javax.xml.namespace.QName" />
	<method signature="int hashCode()" class="javax.xml.namespace.QName" />
	<method signature="boolean equals(java.lang.Object)" class="javax.xml.namespace.QName" />
	<method signature="java.lang.String getNamespaceURI()" class="javax.xml.namespace.QName" />
	<method signature="java.lang.String toString()" class="javax.xml.namespace.QName" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="javax.xml.namespace.QName" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String)" class="javax.xml.namespace.QName" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="javax.xml.namespace.QName" />
	<method signature="java.lang.String getLocalPart()" class="javax.xml.namespace.QName" />
	<class name="org.jfree.chart.event.RendererChangeEvent" />
	<method signature="boolean getSeriesVisibilityChanged()" class="org.jfree.chart.event.RendererChangeEvent" />
	<method signature="void &lt;init&gt;(java.lang.Object,boolean)" class="org.jfree.chart.event.RendererChangeEvent" />
	<method signature="java.lang.Object getRenderer()" class="org.jfree.chart.event.RendererChangeEvent" />
	<method signature="void &lt;init&gt;(java.lang.Object)" class="org.jfree.chart.event.RendererChangeEvent" />
	<class name="org.jfree.chart.plot.ValueAxisPlot" />
	<method signature="org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)" class="org.jfree.chart.plot.ValueAxisPlot" />
	<class name="org.jdom2.DocType" />
	<method signature="void setInternalSubset(java.lang.String)" class="org.jdom2.DocType" />
	<method signature="java.lang.String getElementName()" class="org.jdom2.DocType" />
	<method signature="java.lang.String getPublicID()" class="org.jdom2.DocType" />
	<method signature="org.jdom2.DocType setPublicID(java.lang.String)" class="org.jdom2.DocType" />
	<method signature="java.lang.Object clone()" class="org.jdom2.DocType" />
	<method signature="java.lang.String getInternalSubset()" class="org.jdom2.DocType" />
	<method signature="org.jdom2.Parent getParent()" class="org.jdom2.DocType" />
	<method signature="java.lang.String getSystemID()" class="org.jdom2.DocType" />
	<method signature="org.jdom2.DocType setElementName(java.lang.String)" class="org.jdom2.DocType" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String)" class="org.jdom2.DocType" />
	<method signature="org.jdom2.Document getParent()" class="org.jdom2.DocType" />
	<method signature="org.jdom2.Content detach()" class="org.jdom2.DocType" />
	<method signature="org.jdom2.Content clone()" class="org.jdom2.DocType" />
	<method signature="org.jdom2.DocType clone()" class="org.jdom2.DocType" />
	<method signature="org.jdom2.DocType detach()" class="org.jdom2.DocType" />
	<method signature="org.jdom2.DocType setSystemID(java.lang.String)" class="org.jdom2.DocType" />
	<method signature="java.lang.String getValue()" class="org.jdom2.DocType" />
	<method signature="java.lang.String toString()" class="org.jdom2.DocType" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="org.jdom2.DocType" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jdom2.DocType" />
	<method signature="org.jdom2.CloneBase clone()" class="org.jdom2.DocType" />
	<class name="org.apache.wml.dom.WMLPrevElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.wml.dom.WMLDocumentImpl,java.lang.String)" class="org.apache.wml.dom.WMLPrevElementImpl" />
	<method signature="java.lang.String getId()" class="org.apache.wml.dom.WMLPrevElementImpl" />
	<method signature="java.lang.String getClassName()" class="org.apache.wml.dom.WMLPrevElementImpl" />
	<method signature="void setClassName(java.lang.String)" class="org.apache.wml.dom.WMLPrevElementImpl" />
	<method signature="void setId(java.lang.String)" class="org.apache.wml.dom.WMLPrevElementImpl" />
	<class name="javax.xml.xpath.XPathExpressionException" />
	<method signature="void &lt;init&gt;(java.lang.Throwable)" class="javax.xml.xpath.XPathExpressionException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="javax.xml.xpath.XPathExpressionException" />
	<class name="fi.iki.elonen.NanoHTTPD$TempFileManagerFactory" />
	<method signature="fi.iki.elonen.NanoHTTPD$TempFileManager create()" class="fi.iki.elonen.NanoHTTPD$TempFileManagerFactory" />
	<class name="org.jfree.chart.labels.StandardCategoryToolTipGenerator" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.labels.StandardCategoryToolTipGenerator" />
	<method signature="void &lt;init&gt;(java.lang.String,java.text.NumberFormat)" class="org.jfree.chart.labels.StandardCategoryToolTipGenerator" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.labels.StandardCategoryToolTipGenerator" />
	<method signature="void &lt;init&gt;(java.lang.String,java.text.DateFormat)" class="org.jfree.chart.labels.StandardCategoryToolTipGenerator" />
	<method signature="java.lang.String generateToolTip(org.jfree.data.category.CategoryDataset,int,int)" class="org.jfree.chart.labels.StandardCategoryToolTipGenerator" />
	<class name="org.xml.sax.ext.Locator2Impl" />
	<method signature="java.lang.String getEncoding()" class="org.xml.sax.ext.Locator2Impl" />
	<method signature="void setEncoding(java.lang.String)" class="org.xml.sax.ext.Locator2Impl" />
	<method signature="void &lt;init&gt;()" class="org.xml.sax.ext.Locator2Impl" />
	<method signature="void &lt;init&gt;(org.xml.sax.Locator)" class="org.xml.sax.ext.Locator2Impl" />
	<method signature="void setXMLVersion(java.lang.String)" class="org.xml.sax.ext.Locator2Impl" />
	<method signature="java.lang.String getXMLVersion()" class="org.xml.sax.ext.Locator2Impl" />
	<class name="org.apache.xerces.impl.dv.InvalidDatatypeFacetException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Object[])" class="org.apache.xerces.impl.dv.InvalidDatatypeFacetException" />
	<class name="org.apache.commons.lang3.concurrent.ConcurrentRuntimeException" />
	<method signature="void &lt;init&gt;(java.lang.Throwable)" class="org.apache.commons.lang3.concurrent.ConcurrentRuntimeException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Throwable)" class="org.apache.commons.lang3.concurrent.ConcurrentRuntimeException" />
	<class name="tourma.languages.Translate" />
	<method signature="void &lt;init&gt;()" class="tourma.languages.Translate" />
	<method signature="java.lang.String translate(java.lang.String)" class="tourma.languages.Translate" />
	<class name="org.apache.xerces.impl.xs.XSGroupDecl" />
	<method signature="java.lang.String getName()" class="org.apache.xerces.impl.xs.XSGroupDecl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xs.XSGroupDecl" />
	<method signature="java.lang.String getNamespace()" class="org.apache.xerces.impl.xs.XSGroupDecl" />
	<method signature="org.apache.xerces.xs.XSModelGroup getModelGroup()" class="org.apache.xerces.impl.xs.XSGroupDecl" />
	<method signature="org.apache.xerces.xs.XSAnnotation getAnnotation()" class="org.apache.xerces.impl.xs.XSGroupDecl" />
	<method signature="org.apache.xerces.xs.XSObjectList getAnnotations()" class="org.apache.xerces.impl.xs.XSGroupDecl" />
	<method signature="short getType()" class="org.apache.xerces.impl.xs.XSGroupDecl" />
	<method signature="org.apache.xerces.xs.XSNamespaceItem getNamespaceItem()" class="org.apache.xerces.impl.xs.XSGroupDecl" />
	<class name="org.jfree.util.ObjectTable" />
	<method signature="int hashCode()" class="org.jfree.util.ObjectTable" />
	<method signature="void &lt;init&gt;(int,int)" class="org.jfree.util.ObjectTable" />
	<method signature="int getRowIncrement()" class="org.jfree.util.ObjectTable" />
	<method signature="void &lt;init&gt;(int)" class="org.jfree.util.ObjectTable" />
	<method signature="int getColumnIncrement()" class="org.jfree.util.ObjectTable" />
	<method signature="void clear()" class="org.jfree.util.ObjectTable" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.util.ObjectTable" />
	<method signature="void &lt;init&gt;()" class="org.jfree.util.ObjectTable" />
	<method signature="int getRowCount()" class="org.jfree.util.ObjectTable" />
	<method signature="void ensureCapacity(int,int)" class="org.jfree.util.ObjectTable" />
	<method signature="int getColumnCount()" class="org.jfree.util.ObjectTable" />
	<class name="org.jfree.util.TableOrder" />
	<method signature="int hashCode()" class="org.jfree.util.TableOrder" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.util.TableOrder" />
	<method signature="java.lang.String toString()" class="org.jfree.util.TableOrder" />
	<class name="org.apache.xerces.impl.XMLNSDocumentScannerImpl" />
	<method signature="void setDTDValidator(org.apache.xerces.impl.dtd.XMLDTDValidatorFilter)" class="org.apache.xerces.impl.XMLNSDocumentScannerImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.XMLNSDocumentScannerImpl" />
	<method signature="void reset(org.apache.xerces.xni.parser.XMLComponentManager)" class="org.apache.xerces.impl.XMLNSDocumentScannerImpl" />
	<class name="org.apache.xerces.dom.DOMImplementationImpl" />
	<method signature="org.w3c.dom.DOMImplementation getDOMImplementation()" class="org.apache.xerces.dom.DOMImplementationImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.dom.DOMImplementationImpl" />
	<method signature="boolean hasFeature(java.lang.String,java.lang.String)" class="org.apache.xerces.dom.DOMImplementationImpl" />
	<class name="org.apache.xerces.impl.xs.identity.Field$Matcher" />
	<method signature="void &lt;init&gt;(org.apache.xerces.impl.xs.identity.Field,org.apache.xerces.impl.xs.identity.Field$XPath,org.apache.xerces.impl.xs.identity.ValueStore)" class="org.apache.xerces.impl.xs.identity.Field$Matcher" />
	<class name="org.jfree.chart.block.BlockResult" />
	<method signature="void setEntityCollection(org.jfree.chart.entity.EntityCollection)" class="org.jfree.chart.block.BlockResult" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.block.BlockResult" />
	<method signature="org.jfree.chart.entity.EntityCollection getEntityCollection()" class="org.jfree.chart.block.BlockResult" />
	<class name="org.w3c.dom.TypeInfo" />
	<method signature="java.lang.String getTypeNamespace()" class="org.w3c.dom.TypeInfo" />
	<method signature="boolean isDerivedFrom(java.lang.String,java.lang.String,int)" class="org.w3c.dom.TypeInfo" />
	<method signature="java.lang.String getTypeName()" class="org.w3c.dom.TypeInfo" />
	<class name="org.jfree.util.StrokeList" />
	<method signature="java.lang.Object clone()" class="org.jfree.util.StrokeList" />
	<method signature="java.awt.Stroke getStroke(int)" class="org.jfree.util.StrokeList" />
	<method signature="void setStroke(int,java.awt.Stroke)" class="org.jfree.util.StrokeList" />
	<method signature="int hashCode()" class="org.jfree.util.StrokeList" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.util.StrokeList" />
	<method signature="void &lt;init&gt;()" class="org.jfree.util.StrokeList" />
	<class name="org.w3c.dom.html.HTMLImageElement" />
	<method signature="java.lang.String getName()" class="org.w3c.dom.html.HTMLImageElement" />
	<method signature="java.lang.String getBorder()" class="org.w3c.dom.html.HTMLImageElement" />
	<method signature="java.lang.String getUseMap()" class="org.w3c.dom.html.HTMLImageElement" />
	<method signature="java.lang.String getWidth()" class="org.w3c.dom.html.HTMLImageElement" />
	<method signature="java.lang.String getLongDesc()" class="org.w3c.dom.html.HTMLImageElement" />
	<method signature="java.lang.String getHspace()" class="org.w3c.dom.html.HTMLImageElement" />
	<method signature="void setIsMap(boolean)" class="org.w3c.dom.html.HTMLImageElement" />
	<method signature="void setLowSrc(java.lang.String)" class="org.w3c.dom.html.HTMLImageElement" />
	<method signature="java.lang.String getHeight()" class="org.w3c.dom.html.HTMLImageElement" />
	<method signature="java.lang.String getLowSrc()" class="org.w3c.dom.html.HTMLImageElement" />
	<method signature="void setName(java.lang.String)" class="org.w3c.dom.html.HTMLImageElement" />
	<method signature="void setLongDesc(java.lang.String)" class="org.w3c.dom.html.HTMLImageElement" />
	<method signature="void setAlign(java.lang.String)" class="org.w3c.dom.html.HTMLImageElement" />
	<method signature="void setBorder(java.lang.String)" class="org.w3c.dom.html.HTMLImageElement" />
	<method signature="java.lang.String getSrc()" class="org.w3c.dom.html.HTMLImageElement" />
	<method signature="java.lang.String getAlign()" class="org.w3c.dom.html.HTMLImageElement" />
	<method signature="void setAlt(java.lang.String)" class="org.w3c.dom.html.HTMLImageElement" />
	<method signature="void setVspace(java.lang.String)" class="org.w3c.dom.html.HTMLImageElement" />
	<method signature="void setSrc(java.lang.String)" class="org.w3c.dom.html.HTMLImageElement" />
	<method signature="void setUseMap(java.lang.String)" class="org.w3c.dom.html.HTMLImageElement" />
	<method signature="java.lang.String getAlt()" class="org.w3c.dom.html.HTMLImageElement" />
	<method signature="boolean getIsMap()" class="org.w3c.dom.html.HTMLImageElement" />
	<method signature="void setHeight(java.lang.String)" class="org.w3c.dom.html.HTMLImageElement" />
	<method signature="void setHspace(java.lang.String)" class="org.w3c.dom.html.HTMLImageElement" />
	<method signature="void setWidth(java.lang.String)" class="org.w3c.dom.html.HTMLImageElement" />
	<method signature="java.lang.String getVspace()" class="org.w3c.dom.html.HTMLImageElement" />
	<class name="org.jfree.data.general.ValueDataset" />
	<class name="com.google.zxing.client.result.SMSTOMMSTOResultParser" />
	<method signature="com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result)" class="com.google.zxing.client.result.SMSTOMMSTOResultParser" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.client.result.SMSTOMMSTOResultParser" />
	<method signature="com.google.zxing.client.result.SMSParsedResult parse(com.google.zxing.Result)" class="com.google.zxing.client.result.SMSTOMMSTOResultParser" />
	<class name="org.jfree.ui.about.resources.AboutResources_de" />
	<method signature="void &lt;init&gt;()" class="org.jfree.ui.about.resources.AboutResources_de" />
	<method signature="java.lang.Object[][] getContents()" class="org.jfree.ui.about.resources.AboutResources_de" />
	<class name="org.jfree.chart.renderer.xy.StandardXYBarPainter" />
	<method signature="int hashCode()" class="org.jfree.chart.renderer.xy.StandardXYBarPainter" />
	<method signature="void paintBar(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYBarRenderer,int,int,java.awt.geom.RectangularShape,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.renderer.xy.StandardXYBarPainter" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.xy.StandardXYBarPainter" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.xy.StandardXYBarPainter" />
	<method signature="void paintBarShadow(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYBarRenderer,int,int,java.awt.geom.RectangularShape,org.jfree.ui.RectangleEdge,boolean)" class="org.jfree.chart.renderer.xy.StandardXYBarPainter" />
	<class name="org.apache.xerces.util.URI" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.URI,java.lang.String,boolean)" class="org.apache.xerces.util.URI" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.util.URI" />
	<method signature="java.lang.String getPath()" class="org.apache.xerces.util.URI" />
	<method signature="java.lang.String getHost()" class="org.apache.xerces.util.URI" />
	<method signature="void setScheme(java.lang.String)" class="org.apache.xerces.util.URI" />
	<method signature="boolean isWellFormedAddress(java.lang.String)" class="org.apache.xerces.util.URI" />
	<method signature="boolean isAbsoluteURI()" class="org.apache.xerces.util.URI" />
	<method signature="void &lt;init&gt;(java.lang.String,boolean)" class="org.apache.xerces.util.URI" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.util.URI" />
	<method signature="void appendPath(java.lang.String)" class="org.apache.xerces.util.URI" />
	<method signature="void setQueryString(java.lang.String)" class="org.apache.xerces.util.URI" />
	<method signature="java.lang.String getFragment()" class="org.apache.xerces.util.URI" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.apache.xerces.util.URI" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="org.apache.xerces.util.URI" />
	<method signature="boolean isConformantSchemeName(java.lang.String)" class="org.apache.xerces.util.URI" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.URI)" class="org.apache.xerces.util.URI" />
	<method signature="int getPort()" class="org.apache.xerces.util.URI" />
	<method signature="boolean isWellFormedIPv6Reference(java.lang.String)" class="org.apache.xerces.util.URI" />
	<method signature="java.lang.String getRegBasedAuthority()" class="org.apache.xerces.util.URI" />
	<method signature="void setPort(int)" class="org.apache.xerces.util.URI" />
	<method signature="boolean equals(java.lang.Object)" class="org.apache.xerces.util.URI" />
	<method signature="java.lang.String getPath(boolean,boolean)" class="org.apache.xerces.util.URI" />
	<method signature="void setUserinfo(java.lang.String)" class="org.apache.xerces.util.URI" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.URI,java.lang.String)" class="org.apache.xerces.util.URI" />
	<method signature="java.lang.String getScheme()" class="org.apache.xerces.util.URI" />
	<method signature="void setRegBasedAuthority(java.lang.String)" class="org.apache.xerces.util.URI" />
	<method signature="boolean isWellFormedIPv4Address(java.lang.String)" class="org.apache.xerces.util.URI" />
	<method signature="java.lang.String getQueryString()" class="org.apache.xerces.util.URI" />
	<method signature="java.lang.String getUserinfo()" class="org.apache.xerces.util.URI" />
	<method signature="java.lang.String getAuthority()" class="org.apache.xerces.util.URI" />
	<method signature="boolean isGenericURI()" class="org.apache.xerces.util.URI" />
	<method signature="void setFragment(java.lang.String)" class="org.apache.xerces.util.URI" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.util.URI" />
	<method signature="void setHost(java.lang.String)" class="org.apache.xerces.util.URI" />
	<method signature="java.lang.String toString()" class="org.apache.xerces.util.URI" />
	<method signature="void absolutize(org.apache.xerces.util.URI)" class="org.apache.xerces.util.URI" />
	<method signature="java.lang.String getSchemeSpecificPart()" class="org.apache.xerces.util.URI" />
	<method signature="void setPath(java.lang.String)" class="org.apache.xerces.util.URI" />
	<class name="org.apache.wml.WMLOptgroupElement" />
	<method signature="java.lang.String getTitle()" class="org.apache.wml.WMLOptgroupElement" />
	<method signature="java.lang.String getXmlLang()" class="org.apache.wml.WMLOptgroupElement" />
	<method signature="void setXmlLang(java.lang.String)" class="org.apache.wml.WMLOptgroupElement" />
	<method signature="void setTitle(java.lang.String)" class="org.apache.wml.WMLOptgroupElement" />
	<class name="org.jfree.data.gantt.TaskSeriesCollection" />
	<method signature="java.lang.Number getStartValue(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.gantt.TaskSeriesCollection" />
	<method signature="void remove(org.jfree.data.gantt.TaskSeries)" class="org.jfree.data.gantt.TaskSeriesCollection" />
	<method signature="int getSubIntervalCount(int,int)" class="org.jfree.data.gantt.TaskSeriesCollection" />
	<method signature="java.lang.Number getValue(int,int)" class="org.jfree.data.gantt.TaskSeriesCollection" />
	<method signature="java.util.List getColumnKeys()" class="org.jfree.data.gantt.TaskSeriesCollection" />
	<method signature="int getSubIntervalCount(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.gantt.TaskSeriesCollection" />
	<method signature="java.lang.Number getPercentComplete(int,int)" class="org.jfree.data.gantt.TaskSeriesCollection" />
	<method signature="java.util.List getRowKeys()" class="org.jfree.data.gantt.TaskSeriesCollection" />
	<method signature="java.lang.Number getEndValue(java.lang.Comparable,java.lang.Comparable,int)" class="org.jfree.data.gantt.TaskSeriesCollection" />
	<method signature="int getSeriesCount()" class="org.jfree.data.gantt.TaskSeriesCollection" />
	<method signature="void remove(int)" class="org.jfree.data.gantt.TaskSeriesCollection" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.gantt.TaskSeriesCollection" />
	<method signature="java.lang.Comparable getSeriesKey(int)" class="org.jfree.data.gantt.TaskSeriesCollection" />
	<method signature="org.jfree.data.gantt.TaskSeries getSeries(java.lang.Comparable)" class="org.jfree.data.gantt.TaskSeriesCollection" />
	<method signature="java.lang.Number getPercentComplete(java.lang.Comparable,java.lang.Comparable,int)" class="org.jfree.data.gantt.TaskSeriesCollection" />
	<method signature="java.lang.Number getEndValue(int,int)" class="org.jfree.data.gantt.TaskSeriesCollection" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.gantt.TaskSeriesCollection" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.gantt.TaskSeriesCollection" />
	<method signature="org.jfree.data.gantt.TaskSeries getSeries(int)" class="org.jfree.data.gantt.TaskSeriesCollection" />
	<method signature="java.lang.Number getStartValue(int,int,int)" class="org.jfree.data.gantt.TaskSeriesCollection" />
	<method signature="int getRowCount()" class="org.jfree.data.gantt.TaskSeriesCollection" />
	<method signature="int getColumnCount()" class="org.jfree.data.gantt.TaskSeriesCollection" />
	<method signature="java.lang.Number getValue(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.gantt.TaskSeriesCollection" />
	<method signature="void seriesChanged(org.jfree.data.general.SeriesChangeEvent)" class="org.jfree.data.gantt.TaskSeriesCollection" />
	<method signature="java.lang.Number getStartValue(int,int)" class="org.jfree.data.gantt.TaskSeriesCollection" />
	<method signature="java.lang.Number getEndValue(int,int,int)" class="org.jfree.data.gantt.TaskSeriesCollection" />
	<method signature="java.lang.Comparable getColumnKey(int)" class="org.jfree.data.gantt.TaskSeriesCollection" />
	<method signature="void removeAll()" class="org.jfree.data.gantt.TaskSeriesCollection" />
	<method signature="void add(org.jfree.data.gantt.TaskSeries)" class="org.jfree.data.gantt.TaskSeriesCollection" />
	<method signature="java.lang.Number getPercentComplete(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.gantt.TaskSeriesCollection" />
	<method signature="java.lang.Number getEndValue(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.gantt.TaskSeriesCollection" />
	<method signature="java.lang.Comparable getRowKey(int)" class="org.jfree.data.gantt.TaskSeriesCollection" />
	<method signature="int getRowIndex(java.lang.Comparable)" class="org.jfree.data.gantt.TaskSeriesCollection" />
	<method signature="java.lang.Number getPercentComplete(int,int,int)" class="org.jfree.data.gantt.TaskSeriesCollection" />
	<method signature="int getColumnIndex(java.lang.Comparable)" class="org.jfree.data.gantt.TaskSeriesCollection" />
	<method signature="java.lang.Number getStartValue(java.lang.Comparable,java.lang.Comparable,int)" class="org.jfree.data.gantt.TaskSeriesCollection" />
	<class name="org.apache.xerces.parsers.AbstractDOMParser" />
	<method signature="void startAttlist(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractDOMParser" />
	<method signature="void setLocale(java.util.Locale)" class="org.apache.xerces.parsers.AbstractDOMParser" />
	<method signature="void reset()" class="org.apache.xerces.parsers.AbstractDOMParser" />
	<method signature="void processingInstruction(java.lang.String,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractDOMParser" />
	<method signature="void endElement(org.apache.xerces.xni.QName,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractDOMParser" />
	<method signature="void externalEntityDecl(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractDOMParser" />
	<method signature="void notationDecl(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractDOMParser" />
	<method signature="void startParameterEntity(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractDOMParser" />
	<method signature="void doctypeDecl(java.lang.String,java.lang.String,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractDOMParser" />
	<method signature="void startCDATA(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractDOMParser" />
	<method signature="void abort()" class="org.apache.xerces.parsers.AbstractDOMParser" />
	<method signature="void ignorableWhitespace(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractDOMParser" />
	<method signature="void attributeDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractDOMParser" />
	<method signature="void internalEntityDecl(java.lang.String,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractDOMParser" />
	<method signature="void endCDATA(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractDOMParser" />
	<method signature="void textDecl(java.lang.String,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractDOMParser" />
	<method signature="org.w3c.dom.Document getDocument()" class="org.apache.xerces.parsers.AbstractDOMParser" />
	<method signature="void startExternalSubset(org.apache.xerces.xni.XMLResourceIdentifier,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractDOMParser" />
	<method signature="void emptyElement(org.apache.xerces.xni.QName,org.apache.xerces.xni.XMLAttributes,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractDOMParser" />
	<method signature="void characters(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractDOMParser" />
	<method signature="void startDTD(org.apache.xerces.xni.XMLLocator,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractDOMParser" />
	<method signature="void xmlDecl(java.lang.String,java.lang.String,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractDOMParser" />
	<method signature="void elementDecl(java.lang.String,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractDOMParser" />
	<method signature="void endParameterEntity(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractDOMParser" />
	<method signature="void endAttlist(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractDOMParser" />
	<method signature="void endConditional(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractDOMParser" />
	<method signature="void ignoredCharacters(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractDOMParser" />
	<method signature="void endDTD(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractDOMParser" />
	<method signature="void startConditional(short,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractDOMParser" />
	<method signature="void unparsedEntityDecl(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractDOMParser" />
	<method signature="void endDocument(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractDOMParser" />
	<method signature="void startElement(org.apache.xerces.xni.QName,org.apache.xerces.xni.XMLAttributes,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractDOMParser" />
	<method signature="void dropDocumentReferences()" class="org.apache.xerces.parsers.AbstractDOMParser" />
	<method signature="void endExternalSubset(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractDOMParser" />
	<method signature="void startGeneralEntity(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractDOMParser" />
	<method signature="void comment(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractDOMParser" />
	<method signature="void startDocument(org.apache.xerces.xni.XMLLocator,java.lang.String,org.apache.xerces.xni.NamespaceContext,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractDOMParser" />
	<method signature="void endGeneralEntity(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractDOMParser" />
	<class name="org.apache.wml.WMLTimerElement" />
	<method signature="java.lang.String getName()" class="org.apache.wml.WMLTimerElement" />
	<method signature="void setValue(java.lang.String)" class="org.apache.wml.WMLTimerElement" />
	<method signature="java.lang.String getValue()" class="org.apache.wml.WMLTimerElement" />
	<method signature="void setName(java.lang.String)" class="org.apache.wml.WMLTimerElement" />
	<class name="tourma.utils.web.WebServer" />
	<method signature="void &lt;init&gt;()" class="tourma.utils.web.WebServer" />
	<method signature="fi.iki.elonen.NanoHTTPD$Response serve(fi.iki.elonen.NanoHTTPD$IHTTPSession)" class="tourma.utils.web.WebServer" />
	<class name="org.jfree.data.general.CombinedDataset" />
	<method signature="double getVolumeValue(int,int)" class="org.jfree.data.general.CombinedDataset" />
	<method signature="int getChildPosition(org.jfree.data.general.Dataset)" class="org.jfree.data.general.CombinedDataset" />
	<method signature="java.lang.Number getX(int,int)" class="org.jfree.data.general.CombinedDataset" />
	<method signature="java.lang.Number getY(int,int)" class="org.jfree.data.general.CombinedDataset" />
	<method signature="double getHighValue(int,int)" class="org.jfree.data.general.CombinedDataset" />
	<method signature="int getSeriesCount()" class="org.jfree.data.general.CombinedDataset" />
	<method signature="java.lang.Comparable getSeriesKey(int)" class="org.jfree.data.general.CombinedDataset" />
	<method signature="void add(org.jfree.data.general.SeriesDataset)" class="org.jfree.data.general.CombinedDataset" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.general.CombinedDataset" />
	<method signature="java.lang.Number getEndX(int,int)" class="org.jfree.data.general.CombinedDataset" />
	<method signature="void add(org.jfree.data.general.SeriesDataset,int)" class="org.jfree.data.general.CombinedDataset" />
	<method signature="int getItemCount(int)" class="org.jfree.data.general.CombinedDataset" />
	<method signature="java.lang.Number getEndY(int,int)" class="org.jfree.data.general.CombinedDataset" />
	<method signature="int[] getMap()" class="org.jfree.data.general.CombinedDataset" />
	<method signature="java.lang.Number getLow(int,int)" class="org.jfree.data.general.CombinedDataset" />
	<method signature="java.lang.Number getVolume(int,int)" class="org.jfree.data.general.CombinedDataset" />
	<method signature="double getOpenValue(int,int)" class="org.jfree.data.general.CombinedDataset" />
	<method signature="java.lang.Number getHigh(int,int)" class="org.jfree.data.general.CombinedDataset" />
	<method signature="org.jfree.data.general.SeriesDataset getParent()" class="org.jfree.data.general.CombinedDataset" />
	<method signature="void &lt;init&gt;(org.jfree.data.general.SeriesDataset[])" class="org.jfree.data.general.CombinedDataset" />
	<method signature="java.lang.Number getClose(int,int)" class="org.jfree.data.general.CombinedDataset" />
	<method signature="java.lang.Number getOpen(int,int)" class="org.jfree.data.general.CombinedDataset" />
	<method signature="void add(org.jfree.data.general.SeriesDataset[])" class="org.jfree.data.general.CombinedDataset" />
	<method signature="double getCloseValue(int,int)" class="org.jfree.data.general.CombinedDataset" />
	<method signature="java.lang.Number getStartX(int,int)" class="org.jfree.data.general.CombinedDataset" />
	<method signature="java.lang.Number getStartY(int,int)" class="org.jfree.data.general.CombinedDataset" />
	<method signature="double getLowValue(int,int)" class="org.jfree.data.general.CombinedDataset" />
	<class name="org.jfree.chart.needle.LineNeedle" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.needle.LineNeedle" />
	<method signature="int hashCode()" class="org.jfree.chart.needle.LineNeedle" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.needle.LineNeedle" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.needle.LineNeedle" />
	<class name="tourma.utils.Balancing" />
	<method signature="boolean isRoundValid(java.util.ArrayList,java.util.HashMap,java.util.HashMap)" class="tourma.utils.Balancing" />
	<method signature="void balanceCoachMatchs(java.util.ArrayList)" class="tourma.utils.Balancing" />
	<method signature="int getMinimumFromHash(java.util.HashMap)" class="tourma.utils.Balancing" />
	<method signature="int getMaximumFromHash(java.util.HashMap)" class="tourma.utils.Balancing" />
	<class name="com.swabunga.spell.event.DocumentWordTokenizer" />
	<method signature="boolean hasMoreWords()" class="com.swabunga.spell.event.DocumentWordTokenizer" />
	<method signature="void &lt;init&gt;(javax.swing.text.Document)" class="com.swabunga.spell.event.DocumentWordTokenizer" />
	<method signature="int getCurrentWordEnd()" class="com.swabunga.spell.event.DocumentWordTokenizer" />
	<method signature="java.lang.String nextWord()" class="com.swabunga.spell.event.DocumentWordTokenizer" />
	<method signature="int getCurrentWordPosition()" class="com.swabunga.spell.event.DocumentWordTokenizer" />
	<method signature="int getCurrentWordCount()" class="com.swabunga.spell.event.DocumentWordTokenizer" />
	<method signature="void replaceWord(java.lang.String)" class="com.swabunga.spell.event.DocumentWordTokenizer" />
	<method signature="boolean isNewSentance()" class="com.swabunga.spell.event.DocumentWordTokenizer" />
	<method signature="java.lang.String getContext()" class="com.swabunga.spell.event.DocumentWordTokenizer" />
	<class name="org.apache.xerces.impl.dtd.XMLNotationDecl" />
	<method signature="void clear()" class="org.apache.xerces.impl.dtd.XMLNotationDecl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dtd.XMLNotationDecl" />
	<method signature="void setValues(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.impl.dtd.XMLNotationDecl" />
	<class name="org.apache.xerces.impl.XMLDocumentFragmentScannerImpl" />
	<method signature="boolean scanDocument(boolean)" class="org.apache.xerces.impl.XMLDocumentFragmentScannerImpl" />
	<method signature="java.lang.String[] getRecognizedProperties()" class="org.apache.xerces.impl.XMLDocumentFragmentScannerImpl" />
	<method signature="java.lang.Boolean getFeatureDefault(java.lang.String)" class="org.apache.xerces.impl.XMLDocumentFragmentScannerImpl" />
	<method signature="void reset(org.apache.xerces.xni.parser.XMLComponentManager)" class="org.apache.xerces.impl.XMLDocumentFragmentScannerImpl" />
	<method signature="void setDocumentHandler(org.apache.xerces.xni.XMLDocumentHandler)" class="org.apache.xerces.impl.XMLDocumentFragmentScannerImpl" />
	<method signature="void endEntity(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.XMLDocumentFragmentScannerImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.XMLDocumentFragmentScannerImpl" />
	<method signature="void setInputSource(org.apache.xerces.xni.parser.XMLInputSource)" class="org.apache.xerces.impl.XMLDocumentFragmentScannerImpl" />
	<method signature="void setFeature(java.lang.String,boolean)" class="org.apache.xerces.impl.XMLDocumentFragmentScannerImpl" />
	<method signature="void startEntity(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.XMLDocumentFragmentScannerImpl" />
	<method signature="java.lang.String[] getRecognizedFeatures()" class="org.apache.xerces.impl.XMLDocumentFragmentScannerImpl" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="org.apache.xerces.impl.XMLDocumentFragmentScannerImpl" />
	<method signature="org.apache.xerces.xni.XMLDocumentHandler getDocumentHandler()" class="org.apache.xerces.impl.XMLDocumentFragmentScannerImpl" />
	<method signature="java.lang.Object getPropertyDefault(java.lang.String)" class="org.apache.xerces.impl.XMLDocumentFragmentScannerImpl" />
	<method signature="java.lang.String getDispatcherName(org.apache.xerces.impl.XMLDocumentFragmentScannerImpl$Dispatcher)" class="org.apache.xerces.impl.XMLDocumentFragmentScannerImpl" />
	<class name="org.jfree.chart.plot.dial.AbstractDialLayer" />
	<method signature="int hashCode()" class="org.jfree.chart.plot.dial.AbstractDialLayer" />
	<method signature="void removeChangeListener(org.jfree.chart.plot.dial.DialLayerChangeListener)" class="org.jfree.chart.plot.dial.AbstractDialLayer" />
	<method signature="boolean hasListener(java.util.EventListener)" class="org.jfree.chart.plot.dial.AbstractDialLayer" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.plot.dial.AbstractDialLayer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.plot.dial.AbstractDialLayer" />
	<method signature="void setVisible(boolean)" class="org.jfree.chart.plot.dial.AbstractDialLayer" />
	<method signature="boolean isVisible()" class="org.jfree.chart.plot.dial.AbstractDialLayer" />
	<method signature="void addChangeListener(org.jfree.chart.plot.dial.DialLayerChangeListener)" class="org.jfree.chart.plot.dial.AbstractDialLayer" />
	<class name="org.jfree.chart.renderer.category.GanttRenderer" />
	<method signature="void setIncompletePaint(java.awt.Paint)" class="org.jfree.chart.renderer.category.GanttRenderer" />
	<method signature="double getEndPercent()" class="org.jfree.chart.renderer.category.GanttRenderer" />
	<method signature="java.awt.Paint getIncompletePaint()" class="org.jfree.chart.renderer.category.GanttRenderer" />
	<method signature="void setEndPercent(double)" class="org.jfree.chart.renderer.category.GanttRenderer" />
	<method signature="java.awt.Paint getCompletePaint()" class="org.jfree.chart.renderer.category.GanttRenderer" />
	<method signature="void setCompletePaint(java.awt.Paint)" class="org.jfree.chart.renderer.category.GanttRenderer" />
	<method signature="double getItemMiddle(java.lang.Comparable,java.lang.Comparable,org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.renderer.category.GanttRenderer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.category.GanttRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.category.GanttRenderer" />
	<method signature="void setStartPercent(double)" class="org.jfree.chart.renderer.category.GanttRenderer" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)" class="org.jfree.chart.renderer.category.GanttRenderer" />
	<method signature="double getStartPercent()" class="org.jfree.chart.renderer.category.GanttRenderer" />
	<class name="com.google.zxing.multi.MultipleBarcodeReader" />
	<method signature="com.google.zxing.Result[] decodeMultiple(com.google.zxing.BinaryBitmap,java.util.Map)" class="com.google.zxing.multi.MultipleBarcodeReader" />
	<method signature="com.google.zxing.Result[] decodeMultiple(com.google.zxing.BinaryBitmap)" class="com.google.zxing.multi.MultipleBarcodeReader" />
	<class name="org.jfree.chart.axis.DateTickUnit" />
	<method signature="java.util.Date addToDate(java.util.Date,java.util.TimeZone)" class="org.jfree.chart.axis.DateTickUnit" />
	<method signature="java.util.Date addToDate(java.util.Date)" class="org.jfree.chart.axis.DateTickUnit" />
	<method signature="void &lt;init&gt;(org.jfree.chart.axis.DateTickUnitType,int)" class="org.jfree.chart.axis.DateTickUnit" />
	<method signature="int getUnit()" class="org.jfree.chart.axis.DateTickUnit" />
	<method signature="void &lt;init&gt;(int,int)" class="org.jfree.chart.axis.DateTickUnit" />
	<method signature="void &lt;init&gt;(org.jfree.chart.axis.DateTickUnitType,int,java.text.DateFormat)" class="org.jfree.chart.axis.DateTickUnit" />
	<method signature="java.lang.String valueToString(double)" class="org.jfree.chart.axis.DateTickUnit" />
	<method signature="java.util.Date rollDate(java.util.Date,java.util.TimeZone)" class="org.jfree.chart.axis.DateTickUnit" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.axis.DateTickUnit" />
	<method signature="java.util.Date rollDate(java.util.Date)" class="org.jfree.chart.axis.DateTickUnit" />
	<method signature="org.jfree.chart.axis.DateTickUnitType getRollUnitType()" class="org.jfree.chart.axis.DateTickUnit" />
	<method signature="java.lang.String dateToString(java.util.Date)" class="org.jfree.chart.axis.DateTickUnit" />
	<method signature="int getMultiple()" class="org.jfree.chart.axis.DateTickUnit" />
	<method signature="int hashCode()" class="org.jfree.chart.axis.DateTickUnit" />
	<method signature="void &lt;init&gt;(int,int,java.text.DateFormat)" class="org.jfree.chart.axis.DateTickUnit" />
	<method signature="void &lt;init&gt;(int,int,int,int,java.text.DateFormat)" class="org.jfree.chart.axis.DateTickUnit" />
	<method signature="int getCount()" class="org.jfree.chart.axis.DateTickUnit" />
	<method signature="void &lt;init&gt;(org.jfree.chart.axis.DateTickUnitType,int,org.jfree.chart.axis.DateTickUnitType,int,java.text.DateFormat)" class="org.jfree.chart.axis.DateTickUnit" />
	<method signature="org.jfree.chart.axis.DateTickUnitType getUnitType()" class="org.jfree.chart.axis.DateTickUnit" />
	<method signature="int getCalendarField()" class="org.jfree.chart.axis.DateTickUnit" />
	<method signature="int getRollMultiple()" class="org.jfree.chart.axis.DateTickUnit" />
	<method signature="int getRollCount()" class="org.jfree.chart.axis.DateTickUnit" />
	<method signature="java.lang.String toString()" class="org.jfree.chart.axis.DateTickUnit" />
	<method signature="int getRollUnit()" class="org.jfree.chart.axis.DateTickUnit" />
	<class name="org.apache.xerces.stax.events.NotationDeclarationImpl" />
	<method signature="java.lang.String getSystemId()" class="org.apache.xerces.stax.events.NotationDeclarationImpl" />
	<method signature="java.lang.String getName()" class="org.apache.xerces.stax.events.NotationDeclarationImpl" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,javax.xml.stream.Location)" class="org.apache.xerces.stax.events.NotationDeclarationImpl" />
	<method signature="void writeAsEncodedUnicode(java.io.Writer)" class="org.apache.xerces.stax.events.NotationDeclarationImpl" />
	<method signature="java.lang.String getPublicId()" class="org.apache.xerces.stax.events.NotationDeclarationImpl" />
	<class name="org.w3c.dom.DOMStringList" />
	<method signature="java.lang.String item(int)" class="org.w3c.dom.DOMStringList" />
	<method signature="boolean contains(java.lang.String)" class="org.w3c.dom.DOMStringList" />
	<method signature="int getLength()" class="org.w3c.dom.DOMStringList" />
	<class name="org.w3c.dom.css.ViewCSS" />
	<method signature="org.w3c.dom.css.CSSStyleDeclaration getComputedStyle(org.w3c.dom.Element,java.lang.String)" class="org.w3c.dom.css.ViewCSS" />
	<class name="org.jfree.chart.plot.DatasetRenderingOrder" />
	<method signature="int hashCode()" class="org.jfree.chart.plot.DatasetRenderingOrder" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.plot.DatasetRenderingOrder" />
	<method signature="java.lang.String toString()" class="org.jfree.chart.plot.DatasetRenderingOrder" />
	<class name="org.jfree.ui.about.LibraryPanel" />
	<method signature="void &lt;init&gt;(java.util.List)" class="org.jfree.ui.about.LibraryPanel" />
	<method signature="void &lt;init&gt;(org.jfree.ui.about.ProjectInfo)" class="org.jfree.ui.about.LibraryPanel" />
	<method signature="org.jfree.ui.about.LibraryTableModel getModel()" class="org.jfree.ui.about.LibraryPanel" />
	<class name="org.apache.commons.lang3.Conversion" />
	<method signature="char binaryToHexDigit(boolean[])" class="org.apache.commons.lang3.Conversion" />
	<method signature="int byteArrayToInt(byte[],int,int,int,int)" class="org.apache.commons.lang3.Conversion" />
	<method signature="char binaryToHexDigitMsb0_4bits(boolean[],int)" class="org.apache.commons.lang3.Conversion" />
	<method signature="byte[] shortToByteArray(short,int,byte[],int,int)" class="org.apache.commons.lang3.Conversion" />
	<method signature="long shortArrayToLong(short[],int,long,int,int)" class="org.apache.commons.lang3.Conversion" />
	<method signature="java.lang.String shortToHex(short,int,java.lang.String,int,int)" class="org.apache.commons.lang3.Conversion" />
	<method signature="short hexToShort(java.lang.String,int,short,int,int)" class="org.apache.commons.lang3.Conversion" />
	<method signature="java.lang.String byteToHex(byte,int,java.lang.String,int,int)" class="org.apache.commons.lang3.Conversion" />
	<method signature="char intToHexDigitMsb0(int)" class="org.apache.commons.lang3.Conversion" />
	<method signature="byte[] longToByteArray(long,int,byte[],int,int)" class="org.apache.commons.lang3.Conversion" />
	<method signature="boolean[] shortToBinary(short,int,boolean[],int,int)" class="org.apache.commons.lang3.Conversion" />
	<method signature="byte hexToByte(java.lang.String,int,byte,int,int)" class="org.apache.commons.lang3.Conversion" />
	<method signature="boolean[] longToBinary(long,int,boolean[],int,int)" class="org.apache.commons.lang3.Conversion" />
	<method signature="byte[] uuidToByteArray(java.util.UUID,byte[],int,int)" class="org.apache.commons.lang3.Conversion" />
	<method signature="char binaryBeMsb0ToHexDigit(boolean[],int)" class="org.apache.commons.lang3.Conversion" />
	<method signature="short[] intToShortArray(int,int,short[],int,int)" class="org.apache.commons.lang3.Conversion" />
	<method signature="int hexDigitMsb0ToInt(char)" class="org.apache.commons.lang3.Conversion" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.Conversion" />
	<method signature="boolean[] intToBinary(int,int,boolean[],int,int)" class="org.apache.commons.lang3.Conversion" />
	<method signature="int binaryToInt(boolean[],int,int,int,int)" class="org.apache.commons.lang3.Conversion" />
	<method signature="short[] longToShortArray(long,int,short[],int,int)" class="org.apache.commons.lang3.Conversion" />
	<method signature="int shortArrayToInt(short[],int,int,int,int)" class="org.apache.commons.lang3.Conversion" />
	<method signature="long byteArrayToLong(byte[],int,long,int,int)" class="org.apache.commons.lang3.Conversion" />
	<method signature="int[] longToIntArray(long,int,int[],int,int)" class="org.apache.commons.lang3.Conversion" />
	<method signature="long binaryToLong(boolean[],int,long,int,int)" class="org.apache.commons.lang3.Conversion" />
	<method signature="char intToHexDigit(int)" class="org.apache.commons.lang3.Conversion" />
	<method signature="java.lang.String intToHex(int,int,java.lang.String,int,int)" class="org.apache.commons.lang3.Conversion" />
	<method signature="int hexDigitToInt(char)" class="org.apache.commons.lang3.Conversion" />
	<method signature="char binaryBeMsb0ToHexDigit(boolean[])" class="org.apache.commons.lang3.Conversion" />
	<method signature="short byteArrayToShort(byte[],int,short,int,int)" class="org.apache.commons.lang3.Conversion" />
	<method signature="short binaryToShort(boolean[],int,short,int,int)" class="org.apache.commons.lang3.Conversion" />
	<method signature="boolean[] byteToBinary(byte,int,boolean[],int,int)" class="org.apache.commons.lang3.Conversion" />
	<method signature="boolean[] hexDigitToBinary(char)" class="org.apache.commons.lang3.Conversion" />
	<method signature="byte binaryToByte(boolean[],int,byte,int,int)" class="org.apache.commons.lang3.Conversion" />
	<method signature="java.lang.String longToHex(long,int,java.lang.String,int,int)" class="org.apache.commons.lang3.Conversion" />
	<method signature="byte[] intToByteArray(int,int,byte[],int,int)" class="org.apache.commons.lang3.Conversion" />
	<method signature="java.util.UUID byteArrayToUuid(byte[],int)" class="org.apache.commons.lang3.Conversion" />
	<method signature="boolean[] hexDigitMsb0ToBinary(char)" class="org.apache.commons.lang3.Conversion" />
	<method signature="char binaryToHexDigitMsb0_4bits(boolean[])" class="org.apache.commons.lang3.Conversion" />
	<method signature="long intArrayToLong(int[],int,long,int,int)" class="org.apache.commons.lang3.Conversion" />
	<method signature="char binaryToHexDigit(boolean[],int)" class="org.apache.commons.lang3.Conversion" />
	<method signature="long hexToLong(java.lang.String,int,long,int,int)" class="org.apache.commons.lang3.Conversion" />
	<method signature="int hexToInt(java.lang.String,int,int,int,int)" class="org.apache.commons.lang3.Conversion" />
	<class name="org.apache.xerces.impl.XMLScanner" />
	<method signature="java.lang.String[] getRecognizedProperties()" class="org.apache.xerces.impl.XMLScanner" />
	<method signature="java.lang.Boolean getFeatureDefault(java.lang.String)" class="org.apache.xerces.impl.XMLScanner" />
	<method signature="boolean getFeature(java.lang.String)" class="org.apache.xerces.impl.XMLScanner" />
	<method signature="void reset(org.apache.xerces.xni.parser.XMLComponentManager)" class="org.apache.xerces.impl.XMLScanner" />
	<method signature="void endEntity(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.XMLScanner" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.XMLScanner" />
	<method signature="void setFeature(java.lang.String,boolean)" class="org.apache.xerces.impl.XMLScanner" />
	<method signature="void startEntity(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.XMLScanner" />
	<method signature="java.lang.String[] getRecognizedFeatures()" class="org.apache.xerces.impl.XMLScanner" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="org.apache.xerces.impl.XMLScanner" />
	<method signature="java.lang.Object getPropertyDefault(java.lang.String)" class="org.apache.xerces.impl.XMLScanner" />
	<method signature="java.lang.String scanPseudoAttribute(boolean,org.apache.xerces.xni.XMLString)" class="org.apache.xerces.impl.XMLScanner" />
	<class name="tourma.utils.NAF" />
	<method signature="double getRanking(java.lang.String,tourma.data.Coach)" class="tourma.utils.NAF" />
	<class name="org.apache.wml.dom.WMLTemplateElementImpl" />
	<method signature="java.lang.String getOnEnterBackward()" class="org.apache.wml.dom.WMLTemplateElementImpl" />
	<method signature="java.lang.String getOnTimer()" class="org.apache.wml.dom.WMLTemplateElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.wml.dom.WMLDocumentImpl,java.lang.String)" class="org.apache.wml.dom.WMLTemplateElementImpl" />
	<method signature="java.lang.String getId()" class="org.apache.wml.dom.WMLTemplateElementImpl" />
	<method signature="java.lang.String getClassName()" class="org.apache.wml.dom.WMLTemplateElementImpl" />
	<method signature="void setOnTimer(java.lang.String)" class="org.apache.wml.dom.WMLTemplateElementImpl" />
	<method signature="void setOnEnterBackward(java.lang.String)" class="org.apache.wml.dom.WMLTemplateElementImpl" />
	<method signature="void setClassName(java.lang.String)" class="org.apache.wml.dom.WMLTemplateElementImpl" />
	<method signature="void setOnEnterForward(java.lang.String)" class="org.apache.wml.dom.WMLTemplateElementImpl" />
	<method signature="java.lang.String getOnEnterForward()" class="org.apache.wml.dom.WMLTemplateElementImpl" />
	<method signature="void setId(java.lang.String)" class="org.apache.wml.dom.WMLTemplateElementImpl" />
	<class name="org.apache.xerces.impl.xs.ElementPSVImpl" />
	<method signature="org.apache.xerces.xs.XSSimpleTypeDefinition getMemberTypeDefinition()" class="org.apache.xerces.impl.xs.ElementPSVImpl" />
	<method signature="org.apache.xerces.xs.XSValue getSchemaValue()" class="org.apache.xerces.impl.xs.ElementPSVImpl" />
	<method signature="void reset()" class="org.apache.xerces.impl.xs.ElementPSVImpl" />
	<method signature="org.apache.xerces.xs.XSTypeDefinition getTypeDefinition()" class="org.apache.xerces.impl.xs.ElementPSVImpl" />
	<method signature="org.apache.xerces.xs.XSNotationDeclaration getNotation()" class="org.apache.xerces.impl.xs.ElementPSVImpl" />
	<method signature="java.lang.String getValidationContext()" class="org.apache.xerces.impl.xs.ElementPSVImpl" />
	<method signature="org.apache.xerces.xs.ShortList getItemValueTypes()" class="org.apache.xerces.impl.xs.ElementPSVImpl" />
	<method signature="org.apache.xerces.xs.XSElementDeclaration getElementDeclaration()" class="org.apache.xerces.impl.xs.ElementPSVImpl" />
	<method signature="org.apache.xerces.xs.StringList getErrorMessages()" class="org.apache.xerces.impl.xs.ElementPSVImpl" />
	<method signature="boolean getNil()" class="org.apache.xerces.impl.xs.ElementPSVImpl" />
	<method signature="short getValidity()" class="org.apache.xerces.impl.xs.ElementPSVImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xs.ElementPSVImpl" />
	<method signature="short getActualNormalizedValueType()" class="org.apache.xerces.impl.xs.ElementPSVImpl" />
	<method signature="boolean getIsSchemaSpecified()" class="org.apache.xerces.impl.xs.ElementPSVImpl" />
	<method signature="org.apache.xerces.xs.XSModel getSchemaInformation()" class="org.apache.xerces.impl.xs.ElementPSVImpl" />
	<method signature="java.lang.Object getActualNormalizedValue()" class="org.apache.xerces.impl.xs.ElementPSVImpl" />
	<method signature="java.lang.String getSchemaDefault()" class="org.apache.xerces.impl.xs.ElementPSVImpl" />
	<method signature="org.apache.xerces.xs.StringList getErrorCodes()" class="org.apache.xerces.impl.xs.ElementPSVImpl" />
	<method signature="void copySchemaInformationTo(org.apache.xerces.impl.xs.ElementPSVImpl)" class="org.apache.xerces.impl.xs.ElementPSVImpl" />
	<method signature="short getValidationAttempted()" class="org.apache.xerces.impl.xs.ElementPSVImpl" />
	<method signature="java.lang.String getSchemaNormalizedValue()" class="org.apache.xerces.impl.xs.ElementPSVImpl" />
	<class name="com.toedter.calendar.JMonthChooser" />
	<method signature="void setLocale(java.util.Locale)" class="com.toedter.calendar.JMonthChooser" />
	<method signature="java.util.Locale getLocale()" class="com.toedter.calendar.JMonthChooser" />
	<method signature="void setEnabled(boolean)" class="com.toedter.calendar.JMonthChooser" />
	<method signature="java.awt.Component getComboBox()" class="com.toedter.calendar.JMonthChooser" />
	<method signature="boolean hasSpinner()" class="com.toedter.calendar.JMonthChooser" />
	<method signature="void initNames()" class="com.toedter.calendar.JMonthChooser" />
	<method signature="int getMonth()" class="com.toedter.calendar.JMonthChooser" />
	<method signature="void stateChanged(javax.swing.event.ChangeEvent)" class="com.toedter.calendar.JMonthChooser" />
	<method signature="java.awt.Component getSpinner()" class="com.toedter.calendar.JMonthChooser" />
	<method signature="void setYearChooser(com.toedter.calendar.JYearChooser)" class="com.toedter.calendar.JMonthChooser" />
	<method signature="void updateUI()" class="com.toedter.calendar.JMonthChooser" />
	<method signature="void &lt;init&gt;()" class="com.toedter.calendar.JMonthChooser" />
	<method signature="void setDayChooser(com.toedter.calendar.JDayChooser)" class="com.toedter.calendar.JMonthChooser" />
	<method signature="void itemStateChanged(java.awt.event.ItemEvent)" class="com.toedter.calendar.JMonthChooser" />
	<method signature="void setFont(java.awt.Font)" class="com.toedter.calendar.JMonthChooser" />
	<method signature="void main(java.lang.String[])" class="com.toedter.calendar.JMonthChooser" />
	<method signature="void &lt;init&gt;(boolean)" class="com.toedter.calendar.JMonthChooser" />
	<method signature="void setMonth(int)" class="com.toedter.calendar.JMonthChooser" />
	<class name="org.jfree.chart.imagemap.DynamicDriveToolTipTagFragmentGenerator" />
	<method signature="java.lang.String generateToolTipFragment(java.lang.String)" class="org.jfree.chart.imagemap.DynamicDriveToolTipTagFragmentGenerator" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.imagemap.DynamicDriveToolTipTagFragmentGenerator" />
	<method signature="void &lt;init&gt;(java.lang.String,int)" class="org.jfree.chart.imagemap.DynamicDriveToolTipTagFragmentGenerator" />
	<class name="org.jfree.chart.entity.StandardEntityCollection" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.entity.StandardEntityCollection" />
	<method signature="void addAll(org.jfree.chart.entity.EntityCollection)" class="org.jfree.chart.entity.StandardEntityCollection" />
	<method signature="java.util.Iterator iterator()" class="org.jfree.chart.entity.StandardEntityCollection" />
	<method signature="void clear()" class="org.jfree.chart.entity.StandardEntityCollection" />
	<method signature="java.util.Collection getEntities()" class="org.jfree.chart.entity.StandardEntityCollection" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.entity.StandardEntityCollection" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.entity.StandardEntityCollection" />
	<method signature="org.jfree.chart.entity.ChartEntity getEntity(double,double)" class="org.jfree.chart.entity.StandardEntityCollection" />
	<method signature="org.jfree.chart.entity.ChartEntity getEntity(int)" class="org.jfree.chart.entity.StandardEntityCollection" />
	<method signature="void add(org.jfree.chart.entity.ChartEntity)" class="org.jfree.chart.entity.StandardEntityCollection" />
	<method signature="int getEntityCount()" class="org.jfree.chart.entity.StandardEntityCollection" />
	<class name="org.jfree.chart.plot.dial.StandardDialRange" />
	<method signature="int hashCode()" class="org.jfree.chart.plot.dial.StandardDialRange" />
	<method signature="double getOuterRadius()" class="org.jfree.chart.plot.dial.StandardDialRange" />
	<method signature="double getInnerRadius()" class="org.jfree.chart.plot.dial.StandardDialRange" />
	<method signature="void setScaleIndex(int)" class="org.jfree.chart.plot.dial.StandardDialRange" />
	<method signature="double getLowerBound()" class="org.jfree.chart.plot.dial.StandardDialRange" />
	<method signature="java.awt.Paint getPaint()" class="org.jfree.chart.plot.dial.StandardDialRange" />
	<method signature="boolean isClippedToWindow()" class="org.jfree.chart.plot.dial.StandardDialRange" />
	<method signature="void setLowerBound(double)" class="org.jfree.chart.plot.dial.StandardDialRange" />
	<method signature="void setPaint(java.awt.Paint)" class="org.jfree.chart.plot.dial.StandardDialRange" />
	<method signature="int getScaleIndex()" class="org.jfree.chart.plot.dial.StandardDialRange" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.plot.dial.StandardDialRange" />
	<method signature="void setInnerRadius(double)" class="org.jfree.chart.plot.dial.StandardDialRange" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.plot.dial.StandardDialRange" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.plot.dial.StandardDialRange" />
	<method signature="double getUpperBound()" class="org.jfree.chart.plot.dial.StandardDialRange" />
	<method signature="void &lt;init&gt;(double,double,java.awt.Paint)" class="org.jfree.chart.plot.dial.StandardDialRange" />
	<method signature="void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)" class="org.jfree.chart.plot.dial.StandardDialRange" />
	<method signature="void setUpperBound(double)" class="org.jfree.chart.plot.dial.StandardDialRange" />
	<method signature="void setBounds(double,double)" class="org.jfree.chart.plot.dial.StandardDialRange" />
	<method signature="void setOuterRadius(double)" class="org.jfree.chart.plot.dial.StandardDialRange" />
	<class name="org.apache.commons.lang3.AnnotationUtils" />
	<method signature="java.lang.String toString(java.lang.annotation.Annotation)" class="org.apache.commons.lang3.AnnotationUtils" />
	<method signature="int hashCode(java.lang.annotation.Annotation)" class="org.apache.commons.lang3.AnnotationUtils" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.AnnotationUtils" />
	<method signature="boolean isValidAnnotationMemberType(java.lang.Class)" class="org.apache.commons.lang3.AnnotationUtils" />
	<method signature="boolean equals(java.lang.annotation.Annotation,java.lang.annotation.Annotation)" class="org.apache.commons.lang3.AnnotationUtils" />
	<class name="com.google.zxing.EncodeHintType" />
	<method signature="com.google.zxing.EncodeHintType[] values()" class="com.google.zxing.EncodeHintType" />
	<method signature="com.google.zxing.EncodeHintType valueOf(java.lang.String)" class="com.google.zxing.EncodeHintType" />
	<class name="org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet" />
	<method signature="void &lt;init&gt;(double[],double[],org.jfree.data.xy.XYDataset)" class="org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet" />
	<method signature="org.jfree.data.general.DatasetGroup getGroup()" class="org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet" />
	<method signature="double getXValue(int,int)" class="org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet" />
	<method signature="java.lang.Number getX(int,int)" class="org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet" />
	<method signature="java.lang.Number getY(int,int)" class="org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet" />
	<method signature="int getSeriesCount()" class="org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet" />
	<method signature="void addChangeListener(org.jfree.data.general.DatasetChangeListener)" class="org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet" />
	<method signature="java.lang.Comparable getSeriesKey(int)" class="org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet" />
	<method signature="void removeChangeListener(org.jfree.data.general.DatasetChangeListener)" class="org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet" />
	<method signature="int indexOf(java.lang.Comparable)" class="org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet" />
	<method signature="void setGroup(org.jfree.data.general.DatasetGroup)" class="org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet" />
	<method signature="org.jfree.data.DomainOrder getDomainOrder()" class="org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet" />
	<method signature="int getItemCount(int)" class="org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet" />
	<method signature="double getYValue(int,int)" class="org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet" />
	<class name="org.jfree.data.statistics.DefaultMultiValueCategoryDataset" />
	<method signature="double getRangeLowerBound(boolean)" class="org.jfree.data.statistics.DefaultMultiValueCategoryDataset" />
	<method signature="java.lang.Number getValue(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.statistics.DefaultMultiValueCategoryDataset" />
	<method signature="java.lang.Number getValue(int,int)" class="org.jfree.data.statistics.DefaultMultiValueCategoryDataset" />
	<method signature="org.jfree.data.Range getRangeBounds(boolean)" class="org.jfree.data.statistics.DefaultMultiValueCategoryDataset" />
	<method signature="java.util.List getColumnKeys()" class="org.jfree.data.statistics.DefaultMultiValueCategoryDataset" />
	<method signature="java.lang.Comparable getColumnKey(int)" class="org.jfree.data.statistics.DefaultMultiValueCategoryDataset" />
	<method signature="java.util.List getRowKeys()" class="org.jfree.data.statistics.DefaultMultiValueCategoryDataset" />
	<method signature="java.util.List getValues(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.statistics.DefaultMultiValueCategoryDataset" />
	<method signature="double getRangeUpperBound(boolean)" class="org.jfree.data.statistics.DefaultMultiValueCategoryDataset" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.statistics.DefaultMultiValueCategoryDataset" />
	<method signature="java.lang.Comparable getRowKey(int)" class="org.jfree.data.statistics.DefaultMultiValueCategoryDataset" />
	<method signature="void add(java.util.List,java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.statistics.DefaultMultiValueCategoryDataset" />
	<method signature="java.util.List getValues(int,int)" class="org.jfree.data.statistics.DefaultMultiValueCategoryDataset" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.statistics.DefaultMultiValueCategoryDataset" />
	<method signature="int getRowIndex(java.lang.Comparable)" class="org.jfree.data.statistics.DefaultMultiValueCategoryDataset" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.statistics.DefaultMultiValueCategoryDataset" />
	<method signature="int getRowCount()" class="org.jfree.data.statistics.DefaultMultiValueCategoryDataset" />
	<method signature="int getColumnIndex(java.lang.Comparable)" class="org.jfree.data.statistics.DefaultMultiValueCategoryDataset" />
	<method signature="int getColumnCount()" class="org.jfree.data.statistics.DefaultMultiValueCategoryDataset" />
	<class name="fi.iki.elonen.NanoHTTPD$DefaultTempFile" />
	<method signature="java.lang.String getName()" class="fi.iki.elonen.NanoHTTPD$DefaultTempFile" />
	<method signature="void delete()" class="fi.iki.elonen.NanoHTTPD$DefaultTempFile" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="fi.iki.elonen.NanoHTTPD$DefaultTempFile" />
	<method signature="java.io.OutputStream open()" class="fi.iki.elonen.NanoHTTPD$DefaultTempFile" />
	<class name="org.apache.xml.serialize.Serializer" />
	<method signature="org.apache.xml.serialize.DOMSerializer asDOMSerializer()" class="org.apache.xml.serialize.Serializer" />
	<method signature="org.xml.sax.DocumentHandler asDocumentHandler()" class="org.apache.xml.serialize.Serializer" />
	<method signature="org.xml.sax.ContentHandler asContentHandler()" class="org.apache.xml.serialize.Serializer" />
	<method signature="void setOutputFormat(org.apache.xml.serialize.OutputFormat)" class="org.apache.xml.serialize.Serializer" />
	<method signature="void setOutputCharStream(java.io.Writer)" class="org.apache.xml.serialize.Serializer" />
	<method signature="void setOutputByteStream(java.io.OutputStream)" class="org.apache.xml.serialize.Serializer" />
	<class name="org.jfree.ui.tabbedui.TabbedFrame" />
	<method signature="void &lt;init&gt;()" class="org.jfree.ui.tabbedui.TabbedFrame" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.ui.tabbedui.TabbedFrame" />
	<method signature="void init(org.jfree.ui.tabbedui.AbstractTabbedUI)" class="org.jfree.ui.tabbedui.TabbedFrame" />
	<class name="org.jfree.base.modules.SubSystem" />
	<method signature="org.jfree.util.Configuration getGlobalConfig()" class="org.jfree.base.modules.SubSystem" />
	<method signature="org.jfree.base.modules.PackageManager getPackageManager()" class="org.jfree.base.modules.SubSystem" />
	<method signature="org.jfree.util.ExtendedConfiguration getExtendedConfig()" class="org.jfree.base.modules.SubSystem" />
	<class name="org.jfree.chart.imagemap.ToolTipTagFragmentGenerator" />
	<method signature="java.lang.String generateToolTipFragment(java.lang.String)" class="org.jfree.chart.imagemap.ToolTipTagFragmentGenerator" />
	<class name="org.jfree.chart.needle.MiddlePinNeedle" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.needle.MiddlePinNeedle" />
	<method signature="int hashCode()" class="org.jfree.chart.needle.MiddlePinNeedle" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.needle.MiddlePinNeedle" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.needle.MiddlePinNeedle" />
	<class name="org.jfree.data.contour.DefaultContourDataset" />
	<method signature="java.lang.Number getZ(int,int)" class="org.jfree.data.contour.DefaultContourDataset" />
	<method signature="void initialize(java.lang.Object[],java.lang.Object[],java.lang.Object[])" class="org.jfree.data.contour.DefaultContourDataset" />
	<method signature="java.lang.Object[] formObjectArray(double[])" class="org.jfree.data.contour.DefaultContourDataset" />
	<method signature="double getMinZValue(double,double,double,double)" class="org.jfree.data.contour.DefaultContourDataset" />
	<method signature="java.lang.Number getX(int,int)" class="org.jfree.data.contour.DefaultContourDataset" />
	<method signature="java.lang.Number getY(int,int)" class="org.jfree.data.contour.DefaultContourDataset" />
	<method signature="void &lt;init&gt;(java.lang.Comparable,java.lang.Object[],java.lang.Object[],java.lang.Object[])" class="org.jfree.data.contour.DefaultContourDataset" />
	<method signature="java.lang.Number getXValue(int)" class="org.jfree.data.contour.DefaultContourDataset" />
	<method signature="int getSeriesCount()" class="org.jfree.data.contour.DefaultContourDataset" />
	<method signature="java.lang.Number[] getYValues()" class="org.jfree.data.contour.DefaultContourDataset" />
	<method signature="int indexZ(int,int)" class="org.jfree.data.contour.DefaultContourDataset" />
	<method signature="java.lang.Comparable getSeriesKey(int)" class="org.jfree.data.contour.DefaultContourDataset" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.contour.DefaultContourDataset" />
	<method signature="double getMaxZValue()" class="org.jfree.data.contour.DefaultContourDataset" />
	<method signature="java.lang.Object[][] formObjectArray(double[][])" class="org.jfree.data.contour.DefaultContourDataset" />
	<method signature="int getItemCount(int)" class="org.jfree.data.contour.DefaultContourDataset" />
	<method signature="int[] indexX()" class="org.jfree.data.contour.DefaultContourDataset" />
	<method signature="boolean isDateAxis(int)" class="org.jfree.data.contour.DefaultContourDataset" />
	<method signature="java.lang.Number[] getXValues()" class="org.jfree.data.contour.DefaultContourDataset" />
	<method signature="double getMinZValue()" class="org.jfree.data.contour.DefaultContourDataset" />
	<method signature="java.lang.Number[] getZValues()" class="org.jfree.data.contour.DefaultContourDataset" />
	<method signature="int indexX(int)" class="org.jfree.data.contour.DefaultContourDataset" />
	<method signature="int indexY(int)" class="org.jfree.data.contour.DefaultContourDataset" />
	<method signature="org.jfree.data.Range getZValueRange(org.jfree.data.Range,org.jfree.data.Range)" class="org.jfree.data.contour.DefaultContourDataset" />
	<method signature="void setSeriesKeys(java.lang.Comparable[])" class="org.jfree.data.contour.DefaultContourDataset" />
	<method signature="int[] getXIndices()" class="org.jfree.data.contour.DefaultContourDataset" />
	<class name="org.apache.xerces.util.XML11Char" />
	<method signature="boolean isXML11Valid(int)" class="org.apache.xerces.util.XML11Char" />
	<method signature="boolean isXML11Content(int)" class="org.apache.xerces.util.XML11Char" />
	<method signature="boolean isXML11NCNameStart(int)" class="org.apache.xerces.util.XML11Char" />
	<method signature="boolean isXML11NameStart(int)" class="org.apache.xerces.util.XML11Char" />
	<method signature="boolean isXML11ValidNmtoken(java.lang.String)" class="org.apache.xerces.util.XML11Char" />
	<method signature="boolean isXML11Invalid(int)" class="org.apache.xerces.util.XML11Char" />
	<method signature="boolean isXML11Space(int)" class="org.apache.xerces.util.XML11Char" />
	<method signature="boolean isXML11Name(int)" class="org.apache.xerces.util.XML11Char" />
	<method signature="boolean isXML11ValidName(java.lang.String)" class="org.apache.xerces.util.XML11Char" />
	<method signature="boolean isXML11ValidNCName(java.lang.String)" class="org.apache.xerces.util.XML11Char" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.util.XML11Char" />
	<method signature="boolean isXML11NCName(int)" class="org.apache.xerces.util.XML11Char" />
	<method signature="boolean isXML11ValidLiteral(int)" class="org.apache.xerces.util.XML11Char" />
	<method signature="boolean isXML11InternalEntityContent(int)" class="org.apache.xerces.util.XML11Char" />
	<method signature="boolean isXML11NameHighSurrogate(int)" class="org.apache.xerces.util.XML11Char" />
	<class name="org.apache.commons.lang3.NotImplementedException" />
	<method signature="void &lt;init&gt;(java.lang.Throwable)" class="org.apache.commons.lang3.NotImplementedException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Throwable)" class="org.apache.commons.lang3.NotImplementedException" />
	<method signature="void &lt;init&gt;(java.lang.Throwable,java.lang.String)" class="org.apache.commons.lang3.NotImplementedException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.apache.commons.lang3.NotImplementedException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="org.apache.commons.lang3.NotImplementedException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Throwable,java.lang.String)" class="org.apache.commons.lang3.NotImplementedException" />
	<method signature="java.lang.String getCode()" class="org.apache.commons.lang3.NotImplementedException" />
	<class name="net.java.dev.colorchooser.ColorChooserUI" />
	<method signature="void uninstallUI(javax.swing.JComponent)" class="net.java.dev.colorchooser.ColorChooserUI" />
	<method signature="void installUI(javax.swing.JComponent)" class="net.java.dev.colorchooser.ColorChooserUI" />
	<method signature="java.awt.Dimension getMaximumSize(javax.swing.JComponent)" class="net.java.dev.colorchooser.ColorChooserUI" />
	<method signature="java.awt.Dimension getMinimumSize(javax.swing.JComponent)" class="net.java.dev.colorchooser.ColorChooserUI" />
	<method signature="java.awt.Dimension getPreferredSize(javax.swing.JComponent)" class="net.java.dev.colorchooser.ColorChooserUI" />
	<class name="org.apache.xerces.util.LocatorProxy" />
	<method signature="java.lang.String getSystemId()" class="org.apache.xerces.util.LocatorProxy" />
	<method signature="void &lt;init&gt;(org.apache.xerces.xni.XMLLocator)" class="org.apache.xerces.util.LocatorProxy" />
	<method signature="java.lang.String getEncoding()" class="org.apache.xerces.util.LocatorProxy" />
	<method signature="int getLineNumber()" class="org.apache.xerces.util.LocatorProxy" />
	<method signature="java.lang.String getPublicId()" class="org.apache.xerces.util.LocatorProxy" />
	<method signature="int getColumnNumber()" class="org.apache.xerces.util.LocatorProxy" />
	<method signature="java.lang.String getXMLVersion()" class="org.apache.xerces.util.LocatorProxy" />
	<class name="org.apache.xerces.impl.dv.xs.BaseSchemaDVFactory" />
	<method signature="void setDeclPool(org.apache.xerces.impl.xs.XSDeclarationPool)" class="org.apache.xerces.impl.dv.xs.BaseSchemaDVFactory" />
	<method signature="org.apache.xerces.impl.dv.XSSimpleType createTypeRestriction(java.lang.String,java.lang.String,short,org.apache.xerces.impl.dv.XSSimpleType,org.apache.xerces.xs.XSObjectList)" class="org.apache.xerces.impl.dv.xs.BaseSchemaDVFactory" />
	<method signature="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl newXSSimpleTypeDecl()" class="org.apache.xerces.impl.dv.xs.BaseSchemaDVFactory" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.xs.BaseSchemaDVFactory" />
	<method signature="org.apache.xerces.impl.dv.XSSimpleType createTypeUnion(java.lang.String,java.lang.String,short,org.apache.xerces.impl.dv.XSSimpleType[],org.apache.xerces.xs.XSObjectList)" class="org.apache.xerces.impl.dv.xs.BaseSchemaDVFactory" />
	<method signature="org.apache.xerces.impl.dv.XSSimpleType createTypeList(java.lang.String,java.lang.String,short,org.apache.xerces.impl.dv.XSSimpleType,org.apache.xerces.xs.XSObjectList)" class="org.apache.xerces.impl.dv.xs.BaseSchemaDVFactory" />
	<class name="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="long min(long[])" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="float min(float[])" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="short min(short,short,short)" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="java.math.BigInteger createBigInteger(java.lang.String)" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="byte min(byte[])" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="double toDouble(java.lang.String)" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="int compare(short,short)" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="long max(long,long,long)" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="byte toByte(java.lang.String)" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="boolean isDigits(java.lang.String)" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="byte toByte(java.lang.String,byte)" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="short min(short[])" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="byte min(byte,byte,byte)" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="double max(double,double,double)" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="double min(double,double,double)" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="short toShort(java.lang.String)" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="int compare(int,int)" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="byte max(byte,byte,byte)" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="short max(short[])" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="java.math.BigDecimal createBigDecimal(java.lang.String)" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="float max(float[])" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="short max(short,short,short)" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="long toLong(java.lang.String)" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="long max(long[])" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="long toLong(java.lang.String,long)" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="java.lang.Long createLong(java.lang.String)" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="long min(long,long,long)" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="java.lang.Integer createInteger(java.lang.String)" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="int compare(long,long)" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="byte max(byte[])" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="int compare(byte,byte)" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="float min(float,float,float)" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="double toDouble(java.lang.String,double)" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="double min(double[])" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="int max(int[])" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="int max(int,int,int)" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="int toInt(java.lang.String,int)" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="java.lang.Float createFloat(java.lang.String)" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="short toShort(java.lang.String,short)" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="java.lang.Number createNumber(java.lang.String)" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="java.lang.Double createDouble(java.lang.String)" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="int min(int[])" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="int min(int,int,int)" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="float toFloat(java.lang.String,float)" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="int toInt(java.lang.String)" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="float toFloat(java.lang.String)" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="float max(float,float,float)" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="double max(double[])" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="boolean isParsable(java.lang.String)" class="org.apache.commons.lang3.math.NumberUtils" />
	<method signature="boolean isNumber(java.lang.String)" class="org.apache.commons.lang3.math.NumberUtils" />
	<class name="org.apache.html.dom.HTMLTitleElementImpl" />
	<method signature="java.lang.String getText()" class="org.apache.html.dom.HTMLTitleElementImpl" />
	<method signature="void setText(java.lang.String)" class="org.apache.html.dom.HTMLTitleElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLTitleElementImpl" />
	<class name="freemarker.cache.CacheStorage" />
	<method signature="void clear()" class="freemarker.cache.CacheStorage" />
	<method signature="void put(java.lang.Object,java.lang.Object)" class="freemarker.cache.CacheStorage" />
	<method signature="java.lang.Object get(java.lang.Object)" class="freemarker.cache.CacheStorage" />
	<method signature="void remove(java.lang.Object)" class="freemarker.cache.CacheStorage" />
	<class name="com.google.zxing.common.HybridBinarizer" />
	<method signature="com.google.zxing.Binarizer createBinarizer(com.google.zxing.LuminanceSource)" class="com.google.zxing.common.HybridBinarizer" />
	<method signature="com.google.zxing.common.BitMatrix getBlackMatrix()" class="com.google.zxing.common.HybridBinarizer" />
	<method signature="void &lt;init&gt;(com.google.zxing.LuminanceSource)" class="com.google.zxing.common.HybridBinarizer" />
	<class name="org.jfree.threads.ReaderWriterLock" />
	<method signature="void &lt;init&gt;()" class="org.jfree.threads.ReaderWriterLock" />
	<method signature="void lockRead()" class="org.jfree.threads.ReaderWriterLock" />
	<method signature="void unlock()" class="org.jfree.threads.ReaderWriterLock" />
	<method signature="void lockWrite()" class="org.jfree.threads.ReaderWriterLock" />
	<class name="org.xml.sax.SAXNotRecognizedException" />
	<method signature="void &lt;init&gt;()" class="org.xml.sax.SAXNotRecognizedException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.xml.sax.SAXNotRecognizedException" />
	<class name="org.jfree.chart.axis.MonthDateFormat" />
	<method signature="void &lt;init&gt;(java.util.Locale)" class="org.jfree.chart.axis.MonthDateFormat" />
	<method signature="void &lt;init&gt;(java.util.TimeZone,java.util.Locale,int,boolean,boolean)" class="org.jfree.chart.axis.MonthDateFormat" />
	<method signature="java.util.Date parse(java.lang.String,java.text.ParsePosition)" class="org.jfree.chart.axis.MonthDateFormat" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.axis.MonthDateFormat" />
	<method signature="void &lt;init&gt;(java.util.TimeZone,java.util.Locale,int,boolean[],java.text.DateFormat)" class="org.jfree.chart.axis.MonthDateFormat" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.axis.MonthDateFormat" />
	<method signature="void &lt;init&gt;(java.util.TimeZone,int)" class="org.jfree.chart.axis.MonthDateFormat" />
	<method signature="void main(java.lang.String[])" class="org.jfree.chart.axis.MonthDateFormat" />
	<method signature="void &lt;init&gt;(java.util.Locale,int)" class="org.jfree.chart.axis.MonthDateFormat" />
	<method signature="java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)" class="org.jfree.chart.axis.MonthDateFormat" />
	<method signature="void &lt;init&gt;(java.util.TimeZone)" class="org.jfree.chart.axis.MonthDateFormat" />
	<class name="freemarker.cache.URLTemplateLoader" />
	<method signature="void &lt;init&gt;()" class="freemarker.cache.URLTemplateLoader" />
	<method signature="java.lang.Object findTemplateSource(java.lang.String)" class="freemarker.cache.URLTemplateLoader" />
	<method signature="long getLastModified(java.lang.Object)" class="freemarker.cache.URLTemplateLoader" />
	<method signature="void closeTemplateSource(java.lang.Object)" class="freemarker.cache.URLTemplateLoader" />
	<method signature="java.io.Reader getReader(java.lang.Object,java.lang.String)" class="freemarker.cache.URLTemplateLoader" />
	<class name="org.apache.commons.lang3.builder.RecursiveToStringStyle" />
	<method signature="void appendDetail(java.lang.StringBuffer,java.lang.String,java.lang.Object)" class="org.apache.commons.lang3.builder.RecursiveToStringStyle" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.builder.RecursiveToStringStyle" />
	<class name="freemarker.core.InvalidReferenceException" />
	<method signature="void &lt;init&gt;(freemarker.core.Environment)" class="freemarker.core.InvalidReferenceException" />
	<method signature="void &lt;init&gt;(java.lang.String,freemarker.core.Environment)" class="freemarker.core.InvalidReferenceException" />
	<class name="org.jfree.util.HashNMap" />
	<method signature="java.lang.Object[] toArray(java.lang.Object)" class="org.jfree.util.HashNMap" />
	<method signature="int getValueCount(java.lang.Object)" class="org.jfree.util.HashNMap" />
	<method signature="boolean add(java.lang.Object,java.lang.Object)" class="org.jfree.util.HashNMap" />
	<method signature="java.util.Iterator getAll(java.lang.Object)" class="org.jfree.util.HashNMap" />
	<method signature="java.util.Iterator keys()" class="org.jfree.util.HashNMap" />
	<method signature="boolean containsKey(java.lang.Object)" class="org.jfree.util.HashNMap" />
	<method signature="java.util.Set keySet()" class="org.jfree.util.HashNMap" />
	<method signature="java.lang.Object[] toArray(java.lang.Object,java.lang.Object[])" class="org.jfree.util.HashNMap" />
	<method signature="boolean put(java.lang.Object,java.lang.Object)" class="org.jfree.util.HashNMap" />
	<method signature="boolean remove(java.lang.Object,java.lang.Object)" class="org.jfree.util.HashNMap" />
	<method signature="boolean containsValue(java.lang.Object,java.lang.Object)" class="org.jfree.util.HashNMap" />
	<method signature="boolean containsValue(java.lang.Object)" class="org.jfree.util.HashNMap" />
	<method signature="java.lang.Object clone()" class="org.jfree.util.HashNMap" />
	<method signature="boolean contains(java.lang.Object)" class="org.jfree.util.HashNMap" />
	<method signature="void clear()" class="org.jfree.util.HashNMap" />
	<method signature="void removeAll(java.lang.Object)" class="org.jfree.util.HashNMap" />
	<method signature="void &lt;init&gt;()" class="org.jfree.util.HashNMap" />
	<method signature="java.lang.Object get(java.lang.Object,int)" class="org.jfree.util.HashNMap" />
	<method signature="java.lang.Object getFirst(java.lang.Object)" class="org.jfree.util.HashNMap" />
	<class name="org.jfree.date.DayOfWeekInMonthRule" />
	<method signature="void setCount(int)" class="org.jfree.date.DayOfWeekInMonthRule" />
	<method signature="org.jfree.date.SerialDate getDate(int)" class="org.jfree.date.DayOfWeekInMonthRule" />
	<method signature="void &lt;init&gt;()" class="org.jfree.date.DayOfWeekInMonthRule" />
	<method signature="int getDayOfWeek()" class="org.jfree.date.DayOfWeekInMonthRule" />
	<method signature="int getCount()" class="org.jfree.date.DayOfWeekInMonthRule" />
	<method signature="void setDayOfWeek(int)" class="org.jfree.date.DayOfWeekInMonthRule" />
	<method signature="void &lt;init&gt;(int,int,int)" class="org.jfree.date.DayOfWeekInMonthRule" />
	<method signature="int getMonth()" class="org.jfree.date.DayOfWeekInMonthRule" />
	<method signature="void setMonth(int)" class="org.jfree.date.DayOfWeekInMonthRule" />
	<class name="org.apache.xerces.xni.grammars.XMLGrammarPool" />
	<method signature="void cacheGrammars(java.lang.String,org.apache.xerces.xni.grammars.Grammar[])" class="org.apache.xerces.xni.grammars.XMLGrammarPool" />
	<method signature="void lockPool()" class="org.apache.xerces.xni.grammars.XMLGrammarPool" />
	<method signature="void clear()" class="org.apache.xerces.xni.grammars.XMLGrammarPool" />
	<method signature="org.apache.xerces.xni.grammars.Grammar retrieveGrammar(org.apache.xerces.xni.grammars.XMLGrammarDescription)" class="org.apache.xerces.xni.grammars.XMLGrammarPool" />
	<method signature="void unlockPool()" class="org.apache.xerces.xni.grammars.XMLGrammarPool" />
	<method signature="org.apache.xerces.xni.grammars.Grammar[] retrieveInitialGrammarSet(java.lang.String)" class="org.apache.xerces.xni.grammars.XMLGrammarPool" />
	<class name="org.apache.xerces.xs.XSIDCDefinition" />
	<method signature="java.lang.String getSelectorStr()" class="org.apache.xerces.xs.XSIDCDefinition" />
	<method signature="short getCategory()" class="org.apache.xerces.xs.XSIDCDefinition" />
	<method signature="org.apache.xerces.xs.StringList getFieldStrs()" class="org.apache.xerces.xs.XSIDCDefinition" />
	<method signature="org.apache.xerces.xs.XSIDCDefinition getRefKey()" class="org.apache.xerces.xs.XSIDCDefinition" />
	<method signature="org.apache.xerces.xs.XSObjectList getAnnotations()" class="org.apache.xerces.xs.XSIDCDefinition" />
	<class name="org.jfree.ui.about.SystemPropertiesTableModel$SystemProperty" />
	<method signature="java.lang.String getName()" class="org.jfree.ui.about.SystemPropertiesTableModel$SystemProperty" />
	<method signature="java.lang.String getValue()" class="org.jfree.ui.about.SystemPropertiesTableModel$SystemProperty" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="org.jfree.ui.about.SystemPropertiesTableModel$SystemProperty" />
	<class name="org.apache.xerces.impl.xs.opti.ElementImpl" />
	<method signature="org.w3c.dom.NamedNodeMap getAttributes()" class="org.apache.xerces.impl.xs.opti.ElementImpl" />
	<method signature="boolean hasAttribute(java.lang.String)" class="org.apache.xerces.impl.xs.opti.ElementImpl" />
	<method signature="org.w3c.dom.Node getPreviousSibling()" class="org.apache.xerces.impl.xs.opti.ElementImpl" />
	<method signature="void setAttribute(java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.opti.ElementImpl" />
	<method signature="int getLineNumber()" class="org.apache.xerces.impl.xs.opti.ElementImpl" />
	<method signature="org.w3c.dom.Node getParentNode()" class="org.apache.xerces.impl.xs.opti.ElementImpl" />
	<method signature="void &lt;init&gt;(int,int)" class="org.apache.xerces.impl.xs.opti.ElementImpl" />
	<method signature="org.w3c.dom.Node getLastChild()" class="org.apache.xerces.impl.xs.opti.ElementImpl" />
	<method signature="boolean hasAttributeNS(java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.opti.ElementImpl" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,int)" class="org.apache.xerces.impl.xs.opti.ElementImpl" />
	<method signature="int getColumnNumber()" class="org.apache.xerces.impl.xs.opti.ElementImpl" />
	<method signature="void &lt;init&gt;(int,int,int)" class="org.apache.xerces.impl.xs.opti.ElementImpl" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int)" class="org.apache.xerces.impl.xs.opti.ElementImpl" />
	<method signature="org.w3c.dom.Node getNextSibling()" class="org.apache.xerces.impl.xs.opti.ElementImpl" />
	<method signature="java.lang.String getAttribute(java.lang.String)" class="org.apache.xerces.impl.xs.opti.ElementImpl" />
	<method signature="java.lang.String getSyntheticAnnotation()" class="org.apache.xerces.impl.xs.opti.ElementImpl" />
	<method signature="boolean hasAttributes()" class="org.apache.xerces.impl.xs.opti.ElementImpl" />
	<method signature="org.w3c.dom.Attr getAttributeNodeNS(java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.opti.ElementImpl" />
	<method signature="org.w3c.dom.Attr getAttributeNode(java.lang.String)" class="org.apache.xerces.impl.xs.opti.ElementImpl" />
	<method signature="int getCharacterOffset()" class="org.apache.xerces.impl.xs.opti.ElementImpl" />
	<method signature="java.lang.String getAnnotation()" class="org.apache.xerces.impl.xs.opti.ElementImpl" />
	<method signature="org.w3c.dom.Node getFirstChild()" class="org.apache.xerces.impl.xs.opti.ElementImpl" />
	<method signature="java.lang.String getAttributeNS(java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.opti.ElementImpl" />
	<method signature="org.w3c.dom.Document getOwnerDocument()" class="org.apache.xerces.impl.xs.opti.ElementImpl" />
	<method signature="java.lang.String getTagName()" class="org.apache.xerces.impl.xs.opti.ElementImpl" />
	<method signature="boolean hasChildNodes()" class="org.apache.xerces.impl.xs.opti.ElementImpl" />
	<class name="org.apache.commons.lang3.builder.Diffable" />
	<method signature="org.apache.commons.lang3.builder.DiffResult diff(java.lang.Object)" class="org.apache.commons.lang3.builder.Diffable" />
	<class name="org.apache.xerces.jaxp.JAXPConstants" />
	<class name="freemarker.ext.xml.NodeOperator" />
	<class name="org.jfree.data.general.Series" />
	<method signature="java.lang.Comparable getKey()" class="org.jfree.data.general.Series" />
	<method signature="java.lang.String getDescription()" class="org.jfree.data.general.Series" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.general.Series" />
	<method signature="boolean isEmpty()" class="org.jfree.data.general.Series" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.general.Series" />
	<method signature="void setKey(java.lang.Comparable)" class="org.jfree.data.general.Series" />
	<method signature="void addVetoableChangeListener(java.beans.VetoableChangeListener)" class="org.jfree.data.general.Series" />
	<method signature="void removeChangeListener(org.jfree.data.general.SeriesChangeListener)" class="org.jfree.data.general.Series" />
	<method signature="void setDescription(java.lang.String)" class="org.jfree.data.general.Series" />
	<method signature="boolean getNotify()" class="org.jfree.data.general.Series" />
	<method signature="void removePropertyChangeListener(java.beans.PropertyChangeListener)" class="org.jfree.data.general.Series" />
	<method signature="int hashCode()" class="org.jfree.data.general.Series" />
	<method signature="void removeVetoableChangeListener(java.beans.VetoableChangeListener)" class="org.jfree.data.general.Series" />
	<method signature="void addChangeListener(org.jfree.data.general.SeriesChangeListener)" class="org.jfree.data.general.Series" />
	<method signature="void addPropertyChangeListener(java.beans.PropertyChangeListener)" class="org.jfree.data.general.Series" />
	<method signature="void setNotify(boolean)" class="org.jfree.data.general.Series" />
	<method signature="int getItemCount()" class="org.jfree.data.general.Series" />
	<method signature="void fireSeriesChanged()" class="org.jfree.data.general.Series" />
	<class name="org.xml.sax.EntityResolver" />
	<method signature="org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)" class="org.xml.sax.EntityResolver" />
	<class name="freemarker.template.TemplateModel" />
	<class name="tourma.JdgRosters" />
	<method signature="void &lt;init&gt;(java.awt.Frame,boolean)" class="tourma.JdgRosters" />
	<class name="org.jfree.chart.block.BorderArrangement" />
	<method signature="void add(org.jfree.chart.block.Block,java.lang.Object)" class="org.jfree.chart.block.BorderArrangement" />
	<method signature="void clear()" class="org.jfree.chart.block.BorderArrangement" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.block.BorderArrangement" />
	<method signature="org.jfree.ui.Size2D arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" class="org.jfree.chart.block.BorderArrangement" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.block.BorderArrangement" />
	<class name="org.apache.xerces.impl.dv.xs.StringDV" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.xs.StringDV" />
	<method signature="java.lang.Object getActualValue(java.lang.String,org.apache.xerces.impl.dv.ValidationContext)" class="org.apache.xerces.impl.dv.xs.StringDV" />
	<method signature="short getAllowedFacets()" class="org.apache.xerces.impl.dv.xs.StringDV" />
	<class name="org.jfree.chart.renderer.xy.DefaultXYItemRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.xy.DefaultXYItemRenderer" />
	<class name="org.jdom2.Content" />
	<method signature="int hashCode()" class="org.jdom2.Content" />
	<method signature="java.util.List getNamespacesInherited()" class="org.jdom2.Content" />
	<method signature="org.jdom2.Document getDocument()" class="org.jdom2.Content" />
	<method signature="org.jdom2.Content detach()" class="org.jdom2.Content" />
	<method signature="org.jdom2.Element getParentElement()" class="org.jdom2.Content" />
	<method signature="org.jdom2.Content clone()" class="org.jdom2.Content" />
	<method signature="org.jdom2.Content$CType getCType()" class="org.jdom2.Content" />
	<method signature="java.lang.Object clone()" class="org.jdom2.Content" />
	<method signature="java.util.List getNamespacesInScope()" class="org.jdom2.Content" />
	<method signature="java.lang.String getValue()" class="org.jdom2.Content" />
	<method signature="boolean equals(java.lang.Object)" class="org.jdom2.Content" />
	<method signature="java.util.List getNamespacesIntroduced()" class="org.jdom2.Content" />
	<method signature="org.jdom2.Parent getParent()" class="org.jdom2.Content" />
	<method signature="org.jdom2.CloneBase clone()" class="org.jdom2.Content" />
	<class name="org.jfree.ui.tabbedui.TabbedDialog" />
	<method signature="void &lt;init&gt;(java.awt.Frame)" class="org.jfree.ui.tabbedui.TabbedDialog" />
	<method signature="void &lt;init&gt;()" class="org.jfree.ui.tabbedui.TabbedDialog" />
	<method signature="void &lt;init&gt;(java.awt.Frame,java.lang.String,boolean)" class="org.jfree.ui.tabbedui.TabbedDialog" />
	<method signature="void &lt;init&gt;(java.awt.Dialog)" class="org.jfree.ui.tabbedui.TabbedDialog" />
	<method signature="void &lt;init&gt;(java.awt.Dialog,boolean)" class="org.jfree.ui.tabbedui.TabbedDialog" />
	<method signature="void &lt;init&gt;(java.awt.Frame,boolean)" class="org.jfree.ui.tabbedui.TabbedDialog" />
	<method signature="void &lt;init&gt;(java.awt.Dialog,java.lang.String)" class="org.jfree.ui.tabbedui.TabbedDialog" />
	<method signature="void &lt;init&gt;(java.awt.Frame,java.lang.String)" class="org.jfree.ui.tabbedui.TabbedDialog" />
	<method signature="void &lt;init&gt;(java.awt.Dialog,java.lang.String,boolean)" class="org.jfree.ui.tabbedui.TabbedDialog" />
	<method signature="void init(org.jfree.ui.tabbedui.AbstractTabbedUI)" class="org.jfree.ui.tabbedui.TabbedDialog" />
	<class name="org.w3c.dom.DOMException" />
	<method signature="void &lt;init&gt;(short,java.lang.String)" class="org.w3c.dom.DOMException" />
	<class name="org.apache.wml.dom.WMLTimerElementImpl" />
	<method signature="void setValue(java.lang.String)" class="org.apache.wml.dom.WMLTimerElementImpl" />
	<method signature="java.lang.String getName()" class="org.apache.wml.dom.WMLTimerElementImpl" />
	<method signature="java.lang.String getValue()" class="org.apache.wml.dom.WMLTimerElementImpl" />
	<method signature="void setName(java.lang.String)" class="org.apache.wml.dom.WMLTimerElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.wml.dom.WMLDocumentImpl,java.lang.String)" class="org.apache.wml.dom.WMLTimerElementImpl" />
	<method signature="java.lang.String getId()" class="org.apache.wml.dom.WMLTimerElementImpl" />
	<method signature="java.lang.String getClassName()" class="org.apache.wml.dom.WMLTimerElementImpl" />
	<method signature="void setClassName(java.lang.String)" class="org.apache.wml.dom.WMLTimerElementImpl" />
	<method signature="void setId(java.lang.String)" class="org.apache.wml.dom.WMLTimerElementImpl" />
	<class name="org.jfree.data.xy.XYDataset" />
	<method signature="double getXValue(int,int)" class="org.jfree.data.xy.XYDataset" />
	<method signature="java.lang.Number getX(int,int)" class="org.jfree.data.xy.XYDataset" />
	<method signature="java.lang.Number getY(int,int)" class="org.jfree.data.xy.XYDataset" />
	<method signature="org.jfree.data.DomainOrder getDomainOrder()" class="org.jfree.data.xy.XYDataset" />
	<method signature="int getItemCount(int)" class="org.jfree.data.xy.XYDataset" />
	<method signature="double getYValue(int,int)" class="org.jfree.data.xy.XYDataset" />
	<class name="org.apache.xerces.impl.dv.dtd.IDDatatypeValidator" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.dtd.IDDatatypeValidator" />
	<method signature="void validate(java.lang.String,org.apache.xerces.impl.dv.ValidationContext)" class="org.apache.xerces.impl.dv.dtd.IDDatatypeValidator" />
	<class name="org.jfree.chart.axis.AxisCollection" />
	<method signature="void add(org.jfree.chart.axis.Axis,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.axis.AxisCollection" />
	<method signature="java.util.List getAxesAtLeft()" class="org.jfree.chart.axis.AxisCollection" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.axis.AxisCollection" />
	<method signature="java.util.List getAxesAtTop()" class="org.jfree.chart.axis.AxisCollection" />
	<method signature="java.util.List getAxesAtRight()" class="org.jfree.chart.axis.AxisCollection" />
	<method signature="java.util.List getAxesAtBottom()" class="org.jfree.chart.axis.AxisCollection" />
	<class name="tourma.data.ObjectRanking" />
	<method signature="int compareTo(java.lang.Object)" class="tourma.data.ObjectRanking" />
	<method signature="int hashCode()" class="tourma.data.ObjectRanking" />
	<method signature="void setObject(java.lang.Comparable)" class="tourma.data.ObjectRanking" />
	<method signature="void setValue5(int)" class="tourma.data.ObjectRanking" />
	<method signature="void setValue4(int)" class="tourma.data.ObjectRanking" />
	<method signature="void setValue3(int)" class="tourma.data.ObjectRanking" />
	<method signature="void setXMLElement(org.jdom2.Element)" class="tourma.data.ObjectRanking" />
	<method signature="void setValue2(int)" class="tourma.data.ObjectRanking" />
	<method signature="java.lang.Comparable getObject()" class="tourma.data.ObjectRanking" />
	<method signature="void setValue1(int)" class="tourma.data.ObjectRanking" />
	<method signature="org.jdom2.Element getXMLElement()" class="tourma.data.ObjectRanking" />
	<method signature="int getValue3()" class="tourma.data.ObjectRanking" />
	<method signature="int getValue4()" class="tourma.data.ObjectRanking" />
	<method signature="int getValue5()" class="tourma.data.ObjectRanking" />
	<method signature="boolean equals(java.lang.Object)" class="tourma.data.ObjectRanking" />
	<method signature="void &lt;init&gt;(java.lang.Comparable,int,int,int,int,int)" class="tourma.data.ObjectRanking" />
	<method signature="int getValue1()" class="tourma.data.ObjectRanking" />
	<method signature="int getValue2()" class="tourma.data.ObjectRanking" />
	<class name="org.jfree.util.LogTarget" />
	<method signature="void log(int,java.lang.Object,java.lang.Exception)" class="org.jfree.util.LogTarget" />
	<method signature="void log(int,java.lang.Object)" class="org.jfree.util.LogTarget" />
	<class name="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
	<method signature="boolean derivedFrom(java.lang.String,java.lang.String,short)" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
	<method signature="boolean getAbstract()" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
	<method signature="short getContentType()" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
	<method signature="java.lang.String getName()" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
	<method signature="void reset()" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
	<method signature="short getFinalSet()" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
	<method signature="org.apache.xerces.xs.XSSimpleTypeDefinition getSimpleType()" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
	<method signature="org.apache.xerces.xs.XSAttributeUse getAttributeUse(java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
	<method signature="boolean getAnonymous()" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
	<method signature="void setContainsTypeID()" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
	<method signature="short getType()" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
	<method signature="boolean isFinal(short)" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
	<method signature="boolean derivedFromType(org.apache.xerces.xs.XSTypeDefinition,short)" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
	<method signature="short getDerivationMethod()" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
	<method signature="short getFinal()" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
	<method signature="org.apache.xerces.xs.XSObjectList getAttributeUses()" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
	<method signature="void setName(java.lang.String)" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
	<method signature="void setIsAnonymous()" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
	<method signature="java.lang.String getTargetNamespace()" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
	<method signature="boolean isDOMDerivedFrom(java.lang.String,java.lang.String,int)" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
	<method signature="java.lang.String getTypeNamespace()" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
	<method signature="org.apache.xerces.xs.XSWildcard getAttributeWildcard()" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
	<method signature="short getProhibitedSubstitutions()" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
	<method signature="java.lang.String getTypeName()" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
	<method signature="org.apache.xerces.impl.xs.models.XSCMValidator getContentModel(org.apache.xerces.impl.xs.models.CMBuilder,boolean)" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
	<method signature="void setValues(java.lang.String,java.lang.String,org.apache.xerces.xs.XSTypeDefinition,short,short,short,short,boolean,org.apache.xerces.impl.xs.XSAttributeGroupDecl,org.apache.xerces.impl.dv.XSSimpleType,org.apache.xerces.impl.xs.XSParticleDecl,org.apache.xerces.impl.xs.util.XSObjectListImpl)" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
	<method signature="org.apache.xerces.impl.xs.models.XSCMValidator getContentModel(org.apache.xerces.impl.xs.models.CMBuilder)" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
	<method signature="boolean isDerivedFrom(java.lang.String,java.lang.String,int)" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
	<method signature="org.apache.xerces.xs.XSTypeDefinition getBaseType()" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
	<method signature="org.apache.xerces.xs.XSObjectList getAnnotations()" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
	<method signature="org.apache.xerces.xs.XSNamespaceItem getNamespaceItem()" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
	<method signature="void setIsAbstractType()" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
	<method signature="java.lang.String getNamespace()" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
	<method signature="java.lang.String toString()" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
	<method signature="boolean containsTypeID()" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
	<method signature="org.apache.xerces.impl.xs.XSAttributeGroupDecl getAttrGrp()" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
	<method signature="org.apache.xerces.xs.XSParticle getParticle()" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
	<method signature="boolean isProhibitedSubstitution(short)" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
	<method signature="short getTypeCategory()" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
	<class name="org.jfree.chart.renderer.DefaultPolarItemRenderer" />
	<method signature="void drawSeries(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.PolarPlot,org.jfree.data.xy.XYDataset,int)" class="org.jfree.chart.renderer.DefaultPolarItemRenderer" />
	<method signature="void setLegendItemURLGenerator(org.jfree.chart.labels.XYSeriesLabelGenerator)" class="org.jfree.chart.renderer.DefaultPolarItemRenderer" />
	<method signature="void setFillComposite(java.awt.Composite)" class="org.jfree.chart.renderer.DefaultPolarItemRenderer" />
	<method signature="void drawAngularGridLines(java.awt.Graphics2D,org.jfree.chart.plot.PolarPlot,java.util.List,java.awt.geom.Rectangle2D)" class="org.jfree.chart.renderer.DefaultPolarItemRenderer" />
	<method signature="boolean getDrawOutlineWhenFilled()" class="org.jfree.chart.renderer.DefaultPolarItemRenderer" />
	<method signature="org.jfree.chart.plot.DrawingSupplier getDrawingSupplier()" class="org.jfree.chart.renderer.DefaultPolarItemRenderer" />
	<method signature="java.awt.Composite getFillComposite()" class="org.jfree.chart.renderer.DefaultPolarItemRenderer" />
	<method signature="void setLegendItemToolTipGenerator(org.jfree.chart.labels.XYSeriesLabelGenerator)" class="org.jfree.chart.renderer.DefaultPolarItemRenderer" />
	<method signature="void setDrawOutlineWhenFilled(boolean)" class="org.jfree.chart.renderer.DefaultPolarItemRenderer" />
	<method signature="void setPlot(org.jfree.chart.plot.PolarPlot)" class="org.jfree.chart.renderer.DefaultPolarItemRenderer" />
	<method signature="boolean isSeriesFilled(int)" class="org.jfree.chart.renderer.DefaultPolarItemRenderer" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.renderer.DefaultPolarItemRenderer" />
	<method signature="org.jfree.chart.urls.XYURLGenerator getURLGenerator()" class="org.jfree.chart.renderer.DefaultPolarItemRenderer" />
	<method signature="void setURLGenerator(org.jfree.chart.urls.XYURLGenerator)" class="org.jfree.chart.renderer.DefaultPolarItemRenderer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.DefaultPolarItemRenderer" />
	<method signature="void setUseFillPaint(boolean)" class="org.jfree.chart.renderer.DefaultPolarItemRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.DefaultPolarItemRenderer" />
	<method signature="void setSeriesFilled(int,boolean)" class="org.jfree.chart.renderer.DefaultPolarItemRenderer" />
	<method signature="boolean getConnectFirstAndLastPoint()" class="org.jfree.chart.renderer.DefaultPolarItemRenderer" />
	<method signature="boolean getUseFillPaint()" class="org.jfree.chart.renderer.DefaultPolarItemRenderer" />
	<method signature="java.awt.Shape getLegendLine()" class="org.jfree.chart.renderer.DefaultPolarItemRenderer" />
	<method signature="org.jfree.chart.labels.XYToolTipGenerator getSeriesToolTipGenerator(int)" class="org.jfree.chart.renderer.DefaultPolarItemRenderer" />
	<method signature="void setSeriesToolTipGenerator(int,org.jfree.chart.labels.XYToolTipGenerator)" class="org.jfree.chart.renderer.DefaultPolarItemRenderer" />
	<method signature="void setConnectFirstAndLastPoint(boolean)" class="org.jfree.chart.renderer.DefaultPolarItemRenderer" />
	<method signature="org.jfree.chart.labels.XYToolTipGenerator getToolTipGenerator(int,int)" class="org.jfree.chart.renderer.DefaultPolarItemRenderer" />
	<method signature="void setShapesVisible(boolean)" class="org.jfree.chart.renderer.DefaultPolarItemRenderer" />
	<method signature="org.jfree.chart.labels.XYSeriesLabelGenerator getLegendItemToolTipGenerator()" class="org.jfree.chart.renderer.DefaultPolarItemRenderer" />
	<method signature="void setBaseToolTipGenerator(org.jfree.chart.labels.XYToolTipGenerator)" class="org.jfree.chart.renderer.DefaultPolarItemRenderer" />
	<method signature="org.jfree.chart.LegendItem getLegendItem(int)" class="org.jfree.chart.renderer.DefaultPolarItemRenderer" />
	<method signature="org.jfree.chart.labels.XYSeriesLabelGenerator getLegendItemURLGenerator()" class="org.jfree.chart.renderer.DefaultPolarItemRenderer" />
	<method signature="org.jfree.chart.labels.XYToolTipGenerator getBaseToolTipGenerator()" class="org.jfree.chart.renderer.DefaultPolarItemRenderer" />
	<method signature="boolean getShapesVisible()" class="org.jfree.chart.renderer.DefaultPolarItemRenderer" />
	<method signature="void setLegendLine(java.awt.Shape)" class="org.jfree.chart.renderer.DefaultPolarItemRenderer" />
	<method signature="org.jfree.chart.plot.PolarPlot getPlot()" class="org.jfree.chart.renderer.DefaultPolarItemRenderer" />
	<method signature="void drawRadialGridLines(java.awt.Graphics2D,org.jfree.chart.plot.PolarPlot,org.jfree.chart.axis.ValueAxis,java.util.List,java.awt.geom.Rectangle2D)" class="org.jfree.chart.renderer.DefaultPolarItemRenderer" />
	<class name="org.apache.xerces.impl.dtd.models.MixedContentModel" />
	<method signature="void &lt;init&gt;(org.apache.xerces.xni.QName[],int[],int,int,boolean)" class="org.apache.xerces.impl.dtd.models.MixedContentModel" />
	<method signature="int validate(org.apache.xerces.xni.QName[],int,int)" class="org.apache.xerces.impl.dtd.models.MixedContentModel" />
	<class name="org.jfree.base.AbstractBoot" />
	<method signature="boolean isBootInProgress()" class="org.jfree.base.AbstractBoot" />
	<method signature="boolean isBootDone()" class="org.jfree.base.AbstractBoot" />
	<method signature="org.jfree.util.Configuration getGlobalConfig()" class="org.jfree.base.AbstractBoot" />
	<method signature="org.jfree.base.modules.PackageManager getPackageManager()" class="org.jfree.base.AbstractBoot" />
	<method signature="void start()" class="org.jfree.base.AbstractBoot" />
	<method signature="org.jfree.util.ExtendedConfiguration getExtendedConfig()" class="org.jfree.base.AbstractBoot" />
	<class name="org.jfree.chart.util.PaintAlpha" />
	<method signature="boolean setLegacyAlpha(boolean)" class="org.jfree.chart.util.PaintAlpha" />
	<method signature="java.awt.image.BufferedImage cloneImage(java.awt.image.BufferedImage)" class="org.jfree.chart.util.PaintAlpha" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.util.PaintAlpha" />
	<method signature="java.awt.Paint darker(java.awt.Paint)" class="org.jfree.chart.util.PaintAlpha" />
	<class name="org.jdom2.util.IteratorIterable" />
	<class name="org.w3c.dom.stylesheets.StyleSheetList" />
	<method signature="org.w3c.dom.stylesheets.StyleSheet item(int)" class="org.w3c.dom.stylesheets.StyleSheetList" />
	<method signature="int getLength()" class="org.w3c.dom.stylesheets.StyleSheetList" />
	<class name="org.jfree.util.DefaultConfiguration" />
	<method signature="java.lang.String getConfigProperty(java.lang.String,java.lang.String)" class="org.jfree.util.DefaultConfiguration" />
	<method signature="void &lt;init&gt;()" class="org.jfree.util.DefaultConfiguration" />
	<method signature="void setConfigProperty(java.lang.String,java.lang.String)" class="org.jfree.util.DefaultConfiguration" />
	<method signature="java.lang.String getConfigProperty(java.lang.String)" class="org.jfree.util.DefaultConfiguration" />
	<method signature="java.util.Iterator findPropertyKeys(java.lang.String)" class="org.jfree.util.DefaultConfiguration" />
	<method signature="java.util.Enumeration getConfigProperties()" class="org.jfree.util.DefaultConfiguration" />
	<class name="org.jfree.chart.plot.PiePlot" />
	<method signature="void setShadowGenerator(org.jfree.chart.util.ShadowGenerator)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setLegendLabelURLGenerator(org.jfree.chart.urls.PieURLGenerator)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setSectionOutlineStroke(java.awt.Stroke)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setSectionPaint(java.awt.Paint)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="double getMaximumLabelWidth()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setSimpleLabelOffset(org.jfree.ui.RectangleInsets)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setCircular(boolean,boolean)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setMaximumLabelWidth(double)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="double getLabelLinkMargin()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="double getLabelGap()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="java.awt.Stroke getLabelOutlineStroke()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void handleMouseWheelRotation(int)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setSectionOutlineStroke(int,java.awt.Stroke)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="java.awt.Paint getLabelShadowPaint()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setPieIndex(int)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setAutoPopulateSectionPaint(boolean)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="org.jfree.chart.plot.PiePlotState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlot,java.lang.Integer,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="org.jfree.chart.urls.PieURLGenerator getLegendLabelURLGenerator()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="org.jfree.chart.urls.PieURLGenerator getURLGenerator()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="boolean getAutoPopulateSectionOutlinePaint()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setLabelPaint(java.awt.Paint)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="org.jfree.chart.labels.PieToolTipGenerator getToolTipGenerator()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setSimpleLabels(boolean)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="java.awt.Paint getSectionOutlinePaint(java.lang.Comparable)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setLabelBackgroundPaint(java.awt.Paint)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="boolean isCircular()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setExplodePercent(int,double)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="java.awt.Paint getSectionPaint(int)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="org.jfree.chart.plot.PieLabelLinkStyle getLabelLinkStyle()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="java.lang.String getPlotType()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="boolean getAutoPopulateSectionPaint()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="java.awt.Paint getSectionPaint()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void clearSectionPaints(boolean)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="java.awt.Stroke getLabelLinkStroke()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setSectionOutlinePaint(java.lang.Comparable,java.awt.Paint)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="org.jfree.chart.labels.PieSectionLabelGenerator getLabelGenerator()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setAutoPopulateSectionOutlineStroke(boolean)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setLabelDistributor(org.jfree.chart.plot.AbstractPieLabelDistributor)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void &lt;init&gt;(org.jfree.data.general.PieDataset)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setDirection(org.jfree.util.Rotation)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="double getShadowXOffset()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="java.awt.Shape getLegendItemShape()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setBaseSectionOutlineStroke(java.awt.Stroke)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="java.awt.Paint getShadowPaint()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="java.awt.Paint getLabelLinkPaint()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setLabelLinkStyle(org.jfree.chart.plot.PieLabelLinkStyle)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="java.awt.Stroke getSectionOutlineStroke(int)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setBaseSectionPaint(java.awt.Paint)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="org.jfree.chart.labels.PieSectionLabelGenerator getLegendLabelToolTipGenerator()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setLabelOutlineStroke(java.awt.Stroke)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="org.jfree.chart.labels.PieSectionLabelGenerator getLegendLabelGenerator()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="double getInteriorGap()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="java.awt.Stroke getBaseSectionOutlineStroke()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setSectionOutlinePaint(int,java.awt.Paint)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setAutoPopulateSectionOutlinePaint(boolean)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="java.awt.Paint getLabelOutlinePaint()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="java.awt.Paint getBaseSectionOutlinePaint()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setToolTipGenerator(org.jfree.chart.labels.PieToolTipGenerator)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="double getMinimumArcAngleToDraw()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="org.jfree.chart.LegendItemCollection getLegendItems()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="org.jfree.data.general.PieDataset getDataset()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="double getShadowYOffset()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setLabelLinkMargin(double)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setLegendItemShape(java.awt.Shape)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setLabelPadding(org.jfree.ui.RectangleInsets)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setSectionOutlinesVisible(boolean)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setDataset(org.jfree.data.general.PieDataset)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setInteriorGap(double)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setCircular(boolean)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="org.jfree.chart.plot.AbstractPieLabelDistributor getLabelDistributor()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setBaseSectionOutlinePaint(java.awt.Paint)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="org.jfree.ui.RectangleInsets getSimpleLabelOffset()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="org.jfree.chart.util.ShadowGenerator getShadowGenerator()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="java.awt.Paint getLabelPaint()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="boolean getLabelLinksVisible()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setShadowPaint(java.awt.Paint)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void clearSectionOutlineStrokes(boolean)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setSectionOutlinePaint(java.awt.Paint)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setIgnoreZeroValues(boolean)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="boolean getSectionOutlinesVisible()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void clearSectionOutlinePaints(boolean)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="java.awt.Font getLabelFont()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setLabelGap(double)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="boolean getIgnoreNullValues()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="boolean getSimpleLabels()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setShadowXOffset(double)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setLabelShadowPaint(java.awt.Paint)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="java.awt.Paint getSectionOutlinePaint(int)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="java.awt.Paint getSectionPaint(java.lang.Comparable)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="java.awt.Paint getSectionOutlinePaint()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setShadowYOffset(double)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="org.jfree.ui.RectangleInsets getLabelPadding()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="java.awt.Paint getLabelBackgroundPaint()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="boolean getAutoPopulateSectionOutlineStroke()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="java.awt.Paint getBaseSectionPaint()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setURLGenerator(org.jfree.chart.urls.PieURLGenerator)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="java.awt.Stroke getSectionOutlineStroke(java.lang.Comparable)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="org.jfree.util.Rotation getDirection()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="double getMaximumExplodePercent()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setSectionPaint(int,java.awt.Paint)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setMinimumArcAngleToDraw(double)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setStartAngle(double)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setLabelLinksVisible(boolean)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setLegendLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setLabelLinkPaint(java.awt.Paint)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="double getStartAngle()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setLegendLabelToolTipGenerator(org.jfree.chart.labels.PieSectionLabelGenerator)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setSectionOutlineStroke(java.lang.Comparable,java.awt.Stroke)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setLabelOutlinePaint(java.awt.Paint)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="java.awt.Stroke getSectionOutlineStroke()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setLabelLinkStroke(java.awt.Stroke)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setSectionPaint(java.lang.Comparable,java.awt.Paint)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setLabelFont(java.awt.Font)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="boolean getIgnoreZeroValues()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="int getPieIndex()" class="org.jfree.chart.plot.PiePlot" />
	<method signature="double getExplodePercent(java.lang.Comparable)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setExplodePercent(java.lang.Comparable,double)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="void setIgnoreNullValues(boolean)" class="org.jfree.chart.plot.PiePlot" />
	<method signature="double getExplodePercent(int)" class="org.jfree.chart.plot.PiePlot" />
	<class name="com.google.zxing.BinaryBitmap" />
	<method signature="com.google.zxing.BinaryBitmap rotateCounterClockwise()" class="com.google.zxing.BinaryBitmap" />
	<method signature="com.google.zxing.BinaryBitmap rotateCounterClockwise45()" class="com.google.zxing.BinaryBitmap" />
	<method signature="com.google.zxing.common.BitArray getBlackRow(int,com.google.zxing.common.BitArray)" class="com.google.zxing.BinaryBitmap" />
	<method signature="void &lt;init&gt;(com.google.zxing.Binarizer)" class="com.google.zxing.BinaryBitmap" />
	<method signature="int getHeight()" class="com.google.zxing.BinaryBitmap" />
	<method signature="com.google.zxing.BinaryBitmap crop(int,int,int,int)" class="com.google.zxing.BinaryBitmap" />
	<method signature="boolean isRotateSupported()" class="com.google.zxing.BinaryBitmap" />
	<method signature="com.google.zxing.common.BitMatrix getBlackMatrix()" class="com.google.zxing.BinaryBitmap" />
	<method signature="boolean isCropSupported()" class="com.google.zxing.BinaryBitmap" />
	<method signature="int getWidth()" class="com.google.zxing.BinaryBitmap" />
	<class name="tourma.data.Category" />
	<method signature="void newCategoryMap()" class="tourma.data.Category" />
	<method signature="int compareTo(java.lang.Object)" class="tourma.data.Category" />
	<method signature="java.lang.String getName()" class="tourma.data.Category" />
	<method signature="tourma.data.Category getCategory(java.lang.String)" class="tourma.data.Category" />
	<method signature="int hashCode()" class="tourma.data.Category" />
	<method signature="void setXMLElement(org.jdom2.Element)" class="tourma.data.Category" />
	<method signature="org.jdom2.Element getXMLElement()" class="tourma.data.Category" />
	<method signature="boolean isCategoryMapNull()" class="tourma.data.Category" />
	<method signature="void setmName(java.lang.String)" class="tourma.data.Category" />
	<method signature="void putCategory(java.lang.String,tourma.data.Category)" class="tourma.data.Category" />
	<method signature="void delCategory(java.lang.String)" class="tourma.data.Category" />
	<method signature="boolean equals(java.lang.Object)" class="tourma.data.Category" />
	<method signature="java.lang.String toString()" class="tourma.data.Category" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="tourma.data.Category" />
	<class name="com.toedter.calendar.IDateEditor" />
	<method signature="void setLocale(java.util.Locale)" class="com.toedter.calendar.IDateEditor" />
	<method signature="java.util.Date getDate()" class="com.toedter.calendar.IDateEditor" />
	<method signature="void setMaxSelectableDate(java.util.Date)" class="com.toedter.calendar.IDateEditor" />
	<method signature="void setDate(java.util.Date)" class="com.toedter.calendar.IDateEditor" />
	<method signature="void setEnabled(boolean)" class="com.toedter.calendar.IDateEditor" />
	<method signature="void addPropertyChangeListener(java.beans.PropertyChangeListener)" class="com.toedter.calendar.IDateEditor" />
	<method signature="void addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)" class="com.toedter.calendar.IDateEditor" />
	<method signature="void setSelectableDateRange(java.util.Date,java.util.Date)" class="com.toedter.calendar.IDateEditor" />
	<method signature="java.util.Date getMaxSelectableDate()" class="com.toedter.calendar.IDateEditor" />
	<method signature="void setMinSelectableDate(java.util.Date)" class="com.toedter.calendar.IDateEditor" />
	<method signature="java.lang.String getDateFormatString()" class="com.toedter.calendar.IDateEditor" />
	<method signature="void setDateFormatString(java.lang.String)" class="com.toedter.calendar.IDateEditor" />
	<method signature="java.util.Date getMinSelectableDate()" class="com.toedter.calendar.IDateEditor" />
	<method signature="javax.swing.JComponent getUiComponent()" class="com.toedter.calendar.IDateEditor" />
	<method signature="void removePropertyChangeListener(java.beans.PropertyChangeListener)" class="com.toedter.calendar.IDateEditor" />
	<method signature="void removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)" class="com.toedter.calendar.IDateEditor" />
	<class name="org.w3c.dom.html.HTMLElement" />
	<method signature="java.lang.String getTitle()" class="org.w3c.dom.html.HTMLElement" />
	<method signature="java.lang.String getLang()" class="org.w3c.dom.html.HTMLElement" />
	<method signature="java.lang.String getId()" class="org.w3c.dom.html.HTMLElement" />
	<method signature="java.lang.String getClassName()" class="org.w3c.dom.html.HTMLElement" />
	<method signature="void setLang(java.lang.String)" class="org.w3c.dom.html.HTMLElement" />
	<method signature="java.lang.String getDir()" class="org.w3c.dom.html.HTMLElement" />
	<method signature="void setClassName(java.lang.String)" class="org.w3c.dom.html.HTMLElement" />
	<method signature="void setId(java.lang.String)" class="org.w3c.dom.html.HTMLElement" />
	<method signature="void setTitle(java.lang.String)" class="org.w3c.dom.html.HTMLElement" />
	<method signature="void setDir(java.lang.String)" class="org.w3c.dom.html.HTMLElement" />
	<class name="org.jdom2.filter.AbstractFilter" />
	<method signature="void &lt;init&gt;()" class="org.jdom2.filter.AbstractFilter" />
	<method signature="org.jdom2.filter.Filter refine(org.jdom2.filter.Filter)" class="org.jdom2.filter.AbstractFilter" />
	<method signature="org.jdom2.filter.Filter and(org.jdom2.filter.Filter)" class="org.jdom2.filter.AbstractFilter" />
	<method signature="java.util.List filter(java.util.List)" class="org.jdom2.filter.AbstractFilter" />
	<method signature="org.jdom2.filter.Filter negate()" class="org.jdom2.filter.AbstractFilter" />
	<method signature="boolean matches(java.lang.Object)" class="org.jdom2.filter.AbstractFilter" />
	<method signature="org.jdom2.filter.Filter or(org.jdom2.filter.Filter)" class="org.jdom2.filter.AbstractFilter" />
	<class name="org.jfree.chart.labels.BubbleXYItemLabelGenerator" />
	<method signature="java.text.DateFormat getZDateFormat()" class="org.jfree.chart.labels.BubbleXYItemLabelGenerator" />
	<method signature="int hashCode()" class="org.jfree.chart.labels.BubbleXYItemLabelGenerator" />
	<method signature="void &lt;init&gt;(java.lang.String,java.text.DateFormat,java.text.DateFormat,java.text.DateFormat)" class="org.jfree.chart.labels.BubbleXYItemLabelGenerator" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.labels.BubbleXYItemLabelGenerator" />
	<method signature="java.text.NumberFormat getZFormat()" class="org.jfree.chart.labels.BubbleXYItemLabelGenerator" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.labels.BubbleXYItemLabelGenerator" />
	<method signature="java.lang.String generateLabelString(org.jfree.data.xy.XYDataset,int,int)" class="org.jfree.chart.labels.BubbleXYItemLabelGenerator" />
	<method signature="void &lt;init&gt;(java.lang.String,java.text.NumberFormat,java.text.NumberFormat,java.text.NumberFormat)" class="org.jfree.chart.labels.BubbleXYItemLabelGenerator" />
	<method signature="java.lang.String generateLabel(org.jfree.data.xy.XYDataset,int,int)" class="org.jfree.chart.labels.BubbleXYItemLabelGenerator" />
	<class name="tourma.utils.web.WebPicture" />
	<method signature="void &lt;init&gt;()" class="tourma.utils.web.WebPicture" />
	<method signature="java.lang.String getPictureAsHTML(java.awt.image.BufferedImage,int,int)" class="tourma.utils.web.WebPicture" />
	<class name="org.apache.xerces.impl.dv.xs.AnyURIDV" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.xs.AnyURIDV" />
	<method signature="java.lang.Object getActualValue(java.lang.String,org.apache.xerces.impl.dv.ValidationContext)" class="org.apache.xerces.impl.dv.xs.AnyURIDV" />
	<method signature="short getAllowedFacets()" class="org.apache.xerces.impl.dv.xs.AnyURIDV" />
	<class name="org.jfree.data.time.MovingAverage" />
	<method signature="org.jfree.data.time.TimeSeriesCollection createMovingAverage(org.jfree.data.time.TimeSeriesCollection,java.lang.String,int,int)" class="org.jfree.data.time.MovingAverage" />
	<method signature="org.jfree.data.xy.XYSeries createMovingAverage(org.jfree.data.xy.XYDataset,int,java.lang.String,double,double)" class="org.jfree.data.time.MovingAverage" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.time.MovingAverage" />
	<method signature="org.jfree.data.xy.XYDataset createMovingAverage(org.jfree.data.xy.XYDataset,java.lang.String,long,long)" class="org.jfree.data.time.MovingAverage" />
	<method signature="org.jfree.data.time.TimeSeries createMovingAverage(org.jfree.data.time.TimeSeries,java.lang.String,int,int)" class="org.jfree.data.time.MovingAverage" />
	<method signature="org.jfree.data.xy.XYDataset createMovingAverage(org.jfree.data.xy.XYDataset,java.lang.String,double,double)" class="org.jfree.data.time.MovingAverage" />
	<method signature="org.jfree.data.time.TimeSeries createPointMovingAverage(org.jfree.data.time.TimeSeries,java.lang.String,int)" class="org.jfree.data.time.MovingAverage" />
	<class name="org.apache.xerces.dom3.as.CharacterDataEditAS" />
	<method signature="boolean getIsWhitespaceOnly()" class="org.apache.xerces.dom3.as.CharacterDataEditAS" />
	<method signature="boolean canDeleteData(int,int)" class="org.apache.xerces.dom3.as.CharacterDataEditAS" />
	<method signature="boolean canInsertData(int,java.lang.String)" class="org.apache.xerces.dom3.as.CharacterDataEditAS" />
	<method signature="boolean canAppendData(java.lang.String)" class="org.apache.xerces.dom3.as.CharacterDataEditAS" />
	<method signature="boolean canReplaceData(int,int,java.lang.String)" class="org.apache.xerces.dom3.as.CharacterDataEditAS" />
	<method signature="boolean canSetData(int,int)" class="org.apache.xerces.dom3.as.CharacterDataEditAS" />
	<class name="org.apache.xerces.util.StAXLocationWrapper" />
	<method signature="int getLineNumber()" class="org.apache.xerces.util.StAXLocationWrapper" />
	<method signature="javax.xml.stream.Location getLocation()" class="org.apache.xerces.util.StAXLocationWrapper" />
	<method signature="java.lang.String getPublicId()" class="org.apache.xerces.util.StAXLocationWrapper" />
	<method signature="java.lang.String getLiteralSystemId()" class="org.apache.xerces.util.StAXLocationWrapper" />
	<method signature="java.lang.String getBaseSystemId()" class="org.apache.xerces.util.StAXLocationWrapper" />
	<method signature="void setLocation(javax.xml.stream.Location)" class="org.apache.xerces.util.StAXLocationWrapper" />
	<method signature="java.lang.String getEncoding()" class="org.apache.xerces.util.StAXLocationWrapper" />
	<method signature="int getCharacterOffset()" class="org.apache.xerces.util.StAXLocationWrapper" />
	<method signature="java.lang.String getExpandedSystemId()" class="org.apache.xerces.util.StAXLocationWrapper" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.util.StAXLocationWrapper" />
	<method signature="int getColumnNumber()" class="org.apache.xerces.util.StAXLocationWrapper" />
	<method signature="java.lang.String getXMLVersion()" class="org.apache.xerces.util.StAXLocationWrapper" />
	<class name="org.apache.xerces.parsers.XMLParser" />
	<method signature="void parse(org.apache.xerces.xni.parser.XMLInputSource)" class="org.apache.xerces.parsers.XMLParser" />
	<class name="org.apache.html.dom.HTMLHeadElementImpl" />
	<method signature="java.lang.String getProfile()" class="org.apache.html.dom.HTMLHeadElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLHeadElementImpl" />
	<method signature="void setProfile(java.lang.String)" class="org.apache.html.dom.HTMLHeadElementImpl" />
	<class name="org.apache.xerces.impl.xs.identity.ValueStore" />
	<method signature="void reportError(java.lang.String,java.lang.Object[])" class="org.apache.xerces.impl.xs.identity.ValueStore" />
	<method signature="void addValue(org.apache.xerces.impl.xs.identity.Field,boolean,java.lang.Object,short,org.apache.xerces.xs.ShortList)" class="org.apache.xerces.impl.xs.identity.ValueStore" />
	<class name="javax.xml.bind.DatatypeConverter" />
	<method signature="short parseShort(java.lang.String)" class="javax.xml.bind.DatatypeConverter" />
	<method signature="java.lang.String parseString(java.lang.String)" class="javax.xml.bind.DatatypeConverter" />
	<method signature="long parseUnsignedInt(java.lang.String)" class="javax.xml.bind.DatatypeConverter" />
	<method signature="java.lang.String printUnsignedShort(int)" class="javax.xml.bind.DatatypeConverter" />
	<method signature="java.lang.String printDouble(double)" class="javax.xml.bind.DatatypeConverter" />
	<method signature="java.lang.String printString(java.lang.String)" class="javax.xml.bind.DatatypeConverter" />
	<method signature="double parseDouble(java.lang.String)" class="javax.xml.bind.DatatypeConverter" />
	<method signature="java.math.BigDecimal parseDecimal(java.lang.String)" class="javax.xml.bind.DatatypeConverter" />
	<method signature="java.lang.String printFloat(float)" class="javax.xml.bind.DatatypeConverter" />
	<method signature="java.lang.String printShort(short)" class="javax.xml.bind.DatatypeConverter" />
	<method signature="java.lang.String printByte(byte)" class="javax.xml.bind.DatatypeConverter" />
	<method signature="java.util.Calendar parseDate(java.lang.String)" class="javax.xml.bind.DatatypeConverter" />
	<method signature="java.lang.String printQName(javax.xml.namespace.QName,javax.xml.namespace.NamespaceContext)" class="javax.xml.bind.DatatypeConverter" />
	<method signature="byte[] parseHexBinary(java.lang.String)" class="javax.xml.bind.DatatypeConverter" />
	<method signature="java.lang.String printAnySimpleType(java.lang.String)" class="javax.xml.bind.DatatypeConverter" />
	<method signature="float parseFloat(java.lang.String)" class="javax.xml.bind.DatatypeConverter" />
	<method signature="int parseInt(java.lang.String)" class="javax.xml.bind.DatatypeConverter" />
	<method signature="boolean parseBoolean(java.lang.String)" class="javax.xml.bind.DatatypeConverter" />
	<method signature="java.lang.String printBoolean(boolean)" class="javax.xml.bind.DatatypeConverter" />
	<method signature="byte[] parseBase64Binary(java.lang.String)" class="javax.xml.bind.DatatypeConverter" />
	<method signature="java.lang.String printTime(java.util.Calendar)" class="javax.xml.bind.DatatypeConverter" />
	<method signature="long parseLong(java.lang.String)" class="javax.xml.bind.DatatypeConverter" />
	<method signature="javax.xml.namespace.QName parseQName(java.lang.String,javax.xml.namespace.NamespaceContext)" class="javax.xml.bind.DatatypeConverter" />
	<method signature="java.lang.String printInt(int)" class="javax.xml.bind.DatatypeConverter" />
	<method signature="void setDatatypeConverter(javax.xml.bind.DatatypeConverterInterface)" class="javax.xml.bind.DatatypeConverter" />
	<method signature="java.lang.String printUnsignedInt(long)" class="javax.xml.bind.DatatypeConverter" />
	<method signature="int parseUnsignedShort(java.lang.String)" class="javax.xml.bind.DatatypeConverter" />
	<method signature="java.math.BigInteger parseInteger(java.lang.String)" class="javax.xml.bind.DatatypeConverter" />
	<method signature="java.lang.String printInteger(java.math.BigInteger)" class="javax.xml.bind.DatatypeConverter" />
	<method signature="java.util.Calendar parseDateTime(java.lang.String)" class="javax.xml.bind.DatatypeConverter" />
	<method signature="java.lang.String printBase64Binary(byte[])" class="javax.xml.bind.DatatypeConverter" />
	<method signature="byte parseByte(java.lang.String)" class="javax.xml.bind.DatatypeConverter" />
	<method signature="java.util.Calendar parseTime(java.lang.String)" class="javax.xml.bind.DatatypeConverter" />
	<method signature="java.lang.String parseAnySimpleType(java.lang.String)" class="javax.xml.bind.DatatypeConverter" />
	<method signature="java.lang.String printDateTime(java.util.Calendar)" class="javax.xml.bind.DatatypeConverter" />
	<method signature="java.lang.String printLong(long)" class="javax.xml.bind.DatatypeConverter" />
	<method signature="java.lang.String printDecimal(java.math.BigDecimal)" class="javax.xml.bind.DatatypeConverter" />
	<method signature="java.lang.String printHexBinary(byte[])" class="javax.xml.bind.DatatypeConverter" />
	<method signature="java.lang.String printDate(java.util.Calendar)" class="javax.xml.bind.DatatypeConverter" />
	<class name="org.apache.xerces.xs.datatypes.XSQName" />
	<method signature="org.apache.xerces.xni.QName getXNIQName()" class="org.apache.xerces.xs.datatypes.XSQName" />
	<method signature="javax.xml.namespace.QName getJAXPQName()" class="org.apache.xerces.xs.datatypes.XSQName" />
	<class name="com.google.zxing.multi.qrcode.QRCodeMultiReader" />
	<method signature="com.google.zxing.Result[] decodeMultiple(com.google.zxing.BinaryBitmap,java.util.Map)" class="com.google.zxing.multi.qrcode.QRCodeMultiReader" />
	<method signature="com.google.zxing.Result[] decodeMultiple(com.google.zxing.BinaryBitmap)" class="com.google.zxing.multi.qrcode.QRCodeMultiReader" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.multi.qrcode.QRCodeMultiReader" />
	<class name="org.apache.commons.lang3.Range" />
	<method signature="boolean isBeforeRange(org.apache.commons.lang3.Range)" class="org.apache.commons.lang3.Range" />
	<method signature="int elementCompareTo(java.lang.Object)" class="org.apache.commons.lang3.Range" />
	<method signature="org.apache.commons.lang3.Range between(java.lang.Comparable,java.lang.Comparable)" class="org.apache.commons.lang3.Range" />
	<method signature="boolean isBefore(java.lang.Object)" class="org.apache.commons.lang3.Range" />
	<method signature="java.lang.String toString(java.lang.String)" class="org.apache.commons.lang3.Range" />
	<method signature="boolean contains(java.lang.Object)" class="org.apache.commons.lang3.Range" />
	<method signature="boolean equals(java.lang.Object)" class="org.apache.commons.lang3.Range" />
	<method signature="boolean isAfterRange(org.apache.commons.lang3.Range)" class="org.apache.commons.lang3.Range" />
	<method signature="boolean isStartedBy(java.lang.Object)" class="org.apache.commons.lang3.Range" />
	<method signature="boolean isOverlappedBy(org.apache.commons.lang3.Range)" class="org.apache.commons.lang3.Range" />
	<method signature="org.apache.commons.lang3.Range is(java.lang.Comparable)" class="org.apache.commons.lang3.Range" />
	<method signature="boolean isAfter(java.lang.Object)" class="org.apache.commons.lang3.Range" />
	<method signature="int hashCode()" class="org.apache.commons.lang3.Range" />
	<method signature="org.apache.commons.lang3.Range is(java.lang.Object,java.util.Comparator)" class="org.apache.commons.lang3.Range" />
	<method signature="java.lang.Object getMaximum()" class="org.apache.commons.lang3.Range" />
	<method signature="org.apache.commons.lang3.Range between(java.lang.Object,java.lang.Object,java.util.Comparator)" class="org.apache.commons.lang3.Range" />
	<method signature="boolean isEndedBy(java.lang.Object)" class="org.apache.commons.lang3.Range" />
	<method signature="org.apache.commons.lang3.Range intersectionWith(org.apache.commons.lang3.Range)" class="org.apache.commons.lang3.Range" />
	<method signature="java.util.Comparator getComparator()" class="org.apache.commons.lang3.Range" />
	<method signature="java.lang.Object getMinimum()" class="org.apache.commons.lang3.Range" />
	<method signature="boolean isNaturalOrdering()" class="org.apache.commons.lang3.Range" />
	<method signature="java.lang.String toString()" class="org.apache.commons.lang3.Range" />
	<method signature="boolean containsRange(org.apache.commons.lang3.Range)" class="org.apache.commons.lang3.Range" />
	<class name="freemarker.template.TemplateMethodModel" />
	<method signature="java.lang.Object exec(java.util.List)" class="freemarker.template.TemplateMethodModel" />
	<class name="javax.xml.stream.events.XMLEvent" />
	<method signature="boolean isEndDocument()" class="javax.xml.stream.events.XMLEvent" />
	<method signature="boolean isStartDocument()" class="javax.xml.stream.events.XMLEvent" />
	<method signature="boolean isEntityReference()" class="javax.xml.stream.events.XMLEvent" />
	<method signature="boolean isStartElement()" class="javax.xml.stream.events.XMLEvent" />
	<method signature="int getEventType()" class="javax.xml.stream.events.XMLEvent" />
	<method signature="javax.xml.stream.events.EndElement asEndElement()" class="javax.xml.stream.events.XMLEvent" />
	<method signature="javax.xml.stream.Location getLocation()" class="javax.xml.stream.events.XMLEvent" />
	<method signature="boolean isAttribute()" class="javax.xml.stream.events.XMLEvent" />
	<method signature="boolean isEndElement()" class="javax.xml.stream.events.XMLEvent" />
	<method signature="void writeAsEncodedUnicode(java.io.Writer)" class="javax.xml.stream.events.XMLEvent" />
	<method signature="javax.xml.namespace.QName getSchemaType()" class="javax.xml.stream.events.XMLEvent" />
	<method signature="boolean isNamespace()" class="javax.xml.stream.events.XMLEvent" />
	<method signature="boolean isCharacters()" class="javax.xml.stream.events.XMLEvent" />
	<method signature="javax.xml.stream.events.StartElement asStartElement()" class="javax.xml.stream.events.XMLEvent" />
	<method signature="javax.xml.stream.events.Characters asCharacters()" class="javax.xml.stream.events.XMLEvent" />
	<method signature="boolean isProcessingInstruction()" class="javax.xml.stream.events.XMLEvent" />
	<class name="org.jfree.data.general.PieDataset" />
	<class name="com.google.zxing.client.result.TelResultParser" />
	<method signature="com.google.zxing.client.result.TelParsedResult parse(com.google.zxing.Result)" class="com.google.zxing.client.result.TelResultParser" />
	<method signature="com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result)" class="com.google.zxing.client.result.TelResultParser" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.client.result.TelResultParser" />
	<class name="org.jdom2.SlimJDOMFactory" />
	<method signature="org.jdom2.ProcessingInstruction processingInstruction(int,int,java.lang.String)" class="org.jdom2.SlimJDOMFactory" />
	<method signature="org.jdom2.Text text(int,int,java.lang.String)" class="org.jdom2.SlimJDOMFactory" />
	<method signature="org.jdom2.Attribute attribute(java.lang.String,java.lang.String,int,org.jdom2.Namespace)" class="org.jdom2.SlimJDOMFactory" />
	<method signature="org.jdom2.Attribute attribute(java.lang.String,java.lang.String,org.jdom2.AttributeType)" class="org.jdom2.SlimJDOMFactory" />
	<method signature="org.jdom2.Attribute attribute(java.lang.String,java.lang.String,int)" class="org.jdom2.SlimJDOMFactory" />
	<method signature="void &lt;init&gt;()" class="org.jdom2.SlimJDOMFactory" />
	<method signature="org.jdom2.ProcessingInstruction processingInstruction(int,int,java.lang.String,java.util.Map)" class="org.jdom2.SlimJDOMFactory" />
	<method signature="org.jdom2.EntityRef entityRef(int,int,java.lang.String)" class="org.jdom2.SlimJDOMFactory" />
	<method signature="void &lt;init&gt;(boolean)" class="org.jdom2.SlimJDOMFactory" />
	<method signature="org.jdom2.EntityRef entityRef(int,int,java.lang.String,java.lang.String)" class="org.jdom2.SlimJDOMFactory" />
	<method signature="org.jdom2.Attribute attribute(java.lang.String,java.lang.String,org.jdom2.AttributeType,org.jdom2.Namespace)" class="org.jdom2.SlimJDOMFactory" />
	<method signature="org.jdom2.EntityRef entityRef(int,int,java.lang.String,java.lang.String,java.lang.String)" class="org.jdom2.SlimJDOMFactory" />
	<method signature="org.jdom2.Element element(int,int,java.lang.String,org.jdom2.Namespace)" class="org.jdom2.SlimJDOMFactory" />
	<method signature="org.jdom2.Element element(int,int,java.lang.String)" class="org.jdom2.SlimJDOMFactory" />
	<method signature="org.jdom2.Attribute attribute(java.lang.String,java.lang.String)" class="org.jdom2.SlimJDOMFactory" />
	<method signature="org.jdom2.DocType docType(int,int,java.lang.String,java.lang.String,java.lang.String)" class="org.jdom2.SlimJDOMFactory" />
	<method signature="void clearCache()" class="org.jdom2.SlimJDOMFactory" />
	<method signature="org.jdom2.DocType docType(int,int,java.lang.String,java.lang.String)" class="org.jdom2.SlimJDOMFactory" />
	<method signature="org.jdom2.ProcessingInstruction processingInstruction(int,int,java.lang.String,java.lang.String)" class="org.jdom2.SlimJDOMFactory" />
	<method signature="org.jdom2.Comment comment(int,int,java.lang.String)" class="org.jdom2.SlimJDOMFactory" />
	<method signature="org.jdom2.Attribute attribute(java.lang.String,java.lang.String,org.jdom2.Namespace)" class="org.jdom2.SlimJDOMFactory" />
	<method signature="org.jdom2.DocType docType(int,int,java.lang.String)" class="org.jdom2.SlimJDOMFactory" />
	<method signature="org.jdom2.CDATA cdata(int,int,java.lang.String)" class="org.jdom2.SlimJDOMFactory" />
	<method signature="org.jdom2.Element element(int,int,java.lang.String,java.lang.String)" class="org.jdom2.SlimJDOMFactory" />
	<method signature="org.jdom2.Element element(int,int,java.lang.String,java.lang.String,java.lang.String)" class="org.jdom2.SlimJDOMFactory" />
	<class name="freemarker.template.utility.ObjectConstructor" />
	<method signature="void &lt;init&gt;()" class="freemarker.template.utility.ObjectConstructor" />
	<method signature="java.lang.Object exec(java.util.List)" class="freemarker.template.utility.ObjectConstructor" />
	<class name="org.apache.commons.lang3.mutable.MutableShort" />
	<method signature="void decrement()" class="org.apache.commons.lang3.mutable.MutableShort" />
	<method signature="int intValue()" class="org.apache.commons.lang3.mutable.MutableShort" />
	<method signature="boolean equals(java.lang.Object)" class="org.apache.commons.lang3.mutable.MutableShort" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.mutable.MutableShort" />
	<method signature="void setValue(java.lang.Object)" class="org.apache.commons.lang3.mutable.MutableShort" />
	<method signature="java.lang.Object getValue()" class="org.apache.commons.lang3.mutable.MutableShort" />
	<method signature="double doubleValue()" class="org.apache.commons.lang3.mutable.MutableShort" />
	<method signature="float floatValue()" class="org.apache.commons.lang3.mutable.MutableShort" />
	<method signature="int compareTo(java.lang.Object)" class="org.apache.commons.lang3.mutable.MutableShort" />
	<method signature="void setValue(short)" class="org.apache.commons.lang3.mutable.MutableShort" />
	<method signature="int hashCode()" class="org.apache.commons.lang3.mutable.MutableShort" />
	<method signature="short shortValue()" class="org.apache.commons.lang3.mutable.MutableShort" />
	<method signature="int compareTo(org.apache.commons.lang3.mutable.MutableShort)" class="org.apache.commons.lang3.mutable.MutableShort" />
	<method signature="void setValue(java.lang.Number)" class="org.apache.commons.lang3.mutable.MutableShort" />
	<method signature="void subtract(short)" class="org.apache.commons.lang3.mutable.MutableShort" />
	<method signature="void increment()" class="org.apache.commons.lang3.mutable.MutableShort" />
	<method signature="java.lang.Short getValue()" class="org.apache.commons.lang3.mutable.MutableShort" />
	<method signature="void add(short)" class="org.apache.commons.lang3.mutable.MutableShort" />
	<method signature="void &lt;init&gt;(java.lang.Number)" class="org.apache.commons.lang3.mutable.MutableShort" />
	<method signature="java.lang.String toString()" class="org.apache.commons.lang3.mutable.MutableShort" />
	<method signature="void &lt;init&gt;(short)" class="org.apache.commons.lang3.mutable.MutableShort" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.apache.commons.lang3.mutable.MutableShort" />
	<method signature="void add(java.lang.Number)" class="org.apache.commons.lang3.mutable.MutableShort" />
	<method signature="long longValue()" class="org.apache.commons.lang3.mutable.MutableShort" />
	<method signature="java.lang.Short toShort()" class="org.apache.commons.lang3.mutable.MutableShort" />
	<method signature="void subtract(java.lang.Number)" class="org.apache.commons.lang3.mutable.MutableShort" />
	<class name="org.apache.wml.WMLAccessElement" />
	<method signature="void setDomain(java.lang.String)" class="org.apache.wml.WMLAccessElement" />
	<method signature="java.lang.String getDomain()" class="org.apache.wml.WMLAccessElement" />
	<method signature="java.lang.String getPath()" class="org.apache.wml.WMLAccessElement" />
	<method signature="void setPath(java.lang.String)" class="org.apache.wml.WMLAccessElement" />
	<class name="com.toedter.calendar.JYearChooserBeanInfo" />
	<method signature="void &lt;init&gt;()" class="com.toedter.calendar.JYearChooserBeanInfo" />
	<class name="org.jfree.data.general.SubSeriesDataset" />
	<method signature="int[] getMap()" class="org.jfree.data.general.SubSeriesDataset" />
	<method signature="double getVolumeValue(int,int)" class="org.jfree.data.general.SubSeriesDataset" />
	<method signature="java.lang.Number getLow(int,int)" class="org.jfree.data.general.SubSeriesDataset" />
	<method signature="void &lt;init&gt;(org.jfree.data.general.SeriesDataset,int[])" class="org.jfree.data.general.SubSeriesDataset" />
	<method signature="java.lang.Number getVolume(int,int)" class="org.jfree.data.general.SubSeriesDataset" />
	<method signature="java.lang.Number getX(int,int)" class="org.jfree.data.general.SubSeriesDataset" />
	<method signature="java.lang.Number getY(int,int)" class="org.jfree.data.general.SubSeriesDataset" />
	<method signature="double getHighValue(int,int)" class="org.jfree.data.general.SubSeriesDataset" />
	<method signature="double getOpenValue(int,int)" class="org.jfree.data.general.SubSeriesDataset" />
	<method signature="java.lang.Number getHigh(int,int)" class="org.jfree.data.general.SubSeriesDataset" />
	<method signature="int getSeriesCount()" class="org.jfree.data.general.SubSeriesDataset" />
	<method signature="void &lt;init&gt;(org.jfree.data.general.SeriesDataset,int)" class="org.jfree.data.general.SubSeriesDataset" />
	<method signature="java.lang.Comparable getSeriesKey(int)" class="org.jfree.data.general.SubSeriesDataset" />
	<method signature="org.jfree.data.general.SeriesDataset getParent()" class="org.jfree.data.general.SubSeriesDataset" />
	<method signature="java.lang.Number getClose(int,int)" class="org.jfree.data.general.SubSeriesDataset" />
	<method signature="java.lang.Number getOpen(int,int)" class="org.jfree.data.general.SubSeriesDataset" />
	<method signature="java.lang.Number getEndX(int,int)" class="org.jfree.data.general.SubSeriesDataset" />
	<method signature="double getCloseValue(int,int)" class="org.jfree.data.general.SubSeriesDataset" />
	<method signature="java.lang.Number getStartX(int,int)" class="org.jfree.data.general.SubSeriesDataset" />
	<method signature="java.lang.Number getStartY(int,int)" class="org.jfree.data.general.SubSeriesDataset" />
	<method signature="int getItemCount(int)" class="org.jfree.data.general.SubSeriesDataset" />
	<method signature="java.lang.Number getEndY(int,int)" class="org.jfree.data.general.SubSeriesDataset" />
	<method signature="double getLowValue(int,int)" class="org.jfree.data.general.SubSeriesDataset" />
	<class name="org.apache.xerces.dom3.as.ASEntityDeclaration" />
	<method signature="java.lang.String getSystemId()" class="org.apache.xerces.dom3.as.ASEntityDeclaration" />
	<method signature="short getEntityType()" class="org.apache.xerces.dom3.as.ASEntityDeclaration" />
	<method signature="void setSystemId(java.lang.String)" class="org.apache.xerces.dom3.as.ASEntityDeclaration" />
	<method signature="void setEntityValue(java.lang.String)" class="org.apache.xerces.dom3.as.ASEntityDeclaration" />
	<method signature="java.lang.String getEntityValue()" class="org.apache.xerces.dom3.as.ASEntityDeclaration" />
	<method signature="void setEntityType(short)" class="org.apache.xerces.dom3.as.ASEntityDeclaration" />
	<method signature="java.lang.String getPublicId()" class="org.apache.xerces.dom3.as.ASEntityDeclaration" />
	<method signature="void setPublicId(java.lang.String)" class="org.apache.xerces.dom3.as.ASEntityDeclaration" />
	<class name="org.jfree.chart.panel.Overlay" />
	<method signature="void removeChangeListener(org.jfree.chart.event.OverlayChangeListener)" class="org.jfree.chart.panel.Overlay" />
	<method signature="void addChangeListener(org.jfree.chart.event.OverlayChangeListener)" class="org.jfree.chart.panel.Overlay" />
	<method signature="void paintOverlay(java.awt.Graphics2D,org.jfree.chart.ChartPanel)" class="org.jfree.chart.panel.Overlay" />
	<class name="org.w3c.dom.css.CSSStyleDeclaration" />
	<method signature="void setProperty(java.lang.String,java.lang.String,java.lang.String)" class="org.w3c.dom.css.CSSStyleDeclaration" />
	<method signature="java.lang.String item(int)" class="org.w3c.dom.css.CSSStyleDeclaration" />
	<method signature="java.lang.String getPropertyValue(java.lang.String)" class="org.w3c.dom.css.CSSStyleDeclaration" />
	<method signature="java.lang.String getPropertyPriority(java.lang.String)" class="org.w3c.dom.css.CSSStyleDeclaration" />
	<method signature="java.lang.String getCssText()" class="org.w3c.dom.css.CSSStyleDeclaration" />
	<method signature="void setCssText(java.lang.String)" class="org.w3c.dom.css.CSSStyleDeclaration" />
	<method signature="java.lang.String removeProperty(java.lang.String)" class="org.w3c.dom.css.CSSStyleDeclaration" />
	<method signature="org.w3c.dom.css.CSSValue getPropertyCSSValue(java.lang.String)" class="org.w3c.dom.css.CSSStyleDeclaration" />
	<method signature="int getLength()" class="org.w3c.dom.css.CSSStyleDeclaration" />
	<method signature="org.w3c.dom.css.CSSRule getParentRule()" class="org.w3c.dom.css.CSSStyleDeclaration" />
	<class name="freemarker.template.TemplateMethodModelEx" />
	<method signature="java.lang.Object exec(java.util.List)" class="freemarker.template.TemplateMethodModelEx" />
	<class name="org.apache.xerces.impl.xs.models.XSCMValidator" />
	<method signature="int[] startContentModel()" class="org.apache.xerces.impl.xs.models.XSCMValidator" />
	<method signature="boolean checkUniqueParticleAttribution(org.apache.xerces.impl.xs.SubstitutionGroupHandler)" class="org.apache.xerces.impl.xs.models.XSCMValidator" />
	<method signature="int[] occurenceInfo(int[])" class="org.apache.xerces.impl.xs.models.XSCMValidator" />
	<method signature="java.lang.Object oneTransition(org.apache.xerces.xni.QName,int[],org.apache.xerces.impl.xs.SubstitutionGroupHandler)" class="org.apache.xerces.impl.xs.models.XSCMValidator" />
	<method signature="java.util.Vector whatCanGoHere(int[])" class="org.apache.xerces.impl.xs.models.XSCMValidator" />
	<method signature="java.lang.String getTermName(int)" class="org.apache.xerces.impl.xs.models.XSCMValidator" />
	<method signature="boolean endContentModel(int[])" class="org.apache.xerces.impl.xs.models.XSCMValidator" />
	<method signature="boolean isCompactedForUPA()" class="org.apache.xerces.impl.xs.models.XSCMValidator" />
	<class name="org.apache.commons.lang3.builder.HashCodeBuilder" />
	<method signature="org.apache.commons.lang3.builder.HashCodeBuilder append(double[])" class="org.apache.commons.lang3.builder.HashCodeBuilder" />
	<method signature="org.apache.commons.lang3.builder.HashCodeBuilder append(byte)" class="org.apache.commons.lang3.builder.HashCodeBuilder" />
	<method signature="int reflectionHashCode(int,int,java.lang.Object)" class="org.apache.commons.lang3.builder.HashCodeBuilder" />
	<method signature="int reflectionHashCode(java.lang.Object,java.util.Collection)" class="org.apache.commons.lang3.builder.HashCodeBuilder" />
	<method signature="org.apache.commons.lang3.builder.HashCodeBuilder append(float[])" class="org.apache.commons.lang3.builder.HashCodeBuilder" />
	<method signature="org.apache.commons.lang3.builder.HashCodeBuilder append(int)" class="org.apache.commons.lang3.builder.HashCodeBuilder" />
	<method signature="org.apache.commons.lang3.builder.HashCodeBuilder append(int[])" class="org.apache.commons.lang3.builder.HashCodeBuilder" />
	<method signature="void &lt;init&gt;(int,int)" class="org.apache.commons.lang3.builder.HashCodeBuilder" />
	<method signature="int reflectionHashCode(java.lang.Object,java.lang.String[])" class="org.apache.commons.lang3.builder.HashCodeBuilder" />
	<method signature="java.lang.Integer build()" class="org.apache.commons.lang3.builder.HashCodeBuilder" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.builder.HashCodeBuilder" />
	<method signature="org.apache.commons.lang3.builder.HashCodeBuilder append(byte[])" class="org.apache.commons.lang3.builder.HashCodeBuilder" />
	<method signature="int toHashCode()" class="org.apache.commons.lang3.builder.HashCodeBuilder" />
	<method signature="org.apache.commons.lang3.builder.HashCodeBuilder append(double)" class="org.apache.commons.lang3.builder.HashCodeBuilder" />
	<method signature="org.apache.commons.lang3.builder.HashCodeBuilder append(float)" class="org.apache.commons.lang3.builder.HashCodeBuilder" />
	<method signature="org.apache.commons.lang3.builder.HashCodeBuilder append(char[])" class="org.apache.commons.lang3.builder.HashCodeBuilder" />
	<method signature="java.lang.Object build()" class="org.apache.commons.lang3.builder.HashCodeBuilder" />
	<method signature="org.apache.commons.lang3.builder.HashCodeBuilder appendSuper(int)" class="org.apache.commons.lang3.builder.HashCodeBuilder" />
	<method signature="org.apache.commons.lang3.builder.HashCodeBuilder append(boolean)" class="org.apache.commons.lang3.builder.HashCodeBuilder" />
	<method signature="org.apache.commons.lang3.builder.HashCodeBuilder append(char)" class="org.apache.commons.lang3.builder.HashCodeBuilder" />
	<method signature="org.apache.commons.lang3.builder.HashCodeBuilder append(short[])" class="org.apache.commons.lang3.builder.HashCodeBuilder" />
	<method signature="org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object[])" class="org.apache.commons.lang3.builder.HashCodeBuilder" />
	<method signature="org.apache.commons.lang3.builder.HashCodeBuilder append(short)" class="org.apache.commons.lang3.builder.HashCodeBuilder" />
	<method signature="int hashCode()" class="org.apache.commons.lang3.builder.HashCodeBuilder" />
	<method signature="org.apache.commons.lang3.builder.HashCodeBuilder append(boolean[])" class="org.apache.commons.lang3.builder.HashCodeBuilder" />
	<method signature="org.apache.commons.lang3.builder.HashCodeBuilder append(long[])" class="org.apache.commons.lang3.builder.HashCodeBuilder" />
	<method signature="org.apache.commons.lang3.builder.HashCodeBuilder append(long)" class="org.apache.commons.lang3.builder.HashCodeBuilder" />
	<method signature="org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)" class="org.apache.commons.lang3.builder.HashCodeBuilder" />
	<method signature="int reflectionHashCode(int,int,java.lang.Object,boolean)" class="org.apache.commons.lang3.builder.HashCodeBuilder" />
	<method signature="int reflectionHashCode(java.lang.Object,boolean)" class="org.apache.commons.lang3.builder.HashCodeBuilder" />
	<method signature="int reflectionHashCode(int,int,java.lang.Object,boolean,java.lang.Class,java.lang.String[])" class="org.apache.commons.lang3.builder.HashCodeBuilder" />
	<class name="fi.iki.elonen.NanoHTTPD$ClientHandler" />
	<method signature="void run()" class="fi.iki.elonen.NanoHTTPD$ClientHandler" />
	<method signature="void close()" class="fi.iki.elonen.NanoHTTPD$ClientHandler" />
	<class name="org.apache.commons.lang3.concurrent.BackgroundInitializer" />
	<method signature="void setExternalExecutor(java.util.concurrent.ExecutorService)" class="org.apache.commons.lang3.concurrent.BackgroundInitializer" />
	<method signature="java.util.concurrent.ExecutorService getExternalExecutor()" class="org.apache.commons.lang3.concurrent.BackgroundInitializer" />
	<method signature="boolean start()" class="org.apache.commons.lang3.concurrent.BackgroundInitializer" />
	<method signature="boolean isStarted()" class="org.apache.commons.lang3.concurrent.BackgroundInitializer" />
	<method signature="java.util.concurrent.Future getFuture()" class="org.apache.commons.lang3.concurrent.BackgroundInitializer" />
	<method signature="java.lang.Object get()" class="org.apache.commons.lang3.concurrent.BackgroundInitializer" />
	<class name="org.apache.xerces.xs.XSTerm" />
	<class name="tourma.views.report.JdgRound" />
	<method signature="void &lt;init&gt;(java.awt.Frame,boolean,tourma.data.Round,int,tourma.data.Tournament,boolean,boolean)" class="tourma.views.report.JdgRound" />
	<method signature="void &lt;init&gt;(java.awt.Frame,boolean,java.util.ArrayList,java.util.ArrayList,int,tourma.data.Tournament)" class="tourma.views.report.JdgRound" />
	<class name="org.jfree.data.statistics.Statistics" />
	<method signature="double calculateMean(java.lang.Number[],boolean)" class="org.jfree.data.statistics.Statistics" />
	<method signature="double calculateMean(java.util.Collection,boolean)" class="org.jfree.data.statistics.Statistics" />
	<method signature="double getCorrelation(java.lang.Number[],java.lang.Number[])" class="org.jfree.data.statistics.Statistics" />
	<method signature="double calculateMean(java.util.Collection)" class="org.jfree.data.statistics.Statistics" />
	<method signature="double getStdDev(java.lang.Number[])" class="org.jfree.data.statistics.Statistics" />
	<method signature="double calculateMean(java.lang.Number[])" class="org.jfree.data.statistics.Statistics" />
	<method signature="double calculateMedian(java.util.List)" class="org.jfree.data.statistics.Statistics" />
	<method signature="double calculateMedian(java.util.List,int,int)" class="org.jfree.data.statistics.Statistics" />
	<method signature="double calculateMedian(java.util.List,boolean)" class="org.jfree.data.statistics.Statistics" />
	<method signature="double calculateMedian(java.util.List,int,int,boolean)" class="org.jfree.data.statistics.Statistics" />
	<method signature="double getSlope(java.lang.Number[],java.lang.Number[])" class="org.jfree.data.statistics.Statistics" />
	<method signature="double[][] getMovingAverage(java.lang.Number[],java.lang.Number[],int)" class="org.jfree.data.statistics.Statistics" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.statistics.Statistics" />
	<method signature="double[] getLinearFit(java.lang.Number[],java.lang.Number[])" class="org.jfree.data.statistics.Statistics" />
	<class name="org.apache.xerces.parsers.XMLGrammarParser" />
	<class name="org.jdom2.UncheckedJDOMFactory" />
	<method signature="org.jdom2.ProcessingInstruction processingInstruction(int,int,java.lang.String)" class="org.jdom2.UncheckedJDOMFactory" />
	<method signature="org.jdom2.Text text(int,int,java.lang.String)" class="org.jdom2.UncheckedJDOMFactory" />
	<method signature="org.jdom2.Attribute attribute(java.lang.String,java.lang.String,int,org.jdom2.Namespace)" class="org.jdom2.UncheckedJDOMFactory" />
	<method signature="org.jdom2.Document document(org.jdom2.Element,org.jdom2.DocType)" class="org.jdom2.UncheckedJDOMFactory" />
	<method signature="org.jdom2.Attribute attribute(java.lang.String,java.lang.String,org.jdom2.AttributeType)" class="org.jdom2.UncheckedJDOMFactory" />
	<method signature="org.jdom2.Attribute attribute(java.lang.String,java.lang.String,int)" class="org.jdom2.UncheckedJDOMFactory" />
	<method signature="void setAttribute(org.jdom2.Element,org.jdom2.Attribute)" class="org.jdom2.UncheckedJDOMFactory" />
	<method signature="void &lt;init&gt;()" class="org.jdom2.UncheckedJDOMFactory" />
	<method signature="org.jdom2.ProcessingInstruction processingInstruction(int,int,java.lang.String,java.util.Map)" class="org.jdom2.UncheckedJDOMFactory" />
	<method signature="void addContent(org.jdom2.Parent,org.jdom2.Content)" class="org.jdom2.UncheckedJDOMFactory" />
	<method signature="org.jdom2.EntityRef entityRef(int,int,java.lang.String)" class="org.jdom2.UncheckedJDOMFactory" />
	<method signature="org.jdom2.EntityRef entityRef(int,int,java.lang.String,java.lang.String)" class="org.jdom2.UncheckedJDOMFactory" />
	<method signature="org.jdom2.Attribute attribute(java.lang.String,java.lang.String,org.jdom2.AttributeType,org.jdom2.Namespace)" class="org.jdom2.UncheckedJDOMFactory" />
	<method signature="org.jdom2.EntityRef entityRef(int,int,java.lang.String,java.lang.String,java.lang.String)" class="org.jdom2.UncheckedJDOMFactory" />
	<method signature="void setRoot(org.jdom2.Document,org.jdom2.Element)" class="org.jdom2.UncheckedJDOMFactory" />
	<method signature="org.jdom2.Element element(int,int,java.lang.String,org.jdom2.Namespace)" class="org.jdom2.UncheckedJDOMFactory" />
	<method signature="org.jdom2.Element element(int,int,java.lang.String)" class="org.jdom2.UncheckedJDOMFactory" />
	<method signature="org.jdom2.Attribute attribute(java.lang.String,java.lang.String)" class="org.jdom2.UncheckedJDOMFactory" />
	<method signature="org.jdom2.DocType docType(int,int,java.lang.String,java.lang.String,java.lang.String)" class="org.jdom2.UncheckedJDOMFactory" />
	<method signature="org.jdom2.DocType docType(int,int,java.lang.String,java.lang.String)" class="org.jdom2.UncheckedJDOMFactory" />
	<method signature="org.jdom2.ProcessingInstruction processingInstruction(int,int,java.lang.String,java.lang.String)" class="org.jdom2.UncheckedJDOMFactory" />
	<method signature="org.jdom2.Document document(org.jdom2.Element)" class="org.jdom2.UncheckedJDOMFactory" />
	<method signature="org.jdom2.Comment comment(int,int,java.lang.String)" class="org.jdom2.UncheckedJDOMFactory" />
	<method signature="org.jdom2.Document document(org.jdom2.Element,org.jdom2.DocType,java.lang.String)" class="org.jdom2.UncheckedJDOMFactory" />
	<method signature="org.jdom2.Attribute attribute(java.lang.String,java.lang.String,org.jdom2.Namespace)" class="org.jdom2.UncheckedJDOMFactory" />
	<method signature="org.jdom2.DocType docType(int,int,java.lang.String)" class="org.jdom2.UncheckedJDOMFactory" />
	<method signature="org.jdom2.Element element(int,int,java.lang.String,java.lang.String)" class="org.jdom2.UncheckedJDOMFactory" />
	<method signature="org.jdom2.CDATA cdata(int,int,java.lang.String)" class="org.jdom2.UncheckedJDOMFactory" />
	<method signature="org.jdom2.Element element(int,int,java.lang.String,java.lang.String,java.lang.String)" class="org.jdom2.UncheckedJDOMFactory" />
	<method signature="void addNamespaceDeclaration(org.jdom2.Element,org.jdom2.Namespace)" class="org.jdom2.UncheckedJDOMFactory" />
	<class name="teamma.data.RosterType" />
	<method signature="java.lang.String getName()" class="teamma.data.RosterType" />
	<method signature="int getAssistant_cost()" class="teamma.data.RosterType" />
	<method signature="int getApothecary_cost()" class="teamma.data.RosterType" />
	<method signature="void setChef_cost(int)" class="teamma.data.RosterType" />
	<method signature="void setCheerleader_cost(int)" class="teamma.data.RosterType" />
	<method signature="void setExtraRerollCost(int)" class="teamma.data.RosterType" />
	<method signature="teamma.data.PlayerType getPlayerType(java.lang.String,boolean)" class="teamma.data.RosterType" />
	<method signature="teamma.data.StarPlayer getStarPlayer(java.lang.String,boolean)" class="teamma.data.RosterType" />
	<method signature="void setFan_factor_cost(int)" class="teamma.data.RosterType" />
	<method signature="void clearPlayerType()" class="teamma.data.RosterType" />
	<method signature="boolean isIgor()" class="teamma.data.RosterType" />
	<method signature="void setName(java.lang.String)" class="teamma.data.RosterType" />
	<method signature="int getBabe_cost()" class="teamma.data.RosterType" />
	<method signature="int getWizard_cost()" class="teamma.data.RosterType" />
	<method signature="void setReroll_cost(int)" class="teamma.data.RosterType" />
	<method signature="void setApothecary(boolean)" class="teamma.data.RosterType" />
	<method signature="teamma.data.PlayerType getPlayerType(int)" class="teamma.data.RosterType" />
	<method signature="void setBabe_cost(int)" class="teamma.data.RosterType" />
	<method signature="teamma.data.StarPlayer getAvailableStarplayer(int)" class="teamma.data.RosterType" />
	<method signature="void setApothecary_cost(int)" class="teamma.data.RosterType" />
	<method signature="int getAvailableStarplayerCount()" class="teamma.data.RosterType" />
	<method signature="void setIgor_cost(int)" class="teamma.data.RosterType" />
	<method signature="boolean isApothecary()" class="teamma.data.RosterType" />
	<method signature="void setAssistant_cost(int)" class="teamma.data.RosterType" />
	<method signature="int getFan_factor_cost()" class="teamma.data.RosterType" />
	<method signature="void setImage(java.lang.String)" class="teamma.data.RosterType" />
	<method signature="int getCheerleader_cost()" class="teamma.data.RosterType" />
	<method signature="int getBribe_cost()" class="teamma.data.RosterType" />
	<method signature="int getExtraRerollCost()" class="teamma.data.RosterType" />
	<method signature="int getReroll_cost()" class="teamma.data.RosterType" />
	<method signature="void setWizard_cost(int)" class="teamma.data.RosterType" />
	<method signature="int getChef_cost()" class="teamma.data.RosterType" />
	<method signature="void setBribe_cost(int)" class="teamma.data.RosterType" />
	<method signature="int getLocal_apo_cost()" class="teamma.data.RosterType" />
	<method signature="void setLocal_apo_cost(int)" class="teamma.data.RosterType" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="teamma.data.RosterType" />
	<method signature="int getIgor_cost()" class="teamma.data.RosterType" />
	<method signature="int getPlayerTypeCount()" class="teamma.data.RosterType" />
	<method signature="void setIgor(boolean)" class="teamma.data.RosterType" />
	<method signature="void clearAvailableStarPlayerType()" class="teamma.data.RosterType" />
	<method signature="void addAvailableStarPlayer(teamma.data.StarPlayer)" class="teamma.data.RosterType" />
	<method signature="java.lang.String getImage()" class="teamma.data.RosterType" />
	<method signature="void addPlayerType(teamma.data.PlayerType)" class="teamma.data.RosterType" />
	<class name="edu.umd.cs.findbugs.annotations.PossiblyNull" />
	<class name="javax.xml.stream.XMLStreamReader" />
	<method signature="java.lang.String getPIData()" class="javax.xml.stream.XMLStreamReader" />
	<method signature="int nextTag()" class="javax.xml.stream.XMLStreamReader" />
	<method signature="java.lang.String getNamespacePrefix(int)" class="javax.xml.stream.XMLStreamReader" />
	<method signature="boolean isStartElement()" class="javax.xml.stream.XMLStreamReader" />
	<method signature="int getEventType()" class="javax.xml.stream.XMLStreamReader" />
	<method signature="int getTextLength()" class="javax.xml.stream.XMLStreamReader" />
	<method signature="boolean standaloneSet()" class="javax.xml.stream.XMLStreamReader" />
	<method signature="boolean isEndElement()" class="javax.xml.stream.XMLStreamReader" />
	<method signature="java.lang.String getAttributeValue(java.lang.String,java.lang.String)" class="javax.xml.stream.XMLStreamReader" />
	<method signature="java.lang.String getNamespaceURI(java.lang.String)" class="javax.xml.stream.XMLStreamReader" />
	<method signature="java.lang.String getAttributePrefix(int)" class="javax.xml.stream.XMLStreamReader" />
	<method signature="java.lang.String getAttributeType(int)" class="javax.xml.stream.XMLStreamReader" />
	<method signature="java.lang.String getElementText()" class="javax.xml.stream.XMLStreamReader" />
	<method signature="boolean hasText()" class="javax.xml.stream.XMLStreamReader" />
	<method signature="java.lang.String getEncoding()" class="javax.xml.stream.XMLStreamReader" />
	<method signature="java.lang.String getAttributeValue(int)" class="javax.xml.stream.XMLStreamReader" />
	<method signature="javax.xml.namespace.NamespaceContext getNamespaceContext()" class="javax.xml.stream.XMLStreamReader" />
	<method signature="boolean hasNext()" class="javax.xml.stream.XMLStreamReader" />
	<method signature="char[] getTextCharacters()" class="javax.xml.stream.XMLStreamReader" />
	<method signature="int getAttributeCount()" class="javax.xml.stream.XMLStreamReader" />
	<method signature="java.lang.String getPrefix()" class="javax.xml.stream.XMLStreamReader" />
	<method signature="java.lang.String getVersion()" class="javax.xml.stream.XMLStreamReader" />
	<method signature="java.lang.String getText()" class="javax.xml.stream.XMLStreamReader" />
	<method signature="void close()" class="javax.xml.stream.XMLStreamReader" />
	<method signature="int getTextStart()" class="javax.xml.stream.XMLStreamReader" />
	<method signature="javax.xml.stream.Location getLocation()" class="javax.xml.stream.XMLStreamReader" />
	<method signature="java.lang.String getNamespaceURI(int)" class="javax.xml.stream.XMLStreamReader" />
	<method signature="java.lang.String getPITarget()" class="javax.xml.stream.XMLStreamReader" />
	<method signature="javax.xml.namespace.QName getAttributeName(int)" class="javax.xml.stream.XMLStreamReader" />
	<method signature="boolean isStandalone()" class="javax.xml.stream.XMLStreamReader" />
	<method signature="int getTextCharacters(int,char[],int,int)" class="javax.xml.stream.XMLStreamReader" />
	<method signature="java.lang.String getAttributeLocalName(int)" class="javax.xml.stream.XMLStreamReader" />
	<method signature="boolean isCharacters()" class="javax.xml.stream.XMLStreamReader" />
	<method signature="java.lang.String getAttributeNamespace(int)" class="javax.xml.stream.XMLStreamReader" />
	<method signature="int getNamespaceCount()" class="javax.xml.stream.XMLStreamReader" />
	<method signature="java.lang.String getCharacterEncodingScheme()" class="javax.xml.stream.XMLStreamReader" />
	<method signature="boolean isWhiteSpace()" class="javax.xml.stream.XMLStreamReader" />
	<method signature="void require(int,java.lang.String,java.lang.String)" class="javax.xml.stream.XMLStreamReader" />
	<method signature="int next()" class="javax.xml.stream.XMLStreamReader" />
	<method signature="java.lang.String getLocalName()" class="javax.xml.stream.XMLStreamReader" />
	<method signature="java.lang.String getNamespaceURI()" class="javax.xml.stream.XMLStreamReader" />
	<method signature="boolean isAttributeSpecified(int)" class="javax.xml.stream.XMLStreamReader" />
	<method signature="javax.xml.namespace.QName getName()" class="javax.xml.stream.XMLStreamReader" />
	<method signature="boolean hasName()" class="javax.xml.stream.XMLStreamReader" />
	<method signature="java.lang.Object getProperty(java.lang.String)" class="javax.xml.stream.XMLStreamReader" />
	<class name="org.jfree.chart.plot.Crosshair" />
	<method signature="double getValue()" class="org.jfree.chart.plot.Crosshair" />
	<method signature="boolean isLabelOutlineVisible()" class="org.jfree.chart.plot.Crosshair" />
	<method signature="java.awt.Paint getLabelBackgroundPaint()" class="org.jfree.chart.plot.Crosshair" />
	<method signature="void setValue(double)" class="org.jfree.chart.plot.Crosshair" />
	<method signature="boolean isLabelVisible()" class="org.jfree.chart.plot.Crosshair" />
	<method signature="void setPaint(java.awt.Paint)" class="org.jfree.chart.plot.Crosshair" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.plot.Crosshair" />
	<method signature="void &lt;init&gt;(double)" class="org.jfree.chart.plot.Crosshair" />
	<method signature="double getLabelXOffset()" class="org.jfree.chart.plot.Crosshair" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.plot.Crosshair" />
	<method signature="void setLabelXOffset(double)" class="org.jfree.chart.plot.Crosshair" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.plot.Crosshair" />
	<method signature="void setVisible(boolean)" class="org.jfree.chart.plot.Crosshair" />
	<method signature="boolean isVisible()" class="org.jfree.chart.plot.Crosshair" />
	<method signature="java.awt.Stroke getLabelOutlineStroke()" class="org.jfree.chart.plot.Crosshair" />
	<method signature="void removePropertyChangeListener(java.beans.PropertyChangeListener)" class="org.jfree.chart.plot.Crosshair" />
	<method signature="org.jfree.chart.labels.CrosshairLabelGenerator getLabelGenerator()" class="org.jfree.chart.plot.Crosshair" />
	<method signature="void setLabelOutlineVisible(boolean)" class="org.jfree.chart.plot.Crosshair" />
	<method signature="int hashCode()" class="org.jfree.chart.plot.Crosshair" />
	<method signature="java.awt.Paint getLabelPaint()" class="org.jfree.chart.plot.Crosshair" />
	<method signature="void setLabelGenerator(org.jfree.chart.labels.CrosshairLabelGenerator)" class="org.jfree.chart.plot.Crosshair" />
	<method signature="java.awt.Paint getPaint()" class="org.jfree.chart.plot.Crosshair" />
	<method signature="void setLabelOutlinePaint(java.awt.Paint)" class="org.jfree.chart.plot.Crosshair" />
	<method signature="void setLabelPaint(java.awt.Paint)" class="org.jfree.chart.plot.Crosshair" />
	<method signature="void setLabelFont(java.awt.Font)" class="org.jfree.chart.plot.Crosshair" />
	<method signature="void setLabelVisible(boolean)" class="org.jfree.chart.plot.Crosshair" />
	<method signature="org.jfree.ui.RectangleAnchor getLabelAnchor()" class="org.jfree.chart.plot.Crosshair" />
	<method signature="void setLabelOutlineStroke(java.awt.Stroke)" class="org.jfree.chart.plot.Crosshair" />
	<method signature="void addPropertyChangeListener(java.beans.PropertyChangeListener)" class="org.jfree.chart.plot.Crosshair" />
	<method signature="void &lt;init&gt;(double,java.awt.Paint,java.awt.Stroke)" class="org.jfree.chart.plot.Crosshair" />
	<method signature="double getLabelYOffset()" class="org.jfree.chart.plot.Crosshair" />
	<method signature="void setLabelYOffset(double)" class="org.jfree.chart.plot.Crosshair" />
	<method signature="java.awt.Font getLabelFont()" class="org.jfree.chart.plot.Crosshair" />
	<method signature="void setLabelAnchor(org.jfree.ui.RectangleAnchor)" class="org.jfree.chart.plot.Crosshair" />
	<method signature="java.awt.Paint getLabelOutlinePaint()" class="org.jfree.chart.plot.Crosshair" />
	<method signature="void setStroke(java.awt.Stroke)" class="org.jfree.chart.plot.Crosshair" />
	<method signature="void setLabelBackgroundPaint(java.awt.Paint)" class="org.jfree.chart.plot.Crosshair" />
	<method signature="java.awt.Stroke getStroke()" class="org.jfree.chart.plot.Crosshair" />
	<class name="org.jfree.chart.axis.SymbolAxis" />
	<method signature="java.awt.Paint getGridBandAlternatePaint()" class="org.jfree.chart.axis.SymbolAxis" />
	<method signature="java.lang.String[] getSymbols()" class="org.jfree.chart.axis.SymbolAxis" />
	<method signature="java.util.List refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.axis.SymbolAxis" />
	<method signature="java.lang.String valueToString(double)" class="org.jfree.chart.axis.SymbolAxis" />
	<method signature="java.awt.Paint getGridBandPaint()" class="org.jfree.chart.axis.SymbolAxis" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.axis.SymbolAxis" />
	<method signature="void setGridBandPaint(java.awt.Paint)" class="org.jfree.chart.axis.SymbolAxis" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String[])" class="org.jfree.chart.axis.SymbolAxis" />
	<method signature="void setGridBandAlternatePaint(java.awt.Paint)" class="org.jfree.chart.axis.SymbolAxis" />
	<method signature="org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.axis.SymbolAxis" />
	<method signature="void setGridBandsVisible(boolean)" class="org.jfree.chart.axis.SymbolAxis" />
	<method signature="boolean isGridBandsVisible()" class="org.jfree.chart.axis.SymbolAxis" />
	<class name="org.jfree.data.xy.MatrixSeriesCollection" />
	<method signature="java.lang.Number getZ(int,int)" class="org.jfree.data.xy.MatrixSeriesCollection" />
	<method signature="int hashCode()" class="org.jfree.data.xy.MatrixSeriesCollection" />
	<method signature="void removeSeries(org.jfree.data.xy.MatrixSeries)" class="org.jfree.data.xy.MatrixSeriesCollection" />
	<method signature="java.lang.Number getX(int,int)" class="org.jfree.data.xy.MatrixSeriesCollection" />
	<method signature="java.lang.Number getY(int,int)" class="org.jfree.data.xy.MatrixSeriesCollection" />
	<method signature="void removeSeries(int)" class="org.jfree.data.xy.MatrixSeriesCollection" />
	<method signature="int getSeriesCount()" class="org.jfree.data.xy.MatrixSeriesCollection" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.xy.MatrixSeriesCollection" />
	<method signature="org.jfree.data.xy.MatrixSeries getSeries(int)" class="org.jfree.data.xy.MatrixSeriesCollection" />
	<method signature="java.lang.Comparable getSeriesKey(int)" class="org.jfree.data.xy.MatrixSeriesCollection" />
	<method signature="void addSeries(org.jfree.data.xy.MatrixSeries)" class="org.jfree.data.xy.MatrixSeriesCollection" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.xy.MatrixSeriesCollection" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.xy.MatrixSeriesCollection" />
	<method signature="void &lt;init&gt;(org.jfree.data.xy.MatrixSeries)" class="org.jfree.data.xy.MatrixSeriesCollection" />
	<method signature="int getItemCount(int)" class="org.jfree.data.xy.MatrixSeriesCollection" />
	<method signature="void removeAllSeries()" class="org.jfree.data.xy.MatrixSeriesCollection" />
	<class name="org.jfree.data.general.Dataset" />
	<method signature="org.jfree.data.general.DatasetGroup getGroup()" class="org.jfree.data.general.Dataset" />
	<method signature="void removeChangeListener(org.jfree.data.general.DatasetChangeListener)" class="org.jfree.data.general.Dataset" />
	<method signature="void setGroup(org.jfree.data.general.DatasetGroup)" class="org.jfree.data.general.Dataset" />
	<method signature="void addChangeListener(org.jfree.data.general.DatasetChangeListener)" class="org.jfree.data.general.Dataset" />
	<class name="org.jfree.chart.axis.CategoryTick" />
	<method signature="org.jfree.text.TextBlock getLabel()" class="org.jfree.chart.axis.CategoryTick" />
	<method signature="int hashCode()" class="org.jfree.chart.axis.CategoryTick" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.axis.CategoryTick" />
	<method signature="void &lt;init&gt;(java.lang.Comparable,org.jfree.text.TextBlock,org.jfree.text.TextBlockAnchor,org.jfree.ui.TextAnchor,double)" class="org.jfree.chart.axis.CategoryTick" />
	<method signature="java.lang.Comparable getCategory()" class="org.jfree.chart.axis.CategoryTick" />
	<method signature="org.jfree.text.TextBlockAnchor getLabelAnchor()" class="org.jfree.chart.axis.CategoryTick" />
	<class name="org.apache.commons.lang3.text.translate.LookupTranslator" />
	<method signature="void &lt;init&gt;(java.lang.CharSequence[][])" class="org.apache.commons.lang3.text.translate.LookupTranslator" />
	<method signature="int translate(java.lang.CharSequence,int,java.io.Writer)" class="org.apache.commons.lang3.text.translate.LookupTranslator" />
	<class name="org.unbescape.java.JavaEscapeLevel" />
	<method signature="int getEscapeLevel()" class="org.unbescape.java.JavaEscapeLevel" />
	<method signature="org.unbescape.java.JavaEscapeLevel[] values()" class="org.unbescape.java.JavaEscapeLevel" />
	<method signature="org.unbescape.java.JavaEscapeLevel forLevel(int)" class="org.unbescape.java.JavaEscapeLevel" />
	<method signature="org.unbescape.java.JavaEscapeLevel valueOf(java.lang.String)" class="org.unbescape.java.JavaEscapeLevel" />
	<class name="org.w3c.dom.stylesheets.StyleSheet" />
	<method signature="void setDisabled(boolean)" class="org.w3c.dom.stylesheets.StyleSheet" />
	<method signature="java.lang.String getTitle()" class="org.w3c.dom.stylesheets.StyleSheet" />
	<method signature="org.w3c.dom.stylesheets.MediaList getMedia()" class="org.w3c.dom.stylesheets.StyleSheet" />
	<method signature="org.w3c.dom.stylesheets.StyleSheet getParentStyleSheet()" class="org.w3c.dom.stylesheets.StyleSheet" />
	<method signature="java.lang.String getHref()" class="org.w3c.dom.stylesheets.StyleSheet" />
	<method signature="java.lang.String getType()" class="org.w3c.dom.stylesheets.StyleSheet" />
	<method signature="org.w3c.dom.Node getOwnerNode()" class="org.w3c.dom.stylesheets.StyleSheet" />
	<method signature="boolean getDisabled()" class="org.w3c.dom.stylesheets.StyleSheet" />
	<class name="org.apache.html.dom.HTMLIFrameElementImpl" />
	<method signature="void setAlign(java.lang.String)" class="org.apache.html.dom.HTMLIFrameElementImpl" />
	<method signature="void setMarginWidth(java.lang.String)" class="org.apache.html.dom.HTMLIFrameElementImpl" />
	<method signature="java.lang.String getName()" class="org.apache.html.dom.HTMLIFrameElementImpl" />
	<method signature="java.lang.String getSrc()" class="org.apache.html.dom.HTMLIFrameElementImpl" />
	<method signature="void setFrameBorder(java.lang.String)" class="org.apache.html.dom.HTMLIFrameElementImpl" />
	<method signature="java.lang.String getMarginHeight()" class="org.apache.html.dom.HTMLIFrameElementImpl" />
	<method signature="java.lang.String getScrolling()" class="org.apache.html.dom.HTMLIFrameElementImpl" />
	<method signature="java.lang.String getWidth()" class="org.apache.html.dom.HTMLIFrameElementImpl" />
	<method signature="java.lang.String getAlign()" class="org.apache.html.dom.HTMLIFrameElementImpl" />
	<method signature="void setMarginHeight(java.lang.String)" class="org.apache.html.dom.HTMLIFrameElementImpl" />
	<method signature="java.lang.String getLongDesc()" class="org.apache.html.dom.HTMLIFrameElementImpl" />
	<method signature="void setScrolling(java.lang.String)" class="org.apache.html.dom.HTMLIFrameElementImpl" />
	<method signature="java.lang.String getHeight()" class="org.apache.html.dom.HTMLIFrameElementImpl" />
	<method signature="void setName(java.lang.String)" class="org.apache.html.dom.HTMLIFrameElementImpl" />
	<method signature="void setSrc(java.lang.String)" class="org.apache.html.dom.HTMLIFrameElementImpl" />
	<method signature="void setHeight(java.lang.String)" class="org.apache.html.dom.HTMLIFrameElementImpl" />
	<method signature="java.lang.String getMarginWidth()" class="org.apache.html.dom.HTMLIFrameElementImpl" />
	<method signature="void setWidth(java.lang.String)" class="org.apache.html.dom.HTMLIFrameElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLIFrameElementImpl" />
	<method signature="java.lang.String getFrameBorder()" class="org.apache.html.dom.HTMLIFrameElementImpl" />
	<method signature="void setLongDesc(java.lang.String)" class="org.apache.html.dom.HTMLIFrameElementImpl" />
	<class name="com.swabunga.spell.engine.GenericTransformator" />
	<method signature="void &lt;init&gt;(java.io.File)" class="com.swabunga.spell.engine.GenericTransformator" />
	<method signature="java.lang.String transform(java.lang.String)" class="com.swabunga.spell.engine.GenericTransformator" />
	<class name="org.apache.xerces.parsers.CachingParserPool$SynchronizedGrammarPool" />
	<method signature="void cacheGrammars(java.lang.String,org.apache.xerces.xni.grammars.Grammar[])" class="org.apache.xerces.parsers.CachingParserPool$SynchronizedGrammarPool" />
	<method signature="void lockPool()" class="org.apache.xerces.parsers.CachingParserPool$SynchronizedGrammarPool" />
	<method signature="void clear()" class="org.apache.xerces.parsers.CachingParserPool$SynchronizedGrammarPool" />
	<method signature="org.apache.xerces.xni.grammars.Grammar retrieveGrammar(org.apache.xerces.xni.grammars.XMLGrammarDescription)" class="org.apache.xerces.parsers.CachingParserPool$SynchronizedGrammarPool" />
	<method signature="void &lt;init&gt;(org.apache.xerces.xni.grammars.XMLGrammarPool)" class="org.apache.xerces.parsers.CachingParserPool$SynchronizedGrammarPool" />
	<method signature="void unlockPool()" class="org.apache.xerces.parsers.CachingParserPool$SynchronizedGrammarPool" />
	<method signature="org.apache.xerces.xni.grammars.Grammar[] retrieveInitialGrammarSet(java.lang.String)" class="org.apache.xerces.parsers.CachingParserPool$SynchronizedGrammarPool" />
	<class name="freemarker.ext.beans.ResourceBundleModel" />
	<method signature="int size()" class="freemarker.ext.beans.ResourceBundleModel" />
	<method signature="boolean isEmpty()" class="freemarker.ext.beans.ResourceBundleModel" />
	<method signature="java.lang.String format(java.lang.String,java.lang.Object[])" class="freemarker.ext.beans.ResourceBundleModel" />
	<method signature="void &lt;init&gt;(java.util.ResourceBundle,freemarker.ext.beans.BeansWrapper)" class="freemarker.ext.beans.ResourceBundleModel" />
	<method signature="java.lang.Object exec(java.util.List)" class="freemarker.ext.beans.ResourceBundleModel" />
	<method signature="java.util.ResourceBundle getBundle()" class="freemarker.ext.beans.ResourceBundleModel" />
	<class name="org.apache.wml.dom.WMLAccessElementImpl" />
	<method signature="void setDomain(java.lang.String)" class="org.apache.wml.dom.WMLAccessElementImpl" />
	<method signature="java.lang.String getDomain()" class="org.apache.wml.dom.WMLAccessElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.wml.dom.WMLDocumentImpl,java.lang.String)" class="org.apache.wml.dom.WMLAccessElementImpl" />
	<method signature="java.lang.String getId()" class="org.apache.wml.dom.WMLAccessElementImpl" />
	<method signature="java.lang.String getClassName()" class="org.apache.wml.dom.WMLAccessElementImpl" />
	<method signature="java.lang.String getPath()" class="org.apache.wml.dom.WMLAccessElementImpl" />
	<method signature="void setClassName(java.lang.String)" class="org.apache.wml.dom.WMLAccessElementImpl" />
	<method signature="void setId(java.lang.String)" class="org.apache.wml.dom.WMLAccessElementImpl" />
	<method signature="void setPath(java.lang.String)" class="org.apache.wml.dom.WMLAccessElementImpl" />
	<class name="org.jfree.chart.event.ChartChangeEventType" />
	<method signature="int hashCode()" class="org.jfree.chart.event.ChartChangeEventType" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.event.ChartChangeEventType" />
	<method signature="java.lang.String toString()" class="org.jfree.chart.event.ChartChangeEventType" />
	<class name="org.w3c.dom.DOMErrorHandler" />
	<method signature="boolean handleError(org.w3c.dom.DOMError)" class="org.w3c.dom.DOMErrorHandler" />
	<class name="org.jfree.base.config.HierarchicalConfiguration" />
	<method signature="void setConfigProperty(java.lang.String,java.lang.String)" class="org.jfree.base.config.HierarchicalConfiguration" />
	<method signature="java.lang.String getConfigProperty(java.lang.String)" class="org.jfree.base.config.HierarchicalConfiguration" />
	<method signature="boolean isLocallyDefined(java.lang.String)" class="org.jfree.base.config.HierarchicalConfiguration" />
	<method signature="java.lang.Object clone()" class="org.jfree.base.config.HierarchicalConfiguration" />
	<method signature="java.lang.String getConfigProperty(java.lang.String,java.lang.String)" class="org.jfree.base.config.HierarchicalConfiguration" />
	<method signature="void &lt;init&gt;()" class="org.jfree.base.config.HierarchicalConfiguration" />
	<method signature="void &lt;init&gt;(org.jfree.util.Configuration)" class="org.jfree.base.config.HierarchicalConfiguration" />
	<method signature="java.util.Enumeration getConfigProperties()" class="org.jfree.base.config.HierarchicalConfiguration" />
	<method signature="java.util.Iterator findPropertyKeys(java.lang.String)" class="org.jfree.base.config.HierarchicalConfiguration" />
	<method signature="void insertConfiguration(org.jfree.base.config.HierarchicalConfiguration)" class="org.jfree.base.config.HierarchicalConfiguration" />
	<class name="org.apache.html.dom.HTMLMetaElementImpl" />
	<method signature="java.lang.String getName()" class="org.apache.html.dom.HTMLMetaElementImpl" />
	<method signature="java.lang.String getScheme()" class="org.apache.html.dom.HTMLMetaElementImpl" />
	<method signature="void setHttpEquiv(java.lang.String)" class="org.apache.html.dom.HTMLMetaElementImpl" />
	<method signature="void setContent(java.lang.String)" class="org.apache.html.dom.HTMLMetaElementImpl" />
	<method signature="java.lang.String getContent()" class="org.apache.html.dom.HTMLMetaElementImpl" />
	<method signature="void setName(java.lang.String)" class="org.apache.html.dom.HTMLMetaElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLMetaElementImpl" />
	<method signature="void setScheme(java.lang.String)" class="org.apache.html.dom.HTMLMetaElementImpl" />
	<method signature="java.lang.String getHttpEquiv()" class="org.apache.html.dom.HTMLMetaElementImpl" />
	<class name="org.apache.xerces.impl.xs.XSDDescription" />
	<method signature="void setEnclosingElementName(org.apache.xerces.xni.QName)" class="org.apache.xerces.impl.xs.XSDDescription" />
	<method signature="int hashCode()" class="org.apache.xerces.impl.xs.XSDDescription" />
	<method signature="void setTriggeringComponent(org.apache.xerces.xni.QName)" class="org.apache.xerces.impl.xs.XSDDescription" />
	<method signature="void reset()" class="org.apache.xerces.impl.xs.XSDDescription" />
	<method signature="org.apache.xerces.impl.xs.XSDDescription makeClone()" class="org.apache.xerces.impl.xs.XSDDescription" />
	<method signature="boolean fromInstance()" class="org.apache.xerces.impl.xs.XSDDescription" />
	<method signature="void setContextType(short)" class="org.apache.xerces.impl.xs.XSDDescription" />
	<method signature="void setTargetNamespace(java.lang.String)" class="org.apache.xerces.impl.xs.XSDDescription" />
	<method signature="java.lang.String[] getLocationHints()" class="org.apache.xerces.impl.xs.XSDDescription" />
	<method signature="org.apache.xerces.xni.QName getEnclosingElementName()" class="org.apache.xerces.impl.xs.XSDDescription" />
	<method signature="java.lang.String getGrammarType()" class="org.apache.xerces.impl.xs.XSDDescription" />
	<method signature="org.apache.xerces.xni.QName getTriggeringComponent()" class="org.apache.xerces.impl.xs.XSDDescription" />
	<method signature="boolean equals(java.lang.Object)" class="org.apache.xerces.impl.xs.XSDDescription" />
	<method signature="void setAttributes(org.apache.xerces.xni.XMLAttributes)" class="org.apache.xerces.impl.xs.XSDDescription" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xs.XSDDescription" />
	<method signature="java.lang.String getTargetNamespace()" class="org.apache.xerces.impl.xs.XSDDescription" />
	<method signature="short getContextType()" class="org.apache.xerces.impl.xs.XSDDescription" />
	<method signature="org.apache.xerces.xni.XMLAttributes getAttributes()" class="org.apache.xerces.impl.xs.XSDDescription" />
	<method signature="void setLocationHints(java.lang.String[])" class="org.apache.xerces.impl.xs.XSDDescription" />
	<class name="org.jfree.chart.panel.AbstractOverlay" />
	<method signature="void fireOverlayChanged()" class="org.jfree.chart.panel.AbstractOverlay" />
	<method signature="void removeChangeListener(org.jfree.chart.event.OverlayChangeListener)" class="org.jfree.chart.panel.AbstractOverlay" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.panel.AbstractOverlay" />
	<method signature="void addChangeListener(org.jfree.chart.event.OverlayChangeListener)" class="org.jfree.chart.panel.AbstractOverlay" />
	<class name="freemarker.cache.SoftCacheStorage" />
	<method signature="void clear()" class="freemarker.cache.SoftCacheStorage" />
	<method signature="void put(java.lang.Object,java.lang.Object)" class="freemarker.cache.SoftCacheStorage" />
	<method signature="void &lt;init&gt;()" class="freemarker.cache.SoftCacheStorage" />
	<method signature="boolean isConcurrent()" class="freemarker.cache.SoftCacheStorage" />
	<method signature="void &lt;init&gt;(java.util.Map)" class="freemarker.cache.SoftCacheStorage" />
	<method signature="java.lang.Object get(java.lang.Object)" class="freemarker.cache.SoftCacheStorage" />
	<method signature="void remove(java.lang.Object)" class="freemarker.cache.SoftCacheStorage" />
	<class name="org.jdom2.xpath.XPathBuilder" />
	<method signature="java.lang.String getExpression()" class="org.jdom2.xpath.XPathBuilder" />
	<method signature="java.lang.Object getVariable(java.lang.String)" class="org.jdom2.xpath.XPathBuilder" />
	<method signature="void &lt;init&gt;(java.lang.String,org.jdom2.filter.Filter)" class="org.jdom2.xpath.XPathBuilder" />
	<method signature="boolean setNamespaces(java.util.Collection)" class="org.jdom2.xpath.XPathBuilder" />
	<method signature="org.jdom2.Namespace getNamespace(java.lang.String)" class="org.jdom2.xpath.XPathBuilder" />
	<method signature="boolean setVariable(java.lang.String,java.lang.Object)" class="org.jdom2.xpath.XPathBuilder" />
	<method signature="boolean setNamespace(java.lang.String,java.lang.String)" class="org.jdom2.xpath.XPathBuilder" />
	<method signature="boolean setNamespace(org.jdom2.Namespace)" class="org.jdom2.xpath.XPathBuilder" />
	<method signature="org.jdom2.filter.Filter getFilter()" class="org.jdom2.xpath.XPathBuilder" />
	<method signature="org.jdom2.xpath.XPathExpression compileWith(org.jdom2.xpath.XPathFactory)" class="org.jdom2.xpath.XPathBuilder" />
	<class name="org.jfree.chart.renderer.xy.XYDotRenderer" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)" class="org.jfree.chart.renderer.xy.XYDotRenderer" />
	<method signature="void setLegendShape(java.awt.Shape)" class="org.jfree.chart.renderer.xy.XYDotRenderer" />
	<method signature="void setDotWidth(int)" class="org.jfree.chart.renderer.xy.XYDotRenderer" />
	<method signature="java.awt.Shape getLegendShape()" class="org.jfree.chart.renderer.xy.XYDotRenderer" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.renderer.xy.XYDotRenderer" />
	<method signature="org.jfree.chart.LegendItem getLegendItem(int,int)" class="org.jfree.chart.renderer.xy.XYDotRenderer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.xy.XYDotRenderer" />
	<method signature="int getDotHeight()" class="org.jfree.chart.renderer.xy.XYDotRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.xy.XYDotRenderer" />
	<method signature="int getDotWidth()" class="org.jfree.chart.renderer.xy.XYDotRenderer" />
	<method signature="void setDotHeight(int)" class="org.jfree.chart.renderer.xy.XYDotRenderer" />
	<class name="org.w3c.dom.ls.LSParser" />
	<method signature="boolean getAsync()" class="org.w3c.dom.ls.LSParser" />
	<method signature="org.w3c.dom.Document parseURI(java.lang.String)" class="org.w3c.dom.ls.LSParser" />
	<method signature="org.w3c.dom.ls.LSParserFilter getFilter()" class="org.w3c.dom.ls.LSParser" />
	<method signature="org.w3c.dom.DOMConfiguration getDomConfig()" class="org.w3c.dom.ls.LSParser" />
	<method signature="org.w3c.dom.Node parseWithContext(org.w3c.dom.ls.LSInput,org.w3c.dom.Node,short)" class="org.w3c.dom.ls.LSParser" />
	<method signature="void setFilter(org.w3c.dom.ls.LSParserFilter)" class="org.w3c.dom.ls.LSParser" />
	<method signature="org.w3c.dom.Document parse(org.w3c.dom.ls.LSInput)" class="org.w3c.dom.ls.LSParser" />
	<method signature="boolean getBusy()" class="org.w3c.dom.ls.LSParser" />
	<method signature="void abort()" class="org.w3c.dom.ls.LSParser" />
	<class name="com.google.zxing.StringsResourceTranslator" />
	<method signature="void main(java.lang.String[])" class="com.google.zxing.StringsResourceTranslator" />
	<class name="org.unbescape.css.CssStringEscapeType" />
	<method signature="boolean getUseBackslashEscapes()" class="org.unbescape.css.CssStringEscapeType" />
	<method signature="org.unbescape.css.CssStringEscapeType[] values()" class="org.unbescape.css.CssStringEscapeType" />
	<method signature="boolean getUseCompactHexa()" class="org.unbescape.css.CssStringEscapeType" />
	<method signature="org.unbescape.css.CssStringEscapeType valueOf(java.lang.String)" class="org.unbescape.css.CssStringEscapeType" />
	<class name="org.apache.xerces.xs.PSVIProvider" />
	<method signature="org.apache.xerces.xs.ElementPSVI getElementPSVI()" class="org.apache.xerces.xs.PSVIProvider" />
	<method signature="org.apache.xerces.xs.AttributePSVI getAttributePSVI(int)" class="org.apache.xerces.xs.PSVIProvider" />
	<method signature="org.apache.xerces.xs.AttributePSVI getAttributePSVIByName(java.lang.String,java.lang.String)" class="org.apache.xerces.xs.PSVIProvider" />
	<class name="org.apache.wml.dom.WMLAElementImpl" />
	<method signature="void setHref(java.lang.String)" class="org.apache.wml.dom.WMLAElementImpl" />
	<method signature="java.lang.String getTitle()" class="org.apache.wml.dom.WMLAElementImpl" />
	<method signature="java.lang.String getXmlLang()" class="org.apache.wml.dom.WMLAElementImpl" />
	<method signature="java.lang.String getHref()" class="org.apache.wml.dom.WMLAElementImpl" />
	<method signature="void setXmlLang(java.lang.String)" class="org.apache.wml.dom.WMLAElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.wml.dom.WMLDocumentImpl,java.lang.String)" class="org.apache.wml.dom.WMLAElementImpl" />
	<method signature="java.lang.String getId()" class="org.apache.wml.dom.WMLAElementImpl" />
	<method signature="java.lang.String getClassName()" class="org.apache.wml.dom.WMLAElementImpl" />
	<method signature="void setClassName(java.lang.String)" class="org.apache.wml.dom.WMLAElementImpl" />
	<method signature="void setTitle(java.lang.String)" class="org.apache.wml.dom.WMLAElementImpl" />
	<method signature="void setId(java.lang.String)" class="org.apache.wml.dom.WMLAElementImpl" />
	<class name="org.jdom2.input.sax.SAXBuilderEngine" />
	<method signature="boolean getIgnoringElementContentWhitespace()" class="org.jdom2.input.sax.SAXBuilderEngine" />
	<method signature="boolean getIgnoringBoundaryWhitespace()" class="org.jdom2.input.sax.SAXBuilderEngine" />
	<method signature="org.xml.sax.ErrorHandler getErrorHandler()" class="org.jdom2.input.sax.SAXBuilderEngine" />
	<method signature="org.jdom2.Document build(java.io.InputStream,java.lang.String)" class="org.jdom2.input.sax.SAXBuilderEngine" />
	<method signature="org.xml.sax.DTDHandler getDTDHandler()" class="org.jdom2.input.sax.SAXBuilderEngine" />
	<method signature="org.xml.sax.EntityResolver getEntityResolver()" class="org.jdom2.input.sax.SAXBuilderEngine" />
	<method signature="boolean getExpandEntities()" class="org.jdom2.input.sax.SAXBuilderEngine" />
	<method signature="org.jdom2.Document build(java.lang.String)" class="org.jdom2.input.sax.SAXBuilderEngine" />
	<method signature="boolean isValidating()" class="org.jdom2.input.sax.SAXBuilderEngine" />
	<method signature="org.jdom2.Document build(java.io.File)" class="org.jdom2.input.sax.SAXBuilderEngine" />
	<method signature="org.jdom2.Document build(java.io.Reader)" class="org.jdom2.input.sax.SAXBuilderEngine" />
	<method signature="org.jdom2.Document build(org.xml.sax.InputSource)" class="org.jdom2.input.sax.SAXBuilderEngine" />
	<method signature="org.jdom2.Document build(java.net.URL)" class="org.jdom2.input.sax.SAXBuilderEngine" />
	<method signature="void &lt;init&gt;(org.xml.sax.XMLReader,org.jdom2.input.sax.SAXHandler,boolean)" class="org.jdom2.input.sax.SAXBuilderEngine" />
	<method signature="org.jdom2.Document build(java.io.Reader,java.lang.String)" class="org.jdom2.input.sax.SAXBuilderEngine" />
	<method signature="org.jdom2.JDOMFactory getJDOMFactory()" class="org.jdom2.input.sax.SAXBuilderEngine" />
	<method signature="org.jdom2.Document build(java.io.InputStream)" class="org.jdom2.input.sax.SAXBuilderEngine" />
	<class name="org.apache.commons.lang3.reflect.ConstructorUtils" />
	<method signature="java.lang.Object invokeConstructor(java.lang.Class,java.lang.Object[],java.lang.Class[])" class="org.apache.commons.lang3.reflect.ConstructorUtils" />
	<method signature="java.lang.Object invokeExactConstructor(java.lang.Class,java.lang.Object[])" class="org.apache.commons.lang3.reflect.ConstructorUtils" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.reflect.ConstructorUtils" />
	<method signature="java.lang.reflect.Constructor getAccessibleConstructor(java.lang.reflect.Constructor)" class="org.apache.commons.lang3.reflect.ConstructorUtils" />
	<method signature="java.lang.Object invokeExactConstructor(java.lang.Class,java.lang.Object[],java.lang.Class[])" class="org.apache.commons.lang3.reflect.ConstructorUtils" />
	<method signature="java.lang.Object invokeConstructor(java.lang.Class,java.lang.Object[])" class="org.apache.commons.lang3.reflect.ConstructorUtils" />
	<method signature="java.lang.reflect.Constructor getMatchingAccessibleConstructor(java.lang.Class,java.lang.Class[])" class="org.apache.commons.lang3.reflect.ConstructorUtils" />
	<method signature="java.lang.reflect.Constructor getAccessibleConstructor(java.lang.Class,java.lang.Class[])" class="org.apache.commons.lang3.reflect.ConstructorUtils" />
	<class name="org.jfree.data.time.TimePeriodFormatException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.data.time.TimePeriodFormatException" />
	<class name="org.apache.xerces.dom.DeferredDocumentTypeImpl" />
	<method signature="int getNodeIndex()" class="org.apache.xerces.dom.DeferredDocumentTypeImpl" />
	<class name="org.xml.sax.helpers.AttributeListImpl" />
	<method signature="java.lang.String getValue(int)" class="org.xml.sax.helpers.AttributeListImpl" />
	<method signature="java.lang.String getType(java.lang.String)" class="org.xml.sax.helpers.AttributeListImpl" />
	<method signature="java.lang.String getType(int)" class="org.xml.sax.helpers.AttributeListImpl" />
	<method signature="java.lang.String getValue(java.lang.String)" class="org.xml.sax.helpers.AttributeListImpl" />
	<method signature="void removeAttribute(java.lang.String)" class="org.xml.sax.helpers.AttributeListImpl" />
	<method signature="int getLength()" class="org.xml.sax.helpers.AttributeListImpl" />
	<method signature="void addAttribute(java.lang.String,java.lang.String,java.lang.String)" class="org.xml.sax.helpers.AttributeListImpl" />
	<method signature="void clear()" class="org.xml.sax.helpers.AttributeListImpl" />
	<method signature="java.lang.String getName(int)" class="org.xml.sax.helpers.AttributeListImpl" />
	<method signature="void &lt;init&gt;()" class="org.xml.sax.helpers.AttributeListImpl" />
	<method signature="void setAttributeList(org.xml.sax.AttributeList)" class="org.xml.sax.helpers.AttributeListImpl" />
	<method signature="void &lt;init&gt;(org.xml.sax.AttributeList)" class="org.xml.sax.helpers.AttributeListImpl" />
	<class name="org.apache.xerces.impl.dv.XSSimpleType" />
	<method signature="java.lang.Object validate(java.lang.String,org.apache.xerces.impl.dv.ValidationContext,org.apache.xerces.impl.dv.ValidatedInfo)" class="org.apache.xerces.impl.dv.XSSimpleType" />
	<method signature="void validate(org.apache.xerces.impl.dv.ValidationContext,org.apache.xerces.impl.dv.ValidatedInfo)" class="org.apache.xerces.impl.dv.XSSimpleType" />
	<method signature="void applyFacets(org.apache.xerces.impl.dv.XSFacets,short,short,org.apache.xerces.impl.dv.ValidationContext)" class="org.apache.xerces.impl.dv.XSSimpleType" />
	<method signature="boolean isEqual(java.lang.Object,java.lang.Object)" class="org.apache.xerces.impl.dv.XSSimpleType" />
	<method signature="boolean isIDType()" class="org.apache.xerces.impl.dv.XSSimpleType" />
	<method signature="short getWhitespace()" class="org.apache.xerces.impl.dv.XSSimpleType" />
	<method signature="java.lang.Object validate(java.lang.Object,org.apache.xerces.impl.dv.ValidationContext,org.apache.xerces.impl.dv.ValidatedInfo)" class="org.apache.xerces.impl.dv.XSSimpleType" />
	<method signature="short getPrimitiveKind()" class="org.apache.xerces.impl.dv.XSSimpleType" />
	<class name="freemarker.core.TokenMgrError" />
	<method signature="void &lt;init&gt;(boolean,int,int,int,java.lang.String,char,int)" class="freemarker.core.TokenMgrError" />
	<method signature="void &lt;init&gt;()" class="freemarker.core.TokenMgrError" />
	<method signature="java.lang.String getMessage()" class="freemarker.core.TokenMgrError" />
	<method signature="void &lt;init&gt;(java.lang.String,int)" class="freemarker.core.TokenMgrError" />
	<class name="org.apache.xerces.xs.XSConstants" />
	<class name="org.jfree.data.statistics.BoxAndWhiskerXYDataset" />
	<method signature="java.lang.Number getMeanValue(int,int)" class="org.jfree.data.statistics.BoxAndWhiskerXYDataset" />
	<method signature="java.lang.Number getMinRegularValue(int,int)" class="org.jfree.data.statistics.BoxAndWhiskerXYDataset" />
	<method signature="java.lang.Number getQ3Value(int,int)" class="org.jfree.data.statistics.BoxAndWhiskerXYDataset" />
	<method signature="java.lang.Number getMaxRegularValue(int,int)" class="org.jfree.data.statistics.BoxAndWhiskerXYDataset" />
	<method signature="java.lang.Number getMedianValue(int,int)" class="org.jfree.data.statistics.BoxAndWhiskerXYDataset" />
	<method signature="java.lang.Number getMaxOutlier(int,int)" class="org.jfree.data.statistics.BoxAndWhiskerXYDataset" />
	<method signature="double getOutlierCoefficient()" class="org.jfree.data.statistics.BoxAndWhiskerXYDataset" />
	<method signature="java.lang.Number getMinOutlier(int,int)" class="org.jfree.data.statistics.BoxAndWhiskerXYDataset" />
	<method signature="double getFaroutCoefficient()" class="org.jfree.data.statistics.BoxAndWhiskerXYDataset" />
	<method signature="java.util.List getOutliers(int,int)" class="org.jfree.data.statistics.BoxAndWhiskerXYDataset" />
	<method signature="java.lang.Number getQ1Value(int,int)" class="org.jfree.data.statistics.BoxAndWhiskerXYDataset" />
	<class name="org.jfree.data.time.TimeSeries" />
	<method signature="void removeAgedItems(long,boolean)" class="org.jfree.data.time.TimeSeries" />
	<method signature="org.jfree.data.time.TimeSeries addAndOrUpdate(org.jfree.data.time.TimeSeries)" class="org.jfree.data.time.TimeSeries" />
	<method signature="void delete(org.jfree.data.time.RegularTimePeriod)" class="org.jfree.data.time.TimeSeries" />
	<method signature="double getMinY()" class="org.jfree.data.time.TimeSeries" />
	<method signature="long getMaximumItemAge()" class="org.jfree.data.time.TimeSeries" />
	<method signature="java.lang.String getDomainDescription()" class="org.jfree.data.time.TimeSeries" />
	<method signature="void delete(int,int,boolean)" class="org.jfree.data.time.TimeSeries" />
	<method signature="void &lt;init&gt;(java.lang.Comparable,java.lang.Class)" class="org.jfree.data.time.TimeSeries" />
	<method signature="void setMaximumItemCount(int)" class="org.jfree.data.time.TimeSeries" />
	<method signature="java.lang.Class getTimePeriodClass()" class="org.jfree.data.time.TimeSeries" />
	<method signature="void add(org.jfree.data.time.RegularTimePeriod,java.lang.Number)" class="org.jfree.data.time.TimeSeries" />
	<method signature="void &lt;init&gt;(java.lang.Comparable)" class="org.jfree.data.time.TimeSeries" />
	<method signature="void setMaximumItemAge(long)" class="org.jfree.data.time.TimeSeries" />
	<method signature="void delete(int,int)" class="org.jfree.data.time.TimeSeries" />
	<method signature="void setRangeDescription(java.lang.String)" class="org.jfree.data.time.TimeSeries" />
	<method signature="java.lang.Number getValue(int)" class="org.jfree.data.time.TimeSeries" />
	<method signature="java.util.Collection getTimePeriodsUniqueToOtherSeries(org.jfree.data.time.TimeSeries)" class="org.jfree.data.time.TimeSeries" />
	<method signature="int getMaximumItemCount()" class="org.jfree.data.time.TimeSeries" />
	<method signature="void removeAgedItems(boolean)" class="org.jfree.data.time.TimeSeries" />
	<method signature="java.lang.Number getValue(org.jfree.data.time.RegularTimePeriod)" class="org.jfree.data.time.TimeSeries" />
	<method signature="void add(org.jfree.data.time.RegularTimePeriod,double)" class="org.jfree.data.time.TimeSeries" />
	<method signature="void &lt;init&gt;(java.lang.Comparable,java.lang.String,java.lang.String)" class="org.jfree.data.time.TimeSeries" />
	<method signature="org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.RegularTimePeriod,java.lang.Number)" class="org.jfree.data.time.TimeSeries" />
	<method signature="void update(org.jfree.data.time.RegularTimePeriod,java.lang.Number)" class="org.jfree.data.time.TimeSeries" />
	<method signature="org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.RegularTimePeriod,double)" class="org.jfree.data.time.TimeSeries" />
	<method signature="java.util.List getItems()" class="org.jfree.data.time.TimeSeries" />
	<method signature="void setDomainDescription(java.lang.String)" class="org.jfree.data.time.TimeSeries" />
	<method signature="org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.TimeSeriesDataItem)" class="org.jfree.data.time.TimeSeries" />
	<method signature="void add(org.jfree.data.time.TimeSeriesDataItem)" class="org.jfree.data.time.TimeSeries" />
	<method signature="org.jfree.data.time.TimeSeriesDataItem getDataItem(org.jfree.data.time.RegularTimePeriod)" class="org.jfree.data.time.TimeSeries" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.time.TimeSeries" />
	<method signature="java.util.Collection getTimePeriods()" class="org.jfree.data.time.TimeSeries" />
	<method signature="void update(org.jfree.data.time.RegularTimePeriod,double)" class="org.jfree.data.time.TimeSeries" />
	<method signature="void clear()" class="org.jfree.data.time.TimeSeries" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.time.TimeSeries" />
	<method signature="org.jfree.data.time.TimeSeriesDataItem getDataItem(int)" class="org.jfree.data.time.TimeSeries" />
	<method signature="double getMaxY()" class="org.jfree.data.time.TimeSeries" />
	<method signature="int getIndex(org.jfree.data.time.RegularTimePeriod)" class="org.jfree.data.time.TimeSeries" />
	<method signature="org.jfree.data.time.RegularTimePeriod getTimePeriod(int)" class="org.jfree.data.time.TimeSeries" />
	<method signature="java.lang.String getRangeDescription()" class="org.jfree.data.time.TimeSeries" />
	<method signature="void add(org.jfree.data.time.RegularTimePeriod,double,boolean)" class="org.jfree.data.time.TimeSeries" />
	<method signature="void add(org.jfree.data.time.TimeSeriesDataItem,boolean)" class="org.jfree.data.time.TimeSeries" />
	<method signature="void add(org.jfree.data.time.RegularTimePeriod,java.lang.Number,boolean)" class="org.jfree.data.time.TimeSeries" />
	<method signature="void update(int,java.lang.Number)" class="org.jfree.data.time.TimeSeries" />
	<method signature="int hashCode()" class="org.jfree.data.time.TimeSeries" />
	<method signature="int getItemCount()" class="org.jfree.data.time.TimeSeries" />
	<method signature="void &lt;init&gt;(java.lang.Comparable,java.lang.String,java.lang.String,java.lang.Class)" class="org.jfree.data.time.TimeSeries" />
	<method signature="org.jfree.data.time.TimeSeries createCopy(int,int)" class="org.jfree.data.time.TimeSeries" />
	<method signature="org.jfree.data.time.RegularTimePeriod getNextTimePeriod()" class="org.jfree.data.time.TimeSeries" />
	<method signature="org.jfree.data.time.TimeSeries createCopy(org.jfree.data.time.RegularTimePeriod,org.jfree.data.time.RegularTimePeriod)" class="org.jfree.data.time.TimeSeries" />
	<class name="org.apache.xerces.util.DefaultErrorHandler" />
	<method signature="void error(java.lang.String,java.lang.String,org.apache.xerces.xni.parser.XMLParseException)" class="org.apache.xerces.util.DefaultErrorHandler" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.util.DefaultErrorHandler" />
	<method signature="void warning(java.lang.String,java.lang.String,org.apache.xerces.xni.parser.XMLParseException)" class="org.apache.xerces.util.DefaultErrorHandler" />
	<method signature="void fatalError(java.lang.String,java.lang.String,org.apache.xerces.xni.parser.XMLParseException)" class="org.apache.xerces.util.DefaultErrorHandler" />
	<method signature="void &lt;init&gt;(java.io.PrintWriter)" class="org.apache.xerces.util.DefaultErrorHandler" />
	<class name="com.google.zxing.common.detector.MathUtils" />
	<method signature="int round(float)" class="com.google.zxing.common.detector.MathUtils" />
	<method signature="float distance(float,float,float,float)" class="com.google.zxing.common.detector.MathUtils" />
	<method signature="float distance(int,int,int,int)" class="com.google.zxing.common.detector.MathUtils" />
	<class name="freemarker.template.utility.UndeclaredThrowableException" />
	<method signature="java.lang.Throwable getUndeclaredThrowable()" class="freemarker.template.utility.UndeclaredThrowableException" />
	<method signature="void &lt;init&gt;(java.lang.Throwable)" class="freemarker.template.utility.UndeclaredThrowableException" />
	<method signature="void printStackTrace(java.io.PrintWriter)" class="freemarker.template.utility.UndeclaredThrowableException" />
	<method signature="void printStackTrace(java.io.PrintStream)" class="freemarker.template.utility.UndeclaredThrowableException" />
	<method signature="void printStackTrace()" class="freemarker.template.utility.UndeclaredThrowableException" />
	<class name="org.apache.html.dom.HTMLFontElementImpl" />
	<method signature="java.lang.String getSize()" class="org.apache.html.dom.HTMLFontElementImpl" />
	<method signature="void setFace(java.lang.String)" class="org.apache.html.dom.HTMLFontElementImpl" />
	<method signature="void setColor(java.lang.String)" class="org.apache.html.dom.HTMLFontElementImpl" />
	<method signature="void setSize(java.lang.String)" class="org.apache.html.dom.HTMLFontElementImpl" />
	<method signature="java.lang.String getColor()" class="org.apache.html.dom.HTMLFontElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLFontElementImpl" />
	<method signature="java.lang.String getFace()" class="org.apache.html.dom.HTMLFontElementImpl" />
	<class name="org.jfree.ui.about.ProjectInfo" />
	<method signature="void setLicenceText(java.lang.String)" class="org.jfree.ui.about.ProjectInfo" />
	<method signature="java.util.List getContributors()" class="org.jfree.ui.about.ProjectInfo" />
	<method signature="java.awt.Image getLogo()" class="org.jfree.ui.about.ProjectInfo" />
	<method signature="void &lt;init&gt;()" class="org.jfree.ui.about.ProjectInfo" />
	<method signature="java.lang.String getLicenceText()" class="org.jfree.ui.about.ProjectInfo" />
	<method signature="java.lang.String toString()" class="org.jfree.ui.about.ProjectInfo" />
	<method signature="void setLogo(java.awt.Image)" class="org.jfree.ui.about.ProjectInfo" />
	<method signature="void setContributors(java.util.List)" class="org.jfree.ui.about.ProjectInfo" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,java.awt.Image,java.lang.String,java.lang.String,java.lang.String)" class="org.jfree.ui.about.ProjectInfo" />
	<class name="org.w3c.dom.html.HTMLUListElement" />
	<method signature="void setCompact(boolean)" class="org.w3c.dom.html.HTMLUListElement" />
	<method signature="boolean getCompact()" class="org.w3c.dom.html.HTMLUListElement" />
	<method signature="java.lang.String getType()" class="org.w3c.dom.html.HTMLUListElement" />
	<method signature="void setType(java.lang.String)" class="org.w3c.dom.html.HTMLUListElement" />
	<class name="freemarker.template.SimpleSequence" />
	<method signature="int size()" class="freemarker.template.SimpleSequence" />
	<method signature="void add(java.lang.Object)" class="freemarker.template.SimpleSequence" />
	<method signature="void &lt;init&gt;(java.util.Collection,freemarker.template.ObjectWrapper)" class="freemarker.template.SimpleSequence" />
	<method signature="freemarker.template.TemplateModel get(int)" class="freemarker.template.SimpleSequence" />
	<method signature="void &lt;init&gt;(freemarker.template.ObjectWrapper)" class="freemarker.template.SimpleSequence" />
	<method signature="java.util.List toList()" class="freemarker.template.SimpleSequence" />
	<method signature="void &lt;init&gt;(int)" class="freemarker.template.SimpleSequence" />
	<method signature="void &lt;init&gt;(freemarker.template.TemplateCollectionModel)" class="freemarker.template.SimpleSequence" />
	<method signature="void &lt;init&gt;()" class="freemarker.template.SimpleSequence" />
	<method signature="void add(boolean)" class="freemarker.template.SimpleSequence" />
	<method signature="java.lang.String toString()" class="freemarker.template.SimpleSequence" />
	<method signature="freemarker.template.SimpleSequence synchronizedWrapper()" class="freemarker.template.SimpleSequence" />
	<method signature="void &lt;init&gt;(java.util.Collection)" class="freemarker.template.SimpleSequence" />
	<class name="org.jdom2.input.stax.package-info" />
	<class name="fi.iki.elonen.NanoHTTPD$IHTTPSession" />
	<method signature="void parseBody(java.util.Map)" class="fi.iki.elonen.NanoHTTPD$IHTTPSession" />
	<method signature="java.io.InputStream getInputStream()" class="fi.iki.elonen.NanoHTTPD$IHTTPSession" />
	<method signature="java.util.Map getHeaders()" class="fi.iki.elonen.NanoHTTPD$IHTTPSession" />
	<method signature="java.util.Map getParms()" class="fi.iki.elonen.NanoHTTPD$IHTTPSession" />
	<method signature="void execute()" class="fi.iki.elonen.NanoHTTPD$IHTTPSession" />
	<method signature="fi.iki.elonen.NanoHTTPD$CookieHandler getCookies()" class="fi.iki.elonen.NanoHTTPD$IHTTPSession" />
	<method signature="java.lang.String getUri()" class="fi.iki.elonen.NanoHTTPD$IHTTPSession" />
	<method signature="fi.iki.elonen.NanoHTTPD$Method getMethod()" class="fi.iki.elonen.NanoHTTPD$IHTTPSession" />
	<method signature="java.lang.String getQueryParameterString()" class="fi.iki.elonen.NanoHTTPD$IHTTPSession" />
	<class name="org.w3c.dom.views.DocumentView" />
	<method signature="org.w3c.dom.views.AbstractView getDefaultView()" class="org.w3c.dom.views.DocumentView" />
	<class name="org.jfree.data.KeyedValues2D" />
	<method signature="java.lang.Number getValue(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.KeyedValues2D" />
	<method signature="java.lang.Comparable getRowKey(int)" class="org.jfree.data.KeyedValues2D" />
	<method signature="int getRowIndex(java.lang.Comparable)" class="org.jfree.data.KeyedValues2D" />
	<method signature="java.util.List getColumnKeys()" class="org.jfree.data.KeyedValues2D" />
	<method signature="java.lang.Comparable getColumnKey(int)" class="org.jfree.data.KeyedValues2D" />
	<method signature="java.util.List getRowKeys()" class="org.jfree.data.KeyedValues2D" />
	<method signature="int getColumnIndex(java.lang.Comparable)" class="org.jfree.data.KeyedValues2D" />
	<class name="org.apache.xerces.impl.dv.dtd.StringDatatypeValidator" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.dtd.StringDatatypeValidator" />
	<method signature="void validate(java.lang.String,org.apache.xerces.impl.dv.ValidationContext)" class="org.apache.xerces.impl.dv.dtd.StringDatatypeValidator" />
	<class name="org.jdom2.IllegalTargetException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jdom2.IllegalTargetException" />
	<class name="org.w3c.dom.Text" />
	<method signature="java.lang.String getWholeText()" class="org.w3c.dom.Text" />
	<method signature="org.w3c.dom.Text replaceWholeText(java.lang.String)" class="org.w3c.dom.Text" />
	<method signature="boolean isElementContentWhitespace()" class="org.w3c.dom.Text" />
	<method signature="org.w3c.dom.Text splitText(int)" class="org.w3c.dom.Text" />
	<class name="org.jfree.ui.L1R1ButtonPanel" />
	<method signature="javax.swing.JButton getRightButton()" class="org.jfree.ui.L1R1ButtonPanel" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="org.jfree.ui.L1R1ButtonPanel" />
	<method signature="javax.swing.JButton getLeftButton()" class="org.jfree.ui.L1R1ButtonPanel" />
	<class name="org.jfree.chart.renderer.category.GroupedStackedBarRenderer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.category.GroupedStackedBarRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.category.GroupedStackedBarRenderer" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)" class="org.jfree.chart.renderer.category.GroupedStackedBarRenderer" />
	<method signature="void setSeriesToGroupMap(org.jfree.data.KeyToGroupMap)" class="org.jfree.chart.renderer.category.GroupedStackedBarRenderer" />
	<method signature="org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)" class="org.jfree.chart.renderer.category.GroupedStackedBarRenderer" />
	<class name="org.jfree.chart.util.ShadowGenerator" />
	<method signature="int calculateOffsetX()" class="org.jfree.chart.util.ShadowGenerator" />
	<method signature="int calculateOffsetY()" class="org.jfree.chart.util.ShadowGenerator" />
	<method signature="java.awt.image.BufferedImage createDropShadow(java.awt.image.BufferedImage)" class="org.jfree.chart.util.ShadowGenerator" />
	<class name="org.apache.xerces.dom3.as.DOMASBuilder" />
	<method signature="void setAbstractSchema(org.apache.xerces.dom3.as.ASModel)" class="org.apache.xerces.dom3.as.DOMASBuilder" />
	<method signature="org.apache.xerces.dom3.as.ASModel parseASURI(java.lang.String)" class="org.apache.xerces.dom3.as.DOMASBuilder" />
	<method signature="org.apache.xerces.dom3.as.ASModel getAbstractSchema()" class="org.apache.xerces.dom3.as.DOMASBuilder" />
	<method signature="org.apache.xerces.dom3.as.ASModel parseASInputSource(org.w3c.dom.ls.LSInput)" class="org.apache.xerces.dom3.as.DOMASBuilder" />
	<class name="org.xml.sax.ext.EntityResolver2" />
	<method signature="org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.xml.sax.ext.EntityResolver2" />
	<method signature="org.xml.sax.InputSource getExternalSubset(java.lang.String,java.lang.String)" class="org.xml.sax.ext.EntityResolver2" />
	<class name="freemarker.ext.beans.HashAdapter" />
	<method signature="freemarker.template.TemplateModel getTemplateModel()" class="freemarker.ext.beans.HashAdapter" />
	<method signature="boolean isEmpty()" class="freemarker.ext.beans.HashAdapter" />
	<method signature="boolean containsKey(java.lang.Object)" class="freemarker.ext.beans.HashAdapter" />
	<method signature="java.lang.Object get(java.lang.Object)" class="freemarker.ext.beans.HashAdapter" />
	<method signature="java.util.Set entrySet()" class="freemarker.ext.beans.HashAdapter" />
	<class name="com.google.zxing.Binarizer" />
	<method signature="com.google.zxing.common.BitArray getBlackRow(int,com.google.zxing.common.BitArray)" class="com.google.zxing.Binarizer" />
	<method signature="int getHeight()" class="com.google.zxing.Binarizer" />
	<method signature="com.google.zxing.Binarizer createBinarizer(com.google.zxing.LuminanceSource)" class="com.google.zxing.Binarizer" />
	<method signature="com.google.zxing.common.BitMatrix getBlackMatrix()" class="com.google.zxing.Binarizer" />
	<method signature="com.google.zxing.LuminanceSource getLuminanceSource()" class="com.google.zxing.Binarizer" />
	<method signature="int getWidth()" class="com.google.zxing.Binarizer" />
	<class name="org.jdom2.Element" />
	<method signature="boolean coalesceText(boolean)" class="org.jdom2.Element" />
	<method signature="org.jdom2.Parent addContent(int,java.util.Collection)" class="org.jdom2.Element" />
	<method signature="org.jdom2.Namespace getNamespace()" class="org.jdom2.Element" />
	<method signature="org.jdom2.Element setContent(java.util.Collection)" class="org.jdom2.Element" />
	<method signature="java.lang.String getChildTextTrim(java.lang.String,org.jdom2.Namespace)" class="org.jdom2.Element" />
	<method signature="org.jdom2.Content getContent(int)" class="org.jdom2.Element" />
	<method signature="java.util.List getContent()" class="org.jdom2.Element" />
	<method signature="org.jdom2.Parent addContent(int,org.jdom2.Content)" class="org.jdom2.Element" />
	<method signature="java.util.List getContent(org.jdom2.filter.Filter)" class="org.jdom2.Element" />
	<method signature="org.jdom2.Element setContent(org.jdom2.Content)" class="org.jdom2.Element" />
	<method signature="org.jdom2.Parent addContent(org.jdom2.Content)" class="org.jdom2.Element" />
	<method signature="java.lang.String getText()" class="org.jdom2.Element" />
	<method signature="org.jdom2.Element setText(java.lang.String)" class="org.jdom2.Element" />
	<method signature="boolean removeChildren(java.lang.String)" class="org.jdom2.Element" />
	<method signature="org.jdom2.Element addContent(java.lang.String)" class="org.jdom2.Element" />
	<method signature="java.net.URI getXMLBaseURI()" class="org.jdom2.Element" />
	<method signature="org.jdom2.CloneBase clone()" class="org.jdom2.Element" />
	<method signature="java.lang.String getChildTextTrim(java.lang.String)" class="org.jdom2.Element" />
	<method signature="org.jdom2.Element addContent(int,org.jdom2.Content)" class="org.jdom2.Element" />
	<method signature="boolean isAncestor(org.jdom2.Element)" class="org.jdom2.Element" />
	<method signature="boolean addNamespaceDeclaration(org.jdom2.Namespace)" class="org.jdom2.Element" />
	<method signature="java.lang.Object clone()" class="org.jdom2.Element" />
	<method signature="org.jdom2.Element setNamespace(org.jdom2.Namespace)" class="org.jdom2.Element" />
	<method signature="boolean removeChild(java.lang.String)" class="org.jdom2.Element" />
	<method signature="org.jdom2.Attribute getAttribute(java.lang.String,org.jdom2.Namespace)" class="org.jdom2.Element" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String)" class="org.jdom2.Element" />
	<method signature="boolean removeAttribute(java.lang.String,org.jdom2.Namespace)" class="org.jdom2.Element" />
	<method signature="boolean hasAttributes()" class="org.jdom2.Element" />
	<method signature="java.util.List getChildren()" class="org.jdom2.Element" />
	<method signature="java.lang.String getTextTrim()" class="org.jdom2.Element" />
	<method signature="org.jdom2.Content removeContent(int)" class="org.jdom2.Element" />
	<method signature="org.jdom2.Element setAttribute(java.lang.String,java.lang.String)" class="org.jdom2.Element" />
	<method signature="java.util.List getNamespacesInScope()" class="org.jdom2.Element" />
	<method signature="java.lang.String getTextNormalize()" class="org.jdom2.Element" />
	<method signature="java.util.List removeContent(org.jdom2.filter.Filter)" class="org.jdom2.Element" />
	<method signature="java.util.List removeContent()" class="org.jdom2.Element" />
	<method signature="java.lang.String toString()" class="org.jdom2.Element" />
	<method signature="java.lang.String getAttributeValue(java.lang.String,org.jdom2.Namespace,java.lang.String)" class="org.jdom2.Element" />
	<method signature="java.lang.String getName()" class="org.jdom2.Element" />
	<method signature="java.lang.String getChildTextNormalize(java.lang.String)" class="org.jdom2.Element" />
	<method signature="java.util.List getNamespacesInherited()" class="org.jdom2.Element" />
	<method signature="java.lang.String getChildText(java.lang.String)" class="org.jdom2.Element" />
	<method signature="org.jdom2.Element setAttributes(java.util.Collection)" class="org.jdom2.Element" />
	<method signature="java.util.List getChildren(java.lang.String)" class="org.jdom2.Element" />
	<method signature="java.lang.String getAttributeValue(java.lang.String,java.lang.String)" class="org.jdom2.Element" />
	<method signature="org.jdom2.Element addContent(org.jdom2.Content)" class="org.jdom2.Element" />
	<method signature="org.jdom2.Element getChild(java.lang.String,org.jdom2.Namespace)" class="org.jdom2.Element" />
	<method signature="void sortChildren(java.util.Comparator)" class="org.jdom2.Element" />
	<method signature="org.jdom2.Element setName(java.lang.String)" class="org.jdom2.Element" />
	<method signature="void &lt;init&gt;(java.lang.String,org.jdom2.Namespace)" class="org.jdom2.Element" />
	<method signature="org.jdom2.Element addContent(java.util.Collection)" class="org.jdom2.Element" />
	<method signature="java.lang.String getAttributeValue(java.lang.String,org.jdom2.Namespace)" class="org.jdom2.Element" />
	<method signature="org.jdom2.Parent setContent(int,java.util.Collection)" class="org.jdom2.Element" />
	<method signature="void sortContent(java.util.Comparator)" class="org.jdom2.Element" />
	<method signature="org.jdom2.util.IteratorIterable getDescendants()" class="org.jdom2.Element" />
	<method signature="org.jdom2.Content detach()" class="org.jdom2.Element" />
	<method signature="org.jdom2.Content clone()" class="org.jdom2.Element" />
	<method signature="java.util.List cloneContent()" class="org.jdom2.Element" />
	<method signature="boolean removeAttribute(java.lang.String)" class="org.jdom2.Element" />
	<method signature="java.lang.String getNamespaceURI()" class="org.jdom2.Element" />
	<method signature="void removeNamespaceDeclaration(org.jdom2.Namespace)" class="org.jdom2.Element" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jdom2.Element" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="org.jdom2.Element" />
	<method signature="boolean removeChild(java.lang.String,org.jdom2.Namespace)" class="org.jdom2.Element" />
	<method signature="boolean removeContent(org.jdom2.Content)" class="org.jdom2.Element" />
	<method signature="org.jdom2.Element setAttribute(org.jdom2.Attribute)" class="org.jdom2.Element" />
	<method signature="boolean hasAdditionalNamespaces()" class="org.jdom2.Element" />
	<method signature="boolean removeAttribute(org.jdom2.Attribute)" class="org.jdom2.Element" />
	<method signature="java.lang.String getChildText(java.lang.String,org.jdom2.Namespace)" class="org.jdom2.Element" />
	<method signature="org.jdom2.Parent addContent(java.util.Collection)" class="org.jdom2.Element" />
	<method signature="java.lang.String getQualifiedName()" class="org.jdom2.Element" />
	<method signature="java.lang.String getChildTextNormalize(java.lang.String,org.jdom2.Namespace)" class="org.jdom2.Element" />
	<method signature="org.jdom2.Attribute getAttribute(java.lang.String)" class="org.jdom2.Element" />
	<method signature="java.lang.String getNamespacePrefix()" class="org.jdom2.Element" />
	<method signature="java.util.List getChildren(java.lang.String,org.jdom2.Namespace)" class="org.jdom2.Element" />
	<method signature="org.jdom2.util.IteratorIterable getDescendants(org.jdom2.filter.Filter)" class="org.jdom2.Element" />
	<method signature="void sortAttributes(java.util.Comparator)" class="org.jdom2.Element" />
	<method signature="java.util.List getAdditionalNamespaces()" class="org.jdom2.Element" />
	<method signature="org.jdom2.Element setAttribute(java.lang.String,java.lang.String,org.jdom2.Namespace)" class="org.jdom2.Element" />
	<method signature="void sortContent(org.jdom2.filter.Filter,java.util.Comparator)" class="org.jdom2.Element" />
	<method signature="org.jdom2.Element setContent(int,org.jdom2.Content)" class="org.jdom2.Element" />
	<method signature="org.jdom2.Namespace getNamespace(java.lang.String)" class="org.jdom2.Element" />
	<method signature="java.lang.String getValue()" class="org.jdom2.Element" />
	<method signature="int getContentSize()" class="org.jdom2.Element" />
	<method signature="java.lang.String getAttributeValue(java.lang.String)" class="org.jdom2.Element" />
	<method signature="org.jdom2.Element clone()" class="org.jdom2.Element" />
	<method signature="boolean removeChildren(java.lang.String,org.jdom2.Namespace)" class="org.jdom2.Element" />
	<method signature="java.util.List getNamespacesIntroduced()" class="org.jdom2.Element" />
	<method signature="org.jdom2.Element detach()" class="org.jdom2.Element" />
	<method signature="org.jdom2.Element addContent(int,java.util.Collection)" class="org.jdom2.Element" />
	<method signature="boolean isRootElement()" class="org.jdom2.Element" />
	<method signature="void canContainContent(org.jdom2.Content,int,boolean)" class="org.jdom2.Element" />
	<method signature="int indexOf(org.jdom2.Content)" class="org.jdom2.Element" />
	<method signature="java.util.List getAttributes()" class="org.jdom2.Element" />
	<method signature="org.jdom2.Element getChild(java.lang.String)" class="org.jdom2.Element" />
	<class name="javax.xml.transform.Result" />
	<method signature="java.lang.String getSystemId()" class="javax.xml.transform.Result" />
	<method signature="void setSystemId(java.lang.String)" class="javax.xml.transform.Result" />
	<class name="javax.annotation.OverridingMethodsMustInvokeSuper" />
	<class name="org.jfree.data.xy.DefaultIntervalXYDataset" />
	<method signature="double getXValue(int,int)" class="org.jfree.data.xy.DefaultIntervalXYDataset" />
	<method signature="int hashCode()" class="org.jfree.data.xy.DefaultIntervalXYDataset" />
	<method signature="double getEndXValue(int,int)" class="org.jfree.data.xy.DefaultIntervalXYDataset" />
	<method signature="double getStartYValue(int,int)" class="org.jfree.data.xy.DefaultIntervalXYDataset" />
	<method signature="java.lang.Number getX(int,int)" class="org.jfree.data.xy.DefaultIntervalXYDataset" />
	<method signature="java.lang.Number getY(int,int)" class="org.jfree.data.xy.DefaultIntervalXYDataset" />
	<method signature="int getSeriesCount()" class="org.jfree.data.xy.DefaultIntervalXYDataset" />
	<method signature="double getEndYValue(int,int)" class="org.jfree.data.xy.DefaultIntervalXYDataset" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.xy.DefaultIntervalXYDataset" />
	<method signature="java.lang.Comparable getSeriesKey(int)" class="org.jfree.data.xy.DefaultIntervalXYDataset" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.xy.DefaultIntervalXYDataset" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.xy.DefaultIntervalXYDataset" />
	<method signature="java.lang.Number getEndX(int,int)" class="org.jfree.data.xy.DefaultIntervalXYDataset" />
	<method signature="double getStartXValue(int,int)" class="org.jfree.data.xy.DefaultIntervalXYDataset" />
	<method signature="java.lang.Number getStartX(int,int)" class="org.jfree.data.xy.DefaultIntervalXYDataset" />
	<method signature="void addSeries(java.lang.Comparable,double[][])" class="org.jfree.data.xy.DefaultIntervalXYDataset" />
	<method signature="java.lang.Number getStartY(int,int)" class="org.jfree.data.xy.DefaultIntervalXYDataset" />
	<method signature="int getItemCount(int)" class="org.jfree.data.xy.DefaultIntervalXYDataset" />
	<method signature="double getYValue(int,int)" class="org.jfree.data.xy.DefaultIntervalXYDataset" />
	<method signature="java.lang.Number getEndY(int,int)" class="org.jfree.data.xy.DefaultIntervalXYDataset" />
	<class name="javax.xml.xpath.XPathFactory" />
	<method signature="javax.xml.xpath.XPathFactory newInstance()" class="javax.xml.xpath.XPathFactory" />
	<method signature="javax.xml.xpath.XPathFactory newInstance(java.lang.String,java.lang.String,java.lang.ClassLoader)" class="javax.xml.xpath.XPathFactory" />
	<method signature="boolean getFeature(java.lang.String)" class="javax.xml.xpath.XPathFactory" />
	<method signature="javax.xml.xpath.XPathFactory newInstance(java.lang.String)" class="javax.xml.xpath.XPathFactory" />
	<method signature="boolean isObjectModelSupported(java.lang.String)" class="javax.xml.xpath.XPathFactory" />
	<method signature="void setXPathVariableResolver(javax.xml.xpath.XPathVariableResolver)" class="javax.xml.xpath.XPathFactory" />
	<method signature="void setXPathFunctionResolver(javax.xml.xpath.XPathFunctionResolver)" class="javax.xml.xpath.XPathFactory" />
	<method signature="javax.xml.xpath.XPath newXPath()" class="javax.xml.xpath.XPathFactory" />
	<method signature="void setFeature(java.lang.String,boolean)" class="javax.xml.xpath.XPathFactory" />
	<class name="org.jfree.chart.title.Title" />
	<method signature="org.jfree.ui.RectangleEdge getPosition()" class="org.jfree.chart.title.Title" />
	<method signature="int hashCode()" class="org.jfree.chart.title.Title" />
	<method signature="void addChangeListener(org.jfree.chart.event.TitleChangeListener)" class="org.jfree.chart.title.Title" />
	<method signature="void setHorizontalAlignment(org.jfree.ui.HorizontalAlignment)" class="org.jfree.chart.title.Title" />
	<method signature="org.jfree.ui.VerticalAlignment getVerticalAlignment()" class="org.jfree.chart.title.Title" />
	<method signature="void setNotify(boolean)" class="org.jfree.chart.title.Title" />
	<method signature="void setVerticalAlignment(org.jfree.ui.VerticalAlignment)" class="org.jfree.chart.title.Title" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.title.Title" />
	<method signature="void setPosition(org.jfree.ui.RectangleEdge)" class="org.jfree.chart.title.Title" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.title.Title" />
	<method signature="void setVisible(boolean)" class="org.jfree.chart.title.Title" />
	<method signature="boolean isVisible()" class="org.jfree.chart.title.Title" />
	<method signature="void removeChangeListener(org.jfree.chart.event.TitleChangeListener)" class="org.jfree.chart.title.Title" />
	<method signature="void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" class="org.jfree.chart.title.Title" />
	<method signature="org.jfree.ui.HorizontalAlignment getHorizontalAlignment()" class="org.jfree.chart.title.Title" />
	<method signature="boolean getNotify()" class="org.jfree.chart.title.Title" />
	<class name="javax.xml.stream.events.StartDocument" />
	<method signature="java.lang.String getSystemId()" class="javax.xml.stream.events.StartDocument" />
	<method signature="java.lang.String getCharacterEncodingScheme()" class="javax.xml.stream.events.StartDocument" />
	<method signature="java.lang.String getVersion()" class="javax.xml.stream.events.StartDocument" />
	<method signature="boolean standaloneSet()" class="javax.xml.stream.events.StartDocument" />
	<method signature="boolean isStandalone()" class="javax.xml.stream.events.StartDocument" />
	<method signature="boolean encodingSet()" class="javax.xml.stream.events.StartDocument" />
	<class name="org.apache.xerces.parsers.XML11Configurable" />
	<class name="org.apache.xerces.xni.XNIException" />
	<method signature="java.lang.Exception getException()" class="org.apache.xerces.xni.XNIException" />
	<method signature="void &lt;init&gt;(java.lang.Exception)" class="org.apache.xerces.xni.XNIException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Exception)" class="org.apache.xerces.xni.XNIException" />
	<method signature="java.lang.Throwable initCause(java.lang.Throwable)" class="org.apache.xerces.xni.XNIException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.apache.xerces.xni.XNIException" />
	<method signature="java.lang.Throwable getCause()" class="org.apache.xerces.xni.XNIException" />
	<class name="org.apache.xerces.dom.TextImpl" />
	<method signature="short getNodeType()" class="org.apache.xerces.dom.TextImpl" />
	<method signature="java.lang.String getWholeText()" class="org.apache.xerces.dom.TextImpl" />
	<method signature="boolean isIgnorableWhitespace()" class="org.apache.xerces.dom.TextImpl" />
	<method signature="java.lang.String getNodeName()" class="org.apache.xerces.dom.TextImpl" />
	<method signature="boolean isElementContentWhitespace()" class="org.apache.xerces.dom.TextImpl" />
	<method signature="void setValues(org.apache.xerces.dom.CoreDocumentImpl,java.lang.String)" class="org.apache.xerces.dom.TextImpl" />
	<method signature="org.w3c.dom.Text replaceWholeText(java.lang.String)" class="org.apache.xerces.dom.TextImpl" />
	<method signature="void replaceData(java.lang.String)" class="org.apache.xerces.dom.TextImpl" />
	<method signature="void setIgnorableWhitespace(boolean)" class="org.apache.xerces.dom.TextImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.dom.TextImpl" />
	<method signature="void &lt;init&gt;(org.apache.xerces.dom.CoreDocumentImpl,java.lang.String)" class="org.apache.xerces.dom.TextImpl" />
	<method signature="org.w3c.dom.Text splitText(int)" class="org.apache.xerces.dom.TextImpl" />
	<method signature="java.lang.String removeData()" class="org.apache.xerces.dom.TextImpl" />
	<class name="com.google.zxing.oned.MultiFormatOneDReader" />
	<method signature="void reset()" class="com.google.zxing.oned.MultiFormatOneDReader" />
	<method signature="void &lt;init&gt;(java.util.Map)" class="com.google.zxing.oned.MultiFormatOneDReader" />
	<method signature="com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map)" class="com.google.zxing.oned.MultiFormatOneDReader" />
	<class name="org.apache.xerces.impl.xs.util.XInt" />
	<method signature="boolean equals(org.apache.xerces.impl.xs.util.XInt)" class="org.apache.xerces.impl.xs.util.XInt" />
	<method signature="int intValue()" class="org.apache.xerces.impl.xs.util.XInt" />
	<method signature="short shortValue()" class="org.apache.xerces.impl.xs.util.XInt" />
	<method signature="java.lang.String toString()" class="org.apache.xerces.impl.xs.util.XInt" />
	<class name="org.jfree.chart.annotations.XYPolygonAnnotation" />
	<method signature="int hashCode()" class="org.jfree.chart.annotations.XYPolygonAnnotation" />
	<method signature="void &lt;init&gt;(double[],java.awt.Stroke,java.awt.Paint,java.awt.Paint)" class="org.jfree.chart.annotations.XYPolygonAnnotation" />
	<method signature="java.awt.Stroke getOutlineStroke()" class="org.jfree.chart.annotations.XYPolygonAnnotation" />
	<method signature="double[] getPolygonCoordinates()" class="org.jfree.chart.annotations.XYPolygonAnnotation" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.annotations.XYPolygonAnnotation" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.annotations.XYPolygonAnnotation" />
	<method signature="java.awt.Paint getOutlinePaint()" class="org.jfree.chart.annotations.XYPolygonAnnotation" />
	<method signature="void &lt;init&gt;(double[],java.awt.Stroke,java.awt.Paint)" class="org.jfree.chart.annotations.XYPolygonAnnotation" />
	<method signature="void &lt;init&gt;(double[])" class="org.jfree.chart.annotations.XYPolygonAnnotation" />
	<method signature="java.awt.Paint getFillPaint()" class="org.jfree.chart.annotations.XYPolygonAnnotation" />
	<method signature="void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.annotations.XYPolygonAnnotation" />
	<class name="javax.xml.stream.util.XMLEventAllocator" />
	<method signature="void allocate(javax.xml.stream.XMLStreamReader,javax.xml.stream.util.XMLEventConsumer)" class="javax.xml.stream.util.XMLEventAllocator" />
	<method signature="javax.xml.stream.util.XMLEventAllocator newInstance()" class="javax.xml.stream.util.XMLEventAllocator" />
	<method signature="javax.xml.stream.events.XMLEvent allocate(javax.xml.stream.XMLStreamReader)" class="javax.xml.stream.util.XMLEventAllocator" />
	<class name="org.jfree.data.time.ohlc.OHLCSeriesCollection" />
	<method signature="double getVolumeValue(int,int)" class="org.jfree.data.time.ohlc.OHLCSeriesCollection" />
	<method signature="java.lang.Number getX(int,int)" class="org.jfree.data.time.ohlc.OHLCSeriesCollection" />
	<method signature="java.lang.Number getY(int,int)" class="org.jfree.data.time.ohlc.OHLCSeriesCollection" />
	<method signature="double getHighValue(int,int)" class="org.jfree.data.time.ohlc.OHLCSeriesCollection" />
	<method signature="void removeSeries(int)" class="org.jfree.data.time.ohlc.OHLCSeriesCollection" />
	<method signature="int getSeriesCount()" class="org.jfree.data.time.ohlc.OHLCSeriesCollection" />
	<method signature="boolean removeSeries(org.jfree.data.time.ohlc.OHLCSeries)" class="org.jfree.data.time.ohlc.OHLCSeriesCollection" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.time.ohlc.OHLCSeriesCollection" />
	<method signature="java.lang.Comparable getSeriesKey(int)" class="org.jfree.data.time.ohlc.OHLCSeriesCollection" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.time.ohlc.OHLCSeriesCollection" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.time.ohlc.OHLCSeriesCollection" />
	<method signature="void addSeries(org.jfree.data.time.ohlc.OHLCSeries)" class="org.jfree.data.time.ohlc.OHLCSeriesCollection" />
	<method signature="int getItemCount(int)" class="org.jfree.data.time.ohlc.OHLCSeriesCollection" />
	<method signature="org.jfree.data.time.ohlc.OHLCSeries getSeries(int)" class="org.jfree.data.time.ohlc.OHLCSeriesCollection" />
	<method signature="double getXValue(int,int)" class="org.jfree.data.time.ohlc.OHLCSeriesCollection" />
	<method signature="java.lang.Number getLow(int,int)" class="org.jfree.data.time.ohlc.OHLCSeriesCollection" />
	<method signature="int hashCode()" class="org.jfree.data.time.ohlc.OHLCSeriesCollection" />
	<method signature="java.lang.Number getVolume(int,int)" class="org.jfree.data.time.ohlc.OHLCSeriesCollection" />
	<method signature="org.jfree.data.time.TimePeriodAnchor getXPosition()" class="org.jfree.data.time.ohlc.OHLCSeriesCollection" />
	<method signature="double getOpenValue(int,int)" class="org.jfree.data.time.ohlc.OHLCSeriesCollection" />
	<method signature="java.lang.Number getHigh(int,int)" class="org.jfree.data.time.ohlc.OHLCSeriesCollection" />
	<method signature="void setXPosition(org.jfree.data.time.TimePeriodAnchor)" class="org.jfree.data.time.ohlc.OHLCSeriesCollection" />
	<method signature="java.lang.Number getClose(int,int)" class="org.jfree.data.time.ohlc.OHLCSeriesCollection" />
	<method signature="java.lang.Number getOpen(int,int)" class="org.jfree.data.time.ohlc.OHLCSeriesCollection" />
	<method signature="double getCloseValue(int,int)" class="org.jfree.data.time.ohlc.OHLCSeriesCollection" />
	<method signature="double getLowValue(int,int)" class="org.jfree.data.time.ohlc.OHLCSeriesCollection" />
	<method signature="void removeAllSeries()" class="org.jfree.data.time.ohlc.OHLCSeriesCollection" />
	<class name="org.apache.xerces.impl.Constants" />
	<method signature="java.util.Enumeration getSAXFeatures()" class="org.apache.xerces.impl.Constants" />
	<method signature="java.util.Enumeration getSAXProperties()" class="org.apache.xerces.impl.Constants" />
	<method signature="java.util.Enumeration getXercesFeatures()" class="org.apache.xerces.impl.Constants" />
	<method signature="void main(java.lang.String[])" class="org.apache.xerces.impl.Constants" />
	<method signature="java.util.Enumeration getXercesProperties()" class="org.apache.xerces.impl.Constants" />
	<class name="net.java.dev.colorchooser.ColorChooserBeanInfo" />
	<method signature="java.beans.MethodDescriptor[] getMethodDescriptors()" class="net.java.dev.colorchooser.ColorChooserBeanInfo" />
	<method signature="java.beans.PropertyDescriptor[] getPropertyDescriptors()" class="net.java.dev.colorchooser.ColorChooserBeanInfo" />
	<method signature="java.beans.EventSetDescriptor[] getEventSetDescriptors()" class="net.java.dev.colorchooser.ColorChooserBeanInfo" />
	<method signature="int getDefaultPropertyIndex()" class="net.java.dev.colorchooser.ColorChooserBeanInfo" />
	<method signature="java.awt.Image getIcon(int)" class="net.java.dev.colorchooser.ColorChooserBeanInfo" />
	<method signature="void &lt;init&gt;()" class="net.java.dev.colorchooser.ColorChooserBeanInfo" />
	<method signature="int getDefaultEventIndex()" class="net.java.dev.colorchooser.ColorChooserBeanInfo" />
	<method signature="java.beans.BeanDescriptor getBeanDescriptor()" class="net.java.dev.colorchooser.ColorChooserBeanInfo" />
	<class name="com.hexidec.ekit.component.ImageFileDialog" />
	<method signature="java.lang.String getImageSrc()" class="com.hexidec.ekit.component.ImageFileDialog" />
	<method signature="java.lang.String getImageWidth()" class="com.hexidec.ekit.component.ImageFileDialog" />
	<method signature="java.lang.String getImageHeight()" class="com.hexidec.ekit.component.ImageFileDialog" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="com.hexidec.ekit.component.ImageFileDialog" />
	<method signature="java.io.File browseForImage()" class="com.hexidec.ekit.component.ImageFileDialog" />
	<method signature="void &lt;init&gt;(java.awt.Frame,java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,boolean)" class="com.hexidec.ekit.component.ImageFileDialog" />
	<method signature="java.io.File getImageFile()" class="com.hexidec.ekit.component.ImageFileDialog" />
	<method signature="java.lang.String getImageAlt()" class="com.hexidec.ekit.component.ImageFileDialog" />
	<method signature="java.lang.String getDecisionValue()" class="com.hexidec.ekit.component.ImageFileDialog" />
	<class name="org.jfree.chart.plot.CombinedRangeXYPlot" />
	<method signature="java.lang.String getPlotType()" class="org.jfree.chart.plot.CombinedRangeXYPlot" />
	<method signature="void zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" class="org.jfree.chart.plot.CombinedRangeXYPlot" />
	<method signature="void zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)" class="org.jfree.chart.plot.CombinedRangeXYPlot" />
	<method signature="org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)" class="org.jfree.chart.plot.CombinedRangeXYPlot" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.plot.CombinedRangeXYPlot" />
	<method signature="void setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)" class="org.jfree.chart.plot.CombinedRangeXYPlot" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.plot.CombinedRangeXYPlot" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.plot.CombinedRangeXYPlot" />
	<method signature="double getGap()" class="org.jfree.chart.plot.CombinedRangeXYPlot" />
	<method signature="void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.plot.CombinedRangeXYPlot" />
	<method signature="void plotChanged(org.jfree.chart.event.PlotChangeEvent)" class="org.jfree.chart.plot.CombinedRangeXYPlot" />
	<method signature="void remove(org.jfree.chart.plot.XYPlot)" class="org.jfree.chart.plot.CombinedRangeXYPlot" />
	<method signature="java.util.List getSubplots()" class="org.jfree.chart.plot.CombinedRangeXYPlot" />
	<method signature="org.jfree.chart.plot.XYPlot findSubplot(org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" class="org.jfree.chart.plot.CombinedRangeXYPlot" />
	<method signature="void add(org.jfree.chart.plot.XYPlot,int)" class="org.jfree.chart.plot.CombinedRangeXYPlot" />
	<method signature="void setGap(double)" class="org.jfree.chart.plot.CombinedRangeXYPlot" />
	<method signature="void setOrientation(org.jfree.chart.plot.PlotOrientation)" class="org.jfree.chart.plot.CombinedRangeXYPlot" />
	<method signature="void handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.plot.CombinedRangeXYPlot" />
	<method signature="void &lt;init&gt;(org.jfree.chart.axis.ValueAxis)" class="org.jfree.chart.plot.CombinedRangeXYPlot" />
	<method signature="void zoomDomainAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" class="org.jfree.chart.plot.CombinedRangeXYPlot" />
	<method signature="void add(org.jfree.chart.plot.XYPlot)" class="org.jfree.chart.plot.CombinedRangeXYPlot" />
	<method signature="org.jfree.chart.LegendItemCollection getLegendItems()" class="org.jfree.chart.plot.CombinedRangeXYPlot" />
	<method signature="void panDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" class="org.jfree.chart.plot.CombinedRangeXYPlot" />
	<class name="org.apache.xerces.impl.xs.SchemaGrammar$Schema4Annotations" />
	<method signature="void addGlobalAttributeGroupDecl(org.apache.xerces.impl.xs.XSAttributeGroupDecl,java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar$Schema4Annotations" />
	<method signature="void addGlobalTypeDecl(org.apache.xerces.xs.XSTypeDefinition,java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar$Schema4Annotations" />
	<method signature="void addGlobalSimpleTypeDecl(org.apache.xerces.impl.dv.XSSimpleType)" class="org.apache.xerces.impl.xs.SchemaGrammar$Schema4Annotations" />
	<method signature="void addGlobalSimpleTypeDecl(org.apache.xerces.impl.dv.XSSimpleType,java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar$Schema4Annotations" />
	<method signature="void addDocument(java.lang.Object,java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar$Schema4Annotations" />
	<method signature="void addGlobalElementDeclAll(org.apache.xerces.impl.xs.XSElementDecl)" class="org.apache.xerces.impl.xs.SchemaGrammar$Schema4Annotations" />
	<method signature="void addGlobalElementDecl(org.apache.xerces.impl.xs.XSElementDecl,java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar$Schema4Annotations" />
	<method signature="void addGlobalNotationDecl(org.apache.xerces.impl.xs.XSNotationDecl,java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar$Schema4Annotations" />
	<method signature="void addGlobalAttributeDecl(org.apache.xerces.impl.xs.XSAttributeDecl)" class="org.apache.xerces.impl.xs.SchemaGrammar$Schema4Annotations" />
	<method signature="void addGlobalGroupDecl(org.apache.xerces.impl.xs.XSGroupDecl)" class="org.apache.xerces.impl.xs.SchemaGrammar$Schema4Annotations" />
	<method signature="void addRedefinedGroupDecl(org.apache.xerces.impl.xs.XSGroupDecl,org.apache.xerces.impl.xs.XSGroupDecl,org.apache.xerces.impl.xs.util.SimpleLocator)" class="org.apache.xerces.impl.xs.SchemaGrammar$Schema4Annotations" />
	<method signature="void addGlobalComplexTypeDecl(org.apache.xerces.impl.xs.XSComplexTypeDecl)" class="org.apache.xerces.impl.xs.SchemaGrammar$Schema4Annotations" />
	<method signature="void addGlobalTypeDecl(org.apache.xerces.xs.XSTypeDefinition)" class="org.apache.xerces.impl.xs.SchemaGrammar$Schema4Annotations" />
	<method signature="void addGlobalGroupDecl(org.apache.xerces.impl.xs.XSGroupDecl,java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar$Schema4Annotations" />
	<method signature="void addGlobalComplexTypeDecl(org.apache.xerces.impl.xs.XSComplexTypeDecl,java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar$Schema4Annotations" />
	<method signature="void addGlobalNotationDecl(org.apache.xerces.impl.xs.XSNotationDecl)" class="org.apache.xerces.impl.xs.SchemaGrammar$Schema4Annotations" />
	<method signature="void addGlobalAttributeGroupDecl(org.apache.xerces.impl.xs.XSAttributeGroupDecl)" class="org.apache.xerces.impl.xs.SchemaGrammar$Schema4Annotations" />
	<method signature="org.apache.xerces.xni.grammars.XMLGrammarDescription getGrammarDescription()" class="org.apache.xerces.impl.xs.SchemaGrammar$Schema4Annotations" />
	<method signature="void addComplexTypeDecl(org.apache.xerces.impl.xs.XSComplexTypeDecl,org.apache.xerces.impl.xs.util.SimpleLocator)" class="org.apache.xerces.impl.xs.SchemaGrammar$Schema4Annotations" />
	<method signature="void setImportedGrammars(java.util.Vector)" class="org.apache.xerces.impl.xs.SchemaGrammar$Schema4Annotations" />
	<method signature="void addGlobalElementDecl(org.apache.xerces.impl.xs.XSElementDecl)" class="org.apache.xerces.impl.xs.SchemaGrammar$Schema4Annotations" />
	<method signature="void addGlobalAttributeDecl(org.apache.xerces.impl.xs.XSAttributeGroupDecl,java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar$Schema4Annotations" />
	<class name="org.w3c.dom.html.HTMLOptGroupElement" />
	<method signature="void setDisabled(boolean)" class="org.w3c.dom.html.HTMLOptGroupElement" />
	<method signature="java.lang.String getLabel()" class="org.w3c.dom.html.HTMLOptGroupElement" />
	<method signature="boolean getDisabled()" class="org.w3c.dom.html.HTMLOptGroupElement" />
	<method signature="void setLabel(java.lang.String)" class="org.w3c.dom.html.HTMLOptGroupElement" />
	<class name="org.xml.sax.AttributeList" />
	<method signature="java.lang.String getValue(int)" class="org.xml.sax.AttributeList" />
	<method signature="java.lang.String getType(java.lang.String)" class="org.xml.sax.AttributeList" />
	<method signature="java.lang.String getName(int)" class="org.xml.sax.AttributeList" />
	<method signature="java.lang.String getType(int)" class="org.xml.sax.AttributeList" />
	<method signature="java.lang.String getValue(java.lang.String)" class="org.xml.sax.AttributeList" />
	<method signature="int getLength()" class="org.xml.sax.AttributeList" />
	<class name="org.apache.xerces.dom.ElementNSImpl" />
	<method signature="java.lang.String getPrefix()" class="org.apache.xerces.dom.ElementNSImpl" />
	<method signature="void setPrefix(java.lang.String)" class="org.apache.xerces.dom.ElementNSImpl" />
	<method signature="boolean isDerivedFrom(java.lang.String,java.lang.String,int)" class="org.apache.xerces.dom.ElementNSImpl" />
	<method signature="void setType(org.apache.xerces.xs.XSTypeDefinition)" class="org.apache.xerces.dom.ElementNSImpl" />
	<method signature="java.lang.String getLocalName()" class="org.apache.xerces.dom.ElementNSImpl" />
	<method signature="java.lang.String getNamespaceURI()" class="org.apache.xerces.dom.ElementNSImpl" />
	<method signature="java.lang.String getTypeNamespace()" class="org.apache.xerces.dom.ElementNSImpl" />
	<method signature="java.lang.String getTypeName()" class="org.apache.xerces.dom.ElementNSImpl" />
	<class name="org.jfree.chart.entity.EntityCollection" />
	<method signature="void addAll(org.jfree.chart.entity.EntityCollection)" class="org.jfree.chart.entity.EntityCollection" />
	<method signature="java.util.Iterator iterator()" class="org.jfree.chart.entity.EntityCollection" />
	<method signature="void clear()" class="org.jfree.chart.entity.EntityCollection" />
	<method signature="java.util.Collection getEntities()" class="org.jfree.chart.entity.EntityCollection" />
	<method signature="org.jfree.chart.entity.ChartEntity getEntity(double,double)" class="org.jfree.chart.entity.EntityCollection" />
	<method signature="org.jfree.chart.entity.ChartEntity getEntity(int)" class="org.jfree.chart.entity.EntityCollection" />
	<method signature="void add(org.jfree.chart.entity.ChartEntity)" class="org.jfree.chart.entity.EntityCollection" />
	<method signature="int getEntityCount()" class="org.jfree.chart.entity.EntityCollection" />
	<class name="org.jfree.data.time.Hour" />
	<method signature="int getYear()" class="org.jfree.data.time.Hour" />
	<method signature="org.jfree.data.time.RegularTimePeriod previous()" class="org.jfree.data.time.Hour" />
	<method signature="org.jfree.data.time.Hour parseHour(java.lang.String)" class="org.jfree.data.time.Hour" />
	<method signature="long getLastMillisecond(java.util.Calendar)" class="org.jfree.data.time.Hour" />
	<method signature="int getDayOfMonth()" class="org.jfree.data.time.Hour" />
	<method signature="void &lt;init&gt;(java.util.Date)" class="org.jfree.data.time.Hour" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.time.Hour" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.time.Hour" />
	<method signature="long getFirstMillisecond()" class="org.jfree.data.time.Hour" />
	<method signature="void &lt;init&gt;(int,org.jfree.data.time.Day)" class="org.jfree.data.time.Hour" />
	<method signature="long getSerialIndex()" class="org.jfree.data.time.Hour" />
	<method signature="int compareTo(java.lang.Object)" class="org.jfree.data.time.Hour" />
	<method signature="int hashCode()" class="org.jfree.data.time.Hour" />
	<method signature="void &lt;init&gt;(java.util.Date,java.util.TimeZone)" class="org.jfree.data.time.Hour" />
	<method signature="long getLastMillisecond()" class="org.jfree.data.time.Hour" />
	<method signature="org.jfree.data.time.RegularTimePeriod next()" class="org.jfree.data.time.Hour" />
	<method signature="int getHour()" class="org.jfree.data.time.Hour" />
	<method signature="void &lt;init&gt;(int,int,int,int)" class="org.jfree.data.time.Hour" />
	<method signature="int getMonth()" class="org.jfree.data.time.Hour" />
	<method signature="void peg(java.util.Calendar)" class="org.jfree.data.time.Hour" />
	<method signature="void &lt;init&gt;(java.util.Date,java.util.TimeZone,java.util.Locale)" class="org.jfree.data.time.Hour" />
	<method signature="java.lang.String toString()" class="org.jfree.data.time.Hour" />
	<method signature="long getFirstMillisecond(java.util.Calendar)" class="org.jfree.data.time.Hour" />
	<method signature="org.jfree.data.time.Day getDay()" class="org.jfree.data.time.Hour" />
	<class name="javax.xml.transform.Source" />
	<method signature="java.lang.String getSystemId()" class="javax.xml.transform.Source" />
	<method signature="void setSystemId(java.lang.String)" class="javax.xml.transform.Source" />
	<class name="org.apache.wml.WMLInputElement" />
	<method signature="java.lang.String getName()" class="org.apache.wml.WMLInputElement" />
	<method signature="void setValue(java.lang.String)" class="org.apache.wml.WMLInputElement" />
	<method signature="int getMaxLength()" class="org.apache.wml.WMLInputElement" />
	<method signature="java.lang.String getXmlLang()" class="org.apache.wml.WMLInputElement" />
	<method signature="void setFormat(java.lang.String)" class="org.apache.wml.WMLInputElement" />
	<method signature="void setMaxLength(int)" class="org.apache.wml.WMLInputElement" />
	<method signature="void setEmptyOk(boolean)" class="org.apache.wml.WMLInputElement" />
	<method signature="int getSize()" class="org.apache.wml.WMLInputElement" />
	<method signature="void setTabIndex(int)" class="org.apache.wml.WMLInputElement" />
	<method signature="boolean getEmptyOk()" class="org.apache.wml.WMLInputElement" />
	<method signature="void setSize(int)" class="org.apache.wml.WMLInputElement" />
	<method signature="java.lang.String getTitle()" class="org.apache.wml.WMLInputElement" />
	<method signature="java.lang.String getValue()" class="org.apache.wml.WMLInputElement" />
	<method signature="int getTabIndex()" class="org.apache.wml.WMLInputElement" />
	<method signature="void setXmlLang(java.lang.String)" class="org.apache.wml.WMLInputElement" />
	<method signature="void setName(java.lang.String)" class="org.apache.wml.WMLInputElement" />
	<method signature="java.lang.String getType()" class="org.apache.wml.WMLInputElement" />
	<method signature="java.lang.String getFormat()" class="org.apache.wml.WMLInputElement" />
	<method signature="void setType(java.lang.String)" class="org.apache.wml.WMLInputElement" />
	<method signature="void setTitle(java.lang.String)" class="org.apache.wml.WMLInputElement" />
	<class name="org.jfree.base.modules.ModuleInitializer" />
	<method signature="void performInit()" class="org.jfree.base.modules.ModuleInitializer" />
	<class name="org.w3c.dom.html.HTMLLabelElement" />
	<method signature="void setAccessKey(java.lang.String)" class="org.w3c.dom.html.HTMLLabelElement" />
	<method signature="void setHtmlFor(java.lang.String)" class="org.w3c.dom.html.HTMLLabelElement" />
	<method signature="java.lang.String getHtmlFor()" class="org.w3c.dom.html.HTMLLabelElement" />
	<method signature="java.lang.String getAccessKey()" class="org.w3c.dom.html.HTMLLabelElement" />
	<method signature="org.w3c.dom.html.HTMLFormElement getForm()" class="org.w3c.dom.html.HTMLLabelElement" />
	<class name="org.apache.commons.lang3.concurrent.LazyInitializer" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.concurrent.LazyInitializer" />
	<method signature="java.lang.Object get()" class="org.apache.commons.lang3.concurrent.LazyInitializer" />
	<class name="org.apache.commons.lang3.mutable.MutableFloat" />
	<method signature="void setValue(float)" class="org.apache.commons.lang3.mutable.MutableFloat" />
	<method signature="void decrement()" class="org.apache.commons.lang3.mutable.MutableFloat" />
	<method signature="void &lt;init&gt;(float)" class="org.apache.commons.lang3.mutable.MutableFloat" />
	<method signature="int intValue()" class="org.apache.commons.lang3.mutable.MutableFloat" />
	<method signature="boolean equals(java.lang.Object)" class="org.apache.commons.lang3.mutable.MutableFloat" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.mutable.MutableFloat" />
	<method signature="void setValue(java.lang.Object)" class="org.apache.commons.lang3.mutable.MutableFloat" />
	<method signature="java.lang.Object getValue()" class="org.apache.commons.lang3.mutable.MutableFloat" />
	<method signature="double doubleValue()" class="org.apache.commons.lang3.mutable.MutableFloat" />
	<method signature="void subtract(float)" class="org.apache.commons.lang3.mutable.MutableFloat" />
	<method signature="float floatValue()" class="org.apache.commons.lang3.mutable.MutableFloat" />
	<method signature="void add(float)" class="org.apache.commons.lang3.mutable.MutableFloat" />
	<method signature="int compareTo(java.lang.Object)" class="org.apache.commons.lang3.mutable.MutableFloat" />
	<method signature="java.lang.Float getValue()" class="org.apache.commons.lang3.mutable.MutableFloat" />
	<method signature="int hashCode()" class="org.apache.commons.lang3.mutable.MutableFloat" />
	<method signature="boolean isInfinite()" class="org.apache.commons.lang3.mutable.MutableFloat" />
	<method signature="int compareTo(org.apache.commons.lang3.mutable.MutableFloat)" class="org.apache.commons.lang3.mutable.MutableFloat" />
	<method signature="void setValue(java.lang.Number)" class="org.apache.commons.lang3.mutable.MutableFloat" />
	<method signature="boolean isNaN()" class="org.apache.commons.lang3.mutable.MutableFloat" />
	<method signature="void increment()" class="org.apache.commons.lang3.mutable.MutableFloat" />
	<method signature="void &lt;init&gt;(java.lang.Number)" class="org.apache.commons.lang3.mutable.MutableFloat" />
	<method signature="java.lang.Float toFloat()" class="org.apache.commons.lang3.mutable.MutableFloat" />
	<method signature="java.lang.String toString()" class="org.apache.commons.lang3.mutable.MutableFloat" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.apache.commons.lang3.mutable.MutableFloat" />
	<method signature="void add(java.lang.Number)" class="org.apache.commons.lang3.mutable.MutableFloat" />
	<method signature="long longValue()" class="org.apache.commons.lang3.mutable.MutableFloat" />
	<method signature="void subtract(java.lang.Number)" class="org.apache.commons.lang3.mutable.MutableFloat" />
	<class name="org.jfree.data.xy.MatrixSeries" />
	<method signature="int getItemColumn(int)" class="org.jfree.data.xy.MatrixSeries" />
	<method signature="int getItemCount()" class="org.jfree.data.xy.MatrixSeries" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.xy.MatrixSeries" />
	<method signature="int getItemRow(int)" class="org.jfree.data.xy.MatrixSeries" />
	<method signature="int getRowCount()" class="org.jfree.data.xy.MatrixSeries" />
	<method signature="void zeroAll()" class="org.jfree.data.xy.MatrixSeries" />
	<method signature="void update(int,int,double)" class="org.jfree.data.xy.MatrixSeries" />
	<method signature="java.lang.Number getItem(int)" class="org.jfree.data.xy.MatrixSeries" />
	<method signature="int getColumnsCount()" class="org.jfree.data.xy.MatrixSeries" />
	<method signature="double get(int,int)" class="org.jfree.data.xy.MatrixSeries" />
	<method signature="void &lt;init&gt;(java.lang.String,int,int)" class="org.jfree.data.xy.MatrixSeries" />
	<class name="org.apache.xerces.impl.xs.XSLoaderImpl" />
	<method signature="boolean canSetParameter(java.lang.String,java.lang.Object)" class="org.apache.xerces.impl.xs.XSLoaderImpl" />
	<method signature="org.apache.xerces.xs.XSModel load(org.w3c.dom.ls.LSInput)" class="org.apache.xerces.impl.xs.XSLoaderImpl" />
	<method signature="org.w3c.dom.DOMStringList getParameterNames()" class="org.apache.xerces.impl.xs.XSLoaderImpl" />
	<method signature="java.lang.Object getParameter(java.lang.String)" class="org.apache.xerces.impl.xs.XSLoaderImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xs.XSLoaderImpl" />
	<method signature="void setParameter(java.lang.String,java.lang.Object)" class="org.apache.xerces.impl.xs.XSLoaderImpl" />
	<method signature="org.apache.xerces.xs.XSModel loadURIList(org.apache.xerces.xs.StringList)" class="org.apache.xerces.impl.xs.XSLoaderImpl" />
	<method signature="org.w3c.dom.DOMConfiguration getConfig()" class="org.apache.xerces.impl.xs.XSLoaderImpl" />
	<method signature="org.apache.xerces.xs.XSModel loadInputList(org.apache.xerces.xs.LSInputList)" class="org.apache.xerces.impl.xs.XSLoaderImpl" />
	<method signature="org.apache.xerces.xs.XSModel loadURI(java.lang.String)" class="org.apache.xerces.impl.xs.XSLoaderImpl" />
	<class name="org.apache.xerces.impl.xs.identity.Selector" />
	<method signature="org.apache.xerces.impl.xpath.XPath getXPath()" class="org.apache.xerces.impl.xs.identity.Selector" />
	<method signature="org.apache.xerces.impl.xs.identity.IdentityConstraint getIDConstraint()" class="org.apache.xerces.impl.xs.identity.Selector" />
	<method signature="org.apache.xerces.impl.xs.identity.XPathMatcher createMatcher(org.apache.xerces.impl.xs.identity.FieldActivator,int)" class="org.apache.xerces.impl.xs.identity.Selector" />
	<method signature="java.lang.String toString()" class="org.apache.xerces.impl.xs.identity.Selector" />
	<method signature="void &lt;init&gt;(org.apache.xerces.impl.xs.identity.Selector$XPath,org.apache.xerces.impl.xs.identity.IdentityConstraint)" class="org.apache.xerces.impl.xs.identity.Selector" />
	<class name="org.jfree.data.contour.NonGridContourDataset" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Object[],java.lang.Object[],java.lang.Object[])" class="org.jfree.data.contour.NonGridContourDataset" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.contour.NonGridContourDataset" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Object[],java.lang.Object[],java.lang.Object[],int,int,int)" class="org.jfree.data.contour.NonGridContourDataset" />
	<class name="tourma.data.CoachMatch" />
	<method signature="void setRoster1(tourma.data.RosterType)" class="tourma.data.CoachMatch" />
	<method signature="void setRoster2(tourma.data.RosterType)" class="tourma.data.CoachMatch" />
	<method signature="boolean isConcedeedBy1()" class="tourma.data.CoachMatch" />
	<method signature="void removeValue(tourma.data.Criteria)" class="tourma.data.CoachMatch" />
	<method signature="boolean isConcedeedBy2()" class="tourma.data.CoachMatch" />
	<method signature="tourma.data.Competitor getLooser()" class="tourma.data.CoachMatch" />
	<method signature="void putValue(tourma.data.Criteria,tourma.data.Value)" class="tourma.data.CoachMatch" />
	<method signature="void setXMLElement(org.jdom2.Element)" class="tourma.data.CoachMatch" />
	<method signature="tourma.data.Substitute getSubstitute1()" class="tourma.data.CoachMatch" />
	<method signature="tourma.data.Substitute getSubstitute2()" class="tourma.data.CoachMatch" />
	<method signature="boolean equals(java.lang.Object)" class="tourma.data.CoachMatch" />
	<method signature="void setConcedeedBy1(boolean)" class="tourma.data.CoachMatch" />
	<method signature="void setConcedeedBy2(boolean)" class="tourma.data.CoachMatch" />
	<method signature="int getValueCount()" class="tourma.data.CoachMatch" />
	<method signature="void setXMLElementForDisplay(org.jdom2.Element)" class="tourma.data.CoachMatch" />
	<method signature="int hashCode()" class="tourma.data.CoachMatch" />
	<method signature="boolean isRefusedBy2()" class="tourma.data.CoachMatch" />
	<method signature="boolean isRefusedBy1()" class="tourma.data.CoachMatch" />
	<method signature="void setSubstitute1(tourma.data.Substitute)" class="tourma.data.CoachMatch" />
	<method signature="void setSubstitute2(tourma.data.Substitute)" class="tourma.data.CoachMatch" />
	<method signature="tourma.data.RosterType getRoster2()" class="tourma.data.CoachMatch" />
	<method signature="tourma.data.Competitor getWinner()" class="tourma.data.CoachMatch" />
	<method signature="tourma.data.RosterType getRoster1()" class="tourma.data.CoachMatch" />
	<method signature="org.jdom2.Element getXMLElementForDisplay()" class="tourma.data.CoachMatch" />
	<method signature="void &lt;init&gt;(tourma.data.Round)" class="tourma.data.CoachMatch" />
	<method signature="org.jdom2.Element getXMLElement()" class="tourma.data.CoachMatch" />
	<method signature="tourma.data.Value getValue(tourma.data.Criteria)" class="tourma.data.CoachMatch" />
	<method signature="void resetWL()" class="tourma.data.CoachMatch" />
	<method signature="java.util.HashMap getValues()" class="tourma.data.CoachMatch" />
	<method signature="void setRefusedBy2(boolean)" class="tourma.data.CoachMatch" />
	<method signature="boolean isFullNaf()" class="tourma.data.CoachMatch" />
	<method signature="void setRefusedBy1(boolean)" class="tourma.data.CoachMatch" />
	<class name="org.jfree.chart.plot.dial.ArcDialFrame" />
	<method signature="double getInnerRadius()" class="org.jfree.chart.plot.dial.ArcDialFrame" />
	<method signature="boolean isClippedToWindow()" class="org.jfree.chart.plot.dial.ArcDialFrame" />
	<method signature="java.awt.Paint getForegroundPaint()" class="org.jfree.chart.plot.dial.ArcDialFrame" />
	<method signature="double getExtent()" class="org.jfree.chart.plot.dial.ArcDialFrame" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.plot.dial.ArcDialFrame" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.plot.dial.ArcDialFrame" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.plot.dial.ArcDialFrame" />
	<method signature="void setStartAngle(double)" class="org.jfree.chart.plot.dial.ArcDialFrame" />
	<method signature="void setOuterRadius(double)" class="org.jfree.chart.plot.dial.ArcDialFrame" />
	<method signature="int hashCode()" class="org.jfree.chart.plot.dial.ArcDialFrame" />
	<method signature="double getStartAngle()" class="org.jfree.chart.plot.dial.ArcDialFrame" />
	<method signature="double getOuterRadius()" class="org.jfree.chart.plot.dial.ArcDialFrame" />
	<method signature="void setExtent(double)" class="org.jfree.chart.plot.dial.ArcDialFrame" />
	<method signature="java.awt.Paint getBackgroundPaint()" class="org.jfree.chart.plot.dial.ArcDialFrame" />
	<method signature="java.awt.Shape getWindow(java.awt.geom.Rectangle2D)" class="org.jfree.chart.plot.dial.ArcDialFrame" />
	<method signature="void setInnerRadius(double)" class="org.jfree.chart.plot.dial.ArcDialFrame" />
	<method signature="void setStroke(java.awt.Stroke)" class="org.jfree.chart.plot.dial.ArcDialFrame" />
	<method signature="void setForegroundPaint(java.awt.Paint)" class="org.jfree.chart.plot.dial.ArcDialFrame" />
	<method signature="void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)" class="org.jfree.chart.plot.dial.ArcDialFrame" />
	<method signature="java.awt.Stroke getStroke()" class="org.jfree.chart.plot.dial.ArcDialFrame" />
	<method signature="void &lt;init&gt;(double,double)" class="org.jfree.chart.plot.dial.ArcDialFrame" />
	<method signature="void setBackgroundPaint(java.awt.Paint)" class="org.jfree.chart.plot.dial.ArcDialFrame" />
	<class name="org.jfree.ui.JTextObserver" />
	<method signature="void removeTextComponent(javax.swing.text.JTextComponent)" class="org.jfree.ui.JTextObserver" />
	<method signature="org.jfree.ui.JTextObserver getInstance()" class="org.jfree.ui.JTextObserver" />
	<method signature="void focusLost(java.awt.event.FocusEvent)" class="org.jfree.ui.JTextObserver" />
	<method signature="void addTextComponent(javax.swing.text.JTextComponent)" class="org.jfree.ui.JTextObserver" />
	<method signature="void focusGained(java.awt.event.FocusEvent)" class="org.jfree.ui.JTextObserver" />
	<class name="org.apache.html.dom.HTMLParamElementImpl" />
	<method signature="java.lang.String getName()" class="org.apache.html.dom.HTMLParamElementImpl" />
	<method signature="void setValue(java.lang.String)" class="org.apache.html.dom.HTMLParamElementImpl" />
	<method signature="void setValueType(java.lang.String)" class="org.apache.html.dom.HTMLParamElementImpl" />
	<method signature="java.lang.String getValue()" class="org.apache.html.dom.HTMLParamElementImpl" />
	<method signature="void setName(java.lang.String)" class="org.apache.html.dom.HTMLParamElementImpl" />
	<method signature="java.lang.String getType()" class="org.apache.html.dom.HTMLParamElementImpl" />
	<method signature="void setType(java.lang.String)" class="org.apache.html.dom.HTMLParamElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLParamElementImpl" />
	<method signature="java.lang.String getValueType()" class="org.apache.html.dom.HTMLParamElementImpl" />
	<class name="javax.annotation.Syntax" />
	<method signature="java.lang.String value()" class="javax.annotation.Syntax" />
	<method signature="javax.annotation.meta.When when()" class="javax.annotation.Syntax" />
	<class name="freemarker.cache.StatefulTemplateLoader" />
	<method signature="void resetState()" class="freemarker.cache.StatefulTemplateLoader" />
	<class name="com.hexidec.ekit.component.ExtendedHTMLDocument" />
	<method signature="void removeElements(javax.swing.text.Element,int,int)" class="com.hexidec.ekit.component.ExtendedHTMLDocument" />
	<method signature="void &lt;init&gt;(javax.swing.text.html.StyleSheet)" class="com.hexidec.ekit.component.ExtendedHTMLDocument" />
	<method signature="void &lt;init&gt;()" class="com.hexidec.ekit.component.ExtendedHTMLDocument" />
	<method signature="void replaceAttributes(javax.swing.text.Element,javax.swing.text.AttributeSet,javax.swing.text.html.HTML$Tag)" class="com.hexidec.ekit.component.ExtendedHTMLDocument" />
	<method signature="void &lt;init&gt;(javax.swing.text.AbstractDocument$Content,javax.swing.text.html.StyleSheet)" class="com.hexidec.ekit.component.ExtendedHTMLDocument" />
	<class name="org.jfree.chart.renderer.xy.XYBarPainter" />
	<method signature="void paintBar(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYBarRenderer,int,int,java.awt.geom.RectangularShape,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.renderer.xy.XYBarPainter" />
	<method signature="void paintBarShadow(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYBarRenderer,int,int,java.awt.geom.RectangularShape,org.jfree.ui.RectangleEdge,boolean)" class="org.jfree.chart.renderer.xy.XYBarPainter" />
	<class name="com.hexidec.ekit.component.MutableFilter" />
	<method signature="void &lt;init&gt;(java.lang.String[],java.lang.String)" class="com.hexidec.ekit.component.MutableFilter" />
	<method signature="boolean accept(java.io.File)" class="com.hexidec.ekit.component.MutableFilter" />
	<method signature="java.lang.String getDescription()" class="com.hexidec.ekit.component.MutableFilter" />
	<class name="org.apache.commons.lang3.time.FastDatePrinter" />
	<method signature="java.util.Locale getLocale()" class="org.apache.commons.lang3.time.FastDatePrinter" />
	<method signature="java.util.TimeZone getTimeZone()" class="org.apache.commons.lang3.time.FastDatePrinter" />
	<method signature="java.lang.String format(java.util.Date)" class="org.apache.commons.lang3.time.FastDatePrinter" />
	<method signature="java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)" class="org.apache.commons.lang3.time.FastDatePrinter" />
	<method signature="boolean equals(java.lang.Object)" class="org.apache.commons.lang3.time.FastDatePrinter" />
	<method signature="int getMaxLengthEstimate()" class="org.apache.commons.lang3.time.FastDatePrinter" />
	<method signature="int hashCode()" class="org.apache.commons.lang3.time.FastDatePrinter" />
	<method signature="java.lang.StringBuffer format(long,java.lang.StringBuffer)" class="org.apache.commons.lang3.time.FastDatePrinter" />
	<method signature="java.lang.String format(java.util.Calendar)" class="org.apache.commons.lang3.time.FastDatePrinter" />
	<method signature="java.lang.String toString()" class="org.apache.commons.lang3.time.FastDatePrinter" />
	<method signature="java.lang.String format(long)" class="org.apache.commons.lang3.time.FastDatePrinter" />
	<method signature="java.lang.StringBuffer format(java.util.Calendar,java.lang.StringBuffer)" class="org.apache.commons.lang3.time.FastDatePrinter" />
	<method signature="java.lang.String getPattern()" class="org.apache.commons.lang3.time.FastDatePrinter" />
	<method signature="java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer)" class="org.apache.commons.lang3.time.FastDatePrinter" />
	<class name="org.apache.wml.dom.WMLDOMImplementationImpl" />
	<method signature="org.w3c.dom.DOMImplementation getDOMImplementation()" class="org.apache.wml.dom.WMLDOMImplementationImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.wml.dom.WMLDOMImplementationImpl" />
	<class name="org.jfree.data.xy.IntervalXYDelegate" />
	<method signature="double getIntervalPositionFactor()" class="org.jfree.data.xy.IntervalXYDelegate" />
	<method signature="int hashCode()" class="org.jfree.data.xy.IntervalXYDelegate" />
	<method signature="void setIntervalPositionFactor(double)" class="org.jfree.data.xy.IntervalXYDelegate" />
	<method signature="double getEndXValue(int,int)" class="org.jfree.data.xy.IntervalXYDelegate" />
	<method signature="void &lt;init&gt;(org.jfree.data.xy.XYDataset)" class="org.jfree.data.xy.IntervalXYDelegate" />
	<method signature="void datasetChanged(org.jfree.data.general.DatasetChangeEvent)" class="org.jfree.data.xy.IntervalXYDelegate" />
	<method signature="void setFixedIntervalWidth(double)" class="org.jfree.data.xy.IntervalXYDelegate" />
	<method signature="double getDomainLowerBound(boolean)" class="org.jfree.data.xy.IntervalXYDelegate" />
	<method signature="double getIntervalWidth()" class="org.jfree.data.xy.IntervalXYDelegate" />
	<method signature="void &lt;init&gt;(org.jfree.data.xy.XYDataset,boolean)" class="org.jfree.data.xy.IntervalXYDelegate" />
	<method signature="org.jfree.data.Range getDomainBounds(boolean)" class="org.jfree.data.xy.IntervalXYDelegate" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.xy.IntervalXYDelegate" />
	<method signature="void setAutoWidth(boolean)" class="org.jfree.data.xy.IntervalXYDelegate" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.xy.IntervalXYDelegate" />
	<method signature="java.lang.Number getEndX(int,int)" class="org.jfree.data.xy.IntervalXYDelegate" />
	<method signature="double getStartXValue(int,int)" class="org.jfree.data.xy.IntervalXYDelegate" />
	<method signature="java.lang.Number getStartX(int,int)" class="org.jfree.data.xy.IntervalXYDelegate" />
	<method signature="boolean isAutoWidth()" class="org.jfree.data.xy.IntervalXYDelegate" />
	<method signature="double getFixedIntervalWidth()" class="org.jfree.data.xy.IntervalXYDelegate" />
	<method signature="double getDomainUpperBound(boolean)" class="org.jfree.data.xy.IntervalXYDelegate" />
	<class name="freemarker.cache.TemplateLoader" />
	<method signature="java.lang.Object findTemplateSource(java.lang.String)" class="freemarker.cache.TemplateLoader" />
	<method signature="long getLastModified(java.lang.Object)" class="freemarker.cache.TemplateLoader" />
	<method signature="void closeTemplateSource(java.lang.Object)" class="freemarker.cache.TemplateLoader" />
	<method signature="java.io.Reader getReader(java.lang.Object,java.lang.String)" class="freemarker.cache.TemplateLoader" />
	<class name="org.apache.wml.WMLHeadElement" />
	<class name="javax.xml.stream.events.NotationDeclaration" />
	<method signature="java.lang.String getSystemId()" class="javax.xml.stream.events.NotationDeclaration" />
	<method signature="java.lang.String getName()" class="javax.xml.stream.events.NotationDeclaration" />
	<method signature="java.lang.String getPublicId()" class="javax.xml.stream.events.NotationDeclaration" />
	<class name="org.apache.wml.WMLRefreshElement" />
	<class name="org.apache.xerces.impl.XMLEntityDescription" />
	<method signature="void setEntityName(java.lang.String)" class="org.apache.xerces.impl.XMLEntityDescription" />
	<method signature="java.lang.String getEntityName()" class="org.apache.xerces.impl.XMLEntityDescription" />
	<class name="org.apache.xerces.xni.parser.XMLDTDContentModelFilter" />
	<class name="org.apache.commons.lang3.text.FormattableUtils" />
	<method signature="java.util.Formatter append(java.lang.CharSequence,java.util.Formatter,int,int,int)" class="org.apache.commons.lang3.text.FormattableUtils" />
	<method signature="java.util.Formatter append(java.lang.CharSequence,java.util.Formatter,int,int,int,char)" class="org.apache.commons.lang3.text.FormattableUtils" />
	<method signature="java.util.Formatter append(java.lang.CharSequence,java.util.Formatter,int,int,int,char,java.lang.CharSequence)" class="org.apache.commons.lang3.text.FormattableUtils" />
	<method signature="java.lang.String toString(java.util.Formattable)" class="org.apache.commons.lang3.text.FormattableUtils" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.text.FormattableUtils" />
	<method signature="java.util.Formatter append(java.lang.CharSequence,java.util.Formatter,int,int,int,java.lang.CharSequence)" class="org.apache.commons.lang3.text.FormattableUtils" />
	<class name="org.jfree.chart.renderer.xy.YIntervalRenderer" />
	<method signature="org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)" class="org.jfree.chart.renderer.xy.YIntervalRenderer" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.renderer.xy.YIntervalRenderer" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)" class="org.jfree.chart.renderer.xy.YIntervalRenderer" />
	<method signature="void setAdditionalItemLabelGenerator(org.jfree.chart.labels.XYItemLabelGenerator)" class="org.jfree.chart.renderer.xy.YIntervalRenderer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.xy.YIntervalRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.xy.YIntervalRenderer" />
	<method signature="org.jfree.chart.labels.XYItemLabelGenerator getAdditionalItemLabelGenerator()" class="org.jfree.chart.renderer.xy.YIntervalRenderer" />
	<class name="org.apache.xerces.impl.dv.xs.SchemaDateTimeException" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.xs.SchemaDateTimeException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.apache.xerces.impl.dv.xs.SchemaDateTimeException" />
	<class name="org.apache.xerces.dom.DOMLocatorImpl" />
	<method signature="void &lt;init&gt;(int,int,int,org.w3c.dom.Node,java.lang.String)" class="org.apache.xerces.dom.DOMLocatorImpl" />
	<method signature="int getUtf16Offset()" class="org.apache.xerces.dom.DOMLocatorImpl" />
	<method signature="void &lt;init&gt;(int,int,int,org.w3c.dom.Node,java.lang.String,int)" class="org.apache.xerces.dom.DOMLocatorImpl" />
	<method signature="void &lt;init&gt;(int,int,java.lang.String)" class="org.apache.xerces.dom.DOMLocatorImpl" />
	<method signature="int getLineNumber()" class="org.apache.xerces.dom.DOMLocatorImpl" />
	<method signature="int getByteOffset()" class="org.apache.xerces.dom.DOMLocatorImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.dom.DOMLocatorImpl" />
	<method signature="void &lt;init&gt;(int,int,int,java.lang.String)" class="org.apache.xerces.dom.DOMLocatorImpl" />
	<method signature="java.lang.String getUri()" class="org.apache.xerces.dom.DOMLocatorImpl" />
	<method signature="int getColumnNumber()" class="org.apache.xerces.dom.DOMLocatorImpl" />
	<method signature="org.w3c.dom.Node getRelatedNode()" class="org.apache.xerces.dom.DOMLocatorImpl" />
	<class name="tourma.tableModel.MjtCriterias" />
	<method signature="boolean isCellEditable(int,int)" class="tourma.tableModel.MjtCriterias" />
	<method signature="java.awt.Component getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)" class="tourma.tableModel.MjtCriterias" />
	<method signature="int getRowCount()" class="tourma.tableModel.MjtCriterias" />
	<method signature="void setValueAt(java.lang.Object,int,int)" class="tourma.tableModel.MjtCriterias" />
	<method signature="java.lang.String getColumnName(int)" class="tourma.tableModel.MjtCriterias" />
	<method signature="java.lang.Class getColumnClass(int)" class="tourma.tableModel.MjtCriterias" />
	<method signature="java.lang.Object getValueAt(int,int)" class="tourma.tableModel.MjtCriterias" />
	<method signature="void &lt;init&gt;(tourma.data.Tournament)" class="tourma.tableModel.MjtCriterias" />
	<method signature="int getColumnCount()" class="tourma.tableModel.MjtCriterias" />
	<class name="edu.umd.cs.findbugs.annotations.DischargesObligation" />
	<class name="org.jfree.chart.renderer.xy.CandlestickRenderer" />
	<method signature="int getAutoWidthMethod()" class="org.jfree.chart.renderer.xy.CandlestickRenderer" />
	<method signature="java.awt.Paint getUpPaint()" class="org.jfree.chart.renderer.xy.CandlestickRenderer" />
	<method signature="void setDrawVolume(boolean)" class="org.jfree.chart.renderer.xy.CandlestickRenderer" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)" class="org.jfree.chart.renderer.xy.CandlestickRenderer" />
	<method signature="void setAutoWidthFactor(double)" class="org.jfree.chart.renderer.xy.CandlestickRenderer" />
	<method signature="double getAutoWidthFactor()" class="org.jfree.chart.renderer.xy.CandlestickRenderer" />
	<method signature="double getMaxCandleWidthInMilliseconds()" class="org.jfree.chart.renderer.xy.CandlestickRenderer" />
	<method signature="java.awt.Paint getDownPaint()" class="org.jfree.chart.renderer.xy.CandlestickRenderer" />
	<method signature="void setAutoWidthGap(double)" class="org.jfree.chart.renderer.xy.CandlestickRenderer" />
	<method signature="void setVolumePaint(java.awt.Paint)" class="org.jfree.chart.renderer.xy.CandlestickRenderer" />
	<method signature="java.awt.Paint getVolumePaint()" class="org.jfree.chart.renderer.xy.CandlestickRenderer" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.renderer.xy.CandlestickRenderer" />
	<method signature="void &lt;init&gt;(double)" class="org.jfree.chart.renderer.xy.CandlestickRenderer" />
	<method signature="void setMaxCandleWidthInMilliseconds(double)" class="org.jfree.chart.renderer.xy.CandlestickRenderer" />
	<method signature="boolean drawVolume()" class="org.jfree.chart.renderer.xy.CandlestickRenderer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.xy.CandlestickRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.xy.CandlestickRenderer" />
	<method signature="void setCandleWidth(double)" class="org.jfree.chart.renderer.xy.CandlestickRenderer" />
	<method signature="boolean getDrawVolume()" class="org.jfree.chart.renderer.xy.CandlestickRenderer" />
	<method signature="double getCandleWidth()" class="org.jfree.chart.renderer.xy.CandlestickRenderer" />
	<method signature="org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.renderer.xy.CandlestickRenderer" />
	<method signature="void setUseOutlinePaint(boolean)" class="org.jfree.chart.renderer.xy.CandlestickRenderer" />
	<method signature="boolean getUseOutlinePaint()" class="org.jfree.chart.renderer.xy.CandlestickRenderer" />
	<method signature="org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)" class="org.jfree.chart.renderer.xy.CandlestickRenderer" />
	<method signature="double getAutoWidthGap()" class="org.jfree.chart.renderer.xy.CandlestickRenderer" />
	<method signature="void setDownPaint(java.awt.Paint)" class="org.jfree.chart.renderer.xy.CandlestickRenderer" />
	<method signature="void setAutoWidthMethod(int)" class="org.jfree.chart.renderer.xy.CandlestickRenderer" />
	<method signature="void &lt;init&gt;(double,boolean,org.jfree.chart.labels.XYToolTipGenerator)" class="org.jfree.chart.renderer.xy.CandlestickRenderer" />
	<method signature="void setUpPaint(java.awt.Paint)" class="org.jfree.chart.renderer.xy.CandlestickRenderer" />
	<class name="org.w3c.dom.ls.LSInput" />
	<method signature="java.lang.String getSystemId()" class="org.w3c.dom.ls.LSInput" />
	<method signature="void setSystemId(java.lang.String)" class="org.w3c.dom.ls.LSInput" />
	<method signature="void setBaseURI(java.lang.String)" class="org.w3c.dom.ls.LSInput" />
	<method signature="java.lang.String getStringData()" class="org.w3c.dom.ls.LSInput" />
	<method signature="void setCharacterStream(java.io.Reader)" class="org.w3c.dom.ls.LSInput" />
	<method signature="java.lang.String getPublicId()" class="org.w3c.dom.ls.LSInput" />
	<method signature="void setStringData(java.lang.String)" class="org.w3c.dom.ls.LSInput" />
	<method signature="java.lang.String getEncoding()" class="org.w3c.dom.ls.LSInput" />
	<method signature="void setEncoding(java.lang.String)" class="org.w3c.dom.ls.LSInput" />
	<method signature="void setCertifiedText(boolean)" class="org.w3c.dom.ls.LSInput" />
	<method signature="java.io.Reader getCharacterStream()" class="org.w3c.dom.ls.LSInput" />
	<method signature="void setByteStream(java.io.InputStream)" class="org.w3c.dom.ls.LSInput" />
	<method signature="boolean getCertifiedText()" class="org.w3c.dom.ls.LSInput" />
	<method signature="java.io.InputStream getByteStream()" class="org.w3c.dom.ls.LSInput" />
	<method signature="void setPublicId(java.lang.String)" class="org.w3c.dom.ls.LSInput" />
	<method signature="java.lang.String getBaseURI()" class="org.w3c.dom.ls.LSInput" />
	<class name="org.jfree.chart.labels.SymbolicXYItemLabelGenerator" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.labels.SymbolicXYItemLabelGenerator" />
	<method signature="int hashCode()" class="org.jfree.chart.labels.SymbolicXYItemLabelGenerator" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.labels.SymbolicXYItemLabelGenerator" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.labels.SymbolicXYItemLabelGenerator" />
	<method signature="java.lang.String generateToolTip(org.jfree.data.xy.XYDataset,int,int)" class="org.jfree.chart.labels.SymbolicXYItemLabelGenerator" />
	<method signature="java.lang.String generateLabel(org.jfree.data.xy.XYDataset,int,int)" class="org.jfree.chart.labels.SymbolicXYItemLabelGenerator" />
	<class name="org.unbescape.xml.XmlEscapeLevel" />
	<method signature="int getEscapeLevel()" class="org.unbescape.xml.XmlEscapeLevel" />
	<method signature="org.unbescape.xml.XmlEscapeLevel forLevel(int)" class="org.unbescape.xml.XmlEscapeLevel" />
	<method signature="org.unbescape.xml.XmlEscapeLevel[] values()" class="org.unbescape.xml.XmlEscapeLevel" />
	<method signature="org.unbescape.xml.XmlEscapeLevel valueOf(java.lang.String)" class="org.unbescape.xml.XmlEscapeLevel" />
	<class name="org.jfree.data.xy.YWithXInterval" />
	<method signature="double getY()" class="org.jfree.data.xy.YWithXInterval" />
	<method signature="double getXLow()" class="org.jfree.data.xy.YWithXInterval" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.xy.YWithXInterval" />
	<method signature="void &lt;init&gt;(double,double,double)" class="org.jfree.data.xy.YWithXInterval" />
	<method signature="double getXHigh()" class="org.jfree.data.xy.YWithXInterval" />
	<class name="org.apache.xerces.parsers.XIncludeAwareParserConfiguration" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable)" class="org.apache.xerces.parsers.XIncludeAwareParserConfiguration" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable,org.apache.xerces.xni.grammars.XMLGrammarPool,org.apache.xerces.xni.parser.XMLComponentManager)" class="org.apache.xerces.parsers.XIncludeAwareParserConfiguration" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.parsers.XIncludeAwareParserConfiguration" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable,org.apache.xerces.xni.grammars.XMLGrammarPool)" class="org.apache.xerces.parsers.XIncludeAwareParserConfiguration" />
	<method signature="boolean getFeature(java.lang.String)" class="org.apache.xerces.parsers.XIncludeAwareParserConfiguration" />
	<method signature="void setFeature(java.lang.String,boolean)" class="org.apache.xerces.parsers.XIncludeAwareParserConfiguration" />
	<class name="org.jdom2.input.sax.XMLReaderXSDFactory" />
	<method signature="void &lt;init&gt;(java.lang.String[])" class="org.jdom2.input.sax.XMLReaderXSDFactory" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.ClassLoader,javax.xml.transform.Source[])" class="org.jdom2.input.sax.XMLReaderXSDFactory" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.ClassLoader,java.io.File[])" class="org.jdom2.input.sax.XMLReaderXSDFactory" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.ClassLoader,java.net.URL[])" class="org.jdom2.input.sax.XMLReaderXSDFactory" />
	<method signature="void &lt;init&gt;(javax.xml.transform.Source[])" class="org.jdom2.input.sax.XMLReaderXSDFactory" />
	<method signature="void &lt;init&gt;(java.net.URL[])" class="org.jdom2.input.sax.XMLReaderXSDFactory" />
	<method signature="void &lt;init&gt;(java.io.File[])" class="org.jdom2.input.sax.XMLReaderXSDFactory" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.ClassLoader,java.lang.String[])" class="org.jdom2.input.sax.XMLReaderXSDFactory" />
	<class name="org.apache.html.dom.HTMLScriptElementImpl" />
	<method signature="void setHtmlFor(java.lang.String)" class="org.apache.html.dom.HTMLScriptElementImpl" />
	<method signature="java.lang.String getEvent()" class="org.apache.html.dom.HTMLScriptElementImpl" />
	<method signature="java.lang.String getText()" class="org.apache.html.dom.HTMLScriptElementImpl" />
	<method signature="java.lang.String getSrc()" class="org.apache.html.dom.HTMLScriptElementImpl" />
	<method signature="void setText(java.lang.String)" class="org.apache.html.dom.HTMLScriptElementImpl" />
	<method signature="java.lang.String getCharset()" class="org.apache.html.dom.HTMLScriptElementImpl" />
	<method signature="boolean getDefer()" class="org.apache.html.dom.HTMLScriptElementImpl" />
	<method signature="java.lang.String getHtmlFor()" class="org.apache.html.dom.HTMLScriptElementImpl" />
	<method signature="void setSrc(java.lang.String)" class="org.apache.html.dom.HTMLScriptElementImpl" />
	<method signature="void setCharset(java.lang.String)" class="org.apache.html.dom.HTMLScriptElementImpl" />
	<method signature="java.lang.String getType()" class="org.apache.html.dom.HTMLScriptElementImpl" />
	<method signature="void setDefer(boolean)" class="org.apache.html.dom.HTMLScriptElementImpl" />
	<method signature="void setType(java.lang.String)" class="org.apache.html.dom.HTMLScriptElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLScriptElementImpl" />
	<method signature="void setEvent(java.lang.String)" class="org.apache.html.dom.HTMLScriptElementImpl" />
	<class name="edu.umd.cs.findbugs.annotations.NonNull" />
	<class name="com.google.zxing.oned.UPCAWriter" />
	<method signature="com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int)" class="com.google.zxing.oned.UPCAWriter" />
	<method signature="com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map)" class="com.google.zxing.oned.UPCAWriter" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.oned.UPCAWriter" />
	<class name="freemarker.core.LocalContext" />
	<method signature="java.util.Collection getLocalVariableNames()" class="freemarker.core.LocalContext" />
	<method signature="freemarker.template.TemplateModel getLocalVariable(java.lang.String)" class="freemarker.core.LocalContext" />
	<class name="org.apache.xerces.impl.xs.identity.UniqueOrKey" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,short)" class="org.apache.xerces.impl.xs.identity.UniqueOrKey" />
	<class name="com.google.zxing.common.reedsolomon.GenericGF" />
	<method signature="int getSize()" class="com.google.zxing.common.reedsolomon.GenericGF" />
	<method signature="void &lt;init&gt;(int,int)" class="com.google.zxing.common.reedsolomon.GenericGF" />
	<class name="javax.annotation.CheckForNull" />
	<class name="org.unbescape.html.HtmlEscapeLevel" />
	<method signature="org.unbescape.html.HtmlEscapeLevel forLevel(int)" class="org.unbescape.html.HtmlEscapeLevel" />
	<method signature="int getEscapeLevel()" class="org.unbescape.html.HtmlEscapeLevel" />
	<method signature="org.unbescape.html.HtmlEscapeLevel valueOf(java.lang.String)" class="org.unbescape.html.HtmlEscapeLevel" />
	<method signature="org.unbescape.html.HtmlEscapeLevel[] values()" class="org.unbescape.html.HtmlEscapeLevel" />
	<class name="org.xml.sax.helpers.NamespaceSupport" />
	<method signature="void reset()" class="org.xml.sax.helpers.NamespaceSupport" />
	<method signature="void popContext()" class="org.xml.sax.helpers.NamespaceSupport" />
	<method signature="void pushContext()" class="org.xml.sax.helpers.NamespaceSupport" />
	<method signature="java.lang.String getURI(java.lang.String)" class="org.xml.sax.helpers.NamespaceSupport" />
	<method signature="boolean isNamespaceDeclUris()" class="org.xml.sax.helpers.NamespaceSupport" />
	<method signature="java.util.Enumeration getPrefixes()" class="org.xml.sax.helpers.NamespaceSupport" />
	<method signature="java.lang.String[] processName(java.lang.String,java.lang.String[],boolean)" class="org.xml.sax.helpers.NamespaceSupport" />
	<method signature="java.lang.String getPrefix(java.lang.String)" class="org.xml.sax.helpers.NamespaceSupport" />
	<method signature="void &lt;init&gt;()" class="org.xml.sax.helpers.NamespaceSupport" />
	<method signature="void setNamespaceDeclUris(boolean)" class="org.xml.sax.helpers.NamespaceSupport" />
	<method signature="java.util.Enumeration getPrefixes(java.lang.String)" class="org.xml.sax.helpers.NamespaceSupport" />
	<method signature="boolean declarePrefix(java.lang.String,java.lang.String)" class="org.xml.sax.helpers.NamespaceSupport" />
	<method signature="java.util.Enumeration getDeclaredPrefixes()" class="org.xml.sax.helpers.NamespaceSupport" />
	<class name="freemarker.ext.jython.JythonSequenceModel" />
	<method signature="int size()" class="freemarker.ext.jython.JythonSequenceModel" />
	<method signature="void &lt;init&gt;(org.python.core.PyObject,freemarker.ext.jython.JythonWrapper)" class="freemarker.ext.jython.JythonSequenceModel" />
	<method signature="freemarker.template.TemplateModel get(int)" class="freemarker.ext.jython.JythonSequenceModel" />
	<method signature="freemarker.template.TemplateModelIterator iterator()" class="freemarker.ext.jython.JythonSequenceModel" />
	<class name="org.jfree.chart.renderer.xy.StackedXYAreaRenderer" />
	<method signature="org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)" class="org.jfree.chart.renderer.xy.StackedXYAreaRenderer" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)" class="org.jfree.chart.renderer.xy.StackedXYAreaRenderer" />
	<method signature="java.awt.Paint getShapePaint()" class="org.jfree.chart.renderer.xy.StackedXYAreaRenderer" />
	<method signature="int getPassCount()" class="org.jfree.chart.renderer.xy.StackedXYAreaRenderer" />
	<method signature="void setShapePaint(java.awt.Paint)" class="org.jfree.chart.renderer.xy.StackedXYAreaRenderer" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.renderer.xy.StackedXYAreaRenderer" />
	<method signature="void &lt;init&gt;(int)" class="org.jfree.chart.renderer.xy.StackedXYAreaRenderer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.xy.StackedXYAreaRenderer" />
	<method signature="void setShapeStroke(java.awt.Stroke)" class="org.jfree.chart.renderer.xy.StackedXYAreaRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.xy.StackedXYAreaRenderer" />
	<method signature="java.awt.Stroke getShapeStroke()" class="org.jfree.chart.renderer.xy.StackedXYAreaRenderer" />
	<method signature="void &lt;init&gt;(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" class="org.jfree.chart.renderer.xy.StackedXYAreaRenderer" />
	<method signature="org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.renderer.xy.StackedXYAreaRenderer" />
	<class name="tourma.data.ETeamPairing" />
	<method signature="tourma.data.ETeamPairing[] values()" class="tourma.data.ETeamPairing" />
	<method signature="tourma.data.ETeamPairing valueOf(java.lang.String)" class="tourma.data.ETeamPairing" />
	<class name="freemarker.template.TemplateDateModel" />
	<method signature="java.util.Date getAsDate()" class="freemarker.template.TemplateDateModel" />
	<method signature="int getDateType()" class="freemarker.template.TemplateDateModel" />
	<class name="org.apache.xerces.xinclude.XIncludeHandler$Notation" />
	<method signature="boolean equals(java.lang.Object)" class="org.apache.xerces.xinclude.XIncludeHandler$Notation" />
	<method signature="boolean isDuplicate(java.lang.Object)" class="org.apache.xerces.xinclude.XIncludeHandler$Notation" />
	<class name="org.jfree.chart.axis.DateTick" />
	<method signature="int hashCode()" class="org.jfree.chart.axis.DateTick" />
	<method signature="java.util.Date getDate()" class="org.jfree.chart.axis.DateTick" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.axis.DateTick" />
	<method signature="void &lt;init&gt;(org.jfree.chart.axis.TickType,java.util.Date,java.lang.String,org.jfree.ui.TextAnchor,org.jfree.ui.TextAnchor,double)" class="org.jfree.chart.axis.DateTick" />
	<method signature="void &lt;init&gt;(java.util.Date,java.lang.String,org.jfree.ui.TextAnchor,org.jfree.ui.TextAnchor,double)" class="org.jfree.chart.axis.DateTick" />
	<class name="tourma.views.parameters.JPNParamTeam" />
	<method signature="void &lt;init&gt;()" class="tourma.views.parameters.JPNParamTeam" />
	<method signature="void update()" class="tourma.views.parameters.JPNParamTeam" />
	<class name="javax.annotation.concurrent.ThreadSafe" />
	<class name="org.xml.sax.ext.Attributes2Impl" />
	<method signature="boolean isDeclared(java.lang.String,java.lang.String)" class="org.xml.sax.ext.Attributes2Impl" />
	<method signature="void removeAttribute(int)" class="org.xml.sax.ext.Attributes2Impl" />
	<method signature="boolean isDeclared(int)" class="org.xml.sax.ext.Attributes2Impl" />
	<method signature="void &lt;init&gt;(org.xml.sax.Attributes)" class="org.xml.sax.ext.Attributes2Impl" />
	<method signature="boolean isSpecified(java.lang.String,java.lang.String)" class="org.xml.sax.ext.Attributes2Impl" />
	<method signature="void setDeclared(int,boolean)" class="org.xml.sax.ext.Attributes2Impl" />
	<method signature="void setSpecified(int,boolean)" class="org.xml.sax.ext.Attributes2Impl" />
	<method signature="boolean isSpecified(int)" class="org.xml.sax.ext.Attributes2Impl" />
	<method signature="void addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.xml.sax.ext.Attributes2Impl" />
	<method signature="void setAttributes(org.xml.sax.Attributes)" class="org.xml.sax.ext.Attributes2Impl" />
	<method signature="boolean isSpecified(java.lang.String)" class="org.xml.sax.ext.Attributes2Impl" />
	<method signature="void &lt;init&gt;()" class="org.xml.sax.ext.Attributes2Impl" />
	<method signature="boolean isDeclared(java.lang.String)" class="org.xml.sax.ext.Attributes2Impl" />
	<class name="tourma.views.parameters.JPNParamClan" />
	<method signature="void update()" class="tourma.views.parameters.JPNParamClan" />
	<method signature="void &lt;init&gt;()" class="tourma.views.parameters.JPNParamClan" />
	<class name="org.jfree.chart.resources.JFreeChartResources" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.resources.JFreeChartResources" />
	<method signature="java.lang.Object[][] getContents()" class="org.jfree.chart.resources.JFreeChartResources" />
	<class name="org.apache.xerces.impl.XMLEntityManager$ScannedEntity" />
	<method signature="int getLineNumber()" class="org.apache.xerces.impl.XMLEntityManager$ScannedEntity" />
	<method signature="void &lt;init&gt;(org.apache.xerces.impl.XMLEntityManager,java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,java.io.InputStream,java.io.Reader,byte[],java.lang.String,boolean,boolean,boolean)" class="org.apache.xerces.impl.XMLEntityManager$ScannedEntity" />
	<method signature="boolean isEncodingExternallySpecified()" class="org.apache.xerces.impl.XMLEntityManager$ScannedEntity" />
	<method signature="java.lang.String getLiteralSystemId()" class="org.apache.xerces.impl.XMLEntityManager$ScannedEntity" />
	<method signature="void setReader(java.io.InputStream,java.lang.String,java.lang.Boolean)" class="org.apache.xerces.impl.XMLEntityManager$ScannedEntity" />
	<method signature="boolean isUnparsed()" class="org.apache.xerces.impl.XMLEntityManager$ScannedEntity" />
	<method signature="java.lang.String getEncoding()" class="org.apache.xerces.impl.XMLEntityManager$ScannedEntity" />
	<method signature="int getCharacterOffset()" class="org.apache.xerces.impl.XMLEntityManager$ScannedEntity" />
	<method signature="java.lang.String getExpandedSystemId()" class="org.apache.xerces.impl.XMLEntityManager$ScannedEntity" />
	<method signature="void setEncodingExternallySpecified(boolean)" class="org.apache.xerces.impl.XMLEntityManager$ScannedEntity" />
	<method signature="boolean isExternal()" class="org.apache.xerces.impl.XMLEntityManager$ScannedEntity" />
	<method signature="java.lang.String toString()" class="org.apache.xerces.impl.XMLEntityManager$ScannedEntity" />
	<method signature="int getColumnNumber()" class="org.apache.xerces.impl.XMLEntityManager$ScannedEntity" />
	<method signature="java.lang.String getXMLVersion()" class="org.apache.xerces.impl.XMLEntityManager$ScannedEntity" />
	<class name="org.apache.xerces.parsers.CachingParserPool" />
	<method signature="org.apache.xerces.util.SymbolTable getSymbolTable()" class="org.apache.xerces.parsers.CachingParserPool" />
	<method signature="org.apache.xerces.parsers.SAXParser createSAXParser()" class="org.apache.xerces.parsers.CachingParserPool" />
	<method signature="org.apache.xerces.xni.grammars.XMLGrammarPool getXMLGrammarPool()" class="org.apache.xerces.parsers.CachingParserPool" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.parsers.CachingParserPool" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable,org.apache.xerces.xni.grammars.XMLGrammarPool)" class="org.apache.xerces.parsers.CachingParserPool" />
	<method signature="void setShadowSymbolTable(boolean)" class="org.apache.xerces.parsers.CachingParserPool" />
	<method signature="org.apache.xerces.parsers.DOMParser createDOMParser()" class="org.apache.xerces.parsers.CachingParserPool" />
	<class name="org.jfree.chart.urls.CustomXYURLGenerator" />
	<method signature="java.lang.String generateURL(org.jfree.data.xy.XYDataset,int,int)" class="org.jfree.chart.urls.CustomXYURLGenerator" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.urls.CustomXYURLGenerator" />
	<method signature="java.lang.String getURL(int,int)" class="org.jfree.chart.urls.CustomXYURLGenerator" />
	<method signature="void addURLSeries(java.util.List)" class="org.jfree.chart.urls.CustomXYURLGenerator" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.urls.CustomXYURLGenerator" />
	<method signature="int getListCount()" class="org.jfree.chart.urls.CustomXYURLGenerator" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.urls.CustomXYURLGenerator" />
	<method signature="int getURLCount(int)" class="org.jfree.chart.urls.CustomXYURLGenerator" />
	<class name="org.apache.commons.lang3.reflect.TypeLiteral" />
	<method signature="int hashCode()" class="org.apache.commons.lang3.reflect.TypeLiteral" />
	<method signature="boolean equals(java.lang.Object)" class="org.apache.commons.lang3.reflect.TypeLiteral" />
	<method signature="java.lang.String toString()" class="org.apache.commons.lang3.reflect.TypeLiteral" />
	<method signature="java.lang.reflect.Type getType()" class="org.apache.commons.lang3.reflect.TypeLiteral" />
	<class name="org.jfree.chart.event.TitleChangeEvent" />
	<method signature="org.jfree.chart.title.Title getTitle()" class="org.jfree.chart.event.TitleChangeEvent" />
	<method signature="void &lt;init&gt;(org.jfree.chart.title.Title)" class="org.jfree.chart.event.TitleChangeEvent" />
	<class name="org.apache.xerces.impl.dv.xs.DoubleDV" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.xs.DoubleDV" />
	<method signature="java.lang.Object getActualValue(java.lang.String,org.apache.xerces.impl.dv.ValidationContext)" class="org.apache.xerces.impl.dv.xs.DoubleDV" />
	<method signature="boolean isIdentical(java.lang.Object,java.lang.Object)" class="org.apache.xerces.impl.dv.xs.DoubleDV" />
	<method signature="int compare(java.lang.Object,java.lang.Object)" class="org.apache.xerces.impl.dv.xs.DoubleDV" />
	<method signature="short getAllowedFacets()" class="org.apache.xerces.impl.dv.xs.DoubleDV" />
	<class name="org.apache.xerces.impl.xpath.XPathException" />
	<method signature="java.lang.String getKey()" class="org.apache.xerces.impl.xpath.XPathException" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xpath.XPathException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.apache.xerces.impl.xpath.XPathException" />
	<class name="org.apache.xerces.xs.datatypes.XSDateTime" />
	<method signature="boolean isNormalized()" class="org.apache.xerces.xs.datatypes.XSDateTime" />
	<method signature="int getYears()" class="org.apache.xerces.xs.datatypes.XSDateTime" />
	<method signature="double getSeconds()" class="org.apache.xerces.xs.datatypes.XSDateTime" />
	<method signature="java.lang.String getLexicalValue()" class="org.apache.xerces.xs.datatypes.XSDateTime" />
	<method signature="int getHours()" class="org.apache.xerces.xs.datatypes.XSDateTime" />
	<method signature="int getDays()" class="org.apache.xerces.xs.datatypes.XSDateTime" />
	<method signature="boolean hasTimeZone()" class="org.apache.xerces.xs.datatypes.XSDateTime" />
	<method signature="int getTimeZoneHours()" class="org.apache.xerces.xs.datatypes.XSDateTime" />
	<method signature="javax.xml.datatype.XMLGregorianCalendar getXMLGregorianCalendar()" class="org.apache.xerces.xs.datatypes.XSDateTime" />
	<method signature="int getTimeZoneMinutes()" class="org.apache.xerces.xs.datatypes.XSDateTime" />
	<method signature="org.apache.xerces.xs.datatypes.XSDateTime normalize()" class="org.apache.xerces.xs.datatypes.XSDateTime" />
	<method signature="javax.xml.datatype.Duration getDuration()" class="org.apache.xerces.xs.datatypes.XSDateTime" />
	<method signature="int getMonths()" class="org.apache.xerces.xs.datatypes.XSDateTime" />
	<method signature="int getMinutes()" class="org.apache.xerces.xs.datatypes.XSDateTime" />
	<class name="com.hexidec.ekit.component.ExtendedHTMLEditorKit$HTMLFactoryExtended" />
	<method signature="javax.swing.text.View create(javax.swing.text.Element)" class="com.hexidec.ekit.component.ExtendedHTMLEditorKit$HTMLFactoryExtended" />
	<method signature="void &lt;init&gt;()" class="com.hexidec.ekit.component.ExtendedHTMLEditorKit$HTMLFactoryExtended" />
	<class name="org.jfree.chart.editor.DefaultChartEditorFactory" />
	<method signature="org.jfree.chart.editor.ChartEditor createEditor(org.jfree.chart.JFreeChart)" class="org.jfree.chart.editor.DefaultChartEditorFactory" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.editor.DefaultChartEditorFactory" />
	<class name="org.w3c.dom.ls.LSSerializer" />
	<method signature="void setNewLine(java.lang.String)" class="org.w3c.dom.ls.LSSerializer" />
	<method signature="org.w3c.dom.ls.LSSerializerFilter getFilter()" class="org.w3c.dom.ls.LSSerializer" />
	<method signature="java.lang.String getNewLine()" class="org.w3c.dom.ls.LSSerializer" />
	<method signature="boolean writeToURI(org.w3c.dom.Node,java.lang.String)" class="org.w3c.dom.ls.LSSerializer" />
	<method signature="org.w3c.dom.DOMConfiguration getDomConfig()" class="org.w3c.dom.ls.LSSerializer" />
	<method signature="void setFilter(org.w3c.dom.ls.LSSerializerFilter)" class="org.w3c.dom.ls.LSSerializer" />
	<method signature="boolean write(org.w3c.dom.Node,org.w3c.dom.ls.LSOutput)" class="org.w3c.dom.ls.LSSerializer" />
	<method signature="java.lang.String writeToString(org.w3c.dom.Node)" class="org.w3c.dom.ls.LSSerializer" />
	<class name="org.apache.wml.dom.WMLBrElementImpl" />
	<method signature="java.lang.String getXmlLang()" class="org.apache.wml.dom.WMLBrElementImpl" />
	<method signature="void setXmlLang(java.lang.String)" class="org.apache.wml.dom.WMLBrElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.wml.dom.WMLDocumentImpl,java.lang.String)" class="org.apache.wml.dom.WMLBrElementImpl" />
	<method signature="java.lang.String getId()" class="org.apache.wml.dom.WMLBrElementImpl" />
	<method signature="java.lang.String getClassName()" class="org.apache.wml.dom.WMLBrElementImpl" />
	<method signature="void setClassName(java.lang.String)" class="org.apache.wml.dom.WMLBrElementImpl" />
	<method signature="void setId(java.lang.String)" class="org.apache.wml.dom.WMLBrElementImpl" />
	<class name="org.jfree.util.ClassComparator" />
	<method signature="void &lt;init&gt;()" class="org.jfree.util.ClassComparator" />
	<method signature="boolean isComparable(java.lang.Class,java.lang.Class)" class="org.jfree.util.ClassComparator" />
	<method signature="int compare(java.lang.Object,java.lang.Object)" class="org.jfree.util.ClassComparator" />
	<class name="org.jfree.data.xy.IntervalXYDataset" />
	<method signature="double getEndYValue(int,int)" class="org.jfree.data.xy.IntervalXYDataset" />
	<method signature="double getEndXValue(int,int)" class="org.jfree.data.xy.IntervalXYDataset" />
	<method signature="double getStartYValue(int,int)" class="org.jfree.data.xy.IntervalXYDataset" />
	<method signature="java.lang.Number getEndX(int,int)" class="org.jfree.data.xy.IntervalXYDataset" />
	<method signature="double getStartXValue(int,int)" class="org.jfree.data.xy.IntervalXYDataset" />
	<method signature="java.lang.Number getStartX(int,int)" class="org.jfree.data.xy.IntervalXYDataset" />
	<method signature="java.lang.Number getStartY(int,int)" class="org.jfree.data.xy.IntervalXYDataset" />
	<method signature="java.lang.Number getEndY(int,int)" class="org.jfree.data.xy.IntervalXYDataset" />
	<class name="org.jfree.data.general.DatasetChangeEvent" />
	<method signature="void &lt;init&gt;(java.lang.Object,org.jfree.data.general.Dataset)" class="org.jfree.data.general.DatasetChangeEvent" />
	<method signature="org.jfree.data.general.Dataset getDataset()" class="org.jfree.data.general.DatasetChangeEvent" />
	<class name="org.apache.commons.lang3.JavaVersion" />
	<method signature="java.lang.String toString()" class="org.apache.commons.lang3.JavaVersion" />
	<method signature="boolean atLeast(org.apache.commons.lang3.JavaVersion)" class="org.apache.commons.lang3.JavaVersion" />
	<method signature="org.apache.commons.lang3.JavaVersion[] values()" class="org.apache.commons.lang3.JavaVersion" />
	<method signature="org.apache.commons.lang3.JavaVersion valueOf(java.lang.String)" class="org.apache.commons.lang3.JavaVersion" />
	<class name="com.google.zxing.qrcode.detector.Detector" />
	<method signature="com.google.zxing.common.DetectorResult detect()" class="com.google.zxing.qrcode.detector.Detector" />
	<method signature="void &lt;init&gt;(com.google.zxing.common.BitMatrix)" class="com.google.zxing.qrcode.detector.Detector" />
	<method signature="com.google.zxing.common.DetectorResult detect(java.util.Map)" class="com.google.zxing.qrcode.detector.Detector" />
	<class name="freemarker.core.Environment$Namespace" />
	<method signature="freemarker.template.Template getTemplate()" class="freemarker.core.Environment$Namespace" />
	<class name="org.jfree.data.xy.OHLCDataItem" />
	<method signature="int compareTo(java.lang.Object)" class="org.jfree.data.xy.OHLCDataItem" />
	<method signature="java.lang.Number getLow()" class="org.jfree.data.xy.OHLCDataItem" />
	<method signature="java.util.Date getDate()" class="org.jfree.data.xy.OHLCDataItem" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.xy.OHLCDataItem" />
	<method signature="java.lang.Number getClose()" class="org.jfree.data.xy.OHLCDataItem" />
	<method signature="java.lang.Number getVolume()" class="org.jfree.data.xy.OHLCDataItem" />
	<method signature="java.lang.Number getOpen()" class="org.jfree.data.xy.OHLCDataItem" />
	<method signature="void &lt;init&gt;(java.util.Date,double,double,double,double,double)" class="org.jfree.data.xy.OHLCDataItem" />
	<method signature="java.lang.Number getHigh()" class="org.jfree.data.xy.OHLCDataItem" />
	<class name="org.w3c.dom.html.HTMLButtonElement" />
	<method signature="void setAccessKey(java.lang.String)" class="org.w3c.dom.html.HTMLButtonElement" />
	<method signature="java.lang.String getName()" class="org.w3c.dom.html.HTMLButtonElement" />
	<method signature="void setValue(java.lang.String)" class="org.w3c.dom.html.HTMLButtonElement" />
	<method signature="void setTabIndex(int)" class="org.w3c.dom.html.HTMLButtonElement" />
	<method signature="boolean getDisabled()" class="org.w3c.dom.html.HTMLButtonElement" />
	<method signature="void setDisabled(boolean)" class="org.w3c.dom.html.HTMLButtonElement" />
	<method signature="java.lang.String getValue()" class="org.w3c.dom.html.HTMLButtonElement" />
	<method signature="int getTabIndex()" class="org.w3c.dom.html.HTMLButtonElement" />
	<method signature="void setName(java.lang.String)" class="org.w3c.dom.html.HTMLButtonElement" />
	<method signature="java.lang.String getType()" class="org.w3c.dom.html.HTMLButtonElement" />
	<method signature="java.lang.String getAccessKey()" class="org.w3c.dom.html.HTMLButtonElement" />
	<method signature="org.w3c.dom.html.HTMLFormElement getForm()" class="org.w3c.dom.html.HTMLButtonElement" />
	<class name="freemarker.template.SimpleList" />
	<method signature="void &lt;init&gt;(java.util.List)" class="freemarker.template.SimpleList" />
	<method signature="void &lt;init&gt;()" class="freemarker.template.SimpleList" />
	<class name="org.apache.xerces.impl.XML11NSDocumentScannerImpl$NS11ContentDispatcher" />
	<class name="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setDomainAxes(org.jfree.chart.axis.CategoryAxis[])" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setShadowGenerator(org.jfree.chart.util.ShadowGenerator)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setDomainAxis(int,org.jfree.chart.axis.CategoryAxis)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.ui.Layer)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setRangeZeroBaselinePaint(java.awt.Paint)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setRangeCrosshairValue(double)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="boolean isRangeZeroBaselineVisible()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setRangeMinorGridlinePaint(java.awt.Paint)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setRangeCrosshairVisible(boolean)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setDrawSharedDomainAxis(boolean)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="java.lang.Comparable getDomainCrosshairColumnKey()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setRangeMinorGridlinesVisible(boolean)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="boolean getDrawSharedDomainAxis()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void addRangeMarker(org.jfree.chart.plot.Marker)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void panRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="boolean removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.ui.Layer)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="java.awt.Stroke getDomainGridlineStroke()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="java.util.Collection getRangeMarkers(org.jfree.ui.Layer)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void clearRangeMarkers()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="boolean removeDomainMarker(org.jfree.chart.plot.Marker)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="java.awt.Stroke getRangeZeroBaselineStroke()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="boolean removeDomainMarker(org.jfree.chart.plot.Marker,org.jfree.ui.Layer)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="java.util.Collection getRangeMarkers(int,org.jfree.ui.Layer)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="int getRangeAxisCount()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="int getIndexOf(org.jfree.chart.renderer.category.CategoryItemRenderer)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setRenderer(int,org.jfree.chart.renderer.category.CategoryItemRenderer)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setRangeGridlineStroke(java.awt.Stroke)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setRenderers(org.jfree.chart.renderer.category.CategoryItemRenderer[])" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void rendererChanged(org.jfree.chart.event.RendererChangeEvent)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="java.util.List getCategories()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void addDomainMarker(org.jfree.chart.plot.CategoryMarker)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void zoom(double)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="org.jfree.chart.axis.CategoryAxis getDomainAxis()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void addAnnotation(org.jfree.chart.annotations.CategoryAnnotation)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="org.jfree.util.SortOrder getColumnRenderingOrder()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="org.jfree.chart.axis.AxisLocation getDomainAxisLocation()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="boolean isDomainZoomable()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void clearDomainAxes()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setRangeMinorGridlineStroke(java.awt.Stroke)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="boolean isRangePannable()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void addRangeMarker(org.jfree.chart.plot.Marker,org.jfree.ui.Layer)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void configureDomainAxes()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="org.jfree.chart.renderer.category.CategoryItemRenderer getRenderer(int)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setRenderer(org.jfree.chart.renderer.category.CategoryItemRenderer,boolean)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="boolean removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.ui.Layer,boolean)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="double getAnchorValue()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void clearDomainMarkers(int)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="org.jfree.chart.LegendItemCollection getLegendItems()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setDomainCrosshairStroke(java.awt.Stroke)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void configureRangeAxes()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void clearAnnotations()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="org.jfree.chart.renderer.category.CategoryItemRenderer getRendererForDataset(org.jfree.data.category.CategoryDataset)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="boolean removeRangeMarker(org.jfree.chart.plot.Marker)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="org.jfree.chart.axis.ValueAxis getRangeAxis()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="java.awt.Paint getDomainCrosshairPaint()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setDomainCrosshairColumnKey(java.lang.Comparable,boolean)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="boolean removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation,boolean)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void clearRangeAxes()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setRangeAxisLocation(org.jfree.chart.axis.AxisLocation)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void clearRangeMarkers(int)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="boolean removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.ui.Layer)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="org.jfree.ui.RectangleEdge getDomainAxisEdge(int)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="org.jfree.chart.plot.PlotOrientation getOrientation()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setRangeZeroBaselineVisible(boolean)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void annotationChanged(org.jfree.chart.event.AnnotationChangeEvent)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setDomainAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setRangePannable(boolean)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="java.util.Collection getDomainMarkers(org.jfree.ui.Layer)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setRangeCrosshairStroke(java.awt.Stroke)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="java.util.List getAnnotations()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setRangeCrosshairLockedOnData(boolean)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setCrosshairDatasetIndex(int,boolean)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setDataset(int,org.jfree.data.category.CategoryDataset)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setColumnRenderingOrder(org.jfree.util.SortOrder)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setRangeAxis(org.jfree.chart.axis.ValueAxis)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setDataset(org.jfree.data.category.CategoryDataset)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setDomainCrosshairColumnKey(java.lang.Comparable)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="org.jfree.chart.axis.AxisSpace getFixedDomainAxisSpace()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setRenderer(int,org.jfree.chart.renderer.category.CategoryItemRenderer,boolean)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void clearDomainMarkers()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="boolean removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.ui.Layer,boolean)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="int getDomainAxisCount()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="java.util.Collection getDomainMarkers(int,org.jfree.ui.Layer)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setRangeCrosshairValue(double,boolean)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="org.jfree.ui.RectangleEdge getDomainAxisEdge()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="org.jfree.chart.axis.AxisLocation getRangeAxisLocation()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="double getRangeCrosshairValue()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setDomainGridlinePaint(java.awt.Paint)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setRangeAxis(int,org.jfree.chart.axis.ValueAxis,boolean)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="int getDomainAxisIndex(org.jfree.chart.axis.CategoryAxis)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setOrientation(org.jfree.chart.plot.PlotOrientation)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.ui.Layer,boolean)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void mapDatasetToRangeAxis(int,int)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="int getCrosshairDatasetIndex()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="java.awt.Paint getRangeMinorGridlinePaint()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setDomainGridlinePosition(org.jfree.chart.axis.CategoryAnchor)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="boolean removeRangeMarker(org.jfree.chart.plot.Marker,org.jfree.ui.Layer)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="java.awt.Paint getRangeZeroBaselinePaint()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="boolean isDomainGridlinesVisible()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setDomainCrosshairRowKey(java.lang.Comparable)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void mapDatasetToDomainAxes(int,java.util.List)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="java.lang.Comparable getDomainCrosshairRowKey()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setFixedLegendItems(org.jfree.chart.LegendItemCollection)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="java.awt.Stroke getRangeCrosshairStroke()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void zoomDomainAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="int getWeight()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="boolean render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.CategoryCrosshairState)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="java.awt.Paint getDomainGridlinePaint()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="boolean isDomainPannable()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setAnchorValue(double,boolean)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="java.lang.String getPlotType()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setRangeAxes(org.jfree.chart.axis.ValueAxis[])" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setAxisOffset(org.jfree.ui.RectangleInsets)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void addDomainMarker(org.jfree.chart.plot.CategoryMarker,org.jfree.ui.Layer)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="java.awt.Stroke getRangeMinorGridlineStroke()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setRangeZeroBaselineStroke(java.awt.Stroke)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void addDomainMarker(int,org.jfree.chart.plot.CategoryMarker,org.jfree.ui.Layer)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setRangeCrosshairPaint(java.awt.Paint)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setDomainCrosshairRowKey(java.lang.Comparable,boolean)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="org.jfree.chart.axis.CategoryAnchor getDomainGridlinePosition()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setRangeAxis(int,org.jfree.chart.axis.ValueAxis)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="org.jfree.chart.axis.AxisSpace getFixedRangeAxisSpace()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="int getDatasetCount()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="java.util.List getCategoriesForAxis(org.jfree.chart.axis.CategoryAxis)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setDatasetRenderingOrder(org.jfree.chart.plot.DatasetRenderingOrder)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="boolean isRangeMinorGridlinesVisible()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="org.jfree.chart.axis.AxisLocation getDomainAxisLocation(int)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void addAnnotation(org.jfree.chart.annotations.CategoryAnnotation,boolean)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="org.jfree.chart.LegendItemCollection getFixedLegendItems()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setWeight(int)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void panDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="boolean isRangeCrosshairVisible()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setRangeGridlinePaint(java.awt.Paint)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setDomainCrosshairPaint(java.awt.Paint)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void mapDatasetToRangeAxes(int,java.util.List)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="org.jfree.chart.renderer.category.CategoryItemRenderer getRenderer()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="org.jfree.chart.util.ShadowGenerator getShadowGenerator()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void mapDatasetToDomainAxis(int,int)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="java.awt.Paint getRangeGridlinePaint()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="org.jfree.ui.RectangleEdge getRangeAxisEdge()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void addDomainMarker(int,org.jfree.chart.plot.CategoryMarker,org.jfree.ui.Layer,boolean)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="int getRendererCount()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setDomainGridlineStroke(java.awt.Stroke)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="org.jfree.chart.plot.DatasetRenderingOrder getDatasetRenderingOrder()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setRenderer(org.jfree.chart.renderer.category.CategoryItemRenderer)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="boolean isRangeCrosshairLockedOnData()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setCrosshairDatasetIndex(int)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="boolean removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setRowRenderingOrder(org.jfree.util.SortOrder)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="int indexOf(org.jfree.data.category.CategoryDataset)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="boolean isDomainCrosshairVisible()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="java.awt.Stroke getRangeGridlineStroke()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="boolean isRangeGridlinesVisible()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="int getRangeAxisIndex(org.jfree.chart.axis.ValueAxis)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setRangeGridlinesVisible(boolean)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setDomainAxis(org.jfree.chart.axis.CategoryAxis)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="java.awt.Paint getRangeCrosshairPaint()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="org.jfree.chart.axis.CategoryAxis getDomainAxis(int)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setDomainGridlinesVisible(boolean)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="org.jfree.chart.axis.AxisLocation getRangeAxisLocation(int)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="org.jfree.ui.RectangleEdge getRangeAxisEdge(int)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setRangeAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="org.jfree.chart.axis.ValueAxis getRangeAxisForDataset(int)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setDomainAxis(int,org.jfree.chart.axis.CategoryAxis,boolean)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setDomainCrosshairVisible(boolean)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="org.jfree.chart.axis.CategoryAxis getDomainAxisForDataset(int)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="org.jfree.ui.RectangleInsets getAxisOffset()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void datasetChanged(org.jfree.data.general.DatasetChangeEvent)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setDomainAxisLocation(org.jfree.chart.axis.AxisLocation)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="org.jfree.data.category.CategoryDataset getDataset(int)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void setAnchorValue(double)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="java.awt.Stroke getDomainCrosshairStroke()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="boolean isRangeZoomable()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="void &lt;init&gt;(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="org.jfree.chart.axis.ValueAxis getRangeAxis(int)" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="org.jfree.data.category.CategoryDataset getDataset()" class="org.jfree.chart.plot.CategoryPlot" />
	<method signature="org.jfree.util.SortOrder getRowRenderingOrder()" class="org.jfree.chart.plot.CategoryPlot" />
	<class name="org.w3c.dom.html.HTMLScriptElement" />
	<method signature="void setHtmlFor(java.lang.String)" class="org.w3c.dom.html.HTMLScriptElement" />
	<method signature="java.lang.String getEvent()" class="org.w3c.dom.html.HTMLScriptElement" />
	<method signature="java.lang.String getText()" class="org.w3c.dom.html.HTMLScriptElement" />
	<method signature="java.lang.String getSrc()" class="org.w3c.dom.html.HTMLScriptElement" />
	<method signature="void setText(java.lang.String)" class="org.w3c.dom.html.HTMLScriptElement" />
	<method signature="java.lang.String getCharset()" class="org.w3c.dom.html.HTMLScriptElement" />
	<method signature="boolean getDefer()" class="org.w3c.dom.html.HTMLScriptElement" />
	<method signature="java.lang.String getHtmlFor()" class="org.w3c.dom.html.HTMLScriptElement" />
	<method signature="void setSrc(java.lang.String)" class="org.w3c.dom.html.HTMLScriptElement" />
	<method signature="void setCharset(java.lang.String)" class="org.w3c.dom.html.HTMLScriptElement" />
	<method signature="java.lang.String getType()" class="org.w3c.dom.html.HTMLScriptElement" />
	<method signature="void setDefer(boolean)" class="org.w3c.dom.html.HTMLScriptElement" />
	<method signature="void setType(java.lang.String)" class="org.w3c.dom.html.HTMLScriptElement" />
	<method signature="void setEvent(java.lang.String)" class="org.w3c.dom.html.HTMLScriptElement" />
	<class name="org.jfree.data.general.DefaultKeyedValueDataset" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.general.DefaultKeyedValueDataset" />
	<method signature="int hashCode()" class="org.jfree.data.general.DefaultKeyedValueDataset" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.general.DefaultKeyedValueDataset" />
	<method signature="java.lang.Number getValue()" class="org.jfree.data.general.DefaultKeyedValueDataset" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.general.DefaultKeyedValueDataset" />
	<method signature="void &lt;init&gt;(java.lang.Comparable,java.lang.Number)" class="org.jfree.data.general.DefaultKeyedValueDataset" />
	<method signature="void &lt;init&gt;(org.jfree.data.KeyedValue)" class="org.jfree.data.general.DefaultKeyedValueDataset" />
	<method signature="void updateValue(java.lang.Number)" class="org.jfree.data.general.DefaultKeyedValueDataset" />
	<method signature="void setValue(java.lang.Comparable,java.lang.Number)" class="org.jfree.data.general.DefaultKeyedValueDataset" />
	<method signature="java.lang.Comparable getKey()" class="org.jfree.data.general.DefaultKeyedValueDataset" />
	<class name="org.apache.xml.serialize.IndentPrinter" />
	<method signature="void setThisIndent(int)" class="org.apache.xml.serialize.IndentPrinter" />
	<method signature="void printText(char)" class="org.apache.xml.serialize.IndentPrinter" />
	<method signature="void &lt;init&gt;(java.io.Writer,org.apache.xml.serialize.OutputFormat)" class="org.apache.xml.serialize.IndentPrinter" />
	<method signature="void printText(java.lang.String)" class="org.apache.xml.serialize.IndentPrinter" />
	<method signature="void flush()" class="org.apache.xml.serialize.IndentPrinter" />
	<method signature="void breakLine()" class="org.apache.xml.serialize.IndentPrinter" />
	<method signature="void printText(java.lang.StringBuffer)" class="org.apache.xml.serialize.IndentPrinter" />
	<method signature="java.lang.String leaveDTD()" class="org.apache.xml.serialize.IndentPrinter" />
	<method signature="void printSpace()" class="org.apache.xml.serialize.IndentPrinter" />
	<method signature="void flushLine(boolean)" class="org.apache.xml.serialize.IndentPrinter" />
	<method signature="void printText(char[],int,int)" class="org.apache.xml.serialize.IndentPrinter" />
	<method signature="void enterDTD()" class="org.apache.xml.serialize.IndentPrinter" />
	<method signature="int getNextIndent()" class="org.apache.xml.serialize.IndentPrinter" />
	<method signature="void setNextIndent(int)" class="org.apache.xml.serialize.IndentPrinter" />
	<method signature="void breakLine(boolean)" class="org.apache.xml.serialize.IndentPrinter" />
	<method signature="void indent()" class="org.apache.xml.serialize.IndentPrinter" />
	<method signature="void unindent()" class="org.apache.xml.serialize.IndentPrinter" />
	<class name="javax.annotation.ParametersAreNonnullByDefault" />
	<class name="org.unbescape.css.CssEscape" />
	<method signature="void escapeCssIdentifier(char[],int,int,java.io.Writer)" class="org.unbescape.css.CssEscape" />
	<method signature="void unescapeCss(char[],int,int,java.io.Writer)" class="org.unbescape.css.CssEscape" />
	<method signature="void escapeCssIdentifier(char[],int,int,java.io.Writer,org.unbescape.css.CssIdentifierEscapeType,org.unbescape.css.CssIdentifierEscapeLevel)" class="org.unbescape.css.CssEscape" />
	<method signature="java.lang.String escapeCssString(java.lang.String)" class="org.unbescape.css.CssEscape" />
	<method signature="void escapeCssIdentifierMinimal(char[],int,int,java.io.Writer)" class="org.unbescape.css.CssEscape" />
	<method signature="java.lang.String escapeCssStringMinimal(java.lang.String)" class="org.unbescape.css.CssEscape" />
	<method signature="void escapeCssString(char[],int,int,java.io.Writer)" class="org.unbescape.css.CssEscape" />
	<method signature="void escapeCssStringMinimal(char[],int,int,java.io.Writer)" class="org.unbescape.css.CssEscape" />
	<method signature="java.lang.String escapeCssIdentifierMinimal(java.lang.String)" class="org.unbescape.css.CssEscape" />
	<method signature="java.lang.String escapeCssIdentifier(java.lang.String)" class="org.unbescape.css.CssEscape" />
	<method signature="java.lang.String escapeCssString(java.lang.String,org.unbescape.css.CssStringEscapeType,org.unbescape.css.CssStringEscapeLevel)" class="org.unbescape.css.CssEscape" />
	<method signature="java.lang.String escapeCssIdentifier(java.lang.String,org.unbescape.css.CssIdentifierEscapeType,org.unbescape.css.CssIdentifierEscapeLevel)" class="org.unbescape.css.CssEscape" />
	<method signature="java.lang.String unescapeCss(java.lang.String)" class="org.unbescape.css.CssEscape" />
	<method signature="void escapeCssString(char[],int,int,java.io.Writer,org.unbescape.css.CssStringEscapeType,org.unbescape.css.CssStringEscapeLevel)" class="org.unbescape.css.CssEscape" />
	<class name="org.jfree.chart.urls.URLUtilities" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.urls.URLUtilities" />
	<method signature="java.lang.String encode(java.lang.String,java.lang.String)" class="org.jfree.chart.urls.URLUtilities" />
	<class name="com.google.zxing.WriterException" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.WriterException" />
	<method signature="void &lt;init&gt;(java.lang.Throwable)" class="com.google.zxing.WriterException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="com.google.zxing.WriterException" />
	<class name="javax.xml.bind.helpers.ValidationEventLocatorImpl" />
	<method signature="int getLineNumber()" class="javax.xml.bind.helpers.ValidationEventLocatorImpl" />
	<method signature="java.net.URL getURL()" class="javax.xml.bind.helpers.ValidationEventLocatorImpl" />
	<method signature="void setLineNumber(int)" class="javax.xml.bind.helpers.ValidationEventLocatorImpl" />
	<method signature="void setURL(java.net.URL)" class="javax.xml.bind.helpers.ValidationEventLocatorImpl" />
	<method signature="void setOffset(int)" class="javax.xml.bind.helpers.ValidationEventLocatorImpl" />
	<method signature="java.lang.Object getObject()" class="javax.xml.bind.helpers.ValidationEventLocatorImpl" />
	<method signature="void setNode(org.w3c.dom.Node)" class="javax.xml.bind.helpers.ValidationEventLocatorImpl" />
	<method signature="void setObject(java.lang.Object)" class="javax.xml.bind.helpers.ValidationEventLocatorImpl" />
	<method signature="void &lt;init&gt;(java.lang.Object)" class="javax.xml.bind.helpers.ValidationEventLocatorImpl" />
	<method signature="void &lt;init&gt;(org.w3c.dom.Node)" class="javax.xml.bind.helpers.ValidationEventLocatorImpl" />
	<method signature="int getOffset()" class="javax.xml.bind.helpers.ValidationEventLocatorImpl" />
	<method signature="void &lt;init&gt;(org.xml.sax.SAXParseException)" class="javax.xml.bind.helpers.ValidationEventLocatorImpl" />
	<method signature="void &lt;init&gt;()" class="javax.xml.bind.helpers.ValidationEventLocatorImpl" />
	<method signature="void &lt;init&gt;(org.xml.sax.Locator)" class="javax.xml.bind.helpers.ValidationEventLocatorImpl" />
	<method signature="void setColumnNumber(int)" class="javax.xml.bind.helpers.ValidationEventLocatorImpl" />
	<method signature="org.w3c.dom.Node getNode()" class="javax.xml.bind.helpers.ValidationEventLocatorImpl" />
	<method signature="int getColumnNumber()" class="javax.xml.bind.helpers.ValidationEventLocatorImpl" />
	<class name="org.apache.xml.serialize.BaseMarkupSerializer" />
	<method signature="void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" class="org.apache.xml.serialize.BaseMarkupSerializer" />
	<method signature="boolean reset()" class="org.apache.xml.serialize.BaseMarkupSerializer" />
	<method signature="void externalEntityDecl(java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xml.serialize.BaseMarkupSerializer" />
	<method signature="void endPrefixMapping(java.lang.String)" class="org.apache.xml.serialize.BaseMarkupSerializer" />
	<method signature="void endNonEscaping()" class="org.apache.xml.serialize.BaseMarkupSerializer" />
	<method signature="void endElement(java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xml.serialize.BaseMarkupSerializer" />
	<method signature="void endDocument()" class="org.apache.xml.serialize.BaseMarkupSerializer" />
	<method signature="void serialize(org.w3c.dom.Element)" class="org.apache.xml.serialize.BaseMarkupSerializer" />
	<method signature="void endPreserving()" class="org.apache.xml.serialize.BaseMarkupSerializer" />
	<method signature="void comment(char[],int,int)" class="org.apache.xml.serialize.BaseMarkupSerializer" />
	<method signature="void setOutputByteStream(java.io.OutputStream)" class="org.apache.xml.serialize.BaseMarkupSerializer" />
	<method signature="void serialize(org.w3c.dom.DocumentFragment)" class="org.apache.xml.serialize.BaseMarkupSerializer" />
	<method signature="org.apache.xml.serialize.DOMSerializer asDOMSerializer()" class="org.apache.xml.serialize.BaseMarkupSerializer" />
	<method signature="void attributeDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xml.serialize.BaseMarkupSerializer" />
	<method signature="void startDTD(java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xml.serialize.BaseMarkupSerializer" />
	<method signature="void setDocumentLocator(org.xml.sax.Locator)" class="org.apache.xml.serialize.BaseMarkupSerializer" />
	<method signature="org.xml.sax.DocumentHandler asDocumentHandler()" class="org.apache.xml.serialize.BaseMarkupSerializer" />
	<method signature="void characters(char[],int,int)" class="org.apache.xml.serialize.BaseMarkupSerializer" />
	<method signature="void endEntity(java.lang.String)" class="org.apache.xml.serialize.BaseMarkupSerializer" />
	<method signature="void startElement(java.lang.String,org.xml.sax.AttributeList)" class="org.apache.xml.serialize.BaseMarkupSerializer" />
	<method signature="void startPrefixMapping(java.lang.String,java.lang.String)" class="org.apache.xml.serialize.BaseMarkupSerializer" />
	<method signature="void endElement(java.lang.String)" class="org.apache.xml.serialize.BaseMarkupSerializer" />
	<method signature="void startNonEscaping()" class="org.apache.xml.serialize.BaseMarkupSerializer" />
	<method signature="void startPreserving()" class="org.apache.xml.serialize.BaseMarkupSerializer" />
	<method signature="void notationDecl(java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xml.serialize.BaseMarkupSerializer" />
	<method signature="void unparsedEntityDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xml.serialize.BaseMarkupSerializer" />
	<method signature="void endDTD()" class="org.apache.xml.serialize.BaseMarkupSerializer" />
	<method signature="void startDocument()" class="org.apache.xml.serialize.BaseMarkupSerializer" />
	<method signature="org.xml.sax.ContentHandler asContentHandler()" class="org.apache.xml.serialize.BaseMarkupSerializer" />
	<method signature="void setOutputCharStream(java.io.Writer)" class="org.apache.xml.serialize.BaseMarkupSerializer" />
	<method signature="void skippedEntity(java.lang.String)" class="org.apache.xml.serialize.BaseMarkupSerializer" />
	<method signature="void internalEntityDecl(java.lang.String,java.lang.String)" class="org.apache.xml.serialize.BaseMarkupSerializer" />
	<method signature="void processingInstructionIO(java.lang.String,java.lang.String)" class="org.apache.xml.serialize.BaseMarkupSerializer" />
	<method signature="void processingInstruction(java.lang.String,java.lang.String)" class="org.apache.xml.serialize.BaseMarkupSerializer" />
	<method signature="void startCDATA()" class="org.apache.xml.serialize.BaseMarkupSerializer" />
	<method signature="void comment(java.lang.String)" class="org.apache.xml.serialize.BaseMarkupSerializer" />
	<method signature="void serialize(org.w3c.dom.Document)" class="org.apache.xml.serialize.BaseMarkupSerializer" />
	<method signature="void endCDATA()" class="org.apache.xml.serialize.BaseMarkupSerializer" />
	<method signature="void elementDecl(java.lang.String,java.lang.String)" class="org.apache.xml.serialize.BaseMarkupSerializer" />
	<method signature="void ignorableWhitespace(char[],int,int)" class="org.apache.xml.serialize.BaseMarkupSerializer" />
	<method signature="void setOutputFormat(org.apache.xml.serialize.OutputFormat)" class="org.apache.xml.serialize.BaseMarkupSerializer" />
	<method signature="void startEntity(java.lang.String)" class="org.apache.xml.serialize.BaseMarkupSerializer" />
	<class name="org.jfree.chart.plot.PiePlot3D" />
	<method signature="java.lang.String getPlotType()" class="org.jfree.chart.plot.PiePlot3D" />
	<method signature="void setDepthFactor(double)" class="org.jfree.chart.plot.PiePlot3D" />
	<method signature="boolean getDarkerSides()" class="org.jfree.chart.plot.PiePlot3D" />
	<method signature="void &lt;init&gt;(org.jfree.data.general.PieDataset)" class="org.jfree.chart.plot.PiePlot3D" />
	<method signature="double getDepthFactor()" class="org.jfree.chart.plot.PiePlot3D" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.plot.PiePlot3D" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.plot.PiePlot3D" />
	<method signature="void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.plot.PiePlot3D" />
	<method signature="void setDarkerSides(boolean)" class="org.jfree.chart.plot.PiePlot3D" />
	<class name="org.apache.xerces.impl.XMLDocumentScannerImpl$PrologDispatcher" />
	<method signature="boolean dispatch(boolean)" class="org.apache.xerces.impl.XMLDocumentScannerImpl$PrologDispatcher" />
	<class name="org.apache.xerces.impl.dv.dtd.XML11IDDatatypeValidator" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.dtd.XML11IDDatatypeValidator" />
	<method signature="void validate(java.lang.String,org.apache.xerces.impl.dv.ValidationContext)" class="org.apache.xerces.impl.dv.dtd.XML11IDDatatypeValidator" />
	<class name="org.jdom2.IllegalAddException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jdom2.IllegalAddException" />
	<class name="org.apache.commons.lang3.concurrent.ConcurrentException" />
	<method signature="void &lt;init&gt;(java.lang.Throwable)" class="org.apache.commons.lang3.concurrent.ConcurrentException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Throwable)" class="org.apache.commons.lang3.concurrent.ConcurrentException" />
	<class name="freemarker.debug.impl.RmiDebuggerListenerImpl_Stub" />
	<method signature="void environmentSuspended(freemarker.debug.EnvironmentSuspendedEvent)" class="freemarker.debug.impl.RmiDebuggerListenerImpl_Stub" />
	<method signature="void &lt;init&gt;(java.rmi.server.RemoteRef)" class="freemarker.debug.impl.RmiDebuggerListenerImpl_Stub" />
	<class name="org.jfree.chart.plot.CrosshairState" />
	<method signature="void setCrosshairDistance(double)" class="org.jfree.chart.plot.CrosshairState" />
	<method signature="double getCrosshairDistance()" class="org.jfree.chart.plot.CrosshairState" />
	<method signature="void updateCrosshairY(double,int)" class="org.jfree.chart.plot.CrosshairState" />
	<method signature="void setDatasetIndex(int)" class="org.jfree.chart.plot.CrosshairState" />
	<method signature="void updateCrosshairPoint(double,double,double,double,org.jfree.chart.plot.PlotOrientation)" class="org.jfree.chart.plot.CrosshairState" />
	<method signature="double getCrosshairY()" class="org.jfree.chart.plot.CrosshairState" />
	<method signature="double getCrosshairX()" class="org.jfree.chart.plot.CrosshairState" />
	<method signature="void updateCrosshairY(double)" class="org.jfree.chart.plot.CrosshairState" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.plot.CrosshairState" />
	<method signature="void &lt;init&gt;(boolean)" class="org.jfree.chart.plot.CrosshairState" />
	<method signature="java.awt.geom.Point2D getAnchor()" class="org.jfree.chart.plot.CrosshairState" />
	<method signature="double getAnchorY()" class="org.jfree.chart.plot.CrosshairState" />
	<method signature="double getAnchorX()" class="org.jfree.chart.plot.CrosshairState" />
	<method signature="int getDatasetIndex()" class="org.jfree.chart.plot.CrosshairState" />
	<method signature="void setAnchorX(double)" class="org.jfree.chart.plot.CrosshairState" />
	<method signature="void setAnchorY(double)" class="org.jfree.chart.plot.CrosshairState" />
	<method signature="int getDomainAxisIndex()" class="org.jfree.chart.plot.CrosshairState" />
	<method signature="void updateCrosshairX(double)" class="org.jfree.chart.plot.CrosshairState" />
	<method signature="void updateCrosshairPoint(double,double,int,int,double,double,org.jfree.chart.plot.PlotOrientation)" class="org.jfree.chart.plot.CrosshairState" />
	<method signature="void setAnchor(java.awt.geom.Point2D)" class="org.jfree.chart.plot.CrosshairState" />
	<method signature="int getRangeAxisIndex()" class="org.jfree.chart.plot.CrosshairState" />
	<method signature="void updateCrosshairX(double,int)" class="org.jfree.chart.plot.CrosshairState" />
	<method signature="void setCrosshairY(double)" class="org.jfree.chart.plot.CrosshairState" />
	<method signature="void setCrosshairX(double)" class="org.jfree.chart.plot.CrosshairState" />
	<class name="freemarker.ext.util.ModelCache" />
	<method signature="freemarker.template.TemplateModel getInstance(java.lang.Object)" class="freemarker.ext.util.ModelCache" />
	<method signature="void clearCache()" class="freemarker.ext.util.ModelCache" />
	<method signature="void setUseCache(boolean)" class="freemarker.ext.util.ModelCache" />
	<class name="com.google.zxing.qrcode.detector.FinderPatternFinder" />
	<method signature="void &lt;init&gt;(com.google.zxing.common.BitMatrix,com.google.zxing.ResultPointCallback)" class="com.google.zxing.qrcode.detector.FinderPatternFinder" />
	<method signature="void &lt;init&gt;(com.google.zxing.common.BitMatrix)" class="com.google.zxing.qrcode.detector.FinderPatternFinder" />
	<class name="org.jfree.chart.editor.ChartEditor" />
	<method signature="void updateChart(org.jfree.chart.JFreeChart)" class="org.jfree.chart.editor.ChartEditor" />
	<class name="org.apache.xerces.impl.XML11NSDocumentScannerImpl" />
	<method signature="void setDTDValidator(org.apache.xerces.impl.dtd.XMLDTDValidatorFilter)" class="org.apache.xerces.impl.XML11NSDocumentScannerImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.XML11NSDocumentScannerImpl" />
	<method signature="void reset(org.apache.xerces.xni.parser.XMLComponentManager)" class="org.apache.xerces.impl.XML11NSDocumentScannerImpl" />
	<class name="org.apache.xerces.impl.io.MalformedByteSequenceException" />
	<method signature="java.lang.String getDomain()" class="org.apache.xerces.impl.io.MalformedByteSequenceException" />
	<method signature="java.lang.String getKey()" class="org.apache.xerces.impl.io.MalformedByteSequenceException" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.MessageFormatter,java.util.Locale,java.lang.String,java.lang.String,java.lang.Object[])" class="org.apache.xerces.impl.io.MalformedByteSequenceException" />
	<method signature="java.lang.String getMessage()" class="org.apache.xerces.impl.io.MalformedByteSequenceException" />
	<method signature="java.lang.Object[] getArguments()" class="org.apache.xerces.impl.io.MalformedByteSequenceException" />
	<class name="edu.umd.cs.findbugs.annotations.Confidence" />
	<method signature="edu.umd.cs.findbugs.annotations.Confidence[] values()" class="edu.umd.cs.findbugs.annotations.Confidence" />
	<method signature="int getConfidenceValue()" class="edu.umd.cs.findbugs.annotations.Confidence" />
	<method signature="edu.umd.cs.findbugs.annotations.Confidence getConfidence(int)" class="edu.umd.cs.findbugs.annotations.Confidence" />
	<method signature="edu.umd.cs.findbugs.annotations.Confidence valueOf(java.lang.String)" class="edu.umd.cs.findbugs.annotations.Confidence" />
	<class name="org.jfree.ui.about.Library" />
	<method signature="void &lt;init&gt;(org.jfree.ui.about.ProjectInfo)" class="org.jfree.ui.about.Library" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.jfree.ui.about.Library" />
	<class name="com.toedter.calendar.JDateChooserCellEditor" />
	<method signature="void &lt;init&gt;()" class="com.toedter.calendar.JDateChooserCellEditor" />
	<method signature="java.awt.Component getTableCellEditorComponent(javax.swing.JTable,java.lang.Object,boolean,int,int)" class="com.toedter.calendar.JDateChooserCellEditor" />
	<method signature="java.lang.Object getCellEditorValue()" class="com.toedter.calendar.JDateChooserCellEditor" />
	<class name="org.jfree.data.xy.XYSeriesCollection" />
	<method signature="java.lang.Number getX(int,int)" class="org.jfree.data.xy.XYSeriesCollection" />
	<method signature="java.lang.Number getY(int,int)" class="org.jfree.data.xy.XYSeriesCollection" />
	<method signature="int getSeriesIndex(java.lang.Comparable)" class="org.jfree.data.xy.XYSeriesCollection" />
	<method signature="void removeSeries(int)" class="org.jfree.data.xy.XYSeriesCollection" />
	<method signature="int getSeriesCount()" class="org.jfree.data.xy.XYSeriesCollection" />
	<method signature="org.jfree.data.xy.XYSeries getSeries(int)" class="org.jfree.data.xy.XYSeriesCollection" />
	<method signature="void &lt;init&gt;(org.jfree.data.xy.XYSeries)" class="org.jfree.data.xy.XYSeriesCollection" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.xy.XYSeriesCollection" />
	<method signature="org.jfree.data.Range getDomainBounds(boolean)" class="org.jfree.data.xy.XYSeriesCollection" />
	<method signature="java.lang.Comparable getSeriesKey(int)" class="org.jfree.data.xy.XYSeriesCollection" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.xy.XYSeriesCollection" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.xy.XYSeriesCollection" />
	<method signature="java.lang.Number getEndX(int,int)" class="org.jfree.data.xy.XYSeriesCollection" />
	<method signature="org.jfree.data.DomainOrder getDomainOrder()" class="org.jfree.data.xy.XYSeriesCollection" />
	<method signature="int getItemCount(int)" class="org.jfree.data.xy.XYSeriesCollection" />
	<method signature="java.lang.Number getEndY(int,int)" class="org.jfree.data.xy.XYSeriesCollection" />
	<method signature="double getDomainUpperBound(boolean)" class="org.jfree.data.xy.XYSeriesCollection" />
	<method signature="double getRangeLowerBound(boolean)" class="org.jfree.data.xy.XYSeriesCollection" />
	<method signature="double getIntervalPositionFactor()" class="org.jfree.data.xy.XYSeriesCollection" />
	<method signature="int hashCode()" class="org.jfree.data.xy.XYSeriesCollection" />
	<method signature="void setIntervalPositionFactor(double)" class="org.jfree.data.xy.XYSeriesCollection" />
	<method signature="org.jfree.data.xy.XYSeries getSeries(java.lang.Comparable)" class="org.jfree.data.xy.XYSeriesCollection" />
	<method signature="org.jfree.data.Range getRangeBounds(boolean)" class="org.jfree.data.xy.XYSeriesCollection" />
	<method signature="int indexOf(org.jfree.data.xy.XYSeries)" class="org.jfree.data.xy.XYSeriesCollection" />
	<method signature="void setIntervalWidth(double)" class="org.jfree.data.xy.XYSeriesCollection" />
	<method signature="void removeSeries(org.jfree.data.xy.XYSeries)" class="org.jfree.data.xy.XYSeriesCollection" />
	<method signature="double getDomainLowerBound(boolean)" class="org.jfree.data.xy.XYSeriesCollection" />
	<method signature="java.util.List getSeries()" class="org.jfree.data.xy.XYSeriesCollection" />
	<method signature="double getIntervalWidth()" class="org.jfree.data.xy.XYSeriesCollection" />
	<method signature="void vetoableChange(java.beans.PropertyChangeEvent)" class="org.jfree.data.xy.XYSeriesCollection" />
	<method signature="double getRangeUpperBound(boolean)" class="org.jfree.data.xy.XYSeriesCollection" />
	<method signature="void setAutoWidth(boolean)" class="org.jfree.data.xy.XYSeriesCollection" />
	<method signature="java.lang.Number getStartX(int,int)" class="org.jfree.data.xy.XYSeriesCollection" />
	<method signature="void addSeries(org.jfree.data.xy.XYSeries)" class="org.jfree.data.xy.XYSeriesCollection" />
	<method signature="java.lang.Number getStartY(int,int)" class="org.jfree.data.xy.XYSeriesCollection" />
	<method signature="boolean isAutoWidth()" class="org.jfree.data.xy.XYSeriesCollection" />
	<method signature="void removeAllSeries()" class="org.jfree.data.xy.XYSeriesCollection" />
	<class name="org.w3c.dom.views.AbstractView" />
	<method signature="org.w3c.dom.views.DocumentView getDocument()" class="org.w3c.dom.views.AbstractView" />
	<class name="org.w3c.dom.ProcessingInstruction" />
	<method signature="java.lang.String getTarget()" class="org.w3c.dom.ProcessingInstruction" />
	<method signature="void setData(java.lang.String)" class="org.w3c.dom.ProcessingInstruction" />
	<method signature="java.lang.String getData()" class="org.w3c.dom.ProcessingInstruction" />
	<class name="freemarker.ext.beans.EnumerationModel" />
	<method signature="boolean hasNext()" class="freemarker.ext.beans.EnumerationModel" />
	<method signature="void &lt;init&gt;(java.util.Enumeration,freemarker.ext.beans.BeansWrapper)" class="freemarker.ext.beans.EnumerationModel" />
	<method signature="boolean getAsBoolean()" class="freemarker.ext.beans.EnumerationModel" />
	<method signature="freemarker.template.TemplateModelIterator iterator()" class="freemarker.ext.beans.EnumerationModel" />
	<method signature="freemarker.template.TemplateModel next()" class="freemarker.ext.beans.EnumerationModel" />
	<class name="org.apache.xerces.util.DOMInputSource" />
	<method signature="void &lt;init&gt;(org.w3c.dom.Node,java.lang.String)" class="org.apache.xerces.util.DOMInputSource" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.util.DOMInputSource" />
	<method signature="org.w3c.dom.Node getNode()" class="org.apache.xerces.util.DOMInputSource" />
	<method signature="void setNode(org.w3c.dom.Node)" class="org.apache.xerces.util.DOMInputSource" />
	<method signature="void &lt;init&gt;(org.w3c.dom.Node)" class="org.apache.xerces.util.DOMInputSource" />
	<class name="org.apache.xerces.impl.dtd.XMLContentSpec" />
	<method signature="void clear()" class="org.apache.xerces.impl.dtd.XMLContentSpec" />
	<method signature="int hashCode()" class="org.apache.xerces.impl.dtd.XMLContentSpec" />
	<method signature="void setValues(org.apache.xerces.impl.dtd.XMLContentSpec)" class="org.apache.xerces.impl.dtd.XMLContentSpec" />
	<method signature="boolean equals(java.lang.Object)" class="org.apache.xerces.impl.dtd.XMLContentSpec" />
	<method signature="void setValues(short,java.lang.Object,java.lang.Object)" class="org.apache.xerces.impl.dtd.XMLContentSpec" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dtd.XMLContentSpec" />
	<method signature="void &lt;init&gt;(org.apache.xerces.impl.dtd.XMLContentSpec$Provider,int)" class="org.apache.xerces.impl.dtd.XMLContentSpec" />
	<method signature="void &lt;init&gt;(org.apache.xerces.impl.dtd.XMLContentSpec)" class="org.apache.xerces.impl.dtd.XMLContentSpec" />
	<method signature="void &lt;init&gt;(short,java.lang.Object,java.lang.Object)" class="org.apache.xerces.impl.dtd.XMLContentSpec" />
	<method signature="void setValues(org.apache.xerces.impl.dtd.XMLContentSpec$Provider,int)" class="org.apache.xerces.impl.dtd.XMLContentSpec" />
	<class name="org.apache.xerces.util.SoftReferenceSymbolTable" />
	<method signature="boolean containsSymbol(char[],int,int)" class="org.apache.xerces.util.SoftReferenceSymbolTable" />
	<method signature="void &lt;init&gt;(int)" class="org.apache.xerces.util.SoftReferenceSymbolTable" />
	<method signature="boolean containsSymbol(java.lang.String)" class="org.apache.xerces.util.SoftReferenceSymbolTable" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.util.SoftReferenceSymbolTable" />
	<method signature="java.lang.String addSymbol(char[],int,int)" class="org.apache.xerces.util.SoftReferenceSymbolTable" />
	<method signature="void &lt;init&gt;(int,float)" class="org.apache.xerces.util.SoftReferenceSymbolTable" />
	<method signature="java.lang.String addSymbol(java.lang.String)" class="org.apache.xerces.util.SoftReferenceSymbolTable" />
	<class name="org.apache.commons.lang3.CharSequenceUtils" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.CharSequenceUtils" />
	<method signature="java.lang.CharSequence subSequence(java.lang.CharSequence,int)" class="org.apache.commons.lang3.CharSequenceUtils" />
	<class name="org.jdom2.output.support.SAXTarget$SAXLocator" />
	<method signature="java.lang.String getSystemId()" class="org.jdom2.output.support.SAXTarget$SAXLocator" />
	<method signature="java.lang.Object getNode()" class="org.jdom2.output.support.SAXTarget$SAXLocator" />
	<method signature="int getLineNumber()" class="org.jdom2.output.support.SAXTarget$SAXLocator" />
	<method signature="void setNode(java.lang.Object)" class="org.jdom2.output.support.SAXTarget$SAXLocator" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="org.jdom2.output.support.SAXTarget$SAXLocator" />
	<method signature="int getColumnNumber()" class="org.jdom2.output.support.SAXTarget$SAXLocator" />
	<method signature="java.lang.String getPublicId()" class="org.jdom2.output.support.SAXTarget$SAXLocator" />
	<class name="org.jfree.data.xy.XisSymbolic" />
	<method signature="java.lang.String[] getXSymbolicValues()" class="org.jfree.data.xy.XisSymbolic" />
	<method signature="java.lang.String getXSymbolicValue(java.lang.Integer)" class="org.jfree.data.xy.XisSymbolic" />
	<method signature="java.lang.String getXSymbolicValue(int,int)" class="org.jfree.data.xy.XisSymbolic" />
	<class name="org.apache.xerces.impl.dtd.models.ContentModelValidator" />
	<method signature="int validate(org.apache.xerces.xni.QName[],int,int)" class="org.apache.xerces.impl.dtd.models.ContentModelValidator" />
	<class name="com.hexidec.util.Translatrix" />
	<method signature="void setBundleName(java.lang.String)" class="com.hexidec.util.Translatrix" />
	<method signature="java.lang.String getTranslationString(java.lang.String)" class="com.hexidec.util.Translatrix" />
	<method signature="void setLocale(java.util.Locale)" class="com.hexidec.util.Translatrix" />
	<method signature="void setLocale(java.lang.String,java.lang.String)" class="com.hexidec.util.Translatrix" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="com.hexidec.util.Translatrix" />
	<class name="org.w3c.dom.EntityReference" />
	<class name="org.apache.xerces.stax.events.EndDocumentImpl" />
	<method signature="void &lt;init&gt;(javax.xml.stream.Location)" class="org.apache.xerces.stax.events.EndDocumentImpl" />
	<method signature="void writeAsEncodedUnicode(java.io.Writer)" class="org.apache.xerces.stax.events.EndDocumentImpl" />
	<class name="org.apache.xerces.stax.events.EntityReferenceImpl" />
	<method signature="java.lang.String getName()" class="org.apache.xerces.stax.events.EntityReferenceImpl" />
	<method signature="void &lt;init&gt;(javax.xml.stream.events.EntityDeclaration,javax.xml.stream.Location)" class="org.apache.xerces.stax.events.EntityReferenceImpl" />
	<method signature="void &lt;init&gt;(java.lang.String,javax.xml.stream.events.EntityDeclaration,javax.xml.stream.Location)" class="org.apache.xerces.stax.events.EntityReferenceImpl" />
	<method signature="javax.xml.stream.events.EntityDeclaration getDeclaration()" class="org.apache.xerces.stax.events.EntityReferenceImpl" />
	<method signature="void writeAsEncodedUnicode(java.io.Writer)" class="org.apache.xerces.stax.events.EntityReferenceImpl" />
	<class name="freemarker.ext.beans.SimpleMethodModel" />
	<method signature="int size()" class="freemarker.ext.beans.SimpleMethodModel" />
	<method signature="freemarker.template.TemplateModel get(int)" class="freemarker.ext.beans.SimpleMethodModel" />
	<method signature="java.lang.String toString()" class="freemarker.ext.beans.SimpleMethodModel" />
	<method signature="java.lang.Object exec(java.util.List)" class="freemarker.ext.beans.SimpleMethodModel" />
	<class name="org.apache.xerces.impl.dtd.models.SimpleContentModel" />
	<method signature="int validate(org.apache.xerces.xni.QName[],int,int)" class="org.apache.xerces.impl.dtd.models.SimpleContentModel" />
	<method signature="void &lt;init&gt;(short,org.apache.xerces.xni.QName,org.apache.xerces.xni.QName)" class="org.apache.xerces.impl.dtd.models.SimpleContentModel" />
	<class name="org.apache.xerces.impl.dv.ValidatedInfo" />
	<method signature="org.apache.xerces.xs.XSSimpleTypeDefinition getMemberTypeDefinition()" class="org.apache.xerces.impl.dv.ValidatedInfo" />
	<method signature="void reset()" class="org.apache.xerces.impl.dv.ValidatedInfo" />
	<method signature="boolean isComparable(org.apache.xerces.impl.dv.ValidatedInfo,org.apache.xerces.impl.dv.ValidatedInfo)" class="org.apache.xerces.impl.dv.ValidatedInfo" />
	<method signature="java.lang.Object getActualValue()" class="org.apache.xerces.impl.dv.ValidatedInfo" />
	<method signature="java.lang.String stringValue()" class="org.apache.xerces.impl.dv.ValidatedInfo" />
	<method signature="short getActualValueType()" class="org.apache.xerces.impl.dv.ValidatedInfo" />
	<method signature="org.apache.xerces.xs.ShortList getListValueTypes()" class="org.apache.xerces.impl.dv.ValidatedInfo" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.ValidatedInfo" />
	<method signature="org.apache.xerces.xs.XSObjectList getMemberTypeDefinitions()" class="org.apache.xerces.impl.dv.ValidatedInfo" />
	<method signature="org.apache.xerces.xs.XSSimpleTypeDefinition getTypeDefinition()" class="org.apache.xerces.impl.dv.ValidatedInfo" />
	<method signature="java.lang.String getNormalizedValue()" class="org.apache.xerces.impl.dv.ValidatedInfo" />
	<method signature="void copyFrom(org.apache.xerces.xs.XSValue)" class="org.apache.xerces.impl.dv.ValidatedInfo" />
	<class name="org.jfree.chart.axis.QuarterDateFormat" />
	<method signature="void &lt;init&gt;(java.util.TimeZone,java.lang.String[])" class="org.jfree.chart.axis.QuarterDateFormat" />
	<method signature="java.util.Date parse(java.lang.String,java.text.ParsePosition)" class="org.jfree.chart.axis.QuarterDateFormat" />
	<method signature="void &lt;init&gt;(java.util.TimeZone,java.lang.String[],boolean)" class="org.jfree.chart.axis.QuarterDateFormat" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.axis.QuarterDateFormat" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.axis.QuarterDateFormat" />
	<method signature="java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)" class="org.jfree.chart.axis.QuarterDateFormat" />
	<method signature="void &lt;init&gt;(java.util.TimeZone)" class="org.jfree.chart.axis.QuarterDateFormat" />
	<class name="org.apache.wml.dom.WMLRefreshElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.wml.dom.WMLDocumentImpl,java.lang.String)" class="org.apache.wml.dom.WMLRefreshElementImpl" />
	<method signature="java.lang.String getId()" class="org.apache.wml.dom.WMLRefreshElementImpl" />
	<method signature="java.lang.String getClassName()" class="org.apache.wml.dom.WMLRefreshElementImpl" />
	<method signature="void setClassName(java.lang.String)" class="org.apache.wml.dom.WMLRefreshElementImpl" />
	<method signature="void setId(java.lang.String)" class="org.apache.wml.dom.WMLRefreshElementImpl" />
	<class name="org.apache.html.dom.HTMLLabelElementImpl" />
	<method signature="void setAccessKey(java.lang.String)" class="org.apache.html.dom.HTMLLabelElementImpl" />
	<method signature="void setHtmlFor(java.lang.String)" class="org.apache.html.dom.HTMLLabelElementImpl" />
	<method signature="java.lang.String getHtmlFor()" class="org.apache.html.dom.HTMLLabelElementImpl" />
	<method signature="java.lang.String getAccessKey()" class="org.apache.html.dom.HTMLLabelElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLLabelElementImpl" />
	<class name="org.apache.xerces.parsers.XPointerParserConfiguration" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable)" class="org.apache.xerces.parsers.XPointerParserConfiguration" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable,org.apache.xerces.xni.grammars.XMLGrammarPool,org.apache.xerces.xni.parser.XMLComponentManager)" class="org.apache.xerces.parsers.XPointerParserConfiguration" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.parsers.XPointerParserConfiguration" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable,org.apache.xerces.xni.grammars.XMLGrammarPool)" class="org.apache.xerces.parsers.XPointerParserConfiguration" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="org.apache.xerces.parsers.XPointerParserConfiguration" />
	<class name="org.jfree.base.log.DefaultLogModule" />
	<method signature="void initialize(org.jfree.base.modules.SubSystem)" class="org.jfree.base.log.DefaultLogModule" />
	<method signature="void &lt;init&gt;()" class="org.jfree.base.log.DefaultLogModule" />
	<class name="org.jfree.base.config.SystemPropertyConfiguration" />
	<method signature="java.lang.String getConfigProperty(java.lang.String,java.lang.String)" class="org.jfree.base.config.SystemPropertyConfiguration" />
	<method signature="void &lt;init&gt;()" class="org.jfree.base.config.SystemPropertyConfiguration" />
	<method signature="void setConfigProperty(java.lang.String,java.lang.String)" class="org.jfree.base.config.SystemPropertyConfiguration" />
	<method signature="java.util.Enumeration getConfigProperties()" class="org.jfree.base.config.SystemPropertyConfiguration" />
	<method signature="boolean isLocallyDefined(java.lang.String)" class="org.jfree.base.config.SystemPropertyConfiguration" />
	<class name="org.jfree.util.PaintUtilities" />
	<method signature="java.awt.Color stringToColor(java.lang.String)" class="org.jfree.util.PaintUtilities" />
	<method signature="boolean equal(java.awt.Paint,java.awt.Paint)" class="org.jfree.util.PaintUtilities" />
	<method signature="java.lang.String colorToString(java.awt.Color)" class="org.jfree.util.PaintUtilities" />
	<class name="org.w3c.dom.html.HTMLAnchorElement" />
	<method signature="java.lang.String getCoords()" class="org.w3c.dom.html.HTMLAnchorElement" />
	<method signature="java.lang.String getName()" class="org.w3c.dom.html.HTMLAnchorElement" />
	<method signature="void setRel(java.lang.String)" class="org.w3c.dom.html.HTMLAnchorElement" />
	<method signature="java.lang.String getHreflang()" class="org.w3c.dom.html.HTMLAnchorElement" />
	<method signature="java.lang.String getShape()" class="org.w3c.dom.html.HTMLAnchorElement" />
	<method signature="java.lang.String getCharset()" class="org.w3c.dom.html.HTMLAnchorElement" />
	<method signature="void setTarget(java.lang.String)" class="org.w3c.dom.html.HTMLAnchorElement" />
	<method signature="java.lang.String getTarget()" class="org.w3c.dom.html.HTMLAnchorElement" />
	<method signature="int getTabIndex()" class="org.w3c.dom.html.HTMLAnchorElement" />
	<method signature="void setName(java.lang.String)" class="org.w3c.dom.html.HTMLAnchorElement" />
	<method signature="void setCharset(java.lang.String)" class="org.w3c.dom.html.HTMLAnchorElement" />
	<method signature="void setAccessKey(java.lang.String)" class="org.w3c.dom.html.HTMLAnchorElement" />
	<method signature="java.lang.String getHref()" class="org.w3c.dom.html.HTMLAnchorElement" />
	<method signature="java.lang.String getRev()" class="org.w3c.dom.html.HTMLAnchorElement" />
	<method signature="java.lang.String getRel()" class="org.w3c.dom.html.HTMLAnchorElement" />
	<method signature="void setTabIndex(int)" class="org.w3c.dom.html.HTMLAnchorElement" />
	<method signature="void setHref(java.lang.String)" class="org.w3c.dom.html.HTMLAnchorElement" />
	<method signature="void setHreflang(java.lang.String)" class="org.w3c.dom.html.HTMLAnchorElement" />
	<method signature="void blur()" class="org.w3c.dom.html.HTMLAnchorElement" />
	<method signature="void focus()" class="org.w3c.dom.html.HTMLAnchorElement" />
	<method signature="void setRev(java.lang.String)" class="org.w3c.dom.html.HTMLAnchorElement" />
	<method signature="java.lang.String getType()" class="org.w3c.dom.html.HTMLAnchorElement" />
	<method signature="void setShape(java.lang.String)" class="org.w3c.dom.html.HTMLAnchorElement" />
	<method signature="void setCoords(java.lang.String)" class="org.w3c.dom.html.HTMLAnchorElement" />
	<method signature="void setType(java.lang.String)" class="org.w3c.dom.html.HTMLAnchorElement" />
	<method signature="java.lang.String getAccessKey()" class="org.w3c.dom.html.HTMLAnchorElement" />
	<class name="org.jfree.chart.ChartFactory" />
	<method signature="org.jfree.chart.JFreeChart createStackedAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)" class="org.jfree.chart.ChartFactory" />
	<method signature="org.jfree.chart.JFreeChart createXYBarChart(java.lang.String,java.lang.String,boolean,java.lang.String,org.jfree.data.xy.IntervalXYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)" class="org.jfree.chart.ChartFactory" />
	<method signature="org.jfree.chart.JFreeChart createWindPlot(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.WindDataset,boolean,boolean,boolean)" class="org.jfree.chart.ChartFactory" />
	<method signature="org.jfree.chart.JFreeChart createPieChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,boolean)" class="org.jfree.chart.ChartFactory" />
	<method signature="org.jfree.chart.JFreeChart createPieChart(java.lang.String,org.jfree.data.general.PieDataset,org.jfree.data.general.PieDataset,int,boolean,boolean,boolean,boolean,boolean,boolean)" class="org.jfree.chart.ChartFactory" />
	<method signature="org.jfree.chart.JFreeChart createRingChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,boolean)" class="org.jfree.chart.ChartFactory" />
	<method signature="org.jfree.chart.JFreeChart createPieChart3D(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,boolean)" class="org.jfree.chart.ChartFactory" />
	<method signature="org.jfree.chart.JFreeChart createBoxAndWhiskerChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.statistics.BoxAndWhiskerXYDataset,boolean)" class="org.jfree.chart.ChartFactory" />
	<method signature="org.jfree.chart.JFreeChart createBoxAndWhiskerChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.statistics.BoxAndWhiskerCategoryDataset,boolean)" class="org.jfree.chart.ChartFactory" />
	<method signature="org.jfree.chart.JFreeChart createPieChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,java.util.Locale)" class="org.jfree.chart.ChartFactory" />
	<method signature="org.jfree.chart.JFreeChart createXYStepChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)" class="org.jfree.chart.ChartFactory" />
	<method signature="org.jfree.chart.JFreeChart createRingChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,java.util.Locale)" class="org.jfree.chart.ChartFactory" />
	<method signature="org.jfree.chart.JFreeChart createPieChart3D(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,java.util.Locale)" class="org.jfree.chart.ChartFactory" />
	<method signature="org.jfree.chart.JFreeChart createWaferMapChart(java.lang.String,org.jfree.data.general.WaferMapDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)" class="org.jfree.chart.ChartFactory" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.ChartFactory" />
	<method signature="org.jfree.chart.JFreeChart createStackedBarChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)" class="org.jfree.chart.ChartFactory" />
	<method signature="org.jfree.chart.JFreeChart createPolarChart(java.lang.String,org.jfree.data.xy.XYDataset,boolean,boolean,boolean)" class="org.jfree.chart.ChartFactory" />
	<method signature="void setChartTheme(org.jfree.chart.ChartTheme)" class="org.jfree.chart.ChartFactory" />
	<method signature="org.jfree.chart.JFreeChart createMultiplePieChart(java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.util.TableOrder,boolean,boolean,boolean)" class="org.jfree.chart.ChartFactory" />
	<method signature="org.jfree.chart.JFreeChart createGanttChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.IntervalCategoryDataset,boolean,boolean,boolean)" class="org.jfree.chart.ChartFactory" />
	<method signature="org.jfree.chart.JFreeChart createXYStepAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)" class="org.jfree.chart.ChartFactory" />
	<method signature="org.jfree.chart.JFreeChart createHighLowChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.OHLCDataset,org.jfree.chart.axis.Timeline,boolean)" class="org.jfree.chart.ChartFactory" />
	<method signature="org.jfree.chart.JFreeChart createHistogram(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.IntervalXYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)" class="org.jfree.chart.ChartFactory" />
	<method signature="org.jfree.chart.JFreeChart createStackedBarChart3D(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)" class="org.jfree.chart.ChartFactory" />
	<method signature="org.jfree.chart.JFreeChart createBarChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)" class="org.jfree.chart.ChartFactory" />
	<method signature="org.jfree.chart.JFreeChart createXYAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)" class="org.jfree.chart.ChartFactory" />
	<method signature="org.jfree.chart.JFreeChart createTimeSeriesChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,boolean,boolean,boolean)" class="org.jfree.chart.ChartFactory" />
	<method signature="org.jfree.chart.JFreeChart createCandlestickChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.OHLCDataset,boolean)" class="org.jfree.chart.ChartFactory" />
	<method signature="org.jfree.chart.JFreeChart createBarChart3D(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)" class="org.jfree.chart.ChartFactory" />
	<method signature="org.jfree.chart.JFreeChart createXYLineChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)" class="org.jfree.chart.ChartFactory" />
	<method signature="org.jfree.chart.ChartTheme getChartTheme()" class="org.jfree.chart.ChartFactory" />
	<method signature="org.jfree.chart.JFreeChart createMultiplePieChart3D(java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.util.TableOrder,boolean,boolean,boolean)" class="org.jfree.chart.ChartFactory" />
	<method signature="org.jfree.chart.JFreeChart createLineChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)" class="org.jfree.chart.ChartFactory" />
	<method signature="org.jfree.chart.JFreeChart createLineChart3D(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)" class="org.jfree.chart.ChartFactory" />
	<method signature="org.jfree.chart.JFreeChart createPieChart(java.lang.String,org.jfree.data.general.PieDataset,org.jfree.data.general.PieDataset,int,boolean,boolean,boolean,java.util.Locale,boolean,boolean)" class="org.jfree.chart.ChartFactory" />
	<method signature="org.jfree.chart.JFreeChart createBubbleChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYZDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)" class="org.jfree.chart.ChartFactory" />
	<method signature="org.jfree.chart.JFreeChart createHighLowChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.OHLCDataset,boolean)" class="org.jfree.chart.ChartFactory" />
	<method signature="org.jfree.chart.JFreeChart createScatterPlot(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)" class="org.jfree.chart.ChartFactory" />
	<method signature="org.jfree.chart.JFreeChart createAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)" class="org.jfree.chart.ChartFactory" />
	<method signature="org.jfree.chart.JFreeChart createWaterfallChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)" class="org.jfree.chart.ChartFactory" />
	<method signature="org.jfree.chart.JFreeChart createStackedXYAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.TableXYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)" class="org.jfree.chart.ChartFactory" />
	<class name="org.jdom2.Namespace" />
	<method signature="java.lang.String getPrefix()" class="org.jdom2.Namespace" />
	<method signature="org.jdom2.Namespace getNamespace(java.lang.String,java.lang.String)" class="org.jdom2.Namespace" />
	<method signature="int hashCode()" class="org.jdom2.Namespace" />
	<method signature="org.jdom2.Namespace getNamespace(java.lang.String)" class="org.jdom2.Namespace" />
	<method signature="boolean equals(java.lang.Object)" class="org.jdom2.Namespace" />
	<method signature="java.lang.String toString()" class="org.jdom2.Namespace" />
	<method signature="java.lang.String getURI()" class="org.jdom2.Namespace" />
	<class name="org.apache.wml.WMLDocument" />
	<class name="org.w3c.dom.html.HTMLDListElement" />
	<method signature="void setCompact(boolean)" class="org.w3c.dom.html.HTMLDListElement" />
	<method signature="boolean getCompact()" class="org.w3c.dom.html.HTMLDListElement" />
	<class name="org.apache.xerces.impl.xs.models.XSCMRepeatingLeaf" />
	<method signature="void &lt;init&gt;(int,java.lang.Object,int,int,int,int)" class="org.apache.xerces.impl.xs.models.XSCMRepeatingLeaf" />
	<class name="org.jfree.chart.labels.StandardPieToolTipGenerator" />
	<method signature="void &lt;init&gt;(java.util.Locale)" class="org.jfree.chart.labels.StandardPieToolTipGenerator" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.labels.StandardPieToolTipGenerator" />
	<method signature="java.lang.String generateToolTip(org.jfree.data.general.PieDataset,java.lang.Comparable)" class="org.jfree.chart.labels.StandardPieToolTipGenerator" />
	<method signature="void &lt;init&gt;(java.lang.String,java.util.Locale)" class="org.jfree.chart.labels.StandardPieToolTipGenerator" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.labels.StandardPieToolTipGenerator" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.chart.labels.StandardPieToolTipGenerator" />
	<method signature="void &lt;init&gt;(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" class="org.jfree.chart.labels.StandardPieToolTipGenerator" />
	<class name="freemarker.core.Expression" />
	<method signature="freemarker.template.TemplateModel getAsTemplateModel(freemarker.core.Environment)" class="freemarker.core.Expression" />
	<method signature="void &lt;init&gt;()" class="freemarker.core.Expression" />
	<class name="freemarker.ext.jsp.TaglibFactory" />
	<method signature="void &lt;init&gt;(javax.servlet.ServletContext)" class="freemarker.ext.jsp.TaglibFactory" />
	<method signature="boolean isEmpty()" class="freemarker.ext.jsp.TaglibFactory" />
	<method signature="freemarker.template.TemplateModel get(java.lang.String)" class="freemarker.ext.jsp.TaglibFactory" />
	<class name="freemarker.core.ArithmeticEngine" />
	<method signature="int compareNumbers(java.lang.Number,java.lang.Number)" class="freemarker.core.ArithmeticEngine" />
	<method signature="void setMaxScale(int)" class="freemarker.core.ArithmeticEngine" />
	<method signature="java.lang.Number multiply(java.lang.Number,java.lang.Number)" class="freemarker.core.ArithmeticEngine" />
	<method signature="java.lang.Number modulus(java.lang.Number,java.lang.Number)" class="freemarker.core.ArithmeticEngine" />
	<method signature="java.lang.Number divide(java.lang.Number,java.lang.Number)" class="freemarker.core.ArithmeticEngine" />
	<method signature="void setMinScale(int)" class="freemarker.core.ArithmeticEngine" />
	<method signature="java.lang.Number subtract(java.lang.Number,java.lang.Number)" class="freemarker.core.ArithmeticEngine" />
	<method signature="java.lang.Number add(java.lang.Number,java.lang.Number)" class="freemarker.core.ArithmeticEngine" />
	<method signature="java.lang.Number toNumber(java.lang.String)" class="freemarker.core.ArithmeticEngine" />
	<method signature="void &lt;init&gt;()" class="freemarker.core.ArithmeticEngine" />
	<method signature="void setRoundingPolicy(int)" class="freemarker.core.ArithmeticEngine" />
	<class name="org.jdom2.transform.JDOMResult" />
	<method signature="void setHandler(org.xml.sax.ContentHandler)" class="org.jdom2.transform.JDOMResult" />
	<method signature="void &lt;init&gt;()" class="org.jdom2.transform.JDOMResult" />
	<method signature="void setDocument(org.jdom2.Document)" class="org.jdom2.transform.JDOMResult" />
	<method signature="void setFactory(org.jdom2.JDOMFactory)" class="org.jdom2.transform.JDOMResult" />
	<method signature="org.jdom2.JDOMFactory getFactory()" class="org.jdom2.transform.JDOMResult" />
	<method signature="void setLexicalHandler(org.xml.sax.ext.LexicalHandler)" class="org.jdom2.transform.JDOMResult" />
	<method signature="org.jdom2.Document getDocument()" class="org.jdom2.transform.JDOMResult" />
	<method signature="void setResult(java.util.List)" class="org.jdom2.transform.JDOMResult" />
	<method signature="java.util.List getResult()" class="org.jdom2.transform.JDOMResult" />
	<class name="org.jfree.ui.about.SystemPropertiesTableModel$SystemPropertyComparator" />
	<method signature="int hashCode()" class="org.jfree.ui.about.SystemPropertiesTableModel$SystemPropertyComparator" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.ui.about.SystemPropertiesTableModel$SystemPropertyComparator" />
	<method signature="void &lt;init&gt;(boolean)" class="org.jfree.ui.about.SystemPropertiesTableModel$SystemPropertyComparator" />
	<method signature="int compare(java.lang.Object,java.lang.Object)" class="org.jfree.ui.about.SystemPropertiesTableModel$SystemPropertyComparator" />
	<class name="freemarker.core.SimpleCharStream" />
	<method signature="int getBeginLine()" class="freemarker.core.SimpleCharStream" />
	<method signature="void ReInit(java.io.Reader)" class="freemarker.core.SimpleCharStream" />
	<method signature="int getBeginColumn()" class="freemarker.core.SimpleCharStream" />
	<method signature="void ReInit(java.io.Reader,int,int,int)" class="freemarker.core.SimpleCharStream" />
	<method signature="void &lt;init&gt;(java.io.Reader,int,int)" class="freemarker.core.SimpleCharStream" />
	<method signature="void &lt;init&gt;(java.io.InputStream,int,int,int)" class="freemarker.core.SimpleCharStream" />
	<method signature="void ReInit(java.io.InputStream)" class="freemarker.core.SimpleCharStream" />
	<method signature="void ReInit(java.io.InputStream,int,int)" class="freemarker.core.SimpleCharStream" />
	<method signature="char[] GetSuffix(int)" class="freemarker.core.SimpleCharStream" />
	<method signature="void adjustBeginLineColumn(int,int)" class="freemarker.core.SimpleCharStream" />
	<method signature="int getLine()" class="freemarker.core.SimpleCharStream" />
	<method signature="void backup(int)" class="freemarker.core.SimpleCharStream" />
	<method signature="void &lt;init&gt;(java.io.InputStream,int,int)" class="freemarker.core.SimpleCharStream" />
	<method signature="void &lt;init&gt;(java.io.InputStream)" class="freemarker.core.SimpleCharStream" />
	<method signature="int getColumn()" class="freemarker.core.SimpleCharStream" />
	<method signature="int getEndColumn()" class="freemarker.core.SimpleCharStream" />
	<method signature="int getEndLine()" class="freemarker.core.SimpleCharStream" />
	<method signature="java.lang.String GetImage()" class="freemarker.core.SimpleCharStream" />
	<method signature="void &lt;init&gt;(java.io.Reader)" class="freemarker.core.SimpleCharStream" />
	<method signature="void Done()" class="freemarker.core.SimpleCharStream" />
	<method signature="void &lt;init&gt;(java.io.Reader,int,int,int)" class="freemarker.core.SimpleCharStream" />
	<method signature="char BeginToken()" class="freemarker.core.SimpleCharStream" />
	<method signature="void ReInit(java.io.Reader,int,int)" class="freemarker.core.SimpleCharStream" />
	<method signature="void ReInit(java.io.InputStream,int,int,int)" class="freemarker.core.SimpleCharStream" />
	<method signature="char readChar()" class="freemarker.core.SimpleCharStream" />
	<class name="org.apache.xerces.xs.XSMultiValueFacet" />
	<method signature="short getFacetKind()" class="org.apache.xerces.xs.XSMultiValueFacet" />
	<method signature="org.apache.xerces.xs.StringList getLexicalFacetValues()" class="org.apache.xerces.xs.XSMultiValueFacet" />
	<method signature="org.apache.xerces.xs.XSObjectList getAnnotations()" class="org.apache.xerces.xs.XSMultiValueFacet" />
	<method signature="org.apache.xerces.xs.datatypes.ObjectList getEnumerationValues()" class="org.apache.xerces.xs.XSMultiValueFacet" />
	<class name="org.apache.xerces.dom.DOMConfigurationImpl" />
	<method signature="void setLocale(java.util.Locale)" class="org.apache.xerces.dom.DOMConfigurationImpl" />
	<method signature="java.lang.Object getParameter(java.lang.String)" class="org.apache.xerces.dom.DOMConfigurationImpl" />
	<method signature="org.apache.xerces.xni.XMLDTDContentModelHandler getDTDContentModelHandler()" class="org.apache.xerces.dom.DOMConfigurationImpl" />
	<method signature="void parse(org.apache.xerces.xni.parser.XMLInputSource)" class="org.apache.xerces.dom.DOMConfigurationImpl" />
	<method signature="boolean getFeature(java.lang.String)" class="org.apache.xerces.dom.DOMConfigurationImpl" />
	<method signature="java.util.Locale getLocale()" class="org.apache.xerces.dom.DOMConfigurationImpl" />
	<method signature="void setParameter(java.lang.String,java.lang.Object)" class="org.apache.xerces.dom.DOMConfigurationImpl" />
	<method signature="void setDocumentHandler(org.apache.xerces.xni.XMLDocumentHandler)" class="org.apache.xerces.dom.DOMConfigurationImpl" />
	<method signature="org.apache.xerces.xni.parser.XMLErrorHandler getErrorHandler()" class="org.apache.xerces.dom.DOMConfigurationImpl" />
	<method signature="void setDTDHandler(org.apache.xerces.xni.XMLDTDHandler)" class="org.apache.xerces.dom.DOMConfigurationImpl" />
	<method signature="void setFeature(java.lang.String,boolean)" class="org.apache.xerces.dom.DOMConfigurationImpl" />
	<method signature="org.apache.xerces.xni.XMLDTDHandler getDTDHandler()" class="org.apache.xerces.dom.DOMConfigurationImpl" />
	<method signature="void setEntityResolver(org.apache.xerces.xni.parser.XMLEntityResolver)" class="org.apache.xerces.dom.DOMConfigurationImpl" />
	<method signature="org.apache.xerces.xni.XMLDocumentHandler getDocumentHandler()" class="org.apache.xerces.dom.DOMConfigurationImpl" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="org.apache.xerces.dom.DOMConfigurationImpl" />
	<method signature="boolean canSetParameter(java.lang.String,java.lang.Object)" class="org.apache.xerces.dom.DOMConfigurationImpl" />
	<method signature="org.w3c.dom.DOMStringList getParameterNames()" class="org.apache.xerces.dom.DOMConfigurationImpl" />
	<method signature="void setErrorHandler(org.apache.xerces.xni.parser.XMLErrorHandler)" class="org.apache.xerces.dom.DOMConfigurationImpl" />
	<method signature="void setDTDContentModelHandler(org.apache.xerces.xni.XMLDTDContentModelHandler)" class="org.apache.xerces.dom.DOMConfigurationImpl" />
	<method signature="org.apache.xerces.xni.parser.XMLEntityResolver getEntityResolver()" class="org.apache.xerces.dom.DOMConfigurationImpl" />
	<class name="com.hexidec.ekit.component.ExtendedHTMLEditorKit" />
	<method signature="void &lt;init&gt;()" class="com.hexidec.ekit.component.ExtendedHTMLEditorKit" />
	<method signature="javax.swing.text.ViewFactory getViewFactory()" class="com.hexidec.ekit.component.ExtendedHTMLEditorKit" />
	<method signature="javax.swing.text.Document createDefaultDocument()" class="com.hexidec.ekit.component.ExtendedHTMLEditorKit" />
	<class name="org.apache.xerces.dom.TreeWalkerImpl" />
	<method signature="org.w3c.dom.Node parentNode()" class="org.apache.xerces.dom.TreeWalkerImpl" />
	<method signature="org.w3c.dom.Node nextNode()" class="org.apache.xerces.dom.TreeWalkerImpl" />
	<method signature="org.w3c.dom.Node previousNode()" class="org.apache.xerces.dom.TreeWalkerImpl" />
	<method signature="void setWhatShow(int)" class="org.apache.xerces.dom.TreeWalkerImpl" />
	<method signature="org.w3c.dom.Node nextSibling()" class="org.apache.xerces.dom.TreeWalkerImpl" />
	<method signature="org.w3c.dom.Node getCurrentNode()" class="org.apache.xerces.dom.TreeWalkerImpl" />
	<method signature="boolean getExpandEntityReferences()" class="org.apache.xerces.dom.TreeWalkerImpl" />
	<method signature="org.w3c.dom.traversal.NodeFilter getFilter()" class="org.apache.xerces.dom.TreeWalkerImpl" />
	<method signature="void setCurrentNode(org.w3c.dom.Node)" class="org.apache.xerces.dom.TreeWalkerImpl" />
	<method signature="int getWhatToShow()" class="org.apache.xerces.dom.TreeWalkerImpl" />
	<method signature="org.w3c.dom.Node firstChild()" class="org.apache.xerces.dom.TreeWalkerImpl" />
	<method signature="org.w3c.dom.Node lastChild()" class="org.apache.xerces.dom.TreeWalkerImpl" />
	<method signature="org.w3c.dom.Node previousSibling()" class="org.apache.xerces.dom.TreeWalkerImpl" />
	<method signature="org.w3c.dom.Node getRoot()" class="org.apache.xerces.dom.TreeWalkerImpl" />
	<method signature="void &lt;init&gt;(org.w3c.dom.Node,int,org.w3c.dom.traversal.NodeFilter,boolean)" class="org.apache.xerces.dom.TreeWalkerImpl" />
	<class name="org.jdom2.output.support.AbstractStAXEventProcessor" />
	<method signature="void process(javax.xml.stream.util.XMLEventConsumer,org.jdom2.output.Format,javax.xml.stream.XMLEventFactory,org.jdom2.CDATA)" class="org.jdom2.output.support.AbstractStAXEventProcessor" />
	<method signature="void process(javax.xml.stream.util.XMLEventConsumer,org.jdom2.output.Format,javax.xml.stream.XMLEventFactory,org.jdom2.ProcessingInstruction)" class="org.jdom2.output.support.AbstractStAXEventProcessor" />
	<method signature="void process(javax.xml.stream.util.XMLEventConsumer,org.jdom2.output.Format,javax.xml.stream.XMLEventFactory,org.jdom2.Document)" class="org.jdom2.output.support.AbstractStAXEventProcessor" />
	<method signature="void &lt;init&gt;()" class="org.jdom2.output.support.AbstractStAXEventProcessor" />
	<method signature="void process(javax.xml.stream.util.XMLEventConsumer,org.jdom2.output.Format,javax.xml.stream.XMLEventFactory,org.jdom2.DocType)" class="org.jdom2.output.support.AbstractStAXEventProcessor" />
	<method signature="void process(javax.xml.stream.util.XMLEventConsumer,org.jdom2.output.Format,javax.xml.stream.XMLEventFactory,org.jdom2.Comment)" class="org.jdom2.output.support.AbstractStAXEventProcessor" />
	<method signature="void process(javax.xml.stream.util.XMLEventConsumer,org.jdom2.output.Format,javax.xml.stream.XMLEventFactory,org.jdom2.Text)" class="org.jdom2.output.support.AbstractStAXEventProcessor" />
	<method signature="void process(javax.xml.stream.util.XMLEventConsumer,org.jdom2.output.Format,javax.xml.stream.XMLEventFactory,java.util.List)" class="org.jdom2.output.support.AbstractStAXEventProcessor" />
	<method signature="void process(javax.xml.stream.util.XMLEventConsumer,org.jdom2.output.Format,javax.xml.stream.XMLEventFactory,org.jdom2.EntityRef)" class="org.jdom2.output.support.AbstractStAXEventProcessor" />
	<method signature="void process(javax.xml.stream.util.XMLEventConsumer,org.jdom2.output.Format,javax.xml.stream.XMLEventFactory,org.jdom2.Element)" class="org.jdom2.output.support.AbstractStAXEventProcessor" />
	<class name="org.apache.xerces.xs.XSModelGroup" />
	<method signature="short getCompositor()" class="org.apache.xerces.xs.XSModelGroup" />
	<method signature="org.apache.xerces.xs.XSAnnotation getAnnotation()" class="org.apache.xerces.xs.XSModelGroup" />
	<method signature="org.apache.xerces.xs.XSObjectList getAnnotations()" class="org.apache.xerces.xs.XSModelGroup" />
	<method signature="org.apache.xerces.xs.XSObjectList getParticles()" class="org.apache.xerces.xs.XSModelGroup" />
	<class name="org.apache.commons.lang3.text.translate.CharSequenceTranslator" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.text.translate.CharSequenceTranslator" />
	<method signature="java.lang.String translate(java.lang.CharSequence)" class="org.apache.commons.lang3.text.translate.CharSequenceTranslator" />
	<method signature="void translate(java.lang.CharSequence,java.io.Writer)" class="org.apache.commons.lang3.text.translate.CharSequenceTranslator" />
	<method signature="java.lang.String hex(int)" class="org.apache.commons.lang3.text.translate.CharSequenceTranslator" />
	<method signature="int translate(java.lang.CharSequence,int,java.io.Writer)" class="org.apache.commons.lang3.text.translate.CharSequenceTranslator" />
	<method signature="org.apache.commons.lang3.text.translate.CharSequenceTranslator with(org.apache.commons.lang3.text.translate.CharSequenceTranslator[])" class="org.apache.commons.lang3.text.translate.CharSequenceTranslator" />
	<class name="com.swabunga.spell.engine.Transformator" />
	<method signature="java.lang.String transform(java.lang.String)" class="com.swabunga.spell.engine.Transformator" />
	<class name="com.google.zxing.client.result.ResultParser" />
	<method signature="com.google.zxing.client.result.ParsedResult parseResult(com.google.zxing.Result)" class="com.google.zxing.client.result.ResultParser" />
	<method signature="com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result)" class="com.google.zxing.client.result.ResultParser" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.client.result.ResultParser" />
	<class name="org.apache.xerces.impl.dtd.XMLDTDLoader" />
	<method signature="void setEntityResolver(org.apache.xerces.xni.parser.XMLEntityResolver)" class="org.apache.xerces.impl.dtd.XMLDTDLoader" />
	<method signature="java.lang.String[] getRecognizedProperties()" class="org.apache.xerces.impl.dtd.XMLDTDLoader" />
	<method signature="void setLocale(java.util.Locale)" class="org.apache.xerces.impl.dtd.XMLDTDLoader" />
	<method signature="java.lang.String[] getRecognizedFeatures()" class="org.apache.xerces.impl.dtd.XMLDTDLoader" />
	<method signature="boolean getFeature(java.lang.String)" class="org.apache.xerces.impl.dtd.XMLDTDLoader" />
	<method signature="java.util.Locale getLocale()" class="org.apache.xerces.impl.dtd.XMLDTDLoader" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="org.apache.xerces.impl.dtd.XMLDTDLoader" />
	<method signature="void loadGrammarWithContext(org.apache.xerces.impl.dtd.XMLDTDValidator,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.impl.dtd.XMLDTDLoader" />
	<method signature="org.apache.xerces.xni.grammars.Grammar loadGrammar(org.apache.xerces.xni.parser.XMLInputSource)" class="org.apache.xerces.impl.dtd.XMLDTDLoader" />
	<method signature="org.apache.xerces.xni.parser.XMLErrorHandler getErrorHandler()" class="org.apache.xerces.impl.dtd.XMLDTDLoader" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable)" class="org.apache.xerces.impl.dtd.XMLDTDLoader" />
	<method signature="void setErrorHandler(org.apache.xerces.xni.parser.XMLErrorHandler)" class="org.apache.xerces.impl.dtd.XMLDTDLoader" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dtd.XMLDTDLoader" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable,org.apache.xerces.xni.grammars.XMLGrammarPool)" class="org.apache.xerces.impl.dtd.XMLDTDLoader" />
	<method signature="org.apache.xerces.xni.parser.XMLEntityResolver getEntityResolver()" class="org.apache.xerces.impl.dtd.XMLDTDLoader" />
	<method signature="void setFeature(java.lang.String,boolean)" class="org.apache.xerces.impl.dtd.XMLDTDLoader" />
	<method signature="java.lang.Object getProperty(java.lang.String)" class="org.apache.xerces.impl.dtd.XMLDTDLoader" />
	<class name="javax.xml.stream.util.XMLEventConsumer" />
	<method signature="void add(javax.xml.stream.events.XMLEvent)" class="javax.xml.stream.util.XMLEventConsumer" />
	<class name="org.apache.xerces.impl.xpath.regex.Match" />
	<method signature="java.lang.Object clone()" class="org.apache.xerces.impl.xpath.regex.Match" />
	<method signature="java.lang.String getCapturedText(int)" class="org.apache.xerces.impl.xpath.regex.Match" />
	<method signature="int getEnd(int)" class="org.apache.xerces.impl.xpath.regex.Match" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xpath.regex.Match" />
	<method signature="int getBeginning(int)" class="org.apache.xerces.impl.xpath.regex.Match" />
	<method signature="int getNumberOfGroups()" class="org.apache.xerces.impl.xpath.regex.Match" />
	<class name="org.apache.xerces.jaxp.validation.XSGrammarPoolContainer" />
	<method signature="org.apache.xerces.xni.grammars.XMLGrammarPool getGrammarPool()" class="org.apache.xerces.jaxp.validation.XSGrammarPoolContainer" />
	<method signature="boolean isFullyComposed()" class="org.apache.xerces.jaxp.validation.XSGrammarPoolContainer" />
	<method signature="java.lang.Boolean getFeature(java.lang.String)" class="org.apache.xerces.jaxp.validation.XSGrammarPoolContainer" />
	<class name="org.apache.xerces.util.ErrorHandlerProxy" />
	<method signature="void warning(org.xml.sax.SAXParseException)" class="org.apache.xerces.util.ErrorHandlerProxy" />
	<method signature="void error(org.xml.sax.SAXParseException)" class="org.apache.xerces.util.ErrorHandlerProxy" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.util.ErrorHandlerProxy" />
	<method signature="void fatalError(org.xml.sax.SAXParseException)" class="org.apache.xerces.util.ErrorHandlerProxy" />
	<class name="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setOutlineStroke(java.awt.Stroke)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="boolean getBaseSeriesVisible()" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="java.awt.Font getItemLabelFont(int,int)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setBaseItemLabelFont(java.awt.Font)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setSeriesPaint(int,java.awt.Paint)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setSeriesPositiveItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition,boolean)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="org.jfree.chart.labels.XYItemLabelGenerator getSeriesItemLabelGenerator(int)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="org.jfree.chart.labels.ItemLabelPosition getPositiveItemLabelPosition()" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setSeriesOutlineStroke(int,java.awt.Stroke)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void drawDomainMarker(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="java.awt.Stroke getSeriesOutlineStroke(int)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setItemLabelPaint(java.awt.Paint)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void removeChangeListener(org.jfree.chart.event.RendererChangeListener)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="org.jfree.chart.LegendItem getLegendItem(int,int)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void addAnnotation(org.jfree.chart.annotations.XYAnnotation)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void fillDomainGridBand(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,double)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="boolean getItemVisible(int,int)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="org.jfree.chart.labels.XYItemLabelGenerator getBaseItemLabelGenerator()" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="org.jfree.chart.labels.ItemLabelPosition getPositiveItemLabelPosition(int,int)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="boolean isSeriesItemLabelsVisible(int)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="org.jfree.chart.labels.ItemLabelPosition getBasePositiveItemLabelPosition()" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setItemLabelFont(java.awt.Font)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setBaseOutlinePaint(java.awt.Paint)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setItemLabelsVisible(java.lang.Boolean)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setSeriesVisible(int,java.lang.Boolean)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setBaseItemLabelPaint(java.awt.Paint)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="boolean isSeriesVisibleInLegend(int)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="org.jfree.chart.labels.XYToolTipGenerator getBaseToolTipGenerator()" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="org.jfree.chart.labels.XYItemLabelGenerator getItemLabelGenerator(int,int)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="java.awt.Paint getSeriesItemLabelPaint(int)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setSeriesPositiveItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setPlot(org.jfree.chart.plot.XYPlot)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setItemLabelsVisible(java.lang.Boolean,boolean)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="int getPassCount()" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setBaseItemLabelGenerator(org.jfree.chart.labels.XYItemLabelGenerator)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setSeriesOutlinePaint(int,java.awt.Paint)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="boolean isItemLabelVisible(int,int)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setSeriesVisible(java.lang.Boolean)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setSeriesItemLabelsVisible(int,java.lang.Boolean,boolean)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setBaseSeriesVisibleInLegend(boolean)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setOutlinePaint(java.awt.Paint)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="java.awt.Paint getItemLabelPaint()" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="org.jfree.chart.labels.ItemLabelPosition getNegativeItemLabelPosition(int,int)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setPaint(java.awt.Paint)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setSeriesVisible(java.lang.Boolean,boolean)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setSeriesVisibleInLegend(int,java.lang.Boolean,boolean)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="org.jfree.chart.labels.XYToolTipGenerator getSeriesToolTipGenerator(int)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setSeriesToolTipGenerator(int,org.jfree.chart.labels.XYToolTipGenerator)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="java.awt.Shape getSeriesShape(int)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="org.jfree.chart.labels.XYToolTipGenerator getToolTipGenerator(int,int)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="org.jfree.chart.labels.ItemLabelPosition getNegativeItemLabelPosition()" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setShape(java.awt.Shape)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="java.awt.Shape getBaseShape()" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="java.awt.Paint getItemPaint(int,int)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void addChangeListener(org.jfree.chart.event.RendererChangeListener)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="java.awt.Paint getBasePaint()" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setBaseShape(java.awt.Shape)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setSeriesItemLabelsVisible(int,boolean)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="java.awt.Paint getBaseItemLabelPaint()" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void fillRangeGridBand(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,double)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setItemLabelsVisible(boolean)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setStroke(java.awt.Stroke)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setBaseSeriesVisible(boolean)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setSeriesShape(int,java.awt.Shape)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="java.lang.Boolean getSeriesVisibleInLegend()" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setNegativeItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setNegativeItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition,boolean)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="java.lang.Boolean getSeriesVisible(int)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="java.awt.Stroke getSeriesStroke(int)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setSeriesItemLabelFont(int,java.awt.Font)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="java.awt.Paint getBaseOutlinePaint()" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="org.jfree.chart.urls.XYURLGenerator getURLGenerator()" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setURLGenerator(org.jfree.chart.urls.XYURLGenerator)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="java.awt.Shape getItemShape(int,int)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="org.jfree.chart.labels.ItemLabelPosition getBaseNegativeItemLabelPosition()" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void addAnnotation(org.jfree.chart.annotations.XYAnnotation,org.jfree.ui.Layer)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setSeriesItemLabelPaint(int,java.awt.Paint)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="java.awt.Stroke getBaseOutlineStroke()" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setBaseStroke(java.awt.Stroke)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="java.awt.Font getItemLabelFont()" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="java.awt.Font getBaseItemLabelFont()" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setSeriesItemLabelsVisible(int,java.lang.Boolean)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="org.jfree.chart.labels.ItemLabelPosition getSeriesNegativeItemLabelPosition(int)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="java.awt.Paint getSeriesOutlinePaint(int)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="java.awt.Stroke getItemOutlineStroke(int,int)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setBaseItemLabelsVisible(java.lang.Boolean)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setBaseOutlineStroke(java.awt.Stroke)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="java.awt.Paint getItemOutlinePaint(int,int)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="java.lang.Boolean getSeriesVisible()" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="boolean isSeriesVisible(int)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="org.jfree.chart.plot.XYPlot getPlot()" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setSeriesVisibleInLegend(int,java.lang.Boolean)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setBasePaint(java.awt.Paint)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setBaseItemLabelsVisible(java.lang.Boolean,boolean)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="java.lang.Boolean getSeriesVisibleInLegend(int)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void drawRangeLine(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,java.awt.Paint,java.awt.Stroke)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setSeriesVisibleInLegend(java.lang.Boolean,boolean)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setSeriesVisible(int,java.lang.Boolean,boolean)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setBaseSeriesVisibleInLegend(boolean,boolean)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="boolean getBaseSeriesVisibleInLegend()" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setToolTipGenerator(org.jfree.chart.labels.XYToolTipGenerator)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setSeriesVisibleInLegend(java.lang.Boolean)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="org.jfree.chart.labels.XYSeriesLabelGenerator getLegendItemLabelGenerator()" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setSeriesNegativeItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition,boolean)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="java.awt.Stroke getBaseStroke()" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setBaseToolTipGenerator(org.jfree.chart.labels.XYToolTipGenerator)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void removeAnnotations()" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setLegendItemLabelGenerator(org.jfree.chart.labels.XYSeriesLabelGenerator)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setPositiveItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition,boolean)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="java.lang.Boolean getBaseItemLabelsVisible()" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void drawDomainGridLine(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setSeriesStroke(int,java.awt.Stroke)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setSeriesNegativeItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setPositiveItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setBaseItemLabelsVisible(boolean)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="org.jfree.chart.labels.ItemLabelPosition getSeriesPositiveItemLabelPosition(int)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setBasePositiveItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="boolean removeAnnotation(org.jfree.chart.annotations.XYAnnotation)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setItemLabelGenerator(org.jfree.chart.labels.XYItemLabelGenerator)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="java.awt.Paint getSeriesPaint(int)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="java.awt.Paint getItemLabelPaint(int,int)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void drawAnnotations(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.ui.Layer,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="java.awt.Stroke getItemStroke(int,int)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setSeriesItemLabelGenerator(int,org.jfree.chart.labels.XYItemLabelGenerator)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setBasePositiveItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition,boolean)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setBaseNegativeItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setBaseSeriesVisible(boolean,boolean)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="void setBaseNegativeItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition,boolean)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<method signature="java.awt.Font getSeriesItemLabelFont(int)" class="org.jfree.chart.renderer.xy.XYItemRenderer" />
	<class name="com.hexidec.ekit.EkitCoreSpell" />
	<method signature="void &lt;init&gt;(boolean,java.lang.String,java.net.URL,boolean,boolean,boolean,boolean,java.lang.String,java.lang.String,boolean,boolean,java.lang.String,boolean)" class="com.hexidec.ekit.EkitCoreSpell" />
	<method signature="void &lt;init&gt;()" class="com.hexidec.ekit.EkitCoreSpell" />
	<method signature="void spellingError(com.swabunga.spell.event.SpellCheckEvent)" class="com.hexidec.ekit.EkitCoreSpell" />
	<method signature="void checkDocumentSpelling(javax.swing.text.Document)" class="com.hexidec.ekit.EkitCoreSpell" />
	<method signature="void &lt;init&gt;(boolean)" class="com.hexidec.ekit.EkitCoreSpell" />
	<method signature="void &lt;init&gt;(boolean,java.lang.String,java.lang.String,java.lang.String,javax.swing.text.StyledDocument,java.net.URL,boolean,boolean,boolean,boolean,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,java.lang.String,boolean)" class="com.hexidec.ekit.EkitCoreSpell" />
	<class name="org.apache.xerces.impl.xs.util.XSNamedMap4Types" />
	<method signature="org.apache.xerces.xs.XSObject itemByName(java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.util.XSNamedMap4Types" />
	<method signature="void &lt;init&gt;(java.lang.String[],org.apache.xerces.util.SymbolHash[],int,short)" class="org.apache.xerces.impl.xs.util.XSNamedMap4Types" />
	<method signature="org.apache.xerces.xs.XSObject item(int)" class="org.apache.xerces.impl.xs.util.XSNamedMap4Types" />
	<method signature="void &lt;init&gt;(java.lang.String,org.apache.xerces.util.SymbolHash,short)" class="org.apache.xerces.impl.xs.util.XSNamedMap4Types" />
	<method signature="int getLength()" class="org.apache.xerces.impl.xs.util.XSNamedMap4Types" />
	<class name="org.apache.xerces.xs.XSException" />
	<method signature="void &lt;init&gt;(short,java.lang.String)" class="org.apache.xerces.xs.XSException" />
	<class name="freemarker.cache.ClassTemplateLoader" />
	<method signature="void &lt;init&gt;(java.lang.Class)" class="freemarker.cache.ClassTemplateLoader" />
	<method signature="void &lt;init&gt;()" class="freemarker.cache.ClassTemplateLoader" />
	<method signature="void &lt;init&gt;(java.lang.Class,java.lang.String)" class="freemarker.cache.ClassTemplateLoader" />
	<class name="javax.xml.parsers.SAXParserFactory" />
	<method signature="javax.xml.parsers.SAXParser newSAXParser()" class="javax.xml.parsers.SAXParserFactory" />
	<method signature="boolean isXIncludeAware()" class="javax.xml.parsers.SAXParserFactory" />
	<method signature="boolean getFeature(java.lang.String)" class="javax.xml.parsers.SAXParserFactory" />
	<method signature="void setXIncludeAware(boolean)" class="javax.xml.parsers.SAXParserFactory" />
	<method signature="void setValidating(boolean)" class="javax.xml.parsers.SAXParserFactory" />
	<method signature="javax.xml.validation.Schema getSchema()" class="javax.xml.parsers.SAXParserFactory" />
	<method signature="boolean isValidating()" class="javax.xml.parsers.SAXParserFactory" />
	<method signature="javax.xml.parsers.SAXParserFactory newInstance(java.lang.String,java.lang.ClassLoader)" class="javax.xml.parsers.SAXParserFactory" />
	<method signature="boolean isNamespaceAware()" class="javax.xml.parsers.SAXParserFactory" />
	<method signature="void setFeature(java.lang.String,boolean)" class="javax.xml.parsers.SAXParserFactory" />
	<method signature="javax.xml.parsers.SAXParserFactory newInstance()" class="javax.xml.parsers.SAXParserFactory" />
	<method signature="void setNamespaceAware(boolean)" class="javax.xml.parsers.SAXParserFactory" />
	<method signature="void setSchema(javax.xml.validation.Schema)" class="javax.xml.parsers.SAXParserFactory" />
	<class name="org.apache.xerces.impl.dv.xs.UnionDV" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.xs.UnionDV" />
	<method signature="java.lang.Object getActualValue(java.lang.String,org.apache.xerces.impl.dv.ValidationContext)" class="org.apache.xerces.impl.dv.xs.UnionDV" />
	<method signature="short getAllowedFacets()" class="org.apache.xerces.impl.dv.xs.UnionDV" />
	<class name="com.google.zxing.client.result.URIResultParser" />
	<method signature="com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result)" class="com.google.zxing.client.result.URIResultParser" />
	<method signature="com.google.zxing.client.result.URIParsedResult parse(com.google.zxing.Result)" class="com.google.zxing.client.result.URIResultParser" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.client.result.URIResultParser" />
	<class name="org.jfree.chart.plot.dial.DialPointer$Pin" />
	<method signature="void &lt;init&gt;(int)" class="org.jfree.chart.plot.dial.DialPointer$Pin" />
	<method signature="int hashCode()" class="org.jfree.chart.plot.dial.DialPointer$Pin" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.plot.dial.DialPointer$Pin" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.plot.dial.DialPointer$Pin" />
	<method signature="void setStroke(java.awt.Stroke)" class="org.jfree.chart.plot.dial.DialPointer$Pin" />
	<method signature="java.awt.Paint getPaint()" class="org.jfree.chart.plot.dial.DialPointer$Pin" />
	<method signature="void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)" class="org.jfree.chart.plot.dial.DialPointer$Pin" />
	<method signature="java.awt.Stroke getStroke()" class="org.jfree.chart.plot.dial.DialPointer$Pin" />
	<method signature="void setPaint(java.awt.Paint)" class="org.jfree.chart.plot.dial.DialPointer$Pin" />
	<class name="org.jfree.data.time.Minute" />
	<method signature="int compareTo(java.lang.Object)" class="org.jfree.data.time.Minute" />
	<method signature="int hashCode()" class="org.jfree.data.time.Minute" />
	<method signature="void &lt;init&gt;(java.util.Date,java.util.TimeZone)" class="org.jfree.data.time.Minute" />
	<method signature="org.jfree.data.time.RegularTimePeriod previous()" class="org.jfree.data.time.Minute" />
	<method signature="long getLastMillisecond()" class="org.jfree.data.time.Minute" />
	<method signature="org.jfree.data.time.Hour getHour()" class="org.jfree.data.time.Minute" />
	<method signature="org.jfree.data.time.RegularTimePeriod next()" class="org.jfree.data.time.Minute" />
	<method signature="long getLastMillisecond(java.util.Calendar)" class="org.jfree.data.time.Minute" />
	<method signature="int getHourValue()" class="org.jfree.data.time.Minute" />
	<method signature="int getMinute()" class="org.jfree.data.time.Minute" />
	<method signature="void &lt;init&gt;(java.util.Date)" class="org.jfree.data.time.Minute" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.time.Minute" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.time.Minute" />
	<method signature="long getFirstMillisecond()" class="org.jfree.data.time.Minute" />
	<method signature="void peg(java.util.Calendar)" class="org.jfree.data.time.Minute" />
	<method signature="void &lt;init&gt;(java.util.Date,java.util.TimeZone,java.util.Locale)" class="org.jfree.data.time.Minute" />
	<method signature="org.jfree.data.time.Minute parseMinute(java.lang.String)" class="org.jfree.data.time.Minute" />
	<method signature="long getFirstMillisecond(java.util.Calendar)" class="org.jfree.data.time.Minute" />
	<method signature="void &lt;init&gt;(int,int,int,int,int)" class="org.jfree.data.time.Minute" />
	<method signature="long getSerialIndex()" class="org.jfree.data.time.Minute" />
	<method signature="void &lt;init&gt;(int,org.jfree.data.time.Hour)" class="org.jfree.data.time.Minute" />
	<method signature="org.jfree.data.time.Day getDay()" class="org.jfree.data.time.Minute" />
	<class name="org.apache.xerces.dom.DeferredDOMImplementationImpl" />
	<method signature="org.w3c.dom.DOMImplementation getDOMImplementation()" class="org.apache.xerces.dom.DeferredDOMImplementationImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.dom.DeferredDOMImplementationImpl" />
	<class name="org.apache.xerces.xni.XMLDocumentFragmentHandler" />
	<method signature="void processingInstruction(java.lang.String,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDocumentFragmentHandler" />
	<method signature="void endElement(org.apache.xerces.xni.QName,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDocumentFragmentHandler" />
	<method signature="void startCDATA(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDocumentFragmentHandler" />
	<method signature="void endDocumentFragment(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDocumentFragmentHandler" />
	<method signature="void ignorableWhitespace(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDocumentFragmentHandler" />
	<method signature="void startElement(org.apache.xerces.xni.QName,org.apache.xerces.xni.XMLAttributes,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDocumentFragmentHandler" />
	<method signature="void endCDATA(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDocumentFragmentHandler" />
	<method signature="void textDecl(java.lang.String,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDocumentFragmentHandler" />
	<method signature="void startGeneralEntity(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDocumentFragmentHandler" />
	<method signature="void comment(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDocumentFragmentHandler" />
	<method signature="void startDocumentFragment(org.apache.xerces.xni.XMLLocator,org.apache.xerces.xni.NamespaceContext,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDocumentFragmentHandler" />
	<method signature="void emptyElement(org.apache.xerces.xni.QName,org.apache.xerces.xni.XMLAttributes,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDocumentFragmentHandler" />
	<method signature="void endGeneralEntity(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDocumentFragmentHandler" />
	<method signature="void characters(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDocumentFragmentHandler" />
	<class name="org.w3c.dom.Notation" />
	<method signature="java.lang.String getSystemId()" class="org.w3c.dom.Notation" />
	<method signature="java.lang.String getPublicId()" class="org.w3c.dom.Notation" />
	<class name="com.toedter.calendar.DateUtil" />
	<method signature="boolean checkDate(java.util.Date)" class="com.toedter.calendar.DateUtil" />
	<method signature="void &lt;init&gt;()" class="com.toedter.calendar.DateUtil" />
	<method signature="java.util.Date setMinSelectableDate(java.util.Date)" class="com.toedter.calendar.DateUtil" />
	<method signature="java.util.Date setMaxSelectableDate(java.util.Date)" class="com.toedter.calendar.DateUtil" />
	<method signature="java.util.Date getMinSelectableDate()" class="com.toedter.calendar.DateUtil" />
	<method signature="void setSelectableDateRange(java.util.Date,java.util.Date)" class="com.toedter.calendar.DateUtil" />
	<method signature="java.util.Date getMaxSelectableDate()" class="com.toedter.calendar.DateUtil" />
	<class name="com.google.zxing.qrcode.decoder.Version" />
	<method signature="int getTotalCodewords()" class="com.google.zxing.qrcode.decoder.Version" />
	<method signature="com.google.zxing.qrcode.decoder.Version$ECBlocks getECBlocksForLevel(com.google.zxing.qrcode.decoder.ErrorCorrectionLevel)" class="com.google.zxing.qrcode.decoder.Version" />
	<method signature="com.google.zxing.qrcode.decoder.Version getVersionForNumber(int)" class="com.google.zxing.qrcode.decoder.Version" />
	<method signature="int getVersionNumber()" class="com.google.zxing.qrcode.decoder.Version" />
	<method signature="int getDimensionForVersion()" class="com.google.zxing.qrcode.decoder.Version" />
	<method signature="java.lang.String toString()" class="com.google.zxing.qrcode.decoder.Version" />
	<method signature="com.google.zxing.qrcode.decoder.Version getProvisionalVersionForDimension(int)" class="com.google.zxing.qrcode.decoder.Version" />
	<method signature="int[] getAlignmentPatternCenters()" class="com.google.zxing.qrcode.decoder.Version" />
	<class name="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="void zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="void setPadding(org.jfree.ui.RectangleInsets)" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="java.awt.Paint getThermometerPaint()" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="int getBulbDiameter()" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="org.jfree.chart.axis.ValueAxis getRangeAxis()" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="org.jfree.ui.RectangleInsets getPadding()" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="boolean getShowValueLines()" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="void setGap(int)" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="int getColumnDiameter()" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="double getLowerBound()" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="void setThermometerStroke(java.awt.Stroke)" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="java.awt.Paint getMercuryPaint()" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="void setColumnRadius(int)" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="void setFollowDataInSubranges(boolean)" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="void setSubrangeInfo(int,double,double)" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="void setDataset(org.jfree.data.general.ValueDataset)" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="int getColumnRadius()" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="void setMercuryPaint(java.awt.Paint)" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="int getGap()" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="void setSubrangeInfo(int,double,double,double,double)" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="void zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="void setAxisLocation(int)" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="org.jfree.chart.plot.PlotOrientation getOrientation()" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="int getAxisLocation()" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="java.lang.Number getMaximumVerticalDataValue()" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="void setLowerBound(double)" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="void zoomDomainAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="java.awt.Stroke getThermometerStroke()" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="void setRange(double,double)" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="double getUpperBound()" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="void setValueLocation(int)" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="java.awt.Paint getValuePaint()" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="boolean getFollowDataInSubranges()" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="void setThermometerPaint(java.awt.Paint)" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="void setBulbRadius(int)" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="java.lang.String getPlotType()" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="java.lang.Number getMinimumVerticalDataValue()" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="void zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="void setValueFont(java.awt.Font)" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="void setValueFormat(java.text.NumberFormat)" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="java.awt.Paint getSubrangePaint(int)" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="void &lt;init&gt;(org.jfree.data.general.ValueDataset)" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="void setRangeAxis(org.jfree.chart.axis.ValueAxis)" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="int getUnits()" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="org.jfree.data.general.ValueDataset getDataset()" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="void setSubrangePaint(int,java.awt.Paint)" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="void setUseSubrangePaint(boolean)" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="void setShowValueLines(boolean)" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="void zoom(double)" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="java.awt.Font getValueFont()" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="void setSubrange(int,double,double)" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="void setDisplayRange(int,double,double)" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="void setUpperBound(double)" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="void zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="boolean isDomainZoomable()" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="void setUnits(int)" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="void datasetChanged(org.jfree.data.general.DatasetChangeEvent)" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="void setUnits(java.lang.String)" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="void setValuePaint(java.awt.Paint)" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="boolean getUseSubrangePaint()" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="void zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="int getValueLocation()" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="boolean isRangeZoomable()" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="org.jfree.chart.LegendItemCollection getLegendItems()" class="org.jfree.chart.plot.ThermometerPlot" />
	<method signature="int getBulbRadius()" class="org.jfree.chart.plot.ThermometerPlot" />
	<class name="freemarker.ext.beans.BeanModel" />
	<method signature="java.lang.Object getAdaptedObject(java.lang.Class)" class="freemarker.ext.beans.BeanModel" />
	<method signature="int size()" class="freemarker.ext.beans.BeanModel" />
	<method signature="freemarker.template.TemplateCollectionModel keys()" class="freemarker.ext.beans.BeanModel" />
	<method signature="freemarker.template.TemplateCollectionModel values()" class="freemarker.ext.beans.BeanModel" />
	<method signature="java.lang.Object getWrappedObject()" class="freemarker.ext.beans.BeanModel" />
	<method signature="boolean isEmpty()" class="freemarker.ext.beans.BeanModel" />
	<method signature="void &lt;init&gt;(java.lang.Object,freemarker.ext.beans.BeansWrapper)" class="freemarker.ext.beans.BeanModel" />
	<method signature="java.lang.String toString()" class="freemarker.ext.beans.BeanModel" />
	<method signature="freemarker.template.TemplateModel get(java.lang.String)" class="freemarker.ext.beans.BeanModel" />
	<class name="org.jfree.ui.action.ActionConcentrator" />
	<method signature="void &lt;init&gt;()" class="org.jfree.ui.action.ActionConcentrator" />
	<method signature="void setEnabled(boolean)" class="org.jfree.ui.action.ActionConcentrator" />
	<method signature="void addAction(javax.swing.Action)" class="org.jfree.ui.action.ActionConcentrator" />
	<method signature="void removeAction(javax.swing.Action)" class="org.jfree.ui.action.ActionConcentrator" />
	<method signature="boolean isEnabled()" class="org.jfree.ui.action.ActionConcentrator" />
	<class name="org.w3c.dom.Entity" />
	<method signature="java.lang.String getSystemId()" class="org.w3c.dom.Entity" />
	<method signature="java.lang.String getXmlEncoding()" class="org.w3c.dom.Entity" />
	<method signature="java.lang.String getInputEncoding()" class="org.w3c.dom.Entity" />
	<method signature="java.lang.String getXmlVersion()" class="org.w3c.dom.Entity" />
	<method signature="java.lang.String getNotationName()" class="org.w3c.dom.Entity" />
	<method signature="java.lang.String getPublicId()" class="org.w3c.dom.Entity" />
	<class name="tourma.data.Tournament" />
	<method signature="void exportFBB(java.io.File)" class="tourma.data.Tournament" />
	<method signature="void saveXML(java.io.File)" class="tourma.data.Tournament" />
	<method signature="tourma.data.Team getTeam(java.lang.String)" class="tourma.data.Tournament" />
	<method signature="java.util.ArrayList getRankingTypes(boolean)" class="tourma.data.Tournament" />
	<method signature="int getActiveCoachNumber()" class="tourma.data.Tournament" />
	<method signature="tourma.data.Group getGroup(int)" class="tourma.data.Tournament" />
	<method signature="void removeTeam(tourma.data.Team)" class="tourma.data.Tournament" />
	<method signature="void removeCoach(tourma.data.Coach)" class="tourma.data.Tournament" />
	<method signature="int getTeamIndex(java.lang.String)" class="tourma.data.Tournament" />
	<method signature="void addPool(tourma.data.Pool)" class="tourma.data.Tournament" />
	<method signature="void removeClan(int)" class="tourma.data.Tournament" />
	<method signature="void removeCoach(int)" class="tourma.data.Tournament" />
	<method signature="int getRoundsCount()" class="tourma.data.Tournament" />
	<method signature="tourma.data.Clan getClan(java.lang.String)" class="tourma.data.Tournament" />
	<method signature="void clearCoachs()" class="tourma.data.Tournament" />
	<method signature="void loadRosters(org.jdom2.Element)" class="tourma.data.Tournament" />
	<method signature="tourma.data.Category getCategory(int)" class="tourma.data.Tournament" />
	<method signature="void exportFullFBB(java.io.File)" class="tourma.data.Tournament" />
	<method signature="tourma.data.Round getRound(int)" class="tourma.data.Tournament" />
	<method signature="tourma.data.Group getGroup(java.lang.String)" class="tourma.data.Tournament" />
	<method signature="void addCoach(tourma.data.Coach)" class="tourma.data.Tournament" />
	<method signature="tourma.data.Team getTeam(int)" class="tourma.data.Tournament" />
	<method signature="boolean containsClan(java.lang.String)" class="tourma.data.Tournament" />
	<method signature="int getPoolCount()" class="tourma.data.Tournament" />
	<method signature="boolean containsTeam(java.lang.String)" class="tourma.data.Tournament" />
	<method signature="void clearCategories()" class="tourma.data.Tournament" />
	<method signature="int getGroupsCount()" class="tourma.data.Tournament" />
	<method signature="void setRoundRobin(boolean)" class="tourma.data.Tournament" />
	<method signature="boolean containsTeam(tourma.data.Team)" class="tourma.data.Tournament" />
	<method signature="void addRound(tourma.data.Round)" class="tourma.data.Tournament" />
	<method signature="void removeRound(int)" class="tourma.data.Tournament" />
	<method signature="boolean containsCoach(tourma.data.Coach)" class="tourma.data.Tournament" />
	<method signature="tourma.data.Parameters getParams()" class="tourma.data.Tournament" />
	<method signature="int getCoachsCount()" class="tourma.data.Tournament" />
	<method signature="void loadXML(java.io.File)" class="tourma.data.Tournament" />
	<method signature="java.util.ArrayList getDisplayClans()" class="tourma.data.Tournament" />
	<method signature="boolean isRoundRobin()" class="tourma.data.Tournament" />
	<method signature="void removeCategory(int)" class="tourma.data.Tournament" />
	<method signature="boolean containsCoach(java.lang.String)" class="tourma.data.Tournament" />
	<method signature="tourma.data.Tournament getTournament()" class="tourma.data.Tournament" />
	<method signature="int getCategoriesCount()" class="tourma.data.Tournament" />
	<method signature="void clearPools()" class="tourma.data.Tournament" />
	<method signature="java.lang.String getDescription()" class="tourma.data.Tournament" />
	<method signature="tourma.data.Clan getClan(int)" class="tourma.data.Tournament" />
	<method signature="tourma.data.Tournament resetTournament()" class="tourma.data.Tournament" />
	<method signature="boolean containsGroup(tourma.data.Group)" class="tourma.data.Tournament" />
	<method signature="tourma.data.Pool getPool(int)" class="tourma.data.Tournament" />
	<method signature="int getRoundIndex(tourma.data.Round)" class="tourma.data.Tournament" />
	<method signature="java.util.ArrayList getDisplayCategories()" class="tourma.data.Tournament" />
	<method signature="int getTeamsCount()" class="tourma.data.Tournament" />
	<method signature="tourma.data.Coach getCoach(java.lang.String)" class="tourma.data.Tournament" />
	<method signature="void removeGroup(tourma.data.Group)" class="tourma.data.Tournament" />
	<method signature="void clearGroups()" class="tourma.data.Tournament" />
	<method signature="void setDescription(java.lang.String)" class="tourma.data.Tournament" />
	<method signature="void addTeam(tourma.data.Team)" class="tourma.data.Tournament" />
	<method signature="void clearTeams()" class="tourma.data.Tournament" />
	<method signature="void setParams(tourma.data.Parameters)" class="tourma.data.Tournament" />
	<method signature="void removeTeam(int)" class="tourma.data.Tournament" />
	<method signature="void removeGroup(int)" class="tourma.data.Tournament" />
	<method signature="void clearClans()" class="tourma.data.Tournament" />
	<method signature="void addClan(tourma.data.Clan)" class="tourma.data.Tournament" />
	<method signature="void exportNAF(java.io.File)" class="tourma.data.Tournament" />
	<method signature="void clearRounds()" class="tourma.data.Tournament" />
	<method signature="void removeRound(tourma.data.Round)" class="tourma.data.Tournament" />
	<method signature="void addCategory(tourma.data.Category)" class="tourma.data.Tournament" />
	<method signature="void addGroup(tourma.data.Group)" class="tourma.data.Tournament" />
	<method signature="void removeClan(tourma.data.Clan)" class="tourma.data.Tournament" />
	<method signature="tourma.data.Coach getCoach(int)" class="tourma.data.Tournament" />
	<method signature="java.awt.image.RenderedImage generateRankingQRCode(int)" class="tourma.data.Tournament" />
	<method signature="int getClansCount()" class="tourma.data.Tournament" />
	<method signature="void removeCategory(tourma.data.Category)" class="tourma.data.Tournament" />
	<method signature="tourma.data.Group getGroup(tourma.data.Coach)" class="tourma.data.Tournament" />
	<method signature="java.util.ArrayList getActiveCoaches()" class="tourma.data.Tournament" />
	<class name="org.jfree.chart.axis.TickUnitSource" />
	<method signature="org.jfree.chart.axis.TickUnit getLargerTickUnit(org.jfree.chart.axis.TickUnit)" class="org.jfree.chart.axis.TickUnitSource" />
	<method signature="org.jfree.chart.axis.TickUnit getCeilingTickUnit(org.jfree.chart.axis.TickUnit)" class="org.jfree.chart.axis.TickUnitSource" />
	<method signature="org.jfree.chart.axis.TickUnit getCeilingTickUnit(double)" class="org.jfree.chart.axis.TickUnitSource" />
	<class name="org.jfree.layout.CenterLayout" />
	<method signature="void addLayoutComponent(java.awt.Component)" class="org.jfree.layout.CenterLayout" />
	<method signature="void addLayoutComponent(java.lang.String,java.awt.Component)" class="org.jfree.layout.CenterLayout" />
	<method signature="void &lt;init&gt;()" class="org.jfree.layout.CenterLayout" />
	<method signature="void layoutContainer(java.awt.Container)" class="org.jfree.layout.CenterLayout" />
	<method signature="java.awt.Dimension preferredLayoutSize(java.awt.Container)" class="org.jfree.layout.CenterLayout" />
	<method signature="void removeLayoutComponent(java.awt.Component)" class="org.jfree.layout.CenterLayout" />
	<method signature="java.awt.Dimension minimumLayoutSize(java.awt.Container)" class="org.jfree.layout.CenterLayout" />
	<method signature="void removeLayoutComponent(java.lang.String,java.awt.Component)" class="org.jfree.layout.CenterLayout" />
	<class name="org.jfree.chart.axis.CategoryAxis3D" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.axis.CategoryAxis3D" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.axis.CategoryAxis3D" />
	<method signature="double getCategoryJava2DCoordinate(org.jfree.chart.axis.CategoryAnchor,int,int,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.axis.CategoryAxis3D" />
	<method signature="org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.axis.CategoryAxis3D" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.chart.axis.CategoryAxis3D" />
	<class name="tourma.data.TeamMatch" />
	<method signature="tourma.data.Competitor getLooser()" class="tourma.data.TeamMatch" />
	<method signature="tourma.data.Competitor getWinner()" class="tourma.data.TeamMatch" />
	<method signature="void setXMLElement(org.jdom2.Element)" class="tourma.data.TeamMatch" />
	<method signature="int getDraw(tourma.data.Team)" class="tourma.data.TeamMatch" />
	<method signature="org.jdom2.Element getXMLElementForDisplay()" class="tourma.data.TeamMatch" />
	<method signature="void &lt;init&gt;(tourma.data.Round)" class="tourma.data.TeamMatch" />
	<method signature="org.jdom2.Element getXMLElement()" class="tourma.data.TeamMatch" />
	<method signature="int getVictories(tourma.data.Team)" class="tourma.data.TeamMatch" />
	<method signature="int getLoss(tourma.data.Team)" class="tourma.data.TeamMatch" />
	<method signature="void addMatch(tourma.data.CoachMatch)" class="tourma.data.TeamMatch" />
	<method signature="boolean equals(java.lang.Object)" class="tourma.data.TeamMatch" />
	<method signature="int getMatchCount()" class="tourma.data.TeamMatch" />
	<method signature="void clearMatchs()" class="tourma.data.TeamMatch" />
	<method signature="tourma.data.CoachMatch getMatch(int)" class="tourma.data.TeamMatch" />
	<method signature="boolean containsMatch(tourma.data.CoachMatch)" class="tourma.data.TeamMatch" />
	<method signature="void setXMLElementForDisplay(org.jdom2.Element)" class="tourma.data.TeamMatch" />
	<class name="org.jfree.ui.about.Contributor" />
	<method signature="java.lang.String getName()" class="org.jfree.ui.about.Contributor" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="org.jfree.ui.about.Contributor" />
	<method signature="java.lang.String getEmail()" class="org.jfree.ui.about.Contributor" />
	<class name="freemarker.ext.servlet.HttpSessionHashModel" />
	<method signature="void &lt;init&gt;(javax.servlet.http.HttpSession,freemarker.template.ObjectWrapper)" class="freemarker.ext.servlet.HttpSessionHashModel" />
	<method signature="boolean isEmpty()" class="freemarker.ext.servlet.HttpSessionHashModel" />
	<method signature="void &lt;init&gt;(freemarker.ext.servlet.FreemarkerServlet,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,freemarker.template.ObjectWrapper)" class="freemarker.ext.servlet.HttpSessionHashModel" />
	<method signature="freemarker.template.TemplateModel get(java.lang.String)" class="freemarker.ext.servlet.HttpSessionHashModel" />
	<class name="org.jfree.util.ObjectList" />
	<method signature="void set(int,java.lang.Object)" class="org.jfree.util.ObjectList" />
	<method signature="void &lt;init&gt;(int)" class="org.jfree.util.ObjectList" />
	<method signature="java.lang.Object get(int)" class="org.jfree.util.ObjectList" />
	<method signature="void &lt;init&gt;()" class="org.jfree.util.ObjectList" />
	<method signature="int indexOf(java.lang.Object)" class="org.jfree.util.ObjectList" />
	<class name="javax.xml.bind.ValidationEventLocator" />
	<method signature="int getOffset()" class="javax.xml.bind.ValidationEventLocator" />
	<method signature="int getLineNumber()" class="javax.xml.bind.ValidationEventLocator" />
	<method signature="java.net.URL getURL()" class="javax.xml.bind.ValidationEventLocator" />
	<method signature="java.lang.Object getObject()" class="javax.xml.bind.ValidationEventLocator" />
	<method signature="org.w3c.dom.Node getNode()" class="javax.xml.bind.ValidationEventLocator" />
	<method signature="int getColumnNumber()" class="javax.xml.bind.ValidationEventLocator" />
	<class name="org.jfree.ui.about.SystemPropertiesPanel" />
	<method signature="void copySystemPropertiesToClipboard()" class="org.jfree.ui.about.SystemPropertiesPanel" />
	<method signature="void &lt;init&gt;()" class="org.jfree.ui.about.SystemPropertiesPanel" />
	<class name="org.apache.xerces.impl.dv.xs.DateTimeDV" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.xs.DateTimeDV" />
	<method signature="java.lang.Object getActualValue(java.lang.String,org.apache.xerces.impl.dv.ValidationContext)" class="org.apache.xerces.impl.dv.xs.DateTimeDV" />
	<class name="org.jfree.chart.labels.AbstractXYItemLabelGenerator" />
	<method signature="java.text.NumberFormat getXFormat()" class="org.jfree.chart.labels.AbstractXYItemLabelGenerator" />
	<method signature="java.lang.String getNullYString()" class="org.jfree.chart.labels.AbstractXYItemLabelGenerator" />
	<method signature="int hashCode()" class="org.jfree.chart.labels.AbstractXYItemLabelGenerator" />
	<method signature="java.text.DateFormat getXDateFormat()" class="org.jfree.chart.labels.AbstractXYItemLabelGenerator" />
	<method signature="java.lang.String getFormatString()" class="org.jfree.chart.labels.AbstractXYItemLabelGenerator" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.labels.AbstractXYItemLabelGenerator" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.labels.AbstractXYItemLabelGenerator" />
	<method signature="java.lang.String generateLabelString(org.jfree.data.xy.XYDataset,int,int)" class="org.jfree.chart.labels.AbstractXYItemLabelGenerator" />
	<method signature="java.text.DateFormat getYDateFormat()" class="org.jfree.chart.labels.AbstractXYItemLabelGenerator" />
	<method signature="java.text.NumberFormat getYFormat()" class="org.jfree.chart.labels.AbstractXYItemLabelGenerator" />
	<class name="org.apache.xerces.dom.DeferredTextImpl" />
	<method signature="int getNodeIndex()" class="org.apache.xerces.dom.DeferredTextImpl" />
	<class name="edu.umd.cs.findbugs.annotations.package-info" />
	<class name="freemarker.debug.DebuggerClient" />
	<method signature="freemarker.debug.Debugger getDebugger(java.net.InetAddress,int,java.lang.String)" class="freemarker.debug.DebuggerClient" />
	<class name="com.swabunga.spell.engine.SpellDictionary" />
	<method signature="void dispose()" class="com.swabunga.spell.engine.SpellDictionary" />
	<method signature="java.lang.String getCode(java.lang.String)" class="com.swabunga.spell.engine.SpellDictionary" />
	<method signature="java.util.LinkedList getWords(java.lang.String)" class="com.swabunga.spell.engine.SpellDictionary" />
	<method signature="void &lt;init&gt;(java.io.File)" class="com.swabunga.spell.engine.SpellDictionary" />
	<method signature="void addWord(java.lang.String)" class="com.swabunga.spell.engine.SpellDictionary" />
	<method signature="boolean isCorrect(java.lang.String)" class="com.swabunga.spell.engine.SpellDictionary" />
	<method signature="void &lt;init&gt;(java.io.Reader)" class="com.swabunga.spell.engine.SpellDictionary" />
	<method signature="java.util.LinkedList getSuggestions(java.lang.String,int)" class="com.swabunga.spell.engine.SpellDictionary" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="com.swabunga.spell.engine.SpellDictionary" />
	<method signature="void &lt;init&gt;(java.io.File,java.io.File)" class="com.swabunga.spell.engine.SpellDictionary" />
	<class name="tourma.views.report.ReportKeys" />
	<method signature="void &lt;init&gt;()" class="tourma.views.report.ReportKeys" />
	<class name="org.apache.xerces.impl.xs.traversers.XSAttributeChecker" />
	<method signature="void &lt;init&gt;(org.apache.xerces.impl.xs.traversers.XSDHandler)" class="org.apache.xerces.impl.xs.traversers.XSAttributeChecker" />
	<method signature="void resolveNamespace(org.w3c.dom.Element,org.w3c.dom.Attr[],org.apache.xerces.impl.xs.SchemaNamespaceSupport)" class="org.apache.xerces.impl.xs.traversers.XSAttributeChecker" />
	<method signature="java.lang.Object[] checkAttributes(org.w3c.dom.Element,boolean,org.apache.xerces.impl.xs.traversers.XSDocumentInfo)" class="org.apache.xerces.impl.xs.traversers.XSAttributeChecker" />
	<method signature="java.lang.String normalize(java.lang.String,short)" class="org.apache.xerces.impl.xs.traversers.XSAttributeChecker" />
	<method signature="void reset(org.apache.xerces.util.SymbolTable)" class="org.apache.xerces.impl.xs.traversers.XSAttributeChecker" />
	<method signature="void checkNonSchemaAttributes(org.apache.xerces.impl.xs.XSGrammarBucket)" class="org.apache.xerces.impl.xs.traversers.XSAttributeChecker" />
	<method signature="java.lang.Object[] checkAttributes(org.w3c.dom.Element,boolean,org.apache.xerces.impl.xs.traversers.XSDocumentInfo,boolean)" class="org.apache.xerces.impl.xs.traversers.XSAttributeChecker" />
	<method signature="void returnAttrArray(java.lang.Object[],org.apache.xerces.impl.xs.traversers.XSDocumentInfo)" class="org.apache.xerces.impl.xs.traversers.XSAttributeChecker" />
	<class name="org.apache.xerces.impl.ExternalSubsetResolver" />
	<method signature="org.apache.xerces.xni.parser.XMLInputSource getExternalSubset(org.apache.xerces.xni.grammars.XMLDTDDescription)" class="org.apache.xerces.impl.ExternalSubsetResolver" />
	<class name="org.apache.xerces.impl.dtd.XML11NSDTDValidator" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dtd.XML11NSDTDValidator" />
	<class name="org.jfree.date.MonthConstants" />
	<class name="org.jfree.data.time.TimePeriodValue" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.time.TimePeriodValue" />
	<method signature="int hashCode()" class="org.jfree.data.time.TimePeriodValue" />
	<method signature="void &lt;init&gt;(org.jfree.data.time.TimePeriod,java.lang.Number)" class="org.jfree.data.time.TimePeriodValue" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.time.TimePeriodValue" />
	<method signature="java.lang.Number getValue()" class="org.jfree.data.time.TimePeriodValue" />
	<method signature="java.lang.String toString()" class="org.jfree.data.time.TimePeriodValue" />
	<method signature="org.jfree.data.time.TimePeriod getPeriod()" class="org.jfree.data.time.TimePeriodValue" />
	<method signature="void &lt;init&gt;(org.jfree.data.time.TimePeriod,double)" class="org.jfree.data.time.TimePeriodValue" />
	<method signature="void setValue(java.lang.Number)" class="org.jfree.data.time.TimePeriodValue" />
	<class name="javax.xml.validation.SchemaFactory" />
	<method signature="javax.xml.validation.SchemaFactory newInstance(java.lang.String,java.lang.String,java.lang.ClassLoader)" class="javax.xml.validation.SchemaFactory" />
	<method signature="org.xml.sax.ErrorHandler getErrorHandler()" class="javax.xml.validation.SchemaFactory" />
	<method signature="void setResourceResolver(org.w3c.dom.ls.LSResourceResolver)" class="javax.xml.validation.SchemaFactory" />
	<method signature="javax.xml.validation.Schema newSchema(javax.xml.transform.Source)" class="javax.xml.validation.SchemaFactory" />
	<method signature="boolean getFeature(java.lang.String)" class="javax.xml.validation.SchemaFactory" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="javax.xml.validation.SchemaFactory" />
	<method signature="javax.xml.validation.Schema newSchema(java.net.URL)" class="javax.xml.validation.SchemaFactory" />
	<method signature="boolean isSchemaLanguageSupported(java.lang.String)" class="javax.xml.validation.SchemaFactory" />
	<method signature="javax.xml.validation.Schema newSchema(java.io.File)" class="javax.xml.validation.SchemaFactory" />
	<method signature="javax.xml.validation.Schema newSchema()" class="javax.xml.validation.SchemaFactory" />
	<method signature="javax.xml.validation.Schema newSchema(javax.xml.transform.Source[])" class="javax.xml.validation.SchemaFactory" />
	<method signature="org.w3c.dom.ls.LSResourceResolver getResourceResolver()" class="javax.xml.validation.SchemaFactory" />
	<method signature="javax.xml.validation.SchemaFactory newInstance(java.lang.String)" class="javax.xml.validation.SchemaFactory" />
	<method signature="void setFeature(java.lang.String,boolean)" class="javax.xml.validation.SchemaFactory" />
	<method signature="java.lang.Object getProperty(java.lang.String)" class="javax.xml.validation.SchemaFactory" />
	<method signature="void setErrorHandler(org.xml.sax.ErrorHandler)" class="javax.xml.validation.SchemaFactory" />
	<class name="org.w3c.dom.DOMImplementationList" />
	<method signature="org.w3c.dom.DOMImplementation item(int)" class="org.w3c.dom.DOMImplementationList" />
	<method signature="int getLength()" class="org.w3c.dom.DOMImplementationList" />
	<class name="org.apache.xerces.util.XMLLocatorWrapper" />
	<method signature="void setLocator(org.apache.xerces.xni.XMLLocator)" class="org.apache.xerces.util.XMLLocatorWrapper" />
	<method signature="int getLineNumber()" class="org.apache.xerces.util.XMLLocatorWrapper" />
	<method signature="java.lang.String getPublicId()" class="org.apache.xerces.util.XMLLocatorWrapper" />
	<method signature="java.lang.String getLiteralSystemId()" class="org.apache.xerces.util.XMLLocatorWrapper" />
	<method signature="java.lang.String getBaseSystemId()" class="org.apache.xerces.util.XMLLocatorWrapper" />
	<method signature="java.lang.String getEncoding()" class="org.apache.xerces.util.XMLLocatorWrapper" />
	<method signature="int getCharacterOffset()" class="org.apache.xerces.util.XMLLocatorWrapper" />
	<method signature="java.lang.String getExpandedSystemId()" class="org.apache.xerces.util.XMLLocatorWrapper" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.util.XMLLocatorWrapper" />
	<method signature="org.apache.xerces.xni.XMLLocator getLocator()" class="org.apache.xerces.util.XMLLocatorWrapper" />
	<method signature="int getColumnNumber()" class="org.apache.xerces.util.XMLLocatorWrapper" />
	<method signature="java.lang.String getXMLVersion()" class="org.apache.xerces.util.XMLLocatorWrapper" />
	<class name="org.jfree.chart.imagemap.OverLIBToolTipTagFragmentGenerator" />
	<method signature="java.lang.String generateToolTipFragment(java.lang.String)" class="org.jfree.chart.imagemap.OverLIBToolTipTagFragmentGenerator" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.imagemap.OverLIBToolTipTagFragmentGenerator" />
	<class name="org.apache.html.dom.HTMLBRElementImpl" />
	<method signature="java.lang.String getClear()" class="org.apache.html.dom.HTMLBRElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLBRElementImpl" />
	<method signature="void setClear(java.lang.String)" class="org.apache.html.dom.HTMLBRElementImpl" />
	<class name="org.w3c.dom.html.HTMLBodyElement" />
	<method signature="void setBgColor(java.lang.String)" class="org.w3c.dom.html.HTMLBodyElement" />
	<method signature="java.lang.String getText()" class="org.w3c.dom.html.HTMLBodyElement" />
	<method signature="void setLink(java.lang.String)" class="org.w3c.dom.html.HTMLBodyElement" />
	<method signature="void setALink(java.lang.String)" class="org.w3c.dom.html.HTMLBodyElement" />
	<method signature="void setText(java.lang.String)" class="org.w3c.dom.html.HTMLBodyElement" />
	<method signature="java.lang.String getLink()" class="org.w3c.dom.html.HTMLBodyElement" />
	<method signature="void setVLink(java.lang.String)" class="org.w3c.dom.html.HTMLBodyElement" />
	<method signature="java.lang.String getVLink()" class="org.w3c.dom.html.HTMLBodyElement" />
	<method signature="void setBackground(java.lang.String)" class="org.w3c.dom.html.HTMLBodyElement" />
	<method signature="java.lang.String getBgColor()" class="org.w3c.dom.html.HTMLBodyElement" />
	<method signature="java.lang.String getALink()" class="org.w3c.dom.html.HTMLBodyElement" />
	<method signature="java.lang.String getBackground()" class="org.w3c.dom.html.HTMLBodyElement" />
	<class name="org.jfree.ui.action.ActionRadioButton" />
	<method signature="void &lt;init&gt;(javax.swing.Icon)" class="org.jfree.ui.action.ActionRadioButton" />
	<method signature="void &lt;init&gt;()" class="org.jfree.ui.action.ActionRadioButton" />
	<method signature="void &lt;init&gt;(javax.swing.Action)" class="org.jfree.ui.action.ActionRadioButton" />
	<method signature="javax.swing.Action getAction()" class="org.jfree.ui.action.ActionRadioButton" />
	<method signature="void setEnabled(boolean)" class="org.jfree.ui.action.ActionRadioButton" />
	<method signature="void setAction(javax.swing.Action)" class="org.jfree.ui.action.ActionRadioButton" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.ui.action.ActionRadioButton" />
	<method signature="void &lt;init&gt;(java.lang.String,javax.swing.Icon)" class="org.jfree.ui.action.ActionRadioButton" />
	<class name="org.jfree.chart.StandardChartTheme" />
	<method signature="java.lang.String getName()" class="org.jfree.chart.StandardChartTheme" />
	<method signature="void setSmallFont(java.awt.Font)" class="org.jfree.chart.StandardChartTheme" />
	<method signature="java.awt.Paint getThermometerPaint()" class="org.jfree.chart.StandardChartTheme" />
	<method signature="java.awt.Paint getCrosshairPaint()" class="org.jfree.chart.StandardChartTheme" />
	<method signature="org.jfree.chart.ChartTheme createLegacyTheme()" class="org.jfree.chart.StandardChartTheme" />
	<method signature="java.awt.Paint getGridBandAlternatePaint()" class="org.jfree.chart.StandardChartTheme" />
	<method signature="java.awt.Paint getTickLabelPaint()" class="org.jfree.chart.StandardChartTheme" />
	<method signature="java.awt.Font getExtraLargeFont()" class="org.jfree.chart.StandardChartTheme" />
	<method signature="void setRegularFont(java.awt.Font)" class="org.jfree.chart.StandardChartTheme" />
	<method signature="void setSubtitlePaint(java.awt.Paint)" class="org.jfree.chart.StandardChartTheme" />
	<method signature="void setRangeGridlinePaint(java.awt.Paint)" class="org.jfree.chart.StandardChartTheme" />
	<method signature="java.awt.Paint getPlotBackgroundPaint()" class="org.jfree.chart.StandardChartTheme" />
	<method signature="void setItemLabelPaint(java.awt.Paint)" class="org.jfree.chart.StandardChartTheme" />
	<method signature="java.awt.Paint getLegendItemPaint()" class="org.jfree.chart.StandardChartTheme" />
	<method signature="boolean isShadowVisible()" class="org.jfree.chart.StandardChartTheme" />
	<method signature="void setCrosshairPaint(java.awt.Paint)" class="org.jfree.chart.StandardChartTheme" />
	<method signature="java.awt.Paint getWallPaint()" class="org.jfree.chart.StandardChartTheme" />
	<method signature="void setGridBandAlternatePaint(java.awt.Paint)" class="org.jfree.chart.StandardChartTheme" />
	<method signature="java.awt.Paint getTitlePaint()" class="org.jfree.chart.StandardChartTheme" />
	<method signature="void setPlotOutlinePaint(java.awt.Paint)" class="org.jfree.chart.StandardChartTheme" />
	<method signature="void setBarPainter(org.jfree.chart.renderer.category.BarPainter)" class="org.jfree.chart.StandardChartTheme" />
	<method signature="org.jfree.chart.ChartTheme createJFreeTheme()" class="org.jfree.chart.StandardChartTheme" />
	<method signature="void setTickLabelPaint(java.awt.Paint)" class="org.jfree.chart.StandardChartTheme" />
	<method signature="java.awt.Paint getRangeGridlinePaint()" class="org.jfree.chart.StandardChartTheme" />
	<method signature="java.awt.Paint getLegendBackgroundPaint()" class="org.jfree.chart.StandardChartTheme" />
	<method signature="void setShadowPaint(java.awt.Paint)" class="org.jfree.chart.StandardChartTheme" />
	<method signature="void &lt;init&gt;(java.lang.String,boolean)" class="org.jfree.chart.StandardChartTheme" />
	<method signature="void setChartBackgroundPaint(java.awt.Paint)" class="org.jfree.chart.StandardChartTheme" />
	<method signature="org.jfree.chart.renderer.xy.XYBarPainter getXYBarPainter()" class="org.jfree.chart.StandardChartTheme" />
	<method signature="void setXYBarPainter(org.jfree.chart.renderer.xy.XYBarPainter)" class="org.jfree.chart.StandardChartTheme" />
	<method signature="java.awt.Paint getBaselinePaint()" class="org.jfree.chart.StandardChartTheme" />
	<method signature="org.jfree.chart.ChartTheme createDarknessTheme()" class="org.jfree.chart.StandardChartTheme" />
	<method signature="java.awt.Paint getDomainGridlinePaint()" class="org.jfree.chart.StandardChartTheme" />
	<method signature="void setGridBandPaint(java.awt.Paint)" class="org.jfree.chart.StandardChartTheme" />
	<method signature="void setDrawingSupplier(org.jfree.chart.plot.DrawingSupplier)" class="org.jfree.chart.StandardChartTheme" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.chart.StandardChartTheme" />
	<method signature="java.awt.Paint getPlotOutlinePaint()" class="org.jfree.chart.StandardChartTheme" />
	<method signature="void setThermometerPaint(java.awt.Paint)" class="org.jfree.chart.StandardChartTheme" />
	<method signature="void setLegendBackgroundPaint(java.awt.Paint)" class="org.jfree.chart.StandardChartTheme" />
	<method signature="org.jfree.chart.plot.PieLabelLinkStyle getLabelLinkStyle()" class="org.jfree.chart.StandardChartTheme" />
	<method signature="void setAxisOffset(org.jfree.ui.RectangleInsets)" class="org.jfree.chart.StandardChartTheme" />
	<method signature="void setWallPaint(java.awt.Paint)" class="org.jfree.chart.StandardChartTheme" />
	<method signature="void setLargeFont(java.awt.Font)" class="org.jfree.chart.StandardChartTheme" />
	<method signature="org.jfree.chart.plot.DrawingSupplier getDrawingSupplier()" class="org.jfree.chart.StandardChartTheme" />
	<method signature="java.awt.Font getRegularFont()" class="org.jfree.chart.StandardChartTheme" />
	<method signature="java.awt.Paint getItemLabelPaint()" class="org.jfree.chart.StandardChartTheme" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.StandardChartTheme" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.StandardChartTheme" />
	<method signature="org.jfree.chart.renderer.category.BarPainter getBarPainter()" class="org.jfree.chart.StandardChartTheme" />
	<method signature="java.awt.Font getSmallFont()" class="org.jfree.chart.StandardChartTheme" />
	<method signature="java.awt.Paint getLabelLinkPaint()" class="org.jfree.chart.StandardChartTheme" />
	<method signature="java.awt.Paint getShadowPaint()" class="org.jfree.chart.StandardChartTheme" />
	<method signature="java.awt.Font getLargeFont()" class="org.jfree.chart.StandardChartTheme" />
	<method signature="void setAxisLabelPaint(java.awt.Paint)" class="org.jfree.chart.StandardChartTheme" />
	<method signature="void setLabelLinkStyle(org.jfree.chart.plot.PieLabelLinkStyle)" class="org.jfree.chart.StandardChartTheme" />
	<method signature="void setLabelLinkPaint(java.awt.Paint)" class="org.jfree.chart.StandardChartTheme" />
	<method signature="void setDomainGridlinePaint(java.awt.Paint)" class="org.jfree.chart.StandardChartTheme" />
	<method signature="org.jfree.ui.RectangleInsets getAxisOffset()" class="org.jfree.chart.StandardChartTheme" />
	<method signature="java.awt.Paint getChartBackgroundPaint()" class="org.jfree.chart.StandardChartTheme" />
	<method signature="void setTitlePaint(java.awt.Paint)" class="org.jfree.chart.StandardChartTheme" />
	<method signature="void setErrorIndicatorPaint(java.awt.Paint)" class="org.jfree.chart.StandardChartTheme" />
	<method signature="java.awt.Paint getSubtitlePaint()" class="org.jfree.chart.StandardChartTheme" />
	<method signature="void setLegendItemPaint(java.awt.Paint)" class="org.jfree.chart.StandardChartTheme" />
	<method signature="void setExtraLargeFont(java.awt.Font)" class="org.jfree.chart.StandardChartTheme" />
	<method signature="void setShadowVisible(boolean)" class="org.jfree.chart.StandardChartTheme" />
	<method signature="java.awt.Paint getErrorIndicatorPaint()" class="org.jfree.chart.StandardChartTheme" />
	<method signature="java.awt.Paint getGridBandPaint()" class="org.jfree.chart.StandardChartTheme" />
	<method signature="void apply(org.jfree.chart.JFreeChart)" class="org.jfree.chart.StandardChartTheme" />
	<method signature="void setPlotBackgroundPaint(java.awt.Paint)" class="org.jfree.chart.StandardChartTheme" />
	<method signature="void setBaselinePaint(java.awt.Paint)" class="org.jfree.chart.StandardChartTheme" />
	<method signature="java.awt.Paint getAxisLabelPaint()" class="org.jfree.chart.StandardChartTheme" />
	<class name="org.jfree.data.general.HeatMapUtilities" />
	<method signature="java.awt.image.BufferedImage createHeatMapImage(org.jfree.data.general.HeatMapDataset,org.jfree.chart.renderer.PaintScale)" class="org.jfree.data.general.HeatMapUtilities" />
	<method signature="org.jfree.data.xy.XYDataset extractColumnFromHeatMapDataset(org.jfree.data.general.HeatMapDataset,int,java.lang.Comparable)" class="org.jfree.data.general.HeatMapUtilities" />
	<method signature="org.jfree.data.xy.XYDataset extractRowFromHeatMapDataset(org.jfree.data.general.HeatMapDataset,int,java.lang.Comparable)" class="org.jfree.data.general.HeatMapUtilities" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.general.HeatMapUtilities" />
	<class name="org.apache.xerces.impl.xs.XSAnnotationImpl" />
	<method signature="java.lang.String getName()" class="org.apache.xerces.impl.xs.XSAnnotationImpl" />
	<method signature="java.lang.String getNamespace()" class="org.apache.xerces.impl.xs.XSAnnotationImpl" />
	<method signature="boolean writeAnnotation(java.lang.Object,short)" class="org.apache.xerces.impl.xs.XSAnnotationImpl" />
	<method signature="short getType()" class="org.apache.xerces.impl.xs.XSAnnotationImpl" />
	<method signature="void &lt;init&gt;(java.lang.String,org.apache.xerces.impl.xs.SchemaGrammar)" class="org.apache.xerces.impl.xs.XSAnnotationImpl" />
	<method signature="org.apache.xerces.xs.XSNamespaceItem getNamespaceItem()" class="org.apache.xerces.impl.xs.XSAnnotationImpl" />
	<method signature="java.lang.String getAnnotationString()" class="org.apache.xerces.impl.xs.XSAnnotationImpl" />
	<class name="org.apache.xerces.impl.dv.xs.DayDV" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.xs.DayDV" />
	<method signature="java.lang.Object getActualValue(java.lang.String,org.apache.xerces.impl.dv.ValidationContext)" class="org.apache.xerces.impl.dv.xs.DayDV" />
	<class name="org.jdom2.ProcessingInstruction" />
	<method signature="org.jdom2.ProcessingInstruction clone()" class="org.jdom2.ProcessingInstruction" />
	<method signature="org.jdom2.ProcessingInstruction detach()" class="org.jdom2.ProcessingInstruction" />
	<method signature="org.jdom2.ProcessingInstruction setData(java.util.Map)" class="org.jdom2.ProcessingInstruction" />
	<method signature="org.jdom2.ProcessingInstruction setTarget(java.lang.String)" class="org.jdom2.ProcessingInstruction" />
	<method signature="java.lang.String getTarget()" class="org.jdom2.ProcessingInstruction" />
	<method signature="java.lang.Object clone()" class="org.jdom2.ProcessingInstruction" />
	<method signature="void &lt;init&gt;(java.lang.String,java.util.Map)" class="org.jdom2.ProcessingInstruction" />
	<method signature="java.lang.String getData()" class="org.jdom2.ProcessingInstruction" />
	<method signature="java.util.List getPseudoAttributeNames()" class="org.jdom2.ProcessingInstruction" />
	<method signature="boolean removePseudoAttribute(java.lang.String)" class="org.jdom2.ProcessingInstruction" />
	<method signature="org.jdom2.Content detach()" class="org.jdom2.ProcessingInstruction" />
	<method signature="org.jdom2.Content clone()" class="org.jdom2.ProcessingInstruction" />
	<method signature="java.lang.String getValue()" class="org.jdom2.ProcessingInstruction" />
	<method signature="org.jdom2.ProcessingInstruction setData(java.lang.String)" class="org.jdom2.ProcessingInstruction" />
	<method signature="java.lang.String getPseudoAttributeValue(java.lang.String)" class="org.jdom2.ProcessingInstruction" />
	<method signature="java.lang.String toString()" class="org.jdom2.ProcessingInstruction" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jdom2.ProcessingInstruction" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="org.jdom2.ProcessingInstruction" />
	<method signature="org.jdom2.CloneBase clone()" class="org.jdom2.ProcessingInstruction" />
	<method signature="org.jdom2.ProcessingInstruction setPseudoAttribute(java.lang.String,java.lang.String)" class="org.jdom2.ProcessingInstruction" />
	<class name="tourma.views.parameters.JPNParamIndiv" />
	<method signature="void &lt;init&gt;()" class="tourma.views.parameters.JPNParamIndiv" />
	<method signature="void update()" class="tourma.views.parameters.JPNParamIndiv" />
	<class name="org.apache.commons.lang3.time.FastDateFormat" />
	<method signature="org.apache.commons.lang3.time.FastDateFormat getInstance(java.lang.String)" class="org.apache.commons.lang3.time.FastDateFormat" />
	<method signature="org.apache.commons.lang3.time.FastDateFormat getTimeInstance(int,java.util.TimeZone,java.util.Locale)" class="org.apache.commons.lang3.time.FastDateFormat" />
	<method signature="java.util.Locale getLocale()" class="org.apache.commons.lang3.time.FastDateFormat" />
	<method signature="org.apache.commons.lang3.time.FastDateFormat getTimeInstance(int)" class="org.apache.commons.lang3.time.FastDateFormat" />
	<method signature="org.apache.commons.lang3.time.FastDateFormat getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)" class="org.apache.commons.lang3.time.FastDateFormat" />
	<method signature="org.apache.commons.lang3.time.FastDateFormat getTimeInstance(int,java.util.Locale)" class="org.apache.commons.lang3.time.FastDateFormat" />
	<method signature="org.apache.commons.lang3.time.FastDateFormat getInstance(java.lang.String,java.util.TimeZone)" class="org.apache.commons.lang3.time.FastDateFormat" />
	<method signature="org.apache.commons.lang3.time.FastDateFormat getDateInstance(int,java.util.TimeZone)" class="org.apache.commons.lang3.time.FastDateFormat" />
	<method signature="java.util.TimeZone getTimeZone()" class="org.apache.commons.lang3.time.FastDateFormat" />
	<method signature="java.lang.String format(java.util.Date)" class="org.apache.commons.lang3.time.FastDateFormat" />
	<method signature="java.util.Date parse(java.lang.String)" class="org.apache.commons.lang3.time.FastDateFormat" />
	<method signature="org.apache.commons.lang3.time.FastDateFormat getDateTimeInstance(int,int)" class="org.apache.commons.lang3.time.FastDateFormat" />
	<method signature="java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)" class="org.apache.commons.lang3.time.FastDateFormat" />
	<method signature="boolean equals(java.lang.Object)" class="org.apache.commons.lang3.time.FastDateFormat" />
	<method signature="org.apache.commons.lang3.time.FastDateFormat getInstance()" class="org.apache.commons.lang3.time.FastDateFormat" />
	<method signature="int getMaxLengthEstimate()" class="org.apache.commons.lang3.time.FastDateFormat" />
	<method signature="org.apache.commons.lang3.time.FastDateFormat getDateInstance(int,java.util.TimeZone,java.util.Locale)" class="org.apache.commons.lang3.time.FastDateFormat" />
	<method signature="int hashCode()" class="org.apache.commons.lang3.time.FastDateFormat" />
	<method signature="org.apache.commons.lang3.time.FastDateFormat getDateTimeInstance(int,int,java.util.TimeZone)" class="org.apache.commons.lang3.time.FastDateFormat" />
	<method signature="org.apache.commons.lang3.time.FastDateFormat getDateInstance(int,java.util.Locale)" class="org.apache.commons.lang3.time.FastDateFormat" />
	<method signature="org.apache.commons.lang3.time.FastDateFormat getDateInstance(int)" class="org.apache.commons.lang3.time.FastDateFormat" />
	<method signature="org.apache.commons.lang3.time.FastDateFormat getTimeInstance(int,java.util.TimeZone)" class="org.apache.commons.lang3.time.FastDateFormat" />
	<method signature="org.apache.commons.lang3.time.FastDateFormat getDateTimeInstance(int,int,java.util.TimeZone,java.util.Locale)" class="org.apache.commons.lang3.time.FastDateFormat" />
	<method signature="java.lang.StringBuffer format(long,java.lang.StringBuffer)" class="org.apache.commons.lang3.time.FastDateFormat" />
	<method signature="java.util.Date parse(java.lang.String,java.text.ParsePosition)" class="org.apache.commons.lang3.time.FastDateFormat" />
	<method signature="java.lang.String format(java.util.Calendar)" class="org.apache.commons.lang3.time.FastDateFormat" />
	<method signature="java.lang.String toString()" class="org.apache.commons.lang3.time.FastDateFormat" />
	<method signature="java.lang.String format(long)" class="org.apache.commons.lang3.time.FastDateFormat" />
	<method signature="java.lang.StringBuffer format(java.util.Calendar,java.lang.StringBuffer)" class="org.apache.commons.lang3.time.FastDateFormat" />
	<method signature="org.apache.commons.lang3.time.FastDateFormat getDateTimeInstance(int,int,java.util.Locale)" class="org.apache.commons.lang3.time.FastDateFormat" />
	<method signature="org.apache.commons.lang3.time.FastDateFormat getInstance(java.lang.String,java.util.Locale)" class="org.apache.commons.lang3.time.FastDateFormat" />
	<method signature="java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)" class="org.apache.commons.lang3.time.FastDateFormat" />
	<method signature="java.lang.String getPattern()" class="org.apache.commons.lang3.time.FastDateFormat" />
	<method signature="java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer)" class="org.apache.commons.lang3.time.FastDateFormat" />
	<class name="org.apache.html.dom.HTMLHRElementImpl" />
	<method signature="void setAlign(java.lang.String)" class="org.apache.html.dom.HTMLHRElementImpl" />
	<method signature="java.lang.String getSize()" class="org.apache.html.dom.HTMLHRElementImpl" />
	<method signature="void setNoShade(boolean)" class="org.apache.html.dom.HTMLHRElementImpl" />
	<method signature="void setSize(java.lang.String)" class="org.apache.html.dom.HTMLHRElementImpl" />
	<method signature="java.lang.String getWidth()" class="org.apache.html.dom.HTMLHRElementImpl" />
	<method signature="java.lang.String getAlign()" class="org.apache.html.dom.HTMLHRElementImpl" />
	<method signature="void setWidth(java.lang.String)" class="org.apache.html.dom.HTMLHRElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLHRElementImpl" />
	<method signature="boolean getNoShade()" class="org.apache.html.dom.HTMLHRElementImpl" />
	<class name="freemarker.debug.impl.RmiDebuggerListenerImpl" />
	<method signature="void environmentSuspended(freemarker.debug.EnvironmentSuspendedEvent)" class="freemarker.debug.impl.RmiDebuggerListenerImpl" />
	<method signature="void &lt;init&gt;(freemarker.debug.DebuggerListener)" class="freemarker.debug.impl.RmiDebuggerListenerImpl" />
	<method signature="void unreferenced()" class="freemarker.debug.impl.RmiDebuggerListenerImpl" />
	<class name="org.jfree.chart.editor.DefaultLogAxisEditor" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="org.jfree.chart.editor.DefaultLogAxisEditor" />
	<method signature="void validateTickUnit()" class="org.jfree.chart.editor.DefaultLogAxisEditor" />
	<method signature="void toggleAutoTick()" class="org.jfree.chart.editor.DefaultLogAxisEditor" />
	<method signature="void focusLost(java.awt.event.FocusEvent)" class="org.jfree.chart.editor.DefaultLogAxisEditor" />
	<method signature="void setAxisProperties(org.jfree.chart.axis.Axis)" class="org.jfree.chart.editor.DefaultLogAxisEditor" />
	<method signature="void &lt;init&gt;(org.jfree.chart.axis.LogAxis)" class="org.jfree.chart.editor.DefaultLogAxisEditor" />
	<class name="org.jfree.base.BootableProjectInfo" />
	<method signature="void &lt;init&gt;()" class="org.jfree.base.BootableProjectInfo" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.jfree.base.BootableProjectInfo" />
	<method signature="boolean isAutoBoot()" class="org.jfree.base.BootableProjectInfo" />
	<method signature="org.jfree.base.BootableProjectInfo[] getDependencies()" class="org.jfree.base.BootableProjectInfo" />
	<method signature="java.lang.String getBootClass()" class="org.jfree.base.BootableProjectInfo" />
	<method signature="void setBootClass(java.lang.String)" class="org.jfree.base.BootableProjectInfo" />
	<method signature="void setAutoBoot(boolean)" class="org.jfree.base.BootableProjectInfo" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.jfree.base.BootableProjectInfo" />
	<method signature="void addDependency(org.jfree.base.BootableProjectInfo)" class="org.jfree.base.BootableProjectInfo" />
	<class name="org.jfree.chart.annotations.XYBoxAnnotation" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.annotations.XYBoxAnnotation" />
	<method signature="int hashCode()" class="org.jfree.chart.annotations.XYBoxAnnotation" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.annotations.XYBoxAnnotation" />
	<method signature="void &lt;init&gt;(double,double,double,double,java.awt.Stroke,java.awt.Paint)" class="org.jfree.chart.annotations.XYBoxAnnotation" />
	<method signature="void &lt;init&gt;(double,double,double,double)" class="org.jfree.chart.annotations.XYBoxAnnotation" />
	<method signature="void &lt;init&gt;(double,double,double,double,java.awt.Stroke,java.awt.Paint,java.awt.Paint)" class="org.jfree.chart.annotations.XYBoxAnnotation" />
	<method signature="void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.annotations.XYBoxAnnotation" />
	<class name="org.jfree.chart.renderer.category.StatisticalBarRenderer" />
	<method signature="java.awt.Stroke getErrorIndicatorStroke()" class="org.jfree.chart.renderer.category.StatisticalBarRenderer" />
	<method signature="void setErrorIndicatorPaint(java.awt.Paint)" class="org.jfree.chart.renderer.category.StatisticalBarRenderer" />
	<method signature="org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)" class="org.jfree.chart.renderer.category.StatisticalBarRenderer" />
	<method signature="java.awt.Paint getErrorIndicatorPaint()" class="org.jfree.chart.renderer.category.StatisticalBarRenderer" />
	<method signature="void setErrorIndicatorStroke(java.awt.Stroke)" class="org.jfree.chart.renderer.category.StatisticalBarRenderer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.category.StatisticalBarRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.category.StatisticalBarRenderer" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)" class="org.jfree.chart.renderer.category.StatisticalBarRenderer" />
	<class name="org.w3c.dom.html.HTMLLegendElement" />
	<method signature="void setAccessKey(java.lang.String)" class="org.w3c.dom.html.HTMLLegendElement" />
	<method signature="void setAlign(java.lang.String)" class="org.w3c.dom.html.HTMLLegendElement" />
	<method signature="java.lang.String getAlign()" class="org.w3c.dom.html.HTMLLegendElement" />
	<method signature="java.lang.String getAccessKey()" class="org.w3c.dom.html.HTMLLegendElement" />
	<method signature="org.w3c.dom.html.HTMLFormElement getForm()" class="org.w3c.dom.html.HTMLLegendElement" />
	<class name="org.apache.xerces.util.EncodingMap" />
	<method signature="java.lang.String getIANA2JavaMapping(java.lang.String)" class="org.apache.xerces.util.EncodingMap" />
	<method signature="void putJava2IANAMapping(java.lang.String,java.lang.String)" class="org.apache.xerces.util.EncodingMap" />
	<method signature="java.lang.String removeIANA2JavaMapping(java.lang.String)" class="org.apache.xerces.util.EncodingMap" />
	<method signature="java.lang.String getJava2IANAMapping(java.lang.String)" class="org.apache.xerces.util.EncodingMap" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.util.EncodingMap" />
	<method signature="java.lang.String removeJava2IANAMapping(java.lang.String)" class="org.apache.xerces.util.EncodingMap" />
	<method signature="void putIANA2JavaMapping(java.lang.String,java.lang.String)" class="org.apache.xerces.util.EncodingMap" />
	<class name="org.apache.wml.WMLUElement" />
	<method signature="java.lang.String getXmlLang()" class="org.apache.wml.WMLUElement" />
	<method signature="void setXmlLang(java.lang.String)" class="org.apache.wml.WMLUElement" />
	<class name="org.w3c.dom.Attr" />
	<method signature="java.lang.String getName()" class="org.w3c.dom.Attr" />
	<method signature="void setValue(java.lang.String)" class="org.w3c.dom.Attr" />
	<method signature="org.w3c.dom.TypeInfo getSchemaTypeInfo()" class="org.w3c.dom.Attr" />
	<method signature="java.lang.String getValue()" class="org.w3c.dom.Attr" />
	<method signature="boolean isId()" class="org.w3c.dom.Attr" />
	<method signature="org.w3c.dom.Element getOwnerElement()" class="org.w3c.dom.Attr" />
	<method signature="boolean getSpecified()" class="org.w3c.dom.Attr" />
	<class name="org.jfree.chart.labels.StandardCategorySeriesLabelGenerator" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.labels.StandardCategorySeriesLabelGenerator" />
	<method signature="int hashCode()" class="org.jfree.chart.labels.StandardCategorySeriesLabelGenerator" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.labels.StandardCategorySeriesLabelGenerator" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.labels.StandardCategorySeriesLabelGenerator" />
	<method signature="java.lang.String generateLabel(org.jfree.data.category.CategoryDataset,int)" class="org.jfree.chart.labels.StandardCategorySeriesLabelGenerator" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.chart.labels.StandardCategorySeriesLabelGenerator" />
	<class name="org.jfree.chart.plot.ContourValuePlot" />
	<method signature="org.jfree.data.Range getContourDataRange()" class="org.jfree.chart.plot.ContourValuePlot" />
	<class name="org.jfree.chart.plot.PieLabelRecord" />
	<method signature="double getUpperY()" class="org.jfree.chart.plot.PieLabelRecord" />
	<method signature="int compareTo(java.lang.Object)" class="org.jfree.chart.plot.PieLabelRecord" />
	<method signature="double getAngle()" class="org.jfree.chart.plot.PieLabelRecord" />
	<method signature="void setBaseY(double)" class="org.jfree.chart.plot.PieLabelRecord" />
	<method signature="double getLowerY()" class="org.jfree.chart.plot.PieLabelRecord" />
	<method signature="java.lang.Comparable getKey()" class="org.jfree.chart.plot.PieLabelRecord" />
	<method signature="void setAllocatedY(double)" class="org.jfree.chart.plot.PieLabelRecord" />
	<method signature="double getBaseY()" class="org.jfree.chart.plot.PieLabelRecord" />
	<method signature="double getLinkPercent()" class="org.jfree.chart.plot.PieLabelRecord" />
	<method signature="org.jfree.text.TextBox getLabel()" class="org.jfree.chart.plot.PieLabelRecord" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.plot.PieLabelRecord" />
	<method signature="java.lang.String toString()" class="org.jfree.chart.plot.PieLabelRecord" />
	<method signature="double getLabelHeight()" class="org.jfree.chart.plot.PieLabelRecord" />
	<method signature="double getGap()" class="org.jfree.chart.plot.PieLabelRecord" />
	<method signature="double getAllocatedY()" class="org.jfree.chart.plot.PieLabelRecord" />
	<method signature="void &lt;init&gt;(java.lang.Comparable,double,double,org.jfree.text.TextBox,double,double,double)" class="org.jfree.chart.plot.PieLabelRecord" />
	<class name="org.jfree.chart.plot.dial.DialBackground" />
	<method signature="int hashCode()" class="org.jfree.chart.plot.dial.DialBackground" />
	<method signature="org.jfree.ui.GradientPaintTransformer getGradientPaintTransformer()" class="org.jfree.chart.plot.dial.DialBackground" />
	<method signature="java.awt.Paint getPaint()" class="org.jfree.chart.plot.dial.DialBackground" />
	<method signature="boolean isClippedToWindow()" class="org.jfree.chart.plot.dial.DialBackground" />
	<method signature="void setPaint(java.awt.Paint)" class="org.jfree.chart.plot.dial.DialBackground" />
	<method signature="void setGradientPaintTransformer(org.jfree.ui.GradientPaintTransformer)" class="org.jfree.chart.plot.dial.DialBackground" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.plot.dial.DialBackground" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.plot.dial.DialBackground" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.plot.dial.DialBackground" />
	<method signature="void &lt;init&gt;(java.awt.Paint)" class="org.jfree.chart.plot.dial.DialBackground" />
	<method signature="void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)" class="org.jfree.chart.plot.dial.DialBackground" />
	<class name="org.apache.html.dom.HTMLButtonElementImpl" />
	<method signature="void setAccessKey(java.lang.String)" class="org.apache.html.dom.HTMLButtonElementImpl" />
	<method signature="java.lang.String getName()" class="org.apache.html.dom.HTMLButtonElementImpl" />
	<method signature="void setValue(java.lang.String)" class="org.apache.html.dom.HTMLButtonElementImpl" />
	<method signature="void setTabIndex(int)" class="org.apache.html.dom.HTMLButtonElementImpl" />
	<method signature="boolean getDisabled()" class="org.apache.html.dom.HTMLButtonElementImpl" />
	<method signature="void setDisabled(boolean)" class="org.apache.html.dom.HTMLButtonElementImpl" />
	<method signature="java.lang.String getValue()" class="org.apache.html.dom.HTMLButtonElementImpl" />
	<method signature="int getTabIndex()" class="org.apache.html.dom.HTMLButtonElementImpl" />
	<method signature="void setName(java.lang.String)" class="org.apache.html.dom.HTMLButtonElementImpl" />
	<method signature="java.lang.String getType()" class="org.apache.html.dom.HTMLButtonElementImpl" />
	<method signature="java.lang.String getAccessKey()" class="org.apache.html.dom.HTMLButtonElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLButtonElementImpl" />
	<class name="com.google.zxing.oned.EAN13Reader" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.oned.EAN13Reader" />
	<class name="org.w3c.dom.html.HTMLFieldSetElement" />
	<method signature="org.w3c.dom.html.HTMLFormElement getForm()" class="org.w3c.dom.html.HTMLFieldSetElement" />
	<class name="org.apache.xerces.impl.xs.opti.SchemaDOM" />
	<method signature="void reset()" class="org.apache.xerces.impl.xs.opti.SchemaDOM" />
	<method signature="org.apache.xerces.impl.xs.opti.ElementImpl emptyElement(org.apache.xerces.xni.QName,org.apache.xerces.xni.XMLAttributes,int,int)" class="org.apache.xerces.impl.xs.opti.SchemaDOM" />
	<method signature="void traverse(org.w3c.dom.Node,int)" class="org.apache.xerces.impl.xs.opti.SchemaDOM" />
	<method signature="org.apache.xerces.impl.xs.opti.ElementImpl emptyElement(org.apache.xerces.xni.QName,org.apache.xerces.xni.XMLAttributes,int,int,int)" class="org.apache.xerces.impl.xs.opti.SchemaDOM" />
	<method signature="org.w3c.dom.DOMImplementation getImplementation()" class="org.apache.xerces.impl.xs.opti.SchemaDOM" />
	<method signature="void printDOM()" class="org.apache.xerces.impl.xs.opti.SchemaDOM" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xs.opti.SchemaDOM" />
	<method signature="void indent(int)" class="org.apache.xerces.impl.xs.opti.SchemaDOM" />
	<method signature="org.apache.xerces.impl.xs.opti.ElementImpl startElement(org.apache.xerces.xni.QName,org.apache.xerces.xni.XMLAttributes,int,int,int)" class="org.apache.xerces.impl.xs.opti.SchemaDOM" />
	<method signature="org.w3c.dom.Element getDocumentElement()" class="org.apache.xerces.impl.xs.opti.SchemaDOM" />
	<method signature="void endElement()" class="org.apache.xerces.impl.xs.opti.SchemaDOM" />
	<method signature="org.apache.xerces.impl.xs.opti.ElementImpl startElement(org.apache.xerces.xni.QName,org.apache.xerces.xni.XMLAttributes,int,int)" class="org.apache.xerces.impl.xs.opti.SchemaDOM" />
	<class name="com.google.zxing.oned.CodaBarWriter" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.oned.CodaBarWriter" />
	<method signature="boolean[] encode(java.lang.String)" class="com.google.zxing.oned.CodaBarWriter" />
	<class name="com.google.zxing.qrcode.decoder.Version$ECB" />
	<method signature="int getDataCodewords()" class="com.google.zxing.qrcode.decoder.Version$ECB" />
	<method signature="int getCount()" class="com.google.zxing.qrcode.decoder.Version$ECB" />
	<class name="org.apache.html.dom.HTMLIsIndexElementImpl" />
	<method signature="void setPrompt(java.lang.String)" class="org.apache.html.dom.HTMLIsIndexElementImpl" />
	<method signature="java.lang.String getPrompt()" class="org.apache.html.dom.HTMLIsIndexElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLIsIndexElementImpl" />
	<class name="org.jfree.chart.renderer.category.DefaultCategoryItemRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.category.DefaultCategoryItemRenderer" />
	<class name="org.jfree.data.xy.CategoryTableXYDataset" />
	<method signature="java.lang.Number getX(int,int)" class="org.jfree.data.xy.CategoryTableXYDataset" />
	<method signature="java.lang.Number getY(int,int)" class="org.jfree.data.xy.CategoryTableXYDataset" />
	<method signature="void remove(double,java.lang.String)" class="org.jfree.data.xy.CategoryTableXYDataset" />
	<method signature="int getSeriesCount()" class="org.jfree.data.xy.CategoryTableXYDataset" />
	<method signature="org.jfree.data.Range getDomainBounds(boolean)" class="org.jfree.data.xy.CategoryTableXYDataset" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.xy.CategoryTableXYDataset" />
	<method signature="java.lang.Comparable getSeriesKey(int)" class="org.jfree.data.xy.CategoryTableXYDataset" />
	<method signature="void clear()" class="org.jfree.data.xy.CategoryTableXYDataset" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.xy.CategoryTableXYDataset" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.xy.CategoryTableXYDataset" />
	<method signature="java.lang.Number getEndX(int,int)" class="org.jfree.data.xy.CategoryTableXYDataset" />
	<method signature="int getItemCount(int)" class="org.jfree.data.xy.CategoryTableXYDataset" />
	<method signature="java.lang.Number getEndY(int,int)" class="org.jfree.data.xy.CategoryTableXYDataset" />
	<method signature="double getDomainUpperBound(boolean)" class="org.jfree.data.xy.CategoryTableXYDataset" />
	<method signature="double getIntervalPositionFactor()" class="org.jfree.data.xy.CategoryTableXYDataset" />
	<method signature="void add(java.lang.Number,java.lang.Number,java.lang.String,boolean)" class="org.jfree.data.xy.CategoryTableXYDataset" />
	<method signature="void setIntervalPositionFactor(double)" class="org.jfree.data.xy.CategoryTableXYDataset" />
	<method signature="void setIntervalWidth(double)" class="org.jfree.data.xy.CategoryTableXYDataset" />
	<method signature="double getDomainLowerBound(boolean)" class="org.jfree.data.xy.CategoryTableXYDataset" />
	<method signature="double getIntervalWidth()" class="org.jfree.data.xy.CategoryTableXYDataset" />
	<method signature="void remove(java.lang.Number,java.lang.String,boolean)" class="org.jfree.data.xy.CategoryTableXYDataset" />
	<method signature="int getItemCount()" class="org.jfree.data.xy.CategoryTableXYDataset" />
	<method signature="void setAutoWidth(boolean)" class="org.jfree.data.xy.CategoryTableXYDataset" />
	<method signature="void add(double,double,java.lang.String)" class="org.jfree.data.xy.CategoryTableXYDataset" />
	<method signature="java.lang.Number getStartX(int,int)" class="org.jfree.data.xy.CategoryTableXYDataset" />
	<method signature="java.lang.Number getStartY(int,int)" class="org.jfree.data.xy.CategoryTableXYDataset" />
	<method signature="boolean isAutoWidth()" class="org.jfree.data.xy.CategoryTableXYDataset" />
	<class name="org.apache.xerces.impl.dtd.XML11DTDValidator" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dtd.XML11DTDValidator" />
	<method signature="void reset(org.apache.xerces.xni.parser.XMLComponentManager)" class="org.apache.xerces.impl.dtd.XML11DTDValidator" />
	<class name="org.w3c.dom.css.Counter" />
	<method signature="java.lang.String getListStyle()" class="org.w3c.dom.css.Counter" />
	<method signature="java.lang.String getIdentifier()" class="org.w3c.dom.css.Counter" />
	<method signature="java.lang.String getSeparator()" class="org.w3c.dom.css.Counter" />
	<class name="org.w3c.dom.events.EventException" />
	<method signature="void &lt;init&gt;(short,java.lang.String)" class="org.w3c.dom.events.EventException" />
	<class name="javax.xml.bind.Validator" />
	<method signature="void setEventHandler(javax.xml.bind.ValidationEventHandler)" class="javax.xml.bind.Validator" />
	<method signature="javax.xml.bind.ValidationEventHandler getEventHandler()" class="javax.xml.bind.Validator" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="javax.xml.bind.Validator" />
	<method signature="boolean validateRoot(java.lang.Object)" class="javax.xml.bind.Validator" />
	<method signature="boolean validate(java.lang.Object)" class="javax.xml.bind.Validator" />
	<method signature="java.lang.Object getProperty(java.lang.String)" class="javax.xml.bind.Validator" />
	<class name="org.jfree.data.time.Millisecond" />
	<method signature="int compareTo(java.lang.Object)" class="org.jfree.data.time.Millisecond" />
	<method signature="void &lt;init&gt;(int,int,int,int,int,int,int)" class="org.jfree.data.time.Millisecond" />
	<method signature="long getMillisecond()" class="org.jfree.data.time.Millisecond" />
	<method signature="int hashCode()" class="org.jfree.data.time.Millisecond" />
	<method signature="void &lt;init&gt;(java.util.Date,java.util.TimeZone)" class="org.jfree.data.time.Millisecond" />
	<method signature="org.jfree.data.time.RegularTimePeriod previous()" class="org.jfree.data.time.Millisecond" />
	<method signature="long getLastMillisecond()" class="org.jfree.data.time.Millisecond" />
	<method signature="org.jfree.data.time.RegularTimePeriod next()" class="org.jfree.data.time.Millisecond" />
	<method signature="long getLastMillisecond(java.util.Calendar)" class="org.jfree.data.time.Millisecond" />
	<method signature="void &lt;init&gt;(java.util.Date)" class="org.jfree.data.time.Millisecond" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.time.Millisecond" />
	<method signature="void &lt;init&gt;(int,org.jfree.data.time.Second)" class="org.jfree.data.time.Millisecond" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.time.Millisecond" />
	<method signature="long getFirstMillisecond()" class="org.jfree.data.time.Millisecond" />
	<method signature="void peg(java.util.Calendar)" class="org.jfree.data.time.Millisecond" />
	<method signature="void &lt;init&gt;(java.util.Date,java.util.TimeZone,java.util.Locale)" class="org.jfree.data.time.Millisecond" />
	<method signature="long getFirstMillisecond(java.util.Calendar)" class="org.jfree.data.time.Millisecond" />
	<method signature="long getSerialIndex()" class="org.jfree.data.time.Millisecond" />
	<method signature="org.jfree.data.time.Second getSecond()" class="org.jfree.data.time.Millisecond" />
	<class name="org.jfree.data.xy.OHLCDataset" />
	<method signature="double getVolumeValue(int,int)" class="org.jfree.data.xy.OHLCDataset" />
	<method signature="java.lang.Number getLow(int,int)" class="org.jfree.data.xy.OHLCDataset" />
	<method signature="java.lang.Number getClose(int,int)" class="org.jfree.data.xy.OHLCDataset" />
	<method signature="java.lang.Number getVolume(int,int)" class="org.jfree.data.xy.OHLCDataset" />
	<method signature="java.lang.Number getOpen(int,int)" class="org.jfree.data.xy.OHLCDataset" />
	<method signature="double getHighValue(int,int)" class="org.jfree.data.xy.OHLCDataset" />
	<method signature="double getOpenValue(int,int)" class="org.jfree.data.xy.OHLCDataset" />
	<method signature="java.lang.Number getHigh(int,int)" class="org.jfree.data.xy.OHLCDataset" />
	<method signature="double getCloseValue(int,int)" class="org.jfree.data.xy.OHLCDataset" />
	<method signature="double getLowValue(int,int)" class="org.jfree.data.xy.OHLCDataset" />
	<class name="com.google.zxing.oned.UPCEReader" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.oned.UPCEReader" />
	<method signature="java.lang.String convertUPCEtoUPCA(java.lang.String)" class="com.google.zxing.oned.UPCEReader" />
	<class name="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="void setDTDContentModelSource(org.apache.xerces.xni.parser.XMLDTDContentModelSource)" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="void processingInstruction(java.lang.String,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="void endElement(org.apache.xerces.xni.QName,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="void externalEntityDecl(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="void doctypeDecl(java.lang.String,java.lang.String,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="void ignorableWhitespace(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="void attributeDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="void empty(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="void internalEntityDecl(java.lang.String,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="void textDecl(java.lang.String,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="org.apache.xerces.xni.parser.XMLDTDContentModelSource getDTDContentModelSource()" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="void emptyElement(org.apache.xerces.xni.QName,org.apache.xerces.xni.XMLAttributes,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="void elementDecl(java.lang.String,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="void endAttlist(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="void endConditional(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="void unparsedEntityDecl(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="void endDocument(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="void startElement(org.apache.xerces.xni.QName,org.apache.xerces.xni.XMLAttributes,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="void endExternalSubset(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="void startDocument(org.apache.xerces.xni.XMLLocator,java.lang.String,org.apache.xerces.xni.NamespaceContext,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="void startGeneralEntity(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="void endGeneralEntity(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="void occurrence(short,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="void startAttlist(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="void startContentModel(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="void pcdata(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="void notationDecl(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="void startParameterEntity(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="void startGroup(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="void setDocumentSource(org.apache.xerces.xni.parser.XMLDocumentSource)" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="void startCDATA(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="void endCDATA(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="org.apache.xerces.xni.parser.XMLDocumentSource getDocumentSource()" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="void separator(short,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="void startExternalSubset(org.apache.xerces.xni.XMLResourceIdentifier,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="void endContentModel(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="void setDTDSource(org.apache.xerces.xni.parser.XMLDTDSource)" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="void characters(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="void startDTD(org.apache.xerces.xni.XMLLocator,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="void xmlDecl(java.lang.String,java.lang.String,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="void element(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="org.apache.xerces.xni.parser.XMLDTDSource getDTDSource()" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="void endParameterEntity(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="void ignoredCharacters(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="void startConditional(short,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="void endDTD(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="void any(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="void comment(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<method signature="void endGroup(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractXMLDocumentParser" />
	<class name="org.apache.xml.serialize.DOMSerializer" />
	<method signature="void serialize(org.w3c.dom.Element)" class="org.apache.xml.serialize.DOMSerializer" />
	<method signature="void serialize(org.w3c.dom.Document)" class="org.apache.xml.serialize.DOMSerializer" />
	<method signature="void serialize(org.w3c.dom.DocumentFragment)" class="org.apache.xml.serialize.DOMSerializer" />
	<class name="com.toedter.calendar.demo.BirthdayEvaluator" />
	<method signature="java.awt.Color getSpecialForegroundColor()" class="com.toedter.calendar.demo.BirthdayEvaluator" />
	<method signature="java.awt.Color getInvalidBackroundColor()" class="com.toedter.calendar.demo.BirthdayEvaluator" />
	<method signature="java.awt.Color getSpecialBackroundColor()" class="com.toedter.calendar.demo.BirthdayEvaluator" />
	<method signature="boolean isInvalid(java.util.Date)" class="com.toedter.calendar.demo.BirthdayEvaluator" />
	<method signature="void &lt;init&gt;()" class="com.toedter.calendar.demo.BirthdayEvaluator" />
	<method signature="java.lang.String getSpecialTooltip()" class="com.toedter.calendar.demo.BirthdayEvaluator" />
	<method signature="java.awt.Color getInvalidForegroundColor()" class="com.toedter.calendar.demo.BirthdayEvaluator" />
	<method signature="boolean isSpecial(java.util.Date)" class="com.toedter.calendar.demo.BirthdayEvaluator" />
	<method signature="java.lang.String getInvalidTooltip()" class="com.toedter.calendar.demo.BirthdayEvaluator" />
	<class name="javax.annotation.Nonnegative" />
	<method signature="javax.annotation.meta.When when()" class="javax.annotation.Nonnegative" />
	<class name="org.apache.xerces.xpointer.XPointerProcessor" />
	<method signature="boolean isFragmentResolved()" class="org.apache.xerces.xpointer.XPointerProcessor" />
	<method signature="boolean resolveXPointer(org.apache.xerces.xni.QName,org.apache.xerces.xni.XMLAttributes,org.apache.xerces.xni.Augmentations,int)" class="org.apache.xerces.xpointer.XPointerProcessor" />
	<method signature="boolean isXPointerResolved()" class="org.apache.xerces.xpointer.XPointerProcessor" />
	<method signature="void parseXPointer(java.lang.String)" class="org.apache.xerces.xpointer.XPointerProcessor" />
	<class name="javax.xml.parsers.DocumentBuilderFactory" />
	<method signature="boolean isIgnoringComments()" class="javax.xml.parsers.DocumentBuilderFactory" />
	<method signature="boolean isXIncludeAware()" class="javax.xml.parsers.DocumentBuilderFactory" />
	<method signature="boolean getFeature(java.lang.String)" class="javax.xml.parsers.DocumentBuilderFactory" />
	<method signature="void setExpandEntityReferences(boolean)" class="javax.xml.parsers.DocumentBuilderFactory" />
	<method signature="javax.xml.parsers.DocumentBuilder newDocumentBuilder()" class="javax.xml.parsers.DocumentBuilderFactory" />
	<method signature="void setXIncludeAware(boolean)" class="javax.xml.parsers.DocumentBuilderFactory" />
	<method signature="javax.xml.parsers.DocumentBuilderFactory newInstance()" class="javax.xml.parsers.DocumentBuilderFactory" />
	<method signature="void setAttribute(java.lang.String,java.lang.Object)" class="javax.xml.parsers.DocumentBuilderFactory" />
	<method signature="java.lang.Object getAttribute(java.lang.String)" class="javax.xml.parsers.DocumentBuilderFactory" />
	<method signature="javax.xml.validation.Schema getSchema()" class="javax.xml.parsers.DocumentBuilderFactory" />
	<method signature="void setCoalescing(boolean)" class="javax.xml.parsers.DocumentBuilderFactory" />
	<method signature="boolean isNamespaceAware()" class="javax.xml.parsers.DocumentBuilderFactory" />
	<method signature="void setFeature(java.lang.String,boolean)" class="javax.xml.parsers.DocumentBuilderFactory" />
	<method signature="boolean isCoalescing()" class="javax.xml.parsers.DocumentBuilderFactory" />
	<method signature="void setSchema(javax.xml.validation.Schema)" class="javax.xml.parsers.DocumentBuilderFactory" />
	<method signature="boolean isExpandEntityReferences()" class="javax.xml.parsers.DocumentBuilderFactory" />
	<method signature="void setIgnoringComments(boolean)" class="javax.xml.parsers.DocumentBuilderFactory" />
	<method signature="void setValidating(boolean)" class="javax.xml.parsers.DocumentBuilderFactory" />
	<method signature="boolean isValidating()" class="javax.xml.parsers.DocumentBuilderFactory" />
	<method signature="void setIgnoringElementContentWhitespace(boolean)" class="javax.xml.parsers.DocumentBuilderFactory" />
	<method signature="javax.xml.parsers.DocumentBuilderFactory newInstance(java.lang.String,java.lang.ClassLoader)" class="javax.xml.parsers.DocumentBuilderFactory" />
	<method signature="boolean isIgnoringElementContentWhitespace()" class="javax.xml.parsers.DocumentBuilderFactory" />
	<method signature="void setNamespaceAware(boolean)" class="javax.xml.parsers.DocumentBuilderFactory" />
	<class name="com.google.zxing.aztec.AztecReader" />
	<method signature="com.google.zxing.Result decode(com.google.zxing.BinaryBitmap)" class="com.google.zxing.aztec.AztecReader" />
	<method signature="void reset()" class="com.google.zxing.aztec.AztecReader" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.aztec.AztecReader" />
	<method signature="com.google.zxing.Result decode(com.google.zxing.BinaryBitmap,java.util.Map)" class="com.google.zxing.aztec.AztecReader" />
	<class name="freemarker.ext.beans.NumberModel" />
	<method signature="java.lang.Number getAsNumber()" class="freemarker.ext.beans.NumberModel" />
	<method signature="void &lt;init&gt;(java.lang.Number,freemarker.ext.beans.BeansWrapper)" class="freemarker.ext.beans.NumberModel" />
	<class name="org.jfree.util.ObjectUtilities" />
	<method signature="java.lang.String getClassLoaderSource()" class="org.jfree.util.ObjectUtilities" />
	<method signature="java.util.Collection deepClone(java.util.Collection)" class="org.jfree.util.ObjectUtilities" />
	<method signature="void setClassLoader(java.lang.ClassLoader)" class="org.jfree.util.ObjectUtilities" />
	<method signature="java.io.InputStream getResourceRelativeAsStream(java.lang.String,java.lang.Class)" class="org.jfree.util.ObjectUtilities" />
	<method signature="boolean isJDK14()" class="org.jfree.util.ObjectUtilities" />
	<method signature="java.net.URL getResource(java.lang.String,java.lang.Class)" class="org.jfree.util.ObjectUtilities" />
	<method signature="java.lang.Object loadAndInstantiate(java.lang.String,java.lang.Class)" class="org.jfree.util.ObjectUtilities" />
	<method signature="java.lang.ClassLoader getClassLoader()" class="org.jfree.util.ObjectUtilities" />
	<method signature="java.lang.Object clone(java.lang.Object)" class="org.jfree.util.ObjectUtilities" />
	<method signature="boolean equal(java.lang.Object,java.lang.Object)" class="org.jfree.util.ObjectUtilities" />
	<method signature="java.net.URL getResourceRelative(java.lang.String,java.lang.Class)" class="org.jfree.util.ObjectUtilities" />
	<method signature="java.lang.ClassLoader getClassLoader(java.lang.Class)" class="org.jfree.util.ObjectUtilities" />
	<method signature="java.io.InputStream getResourceAsStream(java.lang.String,java.lang.Class)" class="org.jfree.util.ObjectUtilities" />
	<method signature="java.lang.Object loadAndInstantiate(java.lang.String,java.lang.Class,java.lang.Class)" class="org.jfree.util.ObjectUtilities" />
	<method signature="void setClassLoaderSource(java.lang.String)" class="org.jfree.util.ObjectUtilities" />
	<method signature="int hashCode(java.lang.Object)" class="org.jfree.util.ObjectUtilities" />
	<class name="org.unbescape.properties.PropertiesEscape" />
	<method signature="void unescapeProperties(char[],int,int,java.io.Writer)" class="org.unbescape.properties.PropertiesEscape" />
	<method signature="java.lang.String escapePropertiesKey(java.lang.String,org.unbescape.properties.PropertiesKeyEscapeLevel)" class="org.unbescape.properties.PropertiesEscape" />
	<method signature="java.lang.String escapePropertiesKey(java.lang.String)" class="org.unbescape.properties.PropertiesEscape" />
	<method signature="java.lang.String escapePropertiesKeyMinimal(java.lang.String)" class="org.unbescape.properties.PropertiesEscape" />
	<method signature="void escapePropertiesKey(char[],int,int,java.io.Writer,org.unbescape.properties.PropertiesKeyEscapeLevel)" class="org.unbescape.properties.PropertiesEscape" />
	<method signature="java.lang.String escapePropertiesValueMinimal(java.lang.String)" class="org.unbescape.properties.PropertiesEscape" />
	<method signature="void escapePropertiesValue(char[],int,int,java.io.Writer)" class="org.unbescape.properties.PropertiesEscape" />
	<method signature="java.lang.String escapePropertiesValue(java.lang.String)" class="org.unbescape.properties.PropertiesEscape" />
	<method signature="void escapePropertiesValueMinimal(char[],int,int,java.io.Writer)" class="org.unbescape.properties.PropertiesEscape" />
	<method signature="void escapePropertiesValue(char[],int,int,java.io.Writer,org.unbescape.properties.PropertiesValueEscapeLevel)" class="org.unbescape.properties.PropertiesEscape" />
	<method signature="java.lang.String unescapeProperties(java.lang.String)" class="org.unbescape.properties.PropertiesEscape" />
	<method signature="java.lang.String escapePropertiesValue(java.lang.String,org.unbescape.properties.PropertiesValueEscapeLevel)" class="org.unbescape.properties.PropertiesEscape" />
	<method signature="void escapePropertiesKeyMinimal(char[],int,int,java.io.Writer)" class="org.unbescape.properties.PropertiesEscape" />
	<method signature="void escapePropertiesKey(char[],int,int,java.io.Writer)" class="org.unbescape.properties.PropertiesEscape" />
	<class name="com.google.zxing.maxicode.decoder.Decoder" />
	<method signature="com.google.zxing.common.DecoderResult decode(com.google.zxing.common.BitMatrix)" class="com.google.zxing.maxicode.decoder.Decoder" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.maxicode.decoder.Decoder" />
	<method signature="com.google.zxing.common.DecoderResult decode(com.google.zxing.common.BitMatrix,java.util.Map)" class="com.google.zxing.maxicode.decoder.Decoder" />
	<class name="org.apache.xerces.xni.XMLDTDContentModelHandler" />
	<method signature="void setDTDContentModelSource(org.apache.xerces.xni.parser.XMLDTDContentModelSource)" class="org.apache.xerces.xni.XMLDTDContentModelHandler" />
	<method signature="void startContentModel(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDTDContentModelHandler" />
	<method signature="void element(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDTDContentModelHandler" />
	<method signature="void pcdata(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDTDContentModelHandler" />
	<method signature="void startGroup(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDTDContentModelHandler" />
	<method signature="void empty(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDTDContentModelHandler" />
	<method signature="void any(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDTDContentModelHandler" />
	<method signature="void separator(short,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDTDContentModelHandler" />
	<method signature="org.apache.xerces.xni.parser.XMLDTDContentModelSource getDTDContentModelSource()" class="org.apache.xerces.xni.XMLDTDContentModelHandler" />
	<method signature="void endContentModel(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDTDContentModelHandler" />
	<method signature="void endGroup(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDTDContentModelHandler" />
	<method signature="void occurrence(short,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDTDContentModelHandler" />
	<class name="com.google.zxing.oned.rss.RSS14Reader" />
	<method signature="void reset()" class="com.google.zxing.oned.rss.RSS14Reader" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.oned.rss.RSS14Reader" />
	<method signature="com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map)" class="com.google.zxing.oned.rss.RSS14Reader" />
	<class name="org.jfree.ui.about.resources.AboutResources" />
	<method signature="void &lt;init&gt;()" class="org.jfree.ui.about.resources.AboutResources" />
	<method signature="java.lang.Object[][] getContents()" class="org.jfree.ui.about.resources.AboutResources" />
	<class name="com.toedter.calendar.JDayChooserBeanInfo" />
	<method signature="void &lt;init&gt;()" class="com.toedter.calendar.JDayChooserBeanInfo" />
	<class name="org.apache.xerces.parsers.XML11Configuration" />
	<method signature="void setLocale(java.util.Locale)" class="org.apache.xerces.parsers.XML11Configuration" />
	<method signature="org.apache.xerces.xni.XMLDTDContentModelHandler getDTDContentModelHandler()" class="org.apache.xerces.parsers.XML11Configuration" />
	<method signature="void parse(org.apache.xerces.xni.parser.XMLInputSource)" class="org.apache.xerces.parsers.XML11Configuration" />
	<method signature="boolean getFeature(java.lang.String)" class="org.apache.xerces.parsers.XML11Configuration" />
	<method signature="java.util.Locale getLocale()" class="org.apache.xerces.parsers.XML11Configuration" />
	<method signature="void setDocumentHandler(org.apache.xerces.xni.XMLDocumentHandler)" class="org.apache.xerces.parsers.XML11Configuration" />
	<method signature="void cleanup()" class="org.apache.xerces.parsers.XML11Configuration" />
	<method signature="org.apache.xerces.xni.parser.XMLErrorHandler getErrorHandler()" class="org.apache.xerces.parsers.XML11Configuration" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable)" class="org.apache.xerces.parsers.XML11Configuration" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.parsers.XML11Configuration" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable,org.apache.xerces.xni.grammars.XMLGrammarPool)" class="org.apache.xerces.parsers.XML11Configuration" />
	<method signature="void setInputSource(org.apache.xerces.xni.parser.XMLInputSource)" class="org.apache.xerces.parsers.XML11Configuration" />
	<method signature="void setDTDHandler(org.apache.xerces.xni.XMLDTDHandler)" class="org.apache.xerces.parsers.XML11Configuration" />
	<method signature="void setFeature(java.lang.String,boolean)" class="org.apache.xerces.parsers.XML11Configuration" />
	<method signature="org.apache.xerces.xni.XMLDTDHandler getDTDHandler()" class="org.apache.xerces.parsers.XML11Configuration" />
	<method signature="void setEntityResolver(org.apache.xerces.xni.parser.XMLEntityResolver)" class="org.apache.xerces.parsers.XML11Configuration" />
	<method signature="boolean parse(boolean)" class="org.apache.xerces.parsers.XML11Configuration" />
	<method signature="org.apache.xerces.xni.XMLDocumentHandler getDocumentHandler()" class="org.apache.xerces.parsers.XML11Configuration" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="org.apache.xerces.parsers.XML11Configuration" />
	<method signature="void setErrorHandler(org.apache.xerces.xni.parser.XMLErrorHandler)" class="org.apache.xerces.parsers.XML11Configuration" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable,org.apache.xerces.xni.grammars.XMLGrammarPool,org.apache.xerces.xni.parser.XMLComponentManager)" class="org.apache.xerces.parsers.XML11Configuration" />
	<method signature="void setDTDContentModelHandler(org.apache.xerces.xni.XMLDTDContentModelHandler)" class="org.apache.xerces.parsers.XML11Configuration" />
	<method signature="org.apache.xerces.xni.parser.XMLEntityResolver getEntityResolver()" class="org.apache.xerces.parsers.XML11Configuration" />
	<method signature="java.lang.Object getProperty(java.lang.String)" class="org.apache.xerces.parsers.XML11Configuration" />
	<class name="org.unbescape.json.JsonEscapeType" />
	<method signature="org.unbescape.json.JsonEscapeType[] values()" class="org.unbescape.json.JsonEscapeType" />
	<method signature="org.unbescape.json.JsonEscapeType valueOf(java.lang.String)" class="org.unbescape.json.JsonEscapeType" />
	<class name="org.apache.commons.lang3.time.DateUtils" />
	<method signature="java.util.Date setHours(java.util.Date,int)" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="long getFragmentInDays(java.util.Date,int)" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="java.util.Date round(java.lang.Object,int)" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="java.util.Date setMilliseconds(java.util.Date,int)" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="java.util.Iterator iterator(java.lang.Object,int)" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="long getFragmentInMinutes(java.util.Calendar,int)" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="java.util.Date addYears(java.util.Date,int)" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="long getFragmentInHours(java.util.Calendar,int)" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="java.util.Date addMinutes(java.util.Date,int)" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="java.util.Date ceiling(java.lang.Object,int)" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="java.util.Date round(java.util.Date,int)" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="java.util.Calendar ceiling(java.util.Calendar,int)" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="java.util.Date parseDate(java.lang.String,java.util.Locale,java.lang.String[])" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="long getFragmentInSeconds(java.util.Calendar,int)" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="java.util.Date addMonths(java.util.Date,int)" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="java.util.Date addHours(java.util.Date,int)" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="boolean truncatedEquals(java.util.Date,java.util.Date,int)" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="java.util.Date parseDateStrictly(java.lang.String,java.util.Locale,java.lang.String[])" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="java.util.Calendar round(java.util.Calendar,int)" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="java.util.Date ceiling(java.util.Date,int)" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="long getFragmentInMilliseconds(java.util.Date,int)" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="java.util.Date setMonths(java.util.Date,int)" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="int truncatedCompareTo(java.util.Calendar,java.util.Calendar,int)" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="java.util.Date truncate(java.util.Date,int)" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="java.util.Iterator iterator(java.util.Date,int)" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="java.util.Date setSeconds(java.util.Date,int)" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="boolean isSameInstant(java.util.Calendar,java.util.Calendar)" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="java.util.Date setYears(java.util.Date,int)" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="java.util.Date setDays(java.util.Date,int)" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="long getFragmentInSeconds(java.util.Date,int)" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="java.util.Date addDays(java.util.Date,int)" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="boolean isSameDay(java.util.Date,java.util.Date)" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="java.util.Date addMilliseconds(java.util.Date,int)" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="java.util.Date addWeeks(java.util.Date,int)" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="java.util.Calendar truncate(java.util.Calendar,int)" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="boolean truncatedEquals(java.util.Calendar,java.util.Calendar,int)" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="boolean isSameLocalTime(java.util.Calendar,java.util.Calendar)" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="long getFragmentInMilliseconds(java.util.Calendar,int)" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="java.util.Date addSeconds(java.util.Date,int)" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="int truncatedCompareTo(java.util.Date,java.util.Date,int)" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="long getFragmentInDays(java.util.Calendar,int)" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="java.util.Date truncate(java.lang.Object,int)" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="java.util.Date parseDate(java.lang.String,java.lang.String[])" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="boolean isSameDay(java.util.Calendar,java.util.Calendar)" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="java.util.Calendar toCalendar(java.util.Date)" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="long getFragmentInMinutes(java.util.Date,int)" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="java.util.Iterator iterator(java.util.Calendar,int)" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="long getFragmentInHours(java.util.Date,int)" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="boolean isSameInstant(java.util.Date,java.util.Date)" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="java.util.Date setMinutes(java.util.Date,int)" class="org.apache.commons.lang3.time.DateUtils" />
	<method signature="java.util.Date parseDateStrictly(java.lang.String,java.lang.String[])" class="org.apache.commons.lang3.time.DateUtils" />
	<class name="org.apache.xerces.parsers.XMLDocumentParser" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable)" class="org.apache.xerces.parsers.XMLDocumentParser" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.parsers.XMLDocumentParser" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable,org.apache.xerces.xni.grammars.XMLGrammarPool)" class="org.apache.xerces.parsers.XMLDocumentParser" />
	<method signature="void &lt;init&gt;(org.apache.xerces.xni.parser.XMLParserConfiguration)" class="org.apache.xerces.parsers.XMLDocumentParser" />
	<class name="org.jfree.ui.about.SystemPropertiesFrame" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="org.jfree.ui.about.SystemPropertiesFrame" />
	<method signature="void &lt;init&gt;(boolean)" class="org.jfree.ui.about.SystemPropertiesFrame" />
	<class name="org.apache.commons.lang3.concurrent.MultiBackgroundInitializer" />
	<method signature="void &lt;init&gt;(java.util.concurrent.ExecutorService)" class="org.apache.commons.lang3.concurrent.MultiBackgroundInitializer" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.concurrent.MultiBackgroundInitializer" />
	<method signature="void addInitializer(java.lang.String,org.apache.commons.lang3.concurrent.BackgroundInitializer)" class="org.apache.commons.lang3.concurrent.MultiBackgroundInitializer" />
	<class name="org.apache.xerces.impl.dtd.XMLNSDTDValidator" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dtd.XMLNSDTDValidator" />
	<class name="freemarker.cache.ConcurrentCacheStorage" />
	<method signature="boolean isConcurrent()" class="freemarker.cache.ConcurrentCacheStorage" />
	<class name="org.jdom2.output.support.StAXStreamProcessor" />
	<method signature="void process(javax.xml.stream.XMLStreamWriter,org.jdom2.output.Format,org.jdom2.Element)" class="org.jdom2.output.support.StAXStreamProcessor" />
	<method signature="void process(javax.xml.stream.XMLStreamWriter,org.jdom2.output.Format,org.jdom2.CDATA)" class="org.jdom2.output.support.StAXStreamProcessor" />
	<method signature="void process(javax.xml.stream.XMLStreamWriter,org.jdom2.output.Format,org.jdom2.EntityRef)" class="org.jdom2.output.support.StAXStreamProcessor" />
	<method signature="void process(javax.xml.stream.XMLStreamWriter,org.jdom2.output.Format,org.jdom2.Document)" class="org.jdom2.output.support.StAXStreamProcessor" />
	<method signature="void process(javax.xml.stream.XMLStreamWriter,org.jdom2.output.Format,java.util.List)" class="org.jdom2.output.support.StAXStreamProcessor" />
	<method signature="void process(javax.xml.stream.XMLStreamWriter,org.jdom2.output.Format,org.jdom2.Text)" class="org.jdom2.output.support.StAXStreamProcessor" />
	<method signature="void process(javax.xml.stream.XMLStreamWriter,org.jdom2.output.Format,org.jdom2.DocType)" class="org.jdom2.output.support.StAXStreamProcessor" />
	<method signature="void process(javax.xml.stream.XMLStreamWriter,org.jdom2.output.Format,org.jdom2.ProcessingInstruction)" class="org.jdom2.output.support.StAXStreamProcessor" />
	<method signature="void process(javax.xml.stream.XMLStreamWriter,org.jdom2.output.Format,org.jdom2.Comment)" class="org.jdom2.output.support.StAXStreamProcessor" />
	<class name="org.apache.xerces.impl.XMLEntityManager$Entity" />
	<method signature="boolean isUnparsed()" class="org.apache.xerces.impl.XMLEntityManager$Entity" />
	<method signature="void clear()" class="org.apache.xerces.impl.XMLEntityManager$Entity" />
	<method signature="void setValues(org.apache.xerces.impl.XMLEntityManager$Entity)" class="org.apache.xerces.impl.XMLEntityManager$Entity" />
	<method signature="boolean isEntityDeclInExternalSubset()" class="org.apache.xerces.impl.XMLEntityManager$Entity" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.XMLEntityManager$Entity" />
	<method signature="void &lt;init&gt;(java.lang.String,boolean)" class="org.apache.xerces.impl.XMLEntityManager$Entity" />
	<method signature="boolean isExternal()" class="org.apache.xerces.impl.XMLEntityManager$Entity" />
	<class name="org.w3c.dom.html.HTMLIFrameElement" />
	<method signature="void setAlign(java.lang.String)" class="org.w3c.dom.html.HTMLIFrameElement" />
	<method signature="void setMarginWidth(java.lang.String)" class="org.w3c.dom.html.HTMLIFrameElement" />
	<method signature="java.lang.String getName()" class="org.w3c.dom.html.HTMLIFrameElement" />
	<method signature="java.lang.String getSrc()" class="org.w3c.dom.html.HTMLIFrameElement" />
	<method signature="void setFrameBorder(java.lang.String)" class="org.w3c.dom.html.HTMLIFrameElement" />
	<method signature="java.lang.String getMarginHeight()" class="org.w3c.dom.html.HTMLIFrameElement" />
	<method signature="java.lang.String getScrolling()" class="org.w3c.dom.html.HTMLIFrameElement" />
	<method signature="java.lang.String getWidth()" class="org.w3c.dom.html.HTMLIFrameElement" />
	<method signature="java.lang.String getAlign()" class="org.w3c.dom.html.HTMLIFrameElement" />
	<method signature="void setMarginHeight(java.lang.String)" class="org.w3c.dom.html.HTMLIFrameElement" />
	<method signature="java.lang.String getLongDesc()" class="org.w3c.dom.html.HTMLIFrameElement" />
	<method signature="void setScrolling(java.lang.String)" class="org.w3c.dom.html.HTMLIFrameElement" />
	<method signature="java.lang.String getHeight()" class="org.w3c.dom.html.HTMLIFrameElement" />
	<method signature="void setName(java.lang.String)" class="org.w3c.dom.html.HTMLIFrameElement" />
	<method signature="void setSrc(java.lang.String)" class="org.w3c.dom.html.HTMLIFrameElement" />
	<method signature="void setHeight(java.lang.String)" class="org.w3c.dom.html.HTMLIFrameElement" />
	<method signature="java.lang.String getMarginWidth()" class="org.w3c.dom.html.HTMLIFrameElement" />
	<method signature="void setWidth(java.lang.String)" class="org.w3c.dom.html.HTMLIFrameElement" />
	<method signature="java.lang.String getFrameBorder()" class="org.w3c.dom.html.HTMLIFrameElement" />
	<method signature="void setLongDesc(java.lang.String)" class="org.w3c.dom.html.HTMLIFrameElement" />
	<class name="com.google.zxing.oned.UPCEANWriter" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.oned.UPCEANWriter" />
	<method signature="int getDefaultMargin()" class="com.google.zxing.oned.UPCEANWriter" />
	<class name="org.unbescape.java.JavaEscape" />
	<method signature="void escapeJavaMinimal(char[],int,int,java.io.Writer)" class="org.unbescape.java.JavaEscape" />
	<method signature="void escapeJava(char[],int,int,java.io.Writer,org.unbescape.java.JavaEscapeLevel)" class="org.unbescape.java.JavaEscape" />
	<method signature="void escapeJava(char[],int,int,java.io.Writer)" class="org.unbescape.java.JavaEscape" />
	<method signature="java.lang.String unescapeJava(java.lang.String)" class="org.unbescape.java.JavaEscape" />
	<method signature="java.lang.String escapeJavaMinimal(java.lang.String)" class="org.unbescape.java.JavaEscape" />
	<method signature="java.lang.String escapeJava(java.lang.String,org.unbescape.java.JavaEscapeLevel)" class="org.unbescape.java.JavaEscape" />
	<method signature="void unescapeJava(char[],int,int,java.io.Writer)" class="org.unbescape.java.JavaEscape" />
	<method signature="java.lang.String escapeJava(java.lang.String)" class="org.unbescape.java.JavaEscape" />
	<class name="org.apache.xerces.dom3.as.ASModel" />
	<method signature="org.apache.xerces.dom3.as.ASNamedObjectMap getElementDeclarations()" class="org.apache.xerces.dom3.as.ASModel" />
	<method signature="org.apache.xerces.dom3.as.ASNamedObjectMap getNotationDeclarations()" class="org.apache.xerces.dom3.as.ASModel" />
	<method signature="java.lang.String getAsLocation()" class="org.apache.xerces.dom3.as.ASModel" />
	<method signature="boolean validate()" class="org.apache.xerces.dom3.as.ASModel" />
	<method signature="void setAsHint(java.lang.String)" class="org.apache.xerces.dom3.as.ASModel" />
	<method signature="org.apache.xerces.dom3.as.ASAttributeDeclaration createASAttributeDeclaration(java.lang.String,java.lang.String)" class="org.apache.xerces.dom3.as.ASModel" />
	<method signature="org.apache.xerces.dom3.as.ASContentModel createASContentModel(int,int,short)" class="org.apache.xerces.dom3.as.ASModel" />
	<method signature="org.apache.xerces.dom3.as.ASNamedObjectMap getAttributeDeclarations()" class="org.apache.xerces.dom3.as.ASModel" />
	<method signature="org.apache.xerces.dom3.as.ASNamedObjectMap getEntityDeclarations()" class="org.apache.xerces.dom3.as.ASModel" />
	<method signature="void addASModel(org.apache.xerces.dom3.as.ASModel)" class="org.apache.xerces.dom3.as.ASModel" />
	<method signature="org.apache.xerces.dom3.as.ASObjectList getASModels()" class="org.apache.xerces.dom3.as.ASModel" />
	<method signature="org.apache.xerces.dom3.as.ASEntityDeclaration createASEntityDeclaration(java.lang.String)" class="org.apache.xerces.dom3.as.ASModel" />
	<method signature="void removeAS(org.apache.xerces.dom3.as.ASModel)" class="org.apache.xerces.dom3.as.ASModel" />
	<method signature="short getUsageLocation()" class="org.apache.xerces.dom3.as.ASModel" />
	<method signature="org.apache.xerces.dom3.as.ASElementDeclaration createASElementDeclaration(java.lang.String,java.lang.String)" class="org.apache.xerces.dom3.as.ASModel" />
	<method signature="java.lang.String getAsHint()" class="org.apache.xerces.dom3.as.ASModel" />
	<method signature="org.apache.xerces.dom3.as.ASNotationDeclaration createASNotationDeclaration(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.dom3.as.ASModel" />
	<method signature="org.apache.xerces.dom3.as.ASNamedObjectMap getContentModelDeclarations()" class="org.apache.xerces.dom3.as.ASModel" />
	<method signature="boolean getIsNamespaceAware()" class="org.apache.xerces.dom3.as.ASModel" />
	<method signature="void setAsLocation(java.lang.String)" class="org.apache.xerces.dom3.as.ASModel" />
	<class name="org.apache.xerces.xs.XSObjectList" />
	<method signature="org.apache.xerces.xs.XSObject item(int)" class="org.apache.xerces.xs.XSObjectList" />
	<method signature="int getLength()" class="org.apache.xerces.xs.XSObjectList" />
	<class name="tourma.views.parameters.JPNTeams" />
	<method signature="void update()" class="tourma.views.parameters.JPNTeams" />
	<method signature="void &lt;init&gt;()" class="tourma.views.parameters.JPNTeams" />
	<class name="javax.xml.bind.UnmarshallerHandler" />
	<method signature="java.lang.Object getResult()" class="javax.xml.bind.UnmarshallerHandler" />
	<class name="org.apache.wml.dom.WMLSelectElementImpl" />
	<method signature="void setValue(java.lang.String)" class="org.apache.wml.dom.WMLSelectElementImpl" />
	<method signature="java.lang.String getName()" class="org.apache.wml.dom.WMLSelectElementImpl" />
	<method signature="java.lang.String getXmlLang()" class="org.apache.wml.dom.WMLSelectElementImpl" />
	<method signature="boolean getMultiple()" class="org.apache.wml.dom.WMLSelectElementImpl" />
	<method signature="java.lang.String getId()" class="org.apache.wml.dom.WMLSelectElementImpl" />
	<method signature="void setTabIndex(int)" class="org.apache.wml.dom.WMLSelectElementImpl" />
	<method signature="void setMultiple(boolean)" class="org.apache.wml.dom.WMLSelectElementImpl" />
	<method signature="void setId(java.lang.String)" class="org.apache.wml.dom.WMLSelectElementImpl" />
	<method signature="java.lang.String getTitle()" class="org.apache.wml.dom.WMLSelectElementImpl" />
	<method signature="java.lang.String getIValue()" class="org.apache.wml.dom.WMLSelectElementImpl" />
	<method signature="java.lang.String getValue()" class="org.apache.wml.dom.WMLSelectElementImpl" />
	<method signature="int getTabIndex()" class="org.apache.wml.dom.WMLSelectElementImpl" />
	<method signature="void setXmlLang(java.lang.String)" class="org.apache.wml.dom.WMLSelectElementImpl" />
	<method signature="java.lang.String getIName()" class="org.apache.wml.dom.WMLSelectElementImpl" />
	<method signature="void setName(java.lang.String)" class="org.apache.wml.dom.WMLSelectElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.wml.dom.WMLDocumentImpl,java.lang.String)" class="org.apache.wml.dom.WMLSelectElementImpl" />
	<method signature="java.lang.String getClassName()" class="org.apache.wml.dom.WMLSelectElementImpl" />
	<method signature="void setIName(java.lang.String)" class="org.apache.wml.dom.WMLSelectElementImpl" />
	<method signature="void setClassName(java.lang.String)" class="org.apache.wml.dom.WMLSelectElementImpl" />
	<method signature="void setIValue(java.lang.String)" class="org.apache.wml.dom.WMLSelectElementImpl" />
	<method signature="void setTitle(java.lang.String)" class="org.apache.wml.dom.WMLSelectElementImpl" />
	<class name="org.jfree.chart.needle.MeterNeedle" />
	<method signature="void setOutlineStroke(java.awt.Stroke)" class="org.jfree.chart.needle.MeterNeedle" />
	<method signature="int getSize()" class="org.jfree.chart.needle.MeterNeedle" />
	<method signature="java.awt.Stroke getOutlineStroke()" class="org.jfree.chart.needle.MeterNeedle" />
	<method signature="java.awt.geom.AffineTransform getTransform()" class="org.jfree.chart.needle.MeterNeedle" />
	<method signature="void setOutlinePaint(java.awt.Paint)" class="org.jfree.chart.needle.MeterNeedle" />
	<method signature="void setSize(int)" class="org.jfree.chart.needle.MeterNeedle" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.needle.MeterNeedle" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.needle.MeterNeedle" />
	<method signature="double getRotateY()" class="org.jfree.chart.needle.MeterNeedle" />
	<method signature="double getRotateX()" class="org.jfree.chart.needle.MeterNeedle" />
	<method signature="java.awt.Paint getOutlinePaint()" class="org.jfree.chart.needle.MeterNeedle" />
	<method signature="void setRotateX(double)" class="org.jfree.chart.needle.MeterNeedle" />
	<method signature="java.awt.Paint getFillPaint()" class="org.jfree.chart.needle.MeterNeedle" />
	<method signature="void setRotateY(double)" class="org.jfree.chart.needle.MeterNeedle" />
	<method signature="void setHighlightPaint(java.awt.Paint)" class="org.jfree.chart.needle.MeterNeedle" />
	<method signature="int hashCode()" class="org.jfree.chart.needle.MeterNeedle" />
	<method signature="void &lt;init&gt;(java.awt.Paint,java.awt.Paint,java.awt.Paint)" class="org.jfree.chart.needle.MeterNeedle" />
	<method signature="void setFillPaint(java.awt.Paint)" class="org.jfree.chart.needle.MeterNeedle" />
	<method signature="java.awt.Paint getHighlightPaint()" class="org.jfree.chart.needle.MeterNeedle" />
	<method signature="void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)" class="org.jfree.chart.needle.MeterNeedle" />
	<method signature="void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" class="org.jfree.chart.needle.MeterNeedle" />
	<method signature="void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double)" class="org.jfree.chart.needle.MeterNeedle" />
	<class name="freemarker.core.Node" />
	<method signature="int getBeginLine()" class="freemarker.core.Node" />
	<method signature="void setEndColumn(int)" class="freemarker.core.Node" />
	<method signature="freemarker.core.Node jjtGetChild(int)" class="freemarker.core.Node" />
	<method signature="void setInputSource(java.lang.String)" class="freemarker.core.Node" />
	<method signature="int getBeginColumn()" class="freemarker.core.Node" />
	<method signature="int getEndColumn()" class="freemarker.core.Node" />
	<method signature="void setBeginLine(int)" class="freemarker.core.Node" />
	<method signature="freemarker.core.Node jjtGetParent()" class="freemarker.core.Node" />
	<method signature="int getEndLine()" class="freemarker.core.Node" />
	<method signature="void setBeginColumn(int)" class="freemarker.core.Node" />
	<method signature="int jjtGetNumChildren()" class="freemarker.core.Node" />
	<method signature="void jjtClose()" class="freemarker.core.Node" />
	<method signature="java.lang.String getInputSource()" class="freemarker.core.Node" />
	<method signature="void jjtOpen()" class="freemarker.core.Node" />
	<method signature="void jjtSetParent(freemarker.core.Node)" class="freemarker.core.Node" />
	<method signature="void setEndLine(int)" class="freemarker.core.Node" />
	<method signature="void jjtAddChild(freemarker.core.Node,int)" class="freemarker.core.Node" />
	<class name="org.w3c.dom.ElementTraversal" />
	<method signature="org.w3c.dom.Element getLastElementChild()" class="org.w3c.dom.ElementTraversal" />
	<method signature="org.w3c.dom.Element getNextElementSibling()" class="org.w3c.dom.ElementTraversal" />
	<method signature="int getChildElementCount()" class="org.w3c.dom.ElementTraversal" />
	<method signature="org.w3c.dom.Element getFirstElementChild()" class="org.w3c.dom.ElementTraversal" />
	<method signature="org.w3c.dom.Element getPreviousElementSibling()" class="org.w3c.dom.ElementTraversal" />
	<class name="teamma.data.LRB" />
	<method signature="teamma.data.LRB getLRB()" class="teamma.data.LRB" />
	<method signature="java.lang.String getName()" class="teamma.data.LRB" />
	<method signature="void addRosterType(teamma.data.RosterType)" class="teamma.data.LRB" />
	<method signature="int getSkillTypeCount()" class="teamma.data.LRB" />
	<method signature="void clearRosterTypes()" class="teamma.data.LRB" />
	<method signature="teamma.data.StarPlayer getStarPlayer(int)" class="teamma.data.LRB" />
	<method signature="void addStarPlayer(teamma.data.StarPlayer)" class="teamma.data.LRB" />
	<method signature="teamma.data.RosterType getRosterType(java.lang.String,boolean)" class="teamma.data.LRB" />
	<method signature="boolean isAllowSpecialSkills()" class="teamma.data.LRB" />
	<method signature="void setName(java.lang.String)" class="teamma.data.LRB" />
	<method signature="teamma.data.RosterType getRosterType(java.lang.String)" class="teamma.data.LRB" />
	<method signature="teamma.data.SkillType getSkillType(int)" class="teamma.data.LRB" />
	<method signature="teamma.data.SkillType getSkillType(java.lang.String)" class="teamma.data.LRB" />
	<method signature="void clearStarPlayers()" class="teamma.data.LRB" />
	<method signature="void clearSkillTypes()" class="teamma.data.LRB" />
	<method signature="int getRosterTypeCount()" class="teamma.data.LRB" />
	<method signature="void setAllowSpecialSkills(boolean)" class="teamma.data.LRB" />
	<method signature="teamma.data.StarPlayer getStarPlayer(java.lang.String)" class="teamma.data.LRB" />
	<method signature="teamma.data.Skill getSkill(java.lang.String,boolean)" class="teamma.data.LRB" />
	<method signature="void addSkillType(teamma.data.SkillType)" class="teamma.data.LRB" />
	<method signature="java.util.ArrayList getRosterTypeListAsString(boolean)" class="teamma.data.LRB" />
	<method signature="int getStarPlayerCount()" class="teamma.data.LRB" />
	<method signature="teamma.data.RosterType getRosterType(int)" class="teamma.data.LRB" />
	<method signature="void unloadLRB()" class="teamma.data.LRB" />
	<class name="com.google.zxing.pdf417.decoder.ec.ErrorCorrection" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.pdf417.decoder.ec.ErrorCorrection" />
	<method signature="void decode(int[],int,int[])" class="com.google.zxing.pdf417.decoder.ec.ErrorCorrection" />
	<class name="tourma.utils.ImageTreatment" />
	<method signature="javax.swing.ImageIcon resize(javax.swing.ImageIcon,int,int)" class="tourma.utils.ImageTreatment" />
	<class name="org.apache.wml.dom.WMLOptionElementImpl" />
	<method signature="void setValue(java.lang.String)" class="org.apache.wml.dom.WMLOptionElementImpl" />
	<method signature="java.lang.String getOnPick()" class="org.apache.wml.dom.WMLOptionElementImpl" />
	<method signature="java.lang.String getXmlLang()" class="org.apache.wml.dom.WMLOptionElementImpl" />
	<method signature="java.lang.String getId()" class="org.apache.wml.dom.WMLOptionElementImpl" />
	<method signature="void setId(java.lang.String)" class="org.apache.wml.dom.WMLOptionElementImpl" />
	<method signature="java.lang.String getTitle()" class="org.apache.wml.dom.WMLOptionElementImpl" />
	<method signature="java.lang.String getValue()" class="org.apache.wml.dom.WMLOptionElementImpl" />
	<method signature="void setXmlLang(java.lang.String)" class="org.apache.wml.dom.WMLOptionElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.wml.dom.WMLDocumentImpl,java.lang.String)" class="org.apache.wml.dom.WMLOptionElementImpl" />
	<method signature="java.lang.String getClassName()" class="org.apache.wml.dom.WMLOptionElementImpl" />
	<method signature="void setClassName(java.lang.String)" class="org.apache.wml.dom.WMLOptionElementImpl" />
	<method signature="void setOnPick(java.lang.String)" class="org.apache.wml.dom.WMLOptionElementImpl" />
	<method signature="void setTitle(java.lang.String)" class="org.apache.wml.dom.WMLOptionElementImpl" />
	<class name="org.apache.xerces.stax.events.EndElementImpl" />
	<method signature="void writeAsEncodedUnicode(java.io.Writer)" class="org.apache.xerces.stax.events.EndElementImpl" />
	<method signature="void &lt;init&gt;(javax.xml.namespace.QName,java.util.Iterator,javax.xml.stream.Location)" class="org.apache.xerces.stax.events.EndElementImpl" />
	<class name="org.apache.commons.lang3.time.StopWatch" />
	<method signature="long getSplitTime()" class="org.apache.commons.lang3.time.StopWatch" />
	<method signature="void reset()" class="org.apache.commons.lang3.time.StopWatch" />
	<method signature="java.lang.String toSplitString()" class="org.apache.commons.lang3.time.StopWatch" />
	<method signature="void split()" class="org.apache.commons.lang3.time.StopWatch" />
	<method signature="void unsplit()" class="org.apache.commons.lang3.time.StopWatch" />
	<method signature="void stop()" class="org.apache.commons.lang3.time.StopWatch" />
	<method signature="long getStartTime()" class="org.apache.commons.lang3.time.StopWatch" />
	<method signature="void start()" class="org.apache.commons.lang3.time.StopWatch" />
	<method signature="long getTime()" class="org.apache.commons.lang3.time.StopWatch" />
	<method signature="long getNanoTime()" class="org.apache.commons.lang3.time.StopWatch" />
	<method signature="long getSplitNanoTime()" class="org.apache.commons.lang3.time.StopWatch" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.time.StopWatch" />
	<method signature="boolean isStarted()" class="org.apache.commons.lang3.time.StopWatch" />
	<method signature="java.lang.String toString()" class="org.apache.commons.lang3.time.StopWatch" />
	<method signature="void suspend()" class="org.apache.commons.lang3.time.StopWatch" />
	<method signature="void resume()" class="org.apache.commons.lang3.time.StopWatch" />
	<method signature="boolean isSuspended()" class="org.apache.commons.lang3.time.StopWatch" />
	<method signature="boolean isStopped()" class="org.apache.commons.lang3.time.StopWatch" />
	<class name="org.apache.xerces.xni.parser.XMLInputSource" />
	<method signature="java.lang.String getSystemId()" class="org.apache.xerces.xni.parser.XMLInputSource" />
	<method signature="void setSystemId(java.lang.String)" class="org.apache.xerces.xni.parser.XMLInputSource" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,java.io.InputStream,java.lang.String)" class="org.apache.xerces.xni.parser.XMLInputSource" />
	<method signature="void &lt;init&gt;(org.apache.xerces.xni.XMLResourceIdentifier)" class="org.apache.xerces.xni.parser.XMLInputSource" />
	<method signature="void setCharacterStream(java.io.Reader)" class="org.apache.xerces.xni.parser.XMLInputSource" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.xni.parser.XMLInputSource" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,java.io.Reader,java.lang.String)" class="org.apache.xerces.xni.parser.XMLInputSource" />
	<method signature="java.lang.String getPublicId()" class="org.apache.xerces.xni.parser.XMLInputSource" />
	<method signature="void setBaseSystemId(java.lang.String)" class="org.apache.xerces.xni.parser.XMLInputSource" />
	<method signature="java.lang.String getBaseSystemId()" class="org.apache.xerces.xni.parser.XMLInputSource" />
	<method signature="void setEncoding(java.lang.String)" class="org.apache.xerces.xni.parser.XMLInputSource" />
	<method signature="java.lang.String getEncoding()" class="org.apache.xerces.xni.parser.XMLInputSource" />
	<method signature="java.io.Reader getCharacterStream()" class="org.apache.xerces.xni.parser.XMLInputSource" />
	<method signature="void setByteStream(java.io.InputStream)" class="org.apache.xerces.xni.parser.XMLInputSource" />
	<method signature="java.io.InputStream getByteStream()" class="org.apache.xerces.xni.parser.XMLInputSource" />
	<method signature="void setPublicId(java.lang.String)" class="org.apache.xerces.xni.parser.XMLInputSource" />
	<class name="org.jfree.text.TextBox" />
	<method signature="void setOutlineStroke(java.awt.Stroke)" class="org.jfree.text.TextBox" />
	<method signature="void setShadowYOffset(double)" class="org.jfree.text.TextBox" />
	<method signature="java.awt.Stroke getOutlineStroke()" class="org.jfree.text.TextBox" />
	<method signature="void setOutlinePaint(java.awt.Paint)" class="org.jfree.text.TextBox" />
	<method signature="org.jfree.text.TextBlock getTextBlock()" class="org.jfree.text.TextBox" />
	<method signature="void setInteriorGap(org.jfree.ui.RectangleInsets)" class="org.jfree.text.TextBox" />
	<method signature="double getShadowXOffset()" class="org.jfree.text.TextBox" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.text.TextBox" />
	<method signature="void &lt;init&gt;()" class="org.jfree.text.TextBox" />
	<method signature="void &lt;init&gt;(org.jfree.text.TextBlock)" class="org.jfree.text.TextBox" />
	<method signature="java.awt.Paint getOutlinePaint()" class="org.jfree.text.TextBox" />
	<method signature="java.awt.Paint getShadowPaint()" class="org.jfree.text.TextBox" />
	<method signature="int hashCode()" class="org.jfree.text.TextBox" />
	<method signature="void setShadowPaint(java.awt.Paint)" class="org.jfree.text.TextBox" />
	<method signature="double getHeight(java.awt.Graphics2D)" class="org.jfree.text.TextBox" />
	<method signature="java.awt.Paint getBackgroundPaint()" class="org.jfree.text.TextBox" />
	<method signature="void setTextBlock(org.jfree.text.TextBlock)" class="org.jfree.text.TextBox" />
	<method signature="void draw(java.awt.Graphics2D,float,float,org.jfree.ui.RectangleAnchor)" class="org.jfree.text.TextBox" />
	<method signature="void setShadowXOffset(double)" class="org.jfree.text.TextBox" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.text.TextBox" />
	<method signature="double getShadowYOffset()" class="org.jfree.text.TextBox" />
	<method signature="org.jfree.ui.RectangleInsets getInteriorGap()" class="org.jfree.text.TextBox" />
	<method signature="void setBackgroundPaint(java.awt.Paint)" class="org.jfree.text.TextBox" />
	<class name="com.google.zxing.pdf417.encoder.Compaction" />
	<method signature="com.google.zxing.pdf417.encoder.Compaction valueOf(java.lang.String)" class="com.google.zxing.pdf417.encoder.Compaction" />
	<method signature="com.google.zxing.pdf417.encoder.Compaction[] values()" class="com.google.zxing.pdf417.encoder.Compaction" />
	<class name="org.jfree.data.Values" />
	<method signature="java.lang.Number getValue(int)" class="org.jfree.data.Values" />
	<method signature="int getItemCount()" class="org.jfree.data.Values" />
	<class name="javax.xml.bind.ValidationException" />
	<method signature="void &lt;init&gt;(java.lang.Throwable)" class="javax.xml.bind.ValidationException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Throwable)" class="javax.xml.bind.ValidationException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.Throwable)" class="javax.xml.bind.ValidationException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="javax.xml.bind.ValidationException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="javax.xml.bind.ValidationException" />
	<class name="org.jfree.chart.plot.MeterPlot" />
	<method signature="java.awt.Paint getTickPaint()" class="org.jfree.chart.plot.MeterPlot" />
	<method signature="void setMeterAngle(int)" class="org.jfree.chart.plot.MeterPlot" />
	<method signature="java.awt.Paint getDialBackgroundPaint()" class="org.jfree.chart.plot.MeterPlot" />
	<method signature="java.awt.Paint getTickLabelPaint()" class="org.jfree.chart.plot.MeterPlot" />
	<method signature="boolean getDrawBorder()" class="org.jfree.chart.plot.MeterPlot" />
	<method signature="void setTickLabelFont(java.awt.Font)" class="org.jfree.chart.plot.MeterPlot" />
	<method signature="void setTickLabelsVisible(boolean)" class="org.jfree.chart.plot.MeterPlot" />
	<method signature="void setDialBackgroundPaint(java.awt.Paint)" class="org.jfree.chart.plot.MeterPlot" />
	<method signature="void setDataset(org.jfree.data.general.ValueDataset)" class="org.jfree.chart.plot.MeterPlot" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.plot.MeterPlot" />
	<method signature="org.jfree.chart.plot.DialShape getDialShape()" class="org.jfree.chart.plot.MeterPlot" />
	<method signature="void setTickLabelPaint(java.awt.Paint)" class="org.jfree.chart.plot.MeterPlot" />
	<method signature="double valueToAngle(double)" class="org.jfree.chart.plot.MeterPlot" />
	<method signature="java.util.List getIntervals()" class="org.jfree.chart.plot.MeterPlot" />
	<method signature="void setDialShape(org.jfree.chart.plot.DialShape)" class="org.jfree.chart.plot.MeterPlot" />
	<method signature="void setDrawBorder(boolean)" class="org.jfree.chart.plot.MeterPlot" />
	<method signature="java.awt.Paint getNeedlePaint()" class="org.jfree.chart.plot.MeterPlot" />
	<method signature="java.awt.Paint getValuePaint()" class="org.jfree.chart.plot.MeterPlot" />
	<method signature="java.lang.String getPlotType()" class="org.jfree.chart.plot.MeterPlot" />
	<method signature="void setValueFont(java.awt.Font)" class="org.jfree.chart.plot.MeterPlot" />
	<method signature="boolean getTickLabelsVisible()" class="org.jfree.chart.plot.MeterPlot" />
	<method signature="int getMeterAngle()" class="org.jfree.chart.plot.MeterPlot" />
	<method signature="void addInterval(org.jfree.chart.plot.MeterInterval)" class="org.jfree.chart.plot.MeterPlot" />
	<method signature="void &lt;init&gt;(org.jfree.data.general.ValueDataset)" class="org.jfree.chart.plot.MeterPlot" />
	<method signature="void setDialOutlinePaint(java.awt.Paint)" class="org.jfree.chart.plot.MeterPlot" />
	<method signature="double getTickSize()" class="org.jfree.chart.plot.MeterPlot" />
	<method signature="org.jfree.data.general.ValueDataset getDataset()" class="org.jfree.chart.plot.MeterPlot" />
	<method signature="java.awt.Font getTickLabelFont()" class="org.jfree.chart.plot.MeterPlot" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.plot.MeterPlot" />
	<method signature="void setRange(org.jfree.data.Range)" class="org.jfree.chart.plot.MeterPlot" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.plot.MeterPlot" />
	<method signature="void clearIntervals()" class="org.jfree.chart.plot.MeterPlot" />
	<method signature="void zoom(double)" class="org.jfree.chart.plot.MeterPlot" />
	<method signature="java.awt.Font getValueFont()" class="org.jfree.chart.plot.MeterPlot" />
	<method signature="void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.plot.MeterPlot" />
	<method signature="void setTickLabelFormat(java.text.NumberFormat)" class="org.jfree.chart.plot.MeterPlot" />
	<method signature="void setNeedlePaint(java.awt.Paint)" class="org.jfree.chart.plot.MeterPlot" />
	<method signature="java.awt.Paint getDialOutlinePaint()" class="org.jfree.chart.plot.MeterPlot" />
	<method signature="java.text.NumberFormat getTickLabelFormat()" class="org.jfree.chart.plot.MeterPlot" />
	<method signature="void setUnits(java.lang.String)" class="org.jfree.chart.plot.MeterPlot" />
	<method signature="void setValuePaint(java.awt.Paint)" class="org.jfree.chart.plot.MeterPlot" />
	<method signature="org.jfree.data.Range getRange()" class="org.jfree.chart.plot.MeterPlot" />
	<method signature="void setTickSize(double)" class="org.jfree.chart.plot.MeterPlot" />
	<method signature="org.jfree.chart.LegendItemCollection getLegendItems()" class="org.jfree.chart.plot.MeterPlot" />
	<method signature="java.lang.String getUnits()" class="org.jfree.chart.plot.MeterPlot" />
	<method signature="void setTickPaint(java.awt.Paint)" class="org.jfree.chart.plot.MeterPlot" />
	<class name="org.apache.commons.lang3.tuple.MutablePair" />
	<method signature="void setLeft(java.lang.Object)" class="org.apache.commons.lang3.tuple.MutablePair" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.tuple.MutablePair" />
	<method signature="void &lt;init&gt;(java.lang.Object,java.lang.Object)" class="org.apache.commons.lang3.tuple.MutablePair" />
	<method signature="java.lang.Object getLeft()" class="org.apache.commons.lang3.tuple.MutablePair" />
	<method signature="void setRight(java.lang.Object)" class="org.apache.commons.lang3.tuple.MutablePair" />
	<method signature="org.apache.commons.lang3.tuple.MutablePair of(java.lang.Object,java.lang.Object)" class="org.apache.commons.lang3.tuple.MutablePair" />
	<method signature="java.lang.Object getRight()" class="org.apache.commons.lang3.tuple.MutablePair" />
	<method signature="java.lang.Object setValue(java.lang.Object)" class="org.apache.commons.lang3.tuple.MutablePair" />
	<class name="org.apache.html.dom.HTMLHtmlElementImpl" />
	<method signature="java.lang.String getVersion()" class="org.apache.html.dom.HTMLHtmlElementImpl" />
	<method signature="void setVersion(java.lang.String)" class="org.apache.html.dom.HTMLHtmlElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLHtmlElementImpl" />
	<class name="com.swabunga.spell.event.SpellCheckEvent" />
	<method signature="void replaceWord(java.lang.String,boolean)" class="com.swabunga.spell.event.SpellCheckEvent" />
	<method signature="java.lang.String getWordContext()" class="com.swabunga.spell.event.SpellCheckEvent" />
	<method signature="int getWordContextPosition()" class="com.swabunga.spell.event.SpellCheckEvent" />
	<method signature="java.lang.String getReplaceWord()" class="com.swabunga.spell.event.SpellCheckEvent" />
	<method signature="short getAction()" class="com.swabunga.spell.event.SpellCheckEvent" />
	<method signature="void ignoreWord(boolean)" class="com.swabunga.spell.event.SpellCheckEvent" />
	<method signature="java.util.List getSuggestions()" class="com.swabunga.spell.event.SpellCheckEvent" />
	<method signature="void cancel()" class="com.swabunga.spell.event.SpellCheckEvent" />
	<method signature="void addToDictionary(java.lang.String)" class="com.swabunga.spell.event.SpellCheckEvent" />
	<method signature="java.lang.String getInvalidWord()" class="com.swabunga.spell.event.SpellCheckEvent" />
	<class name="org.jdom2.Document" />
	<method signature="java.util.List getNamespacesInherited()" class="org.jdom2.Document" />
	<method signature="boolean hasRootElement()" class="org.jdom2.Document" />
	<method signature="org.jdom2.Parent addContent(int,java.util.Collection)" class="org.jdom2.Document" />
	<method signature="org.jdom2.Document addContent(org.jdom2.Content)" class="org.jdom2.Document" />
	<method signature="org.jdom2.Document addContent(int,java.util.Collection)" class="org.jdom2.Document" />
	<method signature="org.jdom2.Document addContent(java.util.Collection)" class="org.jdom2.Document" />
	<method signature="org.jdom2.DocType getDocType()" class="org.jdom2.Document" />
	<method signature="void &lt;init&gt;()" class="org.jdom2.Document" />
	<method signature="org.jdom2.Content getContent(int)" class="org.jdom2.Document" />
	<method signature="java.util.List getContent()" class="org.jdom2.Document" />
	<method signature="org.jdom2.Parent addContent(int,org.jdom2.Content)" class="org.jdom2.Document" />
	<method signature="java.util.List getContent(org.jdom2.filter.Filter)" class="org.jdom2.Document" />
	<method signature="org.jdom2.Document setContent(org.jdom2.Content)" class="org.jdom2.Document" />
	<method signature="org.jdom2.Parent addContent(org.jdom2.Content)" class="org.jdom2.Document" />
	<method signature="org.jdom2.util.IteratorIterable getDescendants()" class="org.jdom2.Document" />
	<method signature="java.util.List cloneContent()" class="org.jdom2.Document" />
	<method signature="org.jdom2.Document clone()" class="org.jdom2.Document" />
	<method signature="org.jdom2.Element detachRootElement()" class="org.jdom2.Document" />
	<method signature="org.jdom2.CloneBase clone()" class="org.jdom2.Document" />
	<method signature="org.jdom2.Document setContent(java.util.Collection)" class="org.jdom2.Document" />
	<method signature="org.jdom2.Document setContent(int,java.util.Collection)" class="org.jdom2.Document" />
	<method signature="java.lang.Object getProperty(java.lang.String)" class="org.jdom2.Document" />
	<method signature="boolean removeContent(org.jdom2.Content)" class="org.jdom2.Document" />
	<method signature="org.jdom2.Document addContent(int,org.jdom2.Content)" class="org.jdom2.Document" />
	<method signature="java.lang.Object clone()" class="org.jdom2.Document" />
	<method signature="org.jdom2.Parent addContent(java.util.Collection)" class="org.jdom2.Document" />
	<method signature="boolean equals(java.lang.Object)" class="org.jdom2.Document" />
	<method signature="void &lt;init&gt;(org.jdom2.Element)" class="org.jdom2.Document" />
	<method signature="org.jdom2.Parent getParent()" class="org.jdom2.Document" />
	<method signature="org.jdom2.Element getRootElement()" class="org.jdom2.Document" />
	<method signature="java.lang.String getBaseURI()" class="org.jdom2.Document" />
	<method signature="org.jdom2.util.IteratorIterable getDescendants(org.jdom2.filter.Filter)" class="org.jdom2.Document" />
	<method signature="void &lt;init&gt;(java.util.List)" class="org.jdom2.Document" />
	<method signature="int hashCode()" class="org.jdom2.Document" />
	<method signature="void &lt;init&gt;(org.jdom2.Element,org.jdom2.DocType)" class="org.jdom2.Document" />
	<method signature="void setBaseURI(java.lang.String)" class="org.jdom2.Document" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="org.jdom2.Document" />
	<method signature="org.jdom2.Document setContent(int,org.jdom2.Content)" class="org.jdom2.Document" />
	<method signature="org.jdom2.Document getDocument()" class="org.jdom2.Document" />
	<method signature="void &lt;init&gt;(org.jdom2.Element,org.jdom2.DocType,java.lang.String)" class="org.jdom2.Document" />
	<method signature="org.jdom2.Content removeContent(int)" class="org.jdom2.Document" />
	<method signature="java.util.List getNamespacesInScope()" class="org.jdom2.Document" />
	<method signature="int getContentSize()" class="org.jdom2.Document" />
	<method signature="java.util.List removeContent(org.jdom2.filter.Filter)" class="org.jdom2.Document" />
	<method signature="java.util.List getNamespacesIntroduced()" class="org.jdom2.Document" />
	<method signature="org.jdom2.Document setRootElement(org.jdom2.Element)" class="org.jdom2.Document" />
	<method signature="org.jdom2.Document setDocType(org.jdom2.DocType)" class="org.jdom2.Document" />
	<method signature="java.util.List removeContent()" class="org.jdom2.Document" />
	<method signature="java.lang.String toString()" class="org.jdom2.Document" />
	<method signature="void canContainContent(org.jdom2.Content,int,boolean)" class="org.jdom2.Document" />
	<method signature="int indexOf(org.jdom2.Content)" class="org.jdom2.Document" />
	<class name="org.jfree.ui.BevelArrowIcon" />
	<method signature="void &lt;init&gt;(int,boolean,boolean)" class="org.jfree.ui.BevelArrowIcon" />
	<method signature="int getIconWidth()" class="org.jfree.ui.BevelArrowIcon" />
	<method signature="void paintIcon(java.awt.Component,java.awt.Graphics,int,int)" class="org.jfree.ui.BevelArrowIcon" />
	<method signature="int getIconHeight()" class="org.jfree.ui.BevelArrowIcon" />
	<method signature="void &lt;init&gt;(java.awt.Color,java.awt.Color,java.awt.Color,int,int)" class="org.jfree.ui.BevelArrowIcon" />
	<class name="org.apache.wml.WMLFieldsetElement" />
	<method signature="java.lang.String getTitle()" class="org.apache.wml.WMLFieldsetElement" />
	<method signature="java.lang.String getXmlLang()" class="org.apache.wml.WMLFieldsetElement" />
	<method signature="void setXmlLang(java.lang.String)" class="org.apache.wml.WMLFieldsetElement" />
	<method signature="void setTitle(java.lang.String)" class="org.apache.wml.WMLFieldsetElement" />
	<class name="com.toedter.calendar.demo.TestDateEvaluator" />
	<method signature="java.awt.Color getSpecialForegroundColor()" class="com.toedter.calendar.demo.TestDateEvaluator" />
	<method signature="java.awt.Color getInvalidBackroundColor()" class="com.toedter.calendar.demo.TestDateEvaluator" />
	<method signature="java.awt.Color getSpecialBackroundColor()" class="com.toedter.calendar.demo.TestDateEvaluator" />
	<method signature="boolean isInvalid(java.util.Date)" class="com.toedter.calendar.demo.TestDateEvaluator" />
	<method signature="void &lt;init&gt;()" class="com.toedter.calendar.demo.TestDateEvaluator" />
	<method signature="java.lang.String getSpecialTooltip()" class="com.toedter.calendar.demo.TestDateEvaluator" />
	<method signature="java.awt.Color getInvalidForegroundColor()" class="com.toedter.calendar.demo.TestDateEvaluator" />
	<method signature="boolean isSpecial(java.util.Date)" class="com.toedter.calendar.demo.TestDateEvaluator" />
	<method signature="java.lang.String getInvalidTooltip()" class="com.toedter.calendar.demo.TestDateEvaluator" />
	<class name="org.jfree.data.category.CategoryRangeInfo" />
	<method signature="org.jfree.data.Range getRangeBounds(java.util.List,boolean)" class="org.jfree.data.category.CategoryRangeInfo" />
	<class name="freemarker.template.TemplateTransformModel" />
	<method signature="java.io.Writer getWriter(java.io.Writer,java.util.Map)" class="freemarker.template.TemplateTransformModel" />
	<class name="org.apache.html.dom.HTMLDivElementImpl" />
	<method signature="void setAlign(java.lang.String)" class="org.apache.html.dom.HTMLDivElementImpl" />
	<method signature="java.lang.String getAlign()" class="org.apache.html.dom.HTMLDivElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLDivElementImpl" />
	<class name="tourma.data.Parameters" />
	<method signature="void setApplyToAnnexIndiv(boolean)" class="tourma.data.Parameters" />
	<method signature="void semTournamentOrga(java.lang.String)" class="tourma.data.Parameters" />
	<method signature="boolean isPortugal()" class="tourma.data.Parameters" />
	<method signature="int getTeamRankingNumber()" class="tourma.data.Parameters" />
	<method signature="void setIndivPairingIndivBalanced(boolean)" class="tourma.data.Parameters" />
	<method signature="int getGapLargeVictory()" class="tourma.data.Parameters" />
	<method signature="long getDateTime()" class="tourma.data.Parameters" />
	<method signature="boolean isEnableClans()" class="tourma.data.Parameters" />
	<method signature="boolean isExceptBestAndWorstIndiv()" class="tourma.data.Parameters" />
	<method signature="boolean isTableBonusPerRound()" class="tourma.data.Parameters" />
	<method signature="void setAvoidClansMatch(boolean)" class="tourma.data.Parameters" />
	<method signature="void setGapLargeVictory(int)" class="tourma.data.Parameters" />
	<method signature="void setUseImage(boolean)" class="tourma.data.Parameters" />
	<method signature="void setTableBonus(boolean)" class="tourma.data.Parameters" />
	<method signature="void setPointsTeamVictory(int)" class="tourma.data.Parameters" />
	<method signature="boolean isWebEdit()" class="tourma.data.Parameters" />
	<method signature="void setGame(int)" class="tourma.data.Parameters" />
	<method signature="java.lang.String getTournamentOrga()" class="tourma.data.Parameters" />
	<method signature="void setPointsIndivLost(int)" class="tourma.data.Parameters" />
	<method signature="boolean isTableBonus()" class="tourma.data.Parameters" />
	<method signature="int getPointsRefused()" class="tourma.data.Parameters" />
	<method signature="boolean isAvoidClansMatch()" class="tourma.data.Parameters" />
	<method signature="void setTeamPairing(tourma.data.ETeamPairing)" class="tourma.data.Parameters" />
	<method signature="void setEnableClans(boolean)" class="tourma.data.Parameters" />
	<method signature="void setUseLargeVictory(boolean)" class="tourma.data.Parameters" />
	<method signature="void setWebServerPort(int)" class="tourma.data.Parameters" />
	<method signature="void setPointsRefused(int)" class="tourma.data.Parameters" />
	<method signature="boolean isUseBestResultTeam()" class="tourma.data.Parameters" />
	<method signature="void setUseBestResultTeam(boolean)" class="tourma.data.Parameters" />
	<method signature="java.lang.String getStringDate(java.text.SimpleDateFormat)" class="tourma.data.Parameters" />
	<method signature="void setPortugal(boolean)" class="tourma.data.Parameters" />
	<method signature="void setTeamTournament(boolean)" class="tourma.data.Parameters" />
	<method signature="int getPointsIndivLost()" class="tourma.data.Parameters" />
	<method signature="void setPointsIndivDraw(int)" class="tourma.data.Parameters" />
	<method signature="void setDate(java.util.Date)" class="tourma.data.Parameters" />
	<method signature="int getIndivRankingNumber()" class="tourma.data.Parameters" />
	<method signature="int getPointsTeamDrawBonus()" class="tourma.data.Parameters" />
	<method signature="void setXMLElement(org.jdom2.Element)" class="tourma.data.Parameters" />
	<method signature="boolean isTeamTournament()" class="tourma.data.Parameters" />
	<method signature="void removeCriteria(int)" class="tourma.data.Parameters" />
	<method signature="void setUseColor(boolean)" class="tourma.data.Parameters" />
	<method signature="boolean isUseLargeVictory()" class="tourma.data.Parameters" />
	<method signature="void setApplyToAnnexTeam(boolean)" class="tourma.data.Parameters" />
	<method signature="java.lang.String getTournamentName()" class="tourma.data.Parameters" />
	<method signature="void setMultiRoster(boolean)" class="tourma.data.Parameters" />
	<method signature="int getRankingTeam5()" class="tourma.data.Parameters" />
	<method signature="int getPointsTeamLost()" class="tourma.data.Parameters" />
	<method signature="int getRankingTeam3()" class="tourma.data.Parameters" />
	<method signature="void setPointsTeamDrawBonus(int)" class="tourma.data.Parameters" />
	<method signature="int getPointsIndivLittleLost()" class="tourma.data.Parameters" />
	<method signature="int getRankingTeam4()" class="tourma.data.Parameters" />
	<method signature="void setSubstitutes(boolean)" class="tourma.data.Parameters" />
	<method signature="int getRankingTeam1()" class="tourma.data.Parameters" />
	<method signature="int getRankingTeam2()" class="tourma.data.Parameters" />
	<method signature="boolean isMultiRoster()" class="tourma.data.Parameters" />
	<method signature="int gemRankingTeam2()" class="tourma.data.Parameters" />
	<method signature="int getPointsIndivDraw()" class="tourma.data.Parameters" />
	<method signature="void setTableBonusCoef(double)" class="tourma.data.Parameters" />
	<method signature="int getClansMembersNumber()" class="tourma.data.Parameters" />
	<method signature="boolean isExceptBestAndWorstTeam()" class="tourma.data.Parameters" />
	<method signature="void setWebEdit(boolean)" class="tourma.data.Parameters" />
	<method signature="void setPointsIndivLittleLost(int)" class="tourma.data.Parameters" />
	<method signature="void setBestResultTeam(int)" class="tourma.data.Parameters" />
	<method signature="void clearCiterias()" class="tourma.data.Parameters" />
	<method signature="int getRankingIndiv2()" class="tourma.data.Parameters" />
	<method signature="int getRankingIndiv3()" class="tourma.data.Parameters" />
	<method signature="void setTeamMatesClansNumber(int)" class="tourma.data.Parameters" />
	<method signature="void setUseLittleLoss(boolean)" class="tourma.data.Parameters" />
	<method signature="void setExceptBestAndWorstIndiv(boolean)" class="tourma.data.Parameters" />
	<method signature="int getRankingIndiv1()" class="tourma.data.Parameters" />
	<method signature="int getWebServerPort()" class="tourma.data.Parameters" />
	<method signature="int getIndexOfCriteria(tourma.data.Criteria)" class="tourma.data.Parameters" />
	<method signature="java.lang.String toString()" class="tourma.data.Parameters" />
	<method signature="void setUseBestResultIndiv(boolean)" class="tourma.data.Parameters" />
	<method signature="void setRankingTeam5(int)" class="tourma.data.Parameters" />
	<method signature="boolean isAvoidClansFirstMatch()" class="tourma.data.Parameters" />
	<method signature="int getPointsTeamDraw()" class="tourma.data.Parameters" />
	<method signature="void setRankingTeam2(int)" class="tourma.data.Parameters" />
	<method signature="boolean isUseImage()" class="tourma.data.Parameters" />
	<method signature="void setRankingTeam1(int)" class="tourma.data.Parameters" />
	<method signature="int getRankingIndiv4()" class="tourma.data.Parameters" />
	<method signature="void setRankingTeam4(int)" class="tourma.data.Parameters" />
	<method signature="int getRankingIndiv5()" class="tourma.data.Parameters" />
	<method signature="void setRankingTeam3(int)" class="tourma.data.Parameters" />
	<method signature="boolean isIndivPairingIndivBalanced()" class="tourma.data.Parameters" />
	<method signature="boolean isUseBestResultIndiv()" class="tourma.data.Parameters" />
	<method signature="void setTeamVictoryOnly(boolean)" class="tourma.data.Parameters" />
	<method signature="boolean isGroupsEnable()" class="tourma.data.Parameters" />
	<method signature="boolean isSubstitutes()" class="tourma.data.Parameters" />
	<method signature="void setTeamMatesNumber(int)" class="tourma.data.Parameters" />
	<method signature="int getTeamRankingType(int)" class="tourma.data.Parameters" />
	<method signature="boolean isUseColor()" class="tourma.data.Parameters" />
	<method signature="boolean isTeamVictoryOnly()" class="tourma.data.Parameters" />
	<method signature="void setPointsIndivVictory(int)" class="tourma.data.Parameters" />
	<method signature="void &lt;init&gt;()" class="tourma.data.Parameters" />
	<method signature="boolean isIndivPairingTeamBalanced()" class="tourma.data.Parameters" />
	<method signature="void setGroupsEnable(boolean)" class="tourma.data.Parameters" />
	<method signature="int getTeamMatesClansNumber()" class="tourma.data.Parameters" />
	<method signature="int getGame()" class="tourma.data.Parameters" />
	<method signature="double getTableBonusCoef()" class="tourma.data.Parameters" />
	<method signature="int getBestResultIndiv()" class="tourma.data.Parameters" />
	<method signature="int getTeamMatesNumber()" class="tourma.data.Parameters" />
	<method signature="java.lang.String getPlace()" class="tourma.data.Parameters" />
	<method signature="boolean isApplyToAnnexTeam()" class="tourma.data.Parameters" />
	<method signature="tourma.data.EIndivPairing getTeamIndivPairing()" class="tourma.data.Parameters" />
	<method signature="void setPointsTeamDraw(int)" class="tourma.data.Parameters" />
	<method signature="void setPointsTeamVictoryBonus(int)" class="tourma.data.Parameters" />
	<method signature="void setBestResultIndiv(int)" class="tourma.data.Parameters" />
	<method signature="int getPointsConcedeed()" class="tourma.data.Parameters" />
	<method signature="tourma.data.Criteria getCriteria(int)" class="tourma.data.Parameters" />
	<method signature="void setAvoidClansFirstMatch(boolean)" class="tourma.data.Parameters" />
	<method signature="void setExceptBestAndWorstTeam(boolean)" class="tourma.data.Parameters" />
	<method signature="boolean isUseLittleLoss()" class="tourma.data.Parameters" />
	<method signature="int getIndivRankingType(int)" class="tourma.data.Parameters" />
	<method signature="void setClansMembersNumber(int)" class="tourma.data.Parameters" />
	<method signature="void setTableBonusPerRound(boolean)" class="tourma.data.Parameters" />
	<method signature="void addCriteria(tourma.data.Criteria)" class="tourma.data.Parameters" />
	<method signature="int getCriteriaCount()" class="tourma.data.Parameters" />
	<method signature="void setTournamentName(java.lang.String)" class="tourma.data.Parameters" />
	<method signature="boolean equals(java.lang.Object)" class="tourma.data.Parameters" />
	<method signature="int getPointsTeamVictory()" class="tourma.data.Parameters" />
	<method signature="void setTeamIndivPairing(tourma.data.EIndivPairing)" class="tourma.data.Parameters" />
	<method signature="void setIndivPairingTeamBalanced(boolean)" class="tourma.data.Parameters" />
	<method signature="int getPointsIndivLargeVictory()" class="tourma.data.Parameters" />
	<method signature="tourma.data.ETeamPairing getTeamPairing()" class="tourma.data.Parameters" />
	<method signature="void setPointsTeamLost(int)" class="tourma.data.Parameters" />
	<method signature="int getPointsTeamVictoryBonus()" class="tourma.data.Parameters" />
	<method signature="void setPlace(java.lang.String)" class="tourma.data.Parameters" />
	<method signature="int getPointsIndivVictory()" class="tourma.data.Parameters" />
	<method signature="int getGapLittleLost()" class="tourma.data.Parameters" />
	<method signature="org.jdom2.Element getXMLElement()" class="tourma.data.Parameters" />
	<method signature="void setGapLittleLost(int)" class="tourma.data.Parameters" />
	<method signature="void setPointsConcedeed(int)" class="tourma.data.Parameters" />
	<method signature="void setPointsIndivLargeVictory(int)" class="tourma.data.Parameters" />
	<method signature="int getBestResultTeam()" class="tourma.data.Parameters" />
	<method signature="void setRankingIndiv5(int)" class="tourma.data.Parameters" />
	<method signature="boolean isApplyToAnnexIndiv()" class="tourma.data.Parameters" />
	<method signature="void setRankingIndiv4(int)" class="tourma.data.Parameters" />
	<method signature="void setRankingIndiv3(int)" class="tourma.data.Parameters" />
	<method signature="void setRankingIndiv2(int)" class="tourma.data.Parameters" />
	<method signature="void setRankingIndiv1(int)" class="tourma.data.Parameters" />
	<class name="com.google.zxing.client.result.URLTOResultParser" />
	<method signature="com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result)" class="com.google.zxing.client.result.URLTOResultParser" />
	<method signature="com.google.zxing.client.result.URIParsedResult parse(com.google.zxing.Result)" class="com.google.zxing.client.result.URLTOResultParser" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.client.result.URLTOResultParser" />
	<class name="javax.xml.xpath.XPathFunction" />
	<method signature="java.lang.Object evaluate(java.util.List)" class="javax.xml.xpath.XPathFunction" />
	<class name="org.jfree.data.statistics.SimpleHistogramBin" />
	<method signature="int compareTo(java.lang.Object)" class="org.jfree.data.statistics.SimpleHistogramBin" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.statistics.SimpleHistogramBin" />
	<method signature="void setItemCount(int)" class="org.jfree.data.statistics.SimpleHistogramBin" />
	<method signature="void &lt;init&gt;(double,double,boolean,boolean)" class="org.jfree.data.statistics.SimpleHistogramBin" />
	<method signature="int getItemCount()" class="org.jfree.data.statistics.SimpleHistogramBin" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.statistics.SimpleHistogramBin" />
	<method signature="double getLowerBound()" class="org.jfree.data.statistics.SimpleHistogramBin" />
	<method signature="double getUpperBound()" class="org.jfree.data.statistics.SimpleHistogramBin" />
	<method signature="boolean accepts(double)" class="org.jfree.data.statistics.SimpleHistogramBin" />
	<method signature="void &lt;init&gt;(double,double)" class="org.jfree.data.statistics.SimpleHistogramBin" />
	<method signature="boolean overlapsWith(org.jfree.data.statistics.SimpleHistogramBin)" class="org.jfree.data.statistics.SimpleHistogramBin" />
	<class name="org.w3c.dom.css.CSSStyleRule" />
	<method signature="java.lang.String getSelectorText()" class="org.w3c.dom.css.CSSStyleRule" />
	<method signature="void setSelectorText(java.lang.String)" class="org.w3c.dom.css.CSSStyleRule" />
	<method signature="org.w3c.dom.css.CSSStyleDeclaration getStyle()" class="org.w3c.dom.css.CSSStyleRule" />
	<class name="org.apache.commons.lang3.exception.ContextedRuntimeException" />
	<method signature="java.lang.Object getFirstContextValue(java.lang.String)" class="org.apache.commons.lang3.exception.ContextedRuntimeException" />
	<method signature="java.lang.String getFormattedExceptionMessage(java.lang.String)" class="org.apache.commons.lang3.exception.ContextedRuntimeException" />
	<method signature="java.util.List getContextValues(java.lang.String)" class="org.apache.commons.lang3.exception.ContextedRuntimeException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Throwable,org.apache.commons.lang3.exception.ExceptionContext)" class="org.apache.commons.lang3.exception.ContextedRuntimeException" />
	<method signature="java.lang.String getRawMessage()" class="org.apache.commons.lang3.exception.ContextedRuntimeException" />
	<method signature="org.apache.commons.lang3.exception.ContextedRuntimeException addContextValue(java.lang.String,java.lang.Object)" class="org.apache.commons.lang3.exception.ContextedRuntimeException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Throwable)" class="org.apache.commons.lang3.exception.ContextedRuntimeException" />
	<method signature="org.apache.commons.lang3.exception.ExceptionContext setContextValue(java.lang.String,java.lang.Object)" class="org.apache.commons.lang3.exception.ContextedRuntimeException" />
	<method signature="java.lang.String getMessage()" class="org.apache.commons.lang3.exception.ContextedRuntimeException" />
	<method signature="org.apache.commons.lang3.exception.ExceptionContext addContextValue(java.lang.String,java.lang.Object)" class="org.apache.commons.lang3.exception.ContextedRuntimeException" />
	<method signature="org.apache.commons.lang3.exception.ContextedRuntimeException setContextValue(java.lang.String,java.lang.Object)" class="org.apache.commons.lang3.exception.ContextedRuntimeException" />
	<method signature="java.util.Set getContextLabels()" class="org.apache.commons.lang3.exception.ContextedRuntimeException" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.exception.ContextedRuntimeException" />
	<method signature="void &lt;init&gt;(java.lang.Throwable)" class="org.apache.commons.lang3.exception.ContextedRuntimeException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.apache.commons.lang3.exception.ContextedRuntimeException" />
	<method signature="java.util.List getContextEntries()" class="org.apache.commons.lang3.exception.ContextedRuntimeException" />
	<class name="com.google.zxing.pdf417.detector.Detector" />
	<method signature="com.google.zxing.common.DetectorResult detect()" class="com.google.zxing.pdf417.detector.Detector" />
	<method signature="void &lt;init&gt;(com.google.zxing.BinaryBitmap)" class="com.google.zxing.pdf417.detector.Detector" />
	<method signature="com.google.zxing.common.DetectorResult detect(java.util.Map)" class="com.google.zxing.pdf417.detector.Detector" />
	<class name="tourma.data.ObjectAnnexRanking" />
	<method signature="int compareTo(java.lang.Object)" class="tourma.data.ObjectAnnexRanking" />
	<method signature="int hashCode()" class="tourma.data.ObjectAnnexRanking" />
	<method signature="boolean equals(java.lang.Object)" class="tourma.data.ObjectAnnexRanking" />
	<method signature="void &lt;init&gt;(java.lang.Comparable,int,int,int,int,int,int)" class="tourma.data.ObjectAnnexRanking" />
	<method signature="int getValue()" class="tourma.data.ObjectAnnexRanking" />
	<method signature="void setValue(int)" class="tourma.data.ObjectAnnexRanking" />
	<method signature="void setXMLElement(org.jdom2.Element)" class="tourma.data.ObjectAnnexRanking" />
	<method signature="org.jdom2.Element getXMLElement()" class="tourma.data.ObjectAnnexRanking" />
	<class name="org.apache.commons.lang3.text.translate.UnicodeUnescaper" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.text.translate.UnicodeUnescaper" />
	<method signature="int translate(java.lang.CharSequence,int,java.io.Writer)" class="org.apache.commons.lang3.text.translate.UnicodeUnescaper" />
	<class name="org.apache.xerces.xni.grammars.Grammar" />
	<method signature="org.apache.xerces.xni.grammars.XMLGrammarDescription getGrammarDescription()" class="org.apache.xerces.xni.grammars.Grammar" />
	<class name="com.google.zxing.client.result.GeoResultParser" />
	<method signature="com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result)" class="com.google.zxing.client.result.GeoResultParser" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.client.result.GeoResultParser" />
	<method signature="com.google.zxing.client.result.GeoParsedResult parse(com.google.zxing.Result)" class="com.google.zxing.client.result.GeoResultParser" />
	<class name="org.apache.wml.dom.WMLStrongElementImpl" />
	<method signature="java.lang.String getXmlLang()" class="org.apache.wml.dom.WMLStrongElementImpl" />
	<method signature="void setXmlLang(java.lang.String)" class="org.apache.wml.dom.WMLStrongElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.wml.dom.WMLDocumentImpl,java.lang.String)" class="org.apache.wml.dom.WMLStrongElementImpl" />
	<method signature="java.lang.String getId()" class="org.apache.wml.dom.WMLStrongElementImpl" />
	<method signature="java.lang.String getClassName()" class="org.apache.wml.dom.WMLStrongElementImpl" />
	<method signature="void setClassName(java.lang.String)" class="org.apache.wml.dom.WMLStrongElementImpl" />
	<method signature="void setId(java.lang.String)" class="org.apache.wml.dom.WMLStrongElementImpl" />
	<class name="fi.iki.elonen.NanoHTTPD$DefaultTempFileManager" />
	<method signature="void clear()" class="fi.iki.elonen.NanoHTTPD$DefaultTempFileManager" />
	<method signature="void &lt;init&gt;()" class="fi.iki.elonen.NanoHTTPD$DefaultTempFileManager" />
	<method signature="fi.iki.elonen.NanoHTTPD$TempFile createTempFile()" class="fi.iki.elonen.NanoHTTPD$DefaultTempFileManager" />
	<class name="org.apache.xerces.xs.ShortList" />
	<method signature="boolean contains(short)" class="org.apache.xerces.xs.ShortList" />
	<method signature="int getLength()" class="org.apache.xerces.xs.ShortList" />
	<method signature="short item(int)" class="org.apache.xerces.xs.ShortList" />
	<class name="org.jfree.chart.plot.GreyPalette" />
	<method signature="void initialize()" class="org.jfree.chart.plot.GreyPalette" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.plot.GreyPalette" />
	<class name="com.hexidec.ekit.component.ImageFileChooser" />
	<method signature="void &lt;init&gt;(java.io.File)" class="com.hexidec.ekit.component.ImageFileChooser" />
	<method signature="void &lt;init&gt;()" class="com.hexidec.ekit.component.ImageFileChooser" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="com.hexidec.ekit.component.ImageFileChooser" />
	<class name="org.w3c.dom.NamedNodeMap" />
	<method signature="org.w3c.dom.Node item(int)" class="org.w3c.dom.NamedNodeMap" />
	<method signature="org.w3c.dom.Node setNamedItem(org.w3c.dom.Node)" class="org.w3c.dom.NamedNodeMap" />
	<method signature="org.w3c.dom.Node removeNamedItemNS(java.lang.String,java.lang.String)" class="org.w3c.dom.NamedNodeMap" />
	<method signature="org.w3c.dom.Node removeNamedItem(java.lang.String)" class="org.w3c.dom.NamedNodeMap" />
	<method signature="org.w3c.dom.Node getNamedItem(java.lang.String)" class="org.w3c.dom.NamedNodeMap" />
	<method signature="int getLength()" class="org.w3c.dom.NamedNodeMap" />
	<method signature="org.w3c.dom.Node getNamedItemNS(java.lang.String,java.lang.String)" class="org.w3c.dom.NamedNodeMap" />
	<method signature="org.w3c.dom.Node setNamedItemNS(org.w3c.dom.Node)" class="org.w3c.dom.NamedNodeMap" />
	<class name="javax.xml.transform.TransformerFactoryConfigurationError" />
	<method signature="java.lang.Exception getException()" class="javax.xml.transform.TransformerFactoryConfigurationError" />
	<method signature="void &lt;init&gt;(java.lang.Exception)" class="javax.xml.transform.TransformerFactoryConfigurationError" />
	<method signature="void &lt;init&gt;(java.lang.Exception,java.lang.String)" class="javax.xml.transform.TransformerFactoryConfigurationError" />
	<method signature="void &lt;init&gt;()" class="javax.xml.transform.TransformerFactoryConfigurationError" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="javax.xml.transform.TransformerFactoryConfigurationError" />
	<method signature="java.lang.String getMessage()" class="javax.xml.transform.TransformerFactoryConfigurationError" />
	<class name="edu.umd.cs.findbugs.annotations.DesireWarning" />
	<method signature="int num()" class="edu.umd.cs.findbugs.annotations.DesireWarning" />
	<method signature="edu.umd.cs.findbugs.annotations.Confidence confidence()" class="edu.umd.cs.findbugs.annotations.DesireWarning" />
	<method signature="int rank()" class="edu.umd.cs.findbugs.annotations.DesireWarning" />
	<method signature="java.lang.String value()" class="edu.umd.cs.findbugs.annotations.DesireWarning" />
	<class name="org.apache.xerces.impl.xs.XSElementDeclHelper" />
	<method signature="org.apache.xerces.impl.xs.XSElementDecl getGlobalElementDecl(org.apache.xerces.xni.QName)" class="org.apache.xerces.impl.xs.XSElementDeclHelper" />
	<class name="org.apache.xerces.dom3.as.DocumentEditAS" />
	<method signature="boolean getContinuousValidityChecking()" class="org.apache.xerces.dom3.as.DocumentEditAS" />
	<method signature="void setContinuousValidityChecking(boolean)" class="org.apache.xerces.dom3.as.DocumentEditAS" />
	<class name="org.apache.xerces.impl.xs.util.LSInputListImpl" />
	<method signature="int size()" class="org.apache.xerces.impl.xs.util.LSInputListImpl" />
	<method signature="java.lang.Object get(int)" class="org.apache.xerces.impl.xs.util.LSInputListImpl" />
	<method signature="void &lt;init&gt;(org.w3c.dom.ls.LSInput[],int)" class="org.apache.xerces.impl.xs.util.LSInputListImpl" />
	<method signature="java.lang.Object[] toArray(java.lang.Object[])" class="org.apache.xerces.impl.xs.util.LSInputListImpl" />
	<method signature="int getLength()" class="org.apache.xerces.impl.xs.util.LSInputListImpl" />
	<method signature="org.w3c.dom.ls.LSInput item(int)" class="org.apache.xerces.impl.xs.util.LSInputListImpl" />
	<method signature="java.lang.Object[] toArray()" class="org.apache.xerces.impl.xs.util.LSInputListImpl" />
	<class name="org.jfree.util.Rotation" />
	<method signature="int hashCode()" class="org.jfree.util.Rotation" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.util.Rotation" />
	<method signature="java.lang.String toString()" class="org.jfree.util.Rotation" />
	<method signature="double getFactor()" class="org.jfree.util.Rotation" />
	<class name="org.jfree.data.xy.XIntervalSeries" />
	<method signature="double getXLowValue(int)" class="org.jfree.data.xy.XIntervalSeries" />
	<method signature="java.lang.Number getX(int)" class="org.jfree.data.xy.XIntervalSeries" />
	<method signature="double getXHighValue(int)" class="org.jfree.data.xy.XIntervalSeries" />
	<method signature="double getYValue(int)" class="org.jfree.data.xy.XIntervalSeries" />
	<method signature="void &lt;init&gt;(java.lang.Comparable)" class="org.jfree.data.xy.XIntervalSeries" />
	<method signature="void &lt;init&gt;(java.lang.Comparable,boolean,boolean)" class="org.jfree.data.xy.XIntervalSeries" />
	<method signature="void add(double,double,double,double)" class="org.jfree.data.xy.XIntervalSeries" />
	<method signature="org.jfree.data.ComparableObjectItem getDataItem(int)" class="org.jfree.data.xy.XIntervalSeries" />
	<class name="freemarker.core.NonBooleanException" />
	<method signature="void &lt;init&gt;(freemarker.core.Environment)" class="freemarker.core.NonBooleanException" />
	<method signature="void &lt;init&gt;(java.lang.String,freemarker.core.Environment)" class="freemarker.core.NonBooleanException" />
	<class name="javax.annotation.Nullable" />
	<class name="org.jdom2.NamespaceAware" />
	<method signature="java.util.List getNamespacesInScope()" class="org.jdom2.NamespaceAware" />
	<method signature="java.util.List getNamespacesInherited()" class="org.jdom2.NamespaceAware" />
	<method signature="java.util.List getNamespacesIntroduced()" class="org.jdom2.NamespaceAware" />
	<class name="org.jfree.chart.renderer.xy.ClusteredXYBarRenderer" />
	<method signature="void &lt;init&gt;(double,boolean)" class="org.jfree.chart.renderer.xy.ClusteredXYBarRenderer" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.renderer.xy.ClusteredXYBarRenderer" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)" class="org.jfree.chart.renderer.xy.ClusteredXYBarRenderer" />
	<method signature="int getPassCount()" class="org.jfree.chart.renderer.xy.ClusteredXYBarRenderer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.xy.ClusteredXYBarRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.xy.ClusteredXYBarRenderer" />
	<method signature="org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset)" class="org.jfree.chart.renderer.xy.ClusteredXYBarRenderer" />
	<class name="org.jfree.data.gantt.GanttCategoryDataset" />
	<method signature="java.lang.Number getPercentComplete(java.lang.Comparable,java.lang.Comparable,int)" class="org.jfree.data.gantt.GanttCategoryDataset" />
	<method signature="int getSubIntervalCount(int,int)" class="org.jfree.data.gantt.GanttCategoryDataset" />
	<method signature="java.lang.Number getStartValue(int,int,int)" class="org.jfree.data.gantt.GanttCategoryDataset" />
	<method signature="java.lang.Number getEndValue(int,int,int)" class="org.jfree.data.gantt.GanttCategoryDataset" />
	<method signature="java.lang.Number getPercentComplete(int,int,int)" class="org.jfree.data.gantt.GanttCategoryDataset" />
	<method signature="int getSubIntervalCount(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.gantt.GanttCategoryDataset" />
	<method signature="java.lang.Number getPercentComplete(int,int)" class="org.jfree.data.gantt.GanttCategoryDataset" />
	<method signature="java.lang.Number getStartValue(java.lang.Comparable,java.lang.Comparable,int)" class="org.jfree.data.gantt.GanttCategoryDataset" />
	<method signature="java.lang.Number getEndValue(java.lang.Comparable,java.lang.Comparable,int)" class="org.jfree.data.gantt.GanttCategoryDataset" />
	<method signature="java.lang.Number getPercentComplete(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.gantt.GanttCategoryDataset" />
	<class name="org.jfree.chart.labels.AbstractCategoryItemLabelGenerator" />
	<method signature="java.lang.String generateRowLabel(org.jfree.data.category.CategoryDataset,int)" class="org.jfree.chart.labels.AbstractCategoryItemLabelGenerator" />
	<method signature="java.lang.String generateColumnLabel(org.jfree.data.category.CategoryDataset,int)" class="org.jfree.chart.labels.AbstractCategoryItemLabelGenerator" />
	<method signature="int hashCode()" class="org.jfree.chart.labels.AbstractCategoryItemLabelGenerator" />
	<method signature="java.lang.String getLabelFormat()" class="org.jfree.chart.labels.AbstractCategoryItemLabelGenerator" />
	<method signature="java.text.DateFormat getDateFormat()" class="org.jfree.chart.labels.AbstractCategoryItemLabelGenerator" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.labels.AbstractCategoryItemLabelGenerator" />
	<method signature="java.text.NumberFormat getNumberFormat()" class="org.jfree.chart.labels.AbstractCategoryItemLabelGenerator" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.labels.AbstractCategoryItemLabelGenerator" />
	<class name="org.apache.wml.WMLSetvarElement" />
	<method signature="void setValue(java.lang.String)" class="org.apache.wml.WMLSetvarElement" />
	<method signature="java.lang.String getName()" class="org.apache.wml.WMLSetvarElement" />
	<method signature="java.lang.String getValue()" class="org.apache.wml.WMLSetvarElement" />
	<method signature="void setName(java.lang.String)" class="org.apache.wml.WMLSetvarElement" />
	<class name="tourma.tableModel.MjtTeams" />
	<method signature="void &lt;init&gt;(java.util.ArrayList)" class="tourma.tableModel.MjtTeams" />
	<method signature="boolean isCellEditable(int,int)" class="tourma.tableModel.MjtTeams" />
	<method signature="java.awt.Component getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)" class="tourma.tableModel.MjtTeams" />
	<method signature="int getRowCount()" class="tourma.tableModel.MjtTeams" />
	<method signature="java.lang.String getColumnName(int)" class="tourma.tableModel.MjtTeams" />
	<method signature="java.lang.Class getColumnClass(int)" class="tourma.tableModel.MjtTeams" />
	<method signature="java.lang.Object getValueAt(int,int)" class="tourma.tableModel.MjtTeams" />
	<method signature="int getColumnCount()" class="tourma.tableModel.MjtTeams" />
	<class name="freemarker.template.utility.DateUtil" />
	<method signature="java.lang.String dateToISO8601String(java.util.Date,boolean,boolean,boolean,int,java.util.TimeZone,freemarker.template.utility.DateUtil$DateToISO8601CalendarFactory)" class="freemarker.template.utility.DateUtil" />
	<method signature="java.util.TimeZone getTimeZone(java.lang.String)" class="freemarker.template.utility.DateUtil" />
	<class name="org.jdom2.located.LocatedDocType" />
	<method signature="void setLine(int)" class="org.jdom2.located.LocatedDocType" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String)" class="org.jdom2.located.LocatedDocType" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="org.jdom2.located.LocatedDocType" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jdom2.located.LocatedDocType" />
	<method signature="int getLine()" class="org.jdom2.located.LocatedDocType" />
	<method signature="int getColumn()" class="org.jdom2.located.LocatedDocType" />
	<method signature="void setColumn(int)" class="org.jdom2.located.LocatedDocType" />
	<class name="org.jfree.chart.util.RelativeDateFormat" />
	<method signature="void setHourFormatter(java.text.NumberFormat)" class="org.jfree.chart.util.RelativeDateFormat" />
	<method signature="void setPositivePrefix(java.lang.String)" class="org.jfree.chart.util.RelativeDateFormat" />
	<method signature="void setBaseMillis(long)" class="org.jfree.chart.util.RelativeDateFormat" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.util.RelativeDateFormat" />
	<method signature="void &lt;init&gt;(java.util.Date)" class="org.jfree.chart.util.RelativeDateFormat" />
	<method signature="void &lt;init&gt;(long)" class="org.jfree.chart.util.RelativeDateFormat" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.util.RelativeDateFormat" />
	<method signature="void setShowZeroDays(boolean)" class="org.jfree.chart.util.RelativeDateFormat" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.util.RelativeDateFormat" />
	<method signature="void main(java.lang.String[])" class="org.jfree.chart.util.RelativeDateFormat" />
	<method signature="void setHourSuffix(java.lang.String)" class="org.jfree.chart.util.RelativeDateFormat" />
	<method signature="java.lang.String getSecondSuffix()" class="org.jfree.chart.util.RelativeDateFormat" />
	<method signature="boolean getShowZeroDays()" class="org.jfree.chart.util.RelativeDateFormat" />
	<method signature="java.lang.String getDaySuffix()" class="org.jfree.chart.util.RelativeDateFormat" />
	<method signature="boolean getShowZeroHours()" class="org.jfree.chart.util.RelativeDateFormat" />
	<method signature="java.lang.String getPositivePrefix()" class="org.jfree.chart.util.RelativeDateFormat" />
	<method signature="java.lang.String getMinuteSuffix()" class="org.jfree.chart.util.RelativeDateFormat" />
	<method signature="int hashCode()" class="org.jfree.chart.util.RelativeDateFormat" />
	<method signature="void setDayFormatter(java.text.NumberFormat)" class="org.jfree.chart.util.RelativeDateFormat" />
	<method signature="void setMinuteFormatter(java.text.NumberFormat)" class="org.jfree.chart.util.RelativeDateFormat" />
	<method signature="java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)" class="org.jfree.chart.util.RelativeDateFormat" />
	<method signature="long getBaseMillis()" class="org.jfree.chart.util.RelativeDateFormat" />
	<method signature="java.util.Date parse(java.lang.String,java.text.ParsePosition)" class="org.jfree.chart.util.RelativeDateFormat" />
	<method signature="void setMinuteSuffix(java.lang.String)" class="org.jfree.chart.util.RelativeDateFormat" />
	<method signature="void setShowZeroHours(boolean)" class="org.jfree.chart.util.RelativeDateFormat" />
	<method signature="void setSecondFormatter(java.text.NumberFormat)" class="org.jfree.chart.util.RelativeDateFormat" />
	<method signature="void setSecondSuffix(java.lang.String)" class="org.jfree.chart.util.RelativeDateFormat" />
	<method signature="java.lang.String getHourSuffix()" class="org.jfree.chart.util.RelativeDateFormat" />
	<method signature="void setDaySuffix(java.lang.String)" class="org.jfree.chart.util.RelativeDateFormat" />
	<class name="org.apache.xerces.impl.dtd.models.CMNode" />
	<method signature="void &lt;init&gt;(int)" class="org.apache.xerces.impl.dtd.models.CMNode" />
	<method signature="void setIsCompactUPAModel(boolean)" class="org.apache.xerces.impl.dtd.models.CMNode" />
	<method signature="int type()" class="org.apache.xerces.impl.dtd.models.CMNode" />
	<method signature="boolean isNullable()" class="org.apache.xerces.impl.dtd.models.CMNode" />
	<method signature="org.apache.xerces.impl.dtd.models.CMStateSet lastPos()" class="org.apache.xerces.impl.dtd.models.CMNode" />
	<method signature="void setMaxStates(int)" class="org.apache.xerces.impl.dtd.models.CMNode" />
	<method signature="boolean isCompactedForUPA()" class="org.apache.xerces.impl.dtd.models.CMNode" />
	<method signature="org.apache.xerces.impl.dtd.models.CMStateSet firstPos()" class="org.apache.xerces.impl.dtd.models.CMNode" />
	<class name="org.apache.wml.dom.WMLDoElementImpl" />
	<method signature="java.lang.String getLabel()" class="org.apache.wml.dom.WMLDoElementImpl" />
	<method signature="java.lang.String getName()" class="org.apache.wml.dom.WMLDoElementImpl" />
	<method signature="java.lang.String getXmlLang()" class="org.apache.wml.dom.WMLDoElementImpl" />
	<method signature="void setOptional(java.lang.String)" class="org.apache.wml.dom.WMLDoElementImpl" />
	<method signature="java.lang.String getId()" class="org.apache.wml.dom.WMLDoElementImpl" />
	<method signature="void setId(java.lang.String)" class="org.apache.wml.dom.WMLDoElementImpl" />
	<method signature="void setLabel(java.lang.String)" class="org.apache.wml.dom.WMLDoElementImpl" />
	<method signature="java.lang.String getOptional()" class="org.apache.wml.dom.WMLDoElementImpl" />
	<method signature="void setXmlLang(java.lang.String)" class="org.apache.wml.dom.WMLDoElementImpl" />
	<method signature="void setName(java.lang.String)" class="org.apache.wml.dom.WMLDoElementImpl" />
	<method signature="java.lang.String getType()" class="org.apache.wml.dom.WMLDoElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.wml.dom.WMLDocumentImpl,java.lang.String)" class="org.apache.wml.dom.WMLDoElementImpl" />
	<method signature="java.lang.String getClassName()" class="org.apache.wml.dom.WMLDoElementImpl" />
	<method signature="void setType(java.lang.String)" class="org.apache.wml.dom.WMLDoElementImpl" />
	<method signature="void setClassName(java.lang.String)" class="org.apache.wml.dom.WMLDoElementImpl" />
	<class name="org.jdom2.output.support.AbstractOutputProcessor" />
	<method signature="void &lt;init&gt;()" class="org.jdom2.output.support.AbstractOutputProcessor" />
	<class name="freemarker.ext.beans.BooleanModel" />
	<method signature="void &lt;init&gt;(java.lang.Boolean,freemarker.ext.beans.BeansWrapper)" class="freemarker.ext.beans.BooleanModel" />
	<method signature="boolean getAsBoolean()" class="freemarker.ext.beans.BooleanModel" />
	<class name="org.jdom2.Text" />
	<method signature="java.lang.String getText()" class="org.jdom2.Text" />
	<method signature="void append(java.lang.String)" class="org.jdom2.Text" />
	<method signature="org.jdom2.Text setText(java.lang.String)" class="org.jdom2.Text" />
	<method signature="java.lang.String normalizeString(java.lang.String)" class="org.jdom2.Text" />
	<method signature="org.jdom2.Element getParent()" class="org.jdom2.Text" />
	<method signature="org.jdom2.Content detach()" class="org.jdom2.Text" />
	<method signature="java.lang.String getTextTrim()" class="org.jdom2.Text" />
	<method signature="org.jdom2.Content clone()" class="org.jdom2.Text" />
	<method signature="org.jdom2.Text clone()" class="org.jdom2.Text" />
	<method signature="java.lang.Object clone()" class="org.jdom2.Text" />
	<method signature="void append(org.jdom2.Text)" class="org.jdom2.Text" />
	<method signature="org.jdom2.Text detach()" class="org.jdom2.Text" />
	<method signature="java.lang.String getValue()" class="org.jdom2.Text" />
	<method signature="java.lang.String getTextNormalize()" class="org.jdom2.Text" />
	<method signature="java.lang.String toString()" class="org.jdom2.Text" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jdom2.Text" />
	<method signature="org.jdom2.Parent getParent()" class="org.jdom2.Text" />
	<method signature="org.jdom2.CloneBase clone()" class="org.jdom2.Text" />
	<class name="com.google.zxing.common.PerspectiveTransform" />
	<method signature="void transformPoints(float[])" class="com.google.zxing.common.PerspectiveTransform" />
	<method signature="com.google.zxing.common.PerspectiveTransform quadrilateralToQuadrilateral(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float)" class="com.google.zxing.common.PerspectiveTransform" />
	<method signature="void transformPoints(float[],float[])" class="com.google.zxing.common.PerspectiveTransform" />
	<method signature="com.google.zxing.common.PerspectiveTransform quadrilateralToSquare(float,float,float,float,float,float,float,float)" class="com.google.zxing.common.PerspectiveTransform" />
	<method signature="com.google.zxing.common.PerspectiveTransform squareToQuadrilateral(float,float,float,float,float,float,float,float)" class="com.google.zxing.common.PerspectiveTransform" />
	<class name="org.jfree.data.xy.VectorDataItem" />
	<method signature="double getVectorX()" class="org.jfree.data.xy.VectorDataItem" />
	<method signature="double getYValue()" class="org.jfree.data.xy.VectorDataItem" />
	<method signature="org.jfree.data.xy.Vector getVector()" class="org.jfree.data.xy.VectorDataItem" />
	<method signature="void &lt;init&gt;(double,double,double,double)" class="org.jfree.data.xy.VectorDataItem" />
	<method signature="double getXValue()" class="org.jfree.data.xy.VectorDataItem" />
	<method signature="double getVectorY()" class="org.jfree.data.xy.VectorDataItem" />
	<class name="org.apache.xerces.dom.NodeImpl" />
	<method signature="org.w3c.dom.Node appendChild(org.w3c.dom.Node)" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="org.w3c.dom.Node getPreviousSibling()" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="boolean isDefaultNamespace(java.lang.String)" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="org.w3c.dom.Node getLastChild()" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="org.w3c.dom.Node item(int)" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="org.w3c.dom.Node insertBefore(org.w3c.dom.Node,org.w3c.dom.Node)" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="boolean isEqualNode(org.w3c.dom.Node)" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="void needsSyncChildren(boolean)" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="java.lang.Object setUserData(java.lang.String,java.lang.Object,org.w3c.dom.UserDataHandler)" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="void setUserData(java.lang.Object)" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="short getNodeType()" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="java.lang.String getPrefix()" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="org.w3c.dom.Node getNextSibling()" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="void setNodeValue(java.lang.String)" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="java.lang.Object getUserData(java.lang.String)" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="org.w3c.dom.Node removeChild(org.w3c.dom.Node)" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="java.lang.String getTextContent()" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="void normalize()" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="java.lang.String lookupNamespaceURI(java.lang.String)" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="short compareDocumentPosition(org.w3c.dom.Node)" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="java.lang.String getNamespaceURI()" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="org.w3c.dom.Node replaceChild(org.w3c.dom.Node,org.w3c.dom.Node)" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="boolean isSameNode(org.w3c.dom.Node)" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="void setTextContent(java.lang.String)" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="boolean isSupported(java.lang.String,java.lang.String)" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="org.w3c.dom.NamedNodeMap getAttributes()" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="org.w3c.dom.NodeList getChildNodes()" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="org.w3c.dom.Node cloneNode(boolean)" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="boolean getReadOnly()" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="org.w3c.dom.Node getParentNode()" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="void setReadOnly(boolean,boolean)" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="int getLength()" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="void addEventListener(java.lang.String,org.w3c.dom.events.EventListener,boolean)" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="java.lang.Object getUserData()" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="short compareTreePosition(org.w3c.dom.Node)" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="void removeEventListener(java.lang.String,org.w3c.dom.events.EventListener,boolean)" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="boolean dispatchEvent(org.w3c.dom.events.Event)" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="java.lang.String getBaseURI()" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="void setPrefix(java.lang.String)" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="java.lang.String getNodeName()" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="boolean hasAttributes()" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="java.lang.String lookupPrefix(java.lang.String)" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="java.lang.String getNodeValue()" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="java.lang.String getLocalName()" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="java.lang.String toString()" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="org.w3c.dom.Node getFirstChild()" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="java.lang.Object getFeature(java.lang.String,java.lang.String)" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="org.w3c.dom.Document getOwnerDocument()" class="org.apache.xerces.dom.NodeImpl" />
	<method signature="boolean hasChildNodes()" class="org.apache.xerces.dom.NodeImpl" />
	<class name="org.jfree.data.KeyedValues" />
	<method signature="java.util.List getKeys()" class="org.jfree.data.KeyedValues" />
	<method signature="int getIndex(java.lang.Comparable)" class="org.jfree.data.KeyedValues" />
	<method signature="java.lang.Number getValue(java.lang.Comparable)" class="org.jfree.data.KeyedValues" />
	<method signature="java.lang.Comparable getKey(int)" class="org.jfree.data.KeyedValues" />
	<class name="org.jfree.chart.title.DateTitle" />
	<method signature="void &lt;init&gt;(int)" class="org.jfree.chart.title.DateTitle" />
	<method signature="void &lt;init&gt;(int,java.util.Locale,java.awt.Font,java.awt.Paint,org.jfree.ui.RectangleEdge,org.jfree.ui.HorizontalAlignment,org.jfree.ui.VerticalAlignment,org.jfree.ui.RectangleInsets)" class="org.jfree.chart.title.DateTitle" />
	<method signature="void setDateFormat(int,java.util.Locale)" class="org.jfree.chart.title.DateTitle" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.title.DateTitle" />
	<method signature="void &lt;init&gt;(int,java.util.Locale,java.awt.Font,java.awt.Paint)" class="org.jfree.chart.title.DateTitle" />
	<class name="org.w3c.dom.css.CSSFontFaceRule" />
	<method signature="org.w3c.dom.css.CSSStyleDeclaration getStyle()" class="org.w3c.dom.css.CSSFontFaceRule" />
	<class name="org.apache.xerces.dom3.as.NodeEditAS" />
	<method signature="boolean canReplaceChild(org.w3c.dom.Node,org.w3c.dom.Node)" class="org.apache.xerces.dom3.as.NodeEditAS" />
	<method signature="boolean canRemoveChild(org.w3c.dom.Node)" class="org.apache.xerces.dom3.as.NodeEditAS" />
	<method signature="boolean canInsertBefore(org.w3c.dom.Node,org.w3c.dom.Node)" class="org.apache.xerces.dom3.as.NodeEditAS" />
	<method signature="boolean canAppendChild(org.w3c.dom.Node)" class="org.apache.xerces.dom3.as.NodeEditAS" />
	<method signature="boolean isNodeValid(boolean,short)" class="org.apache.xerces.dom3.as.NodeEditAS" />
	<class name="org.jfree.ui.RefineryUtilities" />
	<method signature="java.awt.Point getCenterPoint()" class="org.jfree.ui.RefineryUtilities" />
	<method signature="javax.swing.JPanel createTablePanel(javax.swing.table.TableModel)" class="org.jfree.ui.RefineryUtilities" />
	<method signature="void positionFrameRandomly(java.awt.Window)" class="org.jfree.ui.RefineryUtilities" />
	<method signature="javax.swing.JButton createJButton(java.lang.String,java.awt.Font)" class="org.jfree.ui.RefineryUtilities" />
	<method signature="void centerDialogInParent(java.awt.Dialog)" class="org.jfree.ui.RefineryUtilities" />
	<method signature="void centerFrameOnScreen(java.awt.Window)" class="org.jfree.ui.RefineryUtilities" />
	<method signature="void positionDialogRelativeToParent(java.awt.Dialog,double,double)" class="org.jfree.ui.RefineryUtilities" />
	<method signature="javax.swing.JLabel createJLabel(java.lang.String,java.awt.Font)" class="org.jfree.ui.RefineryUtilities" />
	<method signature="javax.swing.JLabel createJLabel(java.lang.String,java.awt.Font,java.awt.Color)" class="org.jfree.ui.RefineryUtilities" />
	<method signature="java.awt.Rectangle getMaximumWindowBounds()" class="org.jfree.ui.RefineryUtilities" />
	<method signature="void positionFrameOnScreen(java.awt.Window,double,double)" class="org.jfree.ui.RefineryUtilities" />
	<class name="org.jfree.chart.plot.DrawingSupplier" />
	<method signature="java.awt.Paint getNextOutlinePaint()" class="org.jfree.chart.plot.DrawingSupplier" />
	<method signature="java.awt.Stroke getNextStroke()" class="org.jfree.chart.plot.DrawingSupplier" />
	<method signature="java.awt.Paint getNextFillPaint()" class="org.jfree.chart.plot.DrawingSupplier" />
	<method signature="java.awt.Stroke getNextOutlineStroke()" class="org.jfree.chart.plot.DrawingSupplier" />
	<method signature="java.awt.Paint getNextPaint()" class="org.jfree.chart.plot.DrawingSupplier" />
	<method signature="java.awt.Shape getNextShape()" class="org.jfree.chart.plot.DrawingSupplier" />
	<class name="org.apache.xerces.xs.datatypes.ByteList" />
	<method signature="byte item(int)" class="org.apache.xerces.xs.datatypes.ByteList" />
	<method signature="byte[] toByteArray()" class="org.apache.xerces.xs.datatypes.ByteList" />
	<method signature="int getLength()" class="org.apache.xerces.xs.datatypes.ByteList" />
	<method signature="boolean contains(byte)" class="org.apache.xerces.xs.datatypes.ByteList" />
	<class name="org.apache.xerces.xs.XSNamespaceItem" />
	<method signature="org.apache.xerces.xs.XSNotationDeclaration getNotationDeclaration(java.lang.String)" class="org.apache.xerces.xs.XSNamespaceItem" />
	<method signature="org.apache.xerces.xs.StringList getDocumentLocations()" class="org.apache.xerces.xs.XSNamespaceItem" />
	<method signature="org.apache.xerces.xs.XSElementDeclaration getElementDeclaration(java.lang.String)" class="org.apache.xerces.xs.XSNamespaceItem" />
	<method signature="org.apache.xerces.xs.XSIDCDefinition getIDCDefinition(java.lang.String)" class="org.apache.xerces.xs.XSNamespaceItem" />
	<method signature="java.lang.String getSchemaNamespace()" class="org.apache.xerces.xs.XSNamespaceItem" />
	<method signature="org.apache.xerces.xs.XSObjectList getAnnotations()" class="org.apache.xerces.xs.XSNamespaceItem" />
	<method signature="org.apache.xerces.xs.XSTypeDefinition getTypeDefinition(java.lang.String)" class="org.apache.xerces.xs.XSNamespaceItem" />
	<method signature="org.apache.xerces.xs.XSModelGroupDefinition getModelGroupDefinition(java.lang.String)" class="org.apache.xerces.xs.XSNamespaceItem" />
	<method signature="org.apache.xerces.xs.XSNamedMap getComponents(short)" class="org.apache.xerces.xs.XSNamespaceItem" />
	<method signature="org.apache.xerces.xs.XSAttributeDeclaration getAttributeDeclaration(java.lang.String)" class="org.apache.xerces.xs.XSNamespaceItem" />
	<method signature="org.apache.xerces.xs.XSAttributeGroupDefinition getAttributeGroup(java.lang.String)" class="org.apache.xerces.xs.XSNamespaceItem" />
	<class name="com.toedter.calendar.JCalendarBeanInfo" />
	<method signature="void &lt;init&gt;()" class="com.toedter.calendar.JCalendarBeanInfo" />
	<class name="com.keypoint.PngEncoder" />
	<method signature="int getFilter()" class="com.keypoint.PngEncoder" />
	<method signature="boolean getEncodeAlpha()" class="com.keypoint.PngEncoder" />
	<method signature="void setXDpi(int)" class="com.keypoint.PngEncoder" />
	<method signature="int getXDpi()" class="com.keypoint.PngEncoder" />
	<method signature="void &lt;init&gt;(java.awt.Image,boolean)" class="com.keypoint.PngEncoder" />
	<method signature="void &lt;init&gt;()" class="com.keypoint.PngEncoder" />
	<method signature="void &lt;init&gt;(java.awt.Image,boolean,int)" class="com.keypoint.PngEncoder" />
	<method signature="byte[] pngEncode()" class="com.keypoint.PngEncoder" />
	<method signature="java.awt.Image getImage()" class="com.keypoint.PngEncoder" />
	<method signature="byte[] pngEncode(boolean)" class="com.keypoint.PngEncoder" />
	<method signature="void &lt;init&gt;(java.awt.Image)" class="com.keypoint.PngEncoder" />
	<method signature="void &lt;init&gt;(java.awt.Image,boolean,int,int)" class="com.keypoint.PngEncoder" />
	<method signature="void setCompressionLevel(int)" class="com.keypoint.PngEncoder" />
	<method signature="int getYDpi()" class="com.keypoint.PngEncoder" />
	<method signature="void setYDpi(int)" class="com.keypoint.PngEncoder" />
	<method signature="void setFilter(int)" class="com.keypoint.PngEncoder" />
	<method signature="void setImage(java.awt.Image)" class="com.keypoint.PngEncoder" />
	<method signature="void setDpi(int,int)" class="com.keypoint.PngEncoder" />
	<method signature="int getCompressionLevel()" class="com.keypoint.PngEncoder" />
	<method signature="void setEncodeAlpha(boolean)" class="com.keypoint.PngEncoder" />
	<class name="org.jdom2.input.JDOMParseException" />
	<method signature="java.lang.String getSystemId()" class="org.jdom2.input.JDOMParseException" />
	<method signature="org.jdom2.Document getPartialDocument()" class="org.jdom2.input.JDOMParseException" />
	<method signature="int getLineNumber()" class="org.jdom2.input.JDOMParseException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Throwable)" class="org.jdom2.input.JDOMParseException" />
	<method signature="java.lang.String getPublicId()" class="org.jdom2.input.JDOMParseException" />
	<method signature="int getColumnNumber()" class="org.jdom2.input.JDOMParseException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Throwable,org.jdom2.Document)" class="org.jdom2.input.JDOMParseException" />
	<class name="org.jfree.chart.annotations.TextAnnotation" />
	<method signature="int hashCode()" class="org.jfree.chart.annotations.TextAnnotation" />
	<method signature="void setRotationAnchor(org.jfree.ui.TextAnchor)" class="org.jfree.chart.annotations.TextAnnotation" />
	<method signature="java.lang.String getText()" class="org.jfree.chart.annotations.TextAnnotation" />
	<method signature="org.jfree.ui.TextAnchor getTextAnchor()" class="org.jfree.chart.annotations.TextAnnotation" />
	<method signature="void setText(java.lang.String)" class="org.jfree.chart.annotations.TextAnnotation" />
	<method signature="java.awt.Paint getPaint()" class="org.jfree.chart.annotations.TextAnnotation" />
	<method signature="java.awt.Font getFont()" class="org.jfree.chart.annotations.TextAnnotation" />
	<method signature="double getRotationAngle()" class="org.jfree.chart.annotations.TextAnnotation" />
	<method signature="void setPaint(java.awt.Paint)" class="org.jfree.chart.annotations.TextAnnotation" />
	<method signature="org.jfree.ui.TextAnchor getRotationAnchor()" class="org.jfree.chart.annotations.TextAnnotation" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.annotations.TextAnnotation" />
	<method signature="void setRotationAngle(double)" class="org.jfree.chart.annotations.TextAnnotation" />
	<method signature="void setFont(java.awt.Font)" class="org.jfree.chart.annotations.TextAnnotation" />
	<method signature="void setTextAnchor(org.jfree.ui.TextAnchor)" class="org.jfree.chart.annotations.TextAnnotation" />
	<class name="javax.xml.stream.events.DTD" />
	<method signature="java.util.List getEntities()" class="javax.xml.stream.events.DTD" />
	<method signature="java.util.List getNotations()" class="javax.xml.stream.events.DTD" />
	<method signature="java.lang.String getDocumentTypeDeclaration()" class="javax.xml.stream.events.DTD" />
	<method signature="java.lang.Object getProcessedDTD()" class="javax.xml.stream.events.DTD" />
	<class name="org.jfree.io.SerialUtilities" />
	<method signature="void writeComposite(java.awt.Composite,java.io.ObjectOutputStream)" class="org.jfree.io.SerialUtilities" />
	<method signature="boolean isSerializable(java.lang.Class)" class="org.jfree.io.SerialUtilities" />
	<method signature="java.awt.geom.Point2D readPoint2D(java.io.ObjectInputStream)" class="org.jfree.io.SerialUtilities" />
	<method signature="void writePaint(java.awt.Paint,java.io.ObjectOutputStream)" class="org.jfree.io.SerialUtilities" />
	<method signature="java.text.AttributedString readAttributedString(java.io.ObjectInputStream)" class="org.jfree.io.SerialUtilities" />
	<method signature="void writePoint2D(java.awt.geom.Point2D,java.io.ObjectOutputStream)" class="org.jfree.io.SerialUtilities" />
	<method signature="java.awt.Shape readShape(java.io.ObjectInputStream)" class="org.jfree.io.SerialUtilities" />
	<method signature="void writeAttributedString(java.text.AttributedString,java.io.ObjectOutputStream)" class="org.jfree.io.SerialUtilities" />
	<method signature="java.awt.Paint readPaint(java.io.ObjectInputStream)" class="org.jfree.io.SerialUtilities" />
	<method signature="void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)" class="org.jfree.io.SerialUtilities" />
	<method signature="java.awt.Composite readComposite(java.io.ObjectInputStream)" class="org.jfree.io.SerialUtilities" />
	<method signature="void writeShape(java.awt.Shape,java.io.ObjectOutputStream)" class="org.jfree.io.SerialUtilities" />
	<method signature="java.awt.Stroke readStroke(java.io.ObjectInputStream)" class="org.jfree.io.SerialUtilities" />
	<class name="org.apache.xerces.impl.xs.XSMessageFormatter" />
	<method signature="java.lang.String formatMessage(java.util.Locale,java.lang.String,java.lang.Object[])" class="org.apache.xerces.impl.xs.XSMessageFormatter" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xs.XSMessageFormatter" />
	<class name="org.w3c.dom.html.HTMLOptionElement" />
	<method signature="java.lang.String getLabel()" class="org.w3c.dom.html.HTMLOptionElement" />
	<method signature="void setValue(java.lang.String)" class="org.w3c.dom.html.HTMLOptionElement" />
	<method signature="java.lang.String getText()" class="org.w3c.dom.html.HTMLOptionElement" />
	<method signature="void setIndex(int)" class="org.w3c.dom.html.HTMLOptionElement" />
	<method signature="boolean getSelected()" class="org.w3c.dom.html.HTMLOptionElement" />
	<method signature="boolean getDisabled()" class="org.w3c.dom.html.HTMLOptionElement" />
	<method signature="void setLabel(java.lang.String)" class="org.w3c.dom.html.HTMLOptionElement" />
	<method signature="int getIndex()" class="org.w3c.dom.html.HTMLOptionElement" />
	<method signature="void setDisabled(boolean)" class="org.w3c.dom.html.HTMLOptionElement" />
	<method signature="java.lang.String getValue()" class="org.w3c.dom.html.HTMLOptionElement" />
	<method signature="boolean getDefaultSelected()" class="org.w3c.dom.html.HTMLOptionElement" />
	<method signature="void setDefaultSelected(boolean)" class="org.w3c.dom.html.HTMLOptionElement" />
	<method signature="org.w3c.dom.html.HTMLFormElement getForm()" class="org.w3c.dom.html.HTMLOptionElement" />
	<class name="freemarker.debug.DebugModel" />
	<method signature="int size()" class="freemarker.debug.DebugModel" />
	<method signature="freemarker.debug.DebugModel get(int)" class="freemarker.debug.DebugModel" />
	<method signature="freemarker.debug.DebugModel[] get(int,int)" class="freemarker.debug.DebugModel" />
	<method signature="java.lang.String getAsString()" class="freemarker.debug.DebugModel" />
	<method signature="boolean getAsBoolean()" class="freemarker.debug.DebugModel" />
	<method signature="java.lang.String[] keys()" class="freemarker.debug.DebugModel" />
	<method signature="freemarker.debug.DebugModel get(java.lang.String)" class="freemarker.debug.DebugModel" />
	<method signature="int getModelTypes()" class="freemarker.debug.DebugModel" />
	<method signature="java.lang.Number getAsNumber()" class="freemarker.debug.DebugModel" />
	<method signature="freemarker.debug.DebugModel[] get(java.lang.String[])" class="freemarker.debug.DebugModel" />
	<method signature="java.util.Date getAsDate()" class="freemarker.debug.DebugModel" />
	<method signature="freemarker.debug.DebugModel[] getCollection()" class="freemarker.debug.DebugModel" />
	<method signature="int getDateType()" class="freemarker.debug.DebugModel" />
	<class name="org.jfree.data.time.Month" />
	<method signature="int getYearValue()" class="org.jfree.data.time.Month" />
	<method signature="org.jfree.data.time.RegularTimePeriod previous()" class="org.jfree.data.time.Month" />
	<method signature="long getLastMillisecond(java.util.Calendar)" class="org.jfree.data.time.Month" />
	<method signature="void &lt;init&gt;(int,int)" class="org.jfree.data.time.Month" />
	<method signature="void &lt;init&gt;(int,org.jfree.data.time.Year)" class="org.jfree.data.time.Month" />
	<method signature="void &lt;init&gt;(java.util.Date)" class="org.jfree.data.time.Month" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.time.Month" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.time.Month" />
	<method signature="long getFirstMillisecond()" class="org.jfree.data.time.Month" />
	<method signature="long getSerialIndex()" class="org.jfree.data.time.Month" />
	<method signature="int compareTo(java.lang.Object)" class="org.jfree.data.time.Month" />
	<method signature="int hashCode()" class="org.jfree.data.time.Month" />
	<method signature="void &lt;init&gt;(java.util.Date,java.util.TimeZone)" class="org.jfree.data.time.Month" />
	<method signature="long getLastMillisecond()" class="org.jfree.data.time.Month" />
	<method signature="org.jfree.data.time.RegularTimePeriod next()" class="org.jfree.data.time.Month" />
	<method signature="int getMonth()" class="org.jfree.data.time.Month" />
	<method signature="org.jfree.data.time.Year getYear()" class="org.jfree.data.time.Month" />
	<method signature="void peg(java.util.Calendar)" class="org.jfree.data.time.Month" />
	<method signature="void &lt;init&gt;(java.util.Date,java.util.TimeZone,java.util.Locale)" class="org.jfree.data.time.Month" />
	<method signature="java.lang.String toString()" class="org.jfree.data.time.Month" />
	<method signature="org.jfree.data.time.Month parseMonth(java.lang.String)" class="org.jfree.data.time.Month" />
	<method signature="long getFirstMillisecond(java.util.Calendar)" class="org.jfree.data.time.Month" />
	<class name="fi.iki.elonen.NanoHTTPD$Response$IStatus" />
	<method signature="int getRequestStatus()" class="fi.iki.elonen.NanoHTTPD$Response$IStatus" />
	<method signature="java.lang.String getDescription()" class="fi.iki.elonen.NanoHTTPD$Response$IStatus" />
	<class name="org.jfree.ui.RectangleInsets" />
	<method signature="java.awt.geom.Rectangle2D createOutsetRectangle(java.awt.geom.Rectangle2D)" class="org.jfree.ui.RectangleInsets" />
	<method signature="double getRight()" class="org.jfree.ui.RectangleInsets" />
	<method signature="java.awt.geom.Rectangle2D createInsetRectangle(java.awt.geom.Rectangle2D,boolean,boolean)" class="org.jfree.ui.RectangleInsets" />
	<method signature="void trim(java.awt.geom.Rectangle2D)" class="org.jfree.ui.RectangleInsets" />
	<method signature="double trimHeight(double)" class="org.jfree.ui.RectangleInsets" />
	<method signature="double getLeft()" class="org.jfree.ui.RectangleInsets" />
	<method signature="double calculateBottomInset(double)" class="org.jfree.ui.RectangleInsets" />
	<method signature="void &lt;init&gt;(org.jfree.util.UnitType,double,double,double,double)" class="org.jfree.ui.RectangleInsets" />
	<method signature="double calculateRightInset(double)" class="org.jfree.ui.RectangleInsets" />
	<method signature="org.jfree.util.UnitType getUnitType()" class="org.jfree.ui.RectangleInsets" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.ui.RectangleInsets" />
	<method signature="double trimWidth(double)" class="org.jfree.ui.RectangleInsets" />
	<method signature="void &lt;init&gt;()" class="org.jfree.ui.RectangleInsets" />
	<method signature="java.awt.geom.Rectangle2D createInsetRectangle(java.awt.geom.Rectangle2D)" class="org.jfree.ui.RectangleInsets" />
	<method signature="double extendHeight(double)" class="org.jfree.ui.RectangleInsets" />
	<method signature="java.awt.geom.Rectangle2D createOutsetRectangle(java.awt.geom.Rectangle2D,boolean,boolean)" class="org.jfree.ui.RectangleInsets" />
	<method signature="double calculateTopOutset(double)" class="org.jfree.ui.RectangleInsets" />
	<method signature="double calculateLeftOutset(double)" class="org.jfree.ui.RectangleInsets" />
	<method signature="int hashCode()" class="org.jfree.ui.RectangleInsets" />
	<method signature="double calculateBottomOutset(double)" class="org.jfree.ui.RectangleInsets" />
	<method signature="double extendWidth(double)" class="org.jfree.ui.RectangleInsets" />
	<method signature="void &lt;init&gt;(double,double,double,double)" class="org.jfree.ui.RectangleInsets" />
	<method signature="double getTop()" class="org.jfree.ui.RectangleInsets" />
	<method signature="java.awt.geom.Rectangle2D createAdjustedRectangle(java.awt.geom.Rectangle2D,org.jfree.ui.LengthAdjustmentType,org.jfree.ui.LengthAdjustmentType)" class="org.jfree.ui.RectangleInsets" />
	<method signature="double calculateRightOutset(double)" class="org.jfree.ui.RectangleInsets" />
	<method signature="double getBottom()" class="org.jfree.ui.RectangleInsets" />
	<method signature="double calculateLeftInset(double)" class="org.jfree.ui.RectangleInsets" />
	<method signature="double calculateTopInset(double)" class="org.jfree.ui.RectangleInsets" />
	<method signature="java.lang.String toString()" class="org.jfree.ui.RectangleInsets" />
	<class name="org.apache.commons.lang3.concurrent.ConcurrentUtils" />
	<method signature="void handleCause(java.util.concurrent.ExecutionException)" class="org.apache.commons.lang3.concurrent.ConcurrentUtils" />
	<method signature="java.util.concurrent.Future constantFuture(java.lang.Object)" class="org.apache.commons.lang3.concurrent.ConcurrentUtils" />
	<method signature="java.lang.Object initializeUnchecked(org.apache.commons.lang3.concurrent.ConcurrentInitializer)" class="org.apache.commons.lang3.concurrent.ConcurrentUtils" />
	<method signature="java.lang.Object createIfAbsentUnchecked(java.util.concurrent.ConcurrentMap,java.lang.Object,org.apache.commons.lang3.concurrent.ConcurrentInitializer)" class="org.apache.commons.lang3.concurrent.ConcurrentUtils" />
	<method signature="org.apache.commons.lang3.concurrent.ConcurrentRuntimeException extractCauseUnchecked(java.util.concurrent.ExecutionException)" class="org.apache.commons.lang3.concurrent.ConcurrentUtils" />
	<method signature="java.lang.Object initialize(org.apache.commons.lang3.concurrent.ConcurrentInitializer)" class="org.apache.commons.lang3.concurrent.ConcurrentUtils" />
	<method signature="java.lang.Object createIfAbsent(java.util.concurrent.ConcurrentMap,java.lang.Object,org.apache.commons.lang3.concurrent.ConcurrentInitializer)" class="org.apache.commons.lang3.concurrent.ConcurrentUtils" />
	<method signature="java.lang.Object putIfAbsent(java.util.concurrent.ConcurrentMap,java.lang.Object,java.lang.Object)" class="org.apache.commons.lang3.concurrent.ConcurrentUtils" />
	<method signature="org.apache.commons.lang3.concurrent.ConcurrentException extractCause(java.util.concurrent.ExecutionException)" class="org.apache.commons.lang3.concurrent.ConcurrentUtils" />
	<method signature="void handleCauseUnchecked(java.util.concurrent.ExecutionException)" class="org.apache.commons.lang3.concurrent.ConcurrentUtils" />
	<class name="org.apache.xerces.parsers.XML11DTDConfiguration" />
	<method signature="void setLocale(java.util.Locale)" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
	<method signature="org.apache.xerces.xni.XMLDTDContentModelHandler getDTDContentModelHandler()" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
	<method signature="void parse(org.apache.xerces.xni.parser.XMLInputSource)" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
	<method signature="boolean getFeature(java.lang.String)" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
	<method signature="java.util.Locale getLocale()" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
	<method signature="void setDocumentHandler(org.apache.xerces.xni.XMLDocumentHandler)" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
	<method signature="void cleanup()" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
	<method signature="org.apache.xerces.xni.parser.XMLErrorHandler getErrorHandler()" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable)" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable,org.apache.xerces.xni.grammars.XMLGrammarPool)" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
	<method signature="void setInputSource(org.apache.xerces.xni.parser.XMLInputSource)" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
	<method signature="void setDTDHandler(org.apache.xerces.xni.XMLDTDHandler)" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
	<method signature="void setFeature(java.lang.String,boolean)" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
	<method signature="org.apache.xerces.xni.XMLDTDHandler getDTDHandler()" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
	<method signature="void setEntityResolver(org.apache.xerces.xni.parser.XMLEntityResolver)" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
	<method signature="boolean parse(boolean)" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
	<method signature="org.apache.xerces.xni.XMLDocumentHandler getDocumentHandler()" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
	<method signature="void setErrorHandler(org.apache.xerces.xni.parser.XMLErrorHandler)" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable,org.apache.xerces.xni.grammars.XMLGrammarPool,org.apache.xerces.xni.parser.XMLComponentManager)" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
	<method signature="void setDTDContentModelHandler(org.apache.xerces.xni.XMLDTDContentModelHandler)" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
	<method signature="org.apache.xerces.xni.parser.XMLEntityResolver getEntityResolver()" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
	<class name="org.jfree.chart.axis.NumberTickUnit" />
	<method signature="void &lt;init&gt;(double)" class="org.jfree.chart.axis.NumberTickUnit" />
	<method signature="void &lt;init&gt;(double,java.text.NumberFormat)" class="org.jfree.chart.axis.NumberTickUnit" />
	<method signature="int hashCode()" class="org.jfree.chart.axis.NumberTickUnit" />
	<method signature="java.lang.String valueToString(double)" class="org.jfree.chart.axis.NumberTickUnit" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.axis.NumberTickUnit" />
	<method signature="java.lang.String toString()" class="org.jfree.chart.axis.NumberTickUnit" />
	<method signature="void &lt;init&gt;(double,java.text.NumberFormat,int)" class="org.jfree.chart.axis.NumberTickUnit" />
	<class name="org.apache.xerces.impl.XMLErrorReporter" />
	<method signature="org.apache.xerces.util.MessageFormatter removeMessageFormatter(java.lang.String)" class="org.apache.xerces.impl.XMLErrorReporter" />
	<method signature="java.lang.String[] getRecognizedProperties()" class="org.apache.xerces.impl.XMLErrorReporter" />
	<method signature="void setLocale(java.util.Locale)" class="org.apache.xerces.impl.XMLErrorReporter" />
	<method signature="java.lang.String reportError(java.lang.String,java.lang.String,java.lang.Object[],short)" class="org.apache.xerces.impl.XMLErrorReporter" />
	<method signature="void setDocumentLocator(org.apache.xerces.xni.XMLLocator)" class="org.apache.xerces.impl.XMLErrorReporter" />
	<method signature="java.lang.String[] getRecognizedFeatures()" class="org.apache.xerces.impl.XMLErrorReporter" />
	<method signature="java.lang.Boolean getFeatureDefault(java.lang.String)" class="org.apache.xerces.impl.XMLErrorReporter" />
	<method signature="java.util.Locale getLocale()" class="org.apache.xerces.impl.XMLErrorReporter" />
	<method signature="boolean getFeature(java.lang.String)" class="org.apache.xerces.impl.XMLErrorReporter" />
	<method signature="void putMessageFormatter(java.lang.String,org.apache.xerces.util.MessageFormatter)" class="org.apache.xerces.impl.XMLErrorReporter" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="org.apache.xerces.impl.XMLErrorReporter" />
	<method signature="java.lang.String reportError(java.lang.String,java.lang.String,java.lang.Object[],short,java.lang.Exception)" class="org.apache.xerces.impl.XMLErrorReporter" />
	<method signature="void reset(org.apache.xerces.xni.parser.XMLComponentManager)" class="org.apache.xerces.impl.XMLErrorReporter" />
	<method signature="java.lang.String reportError(org.apache.xerces.xni.XMLLocator,java.lang.String,java.lang.String,java.lang.Object[],short)" class="org.apache.xerces.impl.XMLErrorReporter" />
	<method signature="org.apache.xerces.xni.parser.XMLErrorHandler getErrorHandler()" class="org.apache.xerces.impl.XMLErrorReporter" />
	<method signature="org.xml.sax.ErrorHandler getSAXErrorHandler()" class="org.apache.xerces.impl.XMLErrorReporter" />
	<method signature="java.lang.Object getPropertyDefault(java.lang.String)" class="org.apache.xerces.impl.XMLErrorReporter" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.XMLErrorReporter" />
	<method signature="java.lang.String reportError(org.apache.xerces.xni.XMLLocator,java.lang.String,java.lang.String,java.lang.Object[],short,java.lang.Exception)" class="org.apache.xerces.impl.XMLErrorReporter" />
	<method signature="org.apache.xerces.util.MessageFormatter getMessageFormatter(java.lang.String)" class="org.apache.xerces.impl.XMLErrorReporter" />
	<method signature="void setFeature(java.lang.String,boolean)" class="org.apache.xerces.impl.XMLErrorReporter" />
	<class name="com.hexidec.ekit.component.PropertiesDialog" />
	<method signature="void &lt;init&gt;(java.awt.Frame,java.lang.String[],java.lang.String[],java.lang.String,boolean)" class="com.hexidec.ekit.component.PropertiesDialog" />
	<method signature="java.lang.String getFieldValue(java.lang.String)" class="com.hexidec.ekit.component.PropertiesDialog" />
	<method signature="void &lt;init&gt;(java.awt.Frame,java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String,boolean)" class="com.hexidec.ekit.component.PropertiesDialog" />
	<method signature="java.lang.String getDecisionValue()" class="com.hexidec.ekit.component.PropertiesDialog" />
	<class name="org.jfree.data.function.PowerFunction2D" />
	<method signature="int hashCode()" class="org.jfree.data.function.PowerFunction2D" />
	<method signature="double getValue(double)" class="org.jfree.data.function.PowerFunction2D" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.function.PowerFunction2D" />
	<method signature="double getA()" class="org.jfree.data.function.PowerFunction2D" />
	<method signature="double getB()" class="org.jfree.data.function.PowerFunction2D" />
	<method signature="void &lt;init&gt;(double,double)" class="org.jfree.data.function.PowerFunction2D" />
	<class name="freemarker.ext.servlet.HttpRequestHashModel" />
	<method signature="int size()" class="freemarker.ext.servlet.HttpRequestHashModel" />
	<method signature="boolean isEmpty()" class="freemarker.ext.servlet.HttpRequestHashModel" />
	<method signature="freemarker.template.TemplateCollectionModel keys()" class="freemarker.ext.servlet.HttpRequestHashModel" />
	<method signature="freemarker.template.ObjectWrapper getObjectWrapper()" class="freemarker.ext.servlet.HttpRequestHashModel" />
	<method signature="freemarker.template.TemplateCollectionModel values()" class="freemarker.ext.servlet.HttpRequestHashModel" />
	<method signature="javax.servlet.http.HttpServletRequest getRequest()" class="freemarker.ext.servlet.HttpRequestHashModel" />
	<method signature="javax.servlet.http.HttpServletResponse getResponse()" class="freemarker.ext.servlet.HttpRequestHashModel" />
	<method signature="void &lt;init&gt;(javax.servlet.http.HttpServletRequest,freemarker.template.ObjectWrapper)" class="freemarker.ext.servlet.HttpRequestHashModel" />
	<method signature="void &lt;init&gt;(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,freemarker.template.ObjectWrapper)" class="freemarker.ext.servlet.HttpRequestHashModel" />
	<method signature="freemarker.template.TemplateModel get(java.lang.String)" class="freemarker.ext.servlet.HttpRequestHashModel" />
	<class name="org.w3c.dom.DocumentType" />
	<method signature="java.lang.String getSystemId()" class="org.w3c.dom.DocumentType" />
	<method signature="java.lang.String getName()" class="org.w3c.dom.DocumentType" />
	<method signature="java.lang.String getInternalSubset()" class="org.w3c.dom.DocumentType" />
	<method signature="org.w3c.dom.NamedNodeMap getEntities()" class="org.w3c.dom.DocumentType" />
	<method signature="org.w3c.dom.NamedNodeMap getNotations()" class="org.w3c.dom.DocumentType" />
	<method signature="java.lang.String getPublicId()" class="org.w3c.dom.DocumentType" />
	<class name="freemarker.ext.util.WrapperTemplateModel" />
	<method signature="java.lang.Object getWrappedObject()" class="freemarker.ext.util.WrapperTemplateModel" />
	<class name="org.jfree.chart.block.BlockContainer" />
	<method signature="org.jfree.chart.block.Arrangement getArrangement()" class="org.jfree.chart.block.BlockContainer" />
	<method signature="void setArrangement(org.jfree.chart.block.Arrangement)" class="org.jfree.chart.block.BlockContainer" />
	<method signature="org.jfree.ui.Size2D arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" class="org.jfree.chart.block.BlockContainer" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.block.BlockContainer" />
	<method signature="java.util.List getBlocks()" class="org.jfree.chart.block.BlockContainer" />
	<method signature="void add(org.jfree.chart.block.Block,java.lang.Object)" class="org.jfree.chart.block.BlockContainer" />
	<method signature="void clear()" class="org.jfree.chart.block.BlockContainer" />
	<method signature="java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)" class="org.jfree.chart.block.BlockContainer" />
	<method signature="boolean isEmpty()" class="org.jfree.chart.block.BlockContainer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.block.BlockContainer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.block.BlockContainer" />
	<method signature="void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" class="org.jfree.chart.block.BlockContainer" />
	<method signature="void &lt;init&gt;(org.jfree.chart.block.Arrangement)" class="org.jfree.chart.block.BlockContainer" />
	<method signature="void add(org.jfree.chart.block.Block)" class="org.jfree.chart.block.BlockContainer" />
	<class name="teamma.languages.Translate" />
	<method signature="void &lt;init&gt;()" class="teamma.languages.Translate" />
	<method signature="java.lang.String translate(java.lang.String)" class="teamma.languages.Translate" />
	<class name="org.jfree.util.PublicCloneable" />
	<method signature="java.lang.Object clone()" class="org.jfree.util.PublicCloneable" />
	<class name="org.w3c.dom.css.CSSUnknownRule" />
	<class name="org.apache.commons.lang3.tuple.ImmutableTriple" />
	<method signature="void &lt;init&gt;(java.lang.Object,java.lang.Object,java.lang.Object)" class="org.apache.commons.lang3.tuple.ImmutableTriple" />
	<method signature="java.lang.Object getLeft()" class="org.apache.commons.lang3.tuple.ImmutableTriple" />
	<method signature="org.apache.commons.lang3.tuple.ImmutableTriple of(java.lang.Object,java.lang.Object,java.lang.Object)" class="org.apache.commons.lang3.tuple.ImmutableTriple" />
	<method signature="java.lang.Object getRight()" class="org.apache.commons.lang3.tuple.ImmutableTriple" />
	<method signature="java.lang.Object getMiddle()" class="org.apache.commons.lang3.tuple.ImmutableTriple" />
	<class name="org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION" />
	<method signature="org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION[] values()" class="org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION" />
	<method signature="org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION valueOf(java.lang.String)" class="org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION" />
	<class name="org.apache.commons.lang3.tuple.Triple" />
	<method signature="int compareTo(java.lang.Object)" class="org.apache.commons.lang3.tuple.Triple" />
	<method signature="int hashCode()" class="org.apache.commons.lang3.tuple.Triple" />
	<method signature="boolean equals(java.lang.Object)" class="org.apache.commons.lang3.tuple.Triple" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.tuple.Triple" />
	<method signature="java.lang.Object getLeft()" class="org.apache.commons.lang3.tuple.Triple" />
	<method signature="int compareTo(org.apache.commons.lang3.tuple.Triple)" class="org.apache.commons.lang3.tuple.Triple" />
	<method signature="java.lang.String toString()" class="org.apache.commons.lang3.tuple.Triple" />
	<method signature="java.lang.Object getRight()" class="org.apache.commons.lang3.tuple.Triple" />
	<method signature="org.apache.commons.lang3.tuple.Triple of(java.lang.Object,java.lang.Object,java.lang.Object)" class="org.apache.commons.lang3.tuple.Triple" />
	<method signature="java.lang.String toString(java.lang.String)" class="org.apache.commons.lang3.tuple.Triple" />
	<method signature="java.lang.Object getMiddle()" class="org.apache.commons.lang3.tuple.Triple" />
	<class name="freemarker.core.NonNumericalException" />
	<method signature="void &lt;init&gt;(freemarker.core.Environment)" class="freemarker.core.NonNumericalException" />
	<method signature="void &lt;init&gt;(java.lang.String,freemarker.core.Environment)" class="freemarker.core.NonNumericalException" />
	<class name="org.apache.xerces.impl.msg.XMLMessageFormatter" />
	<method signature="java.lang.String formatMessage(java.util.Locale,java.lang.String,java.lang.Object[])" class="org.apache.xerces.impl.msg.XMLMessageFormatter" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.msg.XMLMessageFormatter" />
	<class name="org.apache.xerces.impl.xs.util.XSObjectListImpl" />
	<method signature="int size()" class="org.apache.xerces.impl.xs.util.XSObjectListImpl" />
	<method signature="void &lt;init&gt;(org.apache.xerces.xs.XSObject[],int)" class="org.apache.xerces.impl.xs.util.XSObjectListImpl" />
	<method signature="void addXSObject(org.apache.xerces.xs.XSObject)" class="org.apache.xerces.impl.xs.util.XSObjectListImpl" />
	<method signature="int getLength()" class="org.apache.xerces.impl.xs.util.XSObjectListImpl" />
	<method signature="java.util.ListIterator listIterator(int)" class="org.apache.xerces.impl.xs.util.XSObjectListImpl" />
	<method signature="java.util.ListIterator listIterator()" class="org.apache.xerces.impl.xs.util.XSObjectListImpl" />
	<method signature="boolean contains(java.lang.Object)" class="org.apache.xerces.impl.xs.util.XSObjectListImpl" />
	<method signature="java.util.Iterator iterator()" class="org.apache.xerces.impl.xs.util.XSObjectListImpl" />
	<method signature="java.lang.Object get(int)" class="org.apache.xerces.impl.xs.util.XSObjectListImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xs.util.XSObjectListImpl" />
	<method signature="void clearXSObjectList()" class="org.apache.xerces.impl.xs.util.XSObjectListImpl" />
	<method signature="java.lang.Object[] toArray(java.lang.Object[])" class="org.apache.xerces.impl.xs.util.XSObjectListImpl" />
	<method signature="org.apache.xerces.xs.XSObject item(int)" class="org.apache.xerces.impl.xs.util.XSObjectListImpl" />
	<method signature="void addXSObject(int,org.apache.xerces.xs.XSObject)" class="org.apache.xerces.impl.xs.util.XSObjectListImpl" />
	<method signature="java.lang.Object[] toArray()" class="org.apache.xerces.impl.xs.util.XSObjectListImpl" />
	<class name="org.apache.html.dom.HTMLTableElementImpl" />
	<method signature="void deleteTHead()" class="org.apache.html.dom.HTMLTableElementImpl" />
	<method signature="void setTFoot(org.w3c.dom.html.HTMLTableSectionElement)" class="org.apache.html.dom.HTMLTableElementImpl" />
	<method signature="void setBgColor(java.lang.String)" class="org.apache.html.dom.HTMLTableElementImpl" />
	<method signature="java.lang.String getBorder()" class="org.apache.html.dom.HTMLTableElementImpl" />
	<method signature="void setFrame(java.lang.String)" class="org.apache.html.dom.HTMLTableElementImpl" />
	<method signature="java.lang.String getFrame()" class="org.apache.html.dom.HTMLTableElementImpl" />
	<method signature="org.w3c.dom.html.HTMLElement insertRow(int)" class="org.apache.html.dom.HTMLTableElementImpl" />
	<method signature="org.w3c.dom.Node cloneNode(boolean)" class="org.apache.html.dom.HTMLTableElementImpl" />
	<method signature="java.lang.String getWidth()" class="org.apache.html.dom.HTMLTableElementImpl" />
	<method signature="void setRules(java.lang.String)" class="org.apache.html.dom.HTMLTableElementImpl" />
	<method signature="org.w3c.dom.html.HTMLElement createTHead()" class="org.apache.html.dom.HTMLTableElementImpl" />
	<method signature="java.lang.String getRules()" class="org.apache.html.dom.HTMLTableElementImpl" />
	<method signature="org.w3c.dom.html.HTMLTableSectionElement getTFoot()" class="org.apache.html.dom.HTMLTableElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLTableElementImpl" />
	<method signature="java.lang.String getCellPadding()" class="org.apache.html.dom.HTMLTableElementImpl" />
	<method signature="void deleteTFoot()" class="org.apache.html.dom.HTMLTableElementImpl" />
	<method signature="void setAlign(java.lang.String)" class="org.apache.html.dom.HTMLTableElementImpl" />
	<method signature="void setBorder(java.lang.String)" class="org.apache.html.dom.HTMLTableElementImpl" />
	<method signature="java.lang.String getCellSpacing()" class="org.apache.html.dom.HTMLTableElementImpl" />
	<method signature="java.lang.String getSummary()" class="org.apache.html.dom.HTMLTableElementImpl" />
	<method signature="void setCellSpacing(java.lang.String)" class="org.apache.html.dom.HTMLTableElementImpl" />
	<method signature="org.w3c.dom.html.HTMLCollection getRows()" class="org.apache.html.dom.HTMLTableElementImpl" />
	<method signature="void setCaption(org.w3c.dom.html.HTMLTableCaptionElement)" class="org.apache.html.dom.HTMLTableElementImpl" />
	<method signature="org.w3c.dom.html.HTMLTableSectionElement getTHead()" class="org.apache.html.dom.HTMLTableElementImpl" />
	<method signature="java.lang.String getAlign()" class="org.apache.html.dom.HTMLTableElementImpl" />
	<method signature="void setTHead(org.w3c.dom.html.HTMLTableSectionElement)" class="org.apache.html.dom.HTMLTableElementImpl" />
	<method signature="org.w3c.dom.html.HTMLElement createTFoot()" class="org.apache.html.dom.HTMLTableElementImpl" />
	<method signature="void deleteRow(int)" class="org.apache.html.dom.HTMLTableElementImpl" />
	<method signature="org.w3c.dom.html.HTMLElement createCaption()" class="org.apache.html.dom.HTMLTableElementImpl" />
	<method signature="void setCellPadding(java.lang.String)" class="org.apache.html.dom.HTMLTableElementImpl" />
	<method signature="void setSummary(java.lang.String)" class="org.apache.html.dom.HTMLTableElementImpl" />
	<method signature="org.w3c.dom.html.HTMLCollection getTBodies()" class="org.apache.html.dom.HTMLTableElementImpl" />
	<method signature="org.w3c.dom.html.HTMLTableCaptionElement getCaption()" class="org.apache.html.dom.HTMLTableElementImpl" />
	<method signature="void deleteCaption()" class="org.apache.html.dom.HTMLTableElementImpl" />
	<method signature="void setWidth(java.lang.String)" class="org.apache.html.dom.HTMLTableElementImpl" />
	<method signature="java.lang.String getBgColor()" class="org.apache.html.dom.HTMLTableElementImpl" />
	<class name="javax.xml.XMLConstants" />
	<class name="org.jfree.data.category.CategoryDataset" />
	<class name="org.apache.wml.WMLImgElement" />
	<method signature="void setAlign(java.lang.String)" class="org.apache.wml.WMLImgElement" />
	<method signature="java.lang.String getXmlLang()" class="org.apache.wml.WMLImgElement" />
	<method signature="java.lang.String getSrc()" class="org.apache.wml.WMLImgElement" />
	<method signature="java.lang.String getLocalSrc()" class="org.apache.wml.WMLImgElement" />
	<method signature="java.lang.String getWidth()" class="org.apache.wml.WMLImgElement" />
	<method signature="java.lang.String getAlign()" class="org.apache.wml.WMLImgElement" />
	<method signature="java.lang.String getHspace()" class="org.apache.wml.WMLImgElement" />
	<method signature="java.lang.String getHeight()" class="org.apache.wml.WMLImgElement" />
	<method signature="void setAlt(java.lang.String)" class="org.apache.wml.WMLImgElement" />
	<method signature="void setLocalSrc(java.lang.String)" class="org.apache.wml.WMLImgElement" />
	<method signature="void setVspace(java.lang.String)" class="org.apache.wml.WMLImgElement" />
	<method signature="void setXmlLang(java.lang.String)" class="org.apache.wml.WMLImgElement" />
	<method signature="void setSrc(java.lang.String)" class="org.apache.wml.WMLImgElement" />
	<method signature="java.lang.String getAlt()" class="org.apache.wml.WMLImgElement" />
	<method signature="void setHspace(java.lang.String)" class="org.apache.wml.WMLImgElement" />
	<method signature="void setWidth(java.lang.String)" class="org.apache.wml.WMLImgElement" />
	<method signature="void setHeight(java.lang.String)" class="org.apache.wml.WMLImgElement" />
	<method signature="java.lang.String getVspace()" class="org.apache.wml.WMLImgElement" />
	<class name="org.apache.xerces.dom.events.MouseEventImpl" />
	<method signature="boolean getCtrlKey()" class="org.apache.xerces.dom.events.MouseEventImpl" />
	<method signature="boolean getMetaKey()" class="org.apache.xerces.dom.events.MouseEventImpl" />
	<method signature="boolean getShiftKey()" class="org.apache.xerces.dom.events.MouseEventImpl" />
	<method signature="short getButton()" class="org.apache.xerces.dom.events.MouseEventImpl" />
	<method signature="org.w3c.dom.events.EventTarget getRelatedTarget()" class="org.apache.xerces.dom.events.MouseEventImpl" />
	<method signature="int getClientY()" class="org.apache.xerces.dom.events.MouseEventImpl" />
	<method signature="boolean getAltKey()" class="org.apache.xerces.dom.events.MouseEventImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.dom.events.MouseEventImpl" />
	<method signature="int getClientX()" class="org.apache.xerces.dom.events.MouseEventImpl" />
	<method signature="int getScreenY()" class="org.apache.xerces.dom.events.MouseEventImpl" />
	<method signature="int getScreenX()" class="org.apache.xerces.dom.events.MouseEventImpl" />
	<method signature="void initMouseEvent(java.lang.String,boolean,boolean,org.w3c.dom.views.AbstractView,int,int,int,int,int,boolean,boolean,boolean,boolean,short,org.w3c.dom.events.EventTarget)" class="org.apache.xerces.dom.events.MouseEventImpl" />
	<class name="freemarker.template.utility.Execute" />
	<method signature="void &lt;init&gt;()" class="freemarker.template.utility.Execute" />
	<method signature="java.lang.Object exec(java.util.List)" class="freemarker.template.utility.Execute" />
	<class name="org.apache.xerces.dom.EntityImpl" />
	<method signature="short getNodeType()" class="org.apache.xerces.dom.EntityImpl" />
	<method signature="java.lang.String getSystemId()" class="org.apache.xerces.dom.EntityImpl" />
	<method signature="void setSystemId(java.lang.String)" class="org.apache.xerces.dom.EntityImpl" />
	<method signature="void setBaseURI(java.lang.String)" class="org.apache.xerces.dom.EntityImpl" />
	<method signature="org.w3c.dom.Node cloneNode(boolean)" class="org.apache.xerces.dom.EntityImpl" />
	<method signature="java.lang.String getXmlVersion()" class="org.apache.xerces.dom.EntityImpl" />
	<method signature="java.lang.String getInputEncoding()" class="org.apache.xerces.dom.EntityImpl" />
	<method signature="java.lang.String getNodeName()" class="org.apache.xerces.dom.EntityImpl" />
	<method signature="java.lang.String getPublicId()" class="org.apache.xerces.dom.EntityImpl" />
	<method signature="void setInputEncoding(java.lang.String)" class="org.apache.xerces.dom.EntityImpl" />
	<method signature="java.lang.String getXmlEncoding()" class="org.apache.xerces.dom.EntityImpl" />
	<method signature="void setXmlEncoding(java.lang.String)" class="org.apache.xerces.dom.EntityImpl" />
	<method signature="void setXmlVersion(java.lang.String)" class="org.apache.xerces.dom.EntityImpl" />
	<method signature="void &lt;init&gt;(org.apache.xerces.dom.CoreDocumentImpl,java.lang.String)" class="org.apache.xerces.dom.EntityImpl" />
	<method signature="void setNotationName(java.lang.String)" class="org.apache.xerces.dom.EntityImpl" />
	<method signature="java.lang.String getNotationName()" class="org.apache.xerces.dom.EntityImpl" />
	<method signature="void setPublicId(java.lang.String)" class="org.apache.xerces.dom.EntityImpl" />
	<method signature="java.lang.String getBaseURI()" class="org.apache.xerces.dom.EntityImpl" />
	<class name="org.jfree.chart.renderer.xy.StackedXYBarRenderer" />
	<method signature="org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)" class="org.jfree.chart.renderer.xy.StackedXYBarRenderer" />
	<method signature="void &lt;init&gt;(double)" class="org.jfree.chart.renderer.xy.StackedXYBarRenderer" />
	<method signature="boolean getRenderAsPercentages()" class="org.jfree.chart.renderer.xy.StackedXYBarRenderer" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)" class="org.jfree.chart.renderer.xy.StackedXYBarRenderer" />
	<method signature="void setRenderAsPercentages(boolean)" class="org.jfree.chart.renderer.xy.StackedXYBarRenderer" />
	<method signature="int getPassCount()" class="org.jfree.chart.renderer.xy.StackedXYBarRenderer" />
	<method signature="int hashCode()" class="org.jfree.chart.renderer.xy.StackedXYBarRenderer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.xy.StackedXYBarRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.xy.StackedXYBarRenderer" />
	<method signature="org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.renderer.xy.StackedXYBarRenderer" />
	<class name="org.apache.xerces.parsers.DTDConfiguration" />
	<method signature="void setLocale(java.util.Locale)" class="org.apache.xerces.parsers.DTDConfiguration" />
	<method signature="void parse(org.apache.xerces.xni.parser.XMLInputSource)" class="org.apache.xerces.parsers.DTDConfiguration" />
	<method signature="void cleanup()" class="org.apache.xerces.parsers.DTDConfiguration" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable)" class="org.apache.xerces.parsers.DTDConfiguration" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.parsers.DTDConfiguration" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable,org.apache.xerces.xni.grammars.XMLGrammarPool)" class="org.apache.xerces.parsers.DTDConfiguration" />
	<method signature="void setInputSource(org.apache.xerces.xni.parser.XMLInputSource)" class="org.apache.xerces.parsers.DTDConfiguration" />
	<method signature="boolean parse(boolean)" class="org.apache.xerces.parsers.DTDConfiguration" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="org.apache.xerces.parsers.DTDConfiguration" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable,org.apache.xerces.xni.grammars.XMLGrammarPool,org.apache.xerces.xni.parser.XMLComponentManager)" class="org.apache.xerces.parsers.DTDConfiguration" />
	<method signature="java.lang.Object getProperty(java.lang.String)" class="org.apache.xerces.parsers.DTDConfiguration" />
	<class name="com.google.zxing.qrcode.encoder.QRCode" />
	<method signature="void setMaskPattern(int)" class="com.google.zxing.qrcode.encoder.QRCode" />
	<method signature="void setMode(com.google.zxing.qrcode.decoder.Mode)" class="com.google.zxing.qrcode.encoder.QRCode" />
	<method signature="boolean isValidMaskPattern(int)" class="com.google.zxing.qrcode.encoder.QRCode" />
	<method signature="com.google.zxing.qrcode.decoder.Mode getMode()" class="com.google.zxing.qrcode.encoder.QRCode" />
	<method signature="int getMaskPattern()" class="com.google.zxing.qrcode.encoder.QRCode" />
	<method signature="com.google.zxing.qrcode.decoder.Version getVersion()" class="com.google.zxing.qrcode.encoder.QRCode" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.qrcode.encoder.QRCode" />
	<method signature="void setECLevel(com.google.zxing.qrcode.decoder.ErrorCorrectionLevel)" class="com.google.zxing.qrcode.encoder.QRCode" />
	<method signature="com.google.zxing.qrcode.decoder.ErrorCorrectionLevel getECLevel()" class="com.google.zxing.qrcode.encoder.QRCode" />
	<method signature="java.lang.String toString()" class="com.google.zxing.qrcode.encoder.QRCode" />
	<method signature="com.google.zxing.qrcode.encoder.ByteMatrix getMatrix()" class="com.google.zxing.qrcode.encoder.QRCode" />
	<method signature="void setVersion(com.google.zxing.qrcode.decoder.Version)" class="com.google.zxing.qrcode.encoder.QRCode" />
	<method signature="void setMatrix(com.google.zxing.qrcode.encoder.ByteMatrix)" class="com.google.zxing.qrcode.encoder.QRCode" />
	<class name="tourma.JdgCoach" />
	<method signature="java.util.List getImagesResources(java.lang.String)" class="tourma.JdgCoach" />
	<method signature="void &lt;init&gt;(java.awt.Frame,boolean,tourma.data.Coach)" class="tourma.JdgCoach" />
	<method signature="void &lt;init&gt;(java.awt.Frame,boolean,tourma.data.Team)" class="tourma.JdgCoach" />
	<method signature="void &lt;init&gt;(java.awt.Frame,boolean)" class="tourma.JdgCoach" />
	<class name="org.apache.wml.WMLTemplateElement" />
	<method signature="java.lang.String getOnEnterBackward()" class="org.apache.wml.WMLTemplateElement" />
	<method signature="java.lang.String getOnTimer()" class="org.apache.wml.WMLTemplateElement" />
	<method signature="void setOnTimer(java.lang.String)" class="org.apache.wml.WMLTemplateElement" />
	<method signature="void setOnEnterBackward(java.lang.String)" class="org.apache.wml.WMLTemplateElement" />
	<method signature="void setOnEnterForward(java.lang.String)" class="org.apache.wml.WMLTemplateElement" />
	<method signature="java.lang.String getOnEnterForward()" class="org.apache.wml.WMLTemplateElement" />
	<class name="com.google.zxing.PlanarYUVLuminanceSource" />
	<method signature="com.google.zxing.LuminanceSource crop(int,int,int,int)" class="com.google.zxing.PlanarYUVLuminanceSource" />
	<method signature="void &lt;init&gt;(byte[],int,int,int,int,int,int,boolean)" class="com.google.zxing.PlanarYUVLuminanceSource" />
	<method signature="int[] renderCroppedGreyscaleBitmap()" class="com.google.zxing.PlanarYUVLuminanceSource" />
	<method signature="boolean isCropSupported()" class="com.google.zxing.PlanarYUVLuminanceSource" />
	<method signature="byte[] getRow(int,byte[])" class="com.google.zxing.PlanarYUVLuminanceSource" />
	<method signature="byte[] getMatrix()" class="com.google.zxing.PlanarYUVLuminanceSource" />
	<class name="org.jdom2.filter.ElementFilter" />
	<method signature="int hashCode()" class="org.jdom2.filter.ElementFilter" />
	<method signature="boolean equals(java.lang.Object)" class="org.jdom2.filter.ElementFilter" />
	<method signature="void &lt;init&gt;()" class="org.jdom2.filter.ElementFilter" />
	<method signature="void &lt;init&gt;(org.jdom2.Namespace)" class="org.jdom2.filter.ElementFilter" />
	<method signature="java.lang.String toString()" class="org.jdom2.filter.ElementFilter" />
	<method signature="java.lang.Object filter(java.lang.Object)" class="org.jdom2.filter.ElementFilter" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jdom2.filter.ElementFilter" />
	<method signature="void &lt;init&gt;(java.lang.String,org.jdom2.Namespace)" class="org.jdom2.filter.ElementFilter" />
	<method signature="org.jdom2.Element filter(java.lang.Object)" class="org.jdom2.filter.ElementFilter" />
	<class name="javax.xml.transform.sax.TransformerHandler" />
	<method signature="java.lang.String getSystemId()" class="javax.xml.transform.sax.TransformerHandler" />
	<method signature="void setSystemId(java.lang.String)" class="javax.xml.transform.sax.TransformerHandler" />
	<method signature="javax.xml.transform.Transformer getTransformer()" class="javax.xml.transform.sax.TransformerHandler" />
	<method signature="void setResult(javax.xml.transform.Result)" class="javax.xml.transform.sax.TransformerHandler" />
	<class name="org.jfree.chart.event.AnnotationChangeEvent" />
	<method signature="org.jfree.chart.annotations.Annotation getAnnotation()" class="org.jfree.chart.event.AnnotationChangeEvent" />
	<method signature="void &lt;init&gt;(java.lang.Object,org.jfree.chart.annotations.Annotation)" class="org.jfree.chart.event.AnnotationChangeEvent" />
	<class name="org.jdom2.adapters.AbstractDOMAdapter" />
	<method signature="org.w3c.dom.Document createDocument(org.jdom2.DocType)" class="org.jdom2.adapters.AbstractDOMAdapter" />
	<method signature="void &lt;init&gt;()" class="org.jdom2.adapters.AbstractDOMAdapter" />
	<class name="tourma.views.round.JPNCategory" />
	<method signature="void update()" class="tourma.views.round.JPNCategory" />
	<method signature="void setRoundOnly(boolean)" class="tourma.views.round.JPNCategory" />
	<method signature="void &lt;init&gt;(tourma.data.Tournament,tourma.data.Category,int)" class="tourma.views.round.JPNCategory" />
	<class name="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="java.lang.Object validate(java.lang.String,org.apache.xerces.impl.dv.ValidationContext,org.apache.xerces.impl.dv.ValidatedInfo)" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="java.lang.String getName()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="org.apache.xerces.xs.XSSimpleTypeDefinition getItemType()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="void reset()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="org.apache.xerces.impl.dv.ValidatedInfo validateWithInfo(java.lang.String,org.apache.xerces.impl.dv.ValidationContext,org.apache.xerces.impl.dv.ValidatedInfo)" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="short getWhitespace()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="void setAnonymous(boolean)" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="boolean getAnonymous()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="short getType()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="boolean isFinal(short)" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="boolean isIdentical(java.lang.Object,java.lang.Object)" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="void validate(org.apache.xerces.impl.dv.ValidationContext,org.apache.xerces.impl.dv.ValidatedInfo)" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="short getFinal()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="java.lang.Object getMinExclusiveValue()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="boolean isDOMDerivedFrom(java.lang.String,java.lang.String,int)" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="org.apache.xerces.xs.XSSimpleTypeDefinition getPrimitiveType()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="short getFixedFacets()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="boolean getBounded()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="org.apache.xerces.xs.XSObjectList getMultiValueFacets()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="boolean isDerivedFrom(java.lang.String,java.lang.String,int)" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="org.apache.xerces.xs.XSTypeDefinition getBaseType()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="short getPrimitiveKind()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="void applyFacets(org.apache.xerces.impl.dv.XSFacets,short,short,org.apache.xerces.impl.dv.ValidationContext)" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="void setNamespaceItem(org.apache.xerces.xs.XSNamespaceItem)" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="java.lang.String getLexicalFacetValue(short)" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="java.lang.String getNamespace()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="boolean getFinite()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="org.apache.xerces.xs.XSObjectList getFacets()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="boolean derivedFrom(java.lang.String,java.lang.String,short)" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="short getVariety()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="boolean isEqual(java.lang.Object,java.lang.Object)" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="org.apache.xerces.xs.StringList getLexicalPattern()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="org.apache.xerces.xs.StringList getLexicalEnumeration()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="boolean derivedFromType(org.apache.xerces.xs.XSTypeDefinition,short)" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="short getOrdered()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="org.apache.xerces.xs.datatypes.ObjectList getActualEnumeration()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="org.apache.xerces.xs.datatypes.ObjectList getEnumerationItemTypeList()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="java.lang.String getTypeNamespace()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="java.lang.String getTypeName()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="java.lang.Object getMinInclusiveValue()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="short getBuiltInKind()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="boolean isIDType()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="java.lang.Object validate(java.lang.Object,org.apache.xerces.impl.dv.ValidationContext,org.apache.xerces.impl.dv.ValidatedInfo)" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="org.apache.xerces.xs.XSObjectList getAnnotations()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="org.apache.xerces.xs.XSNamespaceItem getNamespaceItem()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="org.apache.xerces.xs.XSObject getFacet(int)" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="org.apache.xerces.xs.XSObjectList getMemberTypes()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="boolean isFixedFacet(short)" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="java.lang.String normalize(java.lang.String,short)" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="java.lang.Object getMaxInclusiveValue()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="java.lang.String toString()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="boolean getNumeric()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="boolean isDefinedFacet(short)" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="org.apache.xerces.xs.ShortList getEnumerationTypeList()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="java.lang.Object getMaxExclusiveValue()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="short getTypeCategory()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<method signature="short getDefinedFacets()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
	<class name="tourma.views.fullscreen.JFullScreen" />
	<method signature="void &lt;init&gt;()" class="tourma.views.fullscreen.JFullScreen" />
	<method signature="void &lt;init&gt;(java.net.Socket)" class="tourma.views.fullscreen.JFullScreen" />
	<class name="org.jfree.chart.servlet.DisplayChart" />
	<method signature="void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" class="org.jfree.chart.servlet.DisplayChart" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.servlet.DisplayChart" />
	<method signature="void init()" class="org.jfree.chart.servlet.DisplayChart" />
	<class name="com.toedter.calendar.JDateChooser" />
	<method signature="void setLocale(java.util.Locale)" class="com.toedter.calendar.JDateChooser" />
	<method signature="java.util.Date getDate()" class="com.toedter.calendar.JDateChooser" />
	<method signature="void setMaxSelectableDate(java.util.Date)" class="com.toedter.calendar.JDateChooser" />
	<method signature="void setDate(java.util.Date)" class="com.toedter.calendar.JDateChooser" />
	<method signature="void setEnabled(boolean)" class="com.toedter.calendar.JDateChooser" />
	<method signature="void propertyChange(java.beans.PropertyChangeEvent)" class="com.toedter.calendar.JDateChooser" />
	<method signature="void &lt;init&gt;(com.toedter.calendar.JCalendar,java.util.Date,java.lang.String,com.toedter.calendar.IDateEditor)" class="com.toedter.calendar.JDateChooser" />
	<method signature="java.util.Calendar getCalendar()" class="com.toedter.calendar.JDateChooser" />
	<method signature="boolean isEnabled()" class="com.toedter.calendar.JDateChooser" />
	<method signature="void cleanup()" class="com.toedter.calendar.JDateChooser" />
	<method signature="void &lt;init&gt;(java.util.Date)" class="com.toedter.calendar.JDateChooser" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="com.toedter.calendar.JDateChooser" />
	<method signature="void setCalendar(java.util.Calendar)" class="com.toedter.calendar.JDateChooser" />
	<method signature="void &lt;init&gt;()" class="com.toedter.calendar.JDateChooser" />
	<method signature="void setFont(java.awt.Font)" class="com.toedter.calendar.JDateChooser" />
	<method signature="void main(java.lang.String[])" class="com.toedter.calendar.JDateChooser" />
	<method signature="void setIcon(javax.swing.ImageIcon)" class="com.toedter.calendar.JDateChooser" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,char)" class="com.toedter.calendar.JDateChooser" />
	<method signature="javax.swing.JButton getCalendarButton()" class="com.toedter.calendar.JDateChooser" />
	<method signature="void setSelectableDateRange(java.util.Date,java.util.Date)" class="com.toedter.calendar.JDateChooser" />
	<method signature="java.util.Date getMaxSelectableDate()" class="com.toedter.calendar.JDateChooser" />
	<method signature="void &lt;init&gt;(java.util.Date,java.lang.String,com.toedter.calendar.IDateEditor)" class="com.toedter.calendar.JDateChooser" />
	<method signature="void updateUI()" class="com.toedter.calendar.JDateChooser" />
	<method signature="void setMinSelectableDate(java.util.Date)" class="com.toedter.calendar.JDateChooser" />
	<method signature="java.lang.String getDateFormatString()" class="com.toedter.calendar.JDateChooser" />
	<method signature="void &lt;init&gt;(com.toedter.calendar.IDateEditor)" class="com.toedter.calendar.JDateChooser" />
	<method signature="void setDateFormatString(java.lang.String)" class="com.toedter.calendar.JDateChooser" />
	<method signature="java.util.Date getMinSelectableDate()" class="com.toedter.calendar.JDateChooser" />
	<method signature="com.toedter.calendar.JCalendar getJCalendar()" class="com.toedter.calendar.JDateChooser" />
	<method signature="com.toedter.calendar.IDateEditor getDateEditor()" class="com.toedter.calendar.JDateChooser" />
	<method signature="void &lt;init&gt;(java.util.Date,java.lang.String)" class="com.toedter.calendar.JDateChooser" />
	<method signature="boolean requestFocusInWindow()" class="com.toedter.calendar.JDateChooser" />
	<class name="org.apache.commons.lang3.time.DateFormatUtils" />
	<method signature="java.lang.String formatUTC(java.util.Date,java.lang.String)" class="org.apache.commons.lang3.time.DateFormatUtils" />
	<method signature="java.lang.String format(java.util.Calendar,java.lang.String,java.util.TimeZone,java.util.Locale)" class="org.apache.commons.lang3.time.DateFormatUtils" />
	<method signature="java.lang.String format(java.util.Calendar,java.lang.String)" class="org.apache.commons.lang3.time.DateFormatUtils" />
	<method signature="java.lang.String format(java.util.Date,java.lang.String,java.util.TimeZone,java.util.Locale)" class="org.apache.commons.lang3.time.DateFormatUtils" />
	<method signature="java.lang.String format(long,java.lang.String)" class="org.apache.commons.lang3.time.DateFormatUtils" />
	<method signature="java.lang.String format(java.util.Date,java.lang.String,java.util.TimeZone)" class="org.apache.commons.lang3.time.DateFormatUtils" />
	<method signature="java.lang.String format(java.util.Calendar,java.lang.String,java.util.TimeZone)" class="org.apache.commons.lang3.time.DateFormatUtils" />
	<method signature="java.lang.String format(java.util.Date,java.lang.String,java.util.Locale)" class="org.apache.commons.lang3.time.DateFormatUtils" />
	<method signature="java.lang.String formatUTC(long,java.lang.String,java.util.Locale)" class="org.apache.commons.lang3.time.DateFormatUtils" />
	<method signature="java.lang.String format(long,java.lang.String,java.util.Locale)" class="org.apache.commons.lang3.time.DateFormatUtils" />
	<method signature="java.lang.String formatUTC(java.util.Date,java.lang.String,java.util.Locale)" class="org.apache.commons.lang3.time.DateFormatUtils" />
	<method signature="java.lang.String formatUTC(long,java.lang.String)" class="org.apache.commons.lang3.time.DateFormatUtils" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.time.DateFormatUtils" />
	<method signature="java.lang.String format(long,java.lang.String,java.util.TimeZone,java.util.Locale)" class="org.apache.commons.lang3.time.DateFormatUtils" />
	<method signature="java.lang.String format(long,java.lang.String,java.util.TimeZone)" class="org.apache.commons.lang3.time.DateFormatUtils" />
	<method signature="java.lang.String format(java.util.Date,java.lang.String)" class="org.apache.commons.lang3.time.DateFormatUtils" />
	<method signature="java.lang.String format(java.util.Calendar,java.lang.String,java.util.Locale)" class="org.apache.commons.lang3.time.DateFormatUtils" />
	<class name="org.apache.xerces.impl.xs.XMLSchemaException" />
	<method signature="java.lang.String getKey()" class="org.apache.xerces.impl.xs.XMLSchemaException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Object[])" class="org.apache.xerces.impl.xs.XMLSchemaException" />
	<method signature="java.lang.Object[] getArgs()" class="org.apache.xerces.impl.xs.XMLSchemaException" />
	<class name="org.jfree.chart.block.CenterArrangement" />
	<method signature="org.jfree.ui.Size2D arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" class="org.jfree.chart.block.CenterArrangement" />
	<method signature="void add(org.jfree.chart.block.Block,java.lang.Object)" class="org.jfree.chart.block.CenterArrangement" />
	<method signature="void clear()" class="org.jfree.chart.block.CenterArrangement" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.block.CenterArrangement" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.block.CenterArrangement" />
	<class name="org.w3c.dom.html.HTMLIsIndexElement" />
	<method signature="void setPrompt(java.lang.String)" class="org.w3c.dom.html.HTMLIsIndexElement" />
	<method signature="java.lang.String getPrompt()" class="org.w3c.dom.html.HTMLIsIndexElement" />
	<method signature="org.w3c.dom.html.HTMLFormElement getForm()" class="org.w3c.dom.html.HTMLIsIndexElement" />
	<class name="org.apache.xerces.util.SoftReferenceSymbolTable$SREntry" />
	<method signature="void &lt;init&gt;(java.lang.String,org.apache.xerces.util.SoftReferenceSymbolTable$SREntry,int,java.lang.ref.ReferenceQueue)" class="org.apache.xerces.util.SoftReferenceSymbolTable$SREntry" />
	<method signature="void &lt;init&gt;(java.lang.String,char[],int,int,org.apache.xerces.util.SoftReferenceSymbolTable$SREntry,int,java.lang.ref.ReferenceQueue)" class="org.apache.xerces.util.SoftReferenceSymbolTable$SREntry" />
	<class name="javax.xml.validation.Schema" />
	<method signature="javax.xml.validation.Validator newValidator()" class="javax.xml.validation.Schema" />
	<method signature="javax.xml.validation.ValidatorHandler newValidatorHandler()" class="javax.xml.validation.Schema" />
	<class name="tourma.utils.web.WebMatchResult" />
	<method signature="java.lang.String getHTML(java.lang.String,java.lang.String)" class="tourma.utils.web.WebMatchResult" />
	<method signature="void &lt;init&gt;()" class="tourma.utils.web.WebMatchResult" />
	<method signature="java.lang.String getHTML()" class="tourma.utils.web.WebMatchResult" />
	<method signature="java.lang.String getHTML(java.util.Map)" class="tourma.utils.web.WebMatchResult" />
	<class name="org.jfree.chart.plot.Marker" />
	<method signature="void setOutlineStroke(java.awt.Stroke)" class="org.jfree.chart.plot.Marker" />
	<method signature="java.lang.String getLabel()" class="org.jfree.chart.plot.Marker" />
	<method signature="java.awt.Stroke getOutlineStroke()" class="org.jfree.chart.plot.Marker" />
	<method signature="void notifyListeners(org.jfree.chart.event.MarkerChangeEvent)" class="org.jfree.chart.plot.Marker" />
	<method signature="org.jfree.ui.TextAnchor getLabelTextAnchor()" class="org.jfree.chart.plot.Marker" />
	<method signature="void setOutlinePaint(java.awt.Paint)" class="org.jfree.chart.plot.Marker" />
	<method signature="void removeChangeListener(org.jfree.chart.event.MarkerChangeListener)" class="org.jfree.chart.plot.Marker" />
	<method signature="void setPaint(java.awt.Paint)" class="org.jfree.chart.plot.Marker" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.plot.Marker" />
	<method signature="java.util.EventListener[] getListeners(java.lang.Class)" class="org.jfree.chart.plot.Marker" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.plot.Marker" />
	<method signature="void setAlpha(float)" class="org.jfree.chart.plot.Marker" />
	<method signature="void setLabelOffset(org.jfree.ui.RectangleInsets)" class="org.jfree.chart.plot.Marker" />
	<method signature="void setLabelTextAnchor(org.jfree.ui.TextAnchor)" class="org.jfree.chart.plot.Marker" />
	<method signature="java.awt.Paint getOutlinePaint()" class="org.jfree.chart.plot.Marker" />
	<method signature="java.awt.Paint getLabelPaint()" class="org.jfree.chart.plot.Marker" />
	<method signature="java.awt.Paint getPaint()" class="org.jfree.chart.plot.Marker" />
	<method signature="void setLabelPaint(java.awt.Paint)" class="org.jfree.chart.plot.Marker" />
	<method signature="void setLabelFont(java.awt.Font)" class="org.jfree.chart.plot.Marker" />
	<method signature="org.jfree.ui.RectangleAnchor getLabelAnchor()" class="org.jfree.chart.plot.Marker" />
	<method signature="void setLabel(java.lang.String)" class="org.jfree.chart.plot.Marker" />
	<method signature="java.awt.Font getLabelFont()" class="org.jfree.chart.plot.Marker" />
	<method signature="void setLabelAnchor(org.jfree.ui.RectangleAnchor)" class="org.jfree.chart.plot.Marker" />
	<method signature="void setLabelOffsetType(org.jfree.ui.LengthAdjustmentType)" class="org.jfree.chart.plot.Marker" />
	<method signature="void setStroke(java.awt.Stroke)" class="org.jfree.chart.plot.Marker" />
	<method signature="void addChangeListener(org.jfree.chart.event.MarkerChangeListener)" class="org.jfree.chart.plot.Marker" />
	<method signature="float getAlpha()" class="org.jfree.chart.plot.Marker" />
	<method signature="org.jfree.ui.RectangleInsets getLabelOffset()" class="org.jfree.chart.plot.Marker" />
	<method signature="java.awt.Stroke getStroke()" class="org.jfree.chart.plot.Marker" />
	<method signature="org.jfree.ui.LengthAdjustmentType getLabelOffsetType()" class="org.jfree.chart.plot.Marker" />
	<class name="org.jfree.data.statistics.BoxAndWhiskerItem" />
	<method signature="java.util.List getOutliers()" class="org.jfree.data.statistics.BoxAndWhiskerItem" />
	<method signature="java.lang.Number getMedian()" class="org.jfree.data.statistics.BoxAndWhiskerItem" />
	<method signature="java.lang.Number getMinOutlier()" class="org.jfree.data.statistics.BoxAndWhiskerItem" />
	<method signature="java.lang.Number getMean()" class="org.jfree.data.statistics.BoxAndWhiskerItem" />
	<method signature="java.lang.Number getMinRegularValue()" class="org.jfree.data.statistics.BoxAndWhiskerItem" />
	<method signature="java.lang.Number getMaxRegularValue()" class="org.jfree.data.statistics.BoxAndWhiskerItem" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.statistics.BoxAndWhiskerItem" />
	<method signature="void &lt;init&gt;(java.lang.Number,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.Number,java.util.List)" class="org.jfree.data.statistics.BoxAndWhiskerItem" />
	<method signature="void &lt;init&gt;(double,double,double,double,double,double,double,double,java.util.List)" class="org.jfree.data.statistics.BoxAndWhiskerItem" />
	<method signature="java.lang.Number getQ3()" class="org.jfree.data.statistics.BoxAndWhiskerItem" />
	<method signature="java.lang.Number getMaxOutlier()" class="org.jfree.data.statistics.BoxAndWhiskerItem" />
	<method signature="java.lang.String toString()" class="org.jfree.data.statistics.BoxAndWhiskerItem" />
	<method signature="java.lang.Number getQ1()" class="org.jfree.data.statistics.BoxAndWhiskerItem" />
	<class name="com.google.zxing.aztec.AztecDetectorResult" />
	<method signature="int getNbLayers()" class="com.google.zxing.aztec.AztecDetectorResult" />
	<method signature="int getNbDatablocks()" class="com.google.zxing.aztec.AztecDetectorResult" />
	<method signature="void &lt;init&gt;(com.google.zxing.common.BitMatrix,com.google.zxing.ResultPoint[],boolean,int,int)" class="com.google.zxing.aztec.AztecDetectorResult" />
	<method signature="boolean isCompact()" class="com.google.zxing.aztec.AztecDetectorResult" />
	<class name="org.jfree.data.DomainInfo" />
	<method signature="org.jfree.data.Range getDomainBounds(boolean)" class="org.jfree.data.DomainInfo" />
	<method signature="double getDomainLowerBound(boolean)" class="org.jfree.data.DomainInfo" />
	<method signature="double getDomainUpperBound(boolean)" class="org.jfree.data.DomainInfo" />
	<class name="org.jfree.ui.DrawablePanel" />
	<method signature="java.awt.Dimension getMinimumSize()" class="org.jfree.ui.DrawablePanel" />
	<method signature="void &lt;init&gt;()" class="org.jfree.ui.DrawablePanel" />
	<method signature="java.awt.Dimension getPreferredSize()" class="org.jfree.ui.DrawablePanel" />
	<method signature="void setDrawable(org.jfree.ui.Drawable)" class="org.jfree.ui.DrawablePanel" />
	<method signature="boolean isOpaque()" class="org.jfree.ui.DrawablePanel" />
	<method signature="org.jfree.ui.Drawable getDrawable()" class="org.jfree.ui.DrawablePanel" />
	<class name="com.hexidec.ekit.action.StylesAction" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="com.hexidec.ekit.action.StylesAction" />
	<method signature="void &lt;init&gt;(javax.swing.JComboBox)" class="com.hexidec.ekit.action.StylesAction" />
	<class name="org.jfree.chart.renderer.OutlierListCollection" />
	<method signature="void setHighFarOut(boolean)" class="org.jfree.chart.renderer.OutlierListCollection" />
	<method signature="java.util.Iterator iterator()" class="org.jfree.chart.renderer.OutlierListCollection" />
	<method signature="boolean add(org.jfree.chart.renderer.Outlier)" class="org.jfree.chart.renderer.OutlierListCollection" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.OutlierListCollection" />
	<method signature="void setLowFarOut(boolean)" class="org.jfree.chart.renderer.OutlierListCollection" />
	<method signature="boolean isHighFarOut()" class="org.jfree.chart.renderer.OutlierListCollection" />
	<method signature="boolean isLowFarOut()" class="org.jfree.chart.renderer.OutlierListCollection" />
	<class name="org.apache.xerces.impl.dtd.models.CMBinOp" />
	<method signature="void &lt;init&gt;(int,org.apache.xerces.impl.dtd.models.CMNode,org.apache.xerces.impl.dtd.models.CMNode)" class="org.apache.xerces.impl.dtd.models.CMBinOp" />
	<method signature="boolean isNullable()" class="org.apache.xerces.impl.dtd.models.CMBinOp" />
	<class name="org.apache.wml.dom.WMLOptgroupElementImpl" />
	<method signature="java.lang.String getTitle()" class="org.apache.wml.dom.WMLOptgroupElementImpl" />
	<method signature="java.lang.String getXmlLang()" class="org.apache.wml.dom.WMLOptgroupElementImpl" />
	<method signature="void setXmlLang(java.lang.String)" class="org.apache.wml.dom.WMLOptgroupElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.wml.dom.WMLDocumentImpl,java.lang.String)" class="org.apache.wml.dom.WMLOptgroupElementImpl" />
	<method signature="java.lang.String getId()" class="org.apache.wml.dom.WMLOptgroupElementImpl" />
	<method signature="java.lang.String getClassName()" class="org.apache.wml.dom.WMLOptgroupElementImpl" />
	<method signature="void setClassName(java.lang.String)" class="org.apache.wml.dom.WMLOptgroupElementImpl" />
	<method signature="void setTitle(java.lang.String)" class="org.apache.wml.dom.WMLOptgroupElementImpl" />
	<method signature="void setId(java.lang.String)" class="org.apache.wml.dom.WMLOptgroupElementImpl" />
	<class name="com.google.zxing.pdf417.encoder.PDF417Writer" />
	<method signature="com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map)" class="com.google.zxing.pdf417.encoder.PDF417Writer" />
	<method signature="com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int)" class="com.google.zxing.pdf417.encoder.PDF417Writer" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.pdf417.encoder.PDF417Writer" />
	<method signature="com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,boolean,int,int,int,int,int,int,com.google.zxing.pdf417.encoder.Compaction)" class="com.google.zxing.pdf417.encoder.PDF417Writer" />
	<class name="org.jfree.date.EasterSundayRule" />
	<method signature="org.jfree.date.SerialDate getDate(int)" class="org.jfree.date.EasterSundayRule" />
	<method signature="void &lt;init&gt;()" class="org.jfree.date.EasterSundayRule" />
	<class name="org.jfree.chart.labels.XYZToolTipGenerator" />
	<method signature="java.lang.String generateToolTip(org.jfree.data.xy.XYZDataset,int,int)" class="org.jfree.chart.labels.XYZToolTipGenerator" />
	<class name="org.apache.wml.dom.WMLFieldsetElementImpl" />
	<method signature="java.lang.String getTitle()" class="org.apache.wml.dom.WMLFieldsetElementImpl" />
	<method signature="java.lang.String getXmlLang()" class="org.apache.wml.dom.WMLFieldsetElementImpl" />
	<method signature="void setXmlLang(java.lang.String)" class="org.apache.wml.dom.WMLFieldsetElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.wml.dom.WMLDocumentImpl,java.lang.String)" class="org.apache.wml.dom.WMLFieldsetElementImpl" />
	<method signature="java.lang.String getId()" class="org.apache.wml.dom.WMLFieldsetElementImpl" />
	<method signature="java.lang.String getClassName()" class="org.apache.wml.dom.WMLFieldsetElementImpl" />
	<method signature="void setClassName(java.lang.String)" class="org.apache.wml.dom.WMLFieldsetElementImpl" />
	<method signature="void setTitle(java.lang.String)" class="org.apache.wml.dom.WMLFieldsetElementImpl" />
	<method signature="void setId(java.lang.String)" class="org.apache.wml.dom.WMLFieldsetElementImpl" />
	<class name="org.apache.xerces.impl.XMLEntityScanner" />
	<method signature="java.lang.String scanName()" class="org.apache.xerces.impl.XMLEntityScanner" />
	<method signature="int getLineNumber()" class="org.apache.xerces.impl.XMLEntityScanner" />
	<method signature="void setCurrentEntity(org.apache.xerces.impl.XMLEntityManager$ScannedEntity)" class="org.apache.xerces.impl.XMLEntityScanner" />
	<method signature="java.lang.String getLiteralSystemId()" class="org.apache.xerces.impl.XMLEntityScanner" />
	<method signature="java.lang.String scanNmtoken()" class="org.apache.xerces.impl.XMLEntityScanner" />
	<method signature="void setEncoding(java.lang.String)" class="org.apache.xerces.impl.XMLEntityScanner" />
	<method signature="java.lang.String getEncoding()" class="org.apache.xerces.impl.XMLEntityScanner" />
	<method signature="int peekChar()" class="org.apache.xerces.impl.XMLEntityScanner" />
	<method signature="java.lang.String getExpandedSystemId()" class="org.apache.xerces.impl.XMLEntityScanner" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.XMLEntityScanner" />
	<method signature="boolean skipSpaces()" class="org.apache.xerces.impl.XMLEntityScanner" />
	<method signature="boolean isExternal()" class="org.apache.xerces.impl.XMLEntityScanner" />
	<method signature="int getColumnNumber()" class="org.apache.xerces.impl.XMLEntityScanner" />
	<method signature="boolean scanData(java.lang.String,org.apache.xerces.util.XMLStringBuffer)" class="org.apache.xerces.impl.XMLEntityScanner" />
	<method signature="int scanChar()" class="org.apache.xerces.impl.XMLEntityScanner" />
	<method signature="int scanContent(org.apache.xerces.xni.XMLString)" class="org.apache.xerces.impl.XMLEntityScanner" />
	<method signature="boolean skipDeclSpaces()" class="org.apache.xerces.impl.XMLEntityScanner" />
	<method signature="int scanLiteral(int,org.apache.xerces.xni.XMLString)" class="org.apache.xerces.impl.XMLEntityScanner" />
	<method signature="java.lang.String getPublicId()" class="org.apache.xerces.impl.XMLEntityScanner" />
	<method signature="void reset(org.apache.xerces.util.SymbolTable,org.apache.xerces.impl.XMLEntityManager,org.apache.xerces.impl.XMLErrorReporter)" class="org.apache.xerces.impl.XMLEntityScanner" />
	<method signature="java.lang.String getBaseSystemId()" class="org.apache.xerces.impl.XMLEntityScanner" />
	<method signature="int getCharacterOffset()" class="org.apache.xerces.impl.XMLEntityScanner" />
	<method signature="void setXMLVersion(java.lang.String)" class="org.apache.xerces.impl.XMLEntityScanner" />
	<method signature="java.lang.String scanNCName()" class="org.apache.xerces.impl.XMLEntityScanner" />
	<method signature="boolean skipChar(int)" class="org.apache.xerces.impl.XMLEntityScanner" />
	<method signature="boolean scanQName(org.apache.xerces.xni.QName)" class="org.apache.xerces.impl.XMLEntityScanner" />
	<method signature="void setBufferSize(int)" class="org.apache.xerces.impl.XMLEntityScanner" />
	<method signature="boolean skipString(java.lang.String)" class="org.apache.xerces.impl.XMLEntityScanner" />
	<method signature="java.lang.String getXMLVersion()" class="org.apache.xerces.impl.XMLEntityScanner" />
	<class name="org.apache.xerces.xs.LSInputList" />
	<method signature="int getLength()" class="org.apache.xerces.xs.LSInputList" />
	<method signature="org.w3c.dom.ls.LSInput item(int)" class="org.apache.xerces.xs.LSInputList" />
	<class name="org.w3c.dom.DOMLocator" />
	<method signature="int getUtf16Offset()" class="org.w3c.dom.DOMLocator" />
	<method signature="int getLineNumber()" class="org.w3c.dom.DOMLocator" />
	<method signature="int getByteOffset()" class="org.w3c.dom.DOMLocator" />
	<method signature="java.lang.String getUri()" class="org.w3c.dom.DOMLocator" />
	<method signature="int getColumnNumber()" class="org.w3c.dom.DOMLocator" />
	<method signature="org.w3c.dom.Node getRelatedNode()" class="org.w3c.dom.DOMLocator" />
	<class name="freemarker.core.CustomAttribute" />
	<method signature="void &lt;init&gt;(int)" class="freemarker.core.CustomAttribute" />
	<method signature="void set(java.lang.Object)" class="freemarker.core.CustomAttribute" />
	<method signature="java.lang.Object get(freemarker.template.Template)" class="freemarker.core.CustomAttribute" />
	<method signature="void set(java.lang.Object,freemarker.template.Template)" class="freemarker.core.CustomAttribute" />
	<method signature="java.lang.Object get()" class="freemarker.core.CustomAttribute" />
	<class name="org.jfree.util.ReadOnlyIterator" />
	<method signature="void remove()" class="org.jfree.util.ReadOnlyIterator" />
	<method signature="boolean hasNext()" class="org.jfree.util.ReadOnlyIterator" />
	<method signature="java.lang.Object next()" class="org.jfree.util.ReadOnlyIterator" />
	<method signature="void &lt;init&gt;(java.util.Iterator)" class="org.jfree.util.ReadOnlyIterator" />
	<class name="org.w3c.dom.html.HTMLHtmlElement" />
	<method signature="java.lang.String getVersion()" class="org.w3c.dom.html.HTMLHtmlElement" />
	<method signature="void setVersion(java.lang.String)" class="org.w3c.dom.html.HTMLHtmlElement" />
	<class name="com.google.zxing.ReaderException" />
	<method signature="java.lang.Throwable fillInStackTrace()" class="com.google.zxing.ReaderException" />
	<class name="org.apache.commons.lang3.mutable.MutableBoolean" />
	<method signature="int compareTo(java.lang.Object)" class="org.apache.commons.lang3.mutable.MutableBoolean" />
	<method signature="void &lt;init&gt;(java.lang.Boolean)" class="org.apache.commons.lang3.mutable.MutableBoolean" />
	<method signature="void setValue(boolean)" class="org.apache.commons.lang3.mutable.MutableBoolean" />
	<method signature="int hashCode()" class="org.apache.commons.lang3.mutable.MutableBoolean" />
	<method signature="boolean booleanValue()" class="org.apache.commons.lang3.mutable.MutableBoolean" />
	<method signature="void setFalse()" class="org.apache.commons.lang3.mutable.MutableBoolean" />
	<method signature="boolean isTrue()" class="org.apache.commons.lang3.mutable.MutableBoolean" />
	<method signature="boolean equals(java.lang.Object)" class="org.apache.commons.lang3.mutable.MutableBoolean" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.mutable.MutableBoolean" />
	<method signature="boolean isFalse()" class="org.apache.commons.lang3.mutable.MutableBoolean" />
	<method signature="void setValue(java.lang.Object)" class="org.apache.commons.lang3.mutable.MutableBoolean" />
	<method signature="java.lang.String toString()" class="org.apache.commons.lang3.mutable.MutableBoolean" />
	<method signature="java.lang.Object getValue()" class="org.apache.commons.lang3.mutable.MutableBoolean" />
	<method signature="void &lt;init&gt;(boolean)" class="org.apache.commons.lang3.mutable.MutableBoolean" />
	<method signature="void setTrue()" class="org.apache.commons.lang3.mutable.MutableBoolean" />
	<method signature="void setValue(java.lang.Boolean)" class="org.apache.commons.lang3.mutable.MutableBoolean" />
	<method signature="java.lang.Boolean getValue()" class="org.apache.commons.lang3.mutable.MutableBoolean" />
	<method signature="java.lang.Boolean toBoolean()" class="org.apache.commons.lang3.mutable.MutableBoolean" />
	<method signature="int compareTo(org.apache.commons.lang3.mutable.MutableBoolean)" class="org.apache.commons.lang3.mutable.MutableBoolean" />
	<class name="javax.xml.transform.ErrorListener" />
	<method signature="void warning(javax.xml.transform.TransformerException)" class="javax.xml.transform.ErrorListener" />
	<method signature="void error(javax.xml.transform.TransformerException)" class="javax.xml.transform.ErrorListener" />
	<method signature="void fatalError(javax.xml.transform.TransformerException)" class="javax.xml.transform.ErrorListener" />
	<class name="org.jfree.chart.axis.AxisState" />
	<method signature="void setTicks(java.util.List)" class="org.jfree.chart.axis.AxisState" />
	<method signature="void setCursor(double)" class="org.jfree.chart.axis.AxisState" />
	<method signature="void cursorRight(double)" class="org.jfree.chart.axis.AxisState" />
	<method signature="java.util.List getTicks()" class="org.jfree.chart.axis.AxisState" />
	<method signature="double getCursor()" class="org.jfree.chart.axis.AxisState" />
	<method signature="void &lt;init&gt;(double)" class="org.jfree.chart.axis.AxisState" />
	<method signature="void cursorUp(double)" class="org.jfree.chart.axis.AxisState" />
	<method signature="void cursorDown(double)" class="org.jfree.chart.axis.AxisState" />
	<method signature="void cursorLeft(double)" class="org.jfree.chart.axis.AxisState" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.axis.AxisState" />
	<method signature="void moveCursor(double,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.axis.AxisState" />
	<method signature="double getMax()" class="org.jfree.chart.axis.AxisState" />
	<method signature="void setMax(double)" class="org.jfree.chart.axis.AxisState" />
	<class name="org.jfree.ui.about.LibraryTableModel" />
	<method signature="void &lt;init&gt;(java.util.List)" class="org.jfree.ui.about.LibraryTableModel" />
	<method signature="int getRowCount()" class="org.jfree.ui.about.LibraryTableModel" />
	<method signature="java.lang.String getColumnName(int)" class="org.jfree.ui.about.LibraryTableModel" />
	<method signature="org.jfree.base.Library[] getLibraries()" class="org.jfree.ui.about.LibraryTableModel" />
	<method signature="java.lang.Object getValueAt(int,int)" class="org.jfree.ui.about.LibraryTableModel" />
	<method signature="int getColumnCount()" class="org.jfree.ui.about.LibraryTableModel" />
	<class name="org.jfree.chart.axis.LogarithmicAxis" />
	<method signature="double switchedPow10(double)" class="org.jfree.chart.axis.LogarithmicAxis" />
	<method signature="void setStrictValuesFlag(boolean)" class="org.jfree.chart.axis.LogarithmicAxis" />
	<method signature="boolean getAllowNegativesFlag()" class="org.jfree.chart.axis.LogarithmicAxis" />
	<method signature="boolean getAutoRangeNextLogFlag()" class="org.jfree.chart.axis.LogarithmicAxis" />
	<method signature="void setRange(org.jfree.data.Range)" class="org.jfree.chart.axis.LogarithmicAxis" />
	<method signature="double adjustedLog10(double)" class="org.jfree.chart.axis.LogarithmicAxis" />
	<method signature="boolean getExpTickLabelsFlag()" class="org.jfree.chart.axis.LogarithmicAxis" />
	<method signature="void setAutoRangeNextLogFlag(boolean)" class="org.jfree.chart.axis.LogarithmicAxis" />
	<method signature="double adjustedPow10(double)" class="org.jfree.chart.axis.LogarithmicAxis" />
	<method signature="boolean getLog10TickLabelsFlag()" class="org.jfree.chart.axis.LogarithmicAxis" />
	<method signature="double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.axis.LogarithmicAxis" />
	<method signature="void setLog10TickLabelsFlag(boolean)" class="org.jfree.chart.axis.LogarithmicAxis" />
	<method signature="void setAllowNegativesFlag(boolean)" class="org.jfree.chart.axis.LogarithmicAxis" />
	<method signature="void autoAdjustRange()" class="org.jfree.chart.axis.LogarithmicAxis" />
	<method signature="boolean getStrictValuesFlag()" class="org.jfree.chart.axis.LogarithmicAxis" />
	<method signature="void setExpTickLabelsFlag(boolean)" class="org.jfree.chart.axis.LogarithmicAxis" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.chart.axis.LogarithmicAxis" />
	<method signature="double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.axis.LogarithmicAxis" />
	<method signature="void zoomRange(double,double)" class="org.jfree.chart.axis.LogarithmicAxis" />
	<class name="org.xml.sax.Locator" />
	<method signature="java.lang.String getSystemId()" class="org.xml.sax.Locator" />
	<method signature="int getLineNumber()" class="org.xml.sax.Locator" />
	<method signature="java.lang.String getPublicId()" class="org.xml.sax.Locator" />
	<method signature="int getColumnNumber()" class="org.xml.sax.Locator" />
	<class name="org.xml.sax.DocumentHandler" />
	<method signature="void startElement(java.lang.String,org.xml.sax.AttributeList)" class="org.xml.sax.DocumentHandler" />
	<method signature="void endElement(java.lang.String)" class="org.xml.sax.DocumentHandler" />
	<method signature="void characters(char[],int,int)" class="org.xml.sax.DocumentHandler" />
	<method signature="void startDocument()" class="org.xml.sax.DocumentHandler" />
	<method signature="void endDocument()" class="org.xml.sax.DocumentHandler" />
	<method signature="void ignorableWhitespace(char[],int,int)" class="org.xml.sax.DocumentHandler" />
	<method signature="void processingInstruction(java.lang.String,java.lang.String)" class="org.xml.sax.DocumentHandler" />
	<method signature="void setDocumentLocator(org.xml.sax.Locator)" class="org.xml.sax.DocumentHandler" />
	<class name="org.jfree.chart.axis.Tick" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.axis.Tick" />
	<method signature="void &lt;init&gt;(java.lang.String,org.jfree.ui.TextAnchor,org.jfree.ui.TextAnchor,double)" class="org.jfree.chart.axis.Tick" />
	<method signature="java.lang.String getText()" class="org.jfree.chart.axis.Tick" />
	<method signature="org.jfree.ui.TextAnchor getRotationAnchor()" class="org.jfree.chart.axis.Tick" />
	<method signature="double getAngle()" class="org.jfree.chart.axis.Tick" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.axis.Tick" />
	<method signature="org.jfree.ui.TextAnchor getTextAnchor()" class="org.jfree.chart.axis.Tick" />
	<method signature="java.lang.String toString()" class="org.jfree.chart.axis.Tick" />
	<class name="tourma.utils.web.WebRound" />
	<method signature="java.lang.String getHTML(int)" class="tourma.utils.web.WebRound" />
	<method signature="void &lt;init&gt;()" class="tourma.utils.web.WebRound" />
	<class name="org.apache.html.dom.HTMLTableColElementImpl" />
	<method signature="void setAlign(java.lang.String)" class="org.apache.html.dom.HTMLTableColElementImpl" />
	<method signature="java.lang.String getCh()" class="org.apache.html.dom.HTMLTableColElementImpl" />
	<method signature="void setSpan(int)" class="org.apache.html.dom.HTMLTableColElementImpl" />
	<method signature="void setVAlign(java.lang.String)" class="org.apache.html.dom.HTMLTableColElementImpl" />
	<method signature="java.lang.String getWidth()" class="org.apache.html.dom.HTMLTableColElementImpl" />
	<method signature="java.lang.String getAlign()" class="org.apache.html.dom.HTMLTableColElementImpl" />
	<method signature="void setChOff(java.lang.String)" class="org.apache.html.dom.HTMLTableColElementImpl" />
	<method signature="int getSpan()" class="org.apache.html.dom.HTMLTableColElementImpl" />
	<method signature="void setCh(java.lang.String)" class="org.apache.html.dom.HTMLTableColElementImpl" />
	<method signature="java.lang.String getChOff()" class="org.apache.html.dom.HTMLTableColElementImpl" />
	<method signature="void setWidth(java.lang.String)" class="org.apache.html.dom.HTMLTableColElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLTableColElementImpl" />
	<method signature="java.lang.String getVAlign()" class="org.apache.html.dom.HTMLTableColElementImpl" />
	<class name="org.jfree.chart.plot.CategoryCrosshairState" />
	<method signature="void updateCrosshairX(java.lang.Comparable,java.lang.Comparable,int,double,org.jfree.chart.plot.PlotOrientation)" class="org.jfree.chart.plot.CategoryCrosshairState" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.plot.CategoryCrosshairState" />
	<method signature="java.lang.Comparable getRowKey()" class="org.jfree.chart.plot.CategoryCrosshairState" />
	<method signature="void setRowKey(java.lang.Comparable)" class="org.jfree.chart.plot.CategoryCrosshairState" />
	<method signature="void updateCrosshairPoint(java.lang.Comparable,java.lang.Comparable,double,int,double,double,org.jfree.chart.plot.PlotOrientation)" class="org.jfree.chart.plot.CategoryCrosshairState" />
	<method signature="void setColumnKey(java.lang.Comparable)" class="org.jfree.chart.plot.CategoryCrosshairState" />
	<method signature="java.lang.Comparable getColumnKey()" class="org.jfree.chart.plot.CategoryCrosshairState" />
	<class name="org.jfree.data.time.DateRange" />
	<method signature="void &lt;init&gt;(java.util.Date,java.util.Date)" class="org.jfree.data.time.DateRange" />
	<method signature="long getLowerMillis()" class="org.jfree.data.time.DateRange" />
	<method signature="java.util.Date getUpperDate()" class="org.jfree.data.time.DateRange" />
	<method signature="java.util.Date getLowerDate()" class="org.jfree.data.time.DateRange" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.time.DateRange" />
	<method signature="java.lang.String toString()" class="org.jfree.data.time.DateRange" />
	<method signature="void &lt;init&gt;(org.jfree.data.Range)" class="org.jfree.data.time.DateRange" />
	<method signature="long getUpperMillis()" class="org.jfree.data.time.DateRange" />
	<method signature="void &lt;init&gt;(double,double)" class="org.jfree.data.time.DateRange" />
	<class name="tourma.tableModel.MjtMatches" />
	<method signature="boolean isCellEditable(int,int)" class="tourma.tableModel.MjtMatches" />
	<method signature="java.awt.Component getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)" class="tourma.tableModel.MjtMatches" />
	<method signature="int getRowCount()" class="tourma.tableModel.MjtMatches" />
	<method signature="void setValueAt(java.lang.Object,int,int)" class="tourma.tableModel.MjtMatches" />
	<method signature="java.lang.String getColumnName(int)" class="tourma.tableModel.MjtMatches" />
	<method signature="java.lang.Class getColumnClass(int)" class="tourma.tableModel.MjtMatches" />
	<method signature="void &lt;init&gt;(java.util.ArrayList,boolean,boolean,boolean,boolean)" class="tourma.tableModel.MjtMatches" />
	<method signature="java.lang.Object getValueAt(int,int)" class="tourma.tableModel.MjtMatches" />
	<method signature="int getColumnCount()" class="tourma.tableModel.MjtMatches" />
	<class name="freemarker.ext.beans.ArrayModel" />
	<method signature="int size()" class="freemarker.ext.beans.ArrayModel" />
	<method signature="boolean isEmpty()" class="freemarker.ext.beans.ArrayModel" />
	<method signature="void &lt;init&gt;(java.lang.Object,freemarker.ext.beans.BeansWrapper)" class="freemarker.ext.beans.ArrayModel" />
	<method signature="freemarker.template.TemplateModel get(int)" class="freemarker.ext.beans.ArrayModel" />
	<method signature="freemarker.template.TemplateModelIterator iterator()" class="freemarker.ext.beans.ArrayModel" />
	<class name="org.w3c.dom.html.HTMLTitleElement" />
	<method signature="java.lang.String getText()" class="org.w3c.dom.html.HTMLTitleElement" />
	<method signature="void setText(java.lang.String)" class="org.w3c.dom.html.HTMLTitleElement" />
	<class name="org.apache.xerces.impl.xpath.XPath$LocationPath" />
	<method signature="java.lang.Object clone()" class="org.apache.xerces.impl.xpath.XPath$LocationPath" />
	<method signature="java.lang.String toString()" class="org.apache.xerces.impl.xpath.XPath$LocationPath" />
	<method signature="void &lt;init&gt;(org.apache.xerces.impl.xpath.XPath$Step[])" class="org.apache.xerces.impl.xpath.XPath$LocationPath" />
	<class name="org.apache.xerces.dom3.as.ASDataType" />
	<method signature="short getDataType()" class="org.apache.xerces.dom3.as.ASDataType" />
	<class name="org.w3c.dom.events.MutationEvent" />
	<method signature="java.lang.String getPrevValue()" class="org.w3c.dom.events.MutationEvent" />
	<method signature="void initMutationEvent(java.lang.String,boolean,boolean,org.w3c.dom.Node,java.lang.String,java.lang.String,java.lang.String,short)" class="org.w3c.dom.events.MutationEvent" />
	<method signature="java.lang.String getAttrName()" class="org.w3c.dom.events.MutationEvent" />
	<method signature="org.w3c.dom.Node getRelatedNode()" class="org.w3c.dom.events.MutationEvent" />
	<method signature="java.lang.String getNewValue()" class="org.w3c.dom.events.MutationEvent" />
	<method signature="short getAttrChange()" class="org.w3c.dom.events.MutationEvent" />
	<class name="fi.iki.elonen.NanoHTTPD" />
	<method signature="void setTempFileManagerFactory(fi.iki.elonen.NanoHTTPD$TempFileManagerFactory)" class="fi.iki.elonen.NanoHTTPD" />
	<method signature="boolean isAlive()" class="fi.iki.elonen.NanoHTTPD" />
	<method signature="void stop()" class="fi.iki.elonen.NanoHTTPD" />
	<method signature="void &lt;init&gt;(java.lang.String,int)" class="fi.iki.elonen.NanoHTTPD" />
	<method signature="void start()" class="fi.iki.elonen.NanoHTTPD" />
	<method signature="fi.iki.elonen.NanoHTTPD$Response newFixedLengthResponse(java.lang.String)" class="fi.iki.elonen.NanoHTTPD" />
	<method signature="fi.iki.elonen.NanoHTTPD$Response serve(fi.iki.elonen.NanoHTTPD$IHTTPSession)" class="fi.iki.elonen.NanoHTTPD" />
	<method signature="void makeSecure(javax.net.ssl.SSLServerSocketFactory)" class="fi.iki.elonen.NanoHTTPD" />
	<method signature="void closeAllConnections()" class="fi.iki.elonen.NanoHTTPD" />
	<method signature="void setAsyncRunner(fi.iki.elonen.NanoHTTPD$AsyncRunner)" class="fi.iki.elonen.NanoHTTPD" />
	<method signature="fi.iki.elonen.NanoHTTPD$Response newChunkedResponse(fi.iki.elonen.NanoHTTPD$Response$IStatus,java.lang.String,java.io.InputStream)" class="fi.iki.elonen.NanoHTTPD" />
	<method signature="fi.iki.elonen.NanoHTTPD$Response newFixedLengthResponse(fi.iki.elonen.NanoHTTPD$Response$IStatus,java.lang.String,java.lang.String)" class="fi.iki.elonen.NanoHTTPD" />
	<method signature="javax.net.ssl.SSLServerSocketFactory makeSSLSocketFactory(java.lang.String,char[])" class="fi.iki.elonen.NanoHTTPD" />
	<method signature="javax.net.ssl.SSLServerSocketFactory makeSSLSocketFactory(java.security.KeyStore,javax.net.ssl.KeyManager[])" class="fi.iki.elonen.NanoHTTPD" />
	<method signature="javax.net.ssl.SSLServerSocketFactory makeSSLSocketFactory(java.security.KeyStore,javax.net.ssl.KeyManagerFactory)" class="fi.iki.elonen.NanoHTTPD" />
	<method signature="int getListeningPort()" class="fi.iki.elonen.NanoHTTPD" />
	<method signature="fi.iki.elonen.NanoHTTPD$Response newFixedLengthResponse(fi.iki.elonen.NanoHTTPD$Response$IStatus,java.lang.String,java.io.InputStream,long)" class="fi.iki.elonen.NanoHTTPD" />
	<method signature="void &lt;init&gt;(int)" class="fi.iki.elonen.NanoHTTPD" />
	<method signature="void start(int)" class="fi.iki.elonen.NanoHTTPD" />
	<method signature="boolean wasStarted()" class="fi.iki.elonen.NanoHTTPD" />
	<method signature="fi.iki.elonen.NanoHTTPD$Response serve(java.lang.String,fi.iki.elonen.NanoHTTPD$Method,java.util.Map,java.util.Map,java.util.Map)" class="fi.iki.elonen.NanoHTTPD" />
	<class name="org.jfree.chart.editor.ChartEditorManager" />
	<method signature="void setChartEditorFactory(org.jfree.chart.editor.ChartEditorFactory)" class="org.jfree.chart.editor.ChartEditorManager" />
	<method signature="org.jfree.chart.editor.ChartEditor getChartEditor(org.jfree.chart.JFreeChart)" class="org.jfree.chart.editor.ChartEditorManager" />
	<method signature="org.jfree.chart.editor.ChartEditorFactory getChartEditorFactory()" class="org.jfree.chart.editor.ChartEditorManager" />
	<class name="org.apache.wml.WMLBElement" />
	<method signature="java.lang.String getXmlLang()" class="org.apache.wml.WMLBElement" />
	<method signature="void setXmlLang(java.lang.String)" class="org.apache.wml.WMLBElement" />
	<class name="org.apache.commons.lang3.builder.Diff" />
	<method signature="java.lang.reflect.Type getType()" class="org.apache.commons.lang3.builder.Diff" />
	<method signature="java.lang.String toString()" class="org.apache.commons.lang3.builder.Diff" />
	<method signature="java.lang.String getFieldName()" class="org.apache.commons.lang3.builder.Diff" />
	<method signature="java.lang.Object setValue(java.lang.Object)" class="org.apache.commons.lang3.builder.Diff" />
	<class name="org.apache.commons.lang3.concurrent.BasicThreadFactory" />
	<method signature="long getThreadCount()" class="org.apache.commons.lang3.concurrent.BasicThreadFactory" />
	<method signature="java.lang.Boolean getDaemonFlag()" class="org.apache.commons.lang3.concurrent.BasicThreadFactory" />
	<method signature="java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()" class="org.apache.commons.lang3.concurrent.BasicThreadFactory" />
	<method signature="java.lang.String getNamingPattern()" class="org.apache.commons.lang3.concurrent.BasicThreadFactory" />
	<method signature="java.lang.Thread newThread(java.lang.Runnable)" class="org.apache.commons.lang3.concurrent.BasicThreadFactory" />
	<method signature="java.lang.Integer getPriority()" class="org.apache.commons.lang3.concurrent.BasicThreadFactory" />
	<method signature="java.util.concurrent.ThreadFactory getWrappedFactory()" class="org.apache.commons.lang3.concurrent.BasicThreadFactory" />
	<class name="freemarker.debug.DebuggedEnvironment" />
	<method signature="void resume()" class="freemarker.debug.DebuggedEnvironment" />
	<method signature="void stop()" class="freemarker.debug.DebuggedEnvironment" />
	<method signature="long getId()" class="freemarker.debug.DebuggedEnvironment" />
	<class name="freemarker.template.utility.DateUtil$TrivialDateToISO8601CalendarFactory" />
	<method signature="java.util.GregorianCalendar get(java.util.TimeZone,java.util.Date)" class="freemarker.template.utility.DateUtil$TrivialDateToISO8601CalendarFactory" />
	<method signature="void &lt;init&gt;()" class="freemarker.template.utility.DateUtil$TrivialDateToISO8601CalendarFactory" />
	<class name="org.w3c.dom.html.HTMLAppletElement" />
	<method signature="void setAlign(java.lang.String)" class="org.w3c.dom.html.HTMLAppletElement" />
	<method signature="java.lang.String getObject()" class="org.w3c.dom.html.HTMLAppletElement" />
	<method signature="java.lang.String getName()" class="org.w3c.dom.html.HTMLAppletElement" />
	<method signature="java.lang.String getCodeBase()" class="org.w3c.dom.html.HTMLAppletElement" />
	<method signature="java.lang.String getWidth()" class="org.w3c.dom.html.HTMLAppletElement" />
	<method signature="java.lang.String getAlign()" class="org.w3c.dom.html.HTMLAppletElement" />
	<method signature="java.lang.String getHspace()" class="org.w3c.dom.html.HTMLAppletElement" />
	<method signature="java.lang.String getHeight()" class="org.w3c.dom.html.HTMLAppletElement" />
	<method signature="void setArchive(java.lang.String)" class="org.w3c.dom.html.HTMLAppletElement" />
	<method signature="void setCode(java.lang.String)" class="org.w3c.dom.html.HTMLAppletElement" />
	<method signature="void setAlt(java.lang.String)" class="org.w3c.dom.html.HTMLAppletElement" />
	<method signature="void setVspace(java.lang.String)" class="org.w3c.dom.html.HTMLAppletElement" />
	<method signature="void setName(java.lang.String)" class="org.w3c.dom.html.HTMLAppletElement" />
	<method signature="java.lang.String getArchive()" class="org.w3c.dom.html.HTMLAppletElement" />
	<method signature="void setCodeBase(java.lang.String)" class="org.w3c.dom.html.HTMLAppletElement" />
	<method signature="java.lang.String getAlt()" class="org.w3c.dom.html.HTMLAppletElement" />
	<method signature="void setHeight(java.lang.String)" class="org.w3c.dom.html.HTMLAppletElement" />
	<method signature="void setHspace(java.lang.String)" class="org.w3c.dom.html.HTMLAppletElement" />
	<method signature="void setObject(java.lang.String)" class="org.w3c.dom.html.HTMLAppletElement" />
	<method signature="void setWidth(java.lang.String)" class="org.w3c.dom.html.HTMLAppletElement" />
	<method signature="java.lang.String getCode()" class="org.w3c.dom.html.HTMLAppletElement" />
	<method signature="java.lang.String getVspace()" class="org.w3c.dom.html.HTMLAppletElement" />
	<class name="org.apache.xerces.impl.dv.xs.IntegerDV" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.xs.IntegerDV" />
	<method signature="java.lang.Object getActualValue(java.lang.String,org.apache.xerces.impl.dv.ValidationContext)" class="org.apache.xerces.impl.dv.xs.IntegerDV" />
	<class name="org.apache.xerces.impl.dv.xs.YearDV" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.xs.YearDV" />
	<method signature="java.lang.Object getActualValue(java.lang.String,org.apache.xerces.impl.dv.ValidationContext)" class="org.apache.xerces.impl.dv.xs.YearDV" />
	<class name="org.apache.commons.lang3.text.StrLookup" />
	<method signature="org.apache.commons.lang3.text.StrLookup systemPropertiesLookup()" class="org.apache.commons.lang3.text.StrLookup" />
	<method signature="org.apache.commons.lang3.text.StrLookup noneLookup()" class="org.apache.commons.lang3.text.StrLookup" />
	<method signature="org.apache.commons.lang3.text.StrLookup mapLookup(java.util.Map)" class="org.apache.commons.lang3.text.StrLookup" />
	<method signature="java.lang.String lookup(java.lang.String)" class="org.apache.commons.lang3.text.StrLookup" />
	<class name="org.jdom2.input.sax.XMLReaderSAX2Factory" />
	<method signature="java.lang.String getDriverClassName()" class="org.jdom2.input.sax.XMLReaderSAX2Factory" />
	<method signature="boolean isValidating()" class="org.jdom2.input.sax.XMLReaderSAX2Factory" />
	<method signature="void &lt;init&gt;(boolean,java.lang.String)" class="org.jdom2.input.sax.XMLReaderSAX2Factory" />
	<method signature="void &lt;init&gt;(boolean)" class="org.jdom2.input.sax.XMLReaderSAX2Factory" />
	<method signature="org.xml.sax.XMLReader createXMLReader()" class="org.jdom2.input.sax.XMLReaderSAX2Factory" />
	<class name="org.jdom2.input.sax.SAXHandler" />
	<method signature="void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" class="org.jdom2.input.sax.SAXHandler" />
	<method signature="org.jdom2.Element getCurrentElement()" class="org.jdom2.input.sax.SAXHandler" />
	<method signature="void reset()" class="org.jdom2.input.sax.SAXHandler" />
	<method signature="boolean getIgnoringBoundaryWhitespace()" class="org.jdom2.input.sax.SAXHandler" />
	<method signature="void startPrefixMapping(java.lang.String,java.lang.String)" class="org.jdom2.input.sax.SAXHandler" />
	<method signature="void externalEntityDecl(java.lang.String,java.lang.String,java.lang.String)" class="org.jdom2.input.sax.SAXHandler" />
	<method signature="void notationDecl(java.lang.String,java.lang.String,java.lang.String)" class="org.jdom2.input.sax.SAXHandler" />
	<method signature="org.jdom2.JDOMFactory getFactory()" class="org.jdom2.input.sax.SAXHandler" />
	<method signature="void unparsedEntityDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.jdom2.input.sax.SAXHandler" />
	<method signature="org.xml.sax.Locator getDocumentLocator()" class="org.jdom2.input.sax.SAXHandler" />
	<method signature="void endElement(java.lang.String,java.lang.String,java.lang.String)" class="org.jdom2.input.sax.SAXHandler" />
	<method signature="void endDTD()" class="org.jdom2.input.sax.SAXHandler" />
	<method signature="void &lt;init&gt;()" class="org.jdom2.input.sax.SAXHandler" />
	<method signature="void startDocument()" class="org.jdom2.input.sax.SAXHandler" />
	<method signature="void setIgnoringBoundaryWhitespace(boolean)" class="org.jdom2.input.sax.SAXHandler" />
	<method signature="void comment(char[],int,int)" class="org.jdom2.input.sax.SAXHandler" />
	<method signature="void internalEntityDecl(java.lang.String,java.lang.String)" class="org.jdom2.input.sax.SAXHandler" />
	<method signature="void skippedEntity(java.lang.String)" class="org.jdom2.input.sax.SAXHandler" />
	<method signature="boolean getIgnoringElementContentWhitespace()" class="org.jdom2.input.sax.SAXHandler" />
	<method signature="void attributeDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.jdom2.input.sax.SAXHandler" />
	<method signature="void startDTD(java.lang.String,java.lang.String,java.lang.String)" class="org.jdom2.input.sax.SAXHandler" />
	<method signature="void processingInstruction(java.lang.String,java.lang.String)" class="org.jdom2.input.sax.SAXHandler" />
	<method signature="org.jdom2.Document getDocument()" class="org.jdom2.input.sax.SAXHandler" />
	<method signature="void &lt;init&gt;(org.jdom2.JDOMFactory)" class="org.jdom2.input.sax.SAXHandler" />
	<method signature="void startCDATA()" class="org.jdom2.input.sax.SAXHandler" />
	<method signature="void setDocumentLocator(org.xml.sax.Locator)" class="org.jdom2.input.sax.SAXHandler" />
	<method signature="void endCDATA()" class="org.jdom2.input.sax.SAXHandler" />
	<method signature="boolean getExpandEntities()" class="org.jdom2.input.sax.SAXHandler" />
	<method signature="void elementDecl(java.lang.String,java.lang.String)" class="org.jdom2.input.sax.SAXHandler" />
	<method signature="void setIgnoringElementContentWhitespace(boolean)" class="org.jdom2.input.sax.SAXHandler" />
	<method signature="void characters(char[],int,int)" class="org.jdom2.input.sax.SAXHandler" />
	<method signature="void setExpandEntities(boolean)" class="org.jdom2.input.sax.SAXHandler" />
	<method signature="void ignorableWhitespace(char[],int,int)" class="org.jdom2.input.sax.SAXHandler" />
	<method signature="void endEntity(java.lang.String)" class="org.jdom2.input.sax.SAXHandler" />
	<method signature="void startEntity(java.lang.String)" class="org.jdom2.input.sax.SAXHandler" />
	<class name="org.apache.xerces.dom.DOMInputImpl" />
	<method signature="java.lang.String getSystemId()" class="org.apache.xerces.dom.DOMInputImpl" />
	<method signature="void setSystemId(java.lang.String)" class="org.apache.xerces.dom.DOMInputImpl" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,java.io.InputStream,java.lang.String)" class="org.apache.xerces.dom.DOMInputImpl" />
	<method signature="void setBaseURI(java.lang.String)" class="org.apache.xerces.dom.DOMInputImpl" />
	<method signature="java.lang.String getStringData()" class="org.apache.xerces.dom.DOMInputImpl" />
	<method signature="void setCharacterStream(java.io.Reader)" class="org.apache.xerces.dom.DOMInputImpl" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.dom.DOMInputImpl" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,java.io.Reader,java.lang.String)" class="org.apache.xerces.dom.DOMInputImpl" />
	<method signature="java.lang.String getPublicId()" class="org.apache.xerces.dom.DOMInputImpl" />
	<method signature="void setStringData(java.lang.String)" class="org.apache.xerces.dom.DOMInputImpl" />
	<method signature="java.lang.String getEncoding()" class="org.apache.xerces.dom.DOMInputImpl" />
	<method signature="void setEncoding(java.lang.String)" class="org.apache.xerces.dom.DOMInputImpl" />
	<method signature="void setCertifiedText(boolean)" class="org.apache.xerces.dom.DOMInputImpl" />
	<method signature="java.io.Reader getCharacterStream()" class="org.apache.xerces.dom.DOMInputImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.dom.DOMInputImpl" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.dom.DOMInputImpl" />
	<method signature="void setByteStream(java.io.InputStream)" class="org.apache.xerces.dom.DOMInputImpl" />
	<method signature="boolean getCertifiedText()" class="org.apache.xerces.dom.DOMInputImpl" />
	<method signature="java.io.InputStream getByteStream()" class="org.apache.xerces.dom.DOMInputImpl" />
	<method signature="void setPublicId(java.lang.String)" class="org.apache.xerces.dom.DOMInputImpl" />
	<method signature="java.lang.String getBaseURI()" class="org.apache.xerces.dom.DOMInputImpl" />
	<class name="org.jfree.data.xml.DatasetTags" />
	<class name="org.unbescape.xml.XmlEscape" />
	<method signature="void escapeXml10(char[],int,int,java.io.Writer)" class="org.unbescape.xml.XmlEscape" />
	<method signature="void escapeXml11(char[],int,int,java.io.Writer,org.unbescape.xml.XmlEscapeType,org.unbescape.xml.XmlEscapeLevel)" class="org.unbescape.xml.XmlEscape" />
	<method signature="void escapeXml10(char[],int,int,java.io.Writer,org.unbescape.xml.XmlEscapeType,org.unbescape.xml.XmlEscapeLevel)" class="org.unbescape.xml.XmlEscape" />
	<method signature="void escapeXml11(char[],int,int,java.io.Writer)" class="org.unbescape.xml.XmlEscape" />
	<method signature="java.lang.String unescapeXml(java.lang.String)" class="org.unbescape.xml.XmlEscape" />
	<method signature="void escapeXml11Minimal(char[],int,int,java.io.Writer)" class="org.unbescape.xml.XmlEscape" />
	<method signature="java.lang.String escapeXml11(java.lang.String,org.unbescape.xml.XmlEscapeType,org.unbescape.xml.XmlEscapeLevel)" class="org.unbescape.xml.XmlEscape" />
	<method signature="java.lang.String escapeXml10(java.lang.String,org.unbescape.xml.XmlEscapeType,org.unbescape.xml.XmlEscapeLevel)" class="org.unbescape.xml.XmlEscape" />
	<method signature="void escapeXml10Minimal(char[],int,int,java.io.Writer)" class="org.unbescape.xml.XmlEscape" />
	<method signature="void unescapeXml(char[],int,int,java.io.Writer)" class="org.unbescape.xml.XmlEscape" />
	<method signature="java.lang.String escapeXml11Minimal(java.lang.String)" class="org.unbescape.xml.XmlEscape" />
	<method signature="java.lang.String escapeXml10Minimal(java.lang.String)" class="org.unbescape.xml.XmlEscape" />
	<method signature="java.lang.String escapeXml10(java.lang.String)" class="org.unbescape.xml.XmlEscape" />
	<method signature="java.lang.String escapeXml11(java.lang.String)" class="org.unbescape.xml.XmlEscape" />
	<class name="org.apache.xerces.impl.xs.opti.TextImpl" />
	<method signature="org.w3c.dom.Node getPreviousSibling()" class="org.apache.xerces.impl.xs.opti.TextImpl" />
	<method signature="org.w3c.dom.Node getNextSibling()" class="org.apache.xerces.impl.xs.opti.TextImpl" />
	<method signature="void &lt;init&gt;(java.lang.StringBuffer,org.apache.xerces.impl.xs.opti.SchemaDOM,int,int)" class="org.apache.xerces.impl.xs.opti.TextImpl" />
	<method signature="java.lang.String substringData(int,int)" class="org.apache.xerces.impl.xs.opti.TextImpl" />
	<method signature="java.lang.String getNodeName()" class="org.apache.xerces.impl.xs.opti.TextImpl" />
	<method signature="org.w3c.dom.Node getParentNode()" class="org.apache.xerces.impl.xs.opti.TextImpl" />
	<method signature="java.lang.String getData()" class="org.apache.xerces.impl.xs.opti.TextImpl" />
	<method signature="int getLength()" class="org.apache.xerces.impl.xs.opti.TextImpl" />
	<class name="org.jfree.date.AnnualDateRule" />
	<method signature="org.jfree.date.SerialDate getDate(int)" class="org.jfree.date.AnnualDateRule" />
	<method signature="java.lang.Object clone()" class="org.jfree.date.AnnualDateRule" />
	<class name="org.jfree.ui.about.resources.AboutResources_fr" />
	<method signature="void &lt;init&gt;()" class="org.jfree.ui.about.resources.AboutResources_fr" />
	<method signature="java.lang.Object[][] getContents()" class="org.jfree.ui.about.resources.AboutResources_fr" />
	<class name="org.apache.commons.lang3.EnumUtils" />
	<method signature="long[] generateBitVectors(java.lang.Class,java.lang.Enum[])" class="org.apache.commons.lang3.EnumUtils" />
	<method signature="long[] generateBitVectors(java.lang.Class,java.lang.Iterable)" class="org.apache.commons.lang3.EnumUtils" />
	<method signature="java.util.EnumSet processBitVectors(java.lang.Class,long[])" class="org.apache.commons.lang3.EnumUtils" />
	<method signature="java.util.List getEnumList(java.lang.Class)" class="org.apache.commons.lang3.EnumUtils" />
	<method signature="boolean isValidEnum(java.lang.Class,java.lang.String)" class="org.apache.commons.lang3.EnumUtils" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.EnumUtils" />
	<method signature="java.util.Map getEnumMap(java.lang.Class)" class="org.apache.commons.lang3.EnumUtils" />
	<method signature="long generateBitVector(java.lang.Class,java.lang.Enum[])" class="org.apache.commons.lang3.EnumUtils" />
	<method signature="long generateBitVector(java.lang.Class,java.lang.Iterable)" class="org.apache.commons.lang3.EnumUtils" />
	<method signature="java.lang.Enum getEnum(java.lang.Class,java.lang.String)" class="org.apache.commons.lang3.EnumUtils" />
	<method signature="java.util.EnumSet processBitVector(java.lang.Class,long)" class="org.apache.commons.lang3.EnumUtils" />
	<class name="org.apache.xml.serialize.OutputFormat$Defaults" />
	<method signature="void &lt;init&gt;()" class="org.apache.xml.serialize.OutputFormat$Defaults" />
	<class name="org.w3c.dom.DOMImplementation" />
	<method signature="org.w3c.dom.DocumentType createDocumentType(java.lang.String,java.lang.String,java.lang.String)" class="org.w3c.dom.DOMImplementation" />
	<method signature="java.lang.Object getFeature(java.lang.String,java.lang.String)" class="org.w3c.dom.DOMImplementation" />
	<method signature="org.w3c.dom.Document createDocument(java.lang.String,java.lang.String,org.w3c.dom.DocumentType)" class="org.w3c.dom.DOMImplementation" />
	<method signature="boolean hasFeature(java.lang.String,java.lang.String)" class="org.w3c.dom.DOMImplementation" />
	<class name="org.w3c.dom.html.HTMLAreaElement" />
	<method signature="void setAccessKey(java.lang.String)" class="org.w3c.dom.html.HTMLAreaElement" />
	<method signature="java.lang.String getCoords()" class="org.w3c.dom.html.HTMLAreaElement" />
	<method signature="java.lang.String getHref()" class="org.w3c.dom.html.HTMLAreaElement" />
	<method signature="java.lang.String getShape()" class="org.w3c.dom.html.HTMLAreaElement" />
	<method signature="void setTabIndex(int)" class="org.w3c.dom.html.HTMLAreaElement" />
	<method signature="void setTarget(java.lang.String)" class="org.w3c.dom.html.HTMLAreaElement" />
	<method signature="void setHref(java.lang.String)" class="org.w3c.dom.html.HTMLAreaElement" />
	<method signature="java.lang.String getTarget()" class="org.w3c.dom.html.HTMLAreaElement" />
	<method signature="void setAlt(java.lang.String)" class="org.w3c.dom.html.HTMLAreaElement" />
	<method signature="boolean getNoHref()" class="org.w3c.dom.html.HTMLAreaElement" />
	<method signature="int getTabIndex()" class="org.w3c.dom.html.HTMLAreaElement" />
	<method signature="void setNoHref(boolean)" class="org.w3c.dom.html.HTMLAreaElement" />
	<method signature="void setShape(java.lang.String)" class="org.w3c.dom.html.HTMLAreaElement" />
	<method signature="java.lang.String getAlt()" class="org.w3c.dom.html.HTMLAreaElement" />
	<method signature="void setCoords(java.lang.String)" class="org.w3c.dom.html.HTMLAreaElement" />
	<method signature="java.lang.String getAccessKey()" class="org.w3c.dom.html.HTMLAreaElement" />
	<class name="org.apache.xerces.dom3.as.ASNamedObjectMap" />
	<method signature="org.apache.xerces.dom3.as.ASObject getNamedItem(java.lang.String)" class="org.apache.xerces.dom3.as.ASNamedObjectMap" />
	<method signature="org.apache.xerces.dom3.as.ASObject setNamedItemNS(org.apache.xerces.dom3.as.ASObject)" class="org.apache.xerces.dom3.as.ASNamedObjectMap" />
	<method signature="org.apache.xerces.dom3.as.ASObject getNamedItemNS(java.lang.String,java.lang.String)" class="org.apache.xerces.dom3.as.ASNamedObjectMap" />
	<method signature="org.apache.xerces.dom3.as.ASObject item(int)" class="org.apache.xerces.dom3.as.ASNamedObjectMap" />
	<method signature="org.apache.xerces.dom3.as.ASObject removeNamedItem(java.lang.String)" class="org.apache.xerces.dom3.as.ASNamedObjectMap" />
	<method signature="int getLength()" class="org.apache.xerces.dom3.as.ASNamedObjectMap" />
	<method signature="org.apache.xerces.dom3.as.ASObject removeNamedItemNS(java.lang.String,java.lang.String)" class="org.apache.xerces.dom3.as.ASNamedObjectMap" />
	<method signature="org.apache.xerces.dom3.as.ASObject setNamedItem(org.apache.xerces.dom3.as.ASObject)" class="org.apache.xerces.dom3.as.ASNamedObjectMap" />
	<class name="org.jfree.data.xy.VectorSeries" />
	<method signature="double getVectorXValue(int)" class="org.jfree.data.xy.VectorSeries" />
	<method signature="double getYValue(int)" class="org.jfree.data.xy.VectorSeries" />
	<method signature="void &lt;init&gt;(java.lang.Comparable)" class="org.jfree.data.xy.VectorSeries" />
	<method signature="void &lt;init&gt;(java.lang.Comparable,boolean,boolean)" class="org.jfree.data.xy.VectorSeries" />
	<method signature="void add(double,double,double,double)" class="org.jfree.data.xy.VectorSeries" />
	<method signature="org.jfree.data.ComparableObjectItem getDataItem(int)" class="org.jfree.data.xy.VectorSeries" />
	<method signature="double getVectorYValue(int)" class="org.jfree.data.xy.VectorSeries" />
	<method signature="double getXValue(int)" class="org.jfree.data.xy.VectorSeries" />
	<method signature="org.jfree.data.ComparableObjectItem remove(int)" class="org.jfree.data.xy.VectorSeries" />
	<class name="org.apache.xerces.dom.NotationImpl" />
	<method signature="short getNodeType()" class="org.apache.xerces.dom.NotationImpl" />
	<method signature="java.lang.String getSystemId()" class="org.apache.xerces.dom.NotationImpl" />
	<method signature="void setSystemId(java.lang.String)" class="org.apache.xerces.dom.NotationImpl" />
	<method signature="void setBaseURI(java.lang.String)" class="org.apache.xerces.dom.NotationImpl" />
	<method signature="void &lt;init&gt;(org.apache.xerces.dom.CoreDocumentImpl,java.lang.String)" class="org.apache.xerces.dom.NotationImpl" />
	<method signature="java.lang.String getNodeName()" class="org.apache.xerces.dom.NotationImpl" />
	<method signature="java.lang.String getPublicId()" class="org.apache.xerces.dom.NotationImpl" />
	<method signature="void setPublicId(java.lang.String)" class="org.apache.xerces.dom.NotationImpl" />
	<method signature="java.lang.String getBaseURI()" class="org.apache.xerces.dom.NotationImpl" />
	<class name="javax.xml.datatype.DatatypeConstants" />
	<class name="org.jfree.chart.urls.CustomPieURLGenerator" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.urls.CustomPieURLGenerator" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.urls.CustomPieURLGenerator" />
	<method signature="int getListCount()" class="org.jfree.chart.urls.CustomPieURLGenerator" />
	<method signature="java.lang.String getURL(java.lang.Comparable,int)" class="org.jfree.chart.urls.CustomPieURLGenerator" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.urls.CustomPieURLGenerator" />
	<method signature="java.lang.String generateURL(org.jfree.data.general.PieDataset,java.lang.Comparable,int)" class="org.jfree.chart.urls.CustomPieURLGenerator" />
	<method signature="int getURLCount(int)" class="org.jfree.chart.urls.CustomPieURLGenerator" />
	<method signature="void addURLs(java.util.Map)" class="org.jfree.chart.urls.CustomPieURLGenerator" />
	<class name="org.jfree.ui.about.resources.AboutResources_es" />
	<method signature="void &lt;init&gt;()" class="org.jfree.ui.about.resources.AboutResources_es" />
	<method signature="java.lang.Object[][] getContents()" class="org.jfree.ui.about.resources.AboutResources_es" />
	<class name="com.hexidec.ekit.component.UnicodeDialog" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="com.hexidec.ekit.component.UnicodeDialog" />
	<method signature="void &lt;init&gt;(com.hexidec.ekit.EkitCore,java.lang.String,boolean,int)" class="com.hexidec.ekit.component.UnicodeDialog" />
	<method signature="void init(int)" class="com.hexidec.ekit.component.UnicodeDialog" />
	<class name="org.jdom2.xpath.jaxen.JDOMXPath" />
	<method signature="java.lang.Number numberValueOf(java.lang.Object)" class="org.jdom2.xpath.jaxen.JDOMXPath" />
	<method signature="void addNamespace(org.jdom2.Namespace)" class="org.jdom2.xpath.jaxen.JDOMXPath" />
	<method signature="java.util.List selectNodes(java.lang.Object)" class="org.jdom2.xpath.jaxen.JDOMXPath" />
	<method signature="void setVariable(java.lang.String,java.lang.Object)" class="org.jdom2.xpath.jaxen.JDOMXPath" />
	<method signature="java.lang.String toString()" class="org.jdom2.xpath.jaxen.JDOMXPath" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jdom2.xpath.jaxen.JDOMXPath" />
	<method signature="java.lang.String valueOf(java.lang.Object)" class="org.jdom2.xpath.jaxen.JDOMXPath" />
	<method signature="java.lang.String getXPath()" class="org.jdom2.xpath.jaxen.JDOMXPath" />
	<method signature="java.lang.Object selectSingleNode(java.lang.Object)" class="org.jdom2.xpath.jaxen.JDOMXPath" />
	<class name="org.jfree.data.xy.XYBarDataset" />
	<method signature="double getXValue(int,int)" class="org.jfree.data.xy.XYBarDataset" />
	<method signature="double getEndXValue(int,int)" class="org.jfree.data.xy.XYBarDataset" />
	<method signature="java.lang.Number getX(int,int)" class="org.jfree.data.xy.XYBarDataset" />
	<method signature="double getStartYValue(int,int)" class="org.jfree.data.xy.XYBarDataset" />
	<method signature="void &lt;init&gt;(org.jfree.data.xy.XYDataset,double)" class="org.jfree.data.xy.XYBarDataset" />
	<method signature="java.lang.Number getY(int,int)" class="org.jfree.data.xy.XYBarDataset" />
	<method signature="void datasetChanged(org.jfree.data.general.DatasetChangeEvent)" class="org.jfree.data.xy.XYBarDataset" />
	<method signature="org.jfree.data.xy.XYDataset getUnderlyingDataset()" class="org.jfree.data.xy.XYBarDataset" />
	<method signature="void setBarWidth(double)" class="org.jfree.data.xy.XYBarDataset" />
	<method signature="int getSeriesCount()" class="org.jfree.data.xy.XYBarDataset" />
	<method signature="double getEndYValue(int,int)" class="org.jfree.data.xy.XYBarDataset" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.xy.XYBarDataset" />
	<method signature="java.lang.Comparable getSeriesKey(int)" class="org.jfree.data.xy.XYBarDataset" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.xy.XYBarDataset" />
	<method signature="double getBarWidth()" class="org.jfree.data.xy.XYBarDataset" />
	<method signature="java.lang.Number getEndX(int,int)" class="org.jfree.data.xy.XYBarDataset" />
	<method signature="double getStartXValue(int,int)" class="org.jfree.data.xy.XYBarDataset" />
	<method signature="java.lang.Number getStartX(int,int)" class="org.jfree.data.xy.XYBarDataset" />
	<method signature="java.lang.Number getStartY(int,int)" class="org.jfree.data.xy.XYBarDataset" />
	<method signature="int getItemCount(int)" class="org.jfree.data.xy.XYBarDataset" />
	<method signature="double getYValue(int,int)" class="org.jfree.data.xy.XYBarDataset" />
	<method signature="java.lang.Number getEndY(int,int)" class="org.jfree.data.xy.XYBarDataset" />
	<class name="com.hexidec.ekit.action.AlignAction" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="com.hexidec.ekit.action.AlignAction" />
	<method signature="void &lt;init&gt;(com.hexidec.ekit.EkitCore,java.lang.String,int)" class="com.hexidec.ekit.action.AlignAction" />
	<class name="com.google.zxing.common.CharacterSetECI" />
	<method signature="com.google.zxing.common.CharacterSetECI getCharacterSetECIByValue(int)" class="com.google.zxing.common.CharacterSetECI" />
	<method signature="com.google.zxing.common.CharacterSetECI getCharacterSetECIByName(java.lang.String)" class="com.google.zxing.common.CharacterSetECI" />
	<method signature="int getValue()" class="com.google.zxing.common.CharacterSetECI" />
	<method signature="com.google.zxing.common.CharacterSetECI[] values()" class="com.google.zxing.common.CharacterSetECI" />
	<method signature="com.google.zxing.common.CharacterSetECI valueOf(java.lang.String)" class="com.google.zxing.common.CharacterSetECI" />
	<class name="org.apache.xerces.impl.xs.XSConstraints" />
	<method signature="org.apache.xerces.impl.xs.XSParticleDecl getEmptySequence()" class="org.apache.xerces.impl.xs.XSConstraints" />
	<method signature="boolean checkTypeDerivationOk(org.apache.xerces.xs.XSTypeDefinition,org.apache.xerces.xs.XSTypeDefinition,short)" class="org.apache.xerces.impl.xs.XSConstraints" />
	<method signature="boolean overlapUPA(org.apache.xerces.impl.xs.XSElementDecl,org.apache.xerces.impl.xs.XSElementDecl,org.apache.xerces.impl.xs.SubstitutionGroupHandler)" class="org.apache.xerces.impl.xs.XSConstraints" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xs.XSConstraints" />
	<method signature="void fullSchemaChecking(org.apache.xerces.impl.xs.XSGrammarBucket,org.apache.xerces.impl.xs.SubstitutionGroupHandler,org.apache.xerces.impl.xs.models.CMBuilder,org.apache.xerces.impl.XMLErrorReporter)" class="org.apache.xerces.impl.xs.XSConstraints" />
	<method signature="boolean checkSimpleDerivationOk(org.apache.xerces.impl.dv.XSSimpleType,org.apache.xerces.xs.XSTypeDefinition,short)" class="org.apache.xerces.impl.xs.XSConstraints" />
	<method signature="void checkElementDeclsConsistent(org.apache.xerces.impl.xs.XSComplexTypeDecl,org.apache.xerces.impl.xs.XSParticleDecl,org.apache.xerces.util.SymbolHash,org.apache.xerces.impl.xs.SubstitutionGroupHandler)" class="org.apache.xerces.impl.xs.XSConstraints" />
	<method signature="boolean overlapUPA(org.apache.xerces.impl.xs.XSElementDecl,org.apache.xerces.impl.xs.XSWildcardDecl,org.apache.xerces.impl.xs.SubstitutionGroupHandler)" class="org.apache.xerces.impl.xs.XSConstraints" />
	<method signature="boolean checkComplexDerivationOk(org.apache.xerces.impl.xs.XSComplexTypeDecl,org.apache.xerces.xs.XSTypeDefinition,short)" class="org.apache.xerces.impl.xs.XSConstraints" />
	<method signature="boolean overlapUPA(java.lang.Object,java.lang.Object,org.apache.xerces.impl.xs.SubstitutionGroupHandler)" class="org.apache.xerces.impl.xs.XSConstraints" />
	<method signature="boolean overlapUPA(org.apache.xerces.impl.xs.XSWildcardDecl,org.apache.xerces.impl.xs.XSWildcardDecl)" class="org.apache.xerces.impl.xs.XSConstraints" />
	<method signature="java.lang.Object ElementDefaultValidImmediate(org.apache.xerces.xs.XSTypeDefinition,java.lang.String,org.apache.xerces.impl.dv.ValidationContext,org.apache.xerces.impl.dv.ValidatedInfo)" class="org.apache.xerces.impl.xs.XSConstraints" />
	<method signature="void findElemInTable(org.apache.xerces.impl.xs.XSComplexTypeDecl,org.apache.xerces.impl.xs.XSElementDecl,org.apache.xerces.util.SymbolHash)" class="org.apache.xerces.impl.xs.XSConstraints" />
	<class name="tourma.data.Group" />
	<method signature="java.lang.String getName()" class="tourma.data.Group" />
	<method signature="void addRoster(tourma.data.RosterType)" class="tourma.data.Group" />
	<method signature="org.jdom2.Element getXMLElementForPoints()" class="tourma.data.Group" />
	<method signature="tourma.data.RosterType getRoster(int)" class="tourma.data.Group" />
	<method signature="tourma.data.GroupPoints getOpponentModificationPoints(tourma.data.Group)" class="tourma.data.Group" />
	<method signature="void delOpponentModificationPoints(tourma.data.Group)" class="tourma.data.Group" />
	<method signature="void setXMLElement(org.jdom2.Element)" class="tourma.data.Group" />
	<method signature="org.jdom2.Element getXMLElement()" class="tourma.data.Group" />
	<method signature="void setXMLElementForPoints(org.jdom2.Element)" class="tourma.data.Group" />
	<method signature="int getRosterCount()" class="tourma.data.Group" />
	<method signature="boolean equals(java.lang.Object)" class="tourma.data.Group" />
	<method signature="boolean containsRoster(tourma.data.RosterType)" class="tourma.data.Group" />
	<method signature="void removeRoster(tourma.data.RosterType)" class="tourma.data.Group" />
	<method signature="void setName(java.lang.String)" class="tourma.data.Group" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="tourma.data.Group" />
	<method signature="void setOpponentModificationPoints(tourma.data.Group,tourma.data.GroupPoints)" class="tourma.data.Group" />
	<method signature="void newRosters()" class="tourma.data.Group" />
	<class name="org.jfree.chart.annotations.XYDataImageAnnotation" />
	<method signature="void &lt;init&gt;(java.awt.Image,double,double,double,double)" class="org.jfree.chart.annotations.XYDataImageAnnotation" />
	<method signature="void &lt;init&gt;(java.awt.Image,double,double,double,double,boolean)" class="org.jfree.chart.annotations.XYDataImageAnnotation" />
	<method signature="double getY()" class="org.jfree.chart.annotations.XYDataImageAnnotation" />
	<method signature="int hashCode()" class="org.jfree.chart.annotations.XYDataImageAnnotation" />
	<method signature="double getX()" class="org.jfree.chart.annotations.XYDataImageAnnotation" />
	<method signature="double getHeight()" class="org.jfree.chart.annotations.XYDataImageAnnotation" />
	<method signature="boolean getIncludeInDataBounds()" class="org.jfree.chart.annotations.XYDataImageAnnotation" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.annotations.XYDataImageAnnotation" />
	<method signature="org.jfree.data.Range getXRange()" class="org.jfree.chart.annotations.XYDataImageAnnotation" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.annotations.XYDataImageAnnotation" />
	<method signature="double getWidth()" class="org.jfree.chart.annotations.XYDataImageAnnotation" />
	<method signature="org.jfree.data.Range getYRange()" class="org.jfree.chart.annotations.XYDataImageAnnotation" />
	<method signature="java.awt.Image getImage()" class="org.jfree.chart.annotations.XYDataImageAnnotation" />
	<method signature="void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.annotations.XYDataImageAnnotation" />
	<class name="org.jfree.data.statistics.BoxAndWhiskerCalculator" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.statistics.BoxAndWhiskerCalculator" />
	<method signature="double calculateQ3(java.util.List)" class="org.jfree.data.statistics.BoxAndWhiskerCalculator" />
	<method signature="org.jfree.data.statistics.BoxAndWhiskerItem calculateBoxAndWhiskerStatistics(java.util.List)" class="org.jfree.data.statistics.BoxAndWhiskerCalculator" />
	<method signature="org.jfree.data.statistics.BoxAndWhiskerItem calculateBoxAndWhiskerStatistics(java.util.List,boolean)" class="org.jfree.data.statistics.BoxAndWhiskerCalculator" />
	<method signature="double calculateQ1(java.util.List)" class="org.jfree.data.statistics.BoxAndWhiskerCalculator" />
	<class name="org.apache.xerces.dom3.as.ASObject" />
	<method signature="short getAsNodeType()" class="org.apache.xerces.dom3.as.ASObject" />
	<method signature="java.lang.String getPrefix()" class="org.apache.xerces.dom3.as.ASObject" />
	<method signature="void setOwnerASModel(org.apache.xerces.dom3.as.ASModel)" class="org.apache.xerces.dom3.as.ASObject" />
	<method signature="void setPrefix(java.lang.String)" class="org.apache.xerces.dom3.as.ASObject" />
	<method signature="void setNamespaceURI(java.lang.String)" class="org.apache.xerces.dom3.as.ASObject" />
	<method signature="org.apache.xerces.dom3.as.ASObject cloneASObject(boolean)" class="org.apache.xerces.dom3.as.ASObject" />
	<method signature="java.lang.String getNodeName()" class="org.apache.xerces.dom3.as.ASObject" />
	<method signature="void setLocalName(java.lang.String)" class="org.apache.xerces.dom3.as.ASObject" />
	<method signature="org.apache.xerces.dom3.as.ASModel getOwnerASModel()" class="org.apache.xerces.dom3.as.ASObject" />
	<method signature="java.lang.String getLocalName()" class="org.apache.xerces.dom3.as.ASObject" />
	<method signature="java.lang.String getNamespaceURI()" class="org.apache.xerces.dom3.as.ASObject" />
	<method signature="void setNodeName(java.lang.String)" class="org.apache.xerces.dom3.as.ASObject" />
	<class name="com.google.zxing.qrcode.QRCodeReader" />
	<method signature="com.google.zxing.Result decode(com.google.zxing.BinaryBitmap)" class="com.google.zxing.qrcode.QRCodeReader" />
	<method signature="void reset()" class="com.google.zxing.qrcode.QRCodeReader" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.qrcode.QRCodeReader" />
	<method signature="com.google.zxing.Result decode(com.google.zxing.BinaryBitmap,java.util.Map)" class="com.google.zxing.qrcode.QRCodeReader" />
	<class name="org.jfree.chart.ChartColor" />
	<method signature="java.awt.Paint[] createDefaultPaintArray()" class="org.jfree.chart.ChartColor" />
	<method signature="void &lt;init&gt;(int,int,int)" class="org.jfree.chart.ChartColor" />
	<class name="org.apache.xerces.impl.XMLEntityManager$RewindableInputStream" />
	<method signature="void mark(int)" class="org.apache.xerces.impl.XMLEntityManager$RewindableInputStream" />
	<method signature="void reset()" class="org.apache.xerces.impl.XMLEntityManager$RewindableInputStream" />
	<method signature="int read(byte[],int,int)" class="org.apache.xerces.impl.XMLEntityManager$RewindableInputStream" />
	<method signature="void close()" class="org.apache.xerces.impl.XMLEntityManager$RewindableInputStream" />
	<method signature="int readAndBuffer()" class="org.apache.xerces.impl.XMLEntityManager$RewindableInputStream" />
	<method signature="void rewind()" class="org.apache.xerces.impl.XMLEntityManager$RewindableInputStream" />
	<method signature="void setStartOffset(int)" class="org.apache.xerces.impl.XMLEntityManager$RewindableInputStream" />
	<method signature="long skip(long)" class="org.apache.xerces.impl.XMLEntityManager$RewindableInputStream" />
	<method signature="void &lt;init&gt;(org.apache.xerces.impl.XMLEntityManager,java.io.InputStream)" class="org.apache.xerces.impl.XMLEntityManager$RewindableInputStream" />
	<method signature="int read()" class="org.apache.xerces.impl.XMLEntityManager$RewindableInputStream" />
	<method signature="boolean markSupported()" class="org.apache.xerces.impl.XMLEntityManager$RewindableInputStream" />
	<method signature="int available()" class="org.apache.xerces.impl.XMLEntityManager$RewindableInputStream" />
	<class name="org.w3c.dom.css.DocumentCSS" />
	<method signature="org.w3c.dom.css.CSSStyleDeclaration getOverrideStyle(org.w3c.dom.Element,java.lang.String)" class="org.w3c.dom.css.DocumentCSS" />
	<class name="org.apache.xerces.impl.dv.dtd.NOTATIONDatatypeValidator" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.dtd.NOTATIONDatatypeValidator" />
	<method signature="void validate(java.lang.String,org.apache.xerces.impl.dv.ValidationContext)" class="org.apache.xerces.impl.dv.dtd.NOTATIONDatatypeValidator" />
	<class name="freemarker.core.ParseException" />
	<method signature="void &lt;init&gt;(java.lang.String,freemarker.core.TemplateObject)" class="freemarker.core.ParseException" />
	<method signature="void &lt;init&gt;(freemarker.core.Token,int[][],java.lang.String[])" class="freemarker.core.ParseException" />
	<method signature="int getLineNumber()" class="freemarker.core.ParseException" />
	<method signature="java.lang.String getMessage()" class="freemarker.core.ParseException" />
	<method signature="void &lt;init&gt;(java.lang.String,int,int)" class="freemarker.core.ParseException" />
	<method signature="void setTemplateName(java.lang.String)" class="freemarker.core.ParseException" />
	<method signature="int getColumnNumber()" class="freemarker.core.ParseException" />
	<class name="freemarker.debug.impl.RmiDebugModelImpl_Stub" />
	<method signature="freemarker.debug.DebugModel get(int)" class="freemarker.debug.impl.RmiDebugModelImpl_Stub" />
	<method signature="int size()" class="freemarker.debug.impl.RmiDebugModelImpl_Stub" />
	<method signature="freemarker.debug.DebugModel[] get(int,int)" class="freemarker.debug.impl.RmiDebugModelImpl_Stub" />
	<method signature="java.lang.String getAsString()" class="freemarker.debug.impl.RmiDebugModelImpl_Stub" />
	<method signature="boolean getAsBoolean()" class="freemarker.debug.impl.RmiDebugModelImpl_Stub" />
	<method signature="java.lang.String[] keys()" class="freemarker.debug.impl.RmiDebugModelImpl_Stub" />
	<method signature="freemarker.debug.DebugModel get(java.lang.String)" class="freemarker.debug.impl.RmiDebugModelImpl_Stub" />
	<method signature="int getModelTypes()" class="freemarker.debug.impl.RmiDebugModelImpl_Stub" />
	<method signature="freemarker.debug.DebugModel[] get(java.lang.String[])" class="freemarker.debug.impl.RmiDebugModelImpl_Stub" />
	<method signature="java.lang.Number getAsNumber()" class="freemarker.debug.impl.RmiDebugModelImpl_Stub" />
	<method signature="void &lt;init&gt;(java.rmi.server.RemoteRef)" class="freemarker.debug.impl.RmiDebugModelImpl_Stub" />
	<method signature="java.util.Date getAsDate()" class="freemarker.debug.impl.RmiDebugModelImpl_Stub" />
	<method signature="freemarker.debug.DebugModel[] getCollection()" class="freemarker.debug.impl.RmiDebugModelImpl_Stub" />
	<method signature="int getDateType()" class="freemarker.debug.impl.RmiDebugModelImpl_Stub" />
	<class name="org.jfree.chart.encoders.ImageFormat" />
	<class name="tourma.data.Criteria" />
	<method signature="java.lang.String getName()" class="tourma.data.Criteria" />
	<method signature="int getPointsAgainst()" class="tourma.data.Criteria" />
	<method signature="void setPointsTeamAgainst(int)" class="tourma.data.Criteria" />
	<method signature="int getPointsTeamFor()" class="tourma.data.Criteria" />
	<method signature="void setXMLElement(org.jdom2.Element)" class="tourma.data.Criteria" />
	<method signature="org.jdom2.Element getXMLElement()" class="tourma.data.Criteria" />
	<method signature="int getPointsTeamAgainst()" class="tourma.data.Criteria" />
	<method signature="boolean equals(java.lang.Object)" class="tourma.data.Criteria" />
	<method signature="void setPointsFor(int)" class="tourma.data.Criteria" />
	<method signature="void setName(java.lang.String)" class="tourma.data.Criteria" />
	<method signature="void setPointsAgainst(int)" class="tourma.data.Criteria" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="tourma.data.Criteria" />
	<method signature="void setPointsTeamFor(int)" class="tourma.data.Criteria" />
	<method signature="int getPointsFor()" class="tourma.data.Criteria" />
	<class name="tourma.data.Ranking" />
	<method signature="int getSortedValue(int,int)" class="tourma.data.Ranking" />
	<method signature="java.lang.String getName()" class="tourma.data.Ranking" />
	<method signature="void setValueType(java.lang.String)" class="tourma.data.Ranking" />
	<method signature="java.lang.String getDetail()" class="tourma.data.Ranking" />
	<method signature="tourma.tableModel.MjtRanking getRank()" class="tourma.data.Ranking" />
	<method signature="tourma.data.ObjectRanking getSortedObject(int)" class="tourma.data.Ranking" />
	<method signature="void setXMLElement(org.jdom2.Element)" class="tourma.data.Ranking" />
	<method signature="int getRankingNumber()" class="tourma.data.Ranking" />
	<method signature="org.jdom2.Element getXMLElement()" class="tourma.data.Ranking" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,tourma.tableModel.MjtRanking,java.util.ArrayList)" class="tourma.data.Ranking" />
	<method signature="void setDetail(java.lang.String)" class="tourma.data.Ranking" />
	<method signature="void setName(java.lang.String)" class="tourma.data.Ranking" />
	<method signature="java.lang.String getType()" class="tourma.data.Ranking" />
	<method signature="int getRowCount()" class="tourma.data.Ranking" />
	<method signature="void setType(java.lang.String)" class="tourma.data.Ranking" />
	<method signature="void &lt;init&gt;(org.jdom2.Element)" class="tourma.data.Ranking" />
	<method signature="void setCriteria(tourma.data.Criteria)" class="tourma.data.Ranking" />
	<method signature="void setRank(tourma.tableModel.MjtRanking)" class="tourma.data.Ranking" />
	<method signature="java.lang.String getValueType()" class="tourma.data.Ranking" />
	<method signature="tourma.data.Criteria getCriteria()" class="tourma.data.Ranking" />
	<class name="org.apache.wml.WMLMetaElement" />
	<method signature="java.lang.String getName()" class="org.apache.wml.WMLMetaElement" />
	<method signature="java.lang.String getScheme()" class="org.apache.wml.WMLMetaElement" />
	<method signature="void setHttpEquiv(java.lang.String)" class="org.apache.wml.WMLMetaElement" />
	<method signature="void setContent(java.lang.String)" class="org.apache.wml.WMLMetaElement" />
	<method signature="java.lang.String getContent()" class="org.apache.wml.WMLMetaElement" />
	<method signature="void setName(java.lang.String)" class="org.apache.wml.WMLMetaElement" />
	<method signature="void setForua(boolean)" class="org.apache.wml.WMLMetaElement" />
	<method signature="boolean getForua()" class="org.apache.wml.WMLMetaElement" />
	<method signature="void setScheme(java.lang.String)" class="org.apache.wml.WMLMetaElement" />
	<method signature="java.lang.String getHttpEquiv()" class="org.apache.wml.WMLMetaElement" />
	<class name="org.jfree.chart.labels.IntervalCategoryToolTipGenerator" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.labels.IntervalCategoryToolTipGenerator" />
	<method signature="void &lt;init&gt;(java.lang.String,java.text.NumberFormat)" class="org.jfree.chart.labels.IntervalCategoryToolTipGenerator" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.labels.IntervalCategoryToolTipGenerator" />
	<method signature="void &lt;init&gt;(java.lang.String,java.text.DateFormat)" class="org.jfree.chart.labels.IntervalCategoryToolTipGenerator" />
	<class name="freemarker.ext.xml.NodeListModel" />
	<method signature="int size()" class="freemarker.ext.xml.NodeListModel" />
	<method signature="freemarker.template.TemplateSequenceModel getChildNodes()" class="freemarker.ext.xml.NodeListModel" />
	<method signature="java.lang.String getAsString()" class="freemarker.ext.xml.NodeListModel" />
	<method signature="freemarker.template.TemplateModel get(int)" class="freemarker.ext.xml.NodeListModel" />
	<method signature="java.lang.String getNodeName()" class="freemarker.ext.xml.NodeListModel" />
	<method signature="void &lt;init&gt;(java.lang.Object)" class="freemarker.ext.xml.NodeListModel" />
	<method signature="freemarker.template.TemplateNodeModel getParentNode()" class="freemarker.ext.xml.NodeListModel" />
	<method signature="boolean isEmpty()" class="freemarker.ext.xml.NodeListModel" />
	<method signature="java.lang.String getNodeNamespace()" class="freemarker.ext.xml.NodeListModel" />
	<method signature="java.lang.String getNodeType()" class="freemarker.ext.xml.NodeListModel" />
	<method signature="java.lang.Object exec(java.util.List)" class="freemarker.ext.xml.NodeListModel" />
	<method signature="void registerNamespace(java.lang.String,java.lang.String)" class="freemarker.ext.xml.NodeListModel" />
	<method signature="freemarker.template.TemplateModel get(java.lang.String)" class="freemarker.ext.xml.NodeListModel" />
	<class name="org.apache.html.dom.HTMLLIElementImpl" />
	<method signature="int getValue()" class="org.apache.html.dom.HTMLLIElementImpl" />
	<method signature="java.lang.String getType()" class="org.apache.html.dom.HTMLLIElementImpl" />
	<method signature="void setValue(int)" class="org.apache.html.dom.HTMLLIElementImpl" />
	<method signature="void setType(java.lang.String)" class="org.apache.html.dom.HTMLLIElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLLIElementImpl" />
	<class name="tourma.views.fullscreen.JFullScreenClanRank" />
	<method signature="void &lt;init&gt;(int)" class="tourma.views.fullscreen.JFullScreenClanRank" />
	<method signature="void &lt;init&gt;(java.net.Socket)" class="tourma.views.fullscreen.JFullScreenClanRank" />
	<class name="tourma.tableModel.MjtAnnexRankIndiv" />
	<method signature="void &lt;init&gt;(int,tourma.data.Criteria,int,java.util.ArrayList,boolean,int,int,int,int,int,boolean,boolean)" class="tourma.tableModel.MjtAnnexRankIndiv" />
	<method signature="java.lang.String getColumnName(int)" class="tourma.tableModel.MjtAnnexRankIndiv" />
	<method signature="java.lang.Object getValueAt(int,int)" class="tourma.tableModel.MjtAnnexRankIndiv" />
	<method signature="int getColumnCount()" class="tourma.tableModel.MjtAnnexRankIndiv" />
	<class name="org.jfree.data.general.DatasetGroup" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.general.DatasetGroup" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.general.DatasetGroup" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.general.DatasetGroup" />
	<method signature="java.lang.String getID()" class="org.jfree.data.general.DatasetGroup" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.data.general.DatasetGroup" />
	<class name="org.w3c.dom.html.HTMLMetaElement" />
	<method signature="java.lang.String getName()" class="org.w3c.dom.html.HTMLMetaElement" />
	<method signature="java.lang.String getScheme()" class="org.w3c.dom.html.HTMLMetaElement" />
	<method signature="void setHttpEquiv(java.lang.String)" class="org.w3c.dom.html.HTMLMetaElement" />
	<method signature="void setContent(java.lang.String)" class="org.w3c.dom.html.HTMLMetaElement" />
	<method signature="java.lang.String getContent()" class="org.w3c.dom.html.HTMLMetaElement" />
	<method signature="void setName(java.lang.String)" class="org.w3c.dom.html.HTMLMetaElement" />
	<method signature="void setScheme(java.lang.String)" class="org.w3c.dom.html.HTMLMetaElement" />
	<method signature="java.lang.String getHttpEquiv()" class="org.w3c.dom.html.HTMLMetaElement" />
	<class name="tourma.views.round.JPNRound" />
	<method signature="int getMatchTableSelectedRow()" class="tourma.views.round.JPNRound" />
	<method signature="tourma.data.Round getRound()" class="tourma.views.round.JPNRound" />
	<method signature="void update()" class="tourma.views.round.JPNRound" />
	<method signature="void &lt;init&gt;(int,tourma.data.Round,tourma.data.Tournament)" class="tourma.views.round.JPNRound" />
	<method signature="void setRoundOnly(boolean)" class="tourma.views.round.JPNRound" />
	<method signature="void setNafOnly(boolean)" class="tourma.views.round.JPNRound" />
	<class name="org.jfree.chart.block.ColorBlock" />
	<method signature="java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)" class="org.jfree.chart.block.ColorBlock" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.block.ColorBlock" />
	<method signature="void &lt;init&gt;(java.awt.Paint,double,double)" class="org.jfree.chart.block.ColorBlock" />
	<method signature="java.awt.Paint getPaint()" class="org.jfree.chart.block.ColorBlock" />
	<method signature="org.jfree.ui.Size2D arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" class="org.jfree.chart.block.ColorBlock" />
	<method signature="void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" class="org.jfree.chart.block.ColorBlock" />
	<class name="org.jfree.util.PrintStreamLogTarget" />
	<method signature="void &lt;init&gt;(java.io.PrintStream)" class="org.jfree.util.PrintStreamLogTarget" />
	<method signature="void log(int,java.lang.Object,java.lang.Exception)" class="org.jfree.util.PrintStreamLogTarget" />
	<method signature="void &lt;init&gt;()" class="org.jfree.util.PrintStreamLogTarget" />
	<method signature="void log(int,java.lang.Object)" class="org.jfree.util.PrintStreamLogTarget" />
	<class name="javax.xml.bind.helpers.ValidationEventImpl" />
	<method signature="int getSeverity()" class="javax.xml.bind.helpers.ValidationEventImpl" />
	<method signature="void &lt;init&gt;(int,java.lang.String,javax.xml.bind.ValidationEventLocator,java.lang.Throwable)" class="javax.xml.bind.helpers.ValidationEventImpl" />
	<method signature="void &lt;init&gt;(int,java.lang.String,javax.xml.bind.ValidationEventLocator)" class="javax.xml.bind.helpers.ValidationEventImpl" />
	<method signature="java.lang.Throwable getLinkedException()" class="javax.xml.bind.helpers.ValidationEventImpl" />
	<method signature="void setLocator(javax.xml.bind.ValidationEventLocator)" class="javax.xml.bind.helpers.ValidationEventImpl" />
	<method signature="void setLinkedException(java.lang.Throwable)" class="javax.xml.bind.helpers.ValidationEventImpl" />
	<method signature="javax.xml.bind.ValidationEventLocator getLocator()" class="javax.xml.bind.helpers.ValidationEventImpl" />
	<method signature="void setMessage(java.lang.String)" class="javax.xml.bind.helpers.ValidationEventImpl" />
	<method signature="java.lang.String getMessage()" class="javax.xml.bind.helpers.ValidationEventImpl" />
	<method signature="void setSeverity(int)" class="javax.xml.bind.helpers.ValidationEventImpl" />
	<class name="org.apache.xerces.impl.dv.ValidationContext" />
	<method signature="boolean useNamespaces()" class="org.apache.xerces.impl.dv.ValidationContext" />
	<method signature="boolean needFacetChecking()" class="org.apache.xerces.impl.dv.ValidationContext" />
	<method signature="boolean needExtraChecking()" class="org.apache.xerces.impl.dv.ValidationContext" />
	<method signature="java.util.Locale getLocale()" class="org.apache.xerces.impl.dv.ValidationContext" />
	<method signature="java.lang.String getSymbol(java.lang.String)" class="org.apache.xerces.impl.dv.ValidationContext" />
	<method signature="java.lang.String getURI(java.lang.String)" class="org.apache.xerces.impl.dv.ValidationContext" />
	<method signature="boolean needToNormalize()" class="org.apache.xerces.impl.dv.ValidationContext" />
	<method signature="boolean isIdDeclared(java.lang.String)" class="org.apache.xerces.impl.dv.ValidationContext" />
	<method signature="void addId(java.lang.String)" class="org.apache.xerces.impl.dv.ValidationContext" />
	<method signature="boolean isEntityDeclared(java.lang.String)" class="org.apache.xerces.impl.dv.ValidationContext" />
	<method signature="void addIdRef(java.lang.String)" class="org.apache.xerces.impl.dv.ValidationContext" />
	<method signature="boolean isEntityUnparsed(java.lang.String)" class="org.apache.xerces.impl.dv.ValidationContext" />
	<class name="tourma.views.fullscreen.JFullScreen$ClientLoop" />
	<method signature="void run()" class="tourma.views.fullscreen.JFullScreen$ClientLoop" />
	<method signature="void setStop(boolean)" class="tourma.views.fullscreen.JFullScreen$ClientLoop" />
	<class name="org.jfree.chart.renderer.category.MinMaxCategoryRenderer" />
	<method signature="void setObjectIcon(javax.swing.Icon)" class="org.jfree.chart.renderer.category.MinMaxCategoryRenderer" />
	<method signature="boolean isDrawLines()" class="org.jfree.chart.renderer.category.MinMaxCategoryRenderer" />
	<method signature="java.awt.Stroke getGroupStroke()" class="org.jfree.chart.renderer.category.MinMaxCategoryRenderer" />
	<method signature="void setGroupStroke(java.awt.Stroke)" class="org.jfree.chart.renderer.category.MinMaxCategoryRenderer" />
	<method signature="void setMinIcon(javax.swing.Icon)" class="org.jfree.chart.renderer.category.MinMaxCategoryRenderer" />
	<method signature="javax.swing.Icon getMinIcon()" class="org.jfree.chart.renderer.category.MinMaxCategoryRenderer" />
	<method signature="void setGroupPaint(java.awt.Paint)" class="org.jfree.chart.renderer.category.MinMaxCategoryRenderer" />
	<method signature="java.awt.Paint getGroupPaint()" class="org.jfree.chart.renderer.category.MinMaxCategoryRenderer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.category.MinMaxCategoryRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.category.MinMaxCategoryRenderer" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)" class="org.jfree.chart.renderer.category.MinMaxCategoryRenderer" />
	<method signature="javax.swing.Icon getObjectIcon()" class="org.jfree.chart.renderer.category.MinMaxCategoryRenderer" />
	<method signature="void setMaxIcon(javax.swing.Icon)" class="org.jfree.chart.renderer.category.MinMaxCategoryRenderer" />
	<method signature="void setDrawLines(boolean)" class="org.jfree.chart.renderer.category.MinMaxCategoryRenderer" />
	<method signature="javax.swing.Icon getMaxIcon()" class="org.jfree.chart.renderer.category.MinMaxCategoryRenderer" />
	<class name="com.swabunga.spell.engine.Configuration" />
	<method signature="boolean getBoolean(java.lang.String)" class="com.swabunga.spell.engine.Configuration" />
	<method signature="void setBoolean(java.lang.String,boolean)" class="com.swabunga.spell.engine.Configuration" />
	<method signature="void &lt;init&gt;()" class="com.swabunga.spell.engine.Configuration" />
	<method signature="com.swabunga.spell.engine.Configuration getConfiguration()" class="com.swabunga.spell.engine.Configuration" />
	<method signature="int getInteger(java.lang.String)" class="com.swabunga.spell.engine.Configuration" />
	<method signature="void setInteger(java.lang.String,int)" class="com.swabunga.spell.engine.Configuration" />
	<class name="org.jfree.chart.labels.XYToolTipGenerator" />
	<method signature="java.lang.String generateToolTip(org.jfree.data.xy.XYDataset,int,int)" class="org.jfree.chart.labels.XYToolTipGenerator" />
	<class name="org.jdom2.input.sax.AbstractReaderXSDFactory" />
	<method signature="void &lt;init&gt;(javax.xml.parsers.SAXParserFactory,org.jdom2.input.sax.AbstractReaderXSDFactory$SchemaFactoryProvider,java.lang.String[])" class="org.jdom2.input.sax.AbstractReaderXSDFactory" />
	<method signature="void &lt;init&gt;(javax.xml.parsers.SAXParserFactory,org.jdom2.input.sax.AbstractReaderXSDFactory$SchemaFactoryProvider,java.io.File[])" class="org.jdom2.input.sax.AbstractReaderXSDFactory" />
	<method signature="void &lt;init&gt;(javax.xml.parsers.SAXParserFactory,org.jdom2.input.sax.AbstractReaderXSDFactory$SchemaFactoryProvider,javax.xml.transform.Source[])" class="org.jdom2.input.sax.AbstractReaderXSDFactory" />
	<method signature="void &lt;init&gt;(javax.xml.parsers.SAXParserFactory,org.jdom2.input.sax.AbstractReaderXSDFactory$SchemaFactoryProvider,java.net.URL[])" class="org.jdom2.input.sax.AbstractReaderXSDFactory" />
	<class name="org.apache.html.dom.HTMLPreElementImpl" />
	<method signature="void setWidth(int)" class="org.apache.html.dom.HTMLPreElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLPreElementImpl" />
	<method signature="int getWidth()" class="org.apache.html.dom.HTMLPreElementImpl" />
	<class name="org.apache.xerces.dom.DOMImplementationSourceImpl" />
	<method signature="org.w3c.dom.DOMImplementation getDOMImplementation(java.lang.String)" class="org.apache.xerces.dom.DOMImplementationSourceImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.dom.DOMImplementationSourceImpl" />
	<method signature="org.w3c.dom.DOMImplementationList getDOMImplementationList(java.lang.String)" class="org.apache.xerces.dom.DOMImplementationSourceImpl" />
	<class name="org.apache.wml.dom.WMLOneventElementImpl" />
	<method signature="java.lang.String getType()" class="org.apache.wml.dom.WMLOneventElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.wml.dom.WMLDocumentImpl,java.lang.String)" class="org.apache.wml.dom.WMLOneventElementImpl" />
	<method signature="java.lang.String getId()" class="org.apache.wml.dom.WMLOneventElementImpl" />
	<method signature="java.lang.String getClassName()" class="org.apache.wml.dom.WMLOneventElementImpl" />
	<method signature="void setType(java.lang.String)" class="org.apache.wml.dom.WMLOneventElementImpl" />
	<method signature="void setClassName(java.lang.String)" class="org.apache.wml.dom.WMLOneventElementImpl" />
	<method signature="void setId(java.lang.String)" class="org.apache.wml.dom.WMLOneventElementImpl" />
	<class name="org.apache.wml.dom.WMLBigElementImpl" />
	<method signature="java.lang.String getXmlLang()" class="org.apache.wml.dom.WMLBigElementImpl" />
	<method signature="void setXmlLang(java.lang.String)" class="org.apache.wml.dom.WMLBigElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.wml.dom.WMLDocumentImpl,java.lang.String)" class="org.apache.wml.dom.WMLBigElementImpl" />
	<method signature="java.lang.String getId()" class="org.apache.wml.dom.WMLBigElementImpl" />
	<method signature="java.lang.String getClassName()" class="org.apache.wml.dom.WMLBigElementImpl" />
	<method signature="void setClassName(java.lang.String)" class="org.apache.wml.dom.WMLBigElementImpl" />
	<method signature="void setId(java.lang.String)" class="org.apache.wml.dom.WMLBigElementImpl" />
	<class name="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer$State" />
	<method signature="void &lt;init&gt;(org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer$State" />
	<method signature="boolean isLastPointGood()" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer$State" />
	<method signature="void startSeriesPass(org.jfree.data.xy.XYDataset,int,int,int,int,int)" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer$State" />
	<method signature="void setLastPointGood(boolean)" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer$State" />
	<class name="com.google.zxing.client.result.CalendarParsedResult" />
	<method signature="java.lang.String getLocation()" class="com.google.zxing.client.result.CalendarParsedResult" />
	<method signature="java.lang.String getSummary()" class="com.google.zxing.client.result.CalendarParsedResult" />
	<method signature="boolean isStartAllDay()" class="com.google.zxing.client.result.CalendarParsedResult" />
	<method signature="java.lang.String[] getAttendees()" class="com.google.zxing.client.result.CalendarParsedResult" />
	<method signature="boolean isEndAllDay()" class="com.google.zxing.client.result.CalendarParsedResult" />
	<method signature="java.lang.String getDescription()" class="com.google.zxing.client.result.CalendarParsedResult" />
	<method signature="java.util.Date getEnd()" class="com.google.zxing.client.result.CalendarParsedResult" />
	<method signature="double getLongitude()" class="com.google.zxing.client.result.CalendarParsedResult" />
	<method signature="java.lang.String getDisplayResult()" class="com.google.zxing.client.result.CalendarParsedResult" />
	<method signature="double getLatitude()" class="com.google.zxing.client.result.CalendarParsedResult" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,double,double)" class="com.google.zxing.client.result.CalendarParsedResult" />
	<method signature="java.lang.String getOrganizer()" class="com.google.zxing.client.result.CalendarParsedResult" />
	<method signature="java.util.Date getStart()" class="com.google.zxing.client.result.CalendarParsedResult" />
	<class name="org.unbescape.html.HtmlEscapeType" />
	<method signature="org.unbescape.html.HtmlEscapeType[] values()" class="org.unbescape.html.HtmlEscapeType" />
	<method signature="org.unbescape.html.HtmlEscapeType valueOf(java.lang.String)" class="org.unbescape.html.HtmlEscapeType" />
	<class name="org.jfree.chart.encoders.KeypointPNGEncoderAdapter" />
	<method signature="boolean isEncodingAlpha()" class="org.jfree.chart.encoders.KeypointPNGEncoderAdapter" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.encoders.KeypointPNGEncoderAdapter" />
	<method signature="float getQuality()" class="org.jfree.chart.encoders.KeypointPNGEncoderAdapter" />
	<method signature="void setEncodingAlpha(boolean)" class="org.jfree.chart.encoders.KeypointPNGEncoderAdapter" />
	<method signature="byte[] encode(java.awt.image.BufferedImage)" class="org.jfree.chart.encoders.KeypointPNGEncoderAdapter" />
	<method signature="void setQuality(float)" class="org.jfree.chart.encoders.KeypointPNGEncoderAdapter" />
	<method signature="void encode(java.awt.image.BufferedImage,java.io.OutputStream)" class="org.jfree.chart.encoders.KeypointPNGEncoderAdapter" />
	<class name="tourma.data.IContainCoachs" />
	<method signature="void addCoach(tourma.data.Coach)" class="tourma.data.IContainCoachs" />
	<method signature="tourma.data.Coach getCoach(int)" class="tourma.data.IContainCoachs" />
	<method signature="void removeCoach(int)" class="tourma.data.IContainCoachs" />
	<method signature="boolean containsCoach(tourma.data.Coach)" class="tourma.data.IContainCoachs" />
	<method signature="int getCoachsCount()" class="tourma.data.IContainCoachs" />
	<method signature="void clearCoachs()" class="tourma.data.IContainCoachs" />
	<class name="edu.umd.cs.findbugs.annotations.DefaultAnnotation" />
	<method signature="edu.umd.cs.findbugs.annotations.Confidence confidence()" class="edu.umd.cs.findbugs.annotations.DefaultAnnotation" />
	<method signature="edu.umd.cs.findbugs.annotations.Priority priority()" class="edu.umd.cs.findbugs.annotations.DefaultAnnotation" />
	<method signature="java.lang.Class[] value()" class="edu.umd.cs.findbugs.annotations.DefaultAnnotation" />
	<class name="org.apache.xerces.impl.XML11DTDScannerImpl" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable,org.apache.xerces.impl.XMLErrorReporter,org.apache.xerces.impl.XMLEntityManager)" class="org.apache.xerces.impl.XML11DTDScannerImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.XML11DTDScannerImpl" />
	<class name="org.apache.xerces.parsers.DOMParser" />
	<method signature="org.xml.sax.ErrorHandler getErrorHandler()" class="org.apache.xerces.parsers.DOMParser" />
	<method signature="boolean getFeature(java.lang.String)" class="org.apache.xerces.parsers.DOMParser" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="org.apache.xerces.parsers.DOMParser" />
	<method signature="void &lt;init&gt;(org.apache.xerces.xni.parser.XMLParserConfiguration)" class="org.apache.xerces.parsers.DOMParser" />
	<method signature="void parse(org.xml.sax.InputSource)" class="org.apache.xerces.parsers.DOMParser" />
	<method signature="org.xml.sax.EntityResolver getEntityResolver()" class="org.apache.xerces.parsers.DOMParser" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable)" class="org.apache.xerces.parsers.DOMParser" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.parsers.DOMParser" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable,org.apache.xerces.xni.grammars.XMLGrammarPool)" class="org.apache.xerces.parsers.DOMParser" />
	<method signature="void setEntityResolver(org.xml.sax.EntityResolver)" class="org.apache.xerces.parsers.DOMParser" />
	<method signature="org.apache.xerces.xni.parser.XMLParserConfiguration getXMLParserConfiguration()" class="org.apache.xerces.parsers.DOMParser" />
	<method signature="void parse(java.lang.String)" class="org.apache.xerces.parsers.DOMParser" />
	<method signature="void setFeature(java.lang.String,boolean)" class="org.apache.xerces.parsers.DOMParser" />
	<method signature="void setErrorHandler(org.xml.sax.ErrorHandler)" class="org.apache.xerces.parsers.DOMParser" />
	<method signature="java.lang.Object getProperty(java.lang.String)" class="org.apache.xerces.parsers.DOMParser" />
	<class name="org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator" />
	<method signature="void &lt;init&gt;(java.lang.String,java.text.DateFormat,java.text.NumberFormat)" class="org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator" />
	<class name="com.swabunga.spell.event.SpellChecker" />
	<method signature="void dispose()" class="com.swabunga.spell.event.SpellChecker" />
	<method signature="void &lt;init&gt;(com.swabunga.spell.engine.SpellDictionary)" class="com.swabunga.spell.event.SpellChecker" />
	<method signature="int checkSpelling(com.swabunga.spell.event.WordTokenizer)" class="com.swabunga.spell.event.SpellChecker" />
	<method signature="void reset()" class="com.swabunga.spell.event.SpellChecker" />
	<method signature="void &lt;init&gt;(com.swabunga.spell.engine.SpellDictionary,int)" class="com.swabunga.spell.event.SpellChecker" />
	<method signature="void addSpellCheckListener(com.swabunga.spell.event.SpellCheckListener)" class="com.swabunga.spell.event.SpellChecker" />
	<method signature="void removeSpellCheckListener(com.swabunga.spell.event.SpellCheckListener)" class="com.swabunga.spell.event.SpellChecker" />
	<method signature="java.lang.String checkString(java.lang.String)" class="com.swabunga.spell.event.SpellChecker" />
	<class name="org.jfree.data.xy.DefaultHighLowDataset" />
	<method signature="double getVolumeValue(int,int)" class="org.jfree.data.xy.DefaultHighLowDataset" />
	<method signature="java.lang.Number getLow(int,int)" class="org.jfree.data.xy.DefaultHighLowDataset" />
	<method signature="void &lt;init&gt;(java.lang.Comparable,java.util.Date[],double[],double[],double[],double[],double[])" class="org.jfree.data.xy.DefaultHighLowDataset" />
	<method signature="java.lang.Number getX(int,int)" class="org.jfree.data.xy.DefaultHighLowDataset" />
	<method signature="java.lang.Number getVolume(int,int)" class="org.jfree.data.xy.DefaultHighLowDataset" />
	<method signature="java.lang.Number getY(int,int)" class="org.jfree.data.xy.DefaultHighLowDataset" />
	<method signature="double getHighValue(int,int)" class="org.jfree.data.xy.DefaultHighLowDataset" />
	<method signature="double getOpenValue(int,int)" class="org.jfree.data.xy.DefaultHighLowDataset" />
	<method signature="java.lang.Number[] createNumberArray(double[])" class="org.jfree.data.xy.DefaultHighLowDataset" />
	<method signature="java.lang.Number getHigh(int,int)" class="org.jfree.data.xy.DefaultHighLowDataset" />
	<method signature="int getSeriesCount()" class="org.jfree.data.xy.DefaultHighLowDataset" />
	<method signature="java.lang.Comparable getSeriesKey(int)" class="org.jfree.data.xy.DefaultHighLowDataset" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.xy.DefaultHighLowDataset" />
	<method signature="java.lang.Number getClose(int,int)" class="org.jfree.data.xy.DefaultHighLowDataset" />
	<method signature="java.util.Date getXDate(int,int)" class="org.jfree.data.xy.DefaultHighLowDataset" />
	<method signature="java.lang.Number getOpen(int,int)" class="org.jfree.data.xy.DefaultHighLowDataset" />
	<method signature="double getCloseValue(int,int)" class="org.jfree.data.xy.DefaultHighLowDataset" />
	<method signature="int getItemCount(int)" class="org.jfree.data.xy.DefaultHighLowDataset" />
	<method signature="double getLowValue(int,int)" class="org.jfree.data.xy.DefaultHighLowDataset" />
	<class name="org.apache.xerces.impl.dv.dtd.XML11DTDDVFactoryImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.dtd.XML11DTDDVFactoryImpl" />
	<method signature="java.util.Hashtable getBuiltInTypes()" class="org.apache.xerces.impl.dv.dtd.XML11DTDDVFactoryImpl" />
	<method signature="org.apache.xerces.impl.dv.DatatypeValidator getBuiltInDV(java.lang.String)" class="org.apache.xerces.impl.dv.dtd.XML11DTDDVFactoryImpl" />
	<class name="org.jfree.chart.demo.BarChartDemo1" />
	<method signature="void main(java.lang.String[])" class="org.jfree.chart.demo.BarChartDemo1" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.chart.demo.BarChartDemo1" />
	<class name="freemarker.core.FreeMarkerTree" />
	<method signature="void setTemplate(freemarker.template.Template)" class="freemarker.core.FreeMarkerTree" />
	<method signature="java.lang.String convertValueToText(java.lang.Object,boolean,boolean,boolean,int,boolean)" class="freemarker.core.FreeMarkerTree" />
	<method signature="void &lt;init&gt;(freemarker.template.Template)" class="freemarker.core.FreeMarkerTree" />
	<class name="org.apache.xerces.impl.xs.SchemaNamespaceSupport" />
	<method signature="void &lt;init&gt;(org.apache.xerces.impl.xs.SchemaNamespaceSupport)" class="org.apache.xerces.impl.xs.SchemaNamespaceSupport" />
	<method signature="void setEffectiveContext(java.lang.String[])" class="org.apache.xerces.impl.xs.SchemaNamespaceSupport" />
	<method signature="java.lang.String[] getEffectiveLocalContext()" class="org.apache.xerces.impl.xs.SchemaNamespaceSupport" />
	<method signature="java.lang.String getURI(java.lang.String)" class="org.apache.xerces.impl.xs.SchemaNamespaceSupport" />
	<method signature="void &lt;init&gt;(org.w3c.dom.Element,org.apache.xerces.util.SymbolTable)" class="org.apache.xerces.impl.xs.SchemaNamespaceSupport" />
	<method signature="void makeGlobal()" class="org.apache.xerces.impl.xs.SchemaNamespaceSupport" />
	<class name="org.jfree.chart.renderer.xy.XYBarRenderer$XYBarRendererState" />
	<method signature="void &lt;init&gt;(org.jfree.chart.renderer.xy.XYBarRenderer,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.renderer.xy.XYBarRenderer$XYBarRendererState" />
	<method signature="double getG2Base()" class="org.jfree.chart.renderer.xy.XYBarRenderer$XYBarRendererState" />
	<method signature="void setG2Base(double)" class="org.jfree.chart.renderer.xy.XYBarRenderer$XYBarRendererState" />
	<class name="org.jfree.chart.labels.CategoryItemLabelGenerator" />
	<method signature="java.lang.String generateRowLabel(org.jfree.data.category.CategoryDataset,int)" class="org.jfree.chart.labels.CategoryItemLabelGenerator" />
	<method signature="java.lang.String generateColumnLabel(org.jfree.data.category.CategoryDataset,int)" class="org.jfree.chart.labels.CategoryItemLabelGenerator" />
	<method signature="java.lang.String generateLabel(org.jfree.data.category.CategoryDataset,int,int)" class="org.jfree.chart.labels.CategoryItemLabelGenerator" />
	<class name="org.jfree.chart.block.EmptyBlock" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.block.EmptyBlock" />
	<method signature="java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)" class="org.jfree.chart.block.EmptyBlock" />
	<method signature="org.jfree.ui.Size2D arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" class="org.jfree.chart.block.EmptyBlock" />
	<method signature="void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" class="org.jfree.chart.block.EmptyBlock" />
	<method signature="void &lt;init&gt;(double,double)" class="org.jfree.chart.block.EmptyBlock" />
	<class name="org.jdom2.Content$CType" />
	<method signature="org.jdom2.Content$CType[] values()" class="org.jdom2.Content$CType" />
	<method signature="org.jdom2.Content$CType valueOf(java.lang.String)" class="org.jdom2.Content$CType" />
	<class name="org.jdom2.DataConversionException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="org.jdom2.DataConversionException" />
	<class name="org.jfree.base.config.ModifiableConfiguration" />
	<method signature="void setConfigProperty(java.lang.String,java.lang.String)" class="org.jfree.base.config.ModifiableConfiguration" />
	<method signature="java.util.Enumeration getConfigProperties()" class="org.jfree.base.config.ModifiableConfiguration" />
	<method signature="java.util.Iterator findPropertyKeys(java.lang.String)" class="org.jfree.base.config.ModifiableConfiguration" />
	<class name="org.apache.xerces.dom.DOMErrorImpl" />
	<method signature="java.lang.Object getRelatedData()" class="org.apache.xerces.dom.DOMErrorImpl" />
	<method signature="java.lang.Object getRelatedException()" class="org.apache.xerces.dom.DOMErrorImpl" />
	<method signature="void reset()" class="org.apache.xerces.dom.DOMErrorImpl" />
	<method signature="void &lt;init&gt;(short,org.apache.xerces.xni.parser.XMLParseException)" class="org.apache.xerces.dom.DOMErrorImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.dom.DOMErrorImpl" />
	<method signature="java.lang.String getType()" class="org.apache.xerces.dom.DOMErrorImpl" />
	<method signature="java.lang.String getMessage()" class="org.apache.xerces.dom.DOMErrorImpl" />
	<method signature="short getSeverity()" class="org.apache.xerces.dom.DOMErrorImpl" />
	<method signature="org.w3c.dom.DOMLocator getLocation()" class="org.apache.xerces.dom.DOMErrorImpl" />
	<class name="org.jfree.chart.plot.dial.DialValueIndicator" />
	<method signature="void setOutlineStroke(java.awt.Stroke)" class="org.jfree.chart.plot.dial.DialValueIndicator" />
	<method signature="org.jfree.ui.RectangleAnchor getValueAnchor()" class="org.jfree.chart.plot.dial.DialValueIndicator" />
	<method signature="double getAngle()" class="org.jfree.chart.plot.dial.DialValueIndicator" />
	<method signature="void setDatasetIndex(int)" class="org.jfree.chart.plot.dial.DialValueIndicator" />
	<method signature="java.awt.Stroke getOutlineStroke()" class="org.jfree.chart.plot.dial.DialValueIndicator" />
	<method signature="org.jfree.ui.TextAnchor getTextAnchor()" class="org.jfree.chart.plot.dial.DialValueIndicator" />
	<method signature="java.awt.Font getFont()" class="org.jfree.chart.plot.dial.DialValueIndicator" />
	<method signature="void setOutlinePaint(java.awt.Paint)" class="org.jfree.chart.plot.dial.DialValueIndicator" />
	<method signature="org.jfree.ui.RectangleInsets getInsets()" class="org.jfree.chart.plot.dial.DialValueIndicator" />
	<method signature="boolean isClippedToWindow()" class="org.jfree.chart.plot.dial.DialValueIndicator" />
	<method signature="void setPaint(java.awt.Paint)" class="org.jfree.chart.plot.dial.DialValueIndicator" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.plot.dial.DialValueIndicator" />
	<method signature="void setNumberFormat(java.text.NumberFormat)" class="org.jfree.chart.plot.dial.DialValueIndicator" />
	<method signature="void setValueAnchor(org.jfree.ui.RectangleAnchor)" class="org.jfree.chart.plot.dial.DialValueIndicator" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.plot.dial.DialValueIndicator" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.plot.dial.DialValueIndicator" />
	<method signature="void setFont(java.awt.Font)" class="org.jfree.chart.plot.dial.DialValueIndicator" />
	<method signature="java.awt.Paint getOutlinePaint()" class="org.jfree.chart.plot.dial.DialValueIndicator" />
	<method signature="void setTextAnchor(org.jfree.ui.TextAnchor)" class="org.jfree.chart.plot.dial.DialValueIndicator" />
	<method signature="void setAngle(double)" class="org.jfree.chart.plot.dial.DialValueIndicator" />
	<method signature="double getRadius()" class="org.jfree.chart.plot.dial.DialValueIndicator" />
	<method signature="int getDatasetIndex()" class="org.jfree.chart.plot.dial.DialValueIndicator" />
	<method signature="int hashCode()" class="org.jfree.chart.plot.dial.DialValueIndicator" />
	<method signature="java.awt.Paint getBackgroundPaint()" class="org.jfree.chart.plot.dial.DialValueIndicator" />
	<method signature="void setInsets(org.jfree.ui.RectangleInsets)" class="org.jfree.chart.plot.dial.DialValueIndicator" />
	<method signature="java.lang.Number getTemplateValue()" class="org.jfree.chart.plot.dial.DialValueIndicator" />
	<method signature="void setMaxTemplateValue(java.lang.Number)" class="org.jfree.chart.plot.dial.DialValueIndicator" />
	<method signature="java.awt.Paint getPaint()" class="org.jfree.chart.plot.dial.DialValueIndicator" />
	<method signature="org.jfree.ui.RectangleAnchor getFrameAnchor()" class="org.jfree.chart.plot.dial.DialValueIndicator" />
	<method signature="void &lt;init&gt;(int)" class="org.jfree.chart.plot.dial.DialValueIndicator" />
	<method signature="void setRadius(double)" class="org.jfree.chart.plot.dial.DialValueIndicator" />
	<method signature="void setFrameAnchor(org.jfree.ui.RectangleAnchor)" class="org.jfree.chart.plot.dial.DialValueIndicator" />
	<method signature="java.text.NumberFormat getNumberFormat()" class="org.jfree.chart.plot.dial.DialValueIndicator" />
	<method signature="java.lang.Number getMaxTemplateValue()" class="org.jfree.chart.plot.dial.DialValueIndicator" />
	<method signature="void setTemplateValue(java.lang.Number)" class="org.jfree.chart.plot.dial.DialValueIndicator" />
	<method signature="void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)" class="org.jfree.chart.plot.dial.DialValueIndicator" />
	<method signature="void setBackgroundPaint(java.awt.Paint)" class="org.jfree.chart.plot.dial.DialValueIndicator" />
	<class name="javax.xml.parsers.SAXParser" />
	<method signature="void parse(java.io.InputStream,org.xml.sax.helpers.DefaultHandler,java.lang.String)" class="javax.xml.parsers.SAXParser" />
	<method signature="org.xml.sax.XMLReader getXMLReader()" class="javax.xml.parsers.SAXParser" />
	<method signature="boolean isXIncludeAware()" class="javax.xml.parsers.SAXParser" />
	<method signature="void reset()" class="javax.xml.parsers.SAXParser" />
	<method signature="void parse(java.io.File,org.xml.sax.HandlerBase)" class="javax.xml.parsers.SAXParser" />
	<method signature="void parse(java.io.InputStream,org.xml.sax.HandlerBase)" class="javax.xml.parsers.SAXParser" />
	<method signature="void parse(java.io.InputStream,org.xml.sax.HandlerBase,java.lang.String)" class="javax.xml.parsers.SAXParser" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="javax.xml.parsers.SAXParser" />
	<method signature="void parse(java.io.File,org.xml.sax.helpers.DefaultHandler)" class="javax.xml.parsers.SAXParser" />
	<method signature="void parse(org.xml.sax.InputSource,org.xml.sax.HandlerBase)" class="javax.xml.parsers.SAXParser" />
	<method signature="void parse(org.xml.sax.InputSource,org.xml.sax.helpers.DefaultHandler)" class="javax.xml.parsers.SAXParser" />
	<method signature="javax.xml.validation.Schema getSchema()" class="javax.xml.parsers.SAXParser" />
	<method signature="void parse(java.io.InputStream,org.xml.sax.helpers.DefaultHandler)" class="javax.xml.parsers.SAXParser" />
	<method signature="org.xml.sax.Parser getParser()" class="javax.xml.parsers.SAXParser" />
	<method signature="boolean isValidating()" class="javax.xml.parsers.SAXParser" />
	<method signature="boolean isNamespaceAware()" class="javax.xml.parsers.SAXParser" />
	<method signature="void parse(java.lang.String,org.xml.sax.HandlerBase)" class="javax.xml.parsers.SAXParser" />
	<method signature="void parse(java.lang.String,org.xml.sax.helpers.DefaultHandler)" class="javax.xml.parsers.SAXParser" />
	<method signature="java.lang.Object getProperty(java.lang.String)" class="javax.xml.parsers.SAXParser" />
	<class name="org.apache.xml.serialize.Method" />
	<method signature="void &lt;init&gt;()" class="org.apache.xml.serialize.Method" />
	<class name="org.apache.xerces.xni.parser.XMLDocumentSource" />
	<method signature="org.apache.xerces.xni.XMLDocumentHandler getDocumentHandler()" class="org.apache.xerces.xni.parser.XMLDocumentSource" />
	<method signature="void setDocumentHandler(org.apache.xerces.xni.XMLDocumentHandler)" class="org.apache.xerces.xni.parser.XMLDocumentSource" />
	<class name="org.jfree.chart.renderer.category.BarPainter" />
	<method signature="void paintBarShadow(java.awt.Graphics2D,org.jfree.chart.renderer.category.BarRenderer,int,int,java.awt.geom.RectangularShape,org.jfree.ui.RectangleEdge,boolean)" class="org.jfree.chart.renderer.category.BarPainter" />
	<method signature="void paintBar(java.awt.Graphics2D,org.jfree.chart.renderer.category.BarRenderer,int,int,java.awt.geom.RectangularShape,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.renderer.category.BarPainter" />
	<class name="org.w3c.dom.stylesheets.DocumentStyle" />
	<method signature="org.w3c.dom.stylesheets.StyleSheetList getStyleSheets()" class="org.w3c.dom.stylesheets.DocumentStyle" />
	<class name="tourma.views.GraphicalMatch" />
	<method signature="javax.swing.JLabel getClanIcon1()" class="tourma.views.GraphicalMatch" />
	<method signature="javax.swing.JLabel getClanIcon2()" class="tourma.views.GraphicalMatch" />
	<method signature="void setClanIcon2(javax.swing.JLabel)" class="tourma.views.GraphicalMatch" />
	<method signature="void setClanIcon1(javax.swing.JLabel)" class="tourma.views.GraphicalMatch" />
	<method signature="void &lt;init&gt;(tourma.data.Match,boolean,int)" class="tourma.views.GraphicalMatch" />
	<class name="tourma.data.Substitute" />
	<method signature="tourma.data.CoachMatch getMatch()" class="tourma.data.Substitute" />
	<method signature="void setSubstitute(tourma.data.Coach)" class="tourma.data.Substitute" />
	<method signature="boolean equals(java.lang.Object)" class="tourma.data.Substitute" />
	<method signature="void setTitular(tourma.data.Coach)" class="tourma.data.Substitute" />
	<method signature="void &lt;init&gt;()" class="tourma.data.Substitute" />
	<method signature="void setXMLElement(org.jdom2.Element)" class="tourma.data.Substitute" />
	<method signature="void setMatch(tourma.data.CoachMatch)" class="tourma.data.Substitute" />
	<method signature="tourma.data.Coach getTitular()" class="tourma.data.Substitute" />
	<method signature="org.jdom2.Element getXMLElement()" class="tourma.data.Substitute" />
	<method signature="tourma.data.Coach getSubstitute()" class="tourma.data.Substitute" />
	<class name="org.jfree.chart.renderer.xy.XYBubbleRenderer" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.renderer.xy.XYBubbleRenderer" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)" class="org.jfree.chart.renderer.xy.XYBubbleRenderer" />
	<method signature="org.jfree.chart.LegendItem getLegendItem(int,int)" class="org.jfree.chart.renderer.xy.XYBubbleRenderer" />
	<method signature="void &lt;init&gt;(int)" class="org.jfree.chart.renderer.xy.XYBubbleRenderer" />
	<method signature="int getScaleType()" class="org.jfree.chart.renderer.xy.XYBubbleRenderer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.xy.XYBubbleRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.xy.XYBubbleRenderer" />
	<class name="org.apache.xerces.xinclude.XInclude11TextReader" />
	<method signature="void &lt;init&gt;(org.apache.xerces.xni.parser.XMLInputSource,org.apache.xerces.xinclude.XIncludeHandler,int)" class="org.apache.xerces.xinclude.XInclude11TextReader" />
	<class name="org.apache.xerces.impl.dv.xs.ExtendedSchemaDVFactoryImpl" />
	<method signature="org.apache.xerces.impl.dv.XSSimpleType getBuiltInType(java.lang.String)" class="org.apache.xerces.impl.dv.xs.ExtendedSchemaDVFactoryImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.xs.ExtendedSchemaDVFactoryImpl" />
	<method signature="org.apache.xerces.util.SymbolHash getBuiltInTypes()" class="org.apache.xerces.impl.dv.xs.ExtendedSchemaDVFactoryImpl" />
	<class name="freemarker.ext.ant.FreemarkerXmlTask" />
	<method signature="void setValidation(boolean)" class="freemarker.ext.ant.FreemarkerXmlTask" />
	<method signature="void setIncremental(java.lang.String)" class="freemarker.ext.ant.FreemarkerXmlTask" />
	<method signature="void setTemplateEncoding(java.lang.String)" class="freemarker.ext.ant.FreemarkerXmlTask" />
	<method signature="void addConfiguredPrepareEnvironment(freemarker.ext.ant.JythonAntTask)" class="freemarker.ext.ant.FreemarkerXmlTask" />
	<method signature="void setDestdir(java.io.File)" class="freemarker.ext.ant.FreemarkerXmlTask" />
	<method signature="void setTemplate(java.lang.String)" class="freemarker.ext.ant.FreemarkerXmlTask" />
	<method signature="void setModels(java.lang.String)" class="freemarker.ext.ant.FreemarkerXmlTask" />
	<method signature="void setBasedir(java.io.File)" class="freemarker.ext.ant.FreemarkerXmlTask" />
	<method signature="void setEncoding(java.lang.String)" class="freemarker.ext.ant.FreemarkerXmlTask" />
	<method signature="void setExtension(java.lang.String)" class="freemarker.ext.ant.FreemarkerXmlTask" />
	<method signature="void &lt;init&gt;()" class="freemarker.ext.ant.FreemarkerXmlTask" />
	<method signature="void execute()" class="freemarker.ext.ant.FreemarkerXmlTask" />
	<method signature="void addConfiguredPrepareModel(freemarker.ext.ant.JythonAntTask)" class="freemarker.ext.ant.FreemarkerXmlTask" />
	<method signature="void setTemplateDir(java.io.File)" class="freemarker.ext.ant.FreemarkerXmlTask" />
	<method signature="void addConfiguredJython(freemarker.ext.ant.JythonAntTask)" class="freemarker.ext.ant.FreemarkerXmlTask" />
	<method signature="void setProjectfile(java.lang.String)" class="freemarker.ext.ant.FreemarkerXmlTask" />
	<class name="org.apache.xerces.util.JAXPNamespaceContextWrapper" />
	<method signature="org.apache.xerces.util.SymbolTable getSymbolTable()" class="org.apache.xerces.util.JAXPNamespaceContextWrapper" />
	<method signature="void reset()" class="org.apache.xerces.util.JAXPNamespaceContextWrapper" />
	<method signature="void setNamespaceContext(javax.xml.namespace.NamespaceContext)" class="org.apache.xerces.util.JAXPNamespaceContextWrapper" />
	<method signature="void popContext()" class="org.apache.xerces.util.JAXPNamespaceContextWrapper" />
	<method signature="void setDeclaredPrefixes(java.util.List)" class="org.apache.xerces.util.JAXPNamespaceContextWrapper" />
	<method signature="java.lang.String getURI(java.lang.String)" class="org.apache.xerces.util.JAXPNamespaceContextWrapper" />
	<method signature="void pushContext()" class="org.apache.xerces.util.JAXPNamespaceContextWrapper" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable)" class="org.apache.xerces.util.JAXPNamespaceContextWrapper" />
	<method signature="java.util.List getDeclaredPrefixes()" class="org.apache.xerces.util.JAXPNamespaceContextWrapper" />
	<method signature="java.lang.String getPrefix(java.lang.String)" class="org.apache.xerces.util.JAXPNamespaceContextWrapper" />
	<method signature="javax.xml.namespace.NamespaceContext getNamespaceContext()" class="org.apache.xerces.util.JAXPNamespaceContextWrapper" />
	<method signature="int getDeclaredPrefixCount()" class="org.apache.xerces.util.JAXPNamespaceContextWrapper" />
	<method signature="void setSymbolTable(org.apache.xerces.util.SymbolTable)" class="org.apache.xerces.util.JAXPNamespaceContextWrapper" />
	<method signature="java.util.Enumeration getAllPrefixes()" class="org.apache.xerces.util.JAXPNamespaceContextWrapper" />
	<method signature="boolean declarePrefix(java.lang.String,java.lang.String)" class="org.apache.xerces.util.JAXPNamespaceContextWrapper" />
	<method signature="java.lang.String getDeclaredPrefixAt(int)" class="org.apache.xerces.util.JAXPNamespaceContextWrapper" />
	<class name="org.jfree.ui.action.AbstractActionDowngrade" />
	<class name="com.google.zxing.oned.Code39Writer" />
	<method signature="com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map)" class="com.google.zxing.oned.Code39Writer" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.oned.Code39Writer" />
	<method signature="boolean[] encode(java.lang.String)" class="com.google.zxing.oned.Code39Writer" />
	<class name="org.jdom2.internal.SystemProperty" />
	<method signature="void &lt;init&gt;()" class="org.jdom2.internal.SystemProperty" />
	<method signature="java.lang.String get(java.lang.String,java.lang.String)" class="org.jdom2.internal.SystemProperty" />
	<class name="org.jfree.data.contour.ContourDataset" />
	<method signature="int[] indexX()" class="org.jfree.data.contour.ContourDataset" />
	<method signature="boolean isDateAxis(int)" class="org.jfree.data.contour.ContourDataset" />
	<method signature="java.lang.Number[] getXValues()" class="org.jfree.data.contour.ContourDataset" />
	<method signature="double getMinZValue()" class="org.jfree.data.contour.ContourDataset" />
	<method signature="java.lang.Number[] getZValues()" class="org.jfree.data.contour.ContourDataset" />
	<method signature="double getMaxZValue()" class="org.jfree.data.contour.ContourDataset" />
	<method signature="org.jfree.data.Range getZValueRange(org.jfree.data.Range,org.jfree.data.Range)" class="org.jfree.data.contour.ContourDataset" />
	<method signature="int[] getXIndices()" class="org.jfree.data.contour.ContourDataset" />
	<method signature="java.lang.Number[] getYValues()" class="org.jfree.data.contour.ContourDataset" />
	<class name="org.apache.xerces.impl.XMLDocumentScannerImpl$TrailingMiscDispatcher" />
	<method signature="boolean dispatch(boolean)" class="org.apache.xerces.impl.XMLDocumentScannerImpl$TrailingMiscDispatcher" />
	<class name="org.jfree.chart.event.OverlayChangeListener" />
	<method signature="void overlayChanged(org.jfree.chart.event.OverlayChangeEvent)" class="org.jfree.chart.event.OverlayChangeListener" />
	<class name="org.apache.wml.dom.WMLSetvarElementImpl" />
	<method signature="void setValue(java.lang.String)" class="org.apache.wml.dom.WMLSetvarElementImpl" />
	<method signature="java.lang.String getName()" class="org.apache.wml.dom.WMLSetvarElementImpl" />
	<method signature="java.lang.String getValue()" class="org.apache.wml.dom.WMLSetvarElementImpl" />
	<method signature="void setName(java.lang.String)" class="org.apache.wml.dom.WMLSetvarElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.wml.dom.WMLDocumentImpl,java.lang.String)" class="org.apache.wml.dom.WMLSetvarElementImpl" />
	<method signature="java.lang.String getId()" class="org.apache.wml.dom.WMLSetvarElementImpl" />
	<method signature="java.lang.String getClassName()" class="org.apache.wml.dom.WMLSetvarElementImpl" />
	<method signature="void setClassName(java.lang.String)" class="org.apache.wml.dom.WMLSetvarElementImpl" />
	<method signature="void setId(java.lang.String)" class="org.apache.wml.dom.WMLSetvarElementImpl" />
	<class name="org.jfree.data.xy.DefaultOHLCDataset" />
	<method signature="double getVolumeValue(int,int)" class="org.jfree.data.xy.DefaultOHLCDataset" />
	<method signature="void &lt;init&gt;(java.lang.Comparable,org.jfree.data.xy.OHLCDataItem[])" class="org.jfree.data.xy.DefaultOHLCDataset" />
	<method signature="java.lang.Number getLow(int,int)" class="org.jfree.data.xy.DefaultOHLCDataset" />
	<method signature="java.lang.Number getX(int,int)" class="org.jfree.data.xy.DefaultOHLCDataset" />
	<method signature="java.lang.Number getVolume(int,int)" class="org.jfree.data.xy.DefaultOHLCDataset" />
	<method signature="java.lang.Number getY(int,int)" class="org.jfree.data.xy.DefaultOHLCDataset" />
	<method signature="double getHighValue(int,int)" class="org.jfree.data.xy.DefaultOHLCDataset" />
	<method signature="double getOpenValue(int,int)" class="org.jfree.data.xy.DefaultOHLCDataset" />
	<method signature="java.lang.Number getHigh(int,int)" class="org.jfree.data.xy.DefaultOHLCDataset" />
	<method signature="int getSeriesCount()" class="org.jfree.data.xy.DefaultOHLCDataset" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.xy.DefaultOHLCDataset" />
	<method signature="java.lang.Comparable getSeriesKey(int)" class="org.jfree.data.xy.DefaultOHLCDataset" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.xy.DefaultOHLCDataset" />
	<method signature="java.lang.Number getClose(int,int)" class="org.jfree.data.xy.DefaultOHLCDataset" />
	<method signature="java.util.Date getXDate(int,int)" class="org.jfree.data.xy.DefaultOHLCDataset" />
	<method signature="java.lang.Number getOpen(int,int)" class="org.jfree.data.xy.DefaultOHLCDataset" />
	<method signature="void sortDataByDate()" class="org.jfree.data.xy.DefaultOHLCDataset" />
	<method signature="double getCloseValue(int,int)" class="org.jfree.data.xy.DefaultOHLCDataset" />
	<method signature="int getItemCount(int)" class="org.jfree.data.xy.DefaultOHLCDataset" />
	<method signature="double getLowValue(int,int)" class="org.jfree.data.xy.DefaultOHLCDataset" />
	<class name="org.xml.sax.ext.DefaultHandler2" />
	<method signature="void internalEntityDecl(java.lang.String,java.lang.String)" class="org.xml.sax.ext.DefaultHandler2" />
	<method signature="org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.xml.sax.ext.DefaultHandler2" />
	<method signature="void attributeDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.xml.sax.ext.DefaultHandler2" />
	<method signature="void externalEntityDecl(java.lang.String,java.lang.String,java.lang.String)" class="org.xml.sax.ext.DefaultHandler2" />
	<method signature="void startDTD(java.lang.String,java.lang.String,java.lang.String)" class="org.xml.sax.ext.DefaultHandler2" />
	<method signature="org.xml.sax.InputSource getExternalSubset(java.lang.String,java.lang.String)" class="org.xml.sax.ext.DefaultHandler2" />
	<method signature="void startCDATA()" class="org.xml.sax.ext.DefaultHandler2" />
	<method signature="org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)" class="org.xml.sax.ext.DefaultHandler2" />
	<method signature="void endCDATA()" class="org.xml.sax.ext.DefaultHandler2" />
	<method signature="void elementDecl(java.lang.String,java.lang.String)" class="org.xml.sax.ext.DefaultHandler2" />
	<method signature="void endDTD()" class="org.xml.sax.ext.DefaultHandler2" />
	<method signature="void &lt;init&gt;()" class="org.xml.sax.ext.DefaultHandler2" />
	<method signature="void endEntity(java.lang.String)" class="org.xml.sax.ext.DefaultHandler2" />
	<method signature="void startEntity(java.lang.String)" class="org.xml.sax.ext.DefaultHandler2" />
	<method signature="void comment(char[],int,int)" class="org.xml.sax.ext.DefaultHandler2" />
	<class name="org.apache.xerces.stax.events.EntityDeclarationImpl" />
	<method signature="java.lang.String getSystemId()" class="org.apache.xerces.stax.events.EntityDeclarationImpl" />
	<method signature="java.lang.String getName()" class="org.apache.xerces.stax.events.EntityDeclarationImpl" />
	<method signature="java.lang.String getReplacementText()" class="org.apache.xerces.stax.events.EntityDeclarationImpl" />
	<method signature="void writeAsEncodedUnicode(java.io.Writer)" class="org.apache.xerces.stax.events.EntityDeclarationImpl" />
	<method signature="java.lang.String getNotationName()" class="org.apache.xerces.stax.events.EntityDeclarationImpl" />
	<method signature="java.lang.String getPublicId()" class="org.apache.xerces.stax.events.EntityDeclarationImpl" />
	<method signature="java.lang.String getBaseURI()" class="org.apache.xerces.stax.events.EntityDeclarationImpl" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,java.lang.String,javax.xml.stream.Location)" class="org.apache.xerces.stax.events.EntityDeclarationImpl" />
	<class name="org.apache.html.dom.HTMLElementImpl" />
	<method signature="java.lang.String getAttribute(java.lang.String)" class="org.apache.html.dom.HTMLElementImpl" />
	<method signature="java.lang.String getLang()" class="org.apache.html.dom.HTMLElementImpl" />
	<method signature="java.lang.String getId()" class="org.apache.html.dom.HTMLElementImpl" />
	<method signature="void setLang(java.lang.String)" class="org.apache.html.dom.HTMLElementImpl" />
	<method signature="void setId(java.lang.String)" class="org.apache.html.dom.HTMLElementImpl" />
	<method signature="org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String,java.lang.String)" class="org.apache.html.dom.HTMLElementImpl" />
	<method signature="java.lang.String getTitle()" class="org.apache.html.dom.HTMLElementImpl" />
	<method signature="org.w3c.dom.Attr getAttributeNodeNS(java.lang.String,java.lang.String)" class="org.apache.html.dom.HTMLElementImpl" />
	<method signature="org.w3c.dom.NodeList getElementsByTagName(java.lang.String)" class="org.apache.html.dom.HTMLElementImpl" />
	<method signature="org.w3c.dom.Attr getAttributeNode(java.lang.String)" class="org.apache.html.dom.HTMLElementImpl" />
	<method signature="java.lang.String getClassName()" class="org.apache.html.dom.HTMLElementImpl" />
	<method signature="java.lang.String getAttributeNS(java.lang.String,java.lang.String)" class="org.apache.html.dom.HTMLElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLElementImpl" />
	<method signature="java.lang.String getDir()" class="org.apache.html.dom.HTMLElementImpl" />
	<method signature="void setClassName(java.lang.String)" class="org.apache.html.dom.HTMLElementImpl" />
	<method signature="org.w3c.dom.html.HTMLFormElement getForm()" class="org.apache.html.dom.HTMLElementImpl" />
	<method signature="void setTitle(java.lang.String)" class="org.apache.html.dom.HTMLElementImpl" />
	<method signature="void setDir(java.lang.String)" class="org.apache.html.dom.HTMLElementImpl" />
	<class name="org.xml.sax.helpers.ParserAdapter" />
	<method signature="void startElement(java.lang.String,org.xml.sax.AttributeList)" class="org.xml.sax.helpers.ParserAdapter" />
	<method signature="org.xml.sax.ErrorHandler getErrorHandler()" class="org.xml.sax.helpers.ParserAdapter" />
	<method signature="void endElement(java.lang.String)" class="org.xml.sax.helpers.ParserAdapter" />
	<method signature="boolean getFeature(java.lang.String)" class="org.xml.sax.helpers.ParserAdapter" />
	<method signature="org.xml.sax.DTDHandler getDTDHandler()" class="org.xml.sax.helpers.ParserAdapter" />
	<method signature="void parse(org.xml.sax.InputSource)" class="org.xml.sax.helpers.ParserAdapter" />
	<method signature="org.xml.sax.EntityResolver getEntityResolver()" class="org.xml.sax.helpers.ParserAdapter" />
	<method signature="void &lt;init&gt;()" class="org.xml.sax.helpers.ParserAdapter" />
	<method signature="void &lt;init&gt;(org.xml.sax.Parser)" class="org.xml.sax.helpers.ParserAdapter" />
	<method signature="void startDocument()" class="org.xml.sax.helpers.ParserAdapter" />
	<method signature="void endDocument()" class="org.xml.sax.helpers.ParserAdapter" />
	<method signature="void setFeature(java.lang.String,boolean)" class="org.xml.sax.helpers.ParserAdapter" />
	<method signature="void setDTDHandler(org.xml.sax.DTDHandler)" class="org.xml.sax.helpers.ParserAdapter" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="org.xml.sax.helpers.ParserAdapter" />
	<method signature="void processingInstruction(java.lang.String,java.lang.String)" class="org.xml.sax.helpers.ParserAdapter" />
	<method signature="void setDocumentLocator(org.xml.sax.Locator)" class="org.xml.sax.helpers.ParserAdapter" />
	<method signature="void characters(char[],int,int)" class="org.xml.sax.helpers.ParserAdapter" />
	<method signature="void setContentHandler(org.xml.sax.ContentHandler)" class="org.xml.sax.helpers.ParserAdapter" />
	<method signature="org.xml.sax.ContentHandler getContentHandler()" class="org.xml.sax.helpers.ParserAdapter" />
	<method signature="void ignorableWhitespace(char[],int,int)" class="org.xml.sax.helpers.ParserAdapter" />
	<method signature="void setEntityResolver(org.xml.sax.EntityResolver)" class="org.xml.sax.helpers.ParserAdapter" />
	<method signature="void parse(java.lang.String)" class="org.xml.sax.helpers.ParserAdapter" />
	<method signature="java.lang.Object getProperty(java.lang.String)" class="org.xml.sax.helpers.ParserAdapter" />
	<method signature="void setErrorHandler(org.xml.sax.ErrorHandler)" class="org.xml.sax.helpers.ParserAdapter" />
	<class name="org.jfree.chart.servlet.ChartDeleter" />
	<method signature="boolean isChartAvailable(java.lang.String)" class="org.jfree.chart.servlet.ChartDeleter" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.servlet.ChartDeleter" />
	<method signature="void valueBound(javax.servlet.http.HttpSessionBindingEvent)" class="org.jfree.chart.servlet.ChartDeleter" />
	<method signature="void addChart(java.lang.String)" class="org.jfree.chart.servlet.ChartDeleter" />
	<method signature="void valueUnbound(javax.servlet.http.HttpSessionBindingEvent)" class="org.jfree.chart.servlet.ChartDeleter" />
	<class name="org.jfree.chart.encoders.SunPNGEncoderAdapter" />
	<method signature="boolean isEncodingAlpha()" class="org.jfree.chart.encoders.SunPNGEncoderAdapter" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.encoders.SunPNGEncoderAdapter" />
	<method signature="float getQuality()" class="org.jfree.chart.encoders.SunPNGEncoderAdapter" />
	<method signature="void setEncodingAlpha(boolean)" class="org.jfree.chart.encoders.SunPNGEncoderAdapter" />
	<method signature="byte[] encode(java.awt.image.BufferedImage)" class="org.jfree.chart.encoders.SunPNGEncoderAdapter" />
	<method signature="void setQuality(float)" class="org.jfree.chart.encoders.SunPNGEncoderAdapter" />
	<method signature="void encode(java.awt.image.BufferedImage,java.io.OutputStream)" class="org.jfree.chart.encoders.SunPNGEncoderAdapter" />
	<class name="org.jfree.base.modules.Module" />
	<method signature="void initialize(org.jfree.base.modules.SubSystem)" class="org.jfree.base.modules.Module" />
	<method signature="void configure(org.jfree.base.modules.SubSystem)" class="org.jfree.base.modules.Module" />
	<method signature="java.lang.String getName()" class="org.jfree.base.modules.Module" />
	<method signature="java.lang.String getSubSystem()" class="org.jfree.base.modules.Module" />
	<method signature="org.jfree.base.modules.ModuleInfo[] getRequiredModules()" class="org.jfree.base.modules.Module" />
	<method signature="java.lang.String getProducer()" class="org.jfree.base.modules.Module" />
	<method signature="org.jfree.base.modules.ModuleInfo[] getOptionalModules()" class="org.jfree.base.modules.Module" />
	<method signature="java.lang.String getDescription()" class="org.jfree.base.modules.Module" />
	<class name="org.jfree.chart.block.BlockBorder" />
	<method signature="void &lt;init&gt;(org.jfree.ui.RectangleInsets,java.awt.Paint)" class="org.jfree.chart.block.BlockBorder" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.block.BlockBorder" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.block.BlockBorder" />
	<method signature="void &lt;init&gt;(double,double,double,double)" class="org.jfree.chart.block.BlockBorder" />
	<method signature="java.awt.Paint getPaint()" class="org.jfree.chart.block.BlockBorder" />
	<method signature="void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" class="org.jfree.chart.block.BlockBorder" />
	<method signature="void &lt;init&gt;(double,double,double,double,java.awt.Paint)" class="org.jfree.chart.block.BlockBorder" />
	<method signature="org.jfree.ui.RectangleInsets getInsets()" class="org.jfree.chart.block.BlockBorder" />
	<method signature="void &lt;init&gt;(java.awt.Paint)" class="org.jfree.chart.block.BlockBorder" />
	<class name="org.apache.xerces.dom.RangeImpl" />
	<method signature="org.w3c.dom.DocumentFragment cloneContents()" class="org.apache.xerces.dom.RangeImpl" />
	<method signature="void collapse(boolean)" class="org.apache.xerces.dom.RangeImpl" />
	<method signature="void setEndBefore(org.w3c.dom.Node)" class="org.apache.xerces.dom.RangeImpl" />
	<method signature="org.w3c.dom.Node getEndContainer()" class="org.apache.xerces.dom.RangeImpl" />
	<method signature="void deleteContents()" class="org.apache.xerces.dom.RangeImpl" />
	<method signature="void surroundContents(org.w3c.dom.Node)" class="org.apache.xerces.dom.RangeImpl" />
	<method signature="org.w3c.dom.ranges.Range cloneRange()" class="org.apache.xerces.dom.RangeImpl" />
	<method signature="int getEndOffset()" class="org.apache.xerces.dom.RangeImpl" />
	<method signature="int getStartOffset()" class="org.apache.xerces.dom.RangeImpl" />
	<method signature="void insertedNodeFromDOM(org.w3c.dom.Node)" class="org.apache.xerces.dom.RangeImpl" />
	<method signature="org.w3c.dom.Node getCommonAncestorContainer()" class="org.apache.xerces.dom.RangeImpl" />
	<method signature="void selectNodeContents(org.w3c.dom.Node)" class="org.apache.xerces.dom.RangeImpl" />
	<method signature="void setStartBefore(org.w3c.dom.Node)" class="org.apache.xerces.dom.RangeImpl" />
	<method signature="short compareBoundaryPoints(short,org.w3c.dom.ranges.Range)" class="org.apache.xerces.dom.RangeImpl" />
	<method signature="void detach()" class="org.apache.xerces.dom.RangeImpl" />
	<method signature="void setStartAfter(org.w3c.dom.Node)" class="org.apache.xerces.dom.RangeImpl" />
	<method signature="void setEndAfter(org.w3c.dom.Node)" class="org.apache.xerces.dom.RangeImpl" />
	<method signature="void setEnd(org.w3c.dom.Node,int)" class="org.apache.xerces.dom.RangeImpl" />
	<method signature="boolean getCollapsed()" class="org.apache.xerces.dom.RangeImpl" />
	<method signature="org.w3c.dom.DocumentFragment extractContents()" class="org.apache.xerces.dom.RangeImpl" />
	<method signature="void insertNode(org.w3c.dom.Node)" class="org.apache.xerces.dom.RangeImpl" />
	<method signature="void setStart(org.w3c.dom.Node,int)" class="org.apache.xerces.dom.RangeImpl" />
	<method signature="org.w3c.dom.Node getStartContainer()" class="org.apache.xerces.dom.RangeImpl" />
	<method signature="void selectNode(org.w3c.dom.Node)" class="org.apache.xerces.dom.RangeImpl" />
	<method signature="java.lang.String toString()" class="org.apache.xerces.dom.RangeImpl" />
	<method signature="void &lt;init&gt;(org.apache.xerces.dom.DocumentImpl)" class="org.apache.xerces.dom.RangeImpl" />
	<class name="org.apache.wml.WMLOneventElement" />
	<method signature="java.lang.String getType()" class="org.apache.wml.WMLOneventElement" />
	<method signature="void setType(java.lang.String)" class="org.apache.wml.WMLOneventElement" />
	<class name="org.w3c.dom.events.Event" />
	<method signature="void stopPropagation()" class="org.w3c.dom.events.Event" />
	<method signature="void initEvent(java.lang.String,boolean,boolean)" class="org.w3c.dom.events.Event" />
	<method signature="void preventDefault()" class="org.w3c.dom.events.Event" />
	<method signature="org.w3c.dom.events.EventTarget getTarget()" class="org.w3c.dom.events.Event" />
	<method signature="java.lang.String getType()" class="org.w3c.dom.events.Event" />
	<method signature="boolean getBubbles()" class="org.w3c.dom.events.Event" />
	<method signature="long getTimeStamp()" class="org.w3c.dom.events.Event" />
	<method signature="org.w3c.dom.events.EventTarget getCurrentTarget()" class="org.w3c.dom.events.Event" />
	<method signature="short getEventPhase()" class="org.w3c.dom.events.Event" />
	<method signature="boolean getCancelable()" class="org.w3c.dom.events.Event" />
	<class name="org.jfree.chart.annotations.CategoryTextAnnotation" />
	<method signature="double getValue()" class="org.jfree.chart.annotations.CategoryTextAnnotation" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.annotations.CategoryTextAnnotation" />
	<method signature="org.jfree.chart.axis.CategoryAnchor getCategoryAnchor()" class="org.jfree.chart.annotations.CategoryTextAnnotation" />
	<method signature="int hashCode()" class="org.jfree.chart.annotations.CategoryTextAnnotation" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.annotations.CategoryTextAnnotation" />
	<method signature="java.lang.Comparable getCategory()" class="org.jfree.chart.annotations.CategoryTextAnnotation" />
	<method signature="void draw(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis)" class="org.jfree.chart.annotations.CategoryTextAnnotation" />
	<method signature="void setValue(double)" class="org.jfree.chart.annotations.CategoryTextAnnotation" />
	<method signature="void setCategory(java.lang.Comparable)" class="org.jfree.chart.annotations.CategoryTextAnnotation" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Comparable,double)" class="org.jfree.chart.annotations.CategoryTextAnnotation" />
	<method signature="void setCategoryAnchor(org.jfree.chart.axis.CategoryAnchor)" class="org.jfree.chart.annotations.CategoryTextAnnotation" />
	<class name="org.jfree.chart.axis.CompassFormat" />
	<method signature="java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.FieldPosition)" class="org.jfree.chart.axis.CompassFormat" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.axis.CompassFormat" />
	<method signature="java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.FieldPosition)" class="org.jfree.chart.axis.CompassFormat" />
	<method signature="java.lang.String getDirectionCode(double)" class="org.jfree.chart.axis.CompassFormat" />
	<method signature="java.lang.Number parse(java.lang.String,java.text.ParsePosition)" class="org.jfree.chart.axis.CompassFormat" />
	<class name="org.jfree.ui.about.resources.AboutResources_pl" />
	<method signature="void &lt;init&gt;()" class="org.jfree.ui.about.resources.AboutResources_pl" />
	<method signature="java.lang.Object[][] getContents()" class="org.jfree.ui.about.resources.AboutResources_pl" />
	<class name="com.google.zxing.pdf417.decoder.ec.ModulusGF" />
	<method signature="void &lt;init&gt;(int,int)" class="com.google.zxing.pdf417.decoder.ec.ModulusGF" />
	<class name="org.apache.xerces.impl.xs.XSGrammarBucket" />
	<method signature="org.apache.xerces.impl.xs.SchemaGrammar[] getGrammars()" class="org.apache.xerces.impl.xs.XSGrammarBucket" />
	<method signature="org.apache.xerces.impl.xs.SchemaGrammar getGrammar(java.lang.String)" class="org.apache.xerces.impl.xs.XSGrammarBucket" />
	<method signature="boolean putGrammar(org.apache.xerces.impl.xs.SchemaGrammar,boolean)" class="org.apache.xerces.impl.xs.XSGrammarBucket" />
	<method signature="void reset()" class="org.apache.xerces.impl.xs.XSGrammarBucket" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xs.XSGrammarBucket" />
	<method signature="void putGrammar(org.apache.xerces.impl.xs.SchemaGrammar)" class="org.apache.xerces.impl.xs.XSGrammarBucket" />
	<method signature="boolean putGrammar(org.apache.xerces.impl.xs.SchemaGrammar,boolean,boolean)" class="org.apache.xerces.impl.xs.XSGrammarBucket" />
	<class name="tourma.tableModel.MjtRankingManual" />
	<method signature="void &lt;init&gt;(int,int,int,int,int,int,java.util.ArrayList,boolean)" class="tourma.tableModel.MjtRankingManual" />
	<method signature="java.awt.Component getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)" class="tourma.tableModel.MjtRankingManual" />
	<method signature="java.lang.String getColumnName(int)" class="tourma.tableModel.MjtRankingManual" />
	<method signature="java.lang.Object getValueAt(int,int)" class="tourma.tableModel.MjtRankingManual" />
	<method signature="int getColumnCount()" class="tourma.tableModel.MjtRankingManual" />
	<class name="javax.annotation.MatchesPattern$Checker" />
	<method signature="void &lt;init&gt;()" class="javax.annotation.MatchesPattern$Checker" />
	<method signature="javax.annotation.meta.When forConstantValue(java.lang.annotation.Annotation,java.lang.Object)" class="javax.annotation.MatchesPattern$Checker" />
	<method signature="javax.annotation.meta.When forConstantValue(javax.annotation.MatchesPattern,java.lang.Object)" class="javax.annotation.MatchesPattern$Checker" />
	<class name="freemarker.core.ReturnInstruction" />
	<method signature="java.lang.String getCanonicalForm()" class="freemarker.core.ReturnInstruction" />
	<method signature="java.lang.String getDescription()" class="freemarker.core.ReturnInstruction" />
	<class name="org.xml.sax.ext.DeclHandler" />
	<method signature="void internalEntityDecl(java.lang.String,java.lang.String)" class="org.xml.sax.ext.DeclHandler" />
	<method signature="void elementDecl(java.lang.String,java.lang.String)" class="org.xml.sax.ext.DeclHandler" />
	<method signature="void attributeDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.xml.sax.ext.DeclHandler" />
	<method signature="void externalEntityDecl(java.lang.String,java.lang.String,java.lang.String)" class="org.xml.sax.ext.DeclHandler" />
	<class name="javax.xml.bind.UnmarshalException" />
	<method signature="void &lt;init&gt;(java.lang.Throwable)" class="javax.xml.bind.UnmarshalException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Throwable)" class="javax.xml.bind.UnmarshalException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.Throwable)" class="javax.xml.bind.UnmarshalException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="javax.xml.bind.UnmarshalException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="javax.xml.bind.UnmarshalException" />
	<class name="freemarker.template.utility.OptimizerUtil" />
	<method signature="java.util.List optimizeListStorage(java.util.List)" class="freemarker.template.utility.OptimizerUtil" />
	<method signature="java.lang.Number optimizeNumberRepresentation(java.lang.Number)" class="freemarker.template.utility.OptimizerUtil" />
	<class name="org.jdom2.output.support.StAXEventProcessor" />
	<method signature="void process(javax.xml.stream.util.XMLEventConsumer,org.jdom2.output.Format,javax.xml.stream.XMLEventFactory,org.jdom2.CDATA)" class="org.jdom2.output.support.StAXEventProcessor" />
	<method signature="void process(javax.xml.stream.util.XMLEventConsumer,org.jdom2.output.Format,javax.xml.stream.XMLEventFactory,org.jdom2.Document)" class="org.jdom2.output.support.StAXEventProcessor" />
	<method signature="void process(javax.xml.stream.util.XMLEventConsumer,org.jdom2.output.Format,javax.xml.stream.XMLEventFactory,org.jdom2.DocType)" class="org.jdom2.output.support.StAXEventProcessor" />
	<method signature="void process(javax.xml.stream.util.XMLEventConsumer,org.jdom2.output.Format,javax.xml.stream.XMLEventFactory,org.jdom2.ProcessingInstruction)" class="org.jdom2.output.support.StAXEventProcessor" />
	<method signature="void process(javax.xml.stream.util.XMLEventConsumer,org.jdom2.output.Format,javax.xml.stream.XMLEventFactory,org.jdom2.Comment)" class="org.jdom2.output.support.StAXEventProcessor" />
	<method signature="void process(javax.xml.stream.util.XMLEventConsumer,org.jdom2.output.Format,javax.xml.stream.XMLEventFactory,org.jdom2.Text)" class="org.jdom2.output.support.StAXEventProcessor" />
	<method signature="void process(javax.xml.stream.util.XMLEventConsumer,org.jdom2.output.Format,javax.xml.stream.XMLEventFactory,java.util.List)" class="org.jdom2.output.support.StAXEventProcessor" />
	<method signature="void process(javax.xml.stream.util.XMLEventConsumer,org.jdom2.output.Format,javax.xml.stream.XMLEventFactory,org.jdom2.EntityRef)" class="org.jdom2.output.support.StAXEventProcessor" />
	<method signature="void process(javax.xml.stream.util.XMLEventConsumer,org.jdom2.output.Format,javax.xml.stream.XMLEventFactory,org.jdom2.Element)" class="org.jdom2.output.support.StAXEventProcessor" />
	<class name="javax.annotation.WillNotClose" />
	<class name="com.toedter.components.JLocaleChooser" />
	<method signature="java.lang.String getName()" class="com.toedter.components.JLocaleChooser" />
	<method signature="void setLocale(java.util.Locale)" class="com.toedter.components.JLocaleChooser" />
	<method signature="void &lt;init&gt;(javax.swing.JComponent)" class="com.toedter.components.JLocaleChooser" />
	<method signature="void &lt;init&gt;()" class="com.toedter.components.JLocaleChooser" />
	<method signature="void itemStateChanged(java.awt.event.ItemEvent)" class="com.toedter.components.JLocaleChooser" />
	<method signature="java.util.Locale getLocale()" class="com.toedter.components.JLocaleChooser" />
	<method signature="void main(java.lang.String[])" class="com.toedter.components.JLocaleChooser" />
	<class name="freemarker.template.utility.JythonRuntime" />
	<method signature="void &lt;init&gt;()" class="freemarker.template.utility.JythonRuntime" />
	<method signature="java.io.Writer getWriter(java.io.Writer,java.util.Map)" class="freemarker.template.utility.JythonRuntime" />
	<class name="org.jfree.data.xy.XYIntervalSeries" />
	<method signature="double getXLowValue(int)" class="org.jfree.data.xy.XYIntervalSeries" />
	<method signature="java.lang.Number getX(int)" class="org.jfree.data.xy.XYIntervalSeries" />
	<method signature="double getXHighValue(int)" class="org.jfree.data.xy.XYIntervalSeries" />
	<method signature="void add(double,double,double,double,double,double)" class="org.jfree.data.xy.XYIntervalSeries" />
	<method signature="double getYValue(int)" class="org.jfree.data.xy.XYIntervalSeries" />
	<method signature="void &lt;init&gt;(java.lang.Comparable)" class="org.jfree.data.xy.XYIntervalSeries" />
	<method signature="void &lt;init&gt;(java.lang.Comparable,boolean,boolean)" class="org.jfree.data.xy.XYIntervalSeries" />
	<method signature="double getYLowValue(int)" class="org.jfree.data.xy.XYIntervalSeries" />
	<method signature="org.jfree.data.ComparableObjectItem getDataItem(int)" class="org.jfree.data.xy.XYIntervalSeries" />
	<method signature="double getYHighValue(int)" class="org.jfree.data.xy.XYIntervalSeries" />
	<class name="freemarker.template.TransformControl" />
	<method signature="int afterBody()" class="freemarker.template.TransformControl" />
	<method signature="int onStart()" class="freemarker.template.TransformControl" />
	<method signature="void onError(java.lang.Throwable)" class="freemarker.template.TransformControl" />
	<class name="freemarker.core.Comment" />
	<method signature="java.lang.String getText()" class="freemarker.core.Comment" />
	<method signature="java.lang.String getCanonicalForm()" class="freemarker.core.Comment" />
	<method signature="java.lang.String getDescription()" class="freemarker.core.Comment" />
	<class name="org.apache.xerces.impl.dv.xs.TimeDV" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.xs.TimeDV" />
	<method signature="java.lang.Object getActualValue(java.lang.String,org.apache.xerces.impl.dv.ValidationContext)" class="org.apache.xerces.impl.dv.xs.TimeDV" />
	<class name="com.google.zxing.oned.ITFReader" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.oned.ITFReader" />
	<method signature="com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map)" class="com.google.zxing.oned.ITFReader" />
	<class name="org.apache.wml.WMLPrevElement" />
	<class name="org.jfree.util.ArrayUtilities" />
	<method signature="boolean hasDuplicateItems(java.lang.Object[])" class="org.jfree.util.ArrayUtilities" />
	<method signature="boolean equalReferencesInArrays(java.lang.Object[],java.lang.Object[])" class="org.jfree.util.ArrayUtilities" />
	<method signature="int compareVersionArrays(java.lang.Comparable[],java.lang.Comparable[])" class="org.jfree.util.ArrayUtilities" />
	<method signature="boolean equal(float[][],float[][])" class="org.jfree.util.ArrayUtilities" />
	<method signature="float[][] clone(float[][])" class="org.jfree.util.ArrayUtilities" />
	<class name="org.jfree.data.general.DatasetUtilities" />
	<method signature="org.jfree.data.Range iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset,boolean)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="org.jfree.data.general.PieDataset createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset,boolean)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="org.jfree.data.Range findStackedRangeBounds(org.jfree.data.category.CategoryDataset)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="org.jfree.data.general.PieDataset createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,java.lang.Comparable)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="org.jfree.data.Range findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="java.lang.Number findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="java.lang.Number findMinimumDomainValue(org.jfree.data.xy.XYDataset)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="boolean isEmptyOrNull(org.jfree.data.xy.XYDataset)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="org.jfree.data.xy.XYDataset sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="org.jfree.data.Range iterateToFindZBounds(org.jfree.data.xy.XYZDataset,java.util.List,org.jfree.data.Range,boolean)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="boolean isEmptyOrNull(org.jfree.data.general.PieDataset)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="org.jfree.data.Range iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset,boolean)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="org.jfree.data.category.CategoryDataset createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="org.jfree.data.general.PieDataset createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="org.jfree.data.Range iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="org.jfree.data.Range iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="org.jfree.data.Range iterateXYRangeBounds(org.jfree.data.xy.XYDataset)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="org.jfree.data.general.PieDataset createPieDatasetForRow(org.jfree.data.category.CategoryDataset,java.lang.Comparable)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset,boolean)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="org.jfree.data.Range iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="org.jfree.data.Range findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="org.jfree.data.category.CategoryDataset createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double[][])" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="java.lang.Number findMinimumRangeValue(org.jfree.data.xy.XYDataset)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="double calculatePieDatasetTotal(org.jfree.data.general.PieDataset)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="org.jfree.data.general.PieDataset createPieDatasetForRow(org.jfree.data.category.CategoryDataset,int)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="org.jfree.data.Range findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="java.lang.Number findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="java.lang.Number findMaximumRangeValue(org.jfree.data.xy.XYDataset)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="org.jfree.data.Range findStackedRangeBounds(org.jfree.data.xy.TableXYDataset)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="org.jfree.data.Range iterateRangeBounds(org.jfree.data.xy.XYDataset)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="org.jfree.data.Range findZBounds(org.jfree.data.xy.XYZDataset,java.util.List,org.jfree.data.Range,boolean)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="org.jfree.data.Range iterateZBounds(org.jfree.data.xy.XYZDataset)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="org.jfree.data.Range iterateToFindRangeBounds(org.jfree.data.xy.XYDataset,java.util.List,org.jfree.data.Range,boolean)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="org.jfree.data.Range iterateZBounds(org.jfree.data.xy.XYZDataset,boolean)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="org.jfree.data.xy.XYSeries sampleFunction2DToSeries(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="java.lang.Number findMaximumDomainValue(org.jfree.data.xy.XYDataset)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="double calculateStackTotal(org.jfree.data.xy.TableXYDataset,int)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="org.jfree.data.category.CategoryDataset createCategoryDataset(java.lang.String,java.lang.String,double[][])" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="org.jfree.data.Range findZBounds(org.jfree.data.xy.XYZDataset)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="org.jfree.data.Range findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="org.jfree.data.Range findZBounds(org.jfree.data.xy.XYZDataset,boolean)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="org.jfree.data.Range iterateDomainBounds(org.jfree.data.xy.XYDataset)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="org.jfree.data.Range iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="boolean isEmptyOrNull(org.jfree.data.category.CategoryDataset)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="java.lang.Number findMaximumRangeValue(org.jfree.data.category.CategoryDataset)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="org.jfree.data.Range iterateRangeBounds(org.jfree.data.category.CategoryDataset)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="java.lang.Number findMinimumRangeValue(org.jfree.data.category.CategoryDataset)" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="org.jfree.data.category.CategoryDataset createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][])" class="org.jfree.data.general.DatasetUtilities" />
	<method signature="org.jfree.data.general.PieDataset createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,int)" class="org.jfree.data.general.DatasetUtilities" />
	<class name="org.apache.xerces.stax.events.ProcessingInstructionImpl" />
	<method signature="java.lang.String getTarget()" class="org.apache.xerces.stax.events.ProcessingInstructionImpl" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,javax.xml.stream.Location)" class="org.apache.xerces.stax.events.ProcessingInstructionImpl" />
	<method signature="void writeAsEncodedUnicode(java.io.Writer)" class="org.apache.xerces.stax.events.ProcessingInstructionImpl" />
	<method signature="java.lang.String getData()" class="org.apache.xerces.stax.events.ProcessingInstructionImpl" />
	<class name="javax.xml.validation.ValidatorHandler" />
	<method signature="void skippedEntity(java.lang.String)" class="javax.xml.validation.ValidatorHandler" />
	<method signature="void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" class="javax.xml.validation.ValidatorHandler" />
	<method signature="org.xml.sax.ErrorHandler getErrorHandler()" class="javax.xml.validation.ValidatorHandler" />
	<method signature="void setResourceResolver(org.w3c.dom.ls.LSResourceResolver)" class="javax.xml.validation.ValidatorHandler" />
	<method signature="void startPrefixMapping(java.lang.String,java.lang.String)" class="javax.xml.validation.ValidatorHandler" />
	<method signature="boolean getFeature(java.lang.String)" class="javax.xml.validation.ValidatorHandler" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="javax.xml.validation.ValidatorHandler" />
	<method signature="void processingInstruction(java.lang.String,java.lang.String)" class="javax.xml.validation.ValidatorHandler" />
	<method signature="void setDocumentLocator(org.xml.sax.Locator)" class="javax.xml.validation.ValidatorHandler" />
	<method signature="javax.xml.validation.TypeInfoProvider getTypeInfoProvider()" class="javax.xml.validation.ValidatorHandler" />
	<method signature="void endPrefixMapping(java.lang.String)" class="javax.xml.validation.ValidatorHandler" />
	<method signature="void characters(char[],int,int)" class="javax.xml.validation.ValidatorHandler" />
	<method signature="void endElement(java.lang.String,java.lang.String,java.lang.String)" class="javax.xml.validation.ValidatorHandler" />
	<method signature="void setContentHandler(org.xml.sax.ContentHandler)" class="javax.xml.validation.ValidatorHandler" />
	<method signature="void endDocument()" class="javax.xml.validation.ValidatorHandler" />
	<method signature="void startDocument()" class="javax.xml.validation.ValidatorHandler" />
	<method signature="org.xml.sax.ContentHandler getContentHandler()" class="javax.xml.validation.ValidatorHandler" />
	<method signature="org.w3c.dom.ls.LSResourceResolver getResourceResolver()" class="javax.xml.validation.ValidatorHandler" />
	<method signature="void ignorableWhitespace(char[],int,int)" class="javax.xml.validation.ValidatorHandler" />
	<method signature="void setFeature(java.lang.String,boolean)" class="javax.xml.validation.ValidatorHandler" />
	<method signature="void setErrorHandler(org.xml.sax.ErrorHandler)" class="javax.xml.validation.ValidatorHandler" />
	<method signature="java.lang.Object getProperty(java.lang.String)" class="javax.xml.validation.ValidatorHandler" />
	<class name="com.google.zxing.ChecksumException" />
	<method signature="com.google.zxing.ChecksumException getChecksumInstance()" class="com.google.zxing.ChecksumException" />
	<class name="org.jfree.chart.renderer.xy.XYSplineRenderer" />
	<method signature="void &lt;init&gt;(int)" class="org.jfree.chart.renderer.xy.XYSplineRenderer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.xy.XYSplineRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.xy.XYSplineRenderer" />
	<method signature="void setPrecision(int)" class="org.jfree.chart.renderer.xy.XYSplineRenderer" />
	<method signature="int getPrecision()" class="org.jfree.chart.renderer.xy.XYSplineRenderer" />
	<method signature="org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.renderer.xy.XYSplineRenderer" />
	<class name="org.w3c.dom.events.MouseEvent" />
	<method signature="boolean getCtrlKey()" class="org.w3c.dom.events.MouseEvent" />
	<method signature="int getClientY()" class="org.w3c.dom.events.MouseEvent" />
	<method signature="boolean getAltKey()" class="org.w3c.dom.events.MouseEvent" />
	<method signature="boolean getMetaKey()" class="org.w3c.dom.events.MouseEvent" />
	<method signature="boolean getShiftKey()" class="org.w3c.dom.events.MouseEvent" />
	<method signature="short getButton()" class="org.w3c.dom.events.MouseEvent" />
	<method signature="org.w3c.dom.events.EventTarget getRelatedTarget()" class="org.w3c.dom.events.MouseEvent" />
	<method signature="int getClientX()" class="org.w3c.dom.events.MouseEvent" />
	<method signature="int getScreenY()" class="org.w3c.dom.events.MouseEvent" />
	<method signature="int getScreenX()" class="org.w3c.dom.events.MouseEvent" />
	<method signature="void initMouseEvent(java.lang.String,boolean,boolean,org.w3c.dom.views.AbstractView,int,int,int,int,int,boolean,boolean,boolean,boolean,short,org.w3c.dom.events.EventTarget)" class="org.w3c.dom.events.MouseEvent" />
	<class name="tourma.views.round.JPNAnnexRanking" />
	<method signature="void &lt;init&gt;(java.lang.String,tourma.data.Criteria,tourma.data.Tournament,tourma.data.Round,boolean,boolean,java.util.ArrayList,java.util.ArrayList)" class="tourma.views.round.JPNAnnexRanking" />
	<method signature="void update()" class="tourma.views.round.JPNAnnexRanking" />
	<method signature="void &lt;init&gt;(java.lang.String,tourma.data.Criteria,tourma.data.Tournament,java.util.ArrayList,java.util.ArrayList,tourma.data.Round,boolean,boolean)" class="tourma.views.round.JPNAnnexRanking" />
	<method signature="void setRoundOnly(boolean)" class="tourma.views.round.JPNAnnexRanking" />
	<class name="org.apache.commons.lang3.ObjectUtils$Null" />
	<class name="com.swabunga.spell.engine.Word" />
	<method signature="java.lang.String getWord()" class="com.swabunga.spell.engine.Word" />
	<method signature="void &lt;init&gt;()" class="com.swabunga.spell.engine.Word" />
	<method signature="int getScore()" class="com.swabunga.spell.engine.Word" />
	<method signature="java.lang.String toString()" class="com.swabunga.spell.engine.Word" />
	<method signature="int compare(java.lang.Object,java.lang.Object)" class="com.swabunga.spell.engine.Word" />
	<method signature="void &lt;init&gt;(java.lang.String,int)" class="com.swabunga.spell.engine.Word" />
	<class name="org.jdom2.output.Format$TextMode" />
	<method signature="org.jdom2.output.Format$TextMode[] values()" class="org.jdom2.output.Format$TextMode" />
	<method signature="org.jdom2.output.Format$TextMode valueOf(java.lang.String)" class="org.jdom2.output.Format$TextMode" />
	<class name="org.jfree.util.StackableException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Exception)" class="org.jfree.util.StackableException" />
	<method signature="void &lt;init&gt;()" class="org.jfree.util.StackableException" />
	<method signature="java.lang.Exception getParent()" class="org.jfree.util.StackableException" />
	<method signature="void printStackTrace(java.io.PrintWriter)" class="org.jfree.util.StackableException" />
	<method signature="void printStackTrace(java.io.PrintStream)" class="org.jfree.util.StackableException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.util.StackableException" />
	<method signature="void printStackTrace()" class="org.jfree.util.StackableException" />
	<class name="org.jfree.base.Library" />
	<method signature="java.lang.String getName()" class="org.jfree.base.Library" />
	<method signature="java.lang.String getVersion()" class="org.jfree.base.Library" />
	<method signature="int hashCode()" class="org.jfree.base.Library" />
	<method signature="java.lang.String getInfo()" class="org.jfree.base.Library" />
	<method signature="java.lang.String getLicenceName()" class="org.jfree.base.Library" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.base.Library" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.jfree.base.Library" />
	<class name="org.apache.xerces.impl.xs.XSAttributeUseImpl" />
	<method signature="java.lang.String getName()" class="org.apache.xerces.impl.xs.XSAttributeUseImpl" />
	<method signature="boolean getRequired()" class="org.apache.xerces.impl.xs.XSAttributeUseImpl" />
	<method signature="void reset()" class="org.apache.xerces.impl.xs.XSAttributeUseImpl" />
	<method signature="org.apache.xerces.xs.ShortList getItemValueTypes()" class="org.apache.xerces.impl.xs.XSAttributeUseImpl" />
	<method signature="short getConstraintType()" class="org.apache.xerces.impl.xs.XSAttributeUseImpl" />
	<method signature="org.apache.xerces.xs.XSObjectList getAnnotations()" class="org.apache.xerces.impl.xs.XSAttributeUseImpl" />
	<method signature="short getType()" class="org.apache.xerces.impl.xs.XSAttributeUseImpl" />
	<method signature="org.apache.xerces.xs.XSNamespaceItem getNamespaceItem()" class="org.apache.xerces.impl.xs.XSAttributeUseImpl" />
	<method signature="org.apache.xerces.xs.XSValue getValueConstraintValue()" class="org.apache.xerces.impl.xs.XSAttributeUseImpl" />
	<method signature="java.lang.String getConstraintValue()" class="org.apache.xerces.impl.xs.XSAttributeUseImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xs.XSAttributeUseImpl" />
	<method signature="java.lang.String getNamespace()" class="org.apache.xerces.impl.xs.XSAttributeUseImpl" />
	<method signature="org.apache.xerces.xs.XSAttributeDeclaration getAttrDeclaration()" class="org.apache.xerces.impl.xs.XSAttributeUseImpl" />
	<method signature="java.lang.Object getActualVC()" class="org.apache.xerces.impl.xs.XSAttributeUseImpl" />
	<method signature="short getActualVCType()" class="org.apache.xerces.impl.xs.XSAttributeUseImpl" />
	<class name="org.w3c.dom.xpath.XPathExpression" />
	<method signature="java.lang.Object evaluate(org.w3c.dom.Node,short,java.lang.Object)" class="org.w3c.dom.xpath.XPathExpression" />
	<class name="org.apache.xerces.impl.dv.xs.ListDV" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.xs.ListDV" />
	<method signature="java.lang.Object getActualValue(java.lang.String,org.apache.xerces.impl.dv.ValidationContext)" class="org.apache.xerces.impl.dv.xs.ListDV" />
	<method signature="int getDataLength(java.lang.Object)" class="org.apache.xerces.impl.dv.xs.ListDV" />
	<method signature="short getAllowedFacets()" class="org.apache.xerces.impl.dv.xs.ListDV" />
	<class name="javax.xml.transform.OutputKeys" />
	<class name="org.jfree.util.ResourceBundleWrapper" />
	<method signature="java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader)" class="org.jfree.util.ResourceBundleWrapper" />
	<method signature="java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)" class="org.jfree.util.ResourceBundleWrapper" />
	<method signature="void removeCodeBase(java.net.URL,java.net.URLClassLoader)" class="org.jfree.util.ResourceBundleWrapper" />
	<method signature="java.util.ResourceBundle getBundle(java.lang.String)" class="org.jfree.util.ResourceBundleWrapper" />
	<class name="org.jfree.chart.ChartFrame" />
	<method signature="void &lt;init&gt;(java.lang.String,org.jfree.chart.JFreeChart)" class="org.jfree.chart.ChartFrame" />
	<method signature="void &lt;init&gt;(java.lang.String,org.jfree.chart.JFreeChart,boolean)" class="org.jfree.chart.ChartFrame" />
	<method signature="org.jfree.chart.ChartPanel getChartPanel()" class="org.jfree.chart.ChartFrame" />
	<class name="org.jfree.data.general.CombinationDataset" />
	<method signature="int[] getMap()" class="org.jfree.data.general.CombinationDataset" />
	<method signature="org.jfree.data.general.SeriesDataset getParent()" class="org.jfree.data.general.CombinationDataset" />
	<class name="org.jfree.resources.JCommonResources" />
	<method signature="void &lt;init&gt;()" class="org.jfree.resources.JCommonResources" />
	<method signature="java.lang.Object[][] getContents()" class="org.jfree.resources.JCommonResources" />
	<class name="org.jfree.chart.urls.StandardXYZURLGenerator" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.urls.StandardXYZURLGenerator" />
	<method signature="java.lang.String generateURL(org.jfree.data.xy.XYZDataset,int,int)" class="org.jfree.chart.urls.StandardXYZURLGenerator" />
	<class name="org.apache.html.dom.HTMLImageElementImpl" />
	<method signature="java.lang.String getName()" class="org.apache.html.dom.HTMLImageElementImpl" />
	<method signature="java.lang.String getBorder()" class="org.apache.html.dom.HTMLImageElementImpl" />
	<method signature="java.lang.String getUseMap()" class="org.apache.html.dom.HTMLImageElementImpl" />
	<method signature="java.lang.String getWidth()" class="org.apache.html.dom.HTMLImageElementImpl" />
	<method signature="java.lang.String getLongDesc()" class="org.apache.html.dom.HTMLImageElementImpl" />
	<method signature="java.lang.String getHspace()" class="org.apache.html.dom.HTMLImageElementImpl" />
	<method signature="void setIsMap(boolean)" class="org.apache.html.dom.HTMLImageElementImpl" />
	<method signature="void setLowSrc(java.lang.String)" class="org.apache.html.dom.HTMLImageElementImpl" />
	<method signature="java.lang.String getHeight()" class="org.apache.html.dom.HTMLImageElementImpl" />
	<method signature="java.lang.String getLowSrc()" class="org.apache.html.dom.HTMLImageElementImpl" />
	<method signature="void setName(java.lang.String)" class="org.apache.html.dom.HTMLImageElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLImageElementImpl" />
	<method signature="void setLongDesc(java.lang.String)" class="org.apache.html.dom.HTMLImageElementImpl" />
	<method signature="void setAlign(java.lang.String)" class="org.apache.html.dom.HTMLImageElementImpl" />
	<method signature="void setBorder(java.lang.String)" class="org.apache.html.dom.HTMLImageElementImpl" />
	<method signature="java.lang.String getSrc()" class="org.apache.html.dom.HTMLImageElementImpl" />
	<method signature="java.lang.String getAlign()" class="org.apache.html.dom.HTMLImageElementImpl" />
	<method signature="void setAlt(java.lang.String)" class="org.apache.html.dom.HTMLImageElementImpl" />
	<method signature="void setVspace(java.lang.String)" class="org.apache.html.dom.HTMLImageElementImpl" />
	<method signature="void setSrc(java.lang.String)" class="org.apache.html.dom.HTMLImageElementImpl" />
	<method signature="void setUseMap(java.lang.String)" class="org.apache.html.dom.HTMLImageElementImpl" />
	<method signature="java.lang.String getAlt()" class="org.apache.html.dom.HTMLImageElementImpl" />
	<method signature="boolean getIsMap()" class="org.apache.html.dom.HTMLImageElementImpl" />
	<method signature="void setHeight(java.lang.String)" class="org.apache.html.dom.HTMLImageElementImpl" />
	<method signature="void setHspace(java.lang.String)" class="org.apache.html.dom.HTMLImageElementImpl" />
	<method signature="void setWidth(java.lang.String)" class="org.apache.html.dom.HTMLImageElementImpl" />
	<method signature="java.lang.String getVspace()" class="org.apache.html.dom.HTMLImageElementImpl" />
	<class name="javax.xml.bind.JAXBContext" />
	<method signature="javax.xml.bind.Validator createValidator()" class="javax.xml.bind.JAXBContext" />
	<method signature="javax.xml.bind.Unmarshaller createUnmarshaller()" class="javax.xml.bind.JAXBContext" />
	<method signature="javax.xml.bind.Marshaller createMarshaller()" class="javax.xml.bind.JAXBContext" />
	<method signature="javax.xml.bind.JAXBContext newInstance(java.lang.String)" class="javax.xml.bind.JAXBContext" />
	<method signature="javax.xml.bind.JAXBContext newInstance(java.lang.String,java.lang.ClassLoader)" class="javax.xml.bind.JAXBContext" />
	<class name="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setRichness(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setStress(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setBorderBottomStyle(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getCaptionSide()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setPauseBefore(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setBorderBottomWidth(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setTop(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setFont(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setLineHeight(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setMinWidth(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getSpeakHeader()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setBorderColor(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getVoiceFamily()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getWordSpacing()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getFontStyle()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getTextIndent()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setOutlineColor(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setEmptyCells(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setQuotes(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setCursor(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getListStyle()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getBorderBottom()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getMarginTop()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setPlayDuring(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getSpeak()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setBorderRight(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setBorderLeftWidth(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setHeight(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setOutlineWidth(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setTextAlign(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setVerticalAlign(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getStress()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setSize(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getBorderLeft()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getWidth()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setBorderBottom(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setOrphans(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getBorderTopStyle()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setClear(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getTextShadow()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setLeft(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setPaddingRight(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setBackgroundRepeat(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getMarks()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setBackground(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setPageBreakAfter(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getCounterIncrement()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setZIndex(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setBorderLeftStyle(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setFontSizeAdjust(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getMarkerOffset()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setFontFamily(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setLetterSpacing(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getBorderLeftColor()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setMarginTop(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getPitch()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getRight()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getMarginLeft()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getWidows()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setBackgroundColor(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getCue()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setVolume(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setBorderStyle(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setMarginRight(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getBorder()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getBackgroundColor()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setPageBreakInside(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getBottom()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getPauseBefore()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getBorderColor()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setCounterReset(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getTextTransform()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getMaxWidth()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getBorderRightStyle()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getFontVariant()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setMarginBottom(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getTop()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getBorderRightWidth()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getCueAfter()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setVisibility(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getBorderBottomWidth()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getMaxHeight()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getPlayDuring()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setMarginLeft(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setFontWeight(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setPaddingLeft(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setPause(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getBorderRight()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getSpeakNumeral()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getLineHeight()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setSpeak(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getFont()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setFontSize(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setFontStyle(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setBorderBottomColor(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setMaxWidth(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setPageBreakBefore(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getFontSize()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getRichness()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getBorderWidth()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setListStyle(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setBorderWidth(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getFontStretch()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setDirection(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getFontFamily()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getCounterReset()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setMarks(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setUnicodeBidi(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getPageBreakAfter()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getMinWidth()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getBorderBottomStyle()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setBorderTopWidth(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getOutline()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getPageBreakBefore()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getCueBefore()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setBorderRightColor(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setOutlineStyle(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getBorderTop()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setSpeakNumeral(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setBorderLeft(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getFontWeight()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getBackgroundPosition()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setWhiteSpace(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getColor()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setRight(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getSize()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getTableLayout()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setElevation(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getFontSizeAdjust()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setSpeakPunctuation(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setTextIndent(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getBackgroundImage()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getBorderLeftWidth()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getBackgroundAttachment()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setBorderTopStyle(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setWidth(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getDisplay()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getLeft()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setMargin(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getBackground()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setListStylePosition(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getMargin()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getAzimuth()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getOutlineStyle()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setClip(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setTextDecoration(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getOverflow()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getZIndex()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getVerticalAlign()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getMinHeight()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setBackgroundAttachment(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setPosition(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setFontVariant(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setBorderRightWidth(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getListStyleImage()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getCssFloat()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setBorderTopColor(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getBorderRightColor()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setTextShadow(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getMarginRight()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getOrphans()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setOverflow(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setBorderCollapse(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getBorderLeftStyle()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setMaxHeight(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getBorderBottomColor()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getListStyleType()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getHeight()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setCssFloat(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getSpeakPunctuation()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setBorderTop(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setOutline(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getOutlineWidth()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setBackgroundPosition(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getMarginBottom()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setBorderLeftColor(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setBorder(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getBorderStyle()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setBottom(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getPadding()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setColor(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getBorderSpacing()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getUnicodeBidi()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getSpeechRate()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setDisplay(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getEmptyCells()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setBorderRightStyle(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getListStylePosition()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getPaddingRight()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getPitchRange()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setCueAfter(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getPage()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setPaddingBottom(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setCaptionSide(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setMinHeight(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getPaddingBottom()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getBorderCollapse()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getElevation()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setCueBefore(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setSpeakHeader(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setVoiceFamily(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setAzimuth(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setWordSpacing(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setPitchRange(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getOutlineColor()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getTextDecoration()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getWhiteSpace()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getLetterSpacing()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getBorderTopWidth()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setListStyleType(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setMarkerOffset(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getPause()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setTableLayout(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getClip()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getPauseAfter()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setSpeechRate(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setTextTransform(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getBorderTopColor()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setWidows(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setListStyleImage(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getContent()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getDirection()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setPage(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getTextAlign()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getPageBreakInside()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getVolume()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setCounterIncrement(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setFontStretch(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setContent(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setPaddingTop(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getClear()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getPaddingLeft()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setBackgroundImage(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setBorderSpacing(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getQuotes()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getCursor()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setCue(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getPaddingTop()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setPitch(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getBackgroundRepeat()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getPosition()" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setPauseAfter(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="void setPadding(java.lang.String)" class="org.w3c.dom.css.CSS2Properties" />
	<method signature="java.lang.String getVisibility()" class="org.w3c.dom.css.CSS2Properties" />
	<class name="org.jfree.data.DomainOrder" />
	<method signature="int hashCode()" class="org.jfree.data.DomainOrder" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.DomainOrder" />
	<method signature="java.lang.String toString()" class="org.jfree.data.DomainOrder" />
	<class name="freemarker.ext.util.ModelFactory" />
	<method signature="freemarker.template.TemplateModel create(java.lang.Object,freemarker.template.ObjectWrapper)" class="freemarker.ext.util.ModelFactory" />
	<class name="org.jfree.data.category.DefaultIntervalCategoryDataset" />
	<method signature="java.lang.Number getStartValue(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.category.DefaultIntervalCategoryDataset" />
	<method signature="void setEndValue(int,java.lang.Comparable,java.lang.Number)" class="org.jfree.data.category.DefaultIntervalCategoryDataset" />
	<method signature="java.lang.Number getValue(int,int)" class="org.jfree.data.category.DefaultIntervalCategoryDataset" />
	<method signature="java.util.List getColumnKeys()" class="org.jfree.data.category.DefaultIntervalCategoryDataset" />
	<method signature="int getSeriesIndex(java.lang.Comparable)" class="org.jfree.data.category.DefaultIntervalCategoryDataset" />
	<method signature="void &lt;init&gt;(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][])" class="org.jfree.data.category.DefaultIntervalCategoryDataset" />
	<method signature="int getCategoryCount()" class="org.jfree.data.category.DefaultIntervalCategoryDataset" />
	<method signature="java.util.List getRowKeys()" class="org.jfree.data.category.DefaultIntervalCategoryDataset" />
	<method signature="int getSeriesCount()" class="org.jfree.data.category.DefaultIntervalCategoryDataset" />
	<method signature="java.util.List getCategories()" class="org.jfree.data.category.DefaultIntervalCategoryDataset" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.category.DefaultIntervalCategoryDataset" />
	<method signature="java.lang.Comparable getSeriesKey(int)" class="org.jfree.data.category.DefaultIntervalCategoryDataset" />
	<method signature="java.lang.Number getEndValue(int,int)" class="org.jfree.data.category.DefaultIntervalCategoryDataset" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.category.DefaultIntervalCategoryDataset" />
	<method signature="void setCategoryKeys(java.lang.Comparable[])" class="org.jfree.data.category.DefaultIntervalCategoryDataset" />
	<method signature="void setStartValue(int,java.lang.Comparable,java.lang.Number)" class="org.jfree.data.category.DefaultIntervalCategoryDataset" />
	<method signature="int getRowCount()" class="org.jfree.data.category.DefaultIntervalCategoryDataset" />
	<method signature="int getColumnCount()" class="org.jfree.data.category.DefaultIntervalCategoryDataset" />
	<method signature="int getCategoryIndex(java.lang.Comparable)" class="org.jfree.data.category.DefaultIntervalCategoryDataset" />
	<method signature="java.lang.Number getValue(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.category.DefaultIntervalCategoryDataset" />
	<method signature="java.lang.Number getStartValue(int,int)" class="org.jfree.data.category.DefaultIntervalCategoryDataset" />
	<method signature="void &lt;init&gt;(java.lang.Number[][],java.lang.Number[][])" class="org.jfree.data.category.DefaultIntervalCategoryDataset" />
	<method signature="java.lang.Comparable getColumnKey(int)" class="org.jfree.data.category.DefaultIntervalCategoryDataset" />
	<method signature="java.util.List getSeries()" class="org.jfree.data.category.DefaultIntervalCategoryDataset" />
	<method signature="java.lang.Number getEndValue(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.category.DefaultIntervalCategoryDataset" />
	<method signature="void &lt;init&gt;(double[][],double[][])" class="org.jfree.data.category.DefaultIntervalCategoryDataset" />
	<method signature="java.lang.Comparable getRowKey(int)" class="org.jfree.data.category.DefaultIntervalCategoryDataset" />
	<method signature="int getItemCount()" class="org.jfree.data.category.DefaultIntervalCategoryDataset" />
	<method signature="int getRowIndex(java.lang.Comparable)" class="org.jfree.data.category.DefaultIntervalCategoryDataset" />
	<method signature="void &lt;init&gt;(java.lang.String[],java.lang.Number[][],java.lang.Number[][])" class="org.jfree.data.category.DefaultIntervalCategoryDataset" />
	<method signature="void setSeriesKeys(java.lang.Comparable[])" class="org.jfree.data.category.DefaultIntervalCategoryDataset" />
	<method signature="int getColumnIndex(java.lang.Comparable)" class="org.jfree.data.category.DefaultIntervalCategoryDataset" />
	<class name="org.jfree.data.xy.VectorSeriesCollection" />
	<method signature="org.jfree.data.xy.Vector getVector(int,int)" class="org.jfree.data.xy.VectorSeriesCollection" />
	<method signature="double getXValue(int,int)" class="org.jfree.data.xy.VectorSeriesCollection" />
	<method signature="org.jfree.data.xy.VectorSeries getSeries(int)" class="org.jfree.data.xy.VectorSeriesCollection" />
	<method signature="boolean removeSeries(org.jfree.data.xy.VectorSeries)" class="org.jfree.data.xy.VectorSeriesCollection" />
	<method signature="java.lang.Number getX(int,int)" class="org.jfree.data.xy.VectorSeriesCollection" />
	<method signature="java.lang.Number getY(int,int)" class="org.jfree.data.xy.VectorSeriesCollection" />
	<method signature="double getVectorXValue(int,int)" class="org.jfree.data.xy.VectorSeriesCollection" />
	<method signature="int getSeriesCount()" class="org.jfree.data.xy.VectorSeriesCollection" />
	<method signature="void addSeries(org.jfree.data.xy.VectorSeries)" class="org.jfree.data.xy.VectorSeriesCollection" />
	<method signature="double getVectorYValue(int,int)" class="org.jfree.data.xy.VectorSeriesCollection" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.xy.VectorSeriesCollection" />
	<method signature="java.lang.Comparable getSeriesKey(int)" class="org.jfree.data.xy.VectorSeriesCollection" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.xy.VectorSeriesCollection" />
	<method signature="int indexOf(org.jfree.data.xy.VectorSeries)" class="org.jfree.data.xy.VectorSeriesCollection" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.xy.VectorSeriesCollection" />
	<method signature="int getItemCount(int)" class="org.jfree.data.xy.VectorSeriesCollection" />
	<method signature="double getYValue(int,int)" class="org.jfree.data.xy.VectorSeriesCollection" />
	<method signature="void removeAllSeries()" class="org.jfree.data.xy.VectorSeriesCollection" />
	<class name="tourma.views.system.JdgOnlineHelp" />
	<method signature="void &lt;init&gt;(java.awt.Frame,boolean)" class="tourma.views.system.JdgOnlineHelp" />
	<class name="org.jfree.chart.annotations.XYAnnotation" />
	<method signature="void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.annotations.XYAnnotation" />
	<class name="org.jfree.chart.plot.IntervalMarker" />
	<method signature="void setEndValue(double)" class="org.jfree.chart.plot.IntervalMarker" />
	<method signature="void setGradientPaintTransformer(org.jfree.ui.GradientPaintTransformer)" class="org.jfree.chart.plot.IntervalMarker" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.plot.IntervalMarker" />
	<method signature="double getStartValue()" class="org.jfree.chart.plot.IntervalMarker" />
	<method signature="double getEndValue()" class="org.jfree.chart.plot.IntervalMarker" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.plot.IntervalMarker" />
	<method signature="void setStartValue(double)" class="org.jfree.chart.plot.IntervalMarker" />
	<method signature="org.jfree.ui.GradientPaintTransformer getGradientPaintTransformer()" class="org.jfree.chart.plot.IntervalMarker" />
	<method signature="void &lt;init&gt;(double,double,java.awt.Paint)" class="org.jfree.chart.plot.IntervalMarker" />
	<method signature="void &lt;init&gt;(double,double,java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)" class="org.jfree.chart.plot.IntervalMarker" />
	<method signature="void &lt;init&gt;(double,double)" class="org.jfree.chart.plot.IntervalMarker" />
	<class name="org.jfree.data.general.DefaultValueDataset" />
	<method signature="void &lt;init&gt;(double)" class="org.jfree.data.general.DefaultValueDataset" />
	<method signature="int hashCode()" class="org.jfree.data.general.DefaultValueDataset" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.general.DefaultValueDataset" />
	<method signature="java.lang.Number getValue()" class="org.jfree.data.general.DefaultValueDataset" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.general.DefaultValueDataset" />
	<method signature="void &lt;init&gt;(java.lang.Number)" class="org.jfree.data.general.DefaultValueDataset" />
	<method signature="void setValue(java.lang.Number)" class="org.jfree.data.general.DefaultValueDataset" />
	<class name="tourma.data.Team" />
	<method signature="void setNullTeam(tourma.data.Team)" class="tourma.data.Team" />
	<method signature="java.lang.String getName()" class="tourma.data.Team" />
	<method signature="tourma.data.Team getTeam(java.lang.String)" class="tourma.data.Team" />
	<method signature="void addMatch(tourma.data.Competitor,tourma.data.Round)" class="tourma.data.Team" />
	<method signature="tourma.data.Team getNullTeam()" class="tourma.data.Team" />
	<method signature="void setXMLElement(org.jdom2.Element)" class="tourma.data.Team" />
	<method signature="int getActivePlayerNumber()" class="tourma.data.Team" />
	<method signature="java.util.ArrayList getPossibleOpponents(java.util.ArrayList,tourma.data.Round)" class="tourma.data.Team" />
	<method signature="boolean equals(java.lang.Object)" class="tourma.data.Team" />
	<method signature="boolean havePlayed(tourma.data.Competitor)" class="tourma.data.Team" />
	<method signature="void &lt;init&gt;()" class="tourma.data.Team" />
	<method signature="void removeCoach(int)" class="tourma.data.Team" />
	<method signature="void setXMLElementForDisplay(org.jdom2.Element)" class="tourma.data.Team" />
	<method signature="void clearCoachs()" class="tourma.data.Team" />
	<method signature="int compareTo(java.lang.Object)" class="tourma.data.Team" />
	<method signature="int hashCode()" class="tourma.data.Team" />
	<method signature="java.util.HashMap getTeamOppositionCount(java.util.ArrayList,tourma.data.Round)" class="tourma.data.Team" />
	<method signature="void roundCheck(tourma.data.Round)" class="tourma.data.Team" />
	<method signature="java.lang.String getDecoratedName()" class="tourma.data.Team" />
	<method signature="void addMatchRoundRobin(tourma.data.Competitor,tourma.data.Round,boolean)" class="tourma.data.Team" />
	<method signature="void addCoach(tourma.data.Coach)" class="tourma.data.Team" />
	<method signature="java.util.ArrayList getActivePlayers()" class="tourma.data.Team" />
	<method signature="void newTeamMap()" class="tourma.data.Team" />
	<method signature="org.jdom2.Element getXMLElementForDisplay()" class="tourma.data.Team" />
	<method signature="org.jdom2.Element getXMLElement()" class="tourma.data.Team" />
	<method signature="tourma.data.Coach getCoach(int)" class="tourma.data.Team" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="tourma.data.Team" />
	<method signature="boolean containsCoach(tourma.data.Coach)" class="tourma.data.Team" />
	<method signature="void putTeam(java.lang.String,tourma.data.Team)" class="tourma.data.Team" />
	<method signature="boolean canPlay(tourma.data.Team,tourma.data.Round)" class="tourma.data.Team" />
	<method signature="int getCoachsCount()" class="tourma.data.Team" />
	<class name="freemarker.core.TemplateClassResolver" />
	<method signature="java.lang.Class resolve(java.lang.String,freemarker.core.Environment,freemarker.template.Template)" class="freemarker.core.TemplateClassResolver" />
	<class name="org.unbescape.csv.CsvEscape" />
	<method signature="void unescapeCsv(char[],int,int,java.io.Writer)" class="org.unbescape.csv.CsvEscape" />
	<method signature="void escapeCsv(char[],int,int,java.io.Writer)" class="org.unbescape.csv.CsvEscape" />
	<method signature="java.lang.String unescapeCsv(java.lang.String)" class="org.unbescape.csv.CsvEscape" />
	<method signature="java.lang.String escapeCsv(java.lang.String)" class="org.unbescape.csv.CsvEscape" />
	<class name="org.apache.commons.lang3.LocaleUtils" />
	<method signature="java.util.List localeLookupList(java.util.Locale,java.util.Locale)" class="org.apache.commons.lang3.LocaleUtils" />
	<method signature="boolean isAvailableLocale(java.util.Locale)" class="org.apache.commons.lang3.LocaleUtils" />
	<method signature="java.util.Set availableLocaleSet()" class="org.apache.commons.lang3.LocaleUtils" />
	<method signature="java.util.Locale toLocale(java.lang.String)" class="org.apache.commons.lang3.LocaleUtils" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.LocaleUtils" />
	<method signature="java.util.List localeLookupList(java.util.Locale)" class="org.apache.commons.lang3.LocaleUtils" />
	<method signature="java.util.List languagesByCountry(java.lang.String)" class="org.apache.commons.lang3.LocaleUtils" />
	<method signature="java.util.List availableLocaleList()" class="org.apache.commons.lang3.LocaleUtils" />
	<method signature="java.util.List countriesByLanguage(java.lang.String)" class="org.apache.commons.lang3.LocaleUtils" />
	<class name="org.jfree.data.RangeInfo" />
	<method signature="double getRangeLowerBound(boolean)" class="org.jfree.data.RangeInfo" />
	<method signature="double getRangeUpperBound(boolean)" class="org.jfree.data.RangeInfo" />
	<method signature="org.jfree.data.Range getRangeBounds(boolean)" class="org.jfree.data.RangeInfo" />
	<class name="tourma.data.Clan" />
	<method signature="int compareTo(java.lang.Object)" class="tourma.data.Clan" />
	<method signature="java.lang.String getName()" class="tourma.data.Clan" />
	<method signature="int hashCode()" class="tourma.data.Clan" />
	<method signature="void setXMLElement(org.jdom2.Element)" class="tourma.data.Clan" />
	<method signature="void delClan(java.lang.String)" class="tourma.data.Clan" />
	<method signature="void newClanMap()" class="tourma.data.Clan" />
	<method signature="void putClan(java.lang.String,tourma.data.Clan)" class="tourma.data.Clan" />
	<method signature="org.jdom2.Element getXMLElement()" class="tourma.data.Clan" />
	<method signature="boolean equals(java.lang.Object)" class="tourma.data.Clan" />
	<method signature="void setName(java.lang.String)" class="tourma.data.Clan" />
	<method signature="java.lang.String toString()" class="tourma.data.Clan" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="tourma.data.Clan" />
	<method signature="void setPicture(java.awt.image.BufferedImage)" class="tourma.data.Clan" />
	<method signature="java.awt.image.BufferedImage getPicture()" class="tourma.data.Clan" />
	<method signature="tourma.data.Clan getClan(java.lang.String)" class="tourma.data.Clan" />
	<class name="org.w3c.dom.html.HTMLPreElement" />
	<method signature="void setWidth(int)" class="org.w3c.dom.html.HTMLPreElement" />
	<method signature="int getWidth()" class="org.w3c.dom.html.HTMLPreElement" />
	<class name="com.swabunga.spell.event.SpellCheckListener" />
	<method signature="void spellingError(com.swabunga.spell.event.SpellCheckEvent)" class="com.swabunga.spell.event.SpellCheckListener" />
	<class name="org.apache.xerces.dom.PSVIDocumentImpl" />
	<method signature="org.w3c.dom.DOMImplementation getImplementation()" class="org.apache.xerces.dom.PSVIDocumentImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.dom.PSVIDocumentImpl" />
	<method signature="org.w3c.dom.Node cloneNode(boolean)" class="org.apache.xerces.dom.PSVIDocumentImpl" />
	<method signature="org.w3c.dom.Element createElementNS(java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.dom.PSVIDocumentImpl" />
	<method signature="org.w3c.dom.Attr createAttributeNS(java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.dom.PSVIDocumentImpl" />
	<method signature="void &lt;init&gt;(org.w3c.dom.DocumentType)" class="org.apache.xerces.dom.PSVIDocumentImpl" />
	<method signature="org.w3c.dom.DOMConfiguration getDomConfig()" class="org.apache.xerces.dom.PSVIDocumentImpl" />
	<method signature="org.w3c.dom.Element createElementNS(java.lang.String,java.lang.String)" class="org.apache.xerces.dom.PSVIDocumentImpl" />
	<method signature="org.w3c.dom.Attr createAttributeNS(java.lang.String,java.lang.String)" class="org.apache.xerces.dom.PSVIDocumentImpl" />
	<class name="org.w3c.dom.DocumentFragment" />
	<class name="org.jdom2.input.SAXBuilder" />
	<method signature="java.lang.String getDriverClass()" class="org.jdom2.input.SAXBuilder" />
	<method signature="org.jdom2.JDOMFactory getFactory()" class="org.jdom2.input.SAXBuilder" />
	<method signature="org.xml.sax.EntityResolver getEntityResolver()" class="org.jdom2.input.SAXBuilder" />
	<method signature="void setXMLFilter(org.xml.sax.XMLFilter)" class="org.jdom2.input.SAXBuilder" />
	<method signature="org.jdom2.Document build(java.lang.String)" class="org.jdom2.input.SAXBuilder" />
	<method signature="void &lt;init&gt;(org.jdom2.input.sax.XMLReaderJDOMFactory,org.jdom2.input.sax.SAXHandlerFactory,org.jdom2.JDOMFactory)" class="org.jdom2.input.SAXBuilder" />
	<method signature="void &lt;init&gt;()" class="org.jdom2.input.SAXBuilder" />
	<method signature="org.jdom2.Document build(org.xml.sax.InputSource)" class="org.jdom2.input.SAXBuilder" />
	<method signature="org.jdom2.Document build(java.io.Reader,java.lang.String)" class="org.jdom2.input.SAXBuilder" />
	<method signature="org.jdom2.Document build(java.io.InputStream)" class="org.jdom2.input.SAXBuilder" />
	<method signature="org.xml.sax.XMLFilter getXMLFilter()" class="org.jdom2.input.SAXBuilder" />
	<method signature="boolean getIgnoringElementContentWhitespace()" class="org.jdom2.input.SAXBuilder" />
	<method signature="void &lt;init&gt;(java.lang.String,boolean)" class="org.jdom2.input.SAXBuilder" />
	<method signature="org.jdom2.input.sax.SAXEngine buildEngine()" class="org.jdom2.input.SAXBuilder" />
	<method signature="org.jdom2.Document build(java.io.File)" class="org.jdom2.input.SAXBuilder" />
	<method signature="org.jdom2.Document build(java.io.Reader)" class="org.jdom2.input.SAXBuilder" />
	<method signature="void setExpandEntities(boolean)" class="org.jdom2.input.SAXBuilder" />
	<method signature="org.jdom2.Document build(java.net.URL)" class="org.jdom2.input.SAXBuilder" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jdom2.input.SAXBuilder" />
	<method signature="boolean getReuseParser()" class="org.jdom2.input.SAXBuilder" />
	<method signature="void setValidation(boolean)" class="org.jdom2.input.SAXBuilder" />
	<method signature="boolean getIgnoringBoundaryWhitespace()" class="org.jdom2.input.SAXBuilder" />
	<method signature="org.xml.sax.ErrorHandler getErrorHandler()" class="org.jdom2.input.SAXBuilder" />
	<method signature="org.jdom2.Document build(java.io.InputStream,java.lang.String)" class="org.jdom2.input.SAXBuilder" />
	<method signature="org.xml.sax.DTDHandler getDTDHandler()" class="org.jdom2.input.SAXBuilder" />
	<method signature="org.jdom2.input.sax.SAXHandlerFactory getSAXHandlerFactory()" class="org.jdom2.input.SAXBuilder" />
	<method signature="void &lt;init&gt;(boolean)" class="org.jdom2.input.SAXBuilder" />
	<method signature="void setJDOMFactory(org.jdom2.JDOMFactory)" class="org.jdom2.input.SAXBuilder" />
	<method signature="void setIgnoringBoundaryWhitespace(boolean)" class="org.jdom2.input.SAXBuilder" />
	<method signature="void setFeature(java.lang.String,boolean)" class="org.jdom2.input.SAXBuilder" />
	<method signature="org.jdom2.JDOMFactory getJDOMFactory()" class="org.jdom2.input.SAXBuilder" />
	<method signature="void setDTDHandler(org.xml.sax.DTDHandler)" class="org.jdom2.input.SAXBuilder" />
	<method signature="void setFactory(org.jdom2.JDOMFactory)" class="org.jdom2.input.SAXBuilder" />
	<method signature="void setReuseParser(boolean)" class="org.jdom2.input.SAXBuilder" />
	<method signature="void &lt;init&gt;(org.jdom2.input.sax.XMLReaderJDOMFactory)" class="org.jdom2.input.SAXBuilder" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="org.jdom2.input.SAXBuilder" />
	<method signature="void setXMLReaderFactory(org.jdom2.input.sax.XMLReaderJDOMFactory)" class="org.jdom2.input.SAXBuilder" />
	<method signature="void setSAXHandlerFactory(org.jdom2.input.sax.SAXHandlerFactory)" class="org.jdom2.input.SAXBuilder" />
	<method signature="boolean getExpandEntities()" class="org.jdom2.input.SAXBuilder" />
	<method signature="void setFastReconfigure(boolean)" class="org.jdom2.input.SAXBuilder" />
	<method signature="boolean isValidating()" class="org.jdom2.input.SAXBuilder" />
	<method signature="org.jdom2.input.sax.XMLReaderJDOMFactory getXMLReaderFactory()" class="org.jdom2.input.SAXBuilder" />
	<method signature="void setIgnoringElementContentWhitespace(boolean)" class="org.jdom2.input.SAXBuilder" />
	<method signature="void setEntityResolver(org.xml.sax.EntityResolver)" class="org.jdom2.input.SAXBuilder" />
	<method signature="boolean getValidation()" class="org.jdom2.input.SAXBuilder" />
	<method signature="void setErrorHandler(org.xml.sax.ErrorHandler)" class="org.jdom2.input.SAXBuilder" />
	<class name="org.w3c.dom.Element" />
	<method signature="boolean hasAttribute(java.lang.String)" class="org.w3c.dom.Element" />
	<method signature="org.w3c.dom.TypeInfo getSchemaTypeInfo()" class="org.w3c.dom.Element" />
	<method signature="org.w3c.dom.Attr removeAttributeNode(org.w3c.dom.Attr)" class="org.w3c.dom.Element" />
	<method signature="java.lang.String getAttribute(java.lang.String)" class="org.w3c.dom.Element" />
	<method signature="void setAttribute(java.lang.String,java.lang.String)" class="org.w3c.dom.Element" />
	<method signature="void setIdAttribute(java.lang.String,boolean)" class="org.w3c.dom.Element" />
	<method signature="void removeAttribute(java.lang.String)" class="org.w3c.dom.Element" />
	<method signature="boolean hasAttributeNS(java.lang.String,java.lang.String)" class="org.w3c.dom.Element" />
	<method signature="org.w3c.dom.Attr setAttributeNode(org.w3c.dom.Attr)" class="org.w3c.dom.Element" />
	<method signature="org.w3c.dom.Attr setAttributeNodeNS(org.w3c.dom.Attr)" class="org.w3c.dom.Element" />
	<method signature="org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String,java.lang.String)" class="org.w3c.dom.Element" />
	<method signature="org.w3c.dom.NodeList getElementsByTagName(java.lang.String)" class="org.w3c.dom.Element" />
	<method signature="org.w3c.dom.Attr getAttributeNodeNS(java.lang.String,java.lang.String)" class="org.w3c.dom.Element" />
	<method signature="org.w3c.dom.Attr getAttributeNode(java.lang.String)" class="org.w3c.dom.Element" />
	<method signature="void setIdAttributeNode(org.w3c.dom.Attr,boolean)" class="org.w3c.dom.Element" />
	<method signature="void setIdAttributeNS(java.lang.String,java.lang.String,boolean)" class="org.w3c.dom.Element" />
	<method signature="java.lang.String getAttributeNS(java.lang.String,java.lang.String)" class="org.w3c.dom.Element" />
	<method signature="void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)" class="org.w3c.dom.Element" />
	<method signature="java.lang.String getTagName()" class="org.w3c.dom.Element" />
	<method signature="void removeAttributeNS(java.lang.String,java.lang.String)" class="org.w3c.dom.Element" />
	<class name="org.jfree.chart.plot.ColorPalette" />
	<method signature="void initialize()" class="org.jfree.chart.plot.ColorPalette" />
	<method signature="void setInverse(boolean)" class="org.jfree.chart.plot.ColorPalette" />
	<method signature="void setMaxZ(double)" class="org.jfree.chart.plot.ColorPalette" />
	<method signature="double getMinZ()" class="org.jfree.chart.plot.ColorPalette" />
	<method signature="java.awt.Paint getColor(double)" class="org.jfree.chart.plot.ColorPalette" />
	<method signature="java.awt.Color getColorLinear(double)" class="org.jfree.chart.plot.ColorPalette" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.plot.ColorPalette" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.plot.ColorPalette" />
	<method signature="java.lang.String getPaletteName()" class="org.jfree.chart.plot.ColorPalette" />
	<method signature="void setLogscale(boolean)" class="org.jfree.chart.plot.ColorPalette" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.plot.ColorPalette" />
	<method signature="boolean isStepped()" class="org.jfree.chart.plot.ColorPalette" />
	<method signature="void setStepped(boolean)" class="org.jfree.chart.plot.ColorPalette" />
	<method signature="boolean isInverse()" class="org.jfree.chart.plot.ColorPalette" />
	<method signature="double getMaxZ()" class="org.jfree.chart.plot.ColorPalette" />
	<method signature="java.awt.Color getColor(int)" class="org.jfree.chart.plot.ColorPalette" />
	<method signature="int hashCode()" class="org.jfree.chart.plot.ColorPalette" />
	<method signature="void setTickValues(double[])" class="org.jfree.chart.plot.ColorPalette" />
	<method signature="java.awt.Color getColorLog(double)" class="org.jfree.chart.plot.ColorPalette" />
	<method signature="double[] getTickValues()" class="org.jfree.chart.plot.ColorPalette" />
	<method signature="void invertPalette()" class="org.jfree.chart.plot.ColorPalette" />
	<method signature="void setTickValues(java.util.List)" class="org.jfree.chart.plot.ColorPalette" />
	<method signature="java.awt.Paint getPaint(double)" class="org.jfree.chart.plot.ColorPalette" />
	<method signature="void setMinZ(double)" class="org.jfree.chart.plot.ColorPalette" />
	<method signature="boolean isLogscale()" class="org.jfree.chart.plot.ColorPalette" />
	<method signature="void setPaletteName(java.lang.String)" class="org.jfree.chart.plot.ColorPalette" />
	<class name="org.jfree.chart.annotations.XYImageAnnotation" />
	<method signature="void &lt;init&gt;(double,double,java.awt.Image)" class="org.jfree.chart.annotations.XYImageAnnotation" />
	<method signature="double getY()" class="org.jfree.chart.annotations.XYImageAnnotation" />
	<method signature="int hashCode()" class="org.jfree.chart.annotations.XYImageAnnotation" />
	<method signature="double getX()" class="org.jfree.chart.annotations.XYImageAnnotation" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.annotations.XYImageAnnotation" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.annotations.XYImageAnnotation" />
	<method signature="void &lt;init&gt;(double,double,java.awt.Image,org.jfree.ui.RectangleAnchor)" class="org.jfree.chart.annotations.XYImageAnnotation" />
	<method signature="java.awt.Image getImage()" class="org.jfree.chart.annotations.XYImageAnnotation" />
	<method signature="void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.annotations.XYImageAnnotation" />
	<method signature="org.jfree.ui.RectangleAnchor getImageAnchor()" class="org.jfree.chart.annotations.XYImageAnnotation" />
	<class name="org.jfree.data.statistics.DefaultStatisticalCategoryDataset" />
	<method signature="java.lang.Number getMeanValue(int,int)" class="org.jfree.data.statistics.DefaultStatisticalCategoryDataset" />
	<method signature="java.lang.Number getValue(int,int)" class="org.jfree.data.statistics.DefaultStatisticalCategoryDataset" />
	<method signature="java.lang.Number getStdDevValue(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.statistics.DefaultStatisticalCategoryDataset" />
	<method signature="java.util.List getColumnKeys()" class="org.jfree.data.statistics.DefaultStatisticalCategoryDataset" />
	<method signature="void removeRow(int)" class="org.jfree.data.statistics.DefaultStatisticalCategoryDataset" />
	<method signature="java.util.List getRowKeys()" class="org.jfree.data.statistics.DefaultStatisticalCategoryDataset" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.statistics.DefaultStatisticalCategoryDataset" />
	<method signature="void removeRow(java.lang.Comparable)" class="org.jfree.data.statistics.DefaultStatisticalCategoryDataset" />
	<method signature="void clear()" class="org.jfree.data.statistics.DefaultStatisticalCategoryDataset" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.statistics.DefaultStatisticalCategoryDataset" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.statistics.DefaultStatisticalCategoryDataset" />
	<method signature="int getRowCount()" class="org.jfree.data.statistics.DefaultStatisticalCategoryDataset" />
	<method signature="int getColumnCount()" class="org.jfree.data.statistics.DefaultStatisticalCategoryDataset" />
	<method signature="void remove(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.statistics.DefaultStatisticalCategoryDataset" />
	<method signature="double getRangeLowerBound(boolean)" class="org.jfree.data.statistics.DefaultStatisticalCategoryDataset" />
	<method signature="java.lang.Number getValue(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.statistics.DefaultStatisticalCategoryDataset" />
	<method signature="java.lang.Number getStdDevValue(int,int)" class="org.jfree.data.statistics.DefaultStatisticalCategoryDataset" />
	<method signature="java.lang.Number getMeanValue(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.statistics.DefaultStatisticalCategoryDataset" />
	<method signature="org.jfree.data.Range getRangeBounds(boolean)" class="org.jfree.data.statistics.DefaultStatisticalCategoryDataset" />
	<method signature="java.lang.Comparable getColumnKey(int)" class="org.jfree.data.statistics.DefaultStatisticalCategoryDataset" />
	<method signature="void add(java.lang.Number,java.lang.Number,java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.statistics.DefaultStatisticalCategoryDataset" />
	<method signature="void removeColumn(int)" class="org.jfree.data.statistics.DefaultStatisticalCategoryDataset" />
	<method signature="double getRangeUpperBound(boolean)" class="org.jfree.data.statistics.DefaultStatisticalCategoryDataset" />
	<method signature="java.lang.Comparable getRowKey(int)" class="org.jfree.data.statistics.DefaultStatisticalCategoryDataset" />
	<method signature="int getRowIndex(java.lang.Comparable)" class="org.jfree.data.statistics.DefaultStatisticalCategoryDataset" />
	<method signature="void add(double,double,java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.statistics.DefaultStatisticalCategoryDataset" />
	<method signature="void removeColumn(java.lang.Comparable)" class="org.jfree.data.statistics.DefaultStatisticalCategoryDataset" />
	<method signature="int getColumnIndex(java.lang.Comparable)" class="org.jfree.data.statistics.DefaultStatisticalCategoryDataset" />
	<class name="freemarker.cache.StrongCacheStorage" />
	<method signature="void clear()" class="freemarker.cache.StrongCacheStorage" />
	<method signature="void put(java.lang.Object,java.lang.Object)" class="freemarker.cache.StrongCacheStorage" />
	<method signature="void &lt;init&gt;()" class="freemarker.cache.StrongCacheStorage" />
	<method signature="boolean isConcurrent()" class="freemarker.cache.StrongCacheStorage" />
	<method signature="java.lang.Object get(java.lang.Object)" class="freemarker.cache.StrongCacheStorage" />
	<method signature="void remove(java.lang.Object)" class="freemarker.cache.StrongCacheStorage" />
	<class name="org.apache.commons.lang3.builder.CompareToBuilder" />
	<method signature="org.apache.commons.lang3.builder.CompareToBuilder append(double[],double[])" class="org.apache.commons.lang3.builder.CompareToBuilder" />
	<method signature="org.apache.commons.lang3.builder.CompareToBuilder append(short,short)" class="org.apache.commons.lang3.builder.CompareToBuilder" />
	<method signature="org.apache.commons.lang3.builder.CompareToBuilder append(float,float)" class="org.apache.commons.lang3.builder.CompareToBuilder" />
	<method signature="org.apache.commons.lang3.builder.CompareToBuilder append(boolean[],boolean[])" class="org.apache.commons.lang3.builder.CompareToBuilder" />
	<method signature="org.apache.commons.lang3.builder.CompareToBuilder append(char,char)" class="org.apache.commons.lang3.builder.CompareToBuilder" />
	<method signature="org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[],java.util.Comparator)" class="org.apache.commons.lang3.builder.CompareToBuilder" />
	<method signature="org.apache.commons.lang3.builder.CompareToBuilder append(double,double)" class="org.apache.commons.lang3.builder.CompareToBuilder" />
	<method signature="java.lang.Integer build()" class="org.apache.commons.lang3.builder.CompareToBuilder" />
	<method signature="int reflectionCompare(java.lang.Object,java.lang.Object,java.lang.String[])" class="org.apache.commons.lang3.builder.CompareToBuilder" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.builder.CompareToBuilder" />
	<method signature="int reflectionCompare(java.lang.Object,java.lang.Object)" class="org.apache.commons.lang3.builder.CompareToBuilder" />
	<method signature="org.apache.commons.lang3.builder.CompareToBuilder append(float[],float[])" class="org.apache.commons.lang3.builder.CompareToBuilder" />
	<method signature="org.apache.commons.lang3.builder.CompareToBuilder append(int[],int[])" class="org.apache.commons.lang3.builder.CompareToBuilder" />
	<method signature="org.apache.commons.lang3.builder.CompareToBuilder appendSuper(int)" class="org.apache.commons.lang3.builder.CompareToBuilder" />
	<method signature="int reflectionCompare(java.lang.Object,java.lang.Object,java.util.Collection)" class="org.apache.commons.lang3.builder.CompareToBuilder" />
	<method signature="java.lang.Object build()" class="org.apache.commons.lang3.builder.CompareToBuilder" />
	<method signature="org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object,java.util.Comparator)" class="org.apache.commons.lang3.builder.CompareToBuilder" />
	<method signature="org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])" class="org.apache.commons.lang3.builder.CompareToBuilder" />
	<method signature="org.apache.commons.lang3.builder.CompareToBuilder append(short[],short[])" class="org.apache.commons.lang3.builder.CompareToBuilder" />
	<method signature="org.apache.commons.lang3.builder.CompareToBuilder append(char[],char[])" class="org.apache.commons.lang3.builder.CompareToBuilder" />
	<method signature="org.apache.commons.lang3.builder.CompareToBuilder append(long,long)" class="org.apache.commons.lang3.builder.CompareToBuilder" />
	<method signature="org.apache.commons.lang3.builder.CompareToBuilder append(byte[],byte[])" class="org.apache.commons.lang3.builder.CompareToBuilder" />
	<method signature="org.apache.commons.lang3.builder.CompareToBuilder append(long[],long[])" class="org.apache.commons.lang3.builder.CompareToBuilder" />
	<method signature="org.apache.commons.lang3.builder.CompareToBuilder append(byte,byte)" class="org.apache.commons.lang3.builder.CompareToBuilder" />
	<method signature="org.apache.commons.lang3.builder.CompareToBuilder append(int,int)" class="org.apache.commons.lang3.builder.CompareToBuilder" />
	<method signature="int reflectionCompare(java.lang.Object,java.lang.Object,boolean)" class="org.apache.commons.lang3.builder.CompareToBuilder" />
	<method signature="int toComparison()" class="org.apache.commons.lang3.builder.CompareToBuilder" />
	<method signature="org.apache.commons.lang3.builder.CompareToBuilder append(boolean,boolean)" class="org.apache.commons.lang3.builder.CompareToBuilder" />
	<method signature="int reflectionCompare(java.lang.Object,java.lang.Object,boolean,java.lang.Class,java.lang.String[])" class="org.apache.commons.lang3.builder.CompareToBuilder" />
	<method signature="org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)" class="org.apache.commons.lang3.builder.CompareToBuilder" />
	<class name="org.apache.xerces.impl.XMLDocumentScannerImpl$ContentDispatcher" />
	<class name="org.w3c.dom.html.HTMLBRElement" />
	<method signature="java.lang.String getClear()" class="org.w3c.dom.html.HTMLBRElement" />
	<method signature="void setClear(java.lang.String)" class="org.w3c.dom.html.HTMLBRElement" />
	<class name="org.jfree.ui.FloatingButtonEnabler" />
	<method signature="org.jfree.ui.FloatingButtonEnabler getInstance()" class="org.jfree.ui.FloatingButtonEnabler" />
	<method signature="void mouseExited(java.awt.event.MouseEvent)" class="org.jfree.ui.FloatingButtonEnabler" />
	<method signature="void mouseEntered(java.awt.event.MouseEvent)" class="org.jfree.ui.FloatingButtonEnabler" />
	<method signature="void removeButton(javax.swing.AbstractButton)" class="org.jfree.ui.FloatingButtonEnabler" />
	<method signature="void addButton(javax.swing.AbstractButton)" class="org.jfree.ui.FloatingButtonEnabler" />
	<class name="javax.xml.stream.XMLStreamException" />
	<method signature="java.lang.Throwable getNestedException()" class="javax.xml.stream.XMLStreamException" />
	<method signature="void &lt;init&gt;()" class="javax.xml.stream.XMLStreamException" />
	<method signature="void &lt;init&gt;(java.lang.Throwable)" class="javax.xml.stream.XMLStreamException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Throwable)" class="javax.xml.stream.XMLStreamException" />
	<method signature="javax.xml.stream.Location getLocation()" class="javax.xml.stream.XMLStreamException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="javax.xml.stream.XMLStreamException" />
	<method signature="void &lt;init&gt;(java.lang.String,javax.xml.stream.Location,java.lang.Throwable)" class="javax.xml.stream.XMLStreamException" />
	<method signature="void &lt;init&gt;(java.lang.String,javax.xml.stream.Location)" class="javax.xml.stream.XMLStreamException" />
	<class name="tourma.views.round.JPNClan" />
	<method signature="void update()" class="tourma.views.round.JPNClan" />
	<method signature="void &lt;init&gt;(tourma.data.Round,tourma.data.Tournament)" class="tourma.views.round.JPNClan" />
	<method signature="void setRoundOnly(boolean)" class="tourma.views.round.JPNClan" />
	<class name="org.jdom2.output.DOMOutputter" />
	<method signature="void setForceNamespaceAware(boolean)" class="org.jdom2.output.DOMOutputter" />
	<method signature="org.w3c.dom.Element output(org.jdom2.Element)" class="org.jdom2.output.DOMOutputter" />
	<method signature="org.w3c.dom.DocumentType output(org.jdom2.DocType)" class="org.jdom2.output.DOMOutputter" />
	<method signature="void &lt;init&gt;(org.jdom2.adapters.DOMAdapter)" class="org.jdom2.output.DOMOutputter" />
	<method signature="org.w3c.dom.Text output(org.jdom2.Text)" class="org.jdom2.output.DOMOutputter" />
	<method signature="void &lt;init&gt;(org.jdom2.adapters.DOMAdapter,org.jdom2.output.Format,org.jdom2.output.support.DOMOutputProcessor)" class="org.jdom2.output.DOMOutputter" />
	<method signature="org.jdom2.adapters.DOMAdapter getDOMAdapter()" class="org.jdom2.output.DOMOutputter" />
	<method signature="void setFormat(org.jdom2.output.Format)" class="org.jdom2.output.DOMOutputter" />
	<method signature="boolean getForceNamespaceAware()" class="org.jdom2.output.DOMOutputter" />
	<method signature="void &lt;init&gt;()" class="org.jdom2.output.DOMOutputter" />
	<method signature="void setDOMOutputProcessor(org.jdom2.output.support.DOMOutputProcessor)" class="org.jdom2.output.DOMOutputter" />
	<method signature="org.w3c.dom.Document output(org.jdom2.Document)" class="org.jdom2.output.DOMOutputter" />
	<method signature="org.w3c.dom.ProcessingInstruction output(org.jdom2.ProcessingInstruction)" class="org.jdom2.output.DOMOutputter" />
	<method signature="org.jdom2.output.support.DOMOutputProcessor getDOMOutputProcessor()" class="org.jdom2.output.DOMOutputter" />
	<method signature="void setDOMAdapter(org.jdom2.adapters.DOMAdapter)" class="org.jdom2.output.DOMOutputter" />
	<method signature="java.util.List output(java.util.List)" class="org.jdom2.output.DOMOutputter" />
	<method signature="org.w3c.dom.Comment output(org.jdom2.Comment)" class="org.jdom2.output.DOMOutputter" />
	<method signature="org.jdom2.output.Format getFormat()" class="org.jdom2.output.DOMOutputter" />
	<method signature="org.w3c.dom.EntityReference output(org.jdom2.EntityRef)" class="org.jdom2.output.DOMOutputter" />
	<method signature="org.w3c.dom.EntityReference output(org.w3c.dom.Document,org.jdom2.EntityRef)" class="org.jdom2.output.DOMOutputter" />
	<method signature="org.w3c.dom.Text output(org.w3c.dom.Document,org.jdom2.Text)" class="org.jdom2.output.DOMOutputter" />
	<method signature="void &lt;init&gt;(org.jdom2.output.support.DOMOutputProcessor)" class="org.jdom2.output.DOMOutputter" />
	<method signature="org.w3c.dom.Attr output(org.jdom2.Attribute)" class="org.jdom2.output.DOMOutputter" />
	<method signature="org.w3c.dom.Comment output(org.w3c.dom.Document,org.jdom2.Comment)" class="org.jdom2.output.DOMOutputter" />
	<method signature="org.w3c.dom.CDATASection output(org.w3c.dom.Document,org.jdom2.CDATA)" class="org.jdom2.output.DOMOutputter" />
	<method signature="org.w3c.dom.CDATASection output(org.jdom2.CDATA)" class="org.jdom2.output.DOMOutputter" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jdom2.output.DOMOutputter" />
	<method signature="java.util.List output(org.w3c.dom.Document,java.util.List)" class="org.jdom2.output.DOMOutputter" />
	<method signature="org.w3c.dom.Element output(org.w3c.dom.Document,org.jdom2.Element)" class="org.jdom2.output.DOMOutputter" />
	<method signature="org.w3c.dom.ProcessingInstruction output(org.w3c.dom.Document,org.jdom2.ProcessingInstruction)" class="org.jdom2.output.DOMOutputter" />
	<method signature="org.w3c.dom.Attr output(org.w3c.dom.Document,org.jdom2.Attribute)" class="org.jdom2.output.DOMOutputter" />
	<class name="org.jfree.chart.entity.ContourEntity" />
	<method signature="int getIndex()" class="org.jfree.chart.entity.ContourEntity" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.entity.ContourEntity" />
	<method signature="void &lt;init&gt;(java.awt.Shape,java.lang.String)" class="org.jfree.chart.entity.ContourEntity" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.entity.ContourEntity" />
	<method signature="void setIndex(int)" class="org.jfree.chart.entity.ContourEntity" />
	<method signature="void &lt;init&gt;(java.awt.Shape,java.lang.String,java.lang.String)" class="org.jfree.chart.entity.ContourEntity" />
	<class name="org.apache.xerces.xni.Augmentations" />
	<method signature="java.util.Enumeration keys()" class="org.apache.xerces.xni.Augmentations" />
	<method signature="java.lang.Object getItem(java.lang.String)" class="org.apache.xerces.xni.Augmentations" />
	<method signature="void removeAllItems()" class="org.apache.xerces.xni.Augmentations" />
	<method signature="java.lang.Object putItem(java.lang.String,java.lang.Object)" class="org.apache.xerces.xni.Augmentations" />
	<method signature="java.lang.Object removeItem(java.lang.String)" class="org.apache.xerces.xni.Augmentations" />
	<class name="freemarker.ext.dom.NodeModel" />
	<method signature="int size()" class="freemarker.ext.dom.NodeModel" />
	<method signature="freemarker.ext.dom.NodeModel wrap(org.w3c.dom.Node)" class="freemarker.ext.dom.NodeModel" />
	<method signature="javax.xml.parsers.DocumentBuilderFactory getDocumentBuilderFactory()" class="freemarker.ext.dom.NodeModel" />
	<method signature="freemarker.template.TemplateModel get(int)" class="freemarker.ext.dom.NodeModel" />
	<method signature="java.lang.Class getXPathSupportClass()" class="freemarker.ext.dom.NodeModel" />
	<method signature="freemarker.ext.dom.NodeModel parse(java.io.File,boolean,boolean)" class="freemarker.ext.dom.NodeModel" />
	<method signature="freemarker.ext.dom.NodeModel parse(java.io.File)" class="freemarker.ext.dom.NodeModel" />
	<method signature="java.lang.Object getWrappedObject()" class="freemarker.ext.dom.NodeModel" />
	<method signature="void setXPathSupportClass(java.lang.Class)" class="freemarker.ext.dom.NodeModel" />
	<method signature="boolean equals(java.lang.Object)" class="freemarker.ext.dom.NodeModel" />
	<method signature="void useJaxenXPathSupport()" class="freemarker.ext.dom.NodeModel" />
	<method signature="void setDocumentBuilderFactory(javax.xml.parsers.DocumentBuilderFactory)" class="freemarker.ext.dom.NodeModel" />
	<method signature="java.lang.String getNodeNamespace()" class="freemarker.ext.dom.NodeModel" />
	<method signature="void simplify(org.w3c.dom.Node)" class="freemarker.ext.dom.NodeModel" />
	<method signature="org.w3c.dom.Node getNode()" class="freemarker.ext.dom.NodeModel" />
	<method signature="java.lang.String getNodeType()" class="freemarker.ext.dom.NodeModel" />
	<method signature="void removePIs(org.w3c.dom.Node)" class="freemarker.ext.dom.NodeModel" />
	<method signature="java.lang.Object getAdaptedObject(java.lang.Class)" class="freemarker.ext.dom.NodeModel" />
	<method signature="int hashCode()" class="freemarker.ext.dom.NodeModel" />
	<method signature="void useXalanXPathSupport()" class="freemarker.ext.dom.NodeModel" />
	<method signature="freemarker.ext.dom.NodeModel parse(org.xml.sax.InputSource,boolean,boolean)" class="freemarker.ext.dom.NodeModel" />
	<method signature="freemarker.template.TemplateSequenceModel getChildNodes()" class="freemarker.ext.dom.NodeModel" />
	<method signature="freemarker.ext.dom.NodeModel parse(org.xml.sax.InputSource)" class="freemarker.ext.dom.NodeModel" />
	<method signature="freemarker.template.TemplateNodeModel getParentNode()" class="freemarker.ext.dom.NodeModel" />
	<method signature="void removeComments(org.w3c.dom.Node)" class="freemarker.ext.dom.NodeModel" />
	<method signature="void useSunInternalXPathSupport()" class="freemarker.ext.dom.NodeModel" />
	<method signature="void mergeAdjacentText(org.w3c.dom.Node)" class="freemarker.ext.dom.NodeModel" />
	<method signature="freemarker.template.TemplateModel exec(java.util.List)" class="freemarker.ext.dom.NodeModel" />
	<method signature="void useDefaultXPathSupport()" class="freemarker.ext.dom.NodeModel" />
	<method signature="void setErrorHandler(org.xml.sax.ErrorHandler)" class="freemarker.ext.dom.NodeModel" />
	<method signature="freemarker.template.TemplateModel get(java.lang.String)" class="freemarker.ext.dom.NodeModel" />
	<class name="org.jfree.chart.entity.XYItemEntity" />
	<method signature="void setItem(int)" class="org.jfree.chart.entity.XYItemEntity" />
	<method signature="org.jfree.data.xy.XYDataset getDataset()" class="org.jfree.chart.entity.XYItemEntity" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.entity.XYItemEntity" />
	<method signature="void setSeriesIndex(int)" class="org.jfree.chart.entity.XYItemEntity" />
	<method signature="java.lang.String toString()" class="org.jfree.chart.entity.XYItemEntity" />
	<method signature="void setDataset(org.jfree.data.xy.XYDataset)" class="org.jfree.chart.entity.XYItemEntity" />
	<method signature="int getSeriesIndex()" class="org.jfree.chart.entity.XYItemEntity" />
	<method signature="void &lt;init&gt;(java.awt.Shape,org.jfree.data.xy.XYDataset,int,int,java.lang.String,java.lang.String)" class="org.jfree.chart.entity.XYItemEntity" />
	<method signature="int getItem()" class="org.jfree.chart.entity.XYItemEntity" />
	<class name="org.w3c.dom.css.Rect" />
	<method signature="org.w3c.dom.css.CSSPrimitiveValue getBottom()" class="org.w3c.dom.css.Rect" />
	<method signature="org.w3c.dom.css.CSSPrimitiveValue getTop()" class="org.w3c.dom.css.Rect" />
	<method signature="org.w3c.dom.css.CSSPrimitiveValue getRight()" class="org.w3c.dom.css.Rect" />
	<method signature="org.w3c.dom.css.CSSPrimitiveValue getLeft()" class="org.w3c.dom.css.Rect" />
	<class name="edu.umd.cs.findbugs.annotations.NoWarning" />
	<method signature="int num()" class="edu.umd.cs.findbugs.annotations.NoWarning" />
	<method signature="edu.umd.cs.findbugs.annotations.Confidence confidence()" class="edu.umd.cs.findbugs.annotations.NoWarning" />
	<method signature="int rank()" class="edu.umd.cs.findbugs.annotations.NoWarning" />
	<method signature="java.lang.String value()" class="edu.umd.cs.findbugs.annotations.NoWarning" />
	<class name="org.jfree.ui.WizardPanel" />
	<method signature="org.jfree.ui.WizardPanel getNextPanel()" class="org.jfree.ui.WizardPanel" />
	<method signature="boolean canRedisplayNextPanel()" class="org.jfree.ui.WizardPanel" />
	<method signature="void setOwner(org.jfree.ui.WizardDialog)" class="org.jfree.ui.WizardPanel" />
	<method signature="void returnFromLaterStep()" class="org.jfree.ui.WizardPanel" />
	<method signature="boolean canFinish()" class="org.jfree.ui.WizardPanel" />
	<method signature="org.jfree.ui.WizardDialog getOwner()" class="org.jfree.ui.WizardPanel" />
	<method signature="java.lang.Object getResult()" class="org.jfree.ui.WizardPanel" />
	<method signature="boolean hasNextPanel()" class="org.jfree.ui.WizardPanel" />
	<class name="org.apache.xerces.parsers.SAXParser" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable)" class="org.apache.xerces.parsers.SAXParser" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.parsers.SAXParser" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable,org.apache.xerces.xni.grammars.XMLGrammarPool)" class="org.apache.xerces.parsers.SAXParser" />
	<method signature="void &lt;init&gt;(org.apache.xerces.xni.parser.XMLParserConfiguration)" class="org.apache.xerces.parsers.SAXParser" />
	<class name="javax.annotation.meta.TypeQualifier" />
	<method signature="java.lang.Class applicableTo()" class="javax.annotation.meta.TypeQualifier" />
	<class name="org.jfree.data.xy.YisSymbolic" />
	<method signature="java.lang.String getYSymbolicValue(int,int)" class="org.jfree.data.xy.YisSymbolic" />
	<method signature="java.lang.String getYSymbolicValue(java.lang.Integer)" class="org.jfree.data.xy.YisSymbolic" />
	<method signature="java.lang.String[] getYSymbolicValues()" class="org.jfree.data.xy.YisSymbolic" />
	<class name="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void setDTDContentModelSource(org.apache.xerces.xni.parser.XMLDTDContentModelSource)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void processingInstruction(java.lang.String,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void endElement(org.apache.xerces.xni.QName,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void externalEntityDecl(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void doctypeDecl(java.lang.String,java.lang.String,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void ignorableWhitespace(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void attributeDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void empty(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void internalEntityDecl(java.lang.String,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void textDecl(java.lang.String,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void startPrefixMapping(java.lang.String,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="org.apache.xerces.xni.parser.XMLDTDContentModelSource getDTDContentModelSource()" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void emptyElement(org.apache.xerces.xni.QName,org.apache.xerces.xni.XMLAttributes,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void elementDecl(java.lang.String,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void endAttlist(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void endConditional(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void unparsedEntityDecl(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void endDocument(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void startElement(org.apache.xerces.xni.QName,org.apache.xerces.xni.XMLAttributes,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void endExternalSubset(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void startDocument(org.apache.xerces.xni.XMLLocator,java.lang.String,org.apache.xerces.xni.NamespaceContext,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void startGeneralEntity(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void endGeneralEntity(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void occurrence(short,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void startAttlist(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void startContentModel(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void pcdata(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void notationDecl(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void startParameterEntity(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void startGroup(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void setDocumentSource(org.apache.xerces.xni.parser.XMLDocumentSource)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void startCDATA(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void endCDATA(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="org.apache.xerces.xni.parser.XMLDocumentSource getDocumentSource()" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void separator(short,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void startExternalSubset(org.apache.xerces.xni.XMLResourceIdentifier,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void endContentModel(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void setDTDSource(org.apache.xerces.xni.parser.XMLDTDSource)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void characters(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void startDTD(org.apache.xerces.xni.XMLLocator,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void xmlDecl(java.lang.String,java.lang.String,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void element(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="org.apache.xerces.xni.parser.XMLDTDSource getDTDSource()" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void endParameterEntity(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void ignoredCharacters(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void startConditional(short,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void endDTD(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void any(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void comment(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void endPrefixMapping(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<method signature="void endGroup(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.DefaultXMLDocumentHandler" />
	<class name="tourma.utility.Suspendable" />
	<method signature="void setSuspended(boolean)" class="tourma.utility.Suspendable" />
	<class name="org.jfree.chart.plot.dial.DialFrame" />
	<method signature="java.awt.Shape getWindow(java.awt.geom.Rectangle2D)" class="org.jfree.chart.plot.dial.DialFrame" />
	<class name="org.jdom2.input.stax.DefaultStAXFilter" />
	<method signature="java.lang.String pruneComment(int,java.lang.String)" class="org.jdom2.input.stax.DefaultStAXFilter" />
	<method signature="java.lang.String includeCDATA(int,java.lang.String)" class="org.jdom2.input.stax.DefaultStAXFilter" />
	<method signature="java.lang.String pruneText(int,java.lang.String)" class="org.jdom2.input.stax.DefaultStAXFilter" />
	<method signature="boolean pruneElement(int,java.lang.String,org.jdom2.Namespace)" class="org.jdom2.input.stax.DefaultStAXFilter" />
	<method signature="boolean includeElement(int,java.lang.String,org.jdom2.Namespace)" class="org.jdom2.input.stax.DefaultStAXFilter" />
	<method signature="java.lang.String includeComment(int,java.lang.String)" class="org.jdom2.input.stax.DefaultStAXFilter" />
	<method signature="boolean includeProcessingInstruction(int,java.lang.String)" class="org.jdom2.input.stax.DefaultStAXFilter" />
	<method signature="java.lang.String pruneCDATA(int,java.lang.String)" class="org.jdom2.input.stax.DefaultStAXFilter" />
	<method signature="boolean pruneProcessingInstruction(int,java.lang.String)" class="org.jdom2.input.stax.DefaultStAXFilter" />
	<method signature="boolean includeDocType()" class="org.jdom2.input.stax.DefaultStAXFilter" />
	<method signature="void &lt;init&gt;()" class="org.jdom2.input.stax.DefaultStAXFilter" />
	<method signature="java.lang.String includeText(int,java.lang.String)" class="org.jdom2.input.stax.DefaultStAXFilter" />
	<method signature="boolean includeEntityRef(int,java.lang.String)" class="org.jdom2.input.stax.DefaultStAXFilter" />
	<method signature="boolean pruneEntityRef(int,java.lang.String)" class="org.jdom2.input.stax.DefaultStAXFilter" />
	<class name="javax.xml.xpath.XPathFunctionException" />
	<method signature="void &lt;init&gt;(java.lang.Throwable)" class="javax.xml.xpath.XPathFunctionException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="javax.xml.xpath.XPathFunctionException" />
	<class name="org.apache.xerces.dom.CoreDOMImplementationImpl" />
	<method signature="org.w3c.dom.DOMImplementation getDOMImplementation()" class="org.apache.xerces.dom.CoreDOMImplementationImpl" />
	<method signature="org.w3c.dom.ls.LSInput createLSInput()" class="org.apache.xerces.dom.CoreDOMImplementationImpl" />
	<method signature="org.w3c.dom.ls.LSSerializer createLSSerializer()" class="org.apache.xerces.dom.CoreDOMImplementationImpl" />
	<method signature="org.w3c.dom.ls.LSOutput createLSOutput()" class="org.apache.xerces.dom.CoreDOMImplementationImpl" />
	<method signature="boolean hasFeature(java.lang.String,java.lang.String)" class="org.apache.xerces.dom.CoreDOMImplementationImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.dom.CoreDOMImplementationImpl" />
	<method signature="org.w3c.dom.DocumentType createDocumentType(java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.dom.CoreDOMImplementationImpl" />
	<method signature="java.lang.Object getFeature(java.lang.String,java.lang.String)" class="org.apache.xerces.dom.CoreDOMImplementationImpl" />
	<method signature="org.w3c.dom.ls.LSParser createLSParser(short,java.lang.String)" class="org.apache.xerces.dom.CoreDOMImplementationImpl" />
	<method signature="org.w3c.dom.Document createDocument(java.lang.String,java.lang.String,org.w3c.dom.DocumentType)" class="org.apache.xerces.dom.CoreDOMImplementationImpl" />
	<class name="org.jfree.chart.axis.CategoryLabelPosition" />
	<method signature="int hashCode()" class="org.jfree.chart.axis.CategoryLabelPosition" />
	<method signature="double getAngle()" class="org.jfree.chart.axis.CategoryLabelPosition" />
	<method signature="org.jfree.chart.axis.CategoryLabelWidthType getWidthType()" class="org.jfree.chart.axis.CategoryLabelPosition" />
	<method signature="void &lt;init&gt;(org.jfree.ui.RectangleAnchor,org.jfree.text.TextBlockAnchor,org.jfree.ui.TextAnchor,double,org.jfree.chart.axis.CategoryLabelWidthType,float)" class="org.jfree.chart.axis.CategoryLabelPosition" />
	<method signature="org.jfree.text.TextBlockAnchor getLabelAnchor()" class="org.jfree.chart.axis.CategoryLabelPosition" />
	<method signature="float getWidthRatio()" class="org.jfree.chart.axis.CategoryLabelPosition" />
	<method signature="void &lt;init&gt;(org.jfree.ui.RectangleAnchor,org.jfree.text.TextBlockAnchor,org.jfree.chart.axis.CategoryLabelWidthType,float)" class="org.jfree.chart.axis.CategoryLabelPosition" />
	<method signature="org.jfree.ui.RectangleAnchor getCategoryAnchor()" class="org.jfree.chart.axis.CategoryLabelPosition" />
	<method signature="org.jfree.ui.TextAnchor getRotationAnchor()" class="org.jfree.chart.axis.CategoryLabelPosition" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.axis.CategoryLabelPosition" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.axis.CategoryLabelPosition" />
	<method signature="void &lt;init&gt;(org.jfree.ui.RectangleAnchor,org.jfree.text.TextBlockAnchor)" class="org.jfree.chart.axis.CategoryLabelPosition" />
	<class name="org.jfree.chart.renderer.xy.HighLowRenderer" />
	<method signature="org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)" class="org.jfree.chart.renderer.xy.HighLowRenderer" />
	<method signature="void setCloseTickPaint(java.awt.Paint)" class="org.jfree.chart.renderer.xy.HighLowRenderer" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)" class="org.jfree.chart.renderer.xy.HighLowRenderer" />
	<method signature="java.awt.Paint getOpenTickPaint()" class="org.jfree.chart.renderer.xy.HighLowRenderer" />
	<method signature="boolean getDrawCloseTicks()" class="org.jfree.chart.renderer.xy.HighLowRenderer" />
	<method signature="void setDrawCloseTicks(boolean)" class="org.jfree.chart.renderer.xy.HighLowRenderer" />
	<method signature="java.awt.Paint getCloseTickPaint()" class="org.jfree.chart.renderer.xy.HighLowRenderer" />
	<method signature="void setOpenTickPaint(java.awt.Paint)" class="org.jfree.chart.renderer.xy.HighLowRenderer" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.renderer.xy.HighLowRenderer" />
	<method signature="double getTickLength()" class="org.jfree.chart.renderer.xy.HighLowRenderer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.xy.HighLowRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.xy.HighLowRenderer" />
	<method signature="void setDrawOpenTicks(boolean)" class="org.jfree.chart.renderer.xy.HighLowRenderer" />
	<method signature="void setTickLength(double)" class="org.jfree.chart.renderer.xy.HighLowRenderer" />
	<method signature="boolean getDrawOpenTicks()" class="org.jfree.chart.renderer.xy.HighLowRenderer" />
	<class name="org.apache.xerces.util.SymbolTable$Entry" />
	<method signature="void &lt;init&gt;(java.lang.String,org.apache.xerces.util.SymbolTable$Entry)" class="org.apache.xerces.util.SymbolTable$Entry" />
	<method signature="void &lt;init&gt;(char[],int,int,org.apache.xerces.util.SymbolTable$Entry)" class="org.apache.xerces.util.SymbolTable$Entry" />
	<class name="org.jdom2.output.support.AbstractFormattedWalker" />
	<method signature="boolean isCDATA()" class="org.jdom2.output.support.AbstractFormattedWalker" />
	<method signature="boolean isAllText()" class="org.jdom2.output.support.AbstractFormattedWalker" />
	<method signature="boolean hasNext()" class="org.jdom2.output.support.AbstractFormattedWalker" />
	<method signature="org.jdom2.Content next()" class="org.jdom2.output.support.AbstractFormattedWalker" />
	<method signature="java.lang.String text()" class="org.jdom2.output.support.AbstractFormattedWalker" />
	<method signature="void &lt;init&gt;(java.util.List,org.jdom2.output.support.FormatStack,boolean)" class="org.jdom2.output.support.AbstractFormattedWalker" />
	<method signature="boolean isAllWhitespace()" class="org.jdom2.output.support.AbstractFormattedWalker" />
	<class name="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset" />
	<method signature="java.lang.Number getMeanValue(int,int)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset" />
	<method signature="java.lang.Number getMedianValue(int,int)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset" />
	<method signature="java.lang.Number getValue(int,int)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset" />
	<method signature="void add(org.jfree.data.statistics.BoxAndWhiskerItem,java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset" />
	<method signature="void removeRow(int)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset" />
	<method signature="java.util.List getColumnKeys()" class="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset" />
	<method signature="java.util.List getRowKeys()" class="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset" />
	<method signature="java.lang.Number getMinOutlier(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset" />
	<method signature="void removeRow(java.lang.Comparable)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset" />
	<method signature="void clear()" class="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset" />
	<method signature="java.lang.Number getQ3Value(int,int)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset" />
	<method signature="java.lang.Number getMaxRegularValue(int,int)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset" />
	<method signature="void add(java.util.List,java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset" />
	<method signature="java.lang.Number getMinRegularValue(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset" />
	<method signature="int getRowCount()" class="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset" />
	<method signature="java.lang.Number getMaxOutlier(int,int)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset" />
	<method signature="org.jfree.data.statistics.BoxAndWhiskerItem getItem(int,int)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset" />
	<method signature="java.lang.Number getQ1Value(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset" />
	<method signature="int getColumnCount()" class="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset" />
	<method signature="void remove(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset" />
	<method signature="java.lang.Number getMedianValue(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset" />
	<method signature="double getRangeLowerBound(boolean)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset" />
	<method signature="java.lang.Number getValue(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset" />
	<method signature="java.lang.Number getMeanValue(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset" />
	<method signature="org.jfree.data.Range getRangeBounds(boolean)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset" />
	<method signature="java.lang.Comparable getColumnKey(int)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset" />
	<method signature="java.lang.Number getMinOutlier(int,int)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset" />
	<method signature="java.util.List getOutliers(int,int)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset" />
	<method signature="void removeColumn(int)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset" />
	<method signature="double getRangeUpperBound(boolean)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset" />
	<method signature="java.lang.Number getMinRegularValue(int,int)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset" />
	<method signature="java.lang.Comparable getRowKey(int)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset" />
	<method signature="java.lang.Number getMaxOutlier(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset" />
	<method signature="java.util.List getOutliers(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset" />
	<method signature="int getRowIndex(java.lang.Comparable)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset" />
	<method signature="java.lang.Number getQ3Value(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset" />
	<method signature="java.lang.Number getMaxRegularValue(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset" />
	<method signature="void removeColumn(java.lang.Comparable)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset" />
	<method signature="java.lang.Number getQ1Value(int,int)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset" />
	<method signature="int getColumnIndex(java.lang.Comparable)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset" />
	<class name="tourma.data.XMLExport" />
	<method signature="void setXMLElement(org.jdom2.Element)" class="tourma.data.XMLExport" />
	<method signature="org.jdom2.Element getXMLElement()" class="tourma.data.XMLExport" />
	<class name="com.google.zxing.client.result.AddressBookParsedResult" />
	<method signature="java.lang.String getInstantMessenger()" class="com.google.zxing.client.result.AddressBookParsedResult" />
	<method signature="java.lang.String getOrg()" class="com.google.zxing.client.result.AddressBookParsedResult" />
	<method signature="java.lang.String[] getNames()" class="com.google.zxing.client.result.AddressBookParsedResult" />
	<method signature="java.lang.String getBirthday()" class="com.google.zxing.client.result.AddressBookParsedResult" />
	<method signature="java.lang.String getNote()" class="com.google.zxing.client.result.AddressBookParsedResult" />
	<method signature="java.lang.String getPronunciation()" class="com.google.zxing.client.result.AddressBookParsedResult" />
	<method signature="java.lang.String[] getAddresses()" class="com.google.zxing.client.result.AddressBookParsedResult" />
	<method signature="java.lang.String[] getAddressTypes()" class="com.google.zxing.client.result.AddressBookParsedResult" />
	<method signature="void &lt;init&gt;(java.lang.String[],java.lang.String,java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String,java.lang.String,java.lang.String[],java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="com.google.zxing.client.result.AddressBookParsedResult" />
	<method signature="java.lang.String getTitle()" class="com.google.zxing.client.result.AddressBookParsedResult" />
	<method signature="java.lang.String getURL()" class="com.google.zxing.client.result.AddressBookParsedResult" />
	<method signature="java.lang.String getDisplayResult()" class="com.google.zxing.client.result.AddressBookParsedResult" />
	<method signature="java.lang.String[] getPhoneNumbers()" class="com.google.zxing.client.result.AddressBookParsedResult" />
	<method signature="java.lang.String[] getPhoneTypes()" class="com.google.zxing.client.result.AddressBookParsedResult" />
	<method signature="java.lang.String[] getEmails()" class="com.google.zxing.client.result.AddressBookParsedResult" />
	<method signature="java.lang.String[] getEmailTypes()" class="com.google.zxing.client.result.AddressBookParsedResult" />
	<class name="org.w3c.dom.css.CSSCharsetRule" />
	<method signature="java.lang.String getEncoding()" class="org.w3c.dom.css.CSSCharsetRule" />
	<method signature="void setEncoding(java.lang.String)" class="org.w3c.dom.css.CSSCharsetRule" />
	<class name="org.xml.sax.helpers.DefaultHandler" />
	<method signature="void warning(org.xml.sax.SAXParseException)" class="org.xml.sax.helpers.DefaultHandler" />
	<method signature="void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" class="org.xml.sax.helpers.DefaultHandler" />
	<method signature="void skippedEntity(java.lang.String)" class="org.xml.sax.helpers.DefaultHandler" />
	<method signature="void startPrefixMapping(java.lang.String,java.lang.String)" class="org.xml.sax.helpers.DefaultHandler" />
	<method signature="void notationDecl(java.lang.String,java.lang.String,java.lang.String)" class="org.xml.sax.helpers.DefaultHandler" />
	<method signature="void processingInstruction(java.lang.String,java.lang.String)" class="org.xml.sax.helpers.DefaultHandler" />
	<method signature="void unparsedEntityDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.xml.sax.helpers.DefaultHandler" />
	<method signature="org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)" class="org.xml.sax.helpers.DefaultHandler" />
	<method signature="void setDocumentLocator(org.xml.sax.Locator)" class="org.xml.sax.helpers.DefaultHandler" />
	<method signature="void endPrefixMapping(java.lang.String)" class="org.xml.sax.helpers.DefaultHandler" />
	<method signature="void endElement(java.lang.String,java.lang.String,java.lang.String)" class="org.xml.sax.helpers.DefaultHandler" />
	<method signature="void characters(char[],int,int)" class="org.xml.sax.helpers.DefaultHandler" />
	<method signature="void error(org.xml.sax.SAXParseException)" class="org.xml.sax.helpers.DefaultHandler" />
	<method signature="void &lt;init&gt;()" class="org.xml.sax.helpers.DefaultHandler" />
	<method signature="void startDocument()" class="org.xml.sax.helpers.DefaultHandler" />
	<method signature="void endDocument()" class="org.xml.sax.helpers.DefaultHandler" />
	<method signature="void ignorableWhitespace(char[],int,int)" class="org.xml.sax.helpers.DefaultHandler" />
	<method signature="void fatalError(org.xml.sax.SAXParseException)" class="org.xml.sax.helpers.DefaultHandler" />
	<class name="org.apache.commons.lang3.time.DateParser" />
	<method signature="java.util.Date parse(java.lang.String,java.text.ParsePosition)" class="org.apache.commons.lang3.time.DateParser" />
	<method signature="java.lang.Object parseObject(java.lang.String)" class="org.apache.commons.lang3.time.DateParser" />
	<method signature="java.util.Locale getLocale()" class="org.apache.commons.lang3.time.DateParser" />
	<method signature="java.util.TimeZone getTimeZone()" class="org.apache.commons.lang3.time.DateParser" />
	<method signature="java.lang.String getPattern()" class="org.apache.commons.lang3.time.DateParser" />
	<method signature="java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)" class="org.apache.commons.lang3.time.DateParser" />
	<method signature="java.util.Date parse(java.lang.String)" class="org.apache.commons.lang3.time.DateParser" />
	<class name="javax.annotation.PropertyKey" />
	<method signature="javax.annotation.meta.When when()" class="javax.annotation.PropertyKey" />
	<class name="org.apache.xerces.xni.parser.XMLDTDSource" />
	<method signature="org.apache.xerces.xni.XMLDTDHandler getDTDHandler()" class="org.apache.xerces.xni.parser.XMLDTDSource" />
	<method signature="void setDTDHandler(org.apache.xerces.xni.XMLDTDHandler)" class="org.apache.xerces.xni.parser.XMLDTDSource" />
	<class name="org.jfree.data.DefaultKeyedValue" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.DefaultKeyedValue" />
	<method signature="int hashCode()" class="org.jfree.data.DefaultKeyedValue" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.DefaultKeyedValue" />
	<method signature="java.lang.Number getValue()" class="org.jfree.data.DefaultKeyedValue" />
	<method signature="void &lt;init&gt;(java.lang.Comparable,java.lang.Number)" class="org.jfree.data.DefaultKeyedValue" />
	<method signature="java.lang.String toString()" class="org.jfree.data.DefaultKeyedValue" />
	<method signature="void setValue(java.lang.Number)" class="org.jfree.data.DefaultKeyedValue" />
	<method signature="java.lang.Comparable getKey()" class="org.jfree.data.DefaultKeyedValue" />
	<class name="org.apache.xerces.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher" />
	<method signature="boolean dispatch(boolean)" class="org.apache.xerces.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher" />
	<class name="org.jfree.chart.ChartRenderingInfo" />
	<method signature="java.awt.geom.Rectangle2D getChartArea()" class="org.jfree.chart.ChartRenderingInfo" />
	<method signature="org.jfree.chart.entity.EntityCollection getEntityCollection()" class="org.jfree.chart.ChartRenderingInfo" />
	<method signature="org.jfree.chart.plot.PlotRenderingInfo getPlotInfo()" class="org.jfree.chart.ChartRenderingInfo" />
	<method signature="void setChartArea(java.awt.geom.Rectangle2D)" class="org.jfree.chart.ChartRenderingInfo" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.ChartRenderingInfo" />
	<method signature="void setEntityCollection(org.jfree.chart.entity.EntityCollection)" class="org.jfree.chart.ChartRenderingInfo" />
	<method signature="void clear()" class="org.jfree.chart.ChartRenderingInfo" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.ChartRenderingInfo" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.ChartRenderingInfo" />
	<method signature="void &lt;init&gt;(org.jfree.chart.entity.EntityCollection)" class="org.jfree.chart.ChartRenderingInfo" />
	<class name="javax.xml.xpath.XPathFunctionResolver" />
	<method signature="javax.xml.xpath.XPathFunction resolveFunction(javax.xml.namespace.QName,int)" class="javax.xml.xpath.XPathFunctionResolver" />
	<class name="tourma.JdgTeam" />
	<method signature="java.util.List getImagesResources(java.lang.String)" class="tourma.JdgTeam" />
	<method signature="void &lt;init&gt;(java.awt.Frame,boolean,tourma.data.Team)" class="tourma.JdgTeam" />
	<method signature="void &lt;init&gt;(java.awt.Frame,boolean)" class="tourma.JdgTeam" />
	<class name="freemarker.core.Configurable" />
	<method signature="java.lang.String getURLEscapingCharset()" class="freemarker.core.Configurable" />
	<method signature="void setSetting(java.lang.String,java.lang.String)" class="freemarker.core.Configurable" />
	<method signature="java.util.Locale getLocale()" class="freemarker.core.Configurable" />
	<method signature="void setTimeFormat(java.lang.String)" class="freemarker.core.Configurable" />
	<method signature="void setURLEscapingCharset(java.lang.String)" class="freemarker.core.Configurable" />
	<method signature="void setTemplateExceptionHandler(freemarker.template.TemplateExceptionHandler)" class="freemarker.core.Configurable" />
	<method signature="java.lang.String getTimeFormat()" class="freemarker.core.Configurable" />
	<method signature="freemarker.template.TemplateExceptionHandler getTemplateExceptionHandler()" class="freemarker.core.Configurable" />
	<method signature="void setSettings(java.util.Properties)" class="freemarker.core.Configurable" />
	<method signature="void &lt;init&gt;()" class="freemarker.core.Configurable" />
	<method signature="java.util.Map getSettings()" class="freemarker.core.Configurable" />
	<method signature="void setNewBuiltinClassResolver(freemarker.core.TemplateClassResolver)" class="freemarker.core.Configurable" />
	<method signature="void setNumberFormat(java.lang.String)" class="freemarker.core.Configurable" />
	<method signature="boolean isClassicCompatible()" class="freemarker.core.Configurable" />
	<method signature="java.lang.String getBooleanFormat()" class="freemarker.core.Configurable" />
	<method signature="java.lang.Object getCustomAttribute(java.lang.String)" class="freemarker.core.Configurable" />
	<method signature="java.lang.String getDateFormat()" class="freemarker.core.Configurable" />
	<method signature="void setTimeZone(java.util.TimeZone)" class="freemarker.core.Configurable" />
	<method signature="freemarker.core.Configurable getParent()" class="freemarker.core.Configurable" />
	<method signature="void setClassicCompatible(boolean)" class="freemarker.core.Configurable" />
	<method signature="freemarker.core.ArithmeticEngine getArithmeticEngine()" class="freemarker.core.Configurable" />
	<method signature="void setSettings(java.io.InputStream)" class="freemarker.core.Configurable" />
	<method signature="void setArithmeticEngine(freemarker.core.ArithmeticEngine)" class="freemarker.core.Configurable" />
	<method signature="java.lang.String getSetting(java.lang.String)" class="freemarker.core.Configurable" />
	<method signature="void setLocale(java.util.Locale)" class="freemarker.core.Configurable" />
	<method signature="void setCustomAttribute(java.lang.String,java.lang.Object)" class="freemarker.core.Configurable" />
	<method signature="void setAutoFlush(boolean)" class="freemarker.core.Configurable" />
	<method signature="void setObjectWrapper(freemarker.template.ObjectWrapper)" class="freemarker.core.Configurable" />
	<method signature="void &lt;init&gt;(freemarker.core.Configurable)" class="freemarker.core.Configurable" />
	<method signature="java.util.TimeZone getTimeZone()" class="freemarker.core.Configurable" />
	<method signature="java.lang.String[] getCustomAttributeNames()" class="freemarker.core.Configurable" />
	<method signature="java.lang.String getDateTimeFormat()" class="freemarker.core.Configurable" />
	<method signature="void setDateTimeFormat(java.lang.String)" class="freemarker.core.Configurable" />
	<method signature="void setBooleanFormat(java.lang.String)" class="freemarker.core.Configurable" />
	<method signature="void setStrictBeanModels(boolean)" class="freemarker.core.Configurable" />
	<method signature="freemarker.core.TemplateClassResolver getNewBuiltinClassResolver()" class="freemarker.core.Configurable" />
	<method signature="boolean getAutoFlush()" class="freemarker.core.Configurable" />
	<method signature="java.lang.String getNumberFormat()" class="freemarker.core.Configurable" />
	<method signature="void setDateFormat(java.lang.String)" class="freemarker.core.Configurable" />
	<method signature="void setOutputEncoding(java.lang.String)" class="freemarker.core.Configurable" />
	<method signature="java.lang.String getOutputEncoding()" class="freemarker.core.Configurable" />
	<method signature="freemarker.template.ObjectWrapper getObjectWrapper()" class="freemarker.core.Configurable" />
	<method signature="void removeCustomAttribute(java.lang.String)" class="freemarker.core.Configurable" />
	<class name="org.w3c.dom.events.EventTarget" />
	<method signature="void addEventListener(java.lang.String,org.w3c.dom.events.EventListener,boolean)" class="org.w3c.dom.events.EventTarget" />
	<method signature="void removeEventListener(java.lang.String,org.w3c.dom.events.EventListener,boolean)" class="org.w3c.dom.events.EventTarget" />
	<method signature="boolean dispatchEvent(org.w3c.dom.events.Event)" class="org.w3c.dom.events.EventTarget" />
	<class name="org.apache.xerces.impl.dtd.XMLAttributeDecl" />
	<method signature="void setValues(org.apache.xerces.xni.QName,org.apache.xerces.impl.dtd.XMLSimpleType,boolean)" class="org.apache.xerces.impl.dtd.XMLAttributeDecl" />
	<method signature="void clear()" class="org.apache.xerces.impl.dtd.XMLAttributeDecl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dtd.XMLAttributeDecl" />
	<class name="org.apache.xerces.dom.DocumentImpl" />
	<method signature="org.w3c.dom.traversal.NodeIterator createNodeIterator(org.w3c.dom.Node,short,org.w3c.dom.traversal.NodeFilter)" class="org.apache.xerces.dom.DocumentImpl" />
	<method signature="org.w3c.dom.traversal.NodeIterator createNodeIterator(org.w3c.dom.Node,int,org.w3c.dom.traversal.NodeFilter,boolean)" class="org.apache.xerces.dom.DocumentImpl" />
	<method signature="void &lt;init&gt;(org.w3c.dom.DocumentType,boolean)" class="org.apache.xerces.dom.DocumentImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.dom.DocumentImpl" />
	<method signature="org.w3c.dom.events.Event createEvent(java.lang.String)" class="org.apache.xerces.dom.DocumentImpl" />
	<method signature="void &lt;init&gt;(org.w3c.dom.DocumentType)" class="org.apache.xerces.dom.DocumentImpl" />
	<method signature="org.w3c.dom.Node cloneNode(boolean)" class="org.apache.xerces.dom.DocumentImpl" />
	<method signature="org.w3c.dom.DOMImplementation getImplementation()" class="org.apache.xerces.dom.DocumentImpl" />
	<method signature="org.w3c.dom.traversal.TreeWalker createTreeWalker(org.w3c.dom.Node,short,org.w3c.dom.traversal.NodeFilter)" class="org.apache.xerces.dom.DocumentImpl" />
	<method signature="org.w3c.dom.traversal.TreeWalker createTreeWalker(org.w3c.dom.Node,int,org.w3c.dom.traversal.NodeFilter,boolean)" class="org.apache.xerces.dom.DocumentImpl" />
	<method signature="void &lt;init&gt;(boolean)" class="org.apache.xerces.dom.DocumentImpl" />
	<method signature="org.w3c.dom.ranges.Range createRange()" class="org.apache.xerces.dom.DocumentImpl" />
	<class name="org.jfree.chart.plot.CombinedDomainCategoryPlot" />
	<method signature="void remove(org.jfree.chart.plot.CategoryPlot)" class="org.jfree.chart.plot.CombinedDomainCategoryPlot" />
	<method signature="org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)" class="org.jfree.chart.plot.CombinedDomainCategoryPlot" />
	<method signature="java.util.List getCategories()" class="org.jfree.chart.plot.CombinedDomainCategoryPlot" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.plot.CombinedDomainCategoryPlot" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.plot.CombinedDomainCategoryPlot" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.plot.CombinedDomainCategoryPlot" />
	<method signature="org.jfree.chart.plot.CategoryPlot findSubplot(org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" class="org.jfree.chart.plot.CombinedDomainCategoryPlot" />
	<method signature="double getGap()" class="org.jfree.chart.plot.CombinedDomainCategoryPlot" />
	<method signature="void add(org.jfree.chart.plot.CategoryPlot,int)" class="org.jfree.chart.plot.CombinedDomainCategoryPlot" />
	<method signature="void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.plot.CombinedDomainCategoryPlot" />
	<method signature="void plotChanged(org.jfree.chart.event.PlotChangeEvent)" class="org.jfree.chart.plot.CombinedDomainCategoryPlot" />
	<method signature="void &lt;init&gt;(org.jfree.chart.axis.CategoryAxis)" class="org.jfree.chart.plot.CombinedDomainCategoryPlot" />
	<method signature="void zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" class="org.jfree.chart.plot.CombinedDomainCategoryPlot" />
	<method signature="void zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)" class="org.jfree.chart.plot.CombinedDomainCategoryPlot" />
	<method signature="java.util.List getSubplots()" class="org.jfree.chart.plot.CombinedDomainCategoryPlot" />
	<method signature="java.util.List getCategoriesForAxis(org.jfree.chart.axis.CategoryAxis)" class="org.jfree.chart.plot.CombinedDomainCategoryPlot" />
	<method signature="void add(org.jfree.chart.plot.CategoryPlot)" class="org.jfree.chart.plot.CombinedDomainCategoryPlot" />
	<method signature="void setGap(double)" class="org.jfree.chart.plot.CombinedDomainCategoryPlot" />
	<method signature="void zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" class="org.jfree.chart.plot.CombinedDomainCategoryPlot" />
	<method signature="void setOrientation(org.jfree.chart.plot.PlotOrientation)" class="org.jfree.chart.plot.CombinedDomainCategoryPlot" />
	<method signature="void handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.plot.CombinedDomainCategoryPlot" />
	<method signature="org.jfree.chart.LegendItemCollection getLegendItems()" class="org.jfree.chart.plot.CombinedDomainCategoryPlot" />
	<class name="org.apache.wml.dom.WMLCardElementImpl" />
	<method signature="java.lang.String getXmlLang()" class="org.apache.wml.dom.WMLCardElementImpl" />
	<method signature="java.lang.String getOnEnterBackward()" class="org.apache.wml.dom.WMLCardElementImpl" />
	<method signature="void setNewContext(boolean)" class="org.apache.wml.dom.WMLCardElementImpl" />
	<method signature="java.lang.String getId()" class="org.apache.wml.dom.WMLCardElementImpl" />
	<method signature="void setOnTimer(java.lang.String)" class="org.apache.wml.dom.WMLCardElementImpl" />
	<method signature="void setOnEnterForward(java.lang.String)" class="org.apache.wml.dom.WMLCardElementImpl" />
	<method signature="void setId(java.lang.String)" class="org.apache.wml.dom.WMLCardElementImpl" />
	<method signature="boolean getOrdered()" class="org.apache.wml.dom.WMLCardElementImpl" />
	<method signature="java.lang.String getTitle()" class="org.apache.wml.dom.WMLCardElementImpl" />
	<method signature="boolean getNewContext()" class="org.apache.wml.dom.WMLCardElementImpl" />
	<method signature="java.lang.String getOnTimer()" class="org.apache.wml.dom.WMLCardElementImpl" />
	<method signature="void setXmlLang(java.lang.String)" class="org.apache.wml.dom.WMLCardElementImpl" />
	<method signature="void setOrdered(boolean)" class="org.apache.wml.dom.WMLCardElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.wml.dom.WMLDocumentImpl,java.lang.String)" class="org.apache.wml.dom.WMLCardElementImpl" />
	<method signature="java.lang.String getClassName()" class="org.apache.wml.dom.WMLCardElementImpl" />
	<method signature="void setOnEnterBackward(java.lang.String)" class="org.apache.wml.dom.WMLCardElementImpl" />
	<method signature="void setClassName(java.lang.String)" class="org.apache.wml.dom.WMLCardElementImpl" />
	<method signature="java.lang.String getOnEnterForward()" class="org.apache.wml.dom.WMLCardElementImpl" />
	<method signature="void setTitle(java.lang.String)" class="org.apache.wml.dom.WMLCardElementImpl" />
	<class name="org.jfree.chart.renderer.NotOutlierException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.chart.renderer.NotOutlierException" />
	<class name="com.google.zxing.maxicode.MaxiCodeReader" />
	<method signature="com.google.zxing.Result decode(com.google.zxing.BinaryBitmap)" class="com.google.zxing.maxicode.MaxiCodeReader" />
	<method signature="void reset()" class="com.google.zxing.maxicode.MaxiCodeReader" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.maxicode.MaxiCodeReader" />
	<method signature="com.google.zxing.Result decode(com.google.zxing.BinaryBitmap,java.util.Map)" class="com.google.zxing.maxicode.MaxiCodeReader" />
	<class name="org.w3c.dom.events.EventListener" />
	<method signature="void handleEvent(org.w3c.dom.events.Event)" class="org.w3c.dom.events.EventListener" />
	<class name="org.jfree.ui.about.Licences" />
	<method signature="void &lt;init&gt;()" class="org.jfree.ui.about.Licences" />
	<method signature="java.lang.String getGPL()" class="org.jfree.ui.about.Licences" />
	<method signature="org.jfree.ui.about.Licences getInstance()" class="org.jfree.ui.about.Licences" />
	<method signature="java.lang.String getLGPL()" class="org.jfree.ui.about.Licences" />
	<class name="org.jfree.ui.WizardDialog" />
	<method signature="void finish()" class="org.jfree.ui.WizardDialog" />
	<method signature="void &lt;init&gt;(javax.swing.JDialog,boolean,java.lang.String,org.jfree.ui.WizardPanel)" class="org.jfree.ui.WizardDialog" />
	<method signature="boolean canDoPreviousPanel()" class="org.jfree.ui.WizardDialog" />
	<method signature="void &lt;init&gt;(javax.swing.JFrame,boolean,java.lang.String,org.jfree.ui.WizardPanel)" class="org.jfree.ui.WizardDialog" />
	<method signature="boolean canDoNextPanel()" class="org.jfree.ui.WizardDialog" />
	<method signature="org.jfree.ui.WizardPanel getWizardPanel(int)" class="org.jfree.ui.WizardDialog" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="org.jfree.ui.WizardDialog" />
	<method signature="javax.swing.JPanel createContent()" class="org.jfree.ui.WizardDialog" />
	<method signature="int getStepCount()" class="org.jfree.ui.WizardDialog" />
	<method signature="void next()" class="org.jfree.ui.WizardDialog" />
	<method signature="boolean canFinish()" class="org.jfree.ui.WizardDialog" />
	<method signature="void previous()" class="org.jfree.ui.WizardDialog" />
	<method signature="boolean isCancelled()" class="org.jfree.ui.WizardDialog" />
	<method signature="java.lang.Object getResult()" class="org.jfree.ui.WizardDialog" />
	<class name="tourma.data.Round" />
	<method signature="void setCupMaxTour(int)" class="tourma.data.Round" />
	<method signature="java.util.Date getHour()" class="tourma.data.Round" />
	<method signature="void removeMatch(int)" class="tourma.data.Round" />
	<method signature="void shuffleMatchs()" class="tourma.data.Round" />
	<method signature="void setCup(boolean)" class="tourma.data.Round" />
	<method signature="void setXMLElement(org.jdom2.Element)" class="tourma.data.Round" />
	<method signature="void setCurrentHour()" class="tourma.data.Round" />
	<method signature="int indexOf(tourma.data.Match)" class="tourma.data.Round" />
	<method signature="boolean containsMatch(tourma.data.Match)" class="tourma.data.Round" />
	<method signature="boolean equals(java.lang.Object)" class="tourma.data.Round" />
	<method signature="int getMatchsCount()" class="tourma.data.Round" />
	<method signature="java.util.ArrayList getCoachMatchs()" class="tourma.data.Round" />
	<method signature="void &lt;init&gt;()" class="tourma.data.Round" />
	<method signature="void addMatch(tourma.data.Match)" class="tourma.data.Round" />
	<method signature="tourma.data.Match getMatch(int)" class="tourma.data.Round" />
	<method signature="void setXMLElementForDisplay(org.jdom2.Element)" class="tourma.data.Round" />
	<method signature="double getMinBonus()" class="tourma.data.Round" />
	<method signature="void setLooserCup(boolean)" class="tourma.data.Round" />
	<method signature="void setMaxBonus(double)" class="tourma.data.Round" />
	<method signature="void setCupTour(int)" class="tourma.data.Round" />
	<method signature="double getCoef(tourma.data.Match)" class="tourma.data.Round" />
	<method signature="boolean containsCoachMatch(tourma.data.CoachMatch)" class="tourma.data.Round" />
	<method signature="org.jdom2.Element getXMLElementForDisplay()" class="tourma.data.Round" />
	<method signature="org.jdom2.Element getXMLElement()" class="tourma.data.Round" />
	<method signature="boolean isLooserCup()" class="tourma.data.Round" />
	<method signature="double getMaxBonus()" class="tourma.data.Round" />
	<method signature="void removeMatch(tourma.data.Match)" class="tourma.data.Round" />
	<method signature="boolean isCup()" class="tourma.data.Round" />
	<method signature="void clearMatchs()" class="tourma.data.Round" />
	<method signature="java.lang.String toString()" class="tourma.data.Round" />
	<method signature="int getCupMaxTour()" class="tourma.data.Round" />
	<method signature="void setHour(java.lang.String)" class="tourma.data.Round" />
	<method signature="int getCupTour()" class="tourma.data.Round" />
	<method signature="void setMinBonus(double)" class="tourma.data.Round" />
	<class name="org.apache.xerces.dom.DocumentTypeImpl" />
	<method signature="java.lang.String getSystemId()" class="org.apache.xerces.dom.DocumentTypeImpl" />
	<method signature="short getNodeType()" class="org.apache.xerces.dom.DocumentTypeImpl" />
	<method signature="java.lang.String getName()" class="org.apache.xerces.dom.DocumentTypeImpl" />
	<method signature="org.w3c.dom.Node cloneNode(boolean)" class="org.apache.xerces.dom.DocumentTypeImpl" />
	<method signature="java.lang.Object getUserData(java.lang.String)" class="org.apache.xerces.dom.DocumentTypeImpl" />
	<method signature="java.lang.String getNodeName()" class="org.apache.xerces.dom.DocumentTypeImpl" />
	<method signature="java.lang.String getTextContent()" class="org.apache.xerces.dom.DocumentTypeImpl" />
	<method signature="void setReadOnly(boolean,boolean)" class="org.apache.xerces.dom.DocumentTypeImpl" />
	<method signature="void setInternalSubset(java.lang.String)" class="org.apache.xerces.dom.DocumentTypeImpl" />
	<method signature="java.lang.String getPublicId()" class="org.apache.xerces.dom.DocumentTypeImpl" />
	<method signature="java.lang.String getInternalSubset()" class="org.apache.xerces.dom.DocumentTypeImpl" />
	<method signature="boolean isEqualNode(org.w3c.dom.Node)" class="org.apache.xerces.dom.DocumentTypeImpl" />
	<method signature="org.w3c.dom.NamedNodeMap getElements()" class="org.apache.xerces.dom.DocumentTypeImpl" />
	<method signature="void &lt;init&gt;(org.apache.xerces.dom.CoreDocumentImpl,java.lang.String)" class="org.apache.xerces.dom.DocumentTypeImpl" />
	<method signature="java.lang.Object setUserData(java.lang.String,java.lang.Object,org.w3c.dom.UserDataHandler)" class="org.apache.xerces.dom.DocumentTypeImpl" />
	<method signature="org.w3c.dom.NamedNodeMap getEntities()" class="org.apache.xerces.dom.DocumentTypeImpl" />
	<method signature="void &lt;init&gt;(org.apache.xerces.dom.CoreDocumentImpl,java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.dom.DocumentTypeImpl" />
	<method signature="org.w3c.dom.NamedNodeMap getNotations()" class="org.apache.xerces.dom.DocumentTypeImpl" />
	<method signature="void setTextContent(java.lang.String)" class="org.apache.xerces.dom.DocumentTypeImpl" />
	<class name="org.apache.xerces.impl.xs.SchemaGrammar$BuiltinSchemaGrammar" />
	<method signature="void addGlobalAttributeGroupDecl(org.apache.xerces.impl.xs.XSAttributeGroupDecl,java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar$BuiltinSchemaGrammar" />
	<method signature="void addGlobalTypeDecl(org.apache.xerces.xs.XSTypeDefinition,java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar$BuiltinSchemaGrammar" />
	<method signature="void addGlobalSimpleTypeDecl(org.apache.xerces.impl.dv.XSSimpleType)" class="org.apache.xerces.impl.xs.SchemaGrammar$BuiltinSchemaGrammar" />
	<method signature="void addGlobalSimpleTypeDecl(org.apache.xerces.impl.dv.XSSimpleType,java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar$BuiltinSchemaGrammar" />
	<method signature="void addDocument(java.lang.Object,java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar$BuiltinSchemaGrammar" />
	<method signature="void &lt;init&gt;(int,short)" class="org.apache.xerces.impl.xs.SchemaGrammar$BuiltinSchemaGrammar" />
	<method signature="void addGlobalElementDeclAll(org.apache.xerces.impl.xs.XSElementDecl)" class="org.apache.xerces.impl.xs.SchemaGrammar$BuiltinSchemaGrammar" />
	<method signature="void addGlobalElementDecl(org.apache.xerces.impl.xs.XSElementDecl,java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar$BuiltinSchemaGrammar" />
	<method signature="void addGlobalNotationDecl(org.apache.xerces.impl.xs.XSNotationDecl,java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar$BuiltinSchemaGrammar" />
	<method signature="void addGlobalAttributeDecl(org.apache.xerces.impl.xs.XSAttributeDecl)" class="org.apache.xerces.impl.xs.SchemaGrammar$BuiltinSchemaGrammar" />
	<method signature="void addGlobalGroupDecl(org.apache.xerces.impl.xs.XSGroupDecl)" class="org.apache.xerces.impl.xs.SchemaGrammar$BuiltinSchemaGrammar" />
	<method signature="void addRedefinedGroupDecl(org.apache.xerces.impl.xs.XSGroupDecl,org.apache.xerces.impl.xs.XSGroupDecl,org.apache.xerces.impl.xs.util.SimpleLocator)" class="org.apache.xerces.impl.xs.SchemaGrammar$BuiltinSchemaGrammar" />
	<method signature="void addGlobalComplexTypeDecl(org.apache.xerces.impl.xs.XSComplexTypeDecl)" class="org.apache.xerces.impl.xs.SchemaGrammar$BuiltinSchemaGrammar" />
	<method signature="void addGlobalTypeDecl(org.apache.xerces.xs.XSTypeDefinition)" class="org.apache.xerces.impl.xs.SchemaGrammar$BuiltinSchemaGrammar" />
	<method signature="void addGlobalGroupDecl(org.apache.xerces.impl.xs.XSGroupDecl,java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar$BuiltinSchemaGrammar" />
	<method signature="void addGlobalAttributeDecl(org.apache.xerces.impl.xs.XSAttributeDecl,java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar$BuiltinSchemaGrammar" />
	<method signature="void addGlobalComplexTypeDecl(org.apache.xerces.impl.xs.XSComplexTypeDecl,java.lang.String)" class="org.apache.xerces.impl.xs.SchemaGrammar$BuiltinSchemaGrammar" />
	<method signature="void addGlobalNotationDecl(org.apache.xerces.impl.xs.XSNotationDecl)" class="org.apache.xerces.impl.xs.SchemaGrammar$BuiltinSchemaGrammar" />
	<method signature="void addGlobalAttributeGroupDecl(org.apache.xerces.impl.xs.XSAttributeGroupDecl)" class="org.apache.xerces.impl.xs.SchemaGrammar$BuiltinSchemaGrammar" />
	<method signature="org.apache.xerces.xni.grammars.XMLGrammarDescription getGrammarDescription()" class="org.apache.xerces.impl.xs.SchemaGrammar$BuiltinSchemaGrammar" />
	<method signature="void addComplexTypeDecl(org.apache.xerces.impl.xs.XSComplexTypeDecl,org.apache.xerces.impl.xs.util.SimpleLocator)" class="org.apache.xerces.impl.xs.SchemaGrammar$BuiltinSchemaGrammar" />
	<method signature="void setImportedGrammars(java.util.Vector)" class="org.apache.xerces.impl.xs.SchemaGrammar$BuiltinSchemaGrammar" />
	<method signature="void addGlobalElementDecl(org.apache.xerces.impl.xs.XSElementDecl)" class="org.apache.xerces.impl.xs.SchemaGrammar$BuiltinSchemaGrammar" />
	<class name="tourma.data.Value" />
	<method signature="void &lt;init&gt;(tourma.data.Criteria)" class="tourma.data.Value" />
	<method signature="void setCriteria(tourma.data.Criteria)" class="tourma.data.Value" />
	<method signature="void setValue2(int)" class="tourma.data.Value" />
	<method signature="void setValue1(int)" class="tourma.data.Value" />
	<method signature="int getValue1()" class="tourma.data.Value" />
	<method signature="tourma.data.Criteria getCriteria()" class="tourma.data.Value" />
	<method signature="int getValue2()" class="tourma.data.Value" />
	<class name="org.apache.xerces.dom.events.MutationEventImpl" />
	<method signature="java.lang.String getPrevValue()" class="org.apache.xerces.dom.events.MutationEventImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.dom.events.MutationEventImpl" />
	<method signature="void initMutationEvent(java.lang.String,boolean,boolean,org.w3c.dom.Node,java.lang.String,java.lang.String,java.lang.String,short)" class="org.apache.xerces.dom.events.MutationEventImpl" />
	<method signature="java.lang.String getAttrName()" class="org.apache.xerces.dom.events.MutationEventImpl" />
	<method signature="org.w3c.dom.Node getRelatedNode()" class="org.apache.xerces.dom.events.MutationEventImpl" />
	<method signature="java.lang.String getNewValue()" class="org.apache.xerces.dom.events.MutationEventImpl" />
	<method signature="short getAttrChange()" class="org.apache.xerces.dom.events.MutationEventImpl" />
	<class name="org.jfree.base.modules.ModuleInitializeException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Exception)" class="org.jfree.base.modules.ModuleInitializeException" />
	<method signature="void &lt;init&gt;()" class="org.jfree.base.modules.ModuleInitializeException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.base.modules.ModuleInitializeException" />
	<class name="org.jfree.chart.ChartPanel" />
	<method signature="double getScaleX()" class="org.jfree.chart.ChartPanel" />
	<method signature="double getScaleY()" class="org.jfree.chart.ChartPanel" />
	<method signature="java.awt.geom.Rectangle2D getScreenDataArea(int,int)" class="org.jfree.chart.ChartPanel" />
	<method signature="int getDismissDelay()" class="org.jfree.chart.ChartPanel" />
	<method signature="void restoreAutoDomainBounds()" class="org.jfree.chart.ChartPanel" />
	<method signature="void setDismissDelay(int)" class="org.jfree.chart.ChartPanel" />
	<method signature="void setDomainZoomable(boolean)" class="org.jfree.chart.ChartPanel" />
	<method signature="int getZoomTriggerDistance()" class="org.jfree.chart.ChartPanel" />
	<method signature="void setPopupMenu(javax.swing.JPopupMenu)" class="org.jfree.chart.ChartPanel" />
	<method signature="java.awt.geom.Point2D getAnchor()" class="org.jfree.chart.ChartPanel" />
	<method signature="java.awt.geom.Rectangle2D getScreenDataArea()" class="org.jfree.chart.ChartPanel" />
	<method signature="void setFillZoomRectangle(boolean)" class="org.jfree.chart.ChartPanel" />
	<method signature="void setMouseWheelEnabled(boolean)" class="org.jfree.chart.ChartPanel" />
	<method signature="void overlayChanged(org.jfree.chart.event.OverlayChangeEvent)" class="org.jfree.chart.ChartPanel" />
	<method signature="void setRefreshBuffer(boolean)" class="org.jfree.chart.ChartPanel" />
	<method signature="void doEditChartProperties()" class="org.jfree.chart.ChartPanel" />
	<method signature="void chartChanged(org.jfree.chart.event.ChartChangeEvent)" class="org.jfree.chart.ChartPanel" />
	<method signature="boolean getZoomAroundAnchor()" class="org.jfree.chart.ChartPanel" />
	<method signature="org.jfree.chart.ChartRenderingInfo getChartRenderingInfo()" class="org.jfree.chart.ChartPanel" />
	<method signature="java.io.File getDefaultDirectoryForSaveAs()" class="org.jfree.chart.ChartPanel" />
	<method signature="boolean getHorizontalAxisTrace()" class="org.jfree.chart.ChartPanel" />
	<method signature="void setZoomFillPaint(java.awt.Paint)" class="org.jfree.chart.ChartPanel" />
	<method signature="void &lt;init&gt;(org.jfree.chart.JFreeChart,boolean,boolean,boolean,boolean,boolean)" class="org.jfree.chart.ChartPanel" />
	<method signature="void &lt;init&gt;(org.jfree.chart.JFreeChart)" class="org.jfree.chart.ChartPanel" />
	<method signature="void zoomInBoth(double,double)" class="org.jfree.chart.ChartPanel" />
	<method signature="void setChart(org.jfree.chart.JFreeChart)" class="org.jfree.chart.ChartPanel" />
	<method signature="void mouseClicked(java.awt.event.MouseEvent)" class="org.jfree.chart.ChartPanel" />
	<method signature="java.awt.geom.Point2D translateScreenToJava2D(java.awt.Point)" class="org.jfree.chart.ChartPanel" />
	<method signature="int getMaximumDrawHeight()" class="org.jfree.chart.ChartPanel" />
	<method signature="double getZoomInFactor()" class="org.jfree.chart.ChartPanel" />
	<method signature="java.awt.geom.Rectangle2D scale(java.awt.geom.Rectangle2D)" class="org.jfree.chart.ChartPanel" />
	<method signature="void zoomOutDomain(double,double)" class="org.jfree.chart.ChartPanel" />
	<method signature="void &lt;init&gt;(org.jfree.chart.JFreeChart,int,int,int,int,int,int,boolean,boolean,boolean,boolean,boolean,boolean)" class="org.jfree.chart.ChartPanel" />
	<method signature="void removeOverlay(org.jfree.chart.panel.Overlay)" class="org.jfree.chart.ChartPanel" />
	<method signature="int getMaximumDrawWidth()" class="org.jfree.chart.ChartPanel" />
	<method signature="void setMouseZoomable(boolean,boolean)" class="org.jfree.chart.ChartPanel" />
	<method signature="void &lt;init&gt;(org.jfree.chart.JFreeChart,int,int,int,int,int,int,boolean,boolean,boolean,boolean,boolean,boolean,boolean)" class="org.jfree.chart.ChartPanel" />
	<method signature="boolean isDomainZoomable()" class="org.jfree.chart.ChartPanel" />
	<method signature="java.awt.Point translateJava2DToScreen(java.awt.geom.Point2D)" class="org.jfree.chart.ChartPanel" />
	<method signature="boolean getRefreshBuffer()" class="org.jfree.chart.ChartPanel" />
	<method signature="void setInitialDelay(int)" class="org.jfree.chart.ChartPanel" />
	<method signature="java.lang.String getToolTipText(java.awt.event.MouseEvent)" class="org.jfree.chart.ChartPanel" />
	<method signature="void updateUI()" class="org.jfree.chart.ChartPanel" />
	<method signature="void zoomOutRange(double,double)" class="org.jfree.chart.ChartPanel" />
	<method signature="void zoom(java.awt.geom.Rectangle2D)" class="org.jfree.chart.ChartPanel" />
	<method signature="int getMinimumDrawWidth()" class="org.jfree.chart.ChartPanel" />
	<method signature="void setZoomAroundAnchor(boolean)" class="org.jfree.chart.ChartPanel" />
	<method signature="void zoomInRange(double,double)" class="org.jfree.chart.ChartPanel" />
	<method signature="int getReshowDelay()" class="org.jfree.chart.ChartPanel" />
	<method signature="boolean getFillZoomRectangle()" class="org.jfree.chart.ChartPanel" />
	<method signature="void setRangeZoomable(boolean)" class="org.jfree.chart.ChartPanel" />
	<method signature="java.awt.Paint getZoomOutlinePaint()" class="org.jfree.chart.ChartPanel" />
	<method signature="java.awt.Paint getZoomFillPaint()" class="org.jfree.chart.ChartPanel" />
	<method signature="void mousePressed(java.awt.event.MouseEvent)" class="org.jfree.chart.ChartPanel" />
	<method signature="void setZoomTriggerDistance(int)" class="org.jfree.chart.ChartPanel" />
	<method signature="org.jfree.chart.JFreeChart getChart()" class="org.jfree.chart.ChartPanel" />
	<method signature="void setDefaultDirectoryForSaveAs(java.io.File)" class="org.jfree.chart.ChartPanel" />
	<method signature="void addOverlay(org.jfree.chart.panel.Overlay)" class="org.jfree.chart.ChartPanel" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="org.jfree.chart.ChartPanel" />
	<method signature="java.util.EventListener[] getListeners(java.lang.Class)" class="org.jfree.chart.ChartPanel" />
	<method signature="void setMinimumDrawHeight(int)" class="org.jfree.chart.ChartPanel" />
	<method signature="void setHorizontalAxisTrace(boolean)" class="org.jfree.chart.ChartPanel" />
	<method signature="int print(java.awt.Graphics,java.awt.print.PageFormat,int)" class="org.jfree.chart.ChartPanel" />
	<method signature="void restoreAutoRangeBounds()" class="org.jfree.chart.ChartPanel" />
	<method signature="void setVerticalAxisTrace(boolean)" class="org.jfree.chart.ChartPanel" />
	<method signature="void mouseReleased(java.awt.event.MouseEvent)" class="org.jfree.chart.ChartPanel" />
	<method signature="void setZoomOutFactor(double)" class="org.jfree.chart.ChartPanel" />
	<method signature="void zoomInDomain(double,double)" class="org.jfree.chart.ChartPanel" />
	<method signature="void mouseEntered(java.awt.event.MouseEvent)" class="org.jfree.chart.ChartPanel" />
	<method signature="int getInitialDelay()" class="org.jfree.chart.ChartPanel" />
	<method signature="org.jfree.chart.entity.ChartEntity getEntityForPoint(int,int)" class="org.jfree.chart.ChartPanel" />
	<method signature="void createChartPrintJob()" class="org.jfree.chart.ChartPanel" />
	<method signature="void mouseExited(java.awt.event.MouseEvent)" class="org.jfree.chart.ChartPanel" />
	<method signature="void doSaveAs()" class="org.jfree.chart.ChartPanel" />
	<method signature="void setDisplayToolTips(boolean)" class="org.jfree.chart.ChartPanel" />
	<method signature="void setZoomOutlinePaint(java.awt.Paint)" class="org.jfree.chart.ChartPanel" />
	<method signature="void setMaximumDrawWidth(int)" class="org.jfree.chart.ChartPanel" />
	<method signature="void setMinimumDrawWidth(int)" class="org.jfree.chart.ChartPanel" />
	<method signature="int getMinimumDrawHeight()" class="org.jfree.chart.ChartPanel" />
	<method signature="void setZoomInFactor(double)" class="org.jfree.chart.ChartPanel" />
	<method signature="void setMouseZoomable(boolean)" class="org.jfree.chart.ChartPanel" />
	<method signature="void zoomOutBoth(double,double)" class="org.jfree.chart.ChartPanel" />
	<method signature="double getZoomOutFactor()" class="org.jfree.chart.ChartPanel" />
	<method signature="void removeChartMouseListener(org.jfree.chart.ChartMouseListener)" class="org.jfree.chart.ChartPanel" />
	<method signature="void addChartMouseListener(org.jfree.chart.ChartMouseListener)" class="org.jfree.chart.ChartPanel" />
	<method signature="boolean getVerticalAxisTrace()" class="org.jfree.chart.ChartPanel" />
	<method signature="void setMaximumDrawHeight(int)" class="org.jfree.chart.ChartPanel" />
	<method signature="void restoreAutoBounds()" class="org.jfree.chart.ChartPanel" />
	<method signature="javax.swing.JPopupMenu getPopupMenu()" class="org.jfree.chart.ChartPanel" />
	<method signature="boolean isEnforceFileExtensions()" class="org.jfree.chart.ChartPanel" />
	<method signature="void setEnforceFileExtensions(boolean)" class="org.jfree.chart.ChartPanel" />
	<method signature="void mouseMoved(java.awt.event.MouseEvent)" class="org.jfree.chart.ChartPanel" />
	<method signature="void paintComponent(java.awt.Graphics)" class="org.jfree.chart.ChartPanel" />
	<method signature="boolean isRangeZoomable()" class="org.jfree.chart.ChartPanel" />
	<method signature="void chartProgress(org.jfree.chart.event.ChartProgressEvent)" class="org.jfree.chart.ChartPanel" />
	<method signature="void mouseDragged(java.awt.event.MouseEvent)" class="org.jfree.chart.ChartPanel" />
	<method signature="void setReshowDelay(int)" class="org.jfree.chart.ChartPanel" />
	<method signature="boolean isMouseWheelEnabled()" class="org.jfree.chart.ChartPanel" />
	<method signature="void doCopy()" class="org.jfree.chart.ChartPanel" />
	<method signature="void &lt;init&gt;(org.jfree.chart.JFreeChart,boolean)" class="org.jfree.chart.ChartPanel" />
	<class name="com.google.zxing.datamatrix.decoder.Version" />
	<method signature="int getVersionNumber()" class="com.google.zxing.datamatrix.decoder.Version" />
	<method signature="int getDataRegionSizeRows()" class="com.google.zxing.datamatrix.decoder.Version" />
	<method signature="int getTotalCodewords()" class="com.google.zxing.datamatrix.decoder.Version" />
	<method signature="java.lang.String toString()" class="com.google.zxing.datamatrix.decoder.Version" />
	<method signature="int getDataRegionSizeColumns()" class="com.google.zxing.datamatrix.decoder.Version" />
	<method signature="com.google.zxing.datamatrix.decoder.Version getVersionForDimensions(int,int)" class="com.google.zxing.datamatrix.decoder.Version" />
	<method signature="int getSymbolSizeColumns()" class="com.google.zxing.datamatrix.decoder.Version" />
	<method signature="int getSymbolSizeRows()" class="com.google.zxing.datamatrix.decoder.Version" />
	<class name="freemarker.core.TemplateElement" />
	<method signature="java.util.Enumeration children()" class="freemarker.core.TemplateElement" />
	<method signature="int getChildCount()" class="freemarker.core.TemplateElement" />
	<method signature="boolean getAllowsChildren()" class="freemarker.core.TemplateElement" />
	<method signature="java.lang.String getDescription()" class="freemarker.core.TemplateElement" />
	<method signature="javax.swing.tree.TreeNode getChildAt(int)" class="freemarker.core.TemplateElement" />
	<method signature="void &lt;init&gt;()" class="freemarker.core.TemplateElement" />
	<method signature="java.lang.String getNodeNamespace()" class="freemarker.core.TemplateElement" />
	<method signature="java.lang.String getNodeType()" class="freemarker.core.TemplateElement" />
	<method signature="void setChildAt(int,freemarker.core.TemplateElement)" class="freemarker.core.TemplateElement" />
	<method signature="javax.swing.tree.TreeNode getParent()" class="freemarker.core.TemplateElement" />
	<method signature="freemarker.template.TemplateSequenceModel getChildNodes()" class="freemarker.core.TemplateElement" />
	<method signature="int getIndex(javax.swing.tree.TreeNode)" class="freemarker.core.TemplateElement" />
	<method signature="java.lang.String getNodeName()" class="freemarker.core.TemplateElement" />
	<method signature="freemarker.template.TemplateNodeModel getParentNode()" class="freemarker.core.TemplateElement" />
	<method signature="boolean isLeaf()" class="freemarker.core.TemplateElement" />
	<class name="com.bric.swing.ColorPicker" />
	<method signature="void setOpacity(float)" class="com.bric.swing.ColorPicker" />
	<method signature="float[] getHSB()" class="com.bric.swing.ColorPicker" />
	<method signature="void setModeControlsVisible(boolean)" class="com.bric.swing.ColorPicker" />
	<method signature="void setExpertControlsVisible(boolean)" class="com.bric.swing.ColorPicker" />
	<method signature="void setHSBControlsVisible(boolean)" class="com.bric.swing.ColorPicker" />
	<method signature="java.awt.Color showDialog(java.awt.Window,java.awt.Color)" class="com.bric.swing.ColorPicker" />
	<method signature="int[] getRGB()" class="com.bric.swing.ColorPicker" />
	<method signature="void &lt;init&gt;()" class="com.bric.swing.ColorPicker" />
	<method signature="void main(java.lang.String[])" class="com.bric.swing.ColorPicker" />
	<method signature="void &lt;init&gt;(boolean,boolean)" class="com.bric.swing.ColorPicker" />
	<method signature="void setPreviewSwatchVisible(boolean)" class="com.bric.swing.ColorPicker" />
	<method signature="javax.swing.JPanel getExpertControls()" class="com.bric.swing.ColorPicker" />
	<method signature="com.bric.swing.ColorPickerPanel getColorPanel()" class="com.bric.swing.ColorPicker" />
	<method signature="void setColor(java.awt.Color)" class="com.bric.swing.ColorPicker" />
	<method signature="float getOpacity()" class="com.bric.swing.ColorPicker" />
	<method signature="void setHexControlsVisible(boolean)" class="com.bric.swing.ColorPicker" />
	<method signature="java.awt.Color showDialog(java.awt.Window,java.lang.String,java.awt.Color,boolean)" class="com.bric.swing.ColorPicker" />
	<method signature="java.awt.Color showDialog(java.awt.Window,java.awt.Color,boolean)" class="com.bric.swing.ColorPicker" />
	<method signature="int getMode()" class="com.bric.swing.ColorPicker" />
	<method signature="void setMode(int)" class="com.bric.swing.ColorPicker" />
	<method signature="java.awt.Color getColor()" class="com.bric.swing.ColorPicker" />
	<method signature="void setOpacityVisible(boolean)" class="com.bric.swing.ColorPicker" />
	<method signature="void setRGB(int,int,int)" class="com.bric.swing.ColorPicker" />
	<method signature="void setHSB(float,float,float)" class="com.bric.swing.ColorPicker" />
	<method signature="void setRGBControlsVisible(boolean)" class="com.bric.swing.ColorPicker" />
	<method signature="java.awt.Color showDialog(java.awt.Container,java.awt.Color)" class="com.bric.swing.ColorPicker" />
	<class name="com.hexidec.ekit.EkitCore" />
	<method signature="void dispose()" class="com.hexidec.ekit.EkitCore" />
	<method signature="javax.swing.JTextPane getTextPane()" class="com.hexidec.ekit.EkitCore" />
	<method signature="void writeOutBase64(java.lang.String,java.io.File)" class="com.hexidec.ekit.EkitCore" />
	<method signature="javax.swing.JToolBar getToolBarMain(boolean)" class="com.hexidec.ekit.EkitCore" />
	<method signature="void purgeUndos()" class="com.hexidec.ekit.EkitCore" />
	<method signature="java.awt.Frame getFrame()" class="com.hexidec.ekit.EkitCore" />
	<method signature="void handleDocumentChange(javax.swing.event.DocumentEvent)" class="com.hexidec.ekit.EkitCore" />
	<method signature="javax.swing.JMenuBar getCustomMenuBar(java.util.Vector)" class="com.hexidec.ekit.EkitCore" />
	<method signature="void setEnterKeyIsBreak(boolean)" class="com.hexidec.ekit.EkitCore" />
	<method signature="void removeEmptyListElement(javax.swing.text.Element)" class="com.hexidec.ekit.EkitCore" />
	<method signature="void writeOutRTF(javax.swing.text.StyledDocument,java.io.File)" class="com.hexidec.ekit.EkitCore" />
	<method signature="void loadDocument(java.io.File,javax.swing.text.html.HTMLEditorKit$ParserCallback)" class="com.hexidec.ekit.EkitCore" />
	<method signature="void removeUpdate(javax.swing.event.DocumentEvent)" class="com.hexidec.ekit.EkitCore" />
	<method signature="int getCaretPosition()" class="com.hexidec.ekit.EkitCore" />
	<method signature="void keyTyped(java.awt.event.KeyEvent)" class="com.hexidec.ekit.EkitCore" />
	<method signature="void writeOutFragment(javax.swing.text.html.HTMLDocument,java.lang.String,java.io.File)" class="com.hexidec.ekit.EkitCore" />
	<method signature="void changedUpdate(javax.swing.event.DocumentEvent)" class="com.hexidec.ekit.EkitCore" />
	<method signature="void initializeSingleToolbar(java.lang.String)" class="com.hexidec.ekit.EkitCore" />
	<method signature="java.lang.String getAppName()" class="com.hexidec.ekit.EkitCore" />
	<method signature="void refreshOnUpdate()" class="com.hexidec.ekit.EkitCore" />
	<method signature="void keyReleased(java.awt.event.KeyEvent)" class="com.hexidec.ekit.EkitCore" />
	<method signature="void setFrame(java.awt.Frame)" class="com.hexidec.ekit.EkitCore" />
	<method signature="java.io.File getCurrentFile()" class="com.hexidec.ekit.EkitCore" />
	<method signature="javax.swing.JTextArea getSourcePane()" class="com.hexidec.ekit.EkitCore" />
	<method signature="java.lang.String getFontNameFromSelector()" class="com.hexidec.ekit.EkitCore" />
	<method signature="javax.swing.JToolBar getToolBarFormat(boolean)" class="com.hexidec.ekit.EkitCore" />
	<method signature="java.lang.String getDocumentText()" class="com.hexidec.ekit.EkitCore" />
	<method signature="void saveDocument()" class="com.hexidec.ekit.EkitCore" />
	<method signature="void checkDocumentSpelling(javax.swing.text.Document)" class="com.hexidec.ekit.EkitCore" />
	<method signature="void setSourceDocument(javax.swing.text.StyledDocument)" class="com.hexidec.ekit.EkitCore" />
	<method signature="java.lang.String getDocumentSubText(java.lang.String)" class="com.hexidec.ekit.EkitCore" />
	<method signature="void serializeIn()" class="com.hexidec.ekit.EkitCore" />
	<method signature="void setDocumentText(java.lang.String)" class="com.hexidec.ekit.EkitCore" />
	<method signature="void keyPressed(java.awt.event.KeyEvent)" class="com.hexidec.ekit.EkitCore" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="com.hexidec.ekit.EkitCore" />
	<method signature="void &lt;init&gt;()" class="com.hexidec.ekit.EkitCore" />
	<method signature="void insertListStyle(javax.swing.text.Element)" class="com.hexidec.ekit.EkitCore" />
	<method signature="void writeOutFragment(javax.swing.text.html.HTMLDocument,java.lang.String)" class="com.hexidec.ekit.EkitCore" />
	<method signature="void serializeOut(javax.swing.text.html.HTMLDocument)" class="com.hexidec.ekit.EkitCore" />
	<method signature="void loadDocument(java.io.File)" class="com.hexidec.ekit.EkitCore" />
	<method signature="void insertUnicodeChar(java.lang.String)" class="com.hexidec.ekit.EkitCore" />
	<method signature="com.hexidec.ekit.component.ExtendedHTMLDocument getExtendedHtmlDoc()" class="com.hexidec.ekit.EkitCore" />
	<method signature="java.lang.String getDocumentBody()" class="com.hexidec.ekit.EkitCore" />
	<method signature="void focusLost(java.awt.event.FocusEvent)" class="com.hexidec.ekit.EkitCore" />
	<method signature="javax.swing.JMenuBar getMenuBar()" class="com.hexidec.ekit.EkitCore" />
	<method signature="javax.swing.JToolBar getToolBar(boolean)" class="com.hexidec.ekit.EkitCore" />
	<method signature="void insertURLImage()" class="com.hexidec.ekit.EkitCore" />
	<method signature="void initializeMultiToolbars(java.lang.String)" class="com.hexidec.ekit.EkitCore" />
	<method signature="void removeEmptyLists()" class="com.hexidec.ekit.EkitCore" />
	<method signature="void &lt;init&gt;(boolean)" class="com.hexidec.ekit.EkitCore" />
	<method signature="void registerDocument(com.hexidec.ekit.component.ExtendedHTMLDocument)" class="com.hexidec.ekit.EkitCore" />
	<method signature="void writeOut(javax.swing.text.html.HTMLDocument,java.io.File)" class="com.hexidec.ekit.EkitCore" />
	<method signature="javax.swing.JToolBar customizeToolBar(int,java.util.Vector,boolean)" class="com.hexidec.ekit.EkitCore" />
	<method signature="boolean getEnterKeyIsBreak()" class="com.hexidec.ekit.EkitCore" />
	<method signature="java.lang.String getRTFDocument()" class="com.hexidec.ekit.EkitCore" />
	<method signature="void &lt;init&gt;(boolean,java.lang.String,java.lang.String,java.lang.String,javax.swing.text.StyledDocument,java.net.URL,boolean,boolean,boolean,boolean,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,java.lang.String,boolean,boolean)" class="com.hexidec.ekit.EkitCore" />
	<method signature="void setCaretPosition(int)" class="com.hexidec.ekit.EkitCore" />
	<method signature="void insertUpdate(javax.swing.event.DocumentEvent)" class="com.hexidec.ekit.EkitCore" />
	<method signature="void &lt;init&gt;(boolean,java.lang.String,java.net.URL,boolean,boolean,boolean,boolean,java.lang.String,java.lang.String,boolean,boolean,boolean,java.lang.String,boolean)" class="com.hexidec.ekit.EkitCore" />
	<method signature="void writeOutRTF(javax.swing.text.StyledDocument)" class="com.hexidec.ekit.EkitCore" />
	<method signature="void registerDocumentStyles()" class="com.hexidec.ekit.EkitCore" />
	<method signature="javax.swing.JToolBar getToolBarStyles(boolean)" class="com.hexidec.ekit.EkitCore" />
	<method signature="void &lt;init&gt;(boolean,java.lang.String,java.lang.String,java.lang.String,javax.swing.text.StyledDocument,java.net.URL,boolean,boolean,boolean,boolean,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,java.lang.String,boolean)" class="com.hexidec.ekit.EkitCore" />
	<method signature="void writeOutBase64(java.lang.String)" class="com.hexidec.ekit.EkitCore" />
	<method signature="void focusGained(java.awt.event.FocusEvent)" class="com.hexidec.ekit.EkitCore" />
	<class name="tourma.views.round.JPNGroup" />
	<method signature="void update()" class="tourma.views.round.JPNGroup" />
	<method signature="void &lt;init&gt;(tourma.data.Tournament,tourma.data.Group,int)" class="tourma.views.round.JPNGroup" />
	<method signature="void setRoundOnly(boolean)" class="tourma.views.round.JPNGroup" />
	<class name="org.apache.commons.lang3.RandomStringUtils" />
	<method signature="java.lang.String random(int)" class="org.apache.commons.lang3.RandomStringUtils" />
	<method signature="java.lang.String random(int,boolean,boolean)" class="org.apache.commons.lang3.RandomStringUtils" />
	<method signature="java.lang.String random(int,int,int,boolean,boolean)" class="org.apache.commons.lang3.RandomStringUtils" />
	<method signature="java.lang.String randomAlphabetic(int)" class="org.apache.commons.lang3.RandomStringUtils" />
	<method signature="java.lang.String randomAlphanumeric(int)" class="org.apache.commons.lang3.RandomStringUtils" />
	<method signature="java.lang.String random(int,int,int,boolean,boolean,char[])" class="org.apache.commons.lang3.RandomStringUtils" />
	<method signature="java.lang.String random(int,char[])" class="org.apache.commons.lang3.RandomStringUtils" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.RandomStringUtils" />
	<method signature="java.lang.String random(int,int,int,boolean,boolean,char[],java.util.Random)" class="org.apache.commons.lang3.RandomStringUtils" />
	<method signature="java.lang.String randomAscii(int)" class="org.apache.commons.lang3.RandomStringUtils" />
	<method signature="java.lang.String random(int,java.lang.String)" class="org.apache.commons.lang3.RandomStringUtils" />
	<method signature="java.lang.String randomNumeric(int)" class="org.apache.commons.lang3.RandomStringUtils" />
	<class name="com.google.zxing.LuminanceSource" />
	<method signature="int getHeight()" class="com.google.zxing.LuminanceSource" />
	<method signature="com.google.zxing.LuminanceSource crop(int,int,int,int)" class="com.google.zxing.LuminanceSource" />
	<method signature="com.google.zxing.LuminanceSource rotateCounterClockwise()" class="com.google.zxing.LuminanceSource" />
	<method signature="com.google.zxing.LuminanceSource rotateCounterClockwise45()" class="com.google.zxing.LuminanceSource" />
	<method signature="boolean isRotateSupported()" class="com.google.zxing.LuminanceSource" />
	<method signature="java.lang.String toString()" class="com.google.zxing.LuminanceSource" />
	<method signature="boolean isCropSupported()" class="com.google.zxing.LuminanceSource" />
	<method signature="byte[] getRow(int,byte[])" class="com.google.zxing.LuminanceSource" />
	<method signature="byte[] getMatrix()" class="com.google.zxing.LuminanceSource" />
	<method signature="int getWidth()" class="com.google.zxing.LuminanceSource" />
	<class name="org.apache.xerces.impl.validation.ValidationState" />
	<method signature="void setLocale(java.util.Locale)" class="org.apache.xerces.impl.validation.ValidationState" />
	<method signature="void reset()" class="org.apache.xerces.impl.validation.ValidationState" />
	<method signature="void setFacetChecking(boolean)" class="org.apache.xerces.impl.validation.ValidationState" />
	<method signature="java.lang.String checkIDRefID()" class="org.apache.xerces.impl.validation.ValidationState" />
	<method signature="boolean needFacetChecking()" class="org.apache.xerces.impl.validation.ValidationState" />
	<method signature="void setEntityState(org.apache.xerces.impl.validation.EntityState)" class="org.apache.xerces.impl.validation.ValidationState" />
	<method signature="java.util.Locale getLocale()" class="org.apache.xerces.impl.validation.ValidationState" />
	<method signature="java.lang.String getSymbol(java.lang.String)" class="org.apache.xerces.impl.validation.ValidationState" />
	<method signature="java.lang.String getURI(java.lang.String)" class="org.apache.xerces.impl.validation.ValidationState" />
	<method signature="void addId(java.lang.String)" class="org.apache.xerces.impl.validation.ValidationState" />
	<method signature="void setNamespaceSupport(org.apache.xerces.xni.NamespaceContext)" class="org.apache.xerces.impl.validation.ValidationState" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.validation.ValidationState" />
	<method signature="void setExtraChecking(boolean)" class="org.apache.xerces.impl.validation.ValidationState" />
	<method signature="void addIdRef(java.lang.String)" class="org.apache.xerces.impl.validation.ValidationState" />
	<method signature="void setSymbolTable(org.apache.xerces.util.SymbolTable)" class="org.apache.xerces.impl.validation.ValidationState" />
	<method signature="boolean isEntityUnparsed(java.lang.String)" class="org.apache.xerces.impl.validation.ValidationState" />
	<method signature="boolean useNamespaces()" class="org.apache.xerces.impl.validation.ValidationState" />
	<method signature="boolean needExtraChecking()" class="org.apache.xerces.impl.validation.ValidationState" />
	<method signature="boolean needToNormalize()" class="org.apache.xerces.impl.validation.ValidationState" />
	<method signature="boolean isIdDeclared(java.lang.String)" class="org.apache.xerces.impl.validation.ValidationState" />
	<method signature="void resetIDTables()" class="org.apache.xerces.impl.validation.ValidationState" />
	<method signature="boolean isEntityDeclared(java.lang.String)" class="org.apache.xerces.impl.validation.ValidationState" />
	<method signature="void setNormalizationRequired(boolean)" class="org.apache.xerces.impl.validation.ValidationState" />
	<method signature="void setUsingNamespaces(boolean)" class="org.apache.xerces.impl.validation.ValidationState" />
	<class name="org.apache.xerces.impl.xs.models.XSCMBinOp" />
	<method signature="void &lt;init&gt;(int,org.apache.xerces.impl.dtd.models.CMNode,org.apache.xerces.impl.dtd.models.CMNode)" class="org.apache.xerces.impl.xs.models.XSCMBinOp" />
	<method signature="boolean isNullable()" class="org.apache.xerces.impl.xs.models.XSCMBinOp" />
	<class name="javax.annotation.Nonnegative$Checker" />
	<method signature="void &lt;init&gt;()" class="javax.annotation.Nonnegative$Checker" />
	<method signature="javax.annotation.meta.When forConstantValue(java.lang.annotation.Annotation,java.lang.Object)" class="javax.annotation.Nonnegative$Checker" />
	<method signature="javax.annotation.meta.When forConstantValue(javax.annotation.Nonnegative,java.lang.Object)" class="javax.annotation.Nonnegative$Checker" />
	<class name="freemarker.template.LocalizedString" />
	<method signature="void &lt;init&gt;()" class="freemarker.template.LocalizedString" />
	<method signature="java.lang.String getAsString()" class="freemarker.template.LocalizedString" />
	<method signature="java.lang.String getLocalizedString(java.util.Locale)" class="freemarker.template.LocalizedString" />
	<class name="org.jfree.chart.axis.NumberAxis3D" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.axis.NumberAxis3D" />
	<method signature="org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.axis.NumberAxis3D" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.chart.axis.NumberAxis3D" />
	<class name="org.jfree.chart.renderer.category.CategoryItemRendererState" />
	<method signature="void setVisibleSeriesArray(int[])" class="org.jfree.chart.renderer.category.CategoryItemRendererState" />
	<method signature="void &lt;init&gt;(org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.renderer.category.CategoryItemRendererState" />
	<method signature="int getVisibleSeriesCount()" class="org.jfree.chart.renderer.category.CategoryItemRendererState" />
	<method signature="org.jfree.chart.plot.CategoryCrosshairState getCrosshairState()" class="org.jfree.chart.renderer.category.CategoryItemRendererState" />
	<method signature="double getBarWidth()" class="org.jfree.chart.renderer.category.CategoryItemRendererState" />
	<method signature="int[] getVisibleSeriesArray()" class="org.jfree.chart.renderer.category.CategoryItemRendererState" />
	<method signature="int getVisibleSeriesIndex(int)" class="org.jfree.chart.renderer.category.CategoryItemRendererState" />
	<method signature="void setBarWidth(double)" class="org.jfree.chart.renderer.category.CategoryItemRendererState" />
	<method signature="double getSeriesRunningTotal()" class="org.jfree.chart.renderer.category.CategoryItemRendererState" />
	<method signature="void setCrosshairState(org.jfree.chart.plot.CategoryCrosshairState)" class="org.jfree.chart.renderer.category.CategoryItemRendererState" />
	<class name="org.jfree.data.gantt.Task" />
	<method signature="java.lang.Double getPercentComplete()" class="org.jfree.data.gantt.Task" />
	<method signature="void addSubtask(org.jfree.data.gantt.Task)" class="org.jfree.data.gantt.Task" />
	<method signature="void setPercentComplete(java.lang.Double)" class="org.jfree.data.gantt.Task" />
	<method signature="int getSubtaskCount()" class="org.jfree.data.gantt.Task" />
	<method signature="java.lang.String getDescription()" class="org.jfree.data.gantt.Task" />
	<method signature="void setPercentComplete(double)" class="org.jfree.data.gantt.Task" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.gantt.Task" />
	<method signature="org.jfree.data.gantt.Task getSubtask(int)" class="org.jfree.data.gantt.Task" />
	<method signature="org.jfree.data.time.TimePeriod getDuration()" class="org.jfree.data.gantt.Task" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.gantt.Task" />
	<method signature="void &lt;init&gt;(java.lang.String,org.jfree.data.time.TimePeriod)" class="org.jfree.data.gantt.Task" />
	<method signature="void &lt;init&gt;(java.lang.String,java.util.Date,java.util.Date)" class="org.jfree.data.gantt.Task" />
	<method signature="void setDuration(org.jfree.data.time.TimePeriod)" class="org.jfree.data.gantt.Task" />
	<method signature="void removeSubtask(org.jfree.data.gantt.Task)" class="org.jfree.data.gantt.Task" />
	<method signature="void setDescription(java.lang.String)" class="org.jfree.data.gantt.Task" />
	<class name="org.unbescape.javascript.JavaScriptEscape" />
	<method signature="void escapeJavaScriptMinimal(char[],int,int,java.io.Writer)" class="org.unbescape.javascript.JavaScriptEscape" />
	<method signature="void escapeJavaScript(char[],int,int,java.io.Writer,org.unbescape.javascript.JavaScriptEscapeType,org.unbescape.javascript.JavaScriptEscapeLevel)" class="org.unbescape.javascript.JavaScriptEscape" />
	<method signature="void escapeJavaScript(char[],int,int,java.io.Writer)" class="org.unbescape.javascript.JavaScriptEscape" />
	<method signature="void unescapeJavaScript(char[],int,int,java.io.Writer)" class="org.unbescape.javascript.JavaScriptEscape" />
	<method signature="java.lang.String escapeJavaScriptMinimal(java.lang.String)" class="org.unbescape.javascript.JavaScriptEscape" />
	<method signature="java.lang.String escapeJavaScript(java.lang.String,org.unbescape.javascript.JavaScriptEscapeType,org.unbescape.javascript.JavaScriptEscapeLevel)" class="org.unbescape.javascript.JavaScriptEscape" />
	<method signature="java.lang.String escapeJavaScript(java.lang.String)" class="org.unbescape.javascript.JavaScriptEscape" />
	<method signature="java.lang.String unescapeJavaScript(java.lang.String)" class="org.unbescape.javascript.JavaScriptEscape" />
	<class name="com.toedter.calendar.demo.JCalendarDemo" />
	<method signature="void propertyChange(java.beans.PropertyChangeEvent)" class="com.toedter.calendar.demo.JCalendarDemo" />
	<method signature="void &lt;init&gt;()" class="com.toedter.calendar.demo.JCalendarDemo" />
	<method signature="void initializeLookAndFeels()" class="com.toedter.calendar.demo.JCalendarDemo" />
	<method signature="javax.swing.JMenuBar createMenuBar()" class="com.toedter.calendar.demo.JCalendarDemo" />
	<method signature="void main(java.lang.String[])" class="com.toedter.calendar.demo.JCalendarDemo" />
	<method signature="void init()" class="com.toedter.calendar.demo.JCalendarDemo" />
	<method signature="javax.swing.JToolBar createToolBar()" class="com.toedter.calendar.demo.JCalendarDemo" />
	<class name="freemarker.ext.dom.Transform" />
	<method signature="void main(java.lang.String[])" class="freemarker.ext.dom.Transform" />
	<class name="org.jfree.chart.block.EntityBlockParams" />
	<method signature="boolean getGenerateEntities()" class="org.jfree.chart.block.EntityBlockParams" />
	<class name="org.apache.xerces.xs.XSObject" />
	<method signature="java.lang.String getName()" class="org.apache.xerces.xs.XSObject" />
	<method signature="java.lang.String getNamespace()" class="org.apache.xerces.xs.XSObject" />
	<method signature="short getType()" class="org.apache.xerces.xs.XSObject" />
	<method signature="org.apache.xerces.xs.XSNamespaceItem getNamespaceItem()" class="org.apache.xerces.xs.XSObject" />
	<class name="org.jfree.data.general.KeyedValuesDataset" />
	<class name="org.w3c.dom.CDATASection" />
	<class name="javax.annotation.CheckReturnValue" />
	<method signature="javax.annotation.meta.When when()" class="javax.annotation.CheckReturnValue" />
	<class name="org.jfree.util.LogContext" />
	<method signature="boolean isWarningEnabled()" class="org.jfree.util.LogContext" />
	<method signature="void debug(java.lang.Object)" class="org.jfree.util.LogContext" />
	<method signature="int hashCode()" class="org.jfree.util.LogContext" />
	<method signature="boolean isErrorEnabled()" class="org.jfree.util.LogContext" />
	<method signature="void log(int,java.lang.Object,java.lang.Exception)" class="org.jfree.util.LogContext" />
	<method signature="boolean isDebugEnabled()" class="org.jfree.util.LogContext" />
	<method signature="void warn(java.lang.Object,java.lang.Exception)" class="org.jfree.util.LogContext" />
	<method signature="void info(java.lang.Object,java.lang.Exception)" class="org.jfree.util.LogContext" />
	<method signature="boolean isInfoEnabled()" class="org.jfree.util.LogContext" />
	<method signature="void error(java.lang.Object)" class="org.jfree.util.LogContext" />
	<method signature="void warn(java.lang.Object)" class="org.jfree.util.LogContext" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.util.LogContext" />
	<method signature="void debug(java.lang.Object,java.lang.Exception)" class="org.jfree.util.LogContext" />
	<method signature="void log(int,java.lang.Object)" class="org.jfree.util.LogContext" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.util.LogContext" />
	<method signature="void error(java.lang.Object,java.lang.Exception)" class="org.jfree.util.LogContext" />
	<method signature="void info(java.lang.Object)" class="org.jfree.util.LogContext" />
	<class name="org.apache.commons.lang3.Validate" />
	<method signature="void exclusiveBetween(double,double,double)" class="org.apache.commons.lang3.Validate" />
	<method signature="void matchesPattern(java.lang.CharSequence,java.lang.String)" class="org.apache.commons.lang3.Validate" />
	<method signature="void exclusiveBetween(java.lang.Object,java.lang.Object,java.lang.Comparable,java.lang.String,java.lang.Object[])" class="org.apache.commons.lang3.Validate" />
	<method signature="void isTrue(boolean)" class="org.apache.commons.lang3.Validate" />
	<method signature="void exclusiveBetween(long,long,long)" class="org.apache.commons.lang3.Validate" />
	<method signature="void exclusiveBetween(long,long,long,java.lang.String)" class="org.apache.commons.lang3.Validate" />
	<method signature="java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])" class="org.apache.commons.lang3.Validate" />
	<method signature="java.lang.Object notNull(java.lang.Object)" class="org.apache.commons.lang3.Validate" />
	<method signature="void inclusiveBetween(java.lang.Object,java.lang.Object,java.lang.Comparable)" class="org.apache.commons.lang3.Validate" />
	<method signature="java.lang.CharSequence notBlank(java.lang.CharSequence)" class="org.apache.commons.lang3.Validate" />
	<method signature="java.lang.Object[] validIndex(java.lang.Object[],int)" class="org.apache.commons.lang3.Validate" />
	<method signature="java.util.Collection notEmpty(java.util.Collection,java.lang.String,java.lang.Object[])" class="org.apache.commons.lang3.Validate" />
	<method signature="java.lang.CharSequence validIndex(java.lang.CharSequence,int)" class="org.apache.commons.lang3.Validate" />
	<method signature="java.lang.Object[] notEmpty(java.lang.Object[])" class="org.apache.commons.lang3.Validate" />
	<method signature="java.util.Map notEmpty(java.util.Map)" class="org.apache.commons.lang3.Validate" />
	<method signature="void validState(boolean,java.lang.String,java.lang.Object[])" class="org.apache.commons.lang3.Validate" />
	<method signature="void matchesPattern(java.lang.CharSequence,java.lang.String,java.lang.String,java.lang.Object[])" class="org.apache.commons.lang3.Validate" />
	<method signature="void isAssignableFrom(java.lang.Class,java.lang.Class)" class="org.apache.commons.lang3.Validate" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.Validate" />
	<method signature="void isInstanceOf(java.lang.Class,java.lang.Object)" class="org.apache.commons.lang3.Validate" />
	<method signature="void isTrue(boolean,java.lang.String,double)" class="org.apache.commons.lang3.Validate" />
	<method signature="void isTrue(boolean,java.lang.String,long)" class="org.apache.commons.lang3.Validate" />
	<method signature="java.lang.Object[] notEmpty(java.lang.Object[],java.lang.String,java.lang.Object[])" class="org.apache.commons.lang3.Validate" />
	<method signature="java.lang.CharSequence notEmpty(java.lang.CharSequence,java.lang.String,java.lang.Object[])" class="org.apache.commons.lang3.Validate" />
	<method signature="void inclusiveBetween(double,double,double,java.lang.String)" class="org.apache.commons.lang3.Validate" />
	<method signature="void validState(boolean)" class="org.apache.commons.lang3.Validate" />
	<method signature="void exclusiveBetween(double,double,double,java.lang.String)" class="org.apache.commons.lang3.Validate" />
	<method signature="java.lang.Object[] noNullElements(java.lang.Object[],java.lang.String,java.lang.Object[])" class="org.apache.commons.lang3.Validate" />
	<method signature="java.lang.CharSequence validIndex(java.lang.CharSequence,int,java.lang.String,java.lang.Object[])" class="org.apache.commons.lang3.Validate" />
	<method signature="java.util.Map notEmpty(java.util.Map,java.lang.String,java.lang.Object[])" class="org.apache.commons.lang3.Validate" />
	<method signature="java.lang.Object[] noNullElements(java.lang.Object[])" class="org.apache.commons.lang3.Validate" />
	<method signature="java.lang.CharSequence notEmpty(java.lang.CharSequence)" class="org.apache.commons.lang3.Validate" />
	<method signature="java.util.Collection notEmpty(java.util.Collection)" class="org.apache.commons.lang3.Validate" />
	<method signature="java.lang.Iterable noNullElements(java.lang.Iterable,java.lang.String,java.lang.Object[])" class="org.apache.commons.lang3.Validate" />
	<method signature="void isInstanceOf(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])" class="org.apache.commons.lang3.Validate" />
	<method signature="void exclusiveBetween(java.lang.Object,java.lang.Object,java.lang.Comparable)" class="org.apache.commons.lang3.Validate" />
	<method signature="void inclusiveBetween(long,long,long)" class="org.apache.commons.lang3.Validate" />
	<method signature="void inclusiveBetween(long,long,long,java.lang.String)" class="org.apache.commons.lang3.Validate" />
	<method signature="void isTrue(boolean,java.lang.String,java.lang.Object[])" class="org.apache.commons.lang3.Validate" />
	<method signature="java.util.Collection validIndex(java.util.Collection,int,java.lang.String,java.lang.Object[])" class="org.apache.commons.lang3.Validate" />
	<method signature="java.lang.CharSequence notBlank(java.lang.CharSequence,java.lang.String,java.lang.Object[])" class="org.apache.commons.lang3.Validate" />
	<method signature="java.lang.Object[] validIndex(java.lang.Object[],int,java.lang.String,java.lang.Object[])" class="org.apache.commons.lang3.Validate" />
	<method signature="java.util.Collection validIndex(java.util.Collection,int)" class="org.apache.commons.lang3.Validate" />
	<method signature="void inclusiveBetween(double,double,double)" class="org.apache.commons.lang3.Validate" />
	<method signature="void isAssignableFrom(java.lang.Class,java.lang.Class,java.lang.String,java.lang.Object[])" class="org.apache.commons.lang3.Validate" />
	<method signature="java.lang.Iterable noNullElements(java.lang.Iterable)" class="org.apache.commons.lang3.Validate" />
	<method signature="void inclusiveBetween(java.lang.Object,java.lang.Object,java.lang.Comparable,java.lang.String,java.lang.Object[])" class="org.apache.commons.lang3.Validate" />
	<class name="org.w3c.dom.DOMConfiguration" />
	<method signature="boolean canSetParameter(java.lang.String,java.lang.Object)" class="org.w3c.dom.DOMConfiguration" />
	<method signature="org.w3c.dom.DOMStringList getParameterNames()" class="org.w3c.dom.DOMConfiguration" />
	<method signature="java.lang.Object getParameter(java.lang.String)" class="org.w3c.dom.DOMConfiguration" />
	<method signature="void setParameter(java.lang.String,java.lang.Object)" class="org.w3c.dom.DOMConfiguration" />
	<class name="tourma.views.round.JPNTeamRound" />
	<method signature="void update()" class="tourma.views.round.JPNTeamRound" />
	<method signature="void &lt;init&gt;(tourma.data.Round,tourma.data.Tournament)" class="tourma.views.round.JPNTeamRound" />
	<method signature="void setRoundOnly(boolean)" class="tourma.views.round.JPNTeamRound" />
	<class name="org.jfree.data.Values2D" />
	<method signature="java.lang.Number getValue(int,int)" class="org.jfree.data.Values2D" />
	<method signature="int getRowCount()" class="org.jfree.data.Values2D" />
	<method signature="int getColumnCount()" class="org.jfree.data.Values2D" />
	<class name="freemarker.template.TemplateCollectionModel" />
	<method signature="freemarker.template.TemplateModelIterator iterator()" class="freemarker.template.TemplateCollectionModel" />
	<class name="tourma.utils.Generation" />
	<method signature="void generateFirstRound(int)" class="tourma.utils.Generation" />
	<method signature="java.util.ArrayList subRanking(tourma.data.Team,java.util.ArrayList)" class="tourma.utils.Generation" />
	<method signature="void generateFirstRoundFree()" class="tourma.utils.Generation" />
	<method signature="java.util.ArrayList subRanking(java.util.ArrayList,java.util.ArrayList)" class="tourma.utils.Generation" />
	<method signature="void nextRound(tourma.data.Round,int,int)" class="tourma.utils.Generation" />
	<class name="org.apache.commons.lang3.builder.StandardToStringStyle" />
	<method signature="java.lang.String getContentStart()" class="org.apache.commons.lang3.builder.StandardToStringStyle" />
	<method signature="void setSummaryObjectEndText(java.lang.String)" class="org.apache.commons.lang3.builder.StandardToStringStyle" />
	<method signature="void setArrayContentDetail(boolean)" class="org.apache.commons.lang3.builder.StandardToStringStyle" />
	<method signature="boolean isFieldSeparatorAtEnd()" class="org.apache.commons.lang3.builder.StandardToStringStyle" />
	<method signature="void setSizeEndText(java.lang.String)" class="org.apache.commons.lang3.builder.StandardToStringStyle" />
	<method signature="void setDefaultFullDetail(boolean)" class="org.apache.commons.lang3.builder.StandardToStringStyle" />
	<method signature="void setArrayEnd(java.lang.String)" class="org.apache.commons.lang3.builder.StandardToStringStyle" />
	<method signature="boolean isUseFieldNames()" class="org.apache.commons.lang3.builder.StandardToStringStyle" />
	<method signature="boolean isUseShortClassName()" class="org.apache.commons.lang3.builder.StandardToStringStyle" />
	<method signature="boolean isUseIdentityHashCode()" class="org.apache.commons.lang3.builder.StandardToStringStyle" />
	<method signature="boolean isFieldSeparatorAtStart()" class="org.apache.commons.lang3.builder.StandardToStringStyle" />
	<method signature="void setUseClassName(boolean)" class="org.apache.commons.lang3.builder.StandardToStringStyle" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.builder.StandardToStringStyle" />
	<method signature="void setFieldSeparatorAtEnd(boolean)" class="org.apache.commons.lang3.builder.StandardToStringStyle" />
	<method signature="void setSizeStartText(java.lang.String)" class="org.apache.commons.lang3.builder.StandardToStringStyle" />
	<method signature="void setContentStart(java.lang.String)" class="org.apache.commons.lang3.builder.StandardToStringStyle" />
	<method signature="void setContentEnd(java.lang.String)" class="org.apache.commons.lang3.builder.StandardToStringStyle" />
	<method signature="java.lang.String getFieldNameValueSeparator()" class="org.apache.commons.lang3.builder.StandardToStringStyle" />
	<method signature="java.lang.String getContentEnd()" class="org.apache.commons.lang3.builder.StandardToStringStyle" />
	<method signature="boolean isDefaultFullDetail()" class="org.apache.commons.lang3.builder.StandardToStringStyle" />
	<method signature="boolean isArrayContentDetail()" class="org.apache.commons.lang3.builder.StandardToStringStyle" />
	<method signature="java.lang.String getSizeEndText()" class="org.apache.commons.lang3.builder.StandardToStringStyle" />
	<method signature="void setUseIdentityHashCode(boolean)" class="org.apache.commons.lang3.builder.StandardToStringStyle" />
	<method signature="void setSummaryObjectStartText(java.lang.String)" class="org.apache.commons.lang3.builder.StandardToStringStyle" />
	<method signature="void setArrayStart(java.lang.String)" class="org.apache.commons.lang3.builder.StandardToStringStyle" />
	<method signature="void setFieldNameValueSeparator(java.lang.String)" class="org.apache.commons.lang3.builder.StandardToStringStyle" />
	<method signature="java.lang.String getSizeStartText()" class="org.apache.commons.lang3.builder.StandardToStringStyle" />
	<method signature="java.lang.String getSummaryObjectStartText()" class="org.apache.commons.lang3.builder.StandardToStringStyle" />
	<method signature="java.lang.String getArraySeparator()" class="org.apache.commons.lang3.builder.StandardToStringStyle" />
	<method signature="java.lang.String getArrayStart()" class="org.apache.commons.lang3.builder.StandardToStringStyle" />
	<method signature="java.lang.String getArrayEnd()" class="org.apache.commons.lang3.builder.StandardToStringStyle" />
	<method signature="void setFieldSeparatorAtStart(boolean)" class="org.apache.commons.lang3.builder.StandardToStringStyle" />
	<method signature="java.lang.String getNullText()" class="org.apache.commons.lang3.builder.StandardToStringStyle" />
	<method signature="void setUseShortClassName(boolean)" class="org.apache.commons.lang3.builder.StandardToStringStyle" />
	<method signature="void setNullText(java.lang.String)" class="org.apache.commons.lang3.builder.StandardToStringStyle" />
	<method signature="java.lang.String getFieldSeparator()" class="org.apache.commons.lang3.builder.StandardToStringStyle" />
	<method signature="boolean isUseClassName()" class="org.apache.commons.lang3.builder.StandardToStringStyle" />
	<method signature="void setFieldSeparator(java.lang.String)" class="org.apache.commons.lang3.builder.StandardToStringStyle" />
	<method signature="void setArraySeparator(java.lang.String)" class="org.apache.commons.lang3.builder.StandardToStringStyle" />
	<method signature="void setUseFieldNames(boolean)" class="org.apache.commons.lang3.builder.StandardToStringStyle" />
	<method signature="java.lang.String getSummaryObjectEndText()" class="org.apache.commons.lang3.builder.StandardToStringStyle" />
	<class name="org.apache.commons.lang3.CharEncoding" />
	<method signature="boolean isSupported(java.lang.String)" class="org.apache.commons.lang3.CharEncoding" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.CharEncoding" />
	<class name="org.xml.sax.ext.LexicalHandler" />
	<method signature="void endCDATA()" class="org.xml.sax.ext.LexicalHandler" />
	<method signature="void endDTD()" class="org.xml.sax.ext.LexicalHandler" />
	<method signature="void startDTD(java.lang.String,java.lang.String,java.lang.String)" class="org.xml.sax.ext.LexicalHandler" />
	<method signature="void endEntity(java.lang.String)" class="org.xml.sax.ext.LexicalHandler" />
	<method signature="void startCDATA()" class="org.xml.sax.ext.LexicalHandler" />
	<method signature="void startEntity(java.lang.String)" class="org.xml.sax.ext.LexicalHandler" />
	<method signature="void comment(char[],int,int)" class="org.xml.sax.ext.LexicalHandler" />
	<class name="fi.iki.elonen.NanoHTTPD$ServerRunnable" />
	<method signature="void run()" class="fi.iki.elonen.NanoHTTPD$ServerRunnable" />
	<class name="freemarker.ext.beans.DateModel" />
	<method signature="void &lt;init&gt;(java.util.Date,freemarker.ext.beans.BeansWrapper)" class="freemarker.ext.beans.DateModel" />
	<method signature="java.util.Date getAsDate()" class="freemarker.ext.beans.DateModel" />
	<method signature="int getDateType()" class="freemarker.ext.beans.DateModel" />
	<class name="tourma.JdgSelectNumber" />
	<method signature="void &lt;init&gt;(java.awt.Frame,boolean,tourma.data.Tournament)" class="tourma.JdgSelectNumber" />
	<class name="com.google.zxing.pdf417.encoder.Dimensions" />
	<method signature="int getMaxCols()" class="com.google.zxing.pdf417.encoder.Dimensions" />
	<method signature="int getMinCols()" class="com.google.zxing.pdf417.encoder.Dimensions" />
	<method signature="int getMinRows()" class="com.google.zxing.pdf417.encoder.Dimensions" />
	<method signature="void &lt;init&gt;(int,int,int,int)" class="com.google.zxing.pdf417.encoder.Dimensions" />
	<method signature="int getMaxRows()" class="com.google.zxing.pdf417.encoder.Dimensions" />
	<class name="org.apache.xerces.impl.io.UTF16Reader" />
	<method signature="void mark(int)" class="org.apache.xerces.impl.io.UTF16Reader" />
	<method signature="int read(char[],int,int)" class="org.apache.xerces.impl.io.UTF16Reader" />
	<method signature="void reset()" class="org.apache.xerces.impl.io.UTF16Reader" />
	<method signature="void close()" class="org.apache.xerces.impl.io.UTF16Reader" />
	<method signature="boolean ready()" class="org.apache.xerces.impl.io.UTF16Reader" />
	<method signature="void &lt;init&gt;(java.io.InputStream,int,boolean,org.apache.xerces.util.MessageFormatter,java.util.Locale)" class="org.apache.xerces.impl.io.UTF16Reader" />
	<method signature="long skip(long)" class="org.apache.xerces.impl.io.UTF16Reader" />
	<method signature="void &lt;init&gt;(java.io.InputStream,boolean)" class="org.apache.xerces.impl.io.UTF16Reader" />
	<method signature="int read()" class="org.apache.xerces.impl.io.UTF16Reader" />
	<method signature="void &lt;init&gt;(java.io.InputStream,byte[],boolean,org.apache.xerces.util.MessageFormatter,java.util.Locale)" class="org.apache.xerces.impl.io.UTF16Reader" />
	<method signature="void &lt;init&gt;(java.io.InputStream,boolean,org.apache.xerces.util.MessageFormatter,java.util.Locale)" class="org.apache.xerces.impl.io.UTF16Reader" />
	<method signature="boolean markSupported()" class="org.apache.xerces.impl.io.UTF16Reader" />
	<class name="org.apache.html.dom.HTMLAnchorElementImpl" />
	<method signature="java.lang.String getCoords()" class="org.apache.html.dom.HTMLAnchorElementImpl" />
	<method signature="java.lang.String getName()" class="org.apache.html.dom.HTMLAnchorElementImpl" />
	<method signature="void setRel(java.lang.String)" class="org.apache.html.dom.HTMLAnchorElementImpl" />
	<method signature="java.lang.String getHreflang()" class="org.apache.html.dom.HTMLAnchorElementImpl" />
	<method signature="java.lang.String getShape()" class="org.apache.html.dom.HTMLAnchorElementImpl" />
	<method signature="java.lang.String getCharset()" class="org.apache.html.dom.HTMLAnchorElementImpl" />
	<method signature="void setTarget(java.lang.String)" class="org.apache.html.dom.HTMLAnchorElementImpl" />
	<method signature="java.lang.String getTarget()" class="org.apache.html.dom.HTMLAnchorElementImpl" />
	<method signature="int getTabIndex()" class="org.apache.html.dom.HTMLAnchorElementImpl" />
	<method signature="void setName(java.lang.String)" class="org.apache.html.dom.HTMLAnchorElementImpl" />
	<method signature="void setCharset(java.lang.String)" class="org.apache.html.dom.HTMLAnchorElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLAnchorElementImpl" />
	<method signature="void setAccessKey(java.lang.String)" class="org.apache.html.dom.HTMLAnchorElementImpl" />
	<method signature="java.lang.String getHref()" class="org.apache.html.dom.HTMLAnchorElementImpl" />
	<method signature="java.lang.String getRev()" class="org.apache.html.dom.HTMLAnchorElementImpl" />
	<method signature="java.lang.String getRel()" class="org.apache.html.dom.HTMLAnchorElementImpl" />
	<method signature="void setTabIndex(int)" class="org.apache.html.dom.HTMLAnchorElementImpl" />
	<method signature="void setHref(java.lang.String)" class="org.apache.html.dom.HTMLAnchorElementImpl" />
	<method signature="void setHreflang(java.lang.String)" class="org.apache.html.dom.HTMLAnchorElementImpl" />
	<method signature="void blur()" class="org.apache.html.dom.HTMLAnchorElementImpl" />
	<method signature="void focus()" class="org.apache.html.dom.HTMLAnchorElementImpl" />
	<method signature="void setRev(java.lang.String)" class="org.apache.html.dom.HTMLAnchorElementImpl" />
	<method signature="java.lang.String getType()" class="org.apache.html.dom.HTMLAnchorElementImpl" />
	<method signature="void setShape(java.lang.String)" class="org.apache.html.dom.HTMLAnchorElementImpl" />
	<method signature="void setCoords(java.lang.String)" class="org.apache.html.dom.HTMLAnchorElementImpl" />
	<method signature="void setType(java.lang.String)" class="org.apache.html.dom.HTMLAnchorElementImpl" />
	<method signature="java.lang.String getAccessKey()" class="org.apache.html.dom.HTMLAnchorElementImpl" />
	<class name="org.apache.commons.lang3.SerializationException" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.SerializationException" />
	<method signature="void &lt;init&gt;(java.lang.Throwable)" class="org.apache.commons.lang3.SerializationException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Throwable)" class="org.apache.commons.lang3.SerializationException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.apache.commons.lang3.SerializationException" />
	<class name="com.google.zxing.qrcode.decoder.Version$ECBlocks" />
	<method signature="com.google.zxing.qrcode.decoder.Version$ECB[] getECBlocks()" class="com.google.zxing.qrcode.decoder.Version$ECBlocks" />
	<method signature="int getTotalECCodewords()" class="com.google.zxing.qrcode.decoder.Version$ECBlocks" />
	<method signature="int getNumBlocks()" class="com.google.zxing.qrcode.decoder.Version$ECBlocks" />
	<method signature="int getECCodewordsPerBlock()" class="com.google.zxing.qrcode.decoder.Version$ECBlocks" />
	<class name="com.swabunga.spell.swing.JSpellDialog" />
	<method signature="void show(com.swabunga.spell.event.SpellCheckEvent)" class="com.swabunga.spell.swing.JSpellDialog" />
	<method signature="void windowClosed(java.awt.event.WindowEvent)" class="com.swabunga.spell.swing.JSpellDialog" />
	<method signature="void windowClosing(java.awt.event.WindowEvent)" class="com.swabunga.spell.swing.JSpellDialog" />
	<method signature="void windowActivated(java.awt.event.WindowEvent)" class="com.swabunga.spell.swing.JSpellDialog" />
	<method signature="void &lt;init&gt;(java.awt.Dialog,java.lang.String,boolean)" class="com.swabunga.spell.swing.JSpellDialog" />
	<method signature="void windowDeiconified(java.awt.event.WindowEvent)" class="com.swabunga.spell.swing.JSpellDialog" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="com.swabunga.spell.swing.JSpellDialog" />
	<method signature="void windowIconified(java.awt.event.WindowEvent)" class="com.swabunga.spell.swing.JSpellDialog" />
	<method signature="void &lt;init&gt;(java.awt.Frame,java.lang.String,boolean)" class="com.swabunga.spell.swing.JSpellDialog" />
	<method signature="void windowDeactivated(java.awt.event.WindowEvent)" class="com.swabunga.spell.swing.JSpellDialog" />
	<method signature="void windowOpened(java.awt.event.WindowEvent)" class="com.swabunga.spell.swing.JSpellDialog" />
	<class name="org.jfree.ui.InsetsChooserPanel" />
	<method signature="void removeNotify()" class="org.jfree.ui.InsetsChooserPanel" />
	<method signature="void &lt;init&gt;()" class="org.jfree.ui.InsetsChooserPanel" />
	<method signature="java.awt.Insets getInsetsValue()" class="org.jfree.ui.InsetsChooserPanel" />
	<method signature="void &lt;init&gt;(java.awt.Insets)" class="org.jfree.ui.InsetsChooserPanel" />
	<class name="org.apache.xml.serialize.XMLSerializer" />
	<method signature="void setNamespaces(boolean)" class="org.apache.xml.serialize.XMLSerializer" />
	<method signature="void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" class="org.apache.xml.serialize.XMLSerializer" />
	<method signature="void startElement(java.lang.String,org.xml.sax.AttributeList)" class="org.apache.xml.serialize.XMLSerializer" />
	<method signature="void &lt;init&gt;(java.io.Writer,org.apache.xml.serialize.OutputFormat)" class="org.apache.xml.serialize.XMLSerializer" />
	<method signature="void endElement(java.lang.String)" class="org.apache.xml.serialize.XMLSerializer" />
	<method signature="boolean reset()" class="org.apache.xml.serialize.XMLSerializer" />
	<method signature="void &lt;init&gt;(org.apache.xml.serialize.OutputFormat)" class="org.apache.xml.serialize.XMLSerializer" />
	<method signature="void endElement(java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xml.serialize.XMLSerializer" />
	<method signature="void endElementIO(java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xml.serialize.XMLSerializer" />
	<method signature="void &lt;init&gt;()" class="org.apache.xml.serialize.XMLSerializer" />
	<method signature="void &lt;init&gt;(java.io.OutputStream,org.apache.xml.serialize.OutputFormat)" class="org.apache.xml.serialize.XMLSerializer" />
	<method signature="void setOutputFormat(org.apache.xml.serialize.OutputFormat)" class="org.apache.xml.serialize.XMLSerializer" />
	<class name="javax.xml.stream.XMLReporter" />
	<method signature="void report(java.lang.String,java.lang.String,java.lang.Object,javax.xml.stream.Location)" class="javax.xml.stream.XMLReporter" />
	<class name="org.apache.xerces.dom.NamedNodeMapImpl" />
	<method signature="org.w3c.dom.Node removeNamedItem(java.lang.String)" class="org.apache.xerces.dom.NamedNodeMapImpl" />
	<method signature="org.w3c.dom.Node getNamedItem(java.lang.String)" class="org.apache.xerces.dom.NamedNodeMapImpl" />
	<method signature="int getLength()" class="org.apache.xerces.dom.NamedNodeMapImpl" />
	<method signature="org.w3c.dom.Node item(int)" class="org.apache.xerces.dom.NamedNodeMapImpl" />
	<method signature="void removeAll()" class="org.apache.xerces.dom.NamedNodeMapImpl" />
	<method signature="org.w3c.dom.Node getNamedItemNS(java.lang.String,java.lang.String)" class="org.apache.xerces.dom.NamedNodeMapImpl" />
	<method signature="org.w3c.dom.Node setNamedItemNS(org.w3c.dom.Node)" class="org.apache.xerces.dom.NamedNodeMapImpl" />
	<method signature="org.w3c.dom.Node setNamedItem(org.w3c.dom.Node)" class="org.apache.xerces.dom.NamedNodeMapImpl" />
	<method signature="org.w3c.dom.Node removeNamedItemNS(java.lang.String,java.lang.String)" class="org.apache.xerces.dom.NamedNodeMapImpl" />
	<method signature="org.apache.xerces.dom.NamedNodeMapImpl cloneMap(org.apache.xerces.dom.NodeImpl)" class="org.apache.xerces.dom.NamedNodeMapImpl" />
	<class name="com.google.zxing.common.StringUtils" />
	<method signature="java.lang.String guessEncoding(byte[],java.util.Map)" class="com.google.zxing.common.StringUtils" />
	<class name="org.jfree.chart.axis.PeriodAxis" />
	<method signature="org.jfree.chart.axis.PeriodAxisLabelInfo[] getLabelInfo()" class="org.jfree.chart.axis.PeriodAxis" />
	<method signature="java.util.Locale getLocale()" class="org.jfree.chart.axis.PeriodAxis" />
	<method signature="boolean isMinorTickMarksVisible()" class="org.jfree.chart.axis.PeriodAxis" />
	<method signature="void setMinorTickMarkStroke(java.awt.Stroke)" class="org.jfree.chart.axis.PeriodAxis" />
	<method signature="void setLast(org.jfree.data.time.RegularTimePeriod)" class="org.jfree.chart.axis.PeriodAxis" />
	<method signature="java.awt.Paint getMinorTickMarkPaint()" class="org.jfree.chart.axis.PeriodAxis" />
	<method signature="void setMinorTickTimePeriodClass(java.lang.Class)" class="org.jfree.chart.axis.PeriodAxis" />
	<method signature="void &lt;init&gt;(java.lang.String,org.jfree.data.time.RegularTimePeriod,org.jfree.data.time.RegularTimePeriod,java.util.TimeZone,java.util.Locale)" class="org.jfree.chart.axis.PeriodAxis" />
	<method signature="java.lang.Class getMinorTickTimePeriodClass()" class="org.jfree.chart.axis.PeriodAxis" />
	<method signature="void &lt;init&gt;(java.lang.String,org.jfree.data.time.RegularTimePeriod,org.jfree.data.time.RegularTimePeriod)" class="org.jfree.chart.axis.PeriodAxis" />
	<method signature="float getMinorTickMarkInsideLength()" class="org.jfree.chart.axis.PeriodAxis" />
	<method signature="void setTimeZone(java.util.TimeZone)" class="org.jfree.chart.axis.PeriodAxis" />
	<method signature="org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.axis.PeriodAxis" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.chart.axis.PeriodAxis" />
	<method signature="double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.axis.PeriodAxis" />
	<method signature="void setMinorTickMarksVisible(boolean)" class="org.jfree.chart.axis.PeriodAxis" />
	<method signature="void &lt;init&gt;(java.lang.String,org.jfree.data.time.RegularTimePeriod,org.jfree.data.time.RegularTimePeriod,java.util.TimeZone)" class="org.jfree.chart.axis.PeriodAxis" />
	<method signature="java.lang.Class getMajorTickTimePeriodClass()" class="org.jfree.chart.axis.PeriodAxis" />
	<method signature="java.util.TimeZone getTimeZone()" class="org.jfree.chart.axis.PeriodAxis" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.axis.PeriodAxis" />
	<method signature="void configure()" class="org.jfree.chart.axis.PeriodAxis" />
	<method signature="void setFirst(org.jfree.data.time.RegularTimePeriod)" class="org.jfree.chart.axis.PeriodAxis" />
	<method signature="void setRange(org.jfree.data.Range,boolean,boolean)" class="org.jfree.chart.axis.PeriodAxis" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.axis.PeriodAxis" />
	<method signature="void setMinorTickMarkInsideLength(float)" class="org.jfree.chart.axis.PeriodAxis" />
	<method signature="void setAutoRangeTimePeriodClass(java.lang.Class)" class="org.jfree.chart.axis.PeriodAxis" />
	<method signature="int hashCode()" class="org.jfree.chart.axis.PeriodAxis" />
	<method signature="void setMajorTickTimePeriodClass(java.lang.Class)" class="org.jfree.chart.axis.PeriodAxis" />
	<method signature="double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.axis.PeriodAxis" />
	<method signature="org.jfree.data.time.RegularTimePeriod getLast()" class="org.jfree.chart.axis.PeriodAxis" />
	<method signature="void setMinorTickMarkPaint(java.awt.Paint)" class="org.jfree.chart.axis.PeriodAxis" />
	<method signature="java.awt.Stroke getMinorTickMarkStroke()" class="org.jfree.chart.axis.PeriodAxis" />
	<method signature="org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge,org.jfree.chart.axis.AxisSpace)" class="org.jfree.chart.axis.PeriodAxis" />
	<method signature="org.jfree.data.time.RegularTimePeriod getFirst()" class="org.jfree.chart.axis.PeriodAxis" />
	<method signature="float getMinorTickMarkOutsideLength()" class="org.jfree.chart.axis.PeriodAxis" />
	<method signature="void setMinorTickMarkOutsideLength(float)" class="org.jfree.chart.axis.PeriodAxis" />
	<method signature="java.util.List refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.axis.PeriodAxis" />
	<method signature="java.lang.Class getAutoRangeTimePeriodClass()" class="org.jfree.chart.axis.PeriodAxis" />
	<method signature="void setLabelInfo(org.jfree.chart.axis.PeriodAxisLabelInfo[])" class="org.jfree.chart.axis.PeriodAxis" />
	<class name="org.jfree.ui.L1R3ButtonPanel" />
	<method signature="javax.swing.JButton getRightButton3()" class="org.jfree.ui.L1R3ButtonPanel" />
	<method signature="javax.swing.JButton getRightButton2()" class="org.jfree.ui.L1R3ButtonPanel" />
	<method signature="javax.swing.JButton getLeftButton()" class="org.jfree.ui.L1R3ButtonPanel" />
	<method signature="javax.swing.JButton getRightButton1()" class="org.jfree.ui.L1R3ButtonPanel" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.jfree.ui.L1R3ButtonPanel" />
	<class name="freemarker.template.TemplateNumberModel" />
	<method signature="java.lang.Number getAsNumber()" class="freemarker.template.TemplateNumberModel" />
	<class name="org.apache.xerces.xs.AttributePSVI" />
	<method signature="org.apache.xerces.xs.XSAttributeDeclaration getAttributeDeclaration()" class="org.apache.xerces.xs.AttributePSVI" />
	<class name="com.google.zxing.common.DecoderResult" />
	<method signature="void &lt;init&gt;(byte[],java.lang.String,java.util.List,java.lang.String)" class="com.google.zxing.common.DecoderResult" />
	<method signature="java.lang.String getText()" class="com.google.zxing.common.DecoderResult" />
	<method signature="java.lang.String getECLevel()" class="com.google.zxing.common.DecoderResult" />
	<method signature="java.util.List getByteSegments()" class="com.google.zxing.common.DecoderResult" />
	<method signature="byte[] getRawBytes()" class="com.google.zxing.common.DecoderResult" />
	<class name="org.apache.xerces.impl.xs.XMLSchemaValidator$KeyValueStore" />
	<method signature="void &lt;init&gt;(org.apache.xerces.impl.xs.XMLSchemaValidator,org.apache.xerces.impl.xs.identity.UniqueOrKey)" class="org.apache.xerces.impl.xs.XMLSchemaValidator$KeyValueStore" />
	<class name="org.jfree.util.UnitType" />
	<method signature="int hashCode()" class="org.jfree.util.UnitType" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.util.UnitType" />
	<method signature="java.lang.String toString()" class="org.jfree.util.UnitType" />
	<class name="org.jfree.chart.renderer.GrayPaintScale" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.renderer.GrayPaintScale" />
	<method signature="int hashCode()" class="org.jfree.chart.renderer.GrayPaintScale" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.GrayPaintScale" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.GrayPaintScale" />
	<method signature="double getLowerBound()" class="org.jfree.chart.renderer.GrayPaintScale" />
	<method signature="double getUpperBound()" class="org.jfree.chart.renderer.GrayPaintScale" />
	<method signature="java.awt.Paint getPaint(double)" class="org.jfree.chart.renderer.GrayPaintScale" />
	<method signature="void &lt;init&gt;(double,double,int)" class="org.jfree.chart.renderer.GrayPaintScale" />
	<method signature="int getAlpha()" class="org.jfree.chart.renderer.GrayPaintScale" />
	<method signature="void &lt;init&gt;(double,double)" class="org.jfree.chart.renderer.GrayPaintScale" />
	<class name="org.jdom2.located.LocatedElement" />
	<method signature="void setLine(int)" class="org.jdom2.located.LocatedElement" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jdom2.located.LocatedElement" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="org.jdom2.located.LocatedElement" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String)" class="org.jdom2.located.LocatedElement" />
	<method signature="void &lt;init&gt;(java.lang.String,org.jdom2.Namespace)" class="org.jdom2.located.LocatedElement" />
	<method signature="int getLine()" class="org.jdom2.located.LocatedElement" />
	<method signature="int getColumn()" class="org.jdom2.located.LocatedElement" />
	<method signature="void setColumn(int)" class="org.jdom2.located.LocatedElement" />
	<class name="org.jfree.chart.urls.StandardPieURLGenerator" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.urls.StandardPieURLGenerator" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.urls.StandardPieURLGenerator" />
	<method signature="java.lang.String generateURL(org.jfree.data.general.PieDataset,java.lang.Comparable,int)" class="org.jfree.chart.urls.StandardPieURLGenerator" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.chart.urls.StandardPieURLGenerator" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="org.jfree.chart.urls.StandardPieURLGenerator" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String)" class="org.jfree.chart.urls.StandardPieURLGenerator" />
	<class name="org.jdom2.output.StAXStreamOutputter" />
	<method signature="void setStAXStreamProcessor(org.jdom2.output.support.StAXStreamProcessor)" class="org.jdom2.output.StAXStreamOutputter" />
	<method signature="org.jdom2.output.Format getFormat()" class="org.jdom2.output.StAXStreamOutputter" />
	<method signature="void output(org.jdom2.DocType,javax.xml.stream.XMLStreamWriter)" class="org.jdom2.output.StAXStreamOutputter" />
	<method signature="void output(java.util.List,javax.xml.stream.XMLStreamWriter)" class="org.jdom2.output.StAXStreamOutputter" />
	<method signature="void outputElementContent(org.jdom2.Element,javax.xml.stream.XMLStreamWriter)" class="org.jdom2.output.StAXStreamOutputter" />
	<method signature="void output(org.jdom2.Document,javax.xml.stream.XMLStreamWriter)" class="org.jdom2.output.StAXStreamOutputter" />
	<method signature="void &lt;init&gt;(org.jdom2.output.Format)" class="org.jdom2.output.StAXStreamOutputter" />
	<method signature="void &lt;init&gt;(org.jdom2.output.Format,org.jdom2.output.support.StAXStreamProcessor)" class="org.jdom2.output.StAXStreamOutputter" />
	<method signature="void output(org.jdom2.Element,javax.xml.stream.XMLStreamWriter)" class="org.jdom2.output.StAXStreamOutputter" />
	<method signature="void output(org.jdom2.EntityRef,javax.xml.stream.XMLStreamWriter)" class="org.jdom2.output.StAXStreamOutputter" />
	<method signature="org.jdom2.output.StAXStreamOutputter clone()" class="org.jdom2.output.StAXStreamOutputter" />
	<method signature="org.jdom2.output.support.StAXStreamProcessor getStAXStream()" class="org.jdom2.output.StAXStreamOutputter" />
	<method signature="java.lang.Object clone()" class="org.jdom2.output.StAXStreamOutputter" />
	<method signature="void setFormat(org.jdom2.output.Format)" class="org.jdom2.output.StAXStreamOutputter" />
	<method signature="void &lt;init&gt;()" class="org.jdom2.output.StAXStreamOutputter" />
	<method signature="void output(org.jdom2.CDATA,javax.xml.stream.XMLStreamWriter)" class="org.jdom2.output.StAXStreamOutputter" />
	<method signature="void output(org.jdom2.Text,javax.xml.stream.XMLStreamWriter)" class="org.jdom2.output.StAXStreamOutputter" />
	<method signature="void &lt;init&gt;(org.jdom2.output.support.StAXStreamProcessor)" class="org.jdom2.output.StAXStreamOutputter" />
	<method signature="void output(org.jdom2.Comment,javax.xml.stream.XMLStreamWriter)" class="org.jdom2.output.StAXStreamOutputter" />
	<method signature="java.lang.String toString()" class="org.jdom2.output.StAXStreamOutputter" />
	<method signature="void output(org.jdom2.ProcessingInstruction,javax.xml.stream.XMLStreamWriter)" class="org.jdom2.output.StAXStreamOutputter" />
	<class name="org.apache.xerces.impl.dtd.models.DFAContentModel" />
	<method signature="int validate(org.apache.xerces.xni.QName[],int,int)" class="org.apache.xerces.impl.dtd.models.DFAContentModel" />
	<method signature="void &lt;init&gt;(org.apache.xerces.impl.dtd.models.CMNode,int,boolean)" class="org.apache.xerces.impl.dtd.models.DFAContentModel" />
	<class name="org.apache.xerces.xni.parser.XMLComponent" />
	<method signature="java.lang.String[] getRecognizedProperties()" class="org.apache.xerces.xni.parser.XMLComponent" />
	<method signature="java.lang.Object getPropertyDefault(java.lang.String)" class="org.apache.xerces.xni.parser.XMLComponent" />
	<method signature="java.lang.String[] getRecognizedFeatures()" class="org.apache.xerces.xni.parser.XMLComponent" />
	<method signature="java.lang.Boolean getFeatureDefault(java.lang.String)" class="org.apache.xerces.xni.parser.XMLComponent" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="org.apache.xerces.xni.parser.XMLComponent" />
	<method signature="void setFeature(java.lang.String,boolean)" class="org.apache.xerces.xni.parser.XMLComponent" />
	<method signature="void reset(org.apache.xerces.xni.parser.XMLComponentManager)" class="org.apache.xerces.xni.parser.XMLComponent" />
	<class name="com.google.zxing.client.result.AddressBookAUResultParser" />
	<method signature="com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result)" class="com.google.zxing.client.result.AddressBookAUResultParser" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.client.result.AddressBookAUResultParser" />
	<method signature="com.google.zxing.client.result.AddressBookParsedResult parse(com.google.zxing.Result)" class="com.google.zxing.client.result.AddressBookAUResultParser" />
	<class name="org.jfree.chart.plot.dial.DialScale" />
	<method signature="double angleToValue(double)" class="org.jfree.chart.plot.dial.DialScale" />
	<method signature="double valueToAngle(double)" class="org.jfree.chart.plot.dial.DialScale" />
	<class name="org.jfree.util.Log" />
	<method signature="boolean isWarningEnabled()" class="org.jfree.util.Log" />
	<method signature="void debug(java.lang.Object)" class="org.jfree.util.Log" />
	<method signature="boolean isDebugEnabled()" class="org.jfree.util.Log" />
	<method signature="void info(java.lang.Object,java.lang.Exception)" class="org.jfree.util.Log" />
	<method signature="org.jfree.util.LogTarget[] getTargets()" class="org.jfree.util.Log" />
	<method signature="void replaceTargets(org.jfree.util.LogTarget)" class="org.jfree.util.Log" />
	<method signature="void removeTarget(org.jfree.util.LogTarget)" class="org.jfree.util.Log" />
	<method signature="void warn(java.lang.Object)" class="org.jfree.util.Log" />
	<method signature="void addTarget(org.jfree.util.LogTarget)" class="org.jfree.util.Log" />
	<method signature="void error(java.lang.Object,java.lang.Exception)" class="org.jfree.util.Log" />
	<method signature="void init()" class="org.jfree.util.Log" />
	<method signature="org.jfree.util.LogContext createContext(java.lang.String)" class="org.jfree.util.Log" />
	<method signature="void log(int,java.lang.Object,java.lang.Exception)" class="org.jfree.util.Log" />
	<method signature="boolean isErrorEnabled()" class="org.jfree.util.Log" />
	<method signature="void warn(java.lang.Object,java.lang.Exception)" class="org.jfree.util.Log" />
	<method signature="boolean isInfoEnabled()" class="org.jfree.util.Log" />
	<method signature="void error(java.lang.Object)" class="org.jfree.util.Log" />
	<method signature="int getDebuglevel()" class="org.jfree.util.Log" />
	<method signature="org.jfree.util.Log getInstance()" class="org.jfree.util.Log" />
	<method signature="void debug(java.lang.Object,java.lang.Exception)" class="org.jfree.util.Log" />
	<method signature="void log(int,java.lang.Object)" class="org.jfree.util.Log" />
	<method signature="void info(java.lang.Object)" class="org.jfree.util.Log" />
	<method signature="org.jfree.util.LogContext createContext(java.lang.Class)" class="org.jfree.util.Log" />
	<class name="org.jfree.chart.Effect3D" />
	<method signature="double getXOffset()" class="org.jfree.chart.Effect3D" />
	<method signature="double getYOffset()" class="org.jfree.chart.Effect3D" />
	<class name="org.apache.xerces.xs.XSLoader" />
	<method signature="org.apache.xerces.xs.XSModel load(org.w3c.dom.ls.LSInput)" class="org.apache.xerces.xs.XSLoader" />
	<method signature="org.apache.xerces.xs.XSModel loadURIList(org.apache.xerces.xs.StringList)" class="org.apache.xerces.xs.XSLoader" />
	<method signature="org.w3c.dom.DOMConfiguration getConfig()" class="org.apache.xerces.xs.XSLoader" />
	<method signature="org.apache.xerces.xs.XSModel loadInputList(org.apache.xerces.xs.LSInputList)" class="org.apache.xerces.xs.XSLoader" />
	<method signature="org.apache.xerces.xs.XSModel loadURI(java.lang.String)" class="org.apache.xerces.xs.XSLoader" />
	<class name="org.jdom2.located.LocatedComment" />
	<method signature="void setLine(int)" class="org.jdom2.located.LocatedComment" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jdom2.located.LocatedComment" />
	<method signature="int getLine()" class="org.jdom2.located.LocatedComment" />
	<method signature="int getColumn()" class="org.jdom2.located.LocatedComment" />
	<method signature="void setColumn(int)" class="org.jdom2.located.LocatedComment" />
	<class name="org.jfree.chart.labels.IntervalXYItemLabelGenerator" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.labels.IntervalXYItemLabelGenerator" />
	<method signature="void &lt;init&gt;(java.lang.String,java.text.DateFormat,java.text.NumberFormat)" class="org.jfree.chart.labels.IntervalXYItemLabelGenerator" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.labels.IntervalXYItemLabelGenerator" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.labels.IntervalXYItemLabelGenerator" />
	<method signature="void &lt;init&gt;(java.lang.String,java.text.DateFormat,java.text.DateFormat)" class="org.jfree.chart.labels.IntervalXYItemLabelGenerator" />
	<method signature="void &lt;init&gt;(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" class="org.jfree.chart.labels.IntervalXYItemLabelGenerator" />
	<method signature="void &lt;init&gt;(java.lang.String,java.text.NumberFormat,java.text.DateFormat)" class="org.jfree.chart.labels.IntervalXYItemLabelGenerator" />
	<method signature="java.lang.String generateLabel(org.jfree.data.xy.XYDataset,int,int)" class="org.jfree.chart.labels.IntervalXYItemLabelGenerator" />
	<class name="javax.annotation.WillCloseWhenClosed" />
	<class name="org.jfree.chart.axis.TickUnit" />
	<method signature="int compareTo(java.lang.Object)" class="org.jfree.chart.axis.TickUnit" />
	<method signature="void &lt;init&gt;(double)" class="org.jfree.chart.axis.TickUnit" />
	<method signature="int hashCode()" class="org.jfree.chart.axis.TickUnit" />
	<method signature="double getSize()" class="org.jfree.chart.axis.TickUnit" />
	<method signature="java.lang.String valueToString(double)" class="org.jfree.chart.axis.TickUnit" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.axis.TickUnit" />
	<method signature="void &lt;init&gt;(double,int)" class="org.jfree.chart.axis.TickUnit" />
	<method signature="int getMinorTickCount()" class="org.jfree.chart.axis.TickUnit" />
	<class name="com.google.zxing.common.DetectorResult" />
	<method signature="com.google.zxing.ResultPoint[] getPoints()" class="com.google.zxing.common.DetectorResult" />
	<method signature="void &lt;init&gt;(com.google.zxing.common.BitMatrix,com.google.zxing.ResultPoint[])" class="com.google.zxing.common.DetectorResult" />
	<method signature="com.google.zxing.common.BitMatrix getBits()" class="com.google.zxing.common.DetectorResult" />
	<class name="freemarker.template.Template" />
	<method signature="java.lang.String getName()" class="freemarker.template.Template" />
	<method signature="freemarker.template.Configuration getConfiguration()" class="freemarker.template.Template" />
	<method signature="void addMacro(freemarker.core.Macro)" class="freemarker.template.Template" />
	<method signature="void dump(java.io.Writer)" class="freemarker.template.Template" />
	<method signature="freemarker.template.Template getPlainTextTemplate(java.lang.String,java.lang.String,freemarker.template.Configuration)" class="freemarker.template.Template" />
	<method signature="freemarker.core.TemplateElement getRootTreeNode()" class="freemarker.template.Template" />
	<method signature="void setEncoding(java.lang.String)" class="freemarker.template.Template" />
	<method signature="java.lang.String getEncoding()" class="freemarker.template.Template" />
	<method signature="java.util.Map getMacros()" class="freemarker.template.Template" />
	<method signature="java.lang.String getSource(int,int,int,int)" class="freemarker.template.Template" />
	<method signature="void &lt;init&gt;(java.lang.String,java.io.Reader,freemarker.template.Configuration,java.lang.String)" class="freemarker.template.Template" />
	<method signature="void dump(java.io.PrintStream)" class="freemarker.template.Template" />
	<method signature="void addImport(freemarker.core.LibraryLoad)" class="freemarker.template.Template" />
	<method signature="javax.swing.tree.TreePath containingElements(int,int)" class="freemarker.template.Template" />
	<method signature="void &lt;init&gt;(java.lang.String,java.io.Reader,freemarker.template.Configuration)" class="freemarker.template.Template" />
	<method signature="java.lang.String getPrefixedName(java.lang.String,java.lang.String)" class="freemarker.template.Template" />
	<method signature="void process(java.lang.Object,java.io.Writer)" class="freemarker.template.Template" />
	<method signature="void addPrefixNSMapping(java.lang.String,java.lang.String)" class="freemarker.template.Template" />
	<method signature="void process(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)" class="freemarker.template.Template" />
	<method signature="freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)" class="freemarker.template.Template" />
	<method signature="java.lang.String getDefaultNS()" class="freemarker.template.Template" />
	<method signature="void process(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper,freemarker.template.TemplateNodeModel)" class="freemarker.template.Template" />
	<method signature="freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer)" class="freemarker.template.Template" />
	<method signature="void &lt;init&gt;(java.lang.String,java.io.Reader)" class="freemarker.template.Template" />
	<method signature="java.lang.String toString()" class="freemarker.template.Template" />
	<method signature="java.util.List getImports()" class="freemarker.template.Template" />
	<method signature="java.lang.String getPrefixForNamespace(java.lang.String)" class="freemarker.template.Template" />
	<method signature="java.lang.String getNamespaceForPrefix(java.lang.String)" class="freemarker.template.Template" />
	<class name="org.jfree.data.time.Year" />
	<method signature="int getYear()" class="org.jfree.data.time.Year" />
	<method signature="int compareTo(java.lang.Object)" class="org.jfree.data.time.Year" />
	<method signature="int hashCode()" class="org.jfree.data.time.Year" />
	<method signature="void &lt;init&gt;(java.util.Date,java.util.TimeZone)" class="org.jfree.data.time.Year" />
	<method signature="org.jfree.data.time.RegularTimePeriod previous()" class="org.jfree.data.time.Year" />
	<method signature="long getLastMillisecond()" class="org.jfree.data.time.Year" />
	<method signature="org.jfree.data.time.RegularTimePeriod next()" class="org.jfree.data.time.Year" />
	<method signature="long getLastMillisecond(java.util.Calendar)" class="org.jfree.data.time.Year" />
	<method signature="void &lt;init&gt;(int)" class="org.jfree.data.time.Year" />
	<method signature="void &lt;init&gt;(java.util.Date)" class="org.jfree.data.time.Year" />
	<method signature="org.jfree.data.time.Year parseYear(java.lang.String)" class="org.jfree.data.time.Year" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.time.Year" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.time.Year" />
	<method signature="long getFirstMillisecond()" class="org.jfree.data.time.Year" />
	<method signature="void peg(java.util.Calendar)" class="org.jfree.data.time.Year" />
	<method signature="void &lt;init&gt;(java.util.Date,java.util.TimeZone,java.util.Locale)" class="org.jfree.data.time.Year" />
	<method signature="java.lang.String toString()" class="org.jfree.data.time.Year" />
	<method signature="long getFirstMillisecond(java.util.Calendar)" class="org.jfree.data.time.Year" />
	<method signature="long getSerialIndex()" class="org.jfree.data.time.Year" />
	<class name="org.jfree.chart.renderer.xy.CyclicXYItemRenderer" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)" class="org.jfree.chart.renderer.xy.CyclicXYItemRenderer" />
	<method signature="void &lt;init&gt;(int)" class="org.jfree.chart.renderer.xy.CyclicXYItemRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.xy.CyclicXYItemRenderer" />
	<method signature="void &lt;init&gt;(int,org.jfree.chart.labels.XYToolTipGenerator)" class="org.jfree.chart.renderer.xy.CyclicXYItemRenderer" />
	<method signature="void &lt;init&gt;(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" class="org.jfree.chart.renderer.xy.CyclicXYItemRenderer" />
	<class name="org.apache.html.dom.HTMLFrameElementImpl" />
	<method signature="void setMarginWidth(java.lang.String)" class="org.apache.html.dom.HTMLFrameElementImpl" />
	<method signature="java.lang.String getName()" class="org.apache.html.dom.HTMLFrameElementImpl" />
	<method signature="java.lang.String getSrc()" class="org.apache.html.dom.HTMLFrameElementImpl" />
	<method signature="void setFrameBorder(java.lang.String)" class="org.apache.html.dom.HTMLFrameElementImpl" />
	<method signature="java.lang.String getMarginHeight()" class="org.apache.html.dom.HTMLFrameElementImpl" />
	<method signature="java.lang.String getScrolling()" class="org.apache.html.dom.HTMLFrameElementImpl" />
	<method signature="void setMarginHeight(java.lang.String)" class="org.apache.html.dom.HTMLFrameElementImpl" />
	<method signature="java.lang.String getLongDesc()" class="org.apache.html.dom.HTMLFrameElementImpl" />
	<method signature="void setScrolling(java.lang.String)" class="org.apache.html.dom.HTMLFrameElementImpl" />
	<method signature="void setName(java.lang.String)" class="org.apache.html.dom.HTMLFrameElementImpl" />
	<method signature="boolean getNoResize()" class="org.apache.html.dom.HTMLFrameElementImpl" />
	<method signature="void setSrc(java.lang.String)" class="org.apache.html.dom.HTMLFrameElementImpl" />
	<method signature="java.lang.String getMarginWidth()" class="org.apache.html.dom.HTMLFrameElementImpl" />
	<method signature="void setNoResize(boolean)" class="org.apache.html.dom.HTMLFrameElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLFrameElementImpl" />
	<method signature="java.lang.String getFrameBorder()" class="org.apache.html.dom.HTMLFrameElementImpl" />
	<method signature="void setLongDesc(java.lang.String)" class="org.apache.html.dom.HTMLFrameElementImpl" />
	<class name="org.apache.xerces.impl.dv.xs.Base64BinaryDV" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.xs.Base64BinaryDV" />
	<method signature="java.lang.Object getActualValue(java.lang.String,org.apache.xerces.impl.dv.ValidationContext)" class="org.apache.xerces.impl.dv.xs.Base64BinaryDV" />
	<method signature="int getDataLength(java.lang.Object)" class="org.apache.xerces.impl.dv.xs.Base64BinaryDV" />
	<method signature="short getAllowedFacets()" class="org.apache.xerces.impl.dv.xs.Base64BinaryDV" />
	<class name="org.jfree.chart.axis.ModuloAxis" />
	<method signature="double getDisplayEnd()" class="org.jfree.chart.axis.ModuloAxis" />
	<method signature="double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.axis.ModuloAxis" />
	<method signature="void setDisplayRange(double,double)" class="org.jfree.chart.axis.ModuloAxis" />
	<method signature="double lengthToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.axis.ModuloAxis" />
	<method signature="void &lt;init&gt;(java.lang.String,org.jfree.data.Range)" class="org.jfree.chart.axis.ModuloAxis" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.axis.ModuloAxis" />
	<method signature="double getDisplayStart()" class="org.jfree.chart.axis.ModuloAxis" />
	<method signature="void resizeRange(double,double)" class="org.jfree.chart.axis.ModuloAxis" />
	<method signature="void resizeRange(double)" class="org.jfree.chart.axis.ModuloAxis" />
	<method signature="double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.axis.ModuloAxis" />
	<class name="org.jfree.chart.urls.XYZURLGenerator" />
	<method signature="java.lang.String generateURL(org.jfree.data.xy.XYZDataset,int,int)" class="org.jfree.chart.urls.XYZURLGenerator" />
	<class name="tourma.views.system.JdgRevisions" />
	<method signature="void &lt;init&gt;(java.awt.Frame,boolean)" class="tourma.views.system.JdgRevisions" />
	<class name="com.google.zxing.common.detector.MonochromeRectangleDetector" />
	<method signature="void &lt;init&gt;(com.google.zxing.common.BitMatrix)" class="com.google.zxing.common.detector.MonochromeRectangleDetector" />
	<method signature="com.google.zxing.ResultPoint[] detect()" class="com.google.zxing.common.detector.MonochromeRectangleDetector" />
	<class name="org.apache.xml.serialize.HTMLdtd" />
	<method signature="boolean isBoolean(java.lang.String,java.lang.String)" class="org.apache.xml.serialize.HTMLdtd" />
	<method signature="boolean isClosing(java.lang.String,java.lang.String)" class="org.apache.xml.serialize.HTMLdtd" />
	<method signature="boolean isURI(java.lang.String,java.lang.String)" class="org.apache.xml.serialize.HTMLdtd" />
	<method signature="int charFromName(java.lang.String)" class="org.apache.xml.serialize.HTMLdtd" />
	<method signature="boolean isElementContent(java.lang.String)" class="org.apache.xml.serialize.HTMLdtd" />
	<method signature="boolean isOnlyOpening(java.lang.String)" class="org.apache.xml.serialize.HTMLdtd" />
	<method signature="boolean isEmptyTag(java.lang.String)" class="org.apache.xml.serialize.HTMLdtd" />
	<method signature="boolean isPreserveSpace(java.lang.String)" class="org.apache.xml.serialize.HTMLdtd" />
	<method signature="boolean isOptionalClosing(java.lang.String)" class="org.apache.xml.serialize.HTMLdtd" />
	<method signature="void &lt;init&gt;()" class="org.apache.xml.serialize.HTMLdtd" />
	<method signature="java.lang.String fromChar(int)" class="org.apache.xml.serialize.HTMLdtd" />
	<class name="org.apache.xerces.util.MessageFormatter" />
	<method signature="java.lang.String formatMessage(java.util.Locale,java.lang.String,java.lang.Object[])" class="org.apache.xerces.util.MessageFormatter" />
	<class name="com.toedter.calendar.JSpinnerDateEditor" />
	<method signature="void setLocale(java.util.Locale)" class="com.toedter.calendar.JSpinnerDateEditor" />
	<method signature="java.util.Date getDate()" class="com.toedter.calendar.JSpinnerDateEditor" />
	<method signature="void setMaxSelectableDate(java.util.Date)" class="com.toedter.calendar.JSpinnerDateEditor" />
	<method signature="void setDate(java.util.Date)" class="com.toedter.calendar.JSpinnerDateEditor" />
	<method signature="void setEnabled(boolean)" class="com.toedter.calendar.JSpinnerDateEditor" />
	<method signature="void setDate(java.util.Date,boolean)" class="com.toedter.calendar.JSpinnerDateEditor" />
	<method signature="void focusLost(java.awt.event.FocusEvent)" class="com.toedter.calendar.JSpinnerDateEditor" />
	<method signature="java.util.Date getMaxSelectableDate()" class="com.toedter.calendar.JSpinnerDateEditor" />
	<method signature="void setSelectableDateRange(java.util.Date,java.util.Date)" class="com.toedter.calendar.JSpinnerDateEditor" />
	<method signature="void stateChanged(javax.swing.event.ChangeEvent)" class="com.toedter.calendar.JSpinnerDateEditor" />
	<method signature="void setMinSelectableDate(java.util.Date)" class="com.toedter.calendar.JSpinnerDateEditor" />
	<method signature="java.lang.String getDateFormatString()" class="com.toedter.calendar.JSpinnerDateEditor" />
	<method signature="void &lt;init&gt;()" class="com.toedter.calendar.JSpinnerDateEditor" />
	<method signature="void setDateFormatString(java.lang.String)" class="com.toedter.calendar.JSpinnerDateEditor" />
	<method signature="java.util.Date getMinSelectableDate()" class="com.toedter.calendar.JSpinnerDateEditor" />
	<method signature="javax.swing.JComponent getUiComponent()" class="com.toedter.calendar.JSpinnerDateEditor" />
	<method signature="void focusGained(java.awt.event.FocusEvent)" class="com.toedter.calendar.JSpinnerDateEditor" />
	<class name="org.apache.xerces.dom.PSVIAttrNSImpl" />
	<method signature="org.apache.xerces.xs.XSSimpleTypeDefinition getMemberTypeDefinition()" class="org.apache.xerces.dom.PSVIAttrNSImpl" />
	<method signature="org.apache.xerces.xs.XSValue getSchemaValue()" class="org.apache.xerces.dom.PSVIAttrNSImpl" />
	<method signature="org.apache.xerces.xs.XSTypeDefinition getTypeDefinition()" class="org.apache.xerces.dom.PSVIAttrNSImpl" />
	<method signature="java.lang.String getValidationContext()" class="org.apache.xerces.dom.PSVIAttrNSImpl" />
	<method signature="org.apache.xerces.xs.ShortList getItemValueTypes()" class="org.apache.xerces.dom.PSVIAttrNSImpl" />
	<method signature="org.apache.xerces.xs.XSAttributeDeclaration getAttributeDeclaration()" class="org.apache.xerces.dom.PSVIAttrNSImpl" />
	<method signature="org.apache.xerces.xs.StringList getErrorMessages()" class="org.apache.xerces.dom.PSVIAttrNSImpl" />
	<method signature="short getValidity()" class="org.apache.xerces.dom.PSVIAttrNSImpl" />
	<method signature="short getActualNormalizedValueType()" class="org.apache.xerces.dom.PSVIAttrNSImpl" />
	<method signature="boolean getIsSchemaSpecified()" class="org.apache.xerces.dom.PSVIAttrNSImpl" />
	<method signature="java.lang.Object getActualNormalizedValue()" class="org.apache.xerces.dom.PSVIAttrNSImpl" />
	<method signature="java.lang.String getSchemaDefault()" class="org.apache.xerces.dom.PSVIAttrNSImpl" />
	<method signature="org.apache.xerces.xs.StringList getErrorCodes()" class="org.apache.xerces.dom.PSVIAttrNSImpl" />
	<method signature="void &lt;init&gt;(org.apache.xerces.dom.CoreDocumentImpl,java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.dom.PSVIAttrNSImpl" />
	<method signature="void setPSVI(org.apache.xerces.xs.AttributePSVI)" class="org.apache.xerces.dom.PSVIAttrNSImpl" />
	<method signature="short getValidationAttempted()" class="org.apache.xerces.dom.PSVIAttrNSImpl" />
	<method signature="java.lang.String getSchemaNormalizedValue()" class="org.apache.xerces.dom.PSVIAttrNSImpl" />
	<method signature="void &lt;init&gt;(org.apache.xerces.dom.CoreDocumentImpl,java.lang.String,java.lang.String)" class="org.apache.xerces.dom.PSVIAttrNSImpl" />
	<class name="net.jcip.annotations.Immutable" />
	<class name="org.apache.xml.serialize.EncodingInfo" />
	<method signature="java.lang.String getIANAName()" class="org.apache.xml.serialize.EncodingInfo" />
	<method signature="boolean isPrintable(char)" class="org.apache.xml.serialize.EncodingInfo" />
	<method signature="java.io.Writer getWriter(java.io.OutputStream)" class="org.apache.xml.serialize.EncodingInfo" />
	<method signature="void testJavaEncodingName(java.lang.String)" class="org.apache.xml.serialize.EncodingInfo" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,int)" class="org.apache.xml.serialize.EncodingInfo" />
	<class name="org.jfree.chart.labels.StandardXYToolTipGenerator" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.labels.StandardXYToolTipGenerator" />
	<method signature="void &lt;init&gt;(java.lang.String,java.text.DateFormat,java.text.NumberFormat)" class="org.jfree.chart.labels.StandardXYToolTipGenerator" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.labels.StandardXYToolTipGenerator" />
	<method signature="org.jfree.chart.labels.StandardXYToolTipGenerator getTimeSeriesInstance()" class="org.jfree.chart.labels.StandardXYToolTipGenerator" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.labels.StandardXYToolTipGenerator" />
	<method signature="void &lt;init&gt;(java.lang.String,java.text.DateFormat,java.text.DateFormat)" class="org.jfree.chart.labels.StandardXYToolTipGenerator" />
	<method signature="void &lt;init&gt;(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" class="org.jfree.chart.labels.StandardXYToolTipGenerator" />
	<method signature="void &lt;init&gt;(java.lang.String,java.text.NumberFormat,java.text.DateFormat)" class="org.jfree.chart.labels.StandardXYToolTipGenerator" />
	<method signature="java.lang.String generateToolTip(org.jfree.data.xy.XYDataset,int,int)" class="org.jfree.chart.labels.StandardXYToolTipGenerator" />
	<class name="org.apache.xerces.dom.events.EventImpl" />
	<method signature="void initEvent(java.lang.String,boolean,boolean)" class="org.apache.xerces.dom.events.EventImpl" />
	<method signature="void stopPropagation()" class="org.apache.xerces.dom.events.EventImpl" />
	<method signature="void preventDefault()" class="org.apache.xerces.dom.events.EventImpl" />
	<method signature="org.w3c.dom.events.EventTarget getTarget()" class="org.apache.xerces.dom.events.EventImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.dom.events.EventImpl" />
	<method signature="boolean getBubbles()" class="org.apache.xerces.dom.events.EventImpl" />
	<method signature="java.lang.String getType()" class="org.apache.xerces.dom.events.EventImpl" />
	<method signature="long getTimeStamp()" class="org.apache.xerces.dom.events.EventImpl" />
	<method signature="org.w3c.dom.events.EventTarget getCurrentTarget()" class="org.apache.xerces.dom.events.EventImpl" />
	<method signature="short getEventPhase()" class="org.apache.xerces.dom.events.EventImpl" />
	<method signature="boolean getCancelable()" class="org.apache.xerces.dom.events.EventImpl" />
	<class name="javax.xml.stream.events.StartElement" />
	<method signature="java.util.Iterator getAttributes()" class="javax.xml.stream.events.StartElement" />
	<method signature="javax.xml.namespace.NamespaceContext getNamespaceContext()" class="javax.xml.stream.events.StartElement" />
	<method signature="java.util.Iterator getNamespaces()" class="javax.xml.stream.events.StartElement" />
	<method signature="javax.xml.namespace.QName getName()" class="javax.xml.stream.events.StartElement" />
	<method signature="java.lang.String getNamespaceURI(java.lang.String)" class="javax.xml.stream.events.StartElement" />
	<method signature="javax.xml.stream.events.Attribute getAttributeByName(javax.xml.namespace.QName)" class="javax.xml.stream.events.StartElement" />
	<class name="org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer" />
	<method signature="org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)" class="org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer" />
	<method signature="double getBoxWidth()" class="org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)" class="org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer" />
	<method signature="java.awt.Paint getBoxPaint()" class="org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer" />
	<method signature="java.awt.Paint getArtifactPaint()" class="org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer" />
	<method signature="void setArtifactPaint(java.awt.Paint)" class="org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer" />
	<method signature="void drawVerticalItem(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)" class="org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer" />
	<method signature="void &lt;init&gt;(double)" class="org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer" />
	<method signature="void setBoxPaint(java.awt.Paint)" class="org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer" />
	<method signature="boolean getFillBox()" class="org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer" />
	<method signature="void setBoxWidth(double)" class="org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer" />
	<method signature="void setFillBox(boolean)" class="org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer" />
	<method signature="void drawHorizontalItem(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)" class="org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer" />
	<class name="org.apache.xml.serialize.OutputFormat$DTD" />
	<method signature="void &lt;init&gt;()" class="org.apache.xml.serialize.OutputFormat$DTD" />
	<class name="org.apache.xerces.impl.dv.xs.MonthDayDV" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.xs.MonthDayDV" />
	<method signature="java.lang.Object getActualValue(java.lang.String,org.apache.xerces.impl.dv.ValidationContext)" class="org.apache.xerces.impl.dv.xs.MonthDayDV" />
	<class name="org.apache.xerces.dom.DOMNormalizer$XMLAttributesProxy" />
	<method signature="java.lang.String getType(java.lang.String)" class="org.apache.xerces.dom.DOMNormalizer$XMLAttributesProxy" />
	<method signature="java.lang.String getValue(java.lang.String)" class="org.apache.xerces.dom.DOMNormalizer$XMLAttributesProxy" />
	<method signature="void setName(int,org.apache.xerces.xni.QName)" class="org.apache.xerces.dom.DOMNormalizer$XMLAttributesProxy" />
	<method signature="void setSpecified(int,boolean)" class="org.apache.xerces.dom.DOMNormalizer$XMLAttributesProxy" />
	<method signature="void getName(int,org.apache.xerces.xni.QName)" class="org.apache.xerces.dom.DOMNormalizer$XMLAttributesProxy" />
	<method signature="java.lang.String getQName(int)" class="org.apache.xerces.dom.DOMNormalizer$XMLAttributesProxy" />
	<method signature="int getLength()" class="org.apache.xerces.dom.DOMNormalizer$XMLAttributesProxy" />
	<method signature="boolean isSpecified(int)" class="org.apache.xerces.dom.DOMNormalizer$XMLAttributesProxy" />
	<method signature="int getIndex(java.lang.String)" class="org.apache.xerces.dom.DOMNormalizer$XMLAttributesProxy" />
	<method signature="void setAugmentations(int,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.dom.DOMNormalizer$XMLAttributesProxy" />
	<method signature="void removeAllAttributes()" class="org.apache.xerces.dom.DOMNormalizer$XMLAttributesProxy" />
	<method signature="void setAttributes(org.apache.xerces.dom.AttributeMap,org.apache.xerces.dom.CoreDocumentImpl,org.apache.xerces.dom.ElementImpl)" class="org.apache.xerces.dom.DOMNormalizer$XMLAttributesProxy" />
	<method signature="void setNonNormalizedValue(int,java.lang.String)" class="org.apache.xerces.dom.DOMNormalizer$XMLAttributesProxy" />
	<method signature="int addAttribute(org.apache.xerces.xni.QName,java.lang.String,java.lang.String)" class="org.apache.xerces.dom.DOMNormalizer$XMLAttributesProxy" />
	<method signature="org.apache.xerces.xni.Augmentations getAugmentations(int)" class="org.apache.xerces.dom.DOMNormalizer$XMLAttributesProxy" />
	<method signature="void removeAttributeAt(int)" class="org.apache.xerces.dom.DOMNormalizer$XMLAttributesProxy" />
	<method signature="java.lang.String getValue(int)" class="org.apache.xerces.dom.DOMNormalizer$XMLAttributesProxy" />
	<method signature="java.lang.String getLocalName(int)" class="org.apache.xerces.dom.DOMNormalizer$XMLAttributesProxy" />
	<method signature="java.lang.String getType(int)" class="org.apache.xerces.dom.DOMNormalizer$XMLAttributesProxy" />
	<method signature="int getIndex(java.lang.String,java.lang.String)" class="org.apache.xerces.dom.DOMNormalizer$XMLAttributesProxy" />
	<method signature="void setType(int,java.lang.String)" class="org.apache.xerces.dom.DOMNormalizer$XMLAttributesProxy" />
	<method signature="java.lang.String getURI(int)" class="org.apache.xerces.dom.DOMNormalizer$XMLAttributesProxy" />
	<method signature="org.apache.xerces.xni.Augmentations getAugmentations(java.lang.String)" class="org.apache.xerces.dom.DOMNormalizer$XMLAttributesProxy" />
	<method signature="java.lang.String getPrefix(int)" class="org.apache.xerces.dom.DOMNormalizer$XMLAttributesProxy" />
	<method signature="void setValue(int,java.lang.String)" class="org.apache.xerces.dom.DOMNormalizer$XMLAttributesProxy" />
	<method signature="org.apache.xerces.xni.Augmentations getAugmentations(java.lang.String,java.lang.String)" class="org.apache.xerces.dom.DOMNormalizer$XMLAttributesProxy" />
	<method signature="java.lang.String getType(java.lang.String,java.lang.String)" class="org.apache.xerces.dom.DOMNormalizer$XMLAttributesProxy" />
	<method signature="java.lang.String getNonNormalizedValue(int)" class="org.apache.xerces.dom.DOMNormalizer$XMLAttributesProxy" />
	<method signature="java.lang.String getValue(java.lang.String,java.lang.String)" class="org.apache.xerces.dom.DOMNormalizer$XMLAttributesProxy" />
	<class name="org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeBuilder" />
	<method signature="org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeBuilder withLowerBounds(java.lang.reflect.Type[])" class="org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeBuilder" />
	<method signature="java.lang.reflect.WildcardType build()" class="org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeBuilder" />
	<method signature="org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeBuilder withUpperBounds(java.lang.reflect.Type[])" class="org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeBuilder" />
	<method signature="java.lang.Object build()" class="org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeBuilder" />
	<class name="org.w3c.dom.html.HTMLDivElement" />
	<method signature="void setAlign(java.lang.String)" class="org.w3c.dom.html.HTMLDivElement" />
	<method signature="java.lang.String getAlign()" class="org.w3c.dom.html.HTMLDivElement" />
	<class name="com.google.zxing.client.result.GeoParsedResult" />
	<method signature="double getAltitude()" class="com.google.zxing.client.result.GeoParsedResult" />
	<method signature="double getLongitude()" class="com.google.zxing.client.result.GeoParsedResult" />
	<method signature="java.lang.String getDisplayResult()" class="com.google.zxing.client.result.GeoParsedResult" />
	<method signature="double getLatitude()" class="com.google.zxing.client.result.GeoParsedResult" />
	<method signature="java.lang.String getQuery()" class="com.google.zxing.client.result.GeoParsedResult" />
	<method signature="java.lang.String getGeoURI()" class="com.google.zxing.client.result.GeoParsedResult" />
	<class name="org.apache.xerces.impl.dv.xs.FloatDV" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.xs.FloatDV" />
	<method signature="java.lang.Object getActualValue(java.lang.String,org.apache.xerces.impl.dv.ValidationContext)" class="org.apache.xerces.impl.dv.xs.FloatDV" />
	<method signature="boolean isIdentical(java.lang.Object,java.lang.Object)" class="org.apache.xerces.impl.dv.xs.FloatDV" />
	<method signature="int compare(java.lang.Object,java.lang.Object)" class="org.apache.xerces.impl.dv.xs.FloatDV" />
	<method signature="short getAllowedFacets()" class="org.apache.xerces.impl.dv.xs.FloatDV" />
	<class name="com.toedter.components.JLocaleChooserBeanInfo" />
	<method signature="void &lt;init&gt;()" class="com.toedter.components.JLocaleChooserBeanInfo" />
	<class name="com.google.zxing.common.reedsolomon.ReedSolomonEncoder" />
	<method signature="void encode(int[],int)" class="com.google.zxing.common.reedsolomon.ReedSolomonEncoder" />
	<method signature="void &lt;init&gt;(com.google.zxing.common.reedsolomon.GenericGF)" class="com.google.zxing.common.reedsolomon.ReedSolomonEncoder" />
	<class name="edu.umd.cs.findbugs.annotations.Priority" />
	<method signature="edu.umd.cs.findbugs.annotations.Priority valueOf(java.lang.String)" class="edu.umd.cs.findbugs.annotations.Priority" />
	<method signature="int getPriorityValue()" class="edu.umd.cs.findbugs.annotations.Priority" />
	<method signature="edu.umd.cs.findbugs.annotations.Priority[] values()" class="edu.umd.cs.findbugs.annotations.Priority" />
	<class name="freemarker.template.SimpleNumber" />
	<method signature="void &lt;init&gt;(float)" class="freemarker.template.SimpleNumber" />
	<method signature="void &lt;init&gt;(double)" class="freemarker.template.SimpleNumber" />
	<method signature="void &lt;init&gt;(int)" class="freemarker.template.SimpleNumber" />
	<method signature="void &lt;init&gt;(long)" class="freemarker.template.SimpleNumber" />
	<method signature="java.lang.Number getAsNumber()" class="freemarker.template.SimpleNumber" />
	<method signature="void &lt;init&gt;(java.lang.Number)" class="freemarker.template.SimpleNumber" />
	<method signature="void &lt;init&gt;(byte)" class="freemarker.template.SimpleNumber" />
	<method signature="java.lang.String toString()" class="freemarker.template.SimpleNumber" />
	<method signature="void &lt;init&gt;(short)" class="freemarker.template.SimpleNumber" />
	<class name="org.apache.xml.serialize.OutputFormat" />
	<method signature="void setOmitDocumentType(boolean)" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="void setIndent(int)" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="java.lang.String getMediaType()" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="java.lang.String getMethod()" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="java.lang.String getDoctypeSystem()" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="void setEncoding(org.apache.xml.serialize.EncodingInfo)" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="boolean isNonEscapingElement(java.lang.String)" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="boolean getPreserveEmptyAttributes()" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="java.lang.String getEncoding()" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,boolean)" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="void &lt;init&gt;()" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="boolean setAllowJavaNames()" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="void setCDataElements(java.lang.String[])" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="int getIndent()" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="int getLineWidth()" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="void setPreserveEmptyAttributes(boolean)" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="void setIndenting(boolean)" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="java.lang.String whichMediaType(java.lang.String)" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="boolean getStandalone()" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="java.lang.String whichDoctypeSystem(org.w3c.dom.Document)" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="java.lang.String[] getCDataElements()" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="void setNonEscapingElements(java.lang.String[])" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="void setVersion(java.lang.String)" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="void setMediaType(java.lang.String)" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="char getLastPrintable()" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="boolean getOmitComments()" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="void setLineSeparator(java.lang.String)" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="void setPreserveSpace(boolean)" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="void setEncoding(java.lang.String)" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="boolean getPreserveSpace()" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="void setLineWidth(int)" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="void setAllowJavaNames(boolean)" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="void setOmitComments(boolean)" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="java.lang.String getVersion()" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="void setStandalone(boolean)" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="boolean isCDataElement(java.lang.String)" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="java.lang.String getLineSeparator()" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="java.lang.String getDoctypePublic()" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="void setMethod(java.lang.String)" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="void setDoctype(java.lang.String,java.lang.String)" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="java.lang.String[] getNonEscapingElements()" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="boolean getOmitXMLDeclaration()" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="void &lt;init&gt;(org.w3c.dom.Document)" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="boolean getIndenting()" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="java.lang.String whichDoctypePublic(org.w3c.dom.Document)" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="org.apache.xml.serialize.EncodingInfo getEncodingInfo()" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="java.lang.String whichMethod(org.w3c.dom.Document)" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="void &lt;init&gt;(org.w3c.dom.Document,java.lang.String,boolean)" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="void setOmitXMLDeclaration(boolean)" class="org.apache.xml.serialize.OutputFormat" />
	<method signature="boolean getOmitDocumentType()" class="org.apache.xml.serialize.OutputFormat" />
	<class name="org.jdom2.output.support.WalkerPRESERVE" />
	<method signature="void &lt;init&gt;(java.util.List)" class="org.jdom2.output.support.WalkerPRESERVE" />
	<method signature="boolean isCDATA()" class="org.jdom2.output.support.WalkerPRESERVE" />
	<method signature="boolean hasNext()" class="org.jdom2.output.support.WalkerPRESERVE" />
	<method signature="org.jdom2.Content next()" class="org.jdom2.output.support.WalkerPRESERVE" />
	<method signature="java.lang.String text()" class="org.jdom2.output.support.WalkerPRESERVE" />
	<method signature="boolean isAllText()" class="org.jdom2.output.support.WalkerPRESERVE" />
	<method signature="boolean isAllWhitespace()" class="org.jdom2.output.support.WalkerPRESERVE" />
	<class name="org.apache.html.dom.HTMLAppletElementImpl" />
	<method signature="void setAlign(java.lang.String)" class="org.apache.html.dom.HTMLAppletElementImpl" />
	<method signature="java.lang.String getObject()" class="org.apache.html.dom.HTMLAppletElementImpl" />
	<method signature="java.lang.String getName()" class="org.apache.html.dom.HTMLAppletElementImpl" />
	<method signature="java.lang.String getCodeBase()" class="org.apache.html.dom.HTMLAppletElementImpl" />
	<method signature="java.lang.String getWidth()" class="org.apache.html.dom.HTMLAppletElementImpl" />
	<method signature="java.lang.String getAlign()" class="org.apache.html.dom.HTMLAppletElementImpl" />
	<method signature="java.lang.String getHspace()" class="org.apache.html.dom.HTMLAppletElementImpl" />
	<method signature="java.lang.String getHeight()" class="org.apache.html.dom.HTMLAppletElementImpl" />
	<method signature="void setArchive(java.lang.String)" class="org.apache.html.dom.HTMLAppletElementImpl" />
	<method signature="void setCode(java.lang.String)" class="org.apache.html.dom.HTMLAppletElementImpl" />
	<method signature="void setAlt(java.lang.String)" class="org.apache.html.dom.HTMLAppletElementImpl" />
	<method signature="void setVspace(java.lang.String)" class="org.apache.html.dom.HTMLAppletElementImpl" />
	<method signature="void setName(java.lang.String)" class="org.apache.html.dom.HTMLAppletElementImpl" />
	<method signature="java.lang.String getArchive()" class="org.apache.html.dom.HTMLAppletElementImpl" />
	<method signature="void setCodeBase(java.lang.String)" class="org.apache.html.dom.HTMLAppletElementImpl" />
	<method signature="java.lang.String getAlt()" class="org.apache.html.dom.HTMLAppletElementImpl" />
	<method signature="void setHeight(java.lang.String)" class="org.apache.html.dom.HTMLAppletElementImpl" />
	<method signature="void setHspace(java.lang.String)" class="org.apache.html.dom.HTMLAppletElementImpl" />
	<method signature="void setObject(java.lang.String)" class="org.apache.html.dom.HTMLAppletElementImpl" />
	<method signature="void setWidth(java.lang.String)" class="org.apache.html.dom.HTMLAppletElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLAppletElementImpl" />
	<method signature="java.lang.String getCode()" class="org.apache.html.dom.HTMLAppletElementImpl" />
	<method signature="java.lang.String getVspace()" class="org.apache.html.dom.HTMLAppletElementImpl" />
	<class name="org.jfree.chart.urls.PieURLGenerator" />
	<method signature="java.lang.String generateURL(org.jfree.data.general.PieDataset,java.lang.Comparable,int)" class="org.jfree.chart.urls.PieURLGenerator" />
	<class name="edu.umd.cs.findbugs.annotations.DefaultAnnotationForMethods" />
	<method signature="edu.umd.cs.findbugs.annotations.Confidence confidence()" class="edu.umd.cs.findbugs.annotations.DefaultAnnotationForMethods" />
	<method signature="edu.umd.cs.findbugs.annotations.Priority priority()" class="edu.umd.cs.findbugs.annotations.DefaultAnnotationForMethods" />
	<method signature="java.lang.Class[] value()" class="edu.umd.cs.findbugs.annotations.DefaultAnnotationForMethods" />
	<class name="org.apache.xerces.xs.XSAnnotation" />
	<method signature="boolean writeAnnotation(java.lang.Object,short)" class="org.apache.xerces.xs.XSAnnotation" />
	<method signature="java.lang.String getAnnotationString()" class="org.apache.xerces.xs.XSAnnotation" />
	<class name="org.jfree.data.time.ohlc.OHLCSeries" />
	<method signature="org.jfree.data.time.RegularTimePeriod getPeriod(int)" class="org.jfree.data.time.ohlc.OHLCSeries" />
	<method signature="void &lt;init&gt;(java.lang.Comparable)" class="org.jfree.data.time.ohlc.OHLCSeries" />
	<method signature="org.jfree.data.ComparableObjectItem getDataItem(int)" class="org.jfree.data.time.ohlc.OHLCSeries" />
	<method signature="void add(org.jfree.data.time.RegularTimePeriod,double,double,double,double)" class="org.jfree.data.time.ohlc.OHLCSeries" />
	<method signature="org.jfree.data.ComparableObjectItem remove(int)" class="org.jfree.data.time.ohlc.OHLCSeries" />
	<class name="org.jfree.chart.imagemap.StandardURLTagFragmentGenerator" />
	<method signature="java.lang.String generateURLFragment(java.lang.String)" class="org.jfree.chart.imagemap.StandardURLTagFragmentGenerator" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.imagemap.StandardURLTagFragmentGenerator" />
	<class name="org.w3c.dom.css.CSSImportRule" />
	<method signature="org.w3c.dom.stylesheets.MediaList getMedia()" class="org.w3c.dom.css.CSSImportRule" />
	<method signature="java.lang.String getHref()" class="org.w3c.dom.css.CSSImportRule" />
	<method signature="org.w3c.dom.css.CSSStyleSheet getStyleSheet()" class="org.w3c.dom.css.CSSImportRule" />
	<class name="com.google.zxing.Reader" />
	<method signature="com.google.zxing.Result decode(com.google.zxing.BinaryBitmap)" class="com.google.zxing.Reader" />
	<method signature="void reset()" class="com.google.zxing.Reader" />
	<method signature="com.google.zxing.Result decode(com.google.zxing.BinaryBitmap,java.util.Map)" class="com.google.zxing.Reader" />
	<class name="org.jfree.ui.action.ActionMenuItem" />
	<method signature="void &lt;init&gt;(javax.swing.Icon)" class="org.jfree.ui.action.ActionMenuItem" />
	<method signature="void &lt;init&gt;()" class="org.jfree.ui.action.ActionMenuItem" />
	<method signature="void &lt;init&gt;(javax.swing.Action)" class="org.jfree.ui.action.ActionMenuItem" />
	<method signature="javax.swing.Action getAction()" class="org.jfree.ui.action.ActionMenuItem" />
	<method signature="void setEnabled(boolean)" class="org.jfree.ui.action.ActionMenuItem" />
	<method signature="void setAction(javax.swing.Action)" class="org.jfree.ui.action.ActionMenuItem" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.ui.action.ActionMenuItem" />
	<method signature="void &lt;init&gt;(java.lang.String,javax.swing.Icon)" class="org.jfree.ui.action.ActionMenuItem" />
	<method signature="void &lt;init&gt;(java.lang.String,int)" class="org.jfree.ui.action.ActionMenuItem" />
	<class name="org.jdom2.output.support.AbstractFormattedWalker$Trim" />
	<method signature="org.jdom2.output.support.AbstractFormattedWalker$Trim valueOf(java.lang.String)" class="org.jdom2.output.support.AbstractFormattedWalker$Trim" />
	<method signature="org.jdom2.output.support.AbstractFormattedWalker$Trim[] values()" class="org.jdom2.output.support.AbstractFormattedWalker$Trim" />
	<class name="org.jfree.chart.renderer.category.LayeredBarRenderer" />
	<method signature="void setSeriesBarWidth(int,double)" class="org.jfree.chart.renderer.category.LayeredBarRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.category.LayeredBarRenderer" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)" class="org.jfree.chart.renderer.category.LayeredBarRenderer" />
	<method signature="double getSeriesBarWidth(int)" class="org.jfree.chart.renderer.category.LayeredBarRenderer" />
	<class name="org.apache.xerces.xni.parser.XMLParserConfiguration" />
	<method signature="org.apache.xerces.xni.XMLDTDHandler getDTDHandler()" class="org.apache.xerces.xni.parser.XMLParserConfiguration" />
	<method signature="void setEntityResolver(org.apache.xerces.xni.parser.XMLEntityResolver)" class="org.apache.xerces.xni.parser.XMLParserConfiguration" />
	<method signature="void addRecognizedProperties(java.lang.String[])" class="org.apache.xerces.xni.parser.XMLParserConfiguration" />
	<method signature="void setLocale(java.util.Locale)" class="org.apache.xerces.xni.parser.XMLParserConfiguration" />
	<method signature="org.apache.xerces.xni.XMLDTDContentModelHandler getDTDContentModelHandler()" class="org.apache.xerces.xni.parser.XMLParserConfiguration" />
	<method signature="void parse(org.apache.xerces.xni.parser.XMLInputSource)" class="org.apache.xerces.xni.parser.XMLParserConfiguration" />
	<method signature="boolean getFeature(java.lang.String)" class="org.apache.xerces.xni.parser.XMLParserConfiguration" />
	<method signature="java.util.Locale getLocale()" class="org.apache.xerces.xni.parser.XMLParserConfiguration" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="org.apache.xerces.xni.parser.XMLParserConfiguration" />
	<method signature="org.apache.xerces.xni.XMLDocumentHandler getDocumentHandler()" class="org.apache.xerces.xni.parser.XMLParserConfiguration" />
	<method signature="void addRecognizedFeatures(java.lang.String[])" class="org.apache.xerces.xni.parser.XMLParserConfiguration" />
	<method signature="void setDocumentHandler(org.apache.xerces.xni.XMLDocumentHandler)" class="org.apache.xerces.xni.parser.XMLParserConfiguration" />
	<method signature="org.apache.xerces.xni.parser.XMLErrorHandler getErrorHandler()" class="org.apache.xerces.xni.parser.XMLParserConfiguration" />
	<method signature="void setErrorHandler(org.apache.xerces.xni.parser.XMLErrorHandler)" class="org.apache.xerces.xni.parser.XMLParserConfiguration" />
	<method signature="void setDTDContentModelHandler(org.apache.xerces.xni.XMLDTDContentModelHandler)" class="org.apache.xerces.xni.parser.XMLParserConfiguration" />
	<method signature="org.apache.xerces.xni.parser.XMLEntityResolver getEntityResolver()" class="org.apache.xerces.xni.parser.XMLParserConfiguration" />
	<method signature="void setDTDHandler(org.apache.xerces.xni.XMLDTDHandler)" class="org.apache.xerces.xni.parser.XMLParserConfiguration" />
	<method signature="void setFeature(java.lang.String,boolean)" class="org.apache.xerces.xni.parser.XMLParserConfiguration" />
	<method signature="java.lang.Object getProperty(java.lang.String)" class="org.apache.xerces.xni.parser.XMLParserConfiguration" />
	<class name="org.xml.sax.helpers.XMLReaderAdapter" />
	<method signature="void setDTDHandler(org.xml.sax.DTDHandler)" class="org.xml.sax.helpers.XMLReaderAdapter" />
	<method signature="void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" class="org.xml.sax.helpers.XMLReaderAdapter" />
	<method signature="void skippedEntity(java.lang.String)" class="org.xml.sax.helpers.XMLReaderAdapter" />
	<method signature="void setLocale(java.util.Locale)" class="org.xml.sax.helpers.XMLReaderAdapter" />
	<method signature="void startPrefixMapping(java.lang.String,java.lang.String)" class="org.xml.sax.helpers.XMLReaderAdapter" />
	<method signature="void &lt;init&gt;(org.xml.sax.XMLReader)" class="org.xml.sax.helpers.XMLReaderAdapter" />
	<method signature="void processingInstruction(java.lang.String,java.lang.String)" class="org.xml.sax.helpers.XMLReaderAdapter" />
	<method signature="void setDocumentLocator(org.xml.sax.Locator)" class="org.xml.sax.helpers.XMLReaderAdapter" />
	<method signature="void parse(org.xml.sax.InputSource)" class="org.xml.sax.helpers.XMLReaderAdapter" />
	<method signature="void endPrefixMapping(java.lang.String)" class="org.xml.sax.helpers.XMLReaderAdapter" />
	<method signature="void endElement(java.lang.String,java.lang.String,java.lang.String)" class="org.xml.sax.helpers.XMLReaderAdapter" />
	<method signature="void characters(char[],int,int)" class="org.xml.sax.helpers.XMLReaderAdapter" />
	<method signature="void &lt;init&gt;()" class="org.xml.sax.helpers.XMLReaderAdapter" />
	<method signature="void setDocumentHandler(org.xml.sax.DocumentHandler)" class="org.xml.sax.helpers.XMLReaderAdapter" />
	<method signature="void startDocument()" class="org.xml.sax.helpers.XMLReaderAdapter" />
	<method signature="void endDocument()" class="org.xml.sax.helpers.XMLReaderAdapter" />
	<method signature="void ignorableWhitespace(char[],int,int)" class="org.xml.sax.helpers.XMLReaderAdapter" />
	<method signature="void setEntityResolver(org.xml.sax.EntityResolver)" class="org.xml.sax.helpers.XMLReaderAdapter" />
	<method signature="void parse(java.lang.String)" class="org.xml.sax.helpers.XMLReaderAdapter" />
	<method signature="void setErrorHandler(org.xml.sax.ErrorHandler)" class="org.xml.sax.helpers.XMLReaderAdapter" />
	<class name="org.apache.xerces.impl.dtd.XMLContentSpec$Provider" />
	<method signature="boolean getContentSpec(int,org.apache.xerces.impl.dtd.XMLContentSpec)" class="org.apache.xerces.impl.dtd.XMLContentSpec$Provider" />
	<class name="org.jdom2.output.support.Walker" />
	<method signature="boolean isCDATA()" class="org.jdom2.output.support.Walker" />
	<method signature="boolean hasNext()" class="org.jdom2.output.support.Walker" />
	<method signature="org.jdom2.Content next()" class="org.jdom2.output.support.Walker" />
	<method signature="java.lang.String text()" class="org.jdom2.output.support.Walker" />
	<method signature="boolean isAllText()" class="org.jdom2.output.support.Walker" />
	<method signature="boolean isAllWhitespace()" class="org.jdom2.output.support.Walker" />
	<class name="org.jdom2.xpath.util.XPathDiagnosticImpl" />
	<method signature="java.util.List getFilteredResults()" class="org.jdom2.xpath.util.XPathDiagnosticImpl" />
	<method signature="void &lt;init&gt;(java.lang.Object,org.jdom2.xpath.XPathExpression,java.util.List,boolean)" class="org.jdom2.xpath.util.XPathDiagnosticImpl" />
	<method signature="java.lang.Object getContext()" class="org.jdom2.xpath.util.XPathDiagnosticImpl" />
	<method signature="boolean isFirstOnly()" class="org.jdom2.xpath.util.XPathDiagnosticImpl" />
	<method signature="java.lang.String toString()" class="org.jdom2.xpath.util.XPathDiagnosticImpl" />
	<method signature="org.jdom2.xpath.XPathExpression getXPathExpression()" class="org.jdom2.xpath.util.XPathDiagnosticImpl" />
	<method signature="java.util.List getRawResults()" class="org.jdom2.xpath.util.XPathDiagnosticImpl" />
	<method signature="java.util.List getResult()" class="org.jdom2.xpath.util.XPathDiagnosticImpl" />
	<class name="org.jfree.chart.plot.PieLabelDistributor" />
	<method signature="void sort()" class="org.jfree.chart.plot.PieLabelDistributor" />
	<method signature="void &lt;init&gt;(int)" class="org.jfree.chart.plot.PieLabelDistributor" />
	<method signature="java.lang.String toString()" class="org.jfree.chart.plot.PieLabelDistributor" />
	<method signature="void distributeLabels(double,double)" class="org.jfree.chart.plot.PieLabelDistributor" />
	<class name="org.w3c.dom.html.HTMLTableCellElement" />
	<method signature="void setBgColor(java.lang.String)" class="org.w3c.dom.html.HTMLTableCellElement" />
	<method signature="java.lang.String getCh()" class="org.w3c.dom.html.HTMLTableCellElement" />
	<method signature="void setVAlign(java.lang.String)" class="org.w3c.dom.html.HTMLTableCellElement" />
	<method signature="java.lang.String getWidth()" class="org.w3c.dom.html.HTMLTableCellElement" />
	<method signature="int getRowSpan()" class="org.w3c.dom.html.HTMLTableCellElement" />
	<method signature="boolean getNoWrap()" class="org.w3c.dom.html.HTMLTableCellElement" />
	<method signature="java.lang.String getHeight()" class="org.w3c.dom.html.HTMLTableCellElement" />
	<method signature="void setChOff(java.lang.String)" class="org.w3c.dom.html.HTMLTableCellElement" />
	<method signature="java.lang.String getChOff()" class="org.w3c.dom.html.HTMLTableCellElement" />
	<method signature="java.lang.String getAbbr()" class="org.w3c.dom.html.HTMLTableCellElement" />
	<method signature="int getColSpan()" class="org.w3c.dom.html.HTMLTableCellElement" />
	<method signature="void setNoWrap(boolean)" class="org.w3c.dom.html.HTMLTableCellElement" />
	<method signature="java.lang.String getVAlign()" class="org.w3c.dom.html.HTMLTableCellElement" />
	<method signature="void setAlign(java.lang.String)" class="org.w3c.dom.html.HTMLTableCellElement" />
	<method signature="void setAbbr(java.lang.String)" class="org.w3c.dom.html.HTMLTableCellElement" />
	<method signature="void setCellIndex(int)" class="org.w3c.dom.html.HTMLTableCellElement" />
	<method signature="java.lang.String getHeaders()" class="org.w3c.dom.html.HTMLTableCellElement" />
	<method signature="java.lang.String getAxis()" class="org.w3c.dom.html.HTMLTableCellElement" />
	<method signature="java.lang.String getAlign()" class="org.w3c.dom.html.HTMLTableCellElement" />
	<method signature="void setScope(java.lang.String)" class="org.w3c.dom.html.HTMLTableCellElement" />
	<method signature="int getCellIndex()" class="org.w3c.dom.html.HTMLTableCellElement" />
	<method signature="void setCh(java.lang.String)" class="org.w3c.dom.html.HTMLTableCellElement" />
	<method signature="void setHeaders(java.lang.String)" class="org.w3c.dom.html.HTMLTableCellElement" />
	<method signature="void setHeight(java.lang.String)" class="org.w3c.dom.html.HTMLTableCellElement" />
	<method signature="void setWidth(java.lang.String)" class="org.w3c.dom.html.HTMLTableCellElement" />
	<method signature="void setColSpan(int)" class="org.w3c.dom.html.HTMLTableCellElement" />
	<method signature="java.lang.String getScope()" class="org.w3c.dom.html.HTMLTableCellElement" />
	<method signature="void setAxis(java.lang.String)" class="org.w3c.dom.html.HTMLTableCellElement" />
	<method signature="java.lang.String getBgColor()" class="org.w3c.dom.html.HTMLTableCellElement" />
	<method signature="void setRowSpan(int)" class="org.w3c.dom.html.HTMLTableCellElement" />
	<class name="org.apache.xerces.parsers.AbstractSAXParser$LocatorProxy" />
	<method signature="java.lang.String getSystemId()" class="org.apache.xerces.parsers.AbstractSAXParser$LocatorProxy" />
	<method signature="void &lt;init&gt;(org.apache.xerces.xni.XMLLocator)" class="org.apache.xerces.parsers.AbstractSAXParser$LocatorProxy" />
	<method signature="java.lang.String getEncoding()" class="org.apache.xerces.parsers.AbstractSAXParser$LocatorProxy" />
	<method signature="int getLineNumber()" class="org.apache.xerces.parsers.AbstractSAXParser$LocatorProxy" />
	<method signature="java.lang.String getPublicId()" class="org.apache.xerces.parsers.AbstractSAXParser$LocatorProxy" />
	<method signature="int getColumnNumber()" class="org.apache.xerces.parsers.AbstractSAXParser$LocatorProxy" />
	<method signature="java.lang.String getXMLVersion()" class="org.apache.xerces.parsers.AbstractSAXParser$LocatorProxy" />
	<class name="org.jdom2.filter.Filters" />
	<method signature="org.jdom2.filter.Filter comment()" class="org.jdom2.filter.Filters" />
	<method signature="org.jdom2.filter.Filter element(java.lang.String)" class="org.jdom2.filter.Filters" />
	<method signature="org.jdom2.filter.Filter fpassthrough()" class="org.jdom2.filter.Filters" />
	<method signature="org.jdom2.filter.Filter attribute()" class="org.jdom2.filter.Filters" />
	<method signature="org.jdom2.filter.Filter element(java.lang.String,org.jdom2.Namespace)" class="org.jdom2.filter.Filters" />
	<method signature="org.jdom2.filter.Filter text()" class="org.jdom2.filter.Filters" />
	<method signature="org.jdom2.filter.Filter attribute(java.lang.String)" class="org.jdom2.filter.Filters" />
	<method signature="org.jdom2.filter.Filter attribute(java.lang.String,org.jdom2.Namespace)" class="org.jdom2.filter.Filters" />
	<method signature="org.jdom2.filter.Filter element()" class="org.jdom2.filter.Filters" />
	<method signature="org.jdom2.filter.Filter fclass(java.lang.Class)" class="org.jdom2.filter.Filters" />
	<method signature="org.jdom2.filter.Filter textOnly()" class="org.jdom2.filter.Filters" />
	<method signature="org.jdom2.filter.Filter doctype()" class="org.jdom2.filter.Filters" />
	<method signature="org.jdom2.filter.Filter fboolean()" class="org.jdom2.filter.Filters" />
	<method signature="org.jdom2.filter.Filter element(org.jdom2.Namespace)" class="org.jdom2.filter.Filters" />
	<method signature="org.jdom2.filter.Filter content()" class="org.jdom2.filter.Filters" />
	<method signature="org.jdom2.filter.Filter cdata()" class="org.jdom2.filter.Filters" />
	<method signature="org.jdom2.filter.Filter attribute(org.jdom2.Namespace)" class="org.jdom2.filter.Filters" />
	<method signature="org.jdom2.filter.Filter entityref()" class="org.jdom2.filter.Filters" />
	<method signature="org.jdom2.filter.Filter processinginstruction()" class="org.jdom2.filter.Filters" />
	<method signature="org.jdom2.filter.Filter document()" class="org.jdom2.filter.Filters" />
	<method signature="org.jdom2.filter.Filter fstring()" class="org.jdom2.filter.Filters" />
	<method signature="org.jdom2.filter.Filter fdouble()" class="org.jdom2.filter.Filters" />
	<class name="org.jfree.ui.ExtendedDrawable" />
	<method signature="boolean isPreserveAspectRatio()" class="org.jfree.ui.ExtendedDrawable" />
	<method signature="java.awt.Dimension getPreferredSize()" class="org.jfree.ui.ExtendedDrawable" />
	<class name="javax.annotation.ParametersAreNullableByDefault" />
	<class name="edu.umd.cs.findbugs.annotations.ReturnValuesAreNonnullByDefault" />
	<class name="org.apache.wml.dom.WMLTrElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.wml.dom.WMLDocumentImpl,java.lang.String)" class="org.apache.wml.dom.WMLTrElementImpl" />
	<method signature="java.lang.String getId()" class="org.apache.wml.dom.WMLTrElementImpl" />
	<method signature="java.lang.String getClassName()" class="org.apache.wml.dom.WMLTrElementImpl" />
	<method signature="void setClassName(java.lang.String)" class="org.apache.wml.dom.WMLTrElementImpl" />
	<method signature="void setId(java.lang.String)" class="org.apache.wml.dom.WMLTrElementImpl" />
	<class name="org.apache.xerces.impl.xs.XSModelGroupImpl" />
	<method signature="java.lang.String getName()" class="org.apache.xerces.impl.xs.XSModelGroupImpl" />
	<method signature="int minEffectiveTotalRange()" class="org.apache.xerces.impl.xs.XSModelGroupImpl" />
	<method signature="void reset()" class="org.apache.xerces.impl.xs.XSModelGroupImpl" />
	<method signature="int maxEffectiveTotalRange()" class="org.apache.xerces.impl.xs.XSModelGroupImpl" />
	<method signature="org.apache.xerces.xs.XSAnnotation getAnnotation()" class="org.apache.xerces.impl.xs.XSModelGroupImpl" />
	<method signature="org.apache.xerces.xs.XSObjectList getAnnotations()" class="org.apache.xerces.impl.xs.XSModelGroupImpl" />
	<method signature="short getType()" class="org.apache.xerces.impl.xs.XSModelGroupImpl" />
	<method signature="org.apache.xerces.xs.XSNamespaceItem getNamespaceItem()" class="org.apache.xerces.impl.xs.XSModelGroupImpl" />
	<method signature="org.apache.xerces.xs.XSObjectList getParticles()" class="org.apache.xerces.impl.xs.XSModelGroupImpl" />
	<method signature="short getCompositor()" class="org.apache.xerces.impl.xs.XSModelGroupImpl" />
	<method signature="boolean isEmpty()" class="org.apache.xerces.impl.xs.XSModelGroupImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xs.XSModelGroupImpl" />
	<method signature="java.lang.String getNamespace()" class="org.apache.xerces.impl.xs.XSModelGroupImpl" />
	<method signature="java.lang.String toString()" class="org.apache.xerces.impl.xs.XSModelGroupImpl" />
	<class name="org.jfree.chart.axis.TickUnits" />
	<method signature="int size()" class="org.jfree.chart.axis.TickUnits" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.axis.TickUnits" />
	<method signature="org.jfree.chart.axis.TickUnit get(int)" class="org.jfree.chart.axis.TickUnits" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.axis.TickUnits" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.axis.TickUnits" />
	<method signature="org.jfree.chart.axis.TickUnit getLargerTickUnit(org.jfree.chart.axis.TickUnit)" class="org.jfree.chart.axis.TickUnits" />
	<method signature="org.jfree.chart.axis.TickUnit getCeilingTickUnit(org.jfree.chart.axis.TickUnit)" class="org.jfree.chart.axis.TickUnits" />
	<method signature="org.jfree.chart.axis.TickUnit getCeilingTickUnit(double)" class="org.jfree.chart.axis.TickUnits" />
	<method signature="void add(org.jfree.chart.axis.TickUnit)" class="org.jfree.chart.axis.TickUnits" />
	<class name="org.jfree.chart.plot.PlotUtilities" />
	<method signature="boolean isEmptyOrNull(org.jfree.chart.plot.XYPlot)" class="org.jfree.chart.plot.PlotUtilities" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.plot.PlotUtilities" />
	<class name="org.apache.html.dom.NameNodeListImpl" />
	<method signature="void &lt;init&gt;(org.apache.xerces.dom.NodeImpl,java.lang.String)" class="org.apache.html.dom.NameNodeListImpl" />
	<class name="com.google.zxing.multi.GenericMultipleBarcodeReader" />
	<method signature="void &lt;init&gt;(com.google.zxing.Reader)" class="com.google.zxing.multi.GenericMultipleBarcodeReader" />
	<method signature="com.google.zxing.Result[] decodeMultiple(com.google.zxing.BinaryBitmap,java.util.Map)" class="com.google.zxing.multi.GenericMultipleBarcodeReader" />
	<method signature="com.google.zxing.Result[] decodeMultiple(com.google.zxing.BinaryBitmap)" class="com.google.zxing.multi.GenericMultipleBarcodeReader" />
	<class name="org.jfree.chart.annotations.XYTextAnnotation" />
	<method signature="void setOutlineStroke(java.awt.Stroke)" class="org.jfree.chart.annotations.XYTextAnnotation" />
	<method signature="double getY()" class="org.jfree.chart.annotations.XYTextAnnotation" />
	<method signature="double getX()" class="org.jfree.chart.annotations.XYTextAnnotation" />
	<method signature="java.awt.Stroke getOutlineStroke()" class="org.jfree.chart.annotations.XYTextAnnotation" />
	<method signature="org.jfree.ui.TextAnchor getTextAnchor()" class="org.jfree.chart.annotations.XYTextAnnotation" />
	<method signature="java.awt.Font getFont()" class="org.jfree.chart.annotations.XYTextAnnotation" />
	<method signature="void setOutlinePaint(java.awt.Paint)" class="org.jfree.chart.annotations.XYTextAnnotation" />
	<method signature="void &lt;init&gt;(java.lang.String,double,double)" class="org.jfree.chart.annotations.XYTextAnnotation" />
	<method signature="void setPaint(java.awt.Paint)" class="org.jfree.chart.annotations.XYTextAnnotation" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.annotations.XYTextAnnotation" />
	<method signature="org.jfree.ui.TextAnchor getRotationAnchor()" class="org.jfree.chart.annotations.XYTextAnnotation" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.annotations.XYTextAnnotation" />
	<method signature="void setFont(java.awt.Font)" class="org.jfree.chart.annotations.XYTextAnnotation" />
	<method signature="void setTextAnchor(org.jfree.ui.TextAnchor)" class="org.jfree.chart.annotations.XYTextAnnotation" />
	<method signature="java.awt.Paint getOutlinePaint()" class="org.jfree.chart.annotations.XYTextAnnotation" />
	<method signature="void setOutlineVisible(boolean)" class="org.jfree.chart.annotations.XYTextAnnotation" />
	<method signature="void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.annotations.XYTextAnnotation" />
	<method signature="int hashCode()" class="org.jfree.chart.annotations.XYTextAnnotation" />
	<method signature="void setRotationAnchor(org.jfree.ui.TextAnchor)" class="org.jfree.chart.annotations.XYTextAnnotation" />
	<method signature="java.lang.String getText()" class="org.jfree.chart.annotations.XYTextAnnotation" />
	<method signature="java.awt.Paint getBackgroundPaint()" class="org.jfree.chart.annotations.XYTextAnnotation" />
	<method signature="void setText(java.lang.String)" class="org.jfree.chart.annotations.XYTextAnnotation" />
	<method signature="java.awt.Paint getPaint()" class="org.jfree.chart.annotations.XYTextAnnotation" />
	<method signature="double getRotationAngle()" class="org.jfree.chart.annotations.XYTextAnnotation" />
	<method signature="void setRotationAngle(double)" class="org.jfree.chart.annotations.XYTextAnnotation" />
	<method signature="boolean isOutlineVisible()" class="org.jfree.chart.annotations.XYTextAnnotation" />
	<method signature="void setX(double)" class="org.jfree.chart.annotations.XYTextAnnotation" />
	<method signature="void setY(double)" class="org.jfree.chart.annotations.XYTextAnnotation" />
	<method signature="void setBackgroundPaint(java.awt.Paint)" class="org.jfree.chart.annotations.XYTextAnnotation" />
	<class name="org.jfree.data.xy.WindDataset" />
	<method signature="java.lang.Number getWindForce(int,int)" class="org.jfree.data.xy.WindDataset" />
	<method signature="java.lang.Number getWindDirection(int,int)" class="org.jfree.data.xy.WindDataset" />
	<class name="org.apache.xerces.xs.XSAttributeUse" />
	<method signature="org.apache.xerces.xs.XSValue getValueConstraintValue()" class="org.apache.xerces.xs.XSAttributeUse" />
	<method signature="boolean getRequired()" class="org.apache.xerces.xs.XSAttributeUse" />
	<method signature="java.lang.String getConstraintValue()" class="org.apache.xerces.xs.XSAttributeUse" />
	<method signature="org.apache.xerces.xs.ShortList getItemValueTypes()" class="org.apache.xerces.xs.XSAttributeUse" />
	<method signature="short getConstraintType()" class="org.apache.xerces.xs.XSAttributeUse" />
	<method signature="org.apache.xerces.xs.XSObjectList getAnnotations()" class="org.apache.xerces.xs.XSAttributeUse" />
	<method signature="org.apache.xerces.xs.XSAttributeDeclaration getAttrDeclaration()" class="org.apache.xerces.xs.XSAttributeUse" />
	<method signature="java.lang.Object getActualVC()" class="org.apache.xerces.xs.XSAttributeUse" />
	<method signature="short getActualVCType()" class="org.apache.xerces.xs.XSAttributeUse" />
	<class name="org.apache.xerces.util.XMLGrammarPoolImpl$Entry" />
	<class name="freemarker.core.CollectionAndSequence" />
	<method signature="int size()" class="freemarker.core.CollectionAndSequence" />
	<method signature="void &lt;init&gt;(freemarker.template.TemplateCollectionModel)" class="freemarker.core.CollectionAndSequence" />
	<method signature="freemarker.template.TemplateModel get(int)" class="freemarker.core.CollectionAndSequence" />
	<method signature="void &lt;init&gt;(freemarker.template.TemplateSequenceModel)" class="freemarker.core.CollectionAndSequence" />
	<method signature="freemarker.template.TemplateModelIterator iterator()" class="freemarker.core.CollectionAndSequence" />
	<class name="javax.xml.bind.helpers.ParseConversionEventImpl" />
	<method signature="void &lt;init&gt;(int,java.lang.String,javax.xml.bind.ValidationEventLocator,java.lang.Throwable)" class="javax.xml.bind.helpers.ParseConversionEventImpl" />
	<method signature="void &lt;init&gt;(int,java.lang.String,javax.xml.bind.ValidationEventLocator)" class="javax.xml.bind.helpers.ParseConversionEventImpl" />
	<class name="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="int createDeferredElement(java.lang.String,java.lang.String)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="java.lang.String getNodeValueString(int)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="short getNodeType(int,boolean)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="void setTypeInfo(int,java.lang.Object)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="short getNodeType(int)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="int createDeferredTextNode(java.lang.String,boolean)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="java.lang.String getNodeURI(int,boolean)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="int getPrevSibling(int)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="void setEntityInfo(int,java.lang.String,java.lang.String)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="void setIdAttribute(int)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="int getPrevSibling(int,boolean)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="int createDeferredAttribute(java.lang.String,java.lang.String,boolean)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="int createDeferredDocument()" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="void setInternalSubset(int,java.lang.String)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="int setDeferredAttribute(int,java.lang.String,java.lang.String,java.lang.String,boolean)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="java.lang.String getNodeValue(int)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="int createDeferredAttribute(java.lang.String,java.lang.String,java.lang.String,boolean)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="int getNodeExtra(int)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="int getLastChild(int,boolean)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="int createDeferredProcessingInstruction(java.lang.String,java.lang.String)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="int getLastChild(int)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="int createDeferredNotation(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="int insertBefore(int,int,int)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="java.lang.String getNodeName(int)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="int getNodeExtra(int,boolean)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="void setInputEncoding(int,java.lang.String)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="void appendChild(int,int)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="int createDeferredComment(java.lang.String)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="void putIdentifier(java.lang.String,int)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="int setAttributeNode(int,int)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="void print()" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="int createDeferredDocumentType(java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="int cloneNode(int,boolean)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="java.lang.String getDeferredEntityBaseURI(int)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="int getRealPrevSibling(int)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="java.lang.String getNodeURI(int)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="int setDeferredAttribute(int,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,java.lang.Object)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="int getRealPrevSibling(int,boolean)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="org.w3c.dom.DOMImplementation getImplementation()" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="void setIdAttributeNode(int,int)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="void &lt;init&gt;(boolean,boolean)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="java.lang.String getNodeValueString(int,boolean)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="void &lt;init&gt;(boolean)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="java.lang.String getAttribute(int,java.lang.String)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="java.lang.String getNodeName(int,boolean)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="int lookupElementDefinition(java.lang.String)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="int createDeferredEntity(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="int createDeferredCDATASection(java.lang.String)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="int createDeferredElementDefinition(java.lang.String)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="int getParentNode(int,boolean)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="int createDeferredElement(java.lang.String,java.lang.String,java.lang.Object)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="int createDeferredEntityReference(java.lang.String,java.lang.String)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="int getParentNode(int)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="void setAsLastChild(int,int)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="org.apache.xerces.dom.DeferredNode getNodeObject(int)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="int getNodeIndex()" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="java.lang.String getNodeValue(int,boolean)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="int createDeferredElement(java.lang.String)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<method signature="java.lang.Object getTypeInfo(int)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
	<class name="org.jfree.ui.tabbedui.AbstractTabbedUI$ExitAction" />
	<method signature="void &lt;init&gt;(org.jfree.ui.tabbedui.AbstractTabbedUI)" class="org.jfree.ui.tabbedui.AbstractTabbedUI$ExitAction" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="org.jfree.ui.tabbedui.AbstractTabbedUI$ExitAction" />
	<class name="teamma.views.JdgRoster" />
	<method signature="void &lt;init&gt;(java.awt.Frame,tourma.data.Coach,teamma.data.Roster,boolean)" class="teamma.views.JdgRoster" />
	<method signature="void &lt;init&gt;(java.awt.Frame,boolean)" class="teamma.views.JdgRoster" />
	<class name="org.apache.html.dom.HTMLBaseElementImpl" />
	<method signature="void setHref(java.lang.String)" class="org.apache.html.dom.HTMLBaseElementImpl" />
	<method signature="java.lang.String getTarget()" class="org.apache.html.dom.HTMLBaseElementImpl" />
	<method signature="java.lang.String getHref()" class="org.apache.html.dom.HTMLBaseElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLBaseElementImpl" />
	<method signature="void setTarget(java.lang.String)" class="org.apache.html.dom.HTMLBaseElementImpl" />
	<class name="org.jfree.util.ShapeList" />
	<method signature="java.lang.Object clone()" class="org.jfree.util.ShapeList" />
	<method signature="void setShape(int,java.awt.Shape)" class="org.jfree.util.ShapeList" />
	<method signature="int hashCode()" class="org.jfree.util.ShapeList" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.util.ShapeList" />
	<method signature="void &lt;init&gt;()" class="org.jfree.util.ShapeList" />
	<method signature="java.awt.Shape getShape(int)" class="org.jfree.util.ShapeList" />
	<class name="tourma.utils.web.WebStatistics" />
	<method signature="void &lt;init&gt;()" class="tourma.utils.web.WebStatistics" />
	<method signature="java.lang.String getHTML()" class="tourma.utils.web.WebStatistics" />
	<class name="com.google.zxing.oned.ITFWriter" />
	<method signature="com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map)" class="com.google.zxing.oned.ITFWriter" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.oned.ITFWriter" />
	<method signature="boolean[] encode(java.lang.String)" class="com.google.zxing.oned.ITFWriter" />
	<class name="org.apache.xerces.impl.xs.XMLSchemaValidator$ValueStoreBase" />
	<method signature="void startValueScope()" class="org.apache.xerces.impl.xs.XMLSchemaValidator$ValueStoreBase" />
	<method signature="void append(org.apache.xerces.impl.xs.XMLSchemaValidator$ValueStoreBase)" class="org.apache.xerces.impl.xs.XMLSchemaValidator$ValueStoreBase" />
	<method signature="void endDocumentFragment()" class="org.apache.xerces.impl.xs.XMLSchemaValidator$ValueStoreBase" />
	<method signature="void endValueScope()" class="org.apache.xerces.impl.xs.XMLSchemaValidator$ValueStoreBase" />
	<method signature="boolean contains()" class="org.apache.xerces.impl.xs.XMLSchemaValidator$ValueStoreBase" />
	<method signature="int contains(org.apache.xerces.impl.xs.XMLSchemaValidator$ValueStoreBase)" class="org.apache.xerces.impl.xs.XMLSchemaValidator$ValueStoreBase" />
	<method signature="void reportError(java.lang.String,java.lang.Object[])" class="org.apache.xerces.impl.xs.XMLSchemaValidator$ValueStoreBase" />
	<method signature="void clear()" class="org.apache.xerces.impl.xs.XMLSchemaValidator$ValueStoreBase" />
	<method signature="void endDocument()" class="org.apache.xerces.impl.xs.XMLSchemaValidator$ValueStoreBase" />
	<method signature="void addValue(org.apache.xerces.impl.xs.identity.Field,boolean,java.lang.Object,short,org.apache.xerces.xs.ShortList)" class="org.apache.xerces.impl.xs.XMLSchemaValidator$ValueStoreBase" />
	<method signature="java.lang.String toString()" class="org.apache.xerces.impl.xs.XMLSchemaValidator$ValueStoreBase" />
	<class name="teamma.data.Player" />
	<method signature="void removeSkill(int)" class="teamma.data.Player" />
	<method signature="java.lang.String getName()" class="teamma.data.Player" />
	<method signature="int getValue(boolean)" class="teamma.data.Player" />
	<method signature="int getSkillCount()" class="teamma.data.Player" />
	<method signature="void addSkill(teamma.data.Skill)" class="teamma.data.Player" />
	<method signature="teamma.data.PlayerType getPlayertype()" class="teamma.data.Player" />
	<method signature="void &lt;init&gt;(teamma.data.PlayerType)" class="teamma.data.Player" />
	<method signature="void setName(java.lang.String)" class="teamma.data.Player" />
	<method signature="int getArmor()" class="teamma.data.Player" />
	<method signature="teamma.data.Skill getSkill(int)" class="teamma.data.Player" />
	<method signature="int getStrength()" class="teamma.data.Player" />
	<method signature="int getAgility()" class="teamma.data.Player" />
	<method signature="int getMovement()" class="teamma.data.Player" />
	<method signature="void setPlayertype(teamma.data.PlayerType)" class="teamma.data.Player" />
	<class name="org.apache.xerces.util.XMLSymbols" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.util.XMLSymbols" />
	<class name="com.google.zxing.client.j2se.MatrixToImageConfig" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.client.j2se.MatrixToImageConfig" />
	<method signature="int getPixelOffColor()" class="com.google.zxing.client.j2se.MatrixToImageConfig" />
	<method signature="int getPixelOnColor()" class="com.google.zxing.client.j2se.MatrixToImageConfig" />
	<method signature="void &lt;init&gt;(int,int)" class="com.google.zxing.client.j2se.MatrixToImageConfig" />
	<class name="javax.annotation.meta.Exhaustive" />
	<class name="org.jfree.ui.Align" />
	<method signature="void align(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,int)" class="org.jfree.ui.Align" />
	<class name="org.jfree.io.FileUtilities" />
	<method signature="java.io.File findFileOnClassPath(java.lang.String)" class="org.jfree.io.FileUtilities" />
	<class name="org.jfree.ui.FontDisplayField" />
	<method signature="void &lt;init&gt;(java.awt.Font)" class="org.jfree.ui.FontDisplayField" />
	<method signature="java.awt.Font getDisplayFont()" class="org.jfree.ui.FontDisplayField" />
	<method signature="void setDisplayFont(java.awt.Font)" class="org.jfree.ui.FontDisplayField" />
	<class name="com.google.zxing.client.result.ProductParsedResult" />
	<method signature="java.lang.String getNormalizedProductID()" class="com.google.zxing.client.result.ProductParsedResult" />
	<method signature="java.lang.String getDisplayResult()" class="com.google.zxing.client.result.ProductParsedResult" />
	<method signature="java.lang.String getProductID()" class="com.google.zxing.client.result.ProductParsedResult" />
	<class name="org.apache.xerces.impl.dv.xs.YearMonthDV" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.xs.YearMonthDV" />
	<method signature="java.lang.Object getActualValue(java.lang.String,org.apache.xerces.impl.dv.ValidationContext)" class="org.apache.xerces.impl.dv.xs.YearMonthDV" />
	<class name="org.w3c.dom.CharacterData" />
	<method signature="void setData(java.lang.String)" class="org.w3c.dom.CharacterData" />
	<method signature="void deleteData(int,int)" class="org.w3c.dom.CharacterData" />
	<method signature="void appendData(java.lang.String)" class="org.w3c.dom.CharacterData" />
	<method signature="java.lang.String substringData(int,int)" class="org.w3c.dom.CharacterData" />
	<method signature="void insertData(int,java.lang.String)" class="org.w3c.dom.CharacterData" />
	<method signature="void replaceData(int,int,java.lang.String)" class="org.w3c.dom.CharacterData" />
	<method signature="java.lang.String getData()" class="org.w3c.dom.CharacterData" />
	<method signature="int getLength()" class="org.w3c.dom.CharacterData" />
	<class name="javax.xml.transform.TransformerConfigurationException" />
	<method signature="void &lt;init&gt;(java.lang.String,javax.xml.transform.SourceLocator)" class="javax.xml.transform.TransformerConfigurationException" />
	<method signature="void &lt;init&gt;()" class="javax.xml.transform.TransformerConfigurationException" />
	<method signature="void &lt;init&gt;(java.lang.Throwable)" class="javax.xml.transform.TransformerConfigurationException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Throwable)" class="javax.xml.transform.TransformerConfigurationException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="javax.xml.transform.TransformerConfigurationException" />
	<method signature="void &lt;init&gt;(java.lang.String,javax.xml.transform.SourceLocator,java.lang.Throwable)" class="javax.xml.transform.TransformerConfigurationException" />
	<class name="com.google.zxing.HtmlAssetTranslator" />
	<method signature="void main(java.lang.String[])" class="com.google.zxing.HtmlAssetTranslator" />
	<class name="org.jfree.data.time.ohlc.OHLC" />
	<method signature="double getClose()" class="org.jfree.data.time.ohlc.OHLC" />
	<method signature="double getOpen()" class="org.jfree.data.time.ohlc.OHLC" />
	<method signature="int hashCode()" class="org.jfree.data.time.ohlc.OHLC" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.time.ohlc.OHLC" />
	<method signature="void &lt;init&gt;(double,double,double,double)" class="org.jfree.data.time.ohlc.OHLC" />
	<method signature="double getLow()" class="org.jfree.data.time.ohlc.OHLC" />
	<method signature="double getHigh()" class="org.jfree.data.time.ohlc.OHLC" />
	<class name="freemarker.ext.servlet.FreemarkerServlet" />
	<method signature="void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" class="freemarker.ext.servlet.FreemarkerServlet" />
	<method signature="void &lt;init&gt;()" class="freemarker.ext.servlet.FreemarkerServlet" />
	<method signature="void doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" class="freemarker.ext.servlet.FreemarkerServlet" />
	<method signature="void init()" class="freemarker.ext.servlet.FreemarkerServlet" />
	<class name="org.apache.xerces.dom.ElementImpl" />
	<method signature="void setIdAttribute(java.lang.String,boolean)" class="org.apache.xerces.dom.ElementImpl" />
	<method signature="boolean hasAttributeNS(java.lang.String,java.lang.String)" class="org.apache.xerces.dom.ElementImpl" />
	<method signature="org.w3c.dom.Attr setAttributeNodeNS(org.w3c.dom.Attr)" class="org.apache.xerces.dom.ElementImpl" />
	<method signature="void setIdAttributeNode(org.w3c.dom.Attr,boolean)" class="org.apache.xerces.dom.ElementImpl" />
	<method signature="boolean isEqualNode(org.w3c.dom.Node)" class="org.apache.xerces.dom.ElementImpl" />
	<method signature="void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.dom.ElementImpl" />
	<method signature="org.w3c.dom.Element getPreviousElementSibling()" class="org.apache.xerces.dom.ElementImpl" />
	<method signature="void removeAttributeNS(java.lang.String,java.lang.String)" class="org.apache.xerces.dom.ElementImpl" />
	<method signature="short getNodeType()" class="org.apache.xerces.dom.ElementImpl" />
	<method signature="java.lang.String getAttribute(java.lang.String)" class="org.apache.xerces.dom.ElementImpl" />
	<method signature="boolean isDerivedFrom(java.lang.String,java.lang.String,int)" class="org.apache.xerces.dom.ElementImpl" />
	<method signature="void normalize()" class="org.apache.xerces.dom.ElementImpl" />
	<method signature="org.w3c.dom.Attr setAttributeNode(org.w3c.dom.Attr)" class="org.apache.xerces.dom.ElementImpl" />
	<method signature="org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String,java.lang.String)" class="org.apache.xerces.dom.ElementImpl" />
	<method signature="org.w3c.dom.Attr getAttributeNode(java.lang.String)" class="org.apache.xerces.dom.ElementImpl" />
	<method signature="org.w3c.dom.Element getLastElementChild()" class="org.apache.xerces.dom.ElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.xerces.dom.CoreDocumentImpl,java.lang.String)" class="org.apache.xerces.dom.ElementImpl" />
	<method signature="int getChildElementCount()" class="org.apache.xerces.dom.ElementImpl" />
	<method signature="org.w3c.dom.NamedNodeMap getAttributes()" class="org.apache.xerces.dom.ElementImpl" />
	<method signature="boolean hasAttribute(java.lang.String)" class="org.apache.xerces.dom.ElementImpl" />
	<method signature="void setAttribute(java.lang.String,java.lang.String)" class="org.apache.xerces.dom.ElementImpl" />
	<method signature="org.w3c.dom.Node cloneNode(boolean)" class="org.apache.xerces.dom.ElementImpl" />
	<method signature="void removeAttribute(java.lang.String)" class="org.apache.xerces.dom.ElementImpl" />
	<method signature="void setReadOnly(boolean,boolean)" class="org.apache.xerces.dom.ElementImpl" />
	<method signature="org.w3c.dom.Element getNextElementSibling()" class="org.apache.xerces.dom.ElementImpl" />
	<method signature="java.lang.String getTypeNamespace()" class="org.apache.xerces.dom.ElementImpl" />
	<method signature="java.lang.String getBaseURI()" class="org.apache.xerces.dom.ElementImpl" />
	<method signature="java.lang.String getTypeName()" class="org.apache.xerces.dom.ElementImpl" />
	<method signature="org.w3c.dom.TypeInfo getSchemaTypeInfo()" class="org.apache.xerces.dom.ElementImpl" />
	<method signature="org.w3c.dom.Attr removeAttributeNode(org.w3c.dom.Attr)" class="org.apache.xerces.dom.ElementImpl" />
	<method signature="java.lang.String getNodeName()" class="org.apache.xerces.dom.ElementImpl" />
	<method signature="org.w3c.dom.Element getFirstElementChild()" class="org.apache.xerces.dom.ElementImpl" />
	<method signature="boolean hasAttributes()" class="org.apache.xerces.dom.ElementImpl" />
	<method signature="org.w3c.dom.NodeList getElementsByTagName(java.lang.String)" class="org.apache.xerces.dom.ElementImpl" />
	<method signature="org.w3c.dom.Attr getAttributeNodeNS(java.lang.String,java.lang.String)" class="org.apache.xerces.dom.ElementImpl" />
	<method signature="void setIdAttributeNS(java.lang.String,java.lang.String,boolean)" class="org.apache.xerces.dom.ElementImpl" />
	<method signature="java.lang.String getAttributeNS(java.lang.String,java.lang.String)" class="org.apache.xerces.dom.ElementImpl" />
	<method signature="java.lang.String getTagName()" class="org.apache.xerces.dom.ElementImpl" />
	<class name="org.w3c.dom.ranges.Range" />
	<method signature="void detach()" class="org.w3c.dom.ranges.Range" />
	<method signature="org.w3c.dom.DocumentFragment cloneContents()" class="org.w3c.dom.ranges.Range" />
	<method signature="void collapse(boolean)" class="org.w3c.dom.ranges.Range" />
	<method signature="void setEndBefore(org.w3c.dom.Node)" class="org.w3c.dom.ranges.Range" />
	<method signature="org.w3c.dom.Node getEndContainer()" class="org.w3c.dom.ranges.Range" />
	<method signature="void setStartAfter(org.w3c.dom.Node)" class="org.w3c.dom.ranges.Range" />
	<method signature="void deleteContents()" class="org.w3c.dom.ranges.Range" />
	<method signature="void surroundContents(org.w3c.dom.Node)" class="org.w3c.dom.ranges.Range" />
	<method signature="org.w3c.dom.ranges.Range cloneRange()" class="org.w3c.dom.ranges.Range" />
	<method signature="int getEndOffset()" class="org.w3c.dom.ranges.Range" />
	<method signature="int getStartOffset()" class="org.w3c.dom.ranges.Range" />
	<method signature="void setEndAfter(org.w3c.dom.Node)" class="org.w3c.dom.ranges.Range" />
	<method signature="void setEnd(org.w3c.dom.Node,int)" class="org.w3c.dom.ranges.Range" />
	<method signature="boolean getCollapsed()" class="org.w3c.dom.ranges.Range" />
	<method signature="org.w3c.dom.DocumentFragment extractContents()" class="org.w3c.dom.ranges.Range" />
	<method signature="void insertNode(org.w3c.dom.Node)" class="org.w3c.dom.ranges.Range" />
	<method signature="void setStart(org.w3c.dom.Node,int)" class="org.w3c.dom.ranges.Range" />
	<method signature="org.w3c.dom.Node getStartContainer()" class="org.w3c.dom.ranges.Range" />
	<method signature="org.w3c.dom.Node getCommonAncestorContainer()" class="org.w3c.dom.ranges.Range" />
	<method signature="void selectNode(org.w3c.dom.Node)" class="org.w3c.dom.ranges.Range" />
	<method signature="void selectNodeContents(org.w3c.dom.Node)" class="org.w3c.dom.ranges.Range" />
	<method signature="void setStartBefore(org.w3c.dom.Node)" class="org.w3c.dom.ranges.Range" />
	<method signature="short compareBoundaryPoints(short,org.w3c.dom.ranges.Range)" class="org.w3c.dom.ranges.Range" />
	<method signature="java.lang.String toString()" class="org.w3c.dom.ranges.Range" />
	<class name="javax.annotation.meta.TypeQualifierNickname" />
	<class name="org.jdom2.input.sax.AbstractReaderXSDFactory$SchemaFactoryProvider" />
	<method signature="javax.xml.validation.SchemaFactory getSchemaFactory()" class="org.jdom2.input.sax.AbstractReaderXSDFactory$SchemaFactoryProvider" />
	<class name="com.google.zxing.oned.OneDReader" />
	<method signature="com.google.zxing.Result decode(com.google.zxing.BinaryBitmap)" class="com.google.zxing.oned.OneDReader" />
	<method signature="void reset()" class="com.google.zxing.oned.OneDReader" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.oned.OneDReader" />
	<method signature="com.google.zxing.Result decode(com.google.zxing.BinaryBitmap,java.util.Map)" class="com.google.zxing.oned.OneDReader" />
	<method signature="com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map)" class="com.google.zxing.oned.OneDReader" />
	<class name="org.apache.xml.serialize.HTMLSerializer" />
	<method signature="void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" class="org.apache.xml.serialize.HTMLSerializer" />
	<method signature="void startElement(java.lang.String,org.xml.sax.AttributeList)" class="org.apache.xml.serialize.HTMLSerializer" />
	<method signature="void &lt;init&gt;(java.io.Writer,org.apache.xml.serialize.OutputFormat)" class="org.apache.xml.serialize.HTMLSerializer" />
	<method signature="void endElement(java.lang.String)" class="org.apache.xml.serialize.HTMLSerializer" />
	<method signature="void &lt;init&gt;(org.apache.xml.serialize.OutputFormat)" class="org.apache.xml.serialize.HTMLSerializer" />
	<method signature="void endElement(java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xml.serialize.HTMLSerializer" />
	<method signature="void endElementIO(java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xml.serialize.HTMLSerializer" />
	<method signature="void characters(char[],int,int)" class="org.apache.xml.serialize.HTMLSerializer" />
	<method signature="void &lt;init&gt;()" class="org.apache.xml.serialize.HTMLSerializer" />
	<method signature="void &lt;init&gt;(java.io.OutputStream,org.apache.xml.serialize.OutputFormat)" class="org.apache.xml.serialize.HTMLSerializer" />
	<method signature="void setXHTMLNamespace(java.lang.String)" class="org.apache.xml.serialize.HTMLSerializer" />
	<method signature="void setOutputFormat(org.apache.xml.serialize.OutputFormat)" class="org.apache.xml.serialize.HTMLSerializer" />
	<class name="org.jdom2.located.Located" />
	<method signature="void setLine(int)" class="org.jdom2.located.Located" />
	<method signature="int getLine()" class="org.jdom2.located.Located" />
	<method signature="int getColumn()" class="org.jdom2.located.Located" />
	<method signature="void setColumn(int)" class="org.jdom2.located.Located" />
	<class name="org.jdom2.Verifier" />
	<method signature="boolean isXMLPublicIDCharacter(char)" class="org.jdom2.Verifier" />
	<method signature="java.lang.String checkElementName(java.lang.String)" class="org.jdom2.Verifier" />
	<method signature="java.lang.String checkNamespaceCollision(org.jdom2.Namespace,org.jdom2.Element,int)" class="org.jdom2.Verifier" />
	<method signature="boolean isXMLNameStartCharacter(char)" class="org.jdom2.Verifier" />
	<method signature="java.lang.String checkNamespaceCollision(org.jdom2.Attribute,org.jdom2.Element)" class="org.jdom2.Verifier" />
	<method signature="boolean isXMLExtender(char)" class="org.jdom2.Verifier" />
	<method signature="boolean isXMLCombiningChar(char)" class="org.jdom2.Verifier" />
	<method signature="java.lang.String checkCommentData(java.lang.String)" class="org.jdom2.Verifier" />
	<method signature="java.lang.String checkCDATASection(java.lang.String)" class="org.jdom2.Verifier" />
	<method signature="java.lang.String checkProcessingInstructionData(java.lang.String)" class="org.jdom2.Verifier" />
	<method signature="java.lang.String checkCharacterData(java.lang.String)" class="org.jdom2.Verifier" />
	<method signature="java.lang.String checkNamespaceCollision(org.jdom2.Namespace,java.util.List)" class="org.jdom2.Verifier" />
	<method signature="boolean isURICharacter(char)" class="org.jdom2.Verifier" />
	<method signature="boolean isXMLLetter(char)" class="org.jdom2.Verifier" />
	<method signature="java.lang.String checkSystemLiteral(java.lang.String)" class="org.jdom2.Verifier" />
	<method signature="boolean isXMLDigit(char)" class="org.jdom2.Verifier" />
	<method signature="java.lang.String checkPublicID(java.lang.String)" class="org.jdom2.Verifier" />
	<method signature="java.lang.String checkNamespaceCollision(org.jdom2.Namespace,org.jdom2.Namespace)" class="org.jdom2.Verifier" />
	<method signature="java.lang.String checkNamespaceCollision(org.jdom2.Namespace,java.util.List,int)" class="org.jdom2.Verifier" />
	<method signature="boolean isLowSurrogate(char)" class="org.jdom2.Verifier" />
	<method signature="boolean isXMLWhitespace(char)" class="org.jdom2.Verifier" />
	<method signature="java.lang.String checkNamespacePrefix(java.lang.String)" class="org.jdom2.Verifier" />
	<method signature="boolean isXMLCharacter(int)" class="org.jdom2.Verifier" />
	<method signature="boolean isXMLLetterOrDigit(char)" class="org.jdom2.Verifier" />
	<method signature="java.lang.String checkURI(java.lang.String)" class="org.jdom2.Verifier" />
	<method signature="int decodeSurrogatePair(char,char)" class="org.jdom2.Verifier" />
	<method signature="java.lang.String checkXMLName(java.lang.String)" class="org.jdom2.Verifier" />
	<method signature="java.lang.String checkAttributeName(java.lang.String)" class="org.jdom2.Verifier" />
	<method signature="boolean isXMLNameCharacter(char)" class="org.jdom2.Verifier" />
	<method signature="java.lang.String checkNamespaceURI(java.lang.String)" class="org.jdom2.Verifier" />
	<method signature="java.lang.String checkProcessingInstructionTarget(java.lang.String)" class="org.jdom2.Verifier" />
	<method signature="boolean isAllXMLWhitespace(java.lang.String)" class="org.jdom2.Verifier" />
	<method signature="boolean isHighSurrogate(char)" class="org.jdom2.Verifier" />
	<method signature="java.lang.String checkNamespaceCollision(org.jdom2.Attribute,org.jdom2.Element,int)" class="org.jdom2.Verifier" />
	<method signature="java.lang.String checkNamespaceCollision(org.jdom2.Namespace,org.jdom2.Attribute)" class="org.jdom2.Verifier" />
	<method signature="java.lang.String checkNamespaceCollision(org.jdom2.Namespace,org.jdom2.Element)" class="org.jdom2.Verifier" />
	<method signature="boolean isHexDigit(char)" class="org.jdom2.Verifier" />
	<class name="org.jfree.ui.SortableTableHeaderListener" />
	<method signature="void mouseReleased(java.awt.event.MouseEvent)" class="org.jfree.ui.SortableTableHeaderListener" />
	<method signature="void &lt;init&gt;(org.jfree.ui.SortableTableModel,org.jfree.ui.SortButtonRenderer)" class="org.jfree.ui.SortableTableHeaderListener" />
	<method signature="void setTableModel(org.jfree.ui.SortableTableModel)" class="org.jfree.ui.SortableTableHeaderListener" />
	<method signature="void mouseClicked(java.awt.event.MouseEvent)" class="org.jfree.ui.SortableTableHeaderListener" />
	<method signature="void mouseDragged(java.awt.event.MouseEvent)" class="org.jfree.ui.SortableTableHeaderListener" />
	<method signature="void mouseExited(java.awt.event.MouseEvent)" class="org.jfree.ui.SortableTableHeaderListener" />
	<method signature="void mouseEntered(java.awt.event.MouseEvent)" class="org.jfree.ui.SortableTableHeaderListener" />
	<method signature="void mousePressed(java.awt.event.MouseEvent)" class="org.jfree.ui.SortableTableHeaderListener" />
	<method signature="void mouseMoved(java.awt.event.MouseEvent)" class="org.jfree.ui.SortableTableHeaderListener" />
	<class name="tourma.MainTreeModel" />
	<method signature="void removeTreeModelListener(javax.swing.event.TreeModelListener)" class="tourma.MainTreeModel" />
	<method signature="javax.swing.tree.DefaultMutableTreeNode getParams()" class="tourma.MainTreeModel" />
	<method signature="void setParams(javax.swing.tree.DefaultMutableTreeNode)" class="tourma.MainTreeModel" />
	<method signature="java.awt.Component getTreeCellRendererComponent(javax.swing.JTree,java.lang.Object,boolean,boolean,boolean,int,boolean)" class="tourma.MainTreeModel" />
	<method signature="void addTreeModelListener(javax.swing.event.TreeModelListener)" class="tourma.MainTreeModel" />
	<method signature="int getIndexOfChild(java.lang.Object,java.lang.Object)" class="tourma.MainTreeModel" />
	<method signature="java.lang.Object getChild(java.lang.Object,int)" class="tourma.MainTreeModel" />
	<method signature="boolean isLeaf(java.lang.Object)" class="tourma.MainTreeModel" />
	<method signature="java.lang.Object getRoot()" class="tourma.MainTreeModel" />
	<method signature="int getChildCount(java.lang.Object)" class="tourma.MainTreeModel" />
	<method signature="void valueForPathChanged(javax.swing.tree.TreePath,java.lang.Object)" class="tourma.MainTreeModel" />
	<class name="tourma.tableModel.MjtRankingTeam" />
	<method signature="java.awt.Component getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)" class="tourma.tableModel.MjtRankingTeam" />
	<method signature="java.lang.String getColumnName(int)" class="tourma.tableModel.MjtRankingTeam" />
	<method signature="java.lang.Object getValueAt(int,int)" class="tourma.tableModel.MjtRankingTeam" />
	<method signature="void &lt;init&gt;(boolean,int,java.util.ArrayList,boolean)" class="tourma.tableModel.MjtRankingTeam" />
	<method signature="int getColumnCount()" class="tourma.tableModel.MjtRankingTeam" />
	<class name="org.apache.xerces.dom.EntityReferenceImpl" />
	<method signature="short getNodeType()" class="org.apache.xerces.dom.EntityReferenceImpl" />
	<method signature="void setBaseURI(java.lang.String)" class="org.apache.xerces.dom.EntityReferenceImpl" />
	<method signature="org.w3c.dom.Node cloneNode(boolean)" class="org.apache.xerces.dom.EntityReferenceImpl" />
	<method signature="void &lt;init&gt;(org.apache.xerces.dom.CoreDocumentImpl,java.lang.String)" class="org.apache.xerces.dom.EntityReferenceImpl" />
	<method signature="java.lang.String getNodeName()" class="org.apache.xerces.dom.EntityReferenceImpl" />
	<method signature="void setReadOnly(boolean,boolean)" class="org.apache.xerces.dom.EntityReferenceImpl" />
	<method signature="java.lang.String getBaseURI()" class="org.apache.xerces.dom.EntityReferenceImpl" />
	<class name="tourma.tableModel.MjtRankingClan" />
	<method signature="void &lt;init&gt;(int,int,int,int,int,int,java.util.ArrayList,boolean)" class="tourma.tableModel.MjtRankingClan" />
	<method signature="void &lt;init&gt;(int,java.util.ArrayList,boolean)" class="tourma.tableModel.MjtRankingClan" />
	<method signature="java.awt.Component getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)" class="tourma.tableModel.MjtRankingClan" />
	<method signature="java.lang.String getColumnName(int)" class="tourma.tableModel.MjtRankingClan" />
	<method signature="java.lang.Object getValueAt(int,int)" class="tourma.tableModel.MjtRankingClan" />
	<method signature="int getColumnCount()" class="tourma.tableModel.MjtRankingClan" />
	<class name="org.apache.xerces.impl.validation.ConfigurableValidationState" />
	<method signature="java.lang.String checkIDRefID()" class="org.apache.xerces.impl.validation.ConfigurableValidationState" />
	<method signature="void setIdIdrefChecking(boolean)" class="org.apache.xerces.impl.validation.ConfigurableValidationState" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.validation.ConfigurableValidationState" />
	<method signature="boolean isEntityDeclared(java.lang.String)" class="org.apache.xerces.impl.validation.ConfigurableValidationState" />
	<method signature="void addIdRef(java.lang.String)" class="org.apache.xerces.impl.validation.ConfigurableValidationState" />
	<method signature="void setUnparsedEntityChecking(boolean)" class="org.apache.xerces.impl.validation.ConfigurableValidationState" />
	<method signature="boolean isIdDeclared(java.lang.String)" class="org.apache.xerces.impl.validation.ConfigurableValidationState" />
	<method signature="boolean isEntityUnparsed(java.lang.String)" class="org.apache.xerces.impl.validation.ConfigurableValidationState" />
	<method signature="void addId(java.lang.String)" class="org.apache.xerces.impl.validation.ConfigurableValidationState" />
	<class name="org.jfree.data.xml.ValueHandler" />
	<method signature="void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" class="org.jfree.data.xml.ValueHandler" />
	<method signature="void endElement(java.lang.String,java.lang.String,java.lang.String)" class="org.jfree.data.xml.ValueHandler" />
	<method signature="void characters(char[],int,int)" class="org.jfree.data.xml.ValueHandler" />
	<method signature="void &lt;init&gt;(org.jfree.data.xml.RootHandler,org.jfree.data.xml.ItemHandler)" class="org.jfree.data.xml.ValueHandler" />
	<class name="org.apache.commons.lang3.math.Fraction" />
	<method signature="int getProperWhole()" class="org.apache.commons.lang3.math.Fraction" />
	<method signature="org.apache.commons.lang3.math.Fraction getFraction(int,int)" class="org.apache.commons.lang3.math.Fraction" />
	<method signature="org.apache.commons.lang3.math.Fraction reduce()" class="org.apache.commons.lang3.math.Fraction" />
	<method signature="org.apache.commons.lang3.math.Fraction invert()" class="org.apache.commons.lang3.math.Fraction" />
	<method signature="int compareTo(org.apache.commons.lang3.math.Fraction)" class="org.apache.commons.lang3.math.Fraction" />
	<method signature="int intValue()" class="org.apache.commons.lang3.math.Fraction" />
	<method signature="org.apache.commons.lang3.math.Fraction pow(int)" class="org.apache.commons.lang3.math.Fraction" />
	<method signature="boolean equals(java.lang.Object)" class="org.apache.commons.lang3.math.Fraction" />
	<method signature="java.lang.String toProperString()" class="org.apache.commons.lang3.math.Fraction" />
	<method signature="org.apache.commons.lang3.math.Fraction getFraction(int,int,int)" class="org.apache.commons.lang3.math.Fraction" />
	<method signature="org.apache.commons.lang3.math.Fraction divideBy(org.apache.commons.lang3.math.Fraction)" class="org.apache.commons.lang3.math.Fraction" />
	<method signature="double doubleValue()" class="org.apache.commons.lang3.math.Fraction" />
	<method signature="org.apache.commons.lang3.math.Fraction abs()" class="org.apache.commons.lang3.math.Fraction" />
	<method signature="int getDenominator()" class="org.apache.commons.lang3.math.Fraction" />
	<method signature="float floatValue()" class="org.apache.commons.lang3.math.Fraction" />
	<method signature="org.apache.commons.lang3.math.Fraction getFraction(java.lang.String)" class="org.apache.commons.lang3.math.Fraction" />
	<method signature="org.apache.commons.lang3.math.Fraction negate()" class="org.apache.commons.lang3.math.Fraction" />
	<method signature="int compareTo(java.lang.Object)" class="org.apache.commons.lang3.math.Fraction" />
	<method signature="int hashCode()" class="org.apache.commons.lang3.math.Fraction" />
	<method signature="org.apache.commons.lang3.math.Fraction multiplyBy(org.apache.commons.lang3.math.Fraction)" class="org.apache.commons.lang3.math.Fraction" />
	<method signature="int getProperNumerator()" class="org.apache.commons.lang3.math.Fraction" />
	<method signature="org.apache.commons.lang3.math.Fraction getFraction(double)" class="org.apache.commons.lang3.math.Fraction" />
	<method signature="int getNumerator()" class="org.apache.commons.lang3.math.Fraction" />
	<method signature="org.apache.commons.lang3.math.Fraction subtract(org.apache.commons.lang3.math.Fraction)" class="org.apache.commons.lang3.math.Fraction" />
	<method signature="java.lang.String toString()" class="org.apache.commons.lang3.math.Fraction" />
	<method signature="org.apache.commons.lang3.math.Fraction getReducedFraction(int,int)" class="org.apache.commons.lang3.math.Fraction" />
	<method signature="long longValue()" class="org.apache.commons.lang3.math.Fraction" />
	<method signature="org.apache.commons.lang3.math.Fraction add(org.apache.commons.lang3.math.Fraction)" class="org.apache.commons.lang3.math.Fraction" />
	<class name="org.apache.xerces.jaxp.SAXParserImpl" />
	<method signature="boolean isXIncludeAware()" class="org.apache.xerces.jaxp.SAXParserImpl" />
	<method signature="org.apache.xerces.xs.ElementPSVI getElementPSVI()" class="org.apache.xerces.jaxp.SAXParserImpl" />
	<method signature="void reset()" class="org.apache.xerces.jaxp.SAXParserImpl" />
	<method signature="org.apache.xerces.xs.AttributePSVI getAttributePSVIByName(java.lang.String,java.lang.String)" class="org.apache.xerces.jaxp.SAXParserImpl" />
	<method signature="void parse(org.xml.sax.InputSource,org.xml.sax.helpers.DefaultHandler)" class="org.apache.xerces.jaxp.SAXParserImpl" />
	<method signature="javax.xml.validation.Schema getSchema()" class="org.apache.xerces.jaxp.SAXParserImpl" />
	<method signature="boolean isNamespaceAware()" class="org.apache.xerces.jaxp.SAXParserImpl" />
	<method signature="org.xml.sax.XMLReader getXMLReader()" class="org.apache.xerces.jaxp.SAXParserImpl" />
	<method signature="org.apache.xerces.xs.AttributePSVI getAttributePSVI(int)" class="org.apache.xerces.jaxp.SAXParserImpl" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="org.apache.xerces.jaxp.SAXParserImpl" />
	<method signature="void parse(org.xml.sax.InputSource,org.xml.sax.HandlerBase)" class="org.apache.xerces.jaxp.SAXParserImpl" />
	<method signature="org.xml.sax.Parser getParser()" class="org.apache.xerces.jaxp.SAXParserImpl" />
	<method signature="boolean isValidating()" class="org.apache.xerces.jaxp.SAXParserImpl" />
	<method signature="java.lang.Object getProperty(java.lang.String)" class="org.apache.xerces.jaxp.SAXParserImpl" />
	<class name="org.apache.xerces.impl.dv.xs.FullDVFactory" />
	<method signature="org.apache.xerces.impl.dv.XSSimpleType getBuiltInType(java.lang.String)" class="org.apache.xerces.impl.dv.xs.FullDVFactory" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.xs.FullDVFactory" />
	<method signature="org.apache.xerces.util.SymbolHash getBuiltInTypes()" class="org.apache.xerces.impl.dv.xs.FullDVFactory" />
	<class name="org.jfree.chart.plot.Zoomable" />
	<method signature="void zoomDomainAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" class="org.jfree.chart.plot.Zoomable" />
	<method signature="boolean isRangeZoomable()" class="org.jfree.chart.plot.Zoomable" />
	<method signature="boolean isDomainZoomable()" class="org.jfree.chart.plot.Zoomable" />
	<method signature="org.jfree.chart.plot.PlotOrientation getOrientation()" class="org.jfree.chart.plot.Zoomable" />
	<method signature="void zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" class="org.jfree.chart.plot.Zoomable" />
	<method signature="void zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)" class="org.jfree.chart.plot.Zoomable" />
	<method signature="void zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" class="org.jfree.chart.plot.Zoomable" />
	<method signature="void zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" class="org.jfree.chart.plot.Zoomable" />
	<method signature="void zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)" class="org.jfree.chart.plot.Zoomable" />
	<class name="org.jfree.data.resources.DataPackageResources_fr" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.resources.DataPackageResources_fr" />
	<method signature="java.lang.Object[][] getContents()" class="org.jfree.data.resources.DataPackageResources_fr" />
	<class name="org.jfree.text.TextLine" />
	<method signature="int hashCode()" class="org.jfree.text.TextLine" />
	<method signature="void &lt;init&gt;(java.lang.String,java.awt.Font)" class="org.jfree.text.TextLine" />
	<method signature="org.jfree.text.TextFragment getFirstTextFragment()" class="org.jfree.text.TextLine" />
	<method signature="void draw(java.awt.Graphics2D,float,float,org.jfree.ui.TextAnchor,float,float,double)" class="org.jfree.text.TextLine" />
	<method signature="void removeFragment(org.jfree.text.TextFragment)" class="org.jfree.text.TextLine" />
	<method signature="org.jfree.text.TextFragment getLastTextFragment()" class="org.jfree.text.TextLine" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.text.TextLine" />
	<method signature="void &lt;init&gt;()" class="org.jfree.text.TextLine" />
	<method signature="org.jfree.ui.Size2D calculateDimensions(java.awt.Graphics2D)" class="org.jfree.text.TextLine" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.text.TextLine" />
	<method signature="void &lt;init&gt;(java.lang.String,java.awt.Font,java.awt.Paint)" class="org.jfree.text.TextLine" />
	<method signature="void addFragment(org.jfree.text.TextFragment)" class="org.jfree.text.TextLine" />
	<class name="freemarker.core.ArithmeticEngine$ConservativeEngine" />
	<method signature="int compareNumbers(java.lang.Number,java.lang.Number)" class="freemarker.core.ArithmeticEngine$ConservativeEngine" />
	<method signature="java.lang.Number multiply(java.lang.Number,java.lang.Number)" class="freemarker.core.ArithmeticEngine$ConservativeEngine" />
	<method signature="java.lang.Number modulus(java.lang.Number,java.lang.Number)" class="freemarker.core.ArithmeticEngine$ConservativeEngine" />
	<method signature="java.lang.Number divide(java.lang.Number,java.lang.Number)" class="freemarker.core.ArithmeticEngine$ConservativeEngine" />
	<method signature="java.lang.Number subtract(java.lang.Number,java.lang.Number)" class="freemarker.core.ArithmeticEngine$ConservativeEngine" />
	<method signature="java.lang.Number add(java.lang.Number,java.lang.Number)" class="freemarker.core.ArithmeticEngine$ConservativeEngine" />
	<method signature="java.lang.Number toNumber(java.lang.String)" class="freemarker.core.ArithmeticEngine$ConservativeEngine" />
	<method signature="void &lt;init&gt;()" class="freemarker.core.ArithmeticEngine$ConservativeEngine" />
	<class name="org.apache.xerces.dom.DeferredNotationImpl" />
	<method signature="int getNodeIndex()" class="org.apache.xerces.dom.DeferredNotationImpl" />
	<class name="org.apache.commons.lang3.text.translate.NumericEntityUnescaper" />
	<method signature="boolean isSet(org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION)" class="org.apache.commons.lang3.text.translate.NumericEntityUnescaper" />
	<method signature="void &lt;init&gt;(org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION[])" class="org.apache.commons.lang3.text.translate.NumericEntityUnescaper" />
	<method signature="int translate(java.lang.CharSequence,int,java.io.Writer)" class="org.apache.commons.lang3.text.translate.NumericEntityUnescaper" />
	<class name="edu.umd.cs.findbugs.annotations.CleanupObligation" />
	<class name="org.apache.xerces.impl.dv.xs.XSSimpleTypeDelegate" />
	<method signature="boolean derivedFrom(java.lang.String,java.lang.String,short)" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDelegate" />
	<method signature="java.lang.Object validate(java.lang.String,org.apache.xerces.impl.dv.ValidationContext,org.apache.xerces.impl.dv.ValidatedInfo)" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDelegate" />
	<method signature="short getVariety()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDelegate" />
	<method signature="java.lang.String getName()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDelegate" />
	<method signature="org.apache.xerces.xs.XSSimpleTypeDefinition getItemType()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDelegate" />
	<method signature="boolean isEqual(java.lang.Object,java.lang.Object)" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDelegate" />
	<method signature="org.apache.xerces.xs.StringList getLexicalPattern()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDelegate" />
	<method signature="org.apache.xerces.xs.StringList getLexicalEnumeration()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDelegate" />
	<method signature="short getWhitespace()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDelegate" />
	<method signature="boolean getAnonymous()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDelegate" />
	<method signature="void &lt;init&gt;(org.apache.xerces.impl.dv.XSSimpleType)" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDelegate" />
	<method signature="boolean isFinal(short)" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDelegate" />
	<method signature="short getType()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDelegate" />
	<method signature="void validate(org.apache.xerces.impl.dv.ValidationContext,org.apache.xerces.impl.dv.ValidatedInfo)" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDelegate" />
	<method signature="boolean derivedFromType(org.apache.xerces.xs.XSTypeDefinition,short)" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDelegate" />
	<method signature="short getOrdered()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDelegate" />
	<method signature="short getFinal()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDelegate" />
	<method signature="org.apache.xerces.impl.dv.XSSimpleType getWrappedXSSimpleType()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDelegate" />
	<method signature="org.apache.xerces.xs.XSSimpleTypeDefinition getPrimitiveType()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDelegate" />
	<method signature="short getBuiltInKind()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDelegate" />
	<method signature="boolean isIDType()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDelegate" />
	<method signature="short getFixedFacets()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDelegate" />
	<method signature="boolean getBounded()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDelegate" />
	<method signature="org.apache.xerces.xs.XSObjectList getMultiValueFacets()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDelegate" />
	<method signature="java.lang.Object validate(java.lang.Object,org.apache.xerces.impl.dv.ValidationContext,org.apache.xerces.impl.dv.ValidatedInfo)" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDelegate" />
	<method signature="org.apache.xerces.xs.XSObjectList getAnnotations()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDelegate" />
	<method signature="org.apache.xerces.xs.XSTypeDefinition getBaseType()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDelegate" />
	<method signature="short getPrimitiveKind()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDelegate" />
	<method signature="org.apache.xerces.xs.XSNamespaceItem getNamespaceItem()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDelegate" />
	<method signature="org.apache.xerces.xs.XSObject getFacet(int)" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDelegate" />
	<method signature="void applyFacets(org.apache.xerces.impl.dv.XSFacets,short,short,org.apache.xerces.impl.dv.ValidationContext)" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDelegate" />
	<method signature="org.apache.xerces.xs.XSObjectList getMemberTypes()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDelegate" />
	<method signature="boolean isFixedFacet(short)" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDelegate" />
	<method signature="java.lang.String getLexicalFacetValue(short)" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDelegate" />
	<method signature="java.lang.String getNamespace()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDelegate" />
	<method signature="java.lang.String toString()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDelegate" />
	<method signature="boolean getFinite()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDelegate" />
	<method signature="boolean getNumeric()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDelegate" />
	<method signature="boolean isDefinedFacet(short)" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDelegate" />
	<method signature="org.apache.xerces.xs.XSObjectList getFacets()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDelegate" />
	<method signature="short getDefinedFacets()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDelegate" />
	<method signature="short getTypeCategory()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDelegate" />
	<class name="org.jfree.data.resources.DataPackageResources_es" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.resources.DataPackageResources_es" />
	<method signature="java.lang.Object[][] getContents()" class="org.jfree.data.resources.DataPackageResources_es" />
	<class name="org.w3c.dom.html.HTMLStyleElement" />
	<method signature="void setDisabled(boolean)" class="org.w3c.dom.html.HTMLStyleElement" />
	<method signature="java.lang.String getMedia()" class="org.w3c.dom.html.HTMLStyleElement" />
	<method signature="java.lang.String getType()" class="org.w3c.dom.html.HTMLStyleElement" />
	<method signature="void setType(java.lang.String)" class="org.w3c.dom.html.HTMLStyleElement" />
	<method signature="boolean getDisabled()" class="org.w3c.dom.html.HTMLStyleElement" />
	<method signature="void setMedia(java.lang.String)" class="org.w3c.dom.html.HTMLStyleElement" />
	<class name="org.apache.commons.lang3.reflect.FieldUtils" />
	<method signature="java.lang.Object readDeclaredStaticField(java.lang.Class,java.lang.String)" class="org.apache.commons.lang3.reflect.FieldUtils" />
	<method signature="java.lang.reflect.Field[] getFieldsWithAnnotation(java.lang.Class,java.lang.Class)" class="org.apache.commons.lang3.reflect.FieldUtils" />
	<method signature="java.lang.Object readField(java.lang.reflect.Field,java.lang.Object,boolean)" class="org.apache.commons.lang3.reflect.FieldUtils" />
	<method signature="void writeStaticField(java.lang.reflect.Field,java.lang.Object)" class="org.apache.commons.lang3.reflect.FieldUtils" />
	<method signature="java.lang.Object readStaticField(java.lang.Class,java.lang.String,boolean)" class="org.apache.commons.lang3.reflect.FieldUtils" />
	<method signature="java.lang.Object readDeclaredField(java.lang.Object,java.lang.String)" class="org.apache.commons.lang3.reflect.FieldUtils" />
	<method signature="void writeField(java.lang.Object,java.lang.String,java.lang.Object,boolean)" class="org.apache.commons.lang3.reflect.FieldUtils" />
	<method signature="java.lang.Object readStaticField(java.lang.reflect.Field)" class="org.apache.commons.lang3.reflect.FieldUtils" />
	<method signature="void writeField(java.lang.Object,java.lang.String,java.lang.Object)" class="org.apache.commons.lang3.reflect.FieldUtils" />
	<method signature="void writeDeclaredStaticField(java.lang.Class,java.lang.String,java.lang.Object)" class="org.apache.commons.lang3.reflect.FieldUtils" />
	<method signature="java.util.List getFieldsListWithAnnotation(java.lang.Class,java.lang.Class)" class="org.apache.commons.lang3.reflect.FieldUtils" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.reflect.FieldUtils" />
	<method signature="java.lang.Object readField(java.lang.Object,java.lang.String)" class="org.apache.commons.lang3.reflect.FieldUtils" />
	<method signature="void writeStaticField(java.lang.Class,java.lang.String,java.lang.Object,boolean)" class="org.apache.commons.lang3.reflect.FieldUtils" />
	<method signature="java.util.List getAllFieldsList(java.lang.Class)" class="org.apache.commons.lang3.reflect.FieldUtils" />
	<method signature="void writeStaticField(java.lang.reflect.Field,java.lang.Object,boolean)" class="org.apache.commons.lang3.reflect.FieldUtils" />
	<method signature="java.lang.reflect.Field getDeclaredField(java.lang.Class,java.lang.String)" class="org.apache.commons.lang3.reflect.FieldUtils" />
	<method signature="java.lang.Object readField(java.lang.reflect.Field,java.lang.Object)" class="org.apache.commons.lang3.reflect.FieldUtils" />
	<method signature="void writeDeclaredField(java.lang.Object,java.lang.String,java.lang.Object)" class="org.apache.commons.lang3.reflect.FieldUtils" />
	<method signature="java.lang.reflect.Field getField(java.lang.Class,java.lang.String,boolean)" class="org.apache.commons.lang3.reflect.FieldUtils" />
	<method signature="void removeFinalModifier(java.lang.reflect.Field,boolean)" class="org.apache.commons.lang3.reflect.FieldUtils" />
	<method signature="void writeDeclaredField(java.lang.Object,java.lang.String,java.lang.Object,boolean)" class="org.apache.commons.lang3.reflect.FieldUtils" />
	<method signature="void removeFinalModifier(java.lang.reflect.Field)" class="org.apache.commons.lang3.reflect.FieldUtils" />
	<method signature="java.lang.Object readStaticField(java.lang.reflect.Field,boolean)" class="org.apache.commons.lang3.reflect.FieldUtils" />
	<method signature="java.lang.reflect.Field getField(java.lang.Class,java.lang.String)" class="org.apache.commons.lang3.reflect.FieldUtils" />
	<method signature="java.lang.Object readDeclaredField(java.lang.Object,java.lang.String,boolean)" class="org.apache.commons.lang3.reflect.FieldUtils" />
	<method signature="void writeStaticField(java.lang.Class,java.lang.String,java.lang.Object)" class="org.apache.commons.lang3.reflect.FieldUtils" />
	<method signature="java.lang.reflect.Field getDeclaredField(java.lang.Class,java.lang.String,boolean)" class="org.apache.commons.lang3.reflect.FieldUtils" />
	<method signature="void writeField(java.lang.reflect.Field,java.lang.Object,java.lang.Object,boolean)" class="org.apache.commons.lang3.reflect.FieldUtils" />
	<method signature="java.lang.Object readDeclaredStaticField(java.lang.Class,java.lang.String,boolean)" class="org.apache.commons.lang3.reflect.FieldUtils" />
	<method signature="void writeField(java.lang.reflect.Field,java.lang.Object,java.lang.Object)" class="org.apache.commons.lang3.reflect.FieldUtils" />
	<method signature="java.lang.reflect.Field[] getAllFields(java.lang.Class)" class="org.apache.commons.lang3.reflect.FieldUtils" />
	<method signature="java.lang.Object readField(java.lang.Object,java.lang.String,boolean)" class="org.apache.commons.lang3.reflect.FieldUtils" />
	<method signature="java.lang.Object readStaticField(java.lang.Class,java.lang.String)" class="org.apache.commons.lang3.reflect.FieldUtils" />
	<method signature="void writeDeclaredStaticField(java.lang.Class,java.lang.String,java.lang.Object,boolean)" class="org.apache.commons.lang3.reflect.FieldUtils" />
	<class name="org.apache.xerces.impl.XMLDTDScannerImpl" />
	<method signature="java.lang.String[] getRecognizedProperties()" class="org.apache.xerces.impl.XMLDTDScannerImpl" />
	<method signature="void reset()" class="org.apache.xerces.impl.XMLDTDScannerImpl" />
	<method signature="boolean scanDTDInternalSubset(boolean,boolean,boolean)" class="org.apache.xerces.impl.XMLDTDScannerImpl" />
	<method signature="boolean scanDTDExternalSubset(boolean)" class="org.apache.xerces.impl.XMLDTDScannerImpl" />
	<method signature="java.lang.Boolean getFeatureDefault(java.lang.String)" class="org.apache.xerces.impl.XMLDTDScannerImpl" />
	<method signature="org.apache.xerces.xni.XMLDTDContentModelHandler getDTDContentModelHandler()" class="org.apache.xerces.impl.XMLDTDScannerImpl" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable,org.apache.xerces.impl.XMLErrorReporter,org.apache.xerces.impl.XMLEntityManager)" class="org.apache.xerces.impl.XMLDTDScannerImpl" />
	<method signature="void reset(org.apache.xerces.xni.parser.XMLComponentManager)" class="org.apache.xerces.impl.XMLDTDScannerImpl" />
	<method signature="void endEntity(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.XMLDTDScannerImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.XMLDTDScannerImpl" />
	<method signature="void setInputSource(org.apache.xerces.xni.parser.XMLInputSource)" class="org.apache.xerces.impl.XMLDTDScannerImpl" />
	<method signature="void setDTDHandler(org.apache.xerces.xni.XMLDTDHandler)" class="org.apache.xerces.impl.XMLDTDScannerImpl" />
	<method signature="org.apache.xerces.xni.XMLDTDHandler getDTDHandler()" class="org.apache.xerces.impl.XMLDTDScannerImpl" />
	<method signature="void startEntity(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.XMLDTDScannerImpl" />
	<method signature="java.lang.String[] getRecognizedFeatures()" class="org.apache.xerces.impl.XMLDTDScannerImpl" />
	<method signature="java.lang.Object getPropertyDefault(java.lang.String)" class="org.apache.xerces.impl.XMLDTDScannerImpl" />
	<method signature="void setDTDContentModelHandler(org.apache.xerces.xni.XMLDTDContentModelHandler)" class="org.apache.xerces.impl.XMLDTDScannerImpl" />
	<class name="javax.xml.stream.events.Comment" />
	<method signature="java.lang.String getText()" class="javax.xml.stream.events.Comment" />
	<class name="org.jdom2.input.stax.DTDParser" />
	<method signature="org.jdom2.DocType parse(java.lang.String,org.jdom2.JDOMFactory)" class="org.jdom2.input.stax.DTDParser" />
	<class name="org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator" />
	<method signature="void &lt;init&gt;(java.lang.String,java.text.NumberFormat)" class="org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator" />
	<class name="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setOutlineStroke(java.awt.Stroke)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="boolean getBaseSeriesVisible()" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="org.jfree.chart.labels.CategoryItemLabelGenerator getItemLabelGenerator(int,int)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="java.awt.Font getItemLabelFont(int,int)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setBaseItemLabelFont(java.awt.Font)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setSeriesPaint(int,java.awt.Paint)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setSeriesPositiveItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition,boolean)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void drawDomainMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.plot.CategoryMarker,java.awt.geom.Rectangle2D)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="org.jfree.chart.labels.ItemLabelPosition getPositiveItemLabelPosition()" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void drawDomainGridline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,double)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setSeriesOutlineStroke(int,java.awt.Stroke)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="java.awt.Stroke getSeriesOutlineStroke(int)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setItemLabelPaint(java.awt.Paint)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void removeChangeListener(org.jfree.chart.event.RendererChangeListener)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="org.jfree.chart.LegendItem getLegendItem(int,int)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="org.jfree.chart.labels.CategoryToolTipGenerator getSeriesToolTipGenerator(int)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setSeriesItemLabelGenerator(int,org.jfree.chart.labels.CategoryItemLabelGenerator)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setBaseItemLabelGenerator(org.jfree.chart.labels.CategoryItemLabelGenerator)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="boolean getItemVisible(int,int)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="org.jfree.chart.labels.ItemLabelPosition getPositiveItemLabelPosition(int,int)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="boolean isSeriesItemLabelsVisible(int)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="org.jfree.chart.labels.ItemLabelPosition getBasePositiveItemLabelPosition()" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setItemLabelFont(java.awt.Font)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setPlot(org.jfree.chart.plot.CategoryPlot)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setBaseOutlinePaint(java.awt.Paint)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setItemLabelsVisible(java.lang.Boolean)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setSeriesVisible(int,java.lang.Boolean)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="org.jfree.chart.labels.CategoryToolTipGenerator getBaseToolTipGenerator()" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setBaseItemLabelPaint(java.awt.Paint)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="boolean isSeriesVisibleInLegend(int)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="double getItemMiddle(java.lang.Comparable,java.lang.Comparable,org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setSeriesItemURLGenerator(int,org.jfree.chart.urls.CategoryURLGenerator)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="java.awt.Paint getSeriesItemLabelPaint(int)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setSeriesPositiveItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setItemLabelsVisible(java.lang.Boolean,boolean)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="org.jfree.chart.labels.CategoryToolTipGenerator getToolTipGenerator()" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="int getPassCount()" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setSeriesOutlinePaint(int,java.awt.Paint)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="boolean isItemLabelVisible(int,int)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setSeriesVisible(java.lang.Boolean)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setSeriesItemLabelsVisible(int,java.lang.Boolean,boolean)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setBaseSeriesVisibleInLegend(boolean)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="org.jfree.chart.labels.CategoryItemLabelGenerator getSeriesItemLabelGenerator(int)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setItemURLGenerator(org.jfree.chart.urls.CategoryURLGenerator)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setOutlinePaint(java.awt.Paint)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="java.awt.Paint getItemLabelPaint()" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="org.jfree.chart.labels.ItemLabelPosition getNegativeItemLabelPosition(int,int)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setPaint(java.awt.Paint)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setSeriesVisible(java.lang.Boolean,boolean)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setSeriesVisibleInLegend(int,java.lang.Boolean,boolean)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setBaseToolTipGenerator(org.jfree.chart.labels.CategoryToolTipGenerator)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="java.awt.Shape getSeriesShape(int)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="org.jfree.chart.labels.ItemLabelPosition getNegativeItemLabelPosition()" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setShape(java.awt.Shape)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="org.jfree.chart.labels.CategoryToolTipGenerator getToolTipGenerator(int,int)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setToolTipGenerator(org.jfree.chart.labels.CategoryToolTipGenerator)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="java.awt.Shape getBaseShape()" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="java.awt.Paint getItemPaint(int,int)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void addChangeListener(org.jfree.chart.event.RendererChangeListener)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="java.awt.Paint getBasePaint()" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setBaseShape(java.awt.Shape)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setSeriesItemLabelsVisible(int,boolean)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="org.jfree.chart.labels.CategoryItemLabelGenerator getBaseItemLabelGenerator()" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="java.awt.Paint getBaseItemLabelPaint()" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setItemLabelsVisible(boolean)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setStroke(java.awt.Stroke)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="org.jfree.chart.renderer.category.CategoryItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setBaseSeriesVisible(boolean)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setSeriesShape(int,java.awt.Shape)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="java.lang.Boolean getSeriesVisibleInLegend()" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setNegativeItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setSeriesToolTipGenerator(int,org.jfree.chart.labels.CategoryToolTipGenerator)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void drawBackground(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setNegativeItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition,boolean)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="java.lang.Boolean getSeriesVisible(int)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="java.awt.Stroke getSeriesStroke(int)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setSeriesItemLabelFont(int,java.awt.Font)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="java.awt.Paint getBaseOutlinePaint()" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="java.awt.Shape getItemShape(int,int)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="org.jfree.chart.labels.ItemLabelPosition getBaseNegativeItemLabelPosition()" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setSeriesItemLabelPaint(int,java.awt.Paint)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="org.jfree.chart.urls.CategoryURLGenerator getSeriesItemURLGenerator(int)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="java.awt.Stroke getBaseOutlineStroke()" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setBaseStroke(java.awt.Stroke)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void drawOutline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setItemLabelGenerator(org.jfree.chart.labels.CategoryItemLabelGenerator)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="java.awt.Font getItemLabelFont()" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="java.awt.Font getBaseItemLabelFont()" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setSeriesItemLabelsVisible(int,java.lang.Boolean)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="org.jfree.chart.labels.ItemLabelPosition getSeriesNegativeItemLabelPosition(int)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="java.awt.Paint getSeriesOutlinePaint(int)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="java.awt.Stroke getItemOutlineStroke(int,int)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setBaseItemLabelsVisible(java.lang.Boolean)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setBaseOutlineStroke(java.awt.Stroke)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="org.jfree.chart.urls.CategoryURLGenerator getItemURLGenerator(int,int)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="java.awt.Paint getItemOutlinePaint(int,int)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="java.lang.Boolean getSeriesVisible()" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="boolean isSeriesVisible(int)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setBaseItemURLGenerator(org.jfree.chart.urls.CategoryURLGenerator)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="org.jfree.chart.plot.CategoryPlot getPlot()" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setSeriesVisibleInLegend(int,java.lang.Boolean)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setBasePaint(java.awt.Paint)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setBaseItemLabelsVisible(java.lang.Boolean,boolean)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="java.lang.Boolean getSeriesVisibleInLegend(int)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setSeriesVisibleInLegend(java.lang.Boolean,boolean)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setSeriesVisible(int,java.lang.Boolean,boolean)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setBaseSeriesVisibleInLegend(boolean,boolean)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="boolean getBaseSeriesVisibleInLegend()" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setSeriesVisibleInLegend(java.lang.Boolean)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setSeriesNegativeItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition,boolean)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="java.awt.Stroke getBaseStroke()" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="org.jfree.chart.urls.CategoryURLGenerator getBaseItemURLGenerator()" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void drawRangeGridline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setPositiveItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition,boolean)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="java.lang.Boolean getBaseItemLabelsVisible()" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setSeriesStroke(int,java.awt.Stroke)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setPositiveItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setSeriesNegativeItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setBaseItemLabelsVisible(boolean)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="org.jfree.chart.labels.ItemLabelPosition getSeriesPositiveItemLabelPosition(int)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setBasePositiveItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="java.awt.Paint getSeriesPaint(int)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="java.awt.Paint getItemLabelPaint(int,int)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="java.awt.Stroke getItemStroke(int,int)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setBasePositiveItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition,boolean)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setBaseNegativeItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setBaseSeriesVisible(boolean,boolean)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="void setBaseNegativeItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition,boolean)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<method signature="java.awt.Font getSeriesItemLabelFont(int)" class="org.jfree.chart.renderer.category.CategoryItemRenderer" />
	<class name="org.jfree.data.resources.DataPackageResources_de" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.resources.DataPackageResources_de" />
	<method signature="java.lang.Object[][] getContents()" class="org.jfree.data.resources.DataPackageResources_de" />
	<class name="org.jfree.date.SerialDate" />
	<method signature="org.jfree.date.SerialDate createInstance(int,int,int)" class="org.jfree.date.SerialDate" />
	<method signature="java.lang.String[] getMonths()" class="org.jfree.date.SerialDate" />
	<method signature="int lastDayOfMonth(int,int)" class="org.jfree.date.SerialDate" />
	<method signature="org.jfree.date.SerialDate createInstance(java.util.Date)" class="org.jfree.date.SerialDate" />
	<method signature="org.jfree.date.SerialDate addMonths(int,org.jfree.date.SerialDate)" class="org.jfree.date.SerialDate" />
	<method signature="int monthCodeToQuarter(int)" class="org.jfree.date.SerialDate" />
	<method signature="boolean isValidMonthCode(int)" class="org.jfree.date.SerialDate" />
	<method signature="boolean isBefore(org.jfree.date.SerialDate)" class="org.jfree.date.SerialDate" />
	<method signature="int stringToWeekdayCode(java.lang.String)" class="org.jfree.date.SerialDate" />
	<method signature="java.lang.String monthCodeToString(int,boolean)" class="org.jfree.date.SerialDate" />
	<method signature="java.lang.String getDescription()" class="org.jfree.date.SerialDate" />
	<method signature="int getDayOfMonth()" class="org.jfree.date.SerialDate" />
	<method signature="org.jfree.date.SerialDate getNearestDayOfWeek(int,org.jfree.date.SerialDate)" class="org.jfree.date.SerialDate" />
	<method signature="boolean isInRange(org.jfree.date.SerialDate,org.jfree.date.SerialDate)" class="org.jfree.date.SerialDate" />
	<method signature="org.jfree.date.SerialDate getFollowingDayOfWeek(int)" class="org.jfree.date.SerialDate" />
	<method signature="java.lang.String monthCodeToString(int)" class="org.jfree.date.SerialDate" />
	<method signature="java.lang.String weekInMonthToString(int)" class="org.jfree.date.SerialDate" />
	<method signature="org.jfree.date.SerialDate createInstance(int)" class="org.jfree.date.SerialDate" />
	<method signature="java.lang.String relativeToString(int)" class="org.jfree.date.SerialDate" />
	<method signature="boolean isAfter(org.jfree.date.SerialDate)" class="org.jfree.date.SerialDate" />
	<method signature="org.jfree.date.SerialDate getNearestDayOfWeek(int)" class="org.jfree.date.SerialDate" />
	<method signature="void setDescription(java.lang.String)" class="org.jfree.date.SerialDate" />
	<method signature="org.jfree.date.SerialDate getFollowingDayOfWeek(int,org.jfree.date.SerialDate)" class="org.jfree.date.SerialDate" />
	<method signature="boolean isOnOrBefore(org.jfree.date.SerialDate)" class="org.jfree.date.SerialDate" />
	<method signature="java.lang.String weekdayCodeToString(int)" class="org.jfree.date.SerialDate" />
	<method signature="int leapYearCount(int)" class="org.jfree.date.SerialDate" />
	<method signature="int getYYYY()" class="org.jfree.date.SerialDate" />
	<method signature="int getDayOfWeek()" class="org.jfree.date.SerialDate" />
	<method signature="org.jfree.date.SerialDate addDays(int,org.jfree.date.SerialDate)" class="org.jfree.date.SerialDate" />
	<method signature="int compare(org.jfree.date.SerialDate)" class="org.jfree.date.SerialDate" />
	<method signature="int getMonth()" class="org.jfree.date.SerialDate" />
	<method signature="org.jfree.date.SerialDate getEndOfCurrentMonth(org.jfree.date.SerialDate)" class="org.jfree.date.SerialDate" />
	<method signature="boolean isInRange(org.jfree.date.SerialDate,org.jfree.date.SerialDate,int)" class="org.jfree.date.SerialDate" />
	<method signature="org.jfree.date.SerialDate getPreviousDayOfWeek(int)" class="org.jfree.date.SerialDate" />
	<method signature="boolean isOnOrAfter(org.jfree.date.SerialDate)" class="org.jfree.date.SerialDate" />
	<method signature="java.lang.String[] getMonths(boolean)" class="org.jfree.date.SerialDate" />
	<method signature="org.jfree.date.SerialDate addYears(int,org.jfree.date.SerialDate)" class="org.jfree.date.SerialDate" />
	<method signature="org.jfree.date.SerialDate getPreviousDayOfWeek(int,org.jfree.date.SerialDate)" class="org.jfree.date.SerialDate" />
	<method signature="java.lang.String toString()" class="org.jfree.date.SerialDate" />
	<method signature="boolean isLeapYear(int)" class="org.jfree.date.SerialDate" />
	<method signature="int toSerial()" class="org.jfree.date.SerialDate" />
	<method signature="boolean isValidWeekdayCode(int)" class="org.jfree.date.SerialDate" />
	<method signature="boolean isValidWeekInMonthCode(int)" class="org.jfree.date.SerialDate" />
	<method signature="java.util.Date toDate()" class="org.jfree.date.SerialDate" />
	<method signature="boolean isOn(org.jfree.date.SerialDate)" class="org.jfree.date.SerialDate" />
	<method signature="int stringToMonthCode(java.lang.String)" class="org.jfree.date.SerialDate" />
	<class name="org.jfree.chart.renderer.category.ScatterRenderer" />
	<method signature="void setDrawOutlines(boolean)" class="org.jfree.chart.renderer.category.ScatterRenderer" />
	<method signature="void setItemMargin(double)" class="org.jfree.chart.renderer.category.ScatterRenderer" />
	<method signature="void setBaseShapesFilled(boolean)" class="org.jfree.chart.renderer.category.ScatterRenderer" />
	<method signature="void setSeriesShapesFilled(int,boolean)" class="org.jfree.chart.renderer.category.ScatterRenderer" />
	<method signature="org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)" class="org.jfree.chart.renderer.category.ScatterRenderer" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.renderer.category.ScatterRenderer" />
	<method signature="org.jfree.chart.LegendItem getLegendItem(int,int)" class="org.jfree.chart.renderer.category.ScatterRenderer" />
	<method signature="boolean getUseSeriesOffset()" class="org.jfree.chart.renderer.category.ScatterRenderer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.category.ScatterRenderer" />
	<method signature="void setUseFillPaint(boolean)" class="org.jfree.chart.renderer.category.ScatterRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.category.ScatterRenderer" />
	<method signature="void setSeriesShapesFilled(int,java.lang.Boolean)" class="org.jfree.chart.renderer.category.ScatterRenderer" />
	<method signature="double getItemMargin()" class="org.jfree.chart.renderer.category.ScatterRenderer" />
	<method signature="boolean getItemShapeFilled(int,int)" class="org.jfree.chart.renderer.category.ScatterRenderer" />
	<method signature="boolean getUseFillPaint()" class="org.jfree.chart.renderer.category.ScatterRenderer" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)" class="org.jfree.chart.renderer.category.ScatterRenderer" />
	<method signature="void setUseOutlinePaint(boolean)" class="org.jfree.chart.renderer.category.ScatterRenderer" />
	<method signature="boolean getUseOutlinePaint()" class="org.jfree.chart.renderer.category.ScatterRenderer" />
	<method signature="boolean getDrawOutlines()" class="org.jfree.chart.renderer.category.ScatterRenderer" />
	<method signature="void setUseSeriesOffset(boolean)" class="org.jfree.chart.renderer.category.ScatterRenderer" />
	<method signature="boolean getBaseShapesFilled()" class="org.jfree.chart.renderer.category.ScatterRenderer" />
	<method signature="boolean getSeriesShapesFilled(int)" class="org.jfree.chart.renderer.category.ScatterRenderer" />
	<class name="org.jfree.ui.SortButtonRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.ui.SortButtonRenderer" />
	<method signature="java.awt.Component getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)" class="org.jfree.ui.SortButtonRenderer" />
	<method signature="void setPressedColumn(int)" class="org.jfree.ui.SortButtonRenderer" />
	<class name="org.jfree.ui.TextAnchor" />
	<method signature="int hashCode()" class="org.jfree.ui.TextAnchor" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.ui.TextAnchor" />
	<method signature="java.lang.String toString()" class="org.jfree.ui.TextAnchor" />
	<class name="org.jfree.chart.renderer.xy.XYStepRenderer" />
	<method signature="void &lt;init&gt;(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" class="org.jfree.chart.renderer.xy.XYStepRenderer" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.renderer.xy.XYStepRenderer" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)" class="org.jfree.chart.renderer.xy.XYStepRenderer" />
	<method signature="int hashCode()" class="org.jfree.chart.renderer.xy.XYStepRenderer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.xy.XYStepRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.xy.XYStepRenderer" />
	<method signature="void setStepPoint(double)" class="org.jfree.chart.renderer.xy.XYStepRenderer" />
	<method signature="double getStepPoint()" class="org.jfree.chart.renderer.xy.XYStepRenderer" />
	<class name="javax.xml.datatype.XMLGregorianCalendar" />
	<method signature="int getYear()" class="javax.xml.datatype.XMLGregorianCalendar" />
	<method signature="int compare(javax.xml.datatype.XMLGregorianCalendar)" class="javax.xml.datatype.XMLGregorianCalendar" />
	<method signature="int getTimezone()" class="javax.xml.datatype.XMLGregorianCalendar" />
	<method signature="void reset()" class="javax.xml.datatype.XMLGregorianCalendar" />
	<method signature="java.util.GregorianCalendar toGregorianCalendar(java.util.TimeZone,java.util.Locale,javax.xml.datatype.XMLGregorianCalendar)" class="javax.xml.datatype.XMLGregorianCalendar" />
	<method signature="void setDay(int)" class="javax.xml.datatype.XMLGregorianCalendar" />
	<method signature="void setYear(java.math.BigInteger)" class="javax.xml.datatype.XMLGregorianCalendar" />
	<method signature="int getSecond()" class="javax.xml.datatype.XMLGregorianCalendar" />
	<method signature="void setTime(int,int,int,java.math.BigDecimal)" class="javax.xml.datatype.XMLGregorianCalendar" />
	<method signature="java.math.BigInteger getEonAndYear()" class="javax.xml.datatype.XMLGregorianCalendar" />
	<method signature="void setMinute(int)" class="javax.xml.datatype.XMLGregorianCalendar" />
	<method signature="java.util.GregorianCalendar toGregorianCalendar()" class="javax.xml.datatype.XMLGregorianCalendar" />
	<method signature="java.lang.Object clone()" class="javax.xml.datatype.XMLGregorianCalendar" />
	<method signature="void clear()" class="javax.xml.datatype.XMLGregorianCalendar" />
	<method signature="boolean equals(java.lang.Object)" class="javax.xml.datatype.XMLGregorianCalendar" />
	<method signature="void &lt;init&gt;()" class="javax.xml.datatype.XMLGregorianCalendar" />
	<method signature="javax.xml.datatype.XMLGregorianCalendar normalize()" class="javax.xml.datatype.XMLGregorianCalendar" />
	<method signature="int getDay()" class="javax.xml.datatype.XMLGregorianCalendar" />
	<method signature="boolean isValid()" class="javax.xml.datatype.XMLGregorianCalendar" />
	<method signature="java.util.TimeZone getTimeZone(int)" class="javax.xml.datatype.XMLGregorianCalendar" />
	<method signature="void setTime(int,int,int,int)" class="javax.xml.datatype.XMLGregorianCalendar" />
	<method signature="void add(javax.xml.datatype.Duration)" class="javax.xml.datatype.XMLGregorianCalendar" />
	<method signature="int getMillisecond()" class="javax.xml.datatype.XMLGregorianCalendar" />
	<method signature="int hashCode()" class="javax.xml.datatype.XMLGregorianCalendar" />
	<method signature="void setMillisecond(int)" class="javax.xml.datatype.XMLGregorianCalendar" />
	<method signature="java.lang.String toXMLFormat()" class="javax.xml.datatype.XMLGregorianCalendar" />
	<method signature="void setTime(int,int,int)" class="javax.xml.datatype.XMLGregorianCalendar" />
	<method signature="int getMinute()" class="javax.xml.datatype.XMLGregorianCalendar" />
	<method signature="int getHour()" class="javax.xml.datatype.XMLGregorianCalendar" />
	<method signature="void setSecond(int)" class="javax.xml.datatype.XMLGregorianCalendar" />
	<method signature="int getMonth()" class="javax.xml.datatype.XMLGregorianCalendar" />
	<method signature="java.math.BigDecimal getFractionalSecond()" class="javax.xml.datatype.XMLGregorianCalendar" />
	<method signature="void setYear(int)" class="javax.xml.datatype.XMLGregorianCalendar" />
	<method signature="void setHour(int)" class="javax.xml.datatype.XMLGregorianCalendar" />
	<method signature="java.math.BigInteger getEon()" class="javax.xml.datatype.XMLGregorianCalendar" />
	<method signature="void setTimezone(int)" class="javax.xml.datatype.XMLGregorianCalendar" />
	<method signature="javax.xml.namespace.QName getXMLSchemaType()" class="javax.xml.datatype.XMLGregorianCalendar" />
	<method signature="void setFractionalSecond(java.math.BigDecimal)" class="javax.xml.datatype.XMLGregorianCalendar" />
	<method signature="java.lang.String toString()" class="javax.xml.datatype.XMLGregorianCalendar" />
	<method signature="void setMonth(int)" class="javax.xml.datatype.XMLGregorianCalendar" />
	<class name="org.jfree.chart.encoders.ImageEncoder" />
	<method signature="boolean isEncodingAlpha()" class="org.jfree.chart.encoders.ImageEncoder" />
	<method signature="float getQuality()" class="org.jfree.chart.encoders.ImageEncoder" />
	<method signature="void setEncodingAlpha(boolean)" class="org.jfree.chart.encoders.ImageEncoder" />
	<method signature="byte[] encode(java.awt.image.BufferedImage)" class="org.jfree.chart.encoders.ImageEncoder" />
	<method signature="void encode(java.awt.image.BufferedImage,java.io.OutputStream)" class="org.jfree.chart.encoders.ImageEncoder" />
	<method signature="void setQuality(float)" class="org.jfree.chart.encoders.ImageEncoder" />
	<class name="org.apache.commons.lang3.ClassPathUtils" />
	<method signature="java.lang.String toFullyQualifiedName(java.lang.Package,java.lang.String)" class="org.apache.commons.lang3.ClassPathUtils" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.ClassPathUtils" />
	<method signature="java.lang.String toFullyQualifiedPath(java.lang.Class,java.lang.String)" class="org.apache.commons.lang3.ClassPathUtils" />
	<method signature="java.lang.String toFullyQualifiedPath(java.lang.Package,java.lang.String)" class="org.apache.commons.lang3.ClassPathUtils" />
	<method signature="java.lang.String toFullyQualifiedName(java.lang.Class,java.lang.String)" class="org.apache.commons.lang3.ClassPathUtils" />
	<class name="javax.xml.stream.XMLEventWriter" />
	<method signature="void add(javax.xml.stream.XMLEventReader)" class="javax.xml.stream.XMLEventWriter" />
	<method signature="void setPrefix(java.lang.String,java.lang.String)" class="javax.xml.stream.XMLEventWriter" />
	<method signature="java.lang.String getPrefix(java.lang.String)" class="javax.xml.stream.XMLEventWriter" />
	<method signature="void setNamespaceContext(javax.xml.namespace.NamespaceContext)" class="javax.xml.stream.XMLEventWriter" />
	<method signature="javax.xml.namespace.NamespaceContext getNamespaceContext()" class="javax.xml.stream.XMLEventWriter" />
	<method signature="void close()" class="javax.xml.stream.XMLEventWriter" />
	<method signature="void setDefaultNamespace(java.lang.String)" class="javax.xml.stream.XMLEventWriter" />
	<method signature="void add(javax.xml.stream.events.XMLEvent)" class="javax.xml.stream.XMLEventWriter" />
	<method signature="void flush()" class="javax.xml.stream.XMLEventWriter" />
	<class name="org.apache.commons.lang3.reflect.MethodUtils" />
	<method signature="java.lang.Object invokeStaticMethod(java.lang.Class,java.lang.String,java.lang.Object[])" class="org.apache.commons.lang3.reflect.MethodUtils" />
	<method signature="java.lang.reflect.Method getAccessibleMethod(java.lang.Class,java.lang.String,java.lang.Class[])" class="org.apache.commons.lang3.reflect.MethodUtils" />
	<method signature="java.lang.Object invokeExactStaticMethod(java.lang.Class,java.lang.String,java.lang.Object[])" class="org.apache.commons.lang3.reflect.MethodUtils" />
	<method signature="java.util.Set getOverrideHierarchy(java.lang.reflect.Method,org.apache.commons.lang3.ClassUtils$Interfaces)" class="org.apache.commons.lang3.reflect.MethodUtils" />
	<method signature="java.lang.reflect.Method[] getMethodsWithAnnotation(java.lang.Class,java.lang.Class)" class="org.apache.commons.lang3.reflect.MethodUtils" />
	<method signature="java.lang.Object invokeExactMethod(java.lang.Object,java.lang.String,java.lang.Object[],java.lang.Class[])" class="org.apache.commons.lang3.reflect.MethodUtils" />
	<method signature="java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[])" class="org.apache.commons.lang3.reflect.MethodUtils" />
	<method signature="java.util.List getMethodsListWithAnnotation(java.lang.Class,java.lang.Class)" class="org.apache.commons.lang3.reflect.MethodUtils" />
	<method signature="java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[],java.lang.Class[])" class="org.apache.commons.lang3.reflect.MethodUtils" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.reflect.MethodUtils" />
	<method signature="java.lang.Object invokeExactStaticMethod(java.lang.Class,java.lang.String,java.lang.Object[],java.lang.Class[])" class="org.apache.commons.lang3.reflect.MethodUtils" />
	<method signature="java.lang.Object invokeExactMethod(java.lang.Object,java.lang.String,java.lang.Object[])" class="org.apache.commons.lang3.reflect.MethodUtils" />
	<method signature="java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.Class,java.lang.String,java.lang.Class[])" class="org.apache.commons.lang3.reflect.MethodUtils" />
	<method signature="java.lang.Object invokeExactMethod(java.lang.Object,java.lang.String)" class="org.apache.commons.lang3.reflect.MethodUtils" />
	<method signature="java.lang.reflect.Method getAccessibleMethod(java.lang.reflect.Method)" class="org.apache.commons.lang3.reflect.MethodUtils" />
	<method signature="java.lang.Object invokeMethod(java.lang.Object,java.lang.String)" class="org.apache.commons.lang3.reflect.MethodUtils" />
	<method signature="java.lang.Object invokeStaticMethod(java.lang.Class,java.lang.String,java.lang.Object[],java.lang.Class[])" class="org.apache.commons.lang3.reflect.MethodUtils" />
	<class name="org.w3c.dom.traversal.TreeWalker" />
	<method signature="org.w3c.dom.Node parentNode()" class="org.w3c.dom.traversal.TreeWalker" />
	<method signature="org.w3c.dom.Node nextSibling()" class="org.w3c.dom.traversal.TreeWalker" />
	<method signature="org.w3c.dom.Node getCurrentNode()" class="org.w3c.dom.traversal.TreeWalker" />
	<method signature="boolean getExpandEntityReferences()" class="org.w3c.dom.traversal.TreeWalker" />
	<method signature="org.w3c.dom.traversal.NodeFilter getFilter()" class="org.w3c.dom.traversal.TreeWalker" />
	<method signature="void setCurrentNode(org.w3c.dom.Node)" class="org.w3c.dom.traversal.TreeWalker" />
	<method signature="int getWhatToShow()" class="org.w3c.dom.traversal.TreeWalker" />
	<method signature="org.w3c.dom.Node firstChild()" class="org.w3c.dom.traversal.TreeWalker" />
	<method signature="org.w3c.dom.Node lastChild()" class="org.w3c.dom.traversal.TreeWalker" />
	<method signature="org.w3c.dom.Node nextNode()" class="org.w3c.dom.traversal.TreeWalker" />
	<method signature="org.w3c.dom.Node previousSibling()" class="org.w3c.dom.traversal.TreeWalker" />
	<method signature="org.w3c.dom.Node getRoot()" class="org.w3c.dom.traversal.TreeWalker" />
	<method signature="org.w3c.dom.Node previousNode()" class="org.w3c.dom.traversal.TreeWalker" />
	<class name="org.apache.xerces.impl.xs.util.ObjectListImpl" />
	<method signature="int size()" class="org.apache.xerces.impl.xs.util.ObjectListImpl" />
	<method signature="boolean contains(java.lang.Object)" class="org.apache.xerces.impl.xs.util.ObjectListImpl" />
	<method signature="java.lang.Object get(int)" class="org.apache.xerces.impl.xs.util.ObjectListImpl" />
	<method signature="java.lang.Object[] toArray(java.lang.Object[])" class="org.apache.xerces.impl.xs.util.ObjectListImpl" />
	<method signature="java.lang.Object item(int)" class="org.apache.xerces.impl.xs.util.ObjectListImpl" />
	<method signature="int getLength()" class="org.apache.xerces.impl.xs.util.ObjectListImpl" />
	<method signature="java.lang.Object[] toArray()" class="org.apache.xerces.impl.xs.util.ObjectListImpl" />
	<method signature="void &lt;init&gt;(java.lang.Object[],int)" class="org.apache.xerces.impl.xs.util.ObjectListImpl" />
	<class name="tourma.JdgPairing" />
	<method signature="void &lt;init&gt;(java.awt.Frame,boolean,tourma.data.Team,tourma.data.Team,tourma.data.Round,tourma.data.TeamMatch)" class="tourma.JdgPairing" />
	<class name="com.toedter.calendar.JDateChooserBeanInfo" />
	<method signature="void &lt;init&gt;()" class="com.toedter.calendar.JDateChooserBeanInfo" />
	<class name="org.apache.html.dom.HTMLDOMImplementationImpl" />
	<method signature="org.w3c.dom.html.HTMLDocument createHTMLDocument(java.lang.String)" class="org.apache.html.dom.HTMLDOMImplementationImpl" />
	<method signature="org.w3c.dom.html.HTMLDOMImplementation getHTMLDOMImplementation()" class="org.apache.html.dom.HTMLDOMImplementationImpl" />
	<class name="freemarker.template.ObjectWrapper" />
	<method signature="freemarker.template.TemplateModel wrap(java.lang.Object)" class="freemarker.template.ObjectWrapper" />
	<class name="org.apache.xerces.impl.io.Latin1Reader" />
	<method signature="void mark(int)" class="org.apache.xerces.impl.io.Latin1Reader" />
	<method signature="int read(char[],int,int)" class="org.apache.xerces.impl.io.Latin1Reader" />
	<method signature="void &lt;init&gt;(java.io.InputStream)" class="org.apache.xerces.impl.io.Latin1Reader" />
	<method signature="long skip(long)" class="org.apache.xerces.impl.io.Latin1Reader" />
	<method signature="void reset()" class="org.apache.xerces.impl.io.Latin1Reader" />
	<method signature="int read()" class="org.apache.xerces.impl.io.Latin1Reader" />
	<method signature="void close()" class="org.apache.xerces.impl.io.Latin1Reader" />
	<method signature="void &lt;init&gt;(java.io.InputStream,int)" class="org.apache.xerces.impl.io.Latin1Reader" />
	<method signature="boolean ready()" class="org.apache.xerces.impl.io.Latin1Reader" />
	<method signature="boolean markSupported()" class="org.apache.xerces.impl.io.Latin1Reader" />
	<method signature="void &lt;init&gt;(java.io.InputStream,byte[])" class="org.apache.xerces.impl.io.Latin1Reader" />
	<class name="org.jfree.chart.renderer.Outlier" />
	<method signature="int compareTo(java.lang.Object)" class="org.jfree.chart.renderer.Outlier" />
	<method signature="double getY()" class="org.jfree.chart.renderer.Outlier" />
	<method signature="double getX()" class="org.jfree.chart.renderer.Outlier" />
	<method signature="void setRadius(double)" class="org.jfree.chart.renderer.Outlier" />
	<method signature="void setPoint(java.awt.geom.Point2D)" class="org.jfree.chart.renderer.Outlier" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.Outlier" />
	<method signature="void &lt;init&gt;(double,double,double)" class="org.jfree.chart.renderer.Outlier" />
	<method signature="java.lang.String toString()" class="org.jfree.chart.renderer.Outlier" />
	<method signature="java.awt.geom.Point2D getPoint()" class="org.jfree.chart.renderer.Outlier" />
	<method signature="boolean overlaps(org.jfree.chart.renderer.Outlier)" class="org.jfree.chart.renderer.Outlier" />
	<method signature="double getRadius()" class="org.jfree.chart.renderer.Outlier" />
	<class name="org.jfree.chart.labels.CategoryToolTipGenerator" />
	<method signature="java.lang.String generateToolTip(org.jfree.data.category.CategoryDataset,int,int)" class="org.jfree.chart.labels.CategoryToolTipGenerator" />
	<class name="org.jfree.chart.editor.DefaultPolarPlotEditor" />
	<method signature="void validateAngleOffset()" class="org.jfree.chart.editor.DefaultPolarPlotEditor" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="org.jfree.chart.editor.DefaultPolarPlotEditor" />
	<method signature="void validateTickUnit()" class="org.jfree.chart.editor.DefaultPolarPlotEditor" />
	<method signature="void focusLost(java.awt.event.FocusEvent)" class="org.jfree.chart.editor.DefaultPolarPlotEditor" />
	<method signature="void focusGained(java.awt.event.FocusEvent)" class="org.jfree.chart.editor.DefaultPolarPlotEditor" />
	<method signature="void updatePlotProperties(org.jfree.chart.plot.Plot)" class="org.jfree.chart.editor.DefaultPolarPlotEditor" />
	<method signature="void &lt;init&gt;(org.jfree.chart.plot.PolarPlot)" class="org.jfree.chart.editor.DefaultPolarPlotEditor" />
	<class name="javax.xml.transform.dom.DOMResult" />
	<method signature="java.lang.String getSystemId()" class="javax.xml.transform.dom.DOMResult" />
	<method signature="void &lt;init&gt;(org.w3c.dom.Node,java.lang.String)" class="javax.xml.transform.dom.DOMResult" />
	<method signature="void setSystemId(java.lang.String)" class="javax.xml.transform.dom.DOMResult" />
	<method signature="org.w3c.dom.Node getNextSibling()" class="javax.xml.transform.dom.DOMResult" />
	<method signature="void &lt;init&gt;()" class="javax.xml.transform.dom.DOMResult" />
	<method signature="void setNode(org.w3c.dom.Node)" class="javax.xml.transform.dom.DOMResult" />
	<method signature="org.w3c.dom.Node getNode()" class="javax.xml.transform.dom.DOMResult" />
	<method signature="void &lt;init&gt;(org.w3c.dom.Node,org.w3c.dom.Node,java.lang.String)" class="javax.xml.transform.dom.DOMResult" />
	<method signature="void &lt;init&gt;(org.w3c.dom.Node,org.w3c.dom.Node)" class="javax.xml.transform.dom.DOMResult" />
	<method signature="void &lt;init&gt;(org.w3c.dom.Node)" class="javax.xml.transform.dom.DOMResult" />
	<method signature="void setNextSibling(org.w3c.dom.Node)" class="javax.xml.transform.dom.DOMResult" />
	<class name="org.apache.commons.lang3.concurrent.TimedSemaphore" />
	<method signature="boolean isShutdown()" class="org.apache.commons.lang3.concurrent.TimedSemaphore" />
	<method signature="void shutdown()" class="org.apache.commons.lang3.concurrent.TimedSemaphore" />
	<method signature="int getLastAcquiresPerPeriod()" class="org.apache.commons.lang3.concurrent.TimedSemaphore" />
	<method signature="void setLimit(int)" class="org.apache.commons.lang3.concurrent.TimedSemaphore" />
	<method signature="int getAvailablePermits()" class="org.apache.commons.lang3.concurrent.TimedSemaphore" />
	<method signature="double getAverageCallsPerPeriod()" class="org.apache.commons.lang3.concurrent.TimedSemaphore" />
	<method signature="int getLimit()" class="org.apache.commons.lang3.concurrent.TimedSemaphore" />
	<method signature="void &lt;init&gt;(java.util.concurrent.ScheduledExecutorService,long,java.util.concurrent.TimeUnit,int)" class="org.apache.commons.lang3.concurrent.TimedSemaphore" />
	<method signature="void acquire()" class="org.apache.commons.lang3.concurrent.TimedSemaphore" />
	<method signature="java.util.concurrent.TimeUnit getUnit()" class="org.apache.commons.lang3.concurrent.TimedSemaphore" />
	<method signature="long getPeriod()" class="org.apache.commons.lang3.concurrent.TimedSemaphore" />
	<method signature="void &lt;init&gt;(long,java.util.concurrent.TimeUnit,int)" class="org.apache.commons.lang3.concurrent.TimedSemaphore" />
	<method signature="int getAcquireCount()" class="org.apache.commons.lang3.concurrent.TimedSemaphore" />
	<class name="org.jfree.chart.renderer.category.AreaRenderer" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.renderer.category.AreaRenderer" />
	<method signature="org.jfree.chart.LegendItem getLegendItem(int,int)" class="org.jfree.chart.renderer.category.AreaRenderer" />
	<method signature="void setEndType(org.jfree.chart.renderer.AreaRendererEndType)" class="org.jfree.chart.renderer.category.AreaRenderer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.category.AreaRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.category.AreaRenderer" />
	<method signature="org.jfree.chart.renderer.AreaRendererEndType getEndType()" class="org.jfree.chart.renderer.category.AreaRenderer" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)" class="org.jfree.chart.renderer.category.AreaRenderer" />
	<class name="org.apache.wml.WMLPostfieldElement" />
	<method signature="void setValue(java.lang.String)" class="org.apache.wml.WMLPostfieldElement" />
	<method signature="java.lang.String getName()" class="org.apache.wml.WMLPostfieldElement" />
	<method signature="java.lang.String getValue()" class="org.apache.wml.WMLPostfieldElement" />
	<method signature="void setName(java.lang.String)" class="org.apache.wml.WMLPostfieldElement" />
	<class name="org.jdom2.AttributeType" />
	<method signature="org.jdom2.AttributeType[] values()" class="org.jdom2.AttributeType" />
	<method signature="org.jdom2.AttributeType valueOf(java.lang.String)" class="org.jdom2.AttributeType" />
	<method signature="org.jdom2.AttributeType byIndex(int)" class="org.jdom2.AttributeType" />
	<method signature="org.jdom2.AttributeType getAttributeType(java.lang.String)" class="org.jdom2.AttributeType" />
	<class name="org.jdom2.input.sax.BuilderErrorHandler" />
	<method signature="void warning(org.xml.sax.SAXParseException)" class="org.jdom2.input.sax.BuilderErrorHandler" />
	<method signature="void error(org.xml.sax.SAXParseException)" class="org.jdom2.input.sax.BuilderErrorHandler" />
	<method signature="void &lt;init&gt;()" class="org.jdom2.input.sax.BuilderErrorHandler" />
	<method signature="void fatalError(org.xml.sax.SAXParseException)" class="org.jdom2.input.sax.BuilderErrorHandler" />
	<class name="com.google.zxing.qrcode.encoder.ByteMatrix" />
	<method signature="void set(int,int,int)" class="com.google.zxing.qrcode.encoder.ByteMatrix" />
	<method signature="void clear(byte)" class="com.google.zxing.qrcode.encoder.ByteMatrix" />
	<method signature="void set(int,int,byte)" class="com.google.zxing.qrcode.encoder.ByteMatrix" />
	<method signature="int getHeight()" class="com.google.zxing.qrcode.encoder.ByteMatrix" />
	<method signature="void set(int,int,boolean)" class="com.google.zxing.qrcode.encoder.ByteMatrix" />
	<method signature="java.lang.String toString()" class="com.google.zxing.qrcode.encoder.ByteMatrix" />
	<method signature="byte[][] getArray()" class="com.google.zxing.qrcode.encoder.ByteMatrix" />
	<method signature="void &lt;init&gt;(int,int)" class="com.google.zxing.qrcode.encoder.ByteMatrix" />
	<method signature="byte get(int,int)" class="com.google.zxing.qrcode.encoder.ByteMatrix" />
	<method signature="int getWidth()" class="com.google.zxing.qrcode.encoder.ByteMatrix" />
	<class name="org.jfree.util.Configuration" />
	<method signature="java.lang.Object clone()" class="org.jfree.util.Configuration" />
	<method signature="java.lang.String getConfigProperty(java.lang.String,java.lang.String)" class="org.jfree.util.Configuration" />
	<method signature="java.lang.String getConfigProperty(java.lang.String)" class="org.jfree.util.Configuration" />
	<method signature="java.util.Iterator findPropertyKeys(java.lang.String)" class="org.jfree.util.Configuration" />
	<method signature="java.util.Enumeration getConfigProperties()" class="org.jfree.util.Configuration" />
	<class name="javax.annotation.meta.TypeQualifierDefault" />
	<method signature="java.lang.annotation.ElementType[] value()" class="javax.annotation.meta.TypeQualifierDefault" />
	<class name="org.apache.wml.dom.WMLAnchorElementImpl" />
	<method signature="java.lang.String getTitle()" class="org.apache.wml.dom.WMLAnchorElementImpl" />
	<method signature="java.lang.String getXmlLang()" class="org.apache.wml.dom.WMLAnchorElementImpl" />
	<method signature="void setXmlLang(java.lang.String)" class="org.apache.wml.dom.WMLAnchorElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.wml.dom.WMLDocumentImpl,java.lang.String)" class="org.apache.wml.dom.WMLAnchorElementImpl" />
	<method signature="java.lang.String getId()" class="org.apache.wml.dom.WMLAnchorElementImpl" />
	<method signature="java.lang.String getClassName()" class="org.apache.wml.dom.WMLAnchorElementImpl" />
	<method signature="void setClassName(java.lang.String)" class="org.apache.wml.dom.WMLAnchorElementImpl" />
	<method signature="void setTitle(java.lang.String)" class="org.apache.wml.dom.WMLAnchorElementImpl" />
	<method signature="void setId(java.lang.String)" class="org.apache.wml.dom.WMLAnchorElementImpl" />
	<class name="org.w3c.dom.html.HTMLHeadElement" />
	<method signature="java.lang.String getProfile()" class="org.w3c.dom.html.HTMLHeadElement" />
	<method signature="void setProfile(java.lang.String)" class="org.w3c.dom.html.HTMLHeadElement" />
	<class name="org.jfree.chart.axis.CategoryAnchor" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.axis.CategoryAnchor" />
	<method signature="java.lang.String toString()" class="org.jfree.chart.axis.CategoryAnchor" />
	<class name="freemarker.ext.jython.JythonNumberModel" />
	<method signature="java.lang.Number getAsNumber()" class="freemarker.ext.jython.JythonNumberModel" />
	<method signature="void &lt;init&gt;(org.python.core.PyObject,freemarker.ext.jython.JythonWrapper)" class="freemarker.ext.jython.JythonNumberModel" />
	<class name="javax.xml.stream.events.EndElement" />
	<method signature="java.util.Iterator getNamespaces()" class="javax.xml.stream.events.EndElement" />
	<method signature="javax.xml.namespace.QName getName()" class="javax.xml.stream.events.EndElement" />
	<class name="org.jfree.chart.axis.DateTickMarkPosition" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.axis.DateTickMarkPosition" />
	<method signature="java.lang.String toString()" class="org.jfree.chart.axis.DateTickMarkPosition" />
	<class name="org.jfree.ui.SortableTableModel" />
	<method signature="boolean isAscending()" class="org.jfree.ui.SortableTableModel" />
	<method signature="void sortByColumn(int,boolean)" class="org.jfree.ui.SortableTableModel" />
	<method signature="void setAscending(boolean)" class="org.jfree.ui.SortableTableModel" />
	<method signature="void &lt;init&gt;()" class="org.jfree.ui.SortableTableModel" />
	<method signature="int getSortingColumn()" class="org.jfree.ui.SortableTableModel" />
	<method signature="boolean isSortable(int)" class="org.jfree.ui.SortableTableModel" />
	<class name="org.jfree.chart.block.Block" />
	<method signature="void setBounds(java.awt.geom.Rectangle2D)" class="org.jfree.chart.block.Block" />
	<method signature="java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)" class="org.jfree.chart.block.Block" />
	<method signature="java.lang.String getID()" class="org.jfree.chart.block.Block" />
	<method signature="org.jfree.ui.Size2D arrange(java.awt.Graphics2D)" class="org.jfree.chart.block.Block" />
	<method signature="org.jfree.ui.Size2D arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" class="org.jfree.chart.block.Block" />
	<method signature="java.awt.geom.Rectangle2D getBounds()" class="org.jfree.chart.block.Block" />
	<method signature="void setID(java.lang.String)" class="org.jfree.chart.block.Block" />
	<class name="org.jfree.chart.renderer.xy.XYAreaRenderer" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)" class="org.jfree.chart.renderer.xy.XYAreaRenderer" />
	<method signature="int hashCode()" class="org.jfree.chart.renderer.xy.XYAreaRenderer" />
	<method signature="boolean isOutline()" class="org.jfree.chart.renderer.xy.XYAreaRenderer" />
	<method signature="void setLegendArea(java.awt.Shape)" class="org.jfree.chart.renderer.xy.XYAreaRenderer" />
	<method signature="boolean getPlotShapes()" class="org.jfree.chart.renderer.xy.XYAreaRenderer" />
	<method signature="org.jfree.ui.GradientPaintTransformer getGradientTransformer()" class="org.jfree.chart.renderer.xy.XYAreaRenderer" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.renderer.xy.XYAreaRenderer" />
	<method signature="org.jfree.chart.LegendItem getLegendItem(int,int)" class="org.jfree.chart.renderer.xy.XYAreaRenderer" />
	<method signature="void &lt;init&gt;(int)" class="org.jfree.chart.renderer.xy.XYAreaRenderer" />
	<method signature="boolean getPlotArea()" class="org.jfree.chart.renderer.xy.XYAreaRenderer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.xy.XYAreaRenderer" />
	<method signature="void setUseFillPaint(boolean)" class="org.jfree.chart.renderer.xy.XYAreaRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.xy.XYAreaRenderer" />
	<method signature="boolean getPlotLines()" class="org.jfree.chart.renderer.xy.XYAreaRenderer" />
	<method signature="void setOutline(boolean)" class="org.jfree.chart.renderer.xy.XYAreaRenderer" />
	<method signature="java.awt.Shape getLegendArea()" class="org.jfree.chart.renderer.xy.XYAreaRenderer" />
	<method signature="boolean getUseFillPaint()" class="org.jfree.chart.renderer.xy.XYAreaRenderer" />
	<method signature="void &lt;init&gt;(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" class="org.jfree.chart.renderer.xy.XYAreaRenderer" />
	<method signature="org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.renderer.xy.XYAreaRenderer" />
	<method signature="void setGradientTransformer(org.jfree.ui.GradientPaintTransformer)" class="org.jfree.chart.renderer.xy.XYAreaRenderer" />
	<class name="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
	<method signature="java.lang.String[] getRecognizedProperties()" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
	<method signature="void setDTDContentModelSource(org.apache.xerces.xni.parser.XMLDTDContentModelSource)" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
	<method signature="void processingInstruction(java.lang.String,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
	<method signature="java.lang.Boolean getFeatureDefault(java.lang.String)" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
	<method signature="void externalEntityDecl(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
	<method signature="void reset(org.apache.xerces.xni.parser.XMLComponentManager)" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
	<method signature="void attributeDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
	<method signature="void empty(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
	<method signature="void internalEntityDecl(java.lang.String,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
	<method signature="void textDecl(java.lang.String,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
	<method signature="org.apache.xerces.xni.parser.XMLDTDContentModelSource getDTDContentModelSource()" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
	<method signature="void elementDecl(java.lang.String,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
	<method signature="java.lang.String[] getRecognizedFeatures()" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
	<method signature="void endAttlist(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
	<method signature="void endConditional(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
	<method signature="void unparsedEntityDecl(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
	<method signature="void endExternalSubset(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
	<method signature="void occurrence(short,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
	<method signature="void startAttlist(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
	<method signature="void startContentModel(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
	<method signature="void pcdata(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
	<method signature="org.apache.xerces.xni.XMLDTDContentModelHandler getDTDContentModelHandler()" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
	<method signature="void notationDecl(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
	<method signature="void startParameterEntity(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
	<method signature="void startGroup(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
	<method signature="void separator(short,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
	<method signature="void startExternalSubset(org.apache.xerces.xni.XMLResourceIdentifier,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
	<method signature="void endContentModel(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
	<method signature="void setDTDSource(org.apache.xerces.xni.parser.XMLDTDSource)" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
	<method signature="void setDTDHandler(org.apache.xerces.xni.XMLDTDHandler)" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
	<method signature="void setFeature(java.lang.String,boolean)" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
	<method signature="void startDTD(org.apache.xerces.xni.XMLLocator,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
	<method signature="org.apache.xerces.xni.XMLDTDHandler getDTDHandler()" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
	<method signature="void element(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
	<method signature="org.apache.xerces.xni.parser.XMLDTDSource getDTDSource()" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
	<method signature="void endParameterEntity(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
	<method signature="void ignoredCharacters(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
	<method signature="void startConditional(short,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
	<method signature="void endDTD(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
	<method signature="java.lang.Object getPropertyDefault(java.lang.String)" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
	<method signature="void any(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
	<method signature="void comment(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
	<method signature="void setDTDContentModelHandler(org.apache.xerces.xni.XMLDTDContentModelHandler)" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
	<method signature="void endGroup(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
	<class name="org.jdom2.input.StAXEventBuilder" />
	<method signature="org.jdom2.Document build(javax.xml.stream.XMLEventReader)" class="org.jdom2.input.StAXEventBuilder" />
	<method signature="void &lt;init&gt;()" class="org.jdom2.input.StAXEventBuilder" />
	<method signature="void setFactory(org.jdom2.JDOMFactory)" class="org.jdom2.input.StAXEventBuilder" />
	<method signature="org.jdom2.JDOMFactory getFactory()" class="org.jdom2.input.StAXEventBuilder" />
	<class name="org.apache.xerces.impl.dv.xs.HexBinaryDV" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.xs.HexBinaryDV" />
	<method signature="java.lang.Object getActualValue(java.lang.String,org.apache.xerces.impl.dv.ValidationContext)" class="org.apache.xerces.impl.dv.xs.HexBinaryDV" />
	<method signature="int getDataLength(java.lang.Object)" class="org.apache.xerces.impl.dv.xs.HexBinaryDV" />
	<method signature="short getAllowedFacets()" class="org.apache.xerces.impl.dv.xs.HexBinaryDV" />
	<class name="javax.annotation.concurrent.Immutable" />
	<class name="org.jfree.ui.tabbedui.RootEditor" />
	<method signature="boolean isActive()" class="org.jfree.ui.tabbedui.RootEditor" />
	<method signature="void setActive(boolean)" class="org.jfree.ui.tabbedui.RootEditor" />
	<method signature="java.lang.String getEditorName()" class="org.jfree.ui.tabbedui.RootEditor" />
	<method signature="javax.swing.JMenu[] getMenus()" class="org.jfree.ui.tabbedui.RootEditor" />
	<method signature="boolean isEnabled()" class="org.jfree.ui.tabbedui.RootEditor" />
	<method signature="javax.swing.JComponent getMainPanel()" class="org.jfree.ui.tabbedui.RootEditor" />
	<method signature="void addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)" class="org.jfree.ui.tabbedui.RootEditor" />
	<method signature="void removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)" class="org.jfree.ui.tabbedui.RootEditor" />
	<method signature="void addPropertyChangeListener(java.beans.PropertyChangeListener)" class="org.jfree.ui.tabbedui.RootEditor" />
	<method signature="void removePropertyChangeListener(java.beans.PropertyChangeListener)" class="org.jfree.ui.tabbedui.RootEditor" />
	<method signature="javax.swing.JComponent getToolbar()" class="org.jfree.ui.tabbedui.RootEditor" />
	<class name="org.apache.xerces.impl.xs.XSParticleDecl" />
	<method signature="java.lang.String getName()" class="org.apache.xerces.impl.xs.XSParticleDecl" />
	<method signature="int minEffectiveTotalRange()" class="org.apache.xerces.impl.xs.XSParticleDecl" />
	<method signature="void reset()" class="org.apache.xerces.impl.xs.XSParticleDecl" />
	<method signature="boolean emptiable()" class="org.apache.xerces.impl.xs.XSParticleDecl" />
	<method signature="int maxEffectiveTotalRange()" class="org.apache.xerces.impl.xs.XSParticleDecl" />
	<method signature="org.apache.xerces.xs.XSObjectList getAnnotations()" class="org.apache.xerces.impl.xs.XSParticleDecl" />
	<method signature="short getType()" class="org.apache.xerces.impl.xs.XSParticleDecl" />
	<method signature="org.apache.xerces.xs.XSNamespaceItem getNamespaceItem()" class="org.apache.xerces.impl.xs.XSParticleDecl" />
	<method signature="org.apache.xerces.impl.xs.XSParticleDecl makeClone()" class="org.apache.xerces.impl.xs.XSParticleDecl" />
	<method signature="boolean isEmpty()" class="org.apache.xerces.impl.xs.XSParticleDecl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xs.XSParticleDecl" />
	<method signature="java.lang.String getNamespace()" class="org.apache.xerces.impl.xs.XSParticleDecl" />
	<method signature="java.lang.String toString()" class="org.apache.xerces.impl.xs.XSParticleDecl" />
	<method signature="org.apache.xerces.xs.XSTerm getTerm()" class="org.apache.xerces.impl.xs.XSParticleDecl" />
	<method signature="int getMinOccurs()" class="org.apache.xerces.impl.xs.XSParticleDecl" />
	<method signature="boolean getMaxOccursUnbounded()" class="org.apache.xerces.impl.xs.XSParticleDecl" />
	<method signature="int getMaxOccurs()" class="org.apache.xerces.impl.xs.XSParticleDecl" />
	<class name="fi.iki.elonen.NanoHTTPD$CookieHandler" />
	<method signature="java.util.Iterator iterator()" class="fi.iki.elonen.NanoHTTPD$CookieHandler" />
	<method signature="void unloadQueue(fi.iki.elonen.NanoHTTPD$Response)" class="fi.iki.elonen.NanoHTTPD$CookieHandler" />
	<method signature="void set(java.lang.String,java.lang.String,int)" class="fi.iki.elonen.NanoHTTPD$CookieHandler" />
	<method signature="java.lang.String read(java.lang.String)" class="fi.iki.elonen.NanoHTTPD$CookieHandler" />
	<method signature="void set(fi.iki.elonen.NanoHTTPD$Cookie)" class="fi.iki.elonen.NanoHTTPD$CookieHandler" />
	<method signature="void delete(java.lang.String)" class="fi.iki.elonen.NanoHTTPD$CookieHandler" />
	<method signature="void &lt;init&gt;(fi.iki.elonen.NanoHTTPD,java.util.Map)" class="fi.iki.elonen.NanoHTTPD$CookieHandler" />
	<class name="org.jdom2.input.sax.SAXHandlerFactory" />
	<method signature="org.jdom2.input.sax.SAXHandler createSAXHandler(org.jdom2.JDOMFactory)" class="org.jdom2.input.sax.SAXHandlerFactory" />
	<class name="tourma.tableModel.MjtAnnexRank" />
	<method signature="java.lang.String getDetail()" class="tourma.tableModel.MjtAnnexRank" />
	<method signature="void &lt;init&gt;(int,tourma.data.Criteria,int,java.util.ArrayList,boolean,int,int,int,int,int,boolean)" class="tourma.tableModel.MjtAnnexRank" />
	<method signature="void setDetail(java.lang.String)" class="tourma.tableModel.MjtAnnexRank" />
	<method signature="java.awt.Component getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)" class="tourma.tableModel.MjtAnnexRank" />
	<method signature="int getRowCount()" class="tourma.tableModel.MjtAnnexRank" />
	<method signature="java.lang.String getColumnName(int)" class="tourma.tableModel.MjtAnnexRank" />
	<method signature="void setCriteria(tourma.data.Criteria)" class="tourma.tableModel.MjtAnnexRank" />
	<method signature="java.lang.Object getValueAt(int,int)" class="tourma.tableModel.MjtAnnexRank" />
	<method signature="int getColumnCount()" class="tourma.tableModel.MjtAnnexRank" />
	<method signature="tourma.data.Criteria getCriteria()" class="tourma.tableModel.MjtAnnexRank" />
	<class name="com.google.zxing.common.BitMatrix" />
	<method signature="com.google.zxing.common.BitArray getRow(int,com.google.zxing.common.BitArray)" class="com.google.zxing.common.BitMatrix" />
	<method signature="void setRegion(int,int,int,int)" class="com.google.zxing.common.BitMatrix" />
	<method signature="int hashCode()" class="com.google.zxing.common.BitMatrix" />
	<method signature="void set(int,int)" class="com.google.zxing.common.BitMatrix" />
	<method signature="int getHeight()" class="com.google.zxing.common.BitMatrix" />
	<method signature="int[] getEnclosingRectangle()" class="com.google.zxing.common.BitMatrix" />
	<method signature="void &lt;init&gt;(int,int)" class="com.google.zxing.common.BitMatrix" />
	<method signature="boolean get(int,int)" class="com.google.zxing.common.BitMatrix" />
	<method signature="void &lt;init&gt;(int)" class="com.google.zxing.common.BitMatrix" />
	<method signature="void clear()" class="com.google.zxing.common.BitMatrix" />
	<method signature="void setRow(int,com.google.zxing.common.BitArray)" class="com.google.zxing.common.BitMatrix" />
	<method signature="int[] getBottomRightOnBit()" class="com.google.zxing.common.BitMatrix" />
	<method signature="boolean equals(java.lang.Object)" class="com.google.zxing.common.BitMatrix" />
	<method signature="int[] getTopLeftOnBit()" class="com.google.zxing.common.BitMatrix" />
	<method signature="java.lang.String toString()" class="com.google.zxing.common.BitMatrix" />
	<method signature="void flip(int,int)" class="com.google.zxing.common.BitMatrix" />
	<method signature="int getWidth()" class="com.google.zxing.common.BitMatrix" />
	<class name="freemarker.core.ArithmeticEngine$BigDecimalEngine" />
	<method signature="int compareNumbers(java.lang.Number,java.lang.Number)" class="freemarker.core.ArithmeticEngine$BigDecimalEngine" />
	<method signature="java.lang.Number subtract(java.lang.Number,java.lang.Number)" class="freemarker.core.ArithmeticEngine$BigDecimalEngine" />
	<method signature="java.lang.Number add(java.lang.Number,java.lang.Number)" class="freemarker.core.ArithmeticEngine$BigDecimalEngine" />
	<method signature="java.lang.Number toNumber(java.lang.String)" class="freemarker.core.ArithmeticEngine$BigDecimalEngine" />
	<method signature="void &lt;init&gt;()" class="freemarker.core.ArithmeticEngine$BigDecimalEngine" />
	<method signature="java.lang.Number multiply(java.lang.Number,java.lang.Number)" class="freemarker.core.ArithmeticEngine$BigDecimalEngine" />
	<method signature="java.lang.Number modulus(java.lang.Number,java.lang.Number)" class="freemarker.core.ArithmeticEngine$BigDecimalEngine" />
	<method signature="java.lang.Number divide(java.lang.Number,java.lang.Number)" class="freemarker.core.ArithmeticEngine$BigDecimalEngine" />
	<class name="org.apache.xerces.dom.PSVIElementNSImpl" />
	<method signature="org.apache.xerces.xs.XSSimpleTypeDefinition getMemberTypeDefinition()" class="org.apache.xerces.dom.PSVIElementNSImpl" />
	<method signature="org.apache.xerces.xs.XSValue getSchemaValue()" class="org.apache.xerces.dom.PSVIElementNSImpl" />
	<method signature="org.apache.xerces.xs.XSTypeDefinition getTypeDefinition()" class="org.apache.xerces.dom.PSVIElementNSImpl" />
	<method signature="org.apache.xerces.xs.XSNotationDeclaration getNotation()" class="org.apache.xerces.dom.PSVIElementNSImpl" />
	<method signature="java.lang.String getValidationContext()" class="org.apache.xerces.dom.PSVIElementNSImpl" />
	<method signature="org.apache.xerces.xs.ShortList getItemValueTypes()" class="org.apache.xerces.dom.PSVIElementNSImpl" />
	<method signature="org.apache.xerces.xs.XSElementDeclaration getElementDeclaration()" class="org.apache.xerces.dom.PSVIElementNSImpl" />
	<method signature="void setPSVI(org.apache.xerces.xs.ElementPSVI)" class="org.apache.xerces.dom.PSVIElementNSImpl" />
	<method signature="org.apache.xerces.xs.StringList getErrorMessages()" class="org.apache.xerces.dom.PSVIElementNSImpl" />
	<method signature="boolean getNil()" class="org.apache.xerces.dom.PSVIElementNSImpl" />
	<method signature="short getValidity()" class="org.apache.xerces.dom.PSVIElementNSImpl" />
	<method signature="short getActualNormalizedValueType()" class="org.apache.xerces.dom.PSVIElementNSImpl" />
	<method signature="boolean getIsSchemaSpecified()" class="org.apache.xerces.dom.PSVIElementNSImpl" />
	<method signature="org.apache.xerces.xs.XSModel getSchemaInformation()" class="org.apache.xerces.dom.PSVIElementNSImpl" />
	<method signature="java.lang.Object getActualNormalizedValue()" class="org.apache.xerces.dom.PSVIElementNSImpl" />
	<method signature="java.lang.String getSchemaDefault()" class="org.apache.xerces.dom.PSVIElementNSImpl" />
	<method signature="org.apache.xerces.xs.StringList getErrorCodes()" class="org.apache.xerces.dom.PSVIElementNSImpl" />
	<method signature="void &lt;init&gt;(org.apache.xerces.dom.CoreDocumentImpl,java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.dom.PSVIElementNSImpl" />
	<method signature="short getValidationAttempted()" class="org.apache.xerces.dom.PSVIElementNSImpl" />
	<method signature="java.lang.String getSchemaNormalizedValue()" class="org.apache.xerces.dom.PSVIElementNSImpl" />
	<method signature="void &lt;init&gt;(org.apache.xerces.dom.CoreDocumentImpl,java.lang.String,java.lang.String)" class="org.apache.xerces.dom.PSVIElementNSImpl" />
	<class name="org.jfree.chart.plot.XYCrosshairState" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.plot.XYCrosshairState" />
	<class name="org.apache.commons.lang3.text.translate.UnicodeEscaper" />
	<method signature="org.apache.commons.lang3.text.translate.UnicodeEscaper outsideOf(int,int)" class="org.apache.commons.lang3.text.translate.UnicodeEscaper" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.text.translate.UnicodeEscaper" />
	<method signature="org.apache.commons.lang3.text.translate.UnicodeEscaper above(int)" class="org.apache.commons.lang3.text.translate.UnicodeEscaper" />
	<method signature="org.apache.commons.lang3.text.translate.UnicodeEscaper below(int)" class="org.apache.commons.lang3.text.translate.UnicodeEscaper" />
	<method signature="org.apache.commons.lang3.text.translate.UnicodeEscaper between(int,int)" class="org.apache.commons.lang3.text.translate.UnicodeEscaper" />
	<method signature="boolean translate(int,java.io.Writer)" class="org.apache.commons.lang3.text.translate.UnicodeEscaper" />
	<class name="org.apache.commons.lang3.text.FormatFactory" />
	<method signature="java.text.Format getFormat(java.lang.String,java.lang.String,java.util.Locale)" class="org.apache.commons.lang3.text.FormatFactory" />
	<class name="org.jfree.data.xy.XIntervalSeriesCollection" />
	<method signature="org.jfree.data.xy.XIntervalSeries getSeries(int)" class="org.jfree.data.xy.XIntervalSeriesCollection" />
	<method signature="double getEndXValue(int,int)" class="org.jfree.data.xy.XIntervalSeriesCollection" />
	<method signature="java.lang.Number getX(int,int)" class="org.jfree.data.xy.XIntervalSeriesCollection" />
	<method signature="java.lang.Number getY(int,int)" class="org.jfree.data.xy.XIntervalSeriesCollection" />
	<method signature="void removeSeries(int)" class="org.jfree.data.xy.XIntervalSeriesCollection" />
	<method signature="int getSeriesCount()" class="org.jfree.data.xy.XIntervalSeriesCollection" />
	<method signature="void removeSeries(org.jfree.data.xy.XIntervalSeries)" class="org.jfree.data.xy.XIntervalSeriesCollection" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.xy.XIntervalSeriesCollection" />
	<method signature="java.lang.Comparable getSeriesKey(int)" class="org.jfree.data.xy.XIntervalSeriesCollection" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.xy.XIntervalSeriesCollection" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.xy.XIntervalSeriesCollection" />
	<method signature="java.lang.Number getEndX(int,int)" class="org.jfree.data.xy.XIntervalSeriesCollection" />
	<method signature="double getStartXValue(int,int)" class="org.jfree.data.xy.XIntervalSeriesCollection" />
	<method signature="void addSeries(org.jfree.data.xy.XIntervalSeries)" class="org.jfree.data.xy.XIntervalSeriesCollection" />
	<method signature="java.lang.Number getStartX(int,int)" class="org.jfree.data.xy.XIntervalSeriesCollection" />
	<method signature="java.lang.Number getStartY(int,int)" class="org.jfree.data.xy.XIntervalSeriesCollection" />
	<method signature="int getItemCount(int)" class="org.jfree.data.xy.XIntervalSeriesCollection" />
	<method signature="double getYValue(int,int)" class="org.jfree.data.xy.XIntervalSeriesCollection" />
	<method signature="java.lang.Number getEndY(int,int)" class="org.jfree.data.xy.XIntervalSeriesCollection" />
	<method signature="void removeAllSeries()" class="org.jfree.data.xy.XIntervalSeriesCollection" />
	<class name="org.jfree.chart.axis.NumberTick" />
	<method signature="void &lt;init&gt;(org.jfree.chart.axis.TickType,double,java.lang.String,org.jfree.ui.TextAnchor,org.jfree.ui.TextAnchor,double)" class="org.jfree.chart.axis.NumberTick" />
	<method signature="java.lang.Number getNumber()" class="org.jfree.chart.axis.NumberTick" />
	<method signature="void &lt;init&gt;(java.lang.Number,java.lang.String,org.jfree.ui.TextAnchor,org.jfree.ui.TextAnchor,double)" class="org.jfree.chart.axis.NumberTick" />
	<class name="com.google.zxing.oned.rss.DataCharacter" />
	<method signature="int getChecksumPortion()" class="com.google.zxing.oned.rss.DataCharacter" />
	<method signature="int getValue()" class="com.google.zxing.oned.rss.DataCharacter" />
	<method signature="void &lt;init&gt;(int,int)" class="com.google.zxing.oned.rss.DataCharacter" />
	<class name="javax.annotation.WillClose" />
	<class name="org.jfree.chart.labels.CustomXYToolTipGenerator" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.labels.CustomXYToolTipGenerator" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.labels.CustomXYToolTipGenerator" />
	<method signature="int getListCount()" class="org.jfree.chart.labels.CustomXYToolTipGenerator" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.labels.CustomXYToolTipGenerator" />
	<method signature="java.lang.String getToolTipText(int,int)" class="org.jfree.chart.labels.CustomXYToolTipGenerator" />
	<method signature="int getToolTipCount(int)" class="org.jfree.chart.labels.CustomXYToolTipGenerator" />
	<method signature="java.lang.String generateToolTip(org.jfree.data.xy.XYDataset,int,int)" class="org.jfree.chart.labels.CustomXYToolTipGenerator" />
	<method signature="void addToolTipSeries(java.util.List)" class="org.jfree.chart.labels.CustomXYToolTipGenerator" />
	<class name="org.jfree.chart.renderer.xy.XYLine3DRenderer" />
	<method signature="int getPassCount()" class="org.jfree.chart.renderer.xy.XYLine3DRenderer" />
	<method signature="void setWallPaint(java.awt.Paint)" class="org.jfree.chart.renderer.xy.XYLine3DRenderer" />
	<method signature="double getXOffset()" class="org.jfree.chart.renderer.xy.XYLine3DRenderer" />
	<method signature="void setXOffset(double)" class="org.jfree.chart.renderer.xy.XYLine3DRenderer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.xy.XYLine3DRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.xy.XYLine3DRenderer" />
	<method signature="java.awt.Paint getWallPaint()" class="org.jfree.chart.renderer.xy.XYLine3DRenderer" />
	<method signature="void setYOffset(double)" class="org.jfree.chart.renderer.xy.XYLine3DRenderer" />
	<method signature="double getYOffset()" class="org.jfree.chart.renderer.xy.XYLine3DRenderer" />
	<class name="org.apache.commons.lang3.text.translate.UnicodeUnpairedSurrogateRemover" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.text.translate.UnicodeUnpairedSurrogateRemover" />
	<method signature="boolean translate(int,java.io.Writer)" class="org.apache.commons.lang3.text.translate.UnicodeUnpairedSurrogateRemover" />
	<class name="com.google.zxing.datamatrix.DataMatrixReader" />
	<method signature="com.google.zxing.Result decode(com.google.zxing.BinaryBitmap)" class="com.google.zxing.datamatrix.DataMatrixReader" />
	<method signature="void reset()" class="com.google.zxing.datamatrix.DataMatrixReader" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.datamatrix.DataMatrixReader" />
	<method signature="com.google.zxing.Result decode(com.google.zxing.BinaryBitmap,java.util.Map)" class="com.google.zxing.datamatrix.DataMatrixReader" />
	<class name="com.hexidec.ekit.component.SimpleInfoDialog" />
	<method signature="void &lt;init&gt;(java.awt.Frame,java.lang.String,boolean,java.lang.String,int)" class="com.hexidec.ekit.component.SimpleInfoDialog" />
	<method signature="void &lt;init&gt;(java.awt.Frame,java.lang.String,boolean,java.lang.String)" class="com.hexidec.ekit.component.SimpleInfoDialog" />
	<method signature="java.lang.String getDecisionValue()" class="com.hexidec.ekit.component.SimpleInfoDialog" />
	<class name="org.jfree.chart.renderer.xy.XYStepAreaRenderer" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)" class="org.jfree.chart.renderer.xy.XYStepAreaRenderer" />
	<method signature="boolean isOutline()" class="org.jfree.chart.renderer.xy.XYStepAreaRenderer" />
	<method signature="void setPlotArea(boolean)" class="org.jfree.chart.renderer.xy.XYStepAreaRenderer" />
	<method signature="void setShapesFilled(boolean)" class="org.jfree.chart.renderer.xy.XYStepAreaRenderer" />
	<method signature="boolean isShapesFilled()" class="org.jfree.chart.renderer.xy.XYStepAreaRenderer" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.renderer.xy.XYStepAreaRenderer" />
	<method signature="double getRangeBase()" class="org.jfree.chart.renderer.xy.XYStepAreaRenderer" />
	<method signature="void &lt;init&gt;(int)" class="org.jfree.chart.renderer.xy.XYStepAreaRenderer" />
	<method signature="boolean getPlotArea()" class="org.jfree.chart.renderer.xy.XYStepAreaRenderer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.xy.XYStepAreaRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.xy.XYStepAreaRenderer" />
	<method signature="boolean getShapesVisible()" class="org.jfree.chart.renderer.xy.XYStepAreaRenderer" />
	<method signature="void setOutline(boolean)" class="org.jfree.chart.renderer.xy.XYStepAreaRenderer" />
	<method signature="void setRangeBase(double)" class="org.jfree.chart.renderer.xy.XYStepAreaRenderer" />
	<method signature="void &lt;init&gt;(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" class="org.jfree.chart.renderer.xy.XYStepAreaRenderer" />
	<method signature="org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.renderer.xy.XYStepAreaRenderer" />
	<method signature="void setShapesVisible(boolean)" class="org.jfree.chart.renderer.xy.XYStepAreaRenderer" />
	<class name="org.jfree.data.KeyedObjects2D" />
	<method signature="void removeObject(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.KeyedObjects2D" />
	<method signature="int hashCode()" class="org.jfree.data.KeyedObjects2D" />
	<method signature="java.util.List getColumnKeys()" class="org.jfree.data.KeyedObjects2D" />
	<method signature="void removeRow(int)" class="org.jfree.data.KeyedObjects2D" />
	<method signature="java.lang.Comparable getColumnKey(int)" class="org.jfree.data.KeyedObjects2D" />
	<method signature="void setObject(java.lang.Object,java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.KeyedObjects2D" />
	<method signature="java.lang.Object getObject(int,int)" class="org.jfree.data.KeyedObjects2D" />
	<method signature="java.util.List getRowKeys()" class="org.jfree.data.KeyedObjects2D" />
	<method signature="java.lang.Object getObject(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.KeyedObjects2D" />
	<method signature="void removeColumn(int)" class="org.jfree.data.KeyedObjects2D" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.KeyedObjects2D" />
	<method signature="void removeRow(java.lang.Comparable)" class="org.jfree.data.KeyedObjects2D" />
	<method signature="java.lang.Comparable getRowKey(int)" class="org.jfree.data.KeyedObjects2D" />
	<method signature="void clear()" class="org.jfree.data.KeyedObjects2D" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.KeyedObjects2D" />
	<method signature="int getRowIndex(java.lang.Comparable)" class="org.jfree.data.KeyedObjects2D" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.KeyedObjects2D" />
	<method signature="int getRowCount()" class="org.jfree.data.KeyedObjects2D" />
	<method signature="void removeColumn(java.lang.Comparable)" class="org.jfree.data.KeyedObjects2D" />
	<method signature="int getColumnIndex(java.lang.Comparable)" class="org.jfree.data.KeyedObjects2D" />
	<method signature="void addObject(java.lang.Object,java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.KeyedObjects2D" />
	<method signature="int getColumnCount()" class="org.jfree.data.KeyedObjects2D" />
	<class name="org.apache.wml.WMLEmElement" />
	<method signature="java.lang.String getXmlLang()" class="org.apache.wml.WMLEmElement" />
	<method signature="void setXmlLang(java.lang.String)" class="org.apache.wml.WMLEmElement" />
	<class name="org.apache.xerces.dom.AttrNSImpl" />
	<method signature="java.lang.String getPrefix()" class="org.apache.xerces.dom.AttrNSImpl" />
	<method signature="void setPrefix(java.lang.String)" class="org.apache.xerces.dom.AttrNSImpl" />
	<method signature="boolean isDerivedFrom(java.lang.String,java.lang.String,int)" class="org.apache.xerces.dom.AttrNSImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.dom.AttrNSImpl" />
	<method signature="java.lang.String getLocalName()" class="org.apache.xerces.dom.AttrNSImpl" />
	<method signature="java.lang.String getNamespaceURI()" class="org.apache.xerces.dom.AttrNSImpl" />
	<method signature="java.lang.String getTypeNamespace()" class="org.apache.xerces.dom.AttrNSImpl" />
	<method signature="void &lt;init&gt;(org.apache.xerces.dom.CoreDocumentImpl,java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.dom.AttrNSImpl" />
	<method signature="java.lang.String getTypeName()" class="org.apache.xerces.dom.AttrNSImpl" />
	<class name="com.google.zxing.client.result.TextParsedResult" />
	<method signature="java.lang.String getLanguage()" class="com.google.zxing.client.result.TextParsedResult" />
	<method signature="java.lang.String getText()" class="com.google.zxing.client.result.TextParsedResult" />
	<method signature="java.lang.String getDisplayResult()" class="com.google.zxing.client.result.TextParsedResult" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="com.google.zxing.client.result.TextParsedResult" />
	<class name="freemarker.template.TemplateDirectiveBody" />
	<method signature="void render(java.io.Writer)" class="freemarker.template.TemplateDirectiveBody" />
	<class name="org.apache.commons.lang3.event.EventListenerSupport" />
	<method signature="java.lang.Object[] getListeners()" class="org.apache.commons.lang3.event.EventListenerSupport" />
	<method signature="void removeListener(java.lang.Object)" class="org.apache.commons.lang3.event.EventListenerSupport" />
	<method signature="void &lt;init&gt;(java.lang.Class)" class="org.apache.commons.lang3.event.EventListenerSupport" />
	<method signature="java.lang.Object fire()" class="org.apache.commons.lang3.event.EventListenerSupport" />
	<method signature="void &lt;init&gt;(java.lang.Class,java.lang.ClassLoader)" class="org.apache.commons.lang3.event.EventListenerSupport" />
	<method signature="org.apache.commons.lang3.event.EventListenerSupport create(java.lang.Class)" class="org.apache.commons.lang3.event.EventListenerSupport" />
	<method signature="void addListener(java.lang.Object)" class="org.apache.commons.lang3.event.EventListenerSupport" />
	<class name="freemarker.template.SimpleScalar" />
	<method signature="java.lang.String getAsString()" class="freemarker.template.SimpleScalar" />
	<method signature="java.lang.String toString()" class="freemarker.template.SimpleScalar" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="freemarker.template.SimpleScalar" />
	<class name="org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser" />
	<method signature="boolean getFeature(java.lang.String)" class="org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser" />
	<method signature="void parse(org.xml.sax.InputSource)" class="org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser" />
	<method signature="void parse(java.lang.String)" class="org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser" />
	<method signature="void setFeature(java.lang.String,boolean)" class="org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser" />
	<method signature="java.lang.Object getProperty(java.lang.String)" class="org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser" />
	<class name="com.google.zxing.datamatrix.detector.Detector" />
	<method signature="void &lt;init&gt;(com.google.zxing.common.BitMatrix)" class="com.google.zxing.datamatrix.detector.Detector" />
	<method signature="com.google.zxing.common.DetectorResult detect()" class="com.google.zxing.datamatrix.detector.Detector" />
	<class name="org.w3c.dom.css.CSSPrimitiveValue" />
	<method signature="java.lang.String getStringValue()" class="org.w3c.dom.css.CSSPrimitiveValue" />
	<method signature="org.w3c.dom.css.RGBColor getRGBColorValue()" class="org.w3c.dom.css.CSSPrimitiveValue" />
	<method signature="void setStringValue(short,java.lang.String)" class="org.w3c.dom.css.CSSPrimitiveValue" />
	<method signature="org.w3c.dom.css.Counter getCounterValue()" class="org.w3c.dom.css.CSSPrimitiveValue" />
	<method signature="float getFloatValue(short)" class="org.w3c.dom.css.CSSPrimitiveValue" />
	<method signature="short getPrimitiveType()" class="org.w3c.dom.css.CSSPrimitiveValue" />
	<method signature="org.w3c.dom.css.Rect getRectValue()" class="org.w3c.dom.css.CSSPrimitiveValue" />
	<method signature="void setFloatValue(short,float)" class="org.w3c.dom.css.CSSPrimitiveValue" />
	<class name="org.jfree.chart.plot.PolarAxisLocation" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.plot.PolarAxisLocation" />
	<method signature="java.lang.String toString()" class="org.jfree.chart.plot.PolarAxisLocation" />
	<class name="org.jfree.ui.about.ContributorsPanel" />
	<method signature="void &lt;init&gt;(java.util.List)" class="org.jfree.ui.about.ContributorsPanel" />
	<class name="org.apache.commons.lang3.exception.CloneFailedException" />
	<method signature="void &lt;init&gt;(java.lang.Throwable)" class="org.apache.commons.lang3.exception.CloneFailedException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Throwable)" class="org.apache.commons.lang3.exception.CloneFailedException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.apache.commons.lang3.exception.CloneFailedException" />
	<class name="org.jfree.data.xy.YInterval" />
	<method signature="double getY()" class="org.jfree.data.xy.YInterval" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.xy.YInterval" />
	<method signature="double getYLow()" class="org.jfree.data.xy.YInterval" />
	<method signature="void &lt;init&gt;(double,double,double)" class="org.jfree.data.xy.YInterval" />
	<method signature="double getYHigh()" class="org.jfree.data.xy.YInterval" />
	<class name="org.apache.xerces.impl.xs.util.SimpleLocator" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,int,int,int)" class="org.apache.xerces.impl.xs.util.SimpleLocator" />
	<method signature="void setLiteralSystemId(java.lang.String)" class="org.apache.xerces.impl.xs.util.SimpleLocator" />
	<method signature="int getLineNumber()" class="org.apache.xerces.impl.xs.util.SimpleLocator" />
	<method signature="void setLineNumber(int)" class="org.apache.xerces.impl.xs.util.SimpleLocator" />
	<method signature="java.lang.String getPublicId()" class="org.apache.xerces.impl.xs.util.SimpleLocator" />
	<method signature="java.lang.String getLiteralSystemId()" class="org.apache.xerces.impl.xs.util.SimpleLocator" />
	<method signature="void setBaseSystemId(java.lang.String)" class="org.apache.xerces.impl.xs.util.SimpleLocator" />
	<method signature="void setValues(java.lang.String,java.lang.String,int,int)" class="org.apache.xerces.impl.xs.util.SimpleLocator" />
	<method signature="java.lang.String getBaseSystemId()" class="org.apache.xerces.impl.xs.util.SimpleLocator" />
	<method signature="java.lang.String getEncoding()" class="org.apache.xerces.impl.xs.util.SimpleLocator" />
	<method signature="int getCharacterOffset()" class="org.apache.xerces.impl.xs.util.SimpleLocator" />
	<method signature="void setCharacterOffset(int)" class="org.apache.xerces.impl.xs.util.SimpleLocator" />
	<method signature="java.lang.String getExpandedSystemId()" class="org.apache.xerces.impl.xs.util.SimpleLocator" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xs.util.SimpleLocator" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,int,int)" class="org.apache.xerces.impl.xs.util.SimpleLocator" />
	<method signature="void setValues(java.lang.String,java.lang.String,int,int,int)" class="org.apache.xerces.impl.xs.util.SimpleLocator" />
	<method signature="void setExpandedSystemId(java.lang.String)" class="org.apache.xerces.impl.xs.util.SimpleLocator" />
	<method signature="void setColumnNumber(int)" class="org.apache.xerces.impl.xs.util.SimpleLocator" />
	<method signature="int getColumnNumber()" class="org.apache.xerces.impl.xs.util.SimpleLocator" />
	<method signature="void setPublicId(java.lang.String)" class="org.apache.xerces.impl.xs.util.SimpleLocator" />
	<method signature="java.lang.String getXMLVersion()" class="org.apache.xerces.impl.xs.util.SimpleLocator" />
	<class name="teamma.data.SkillType" />
	<method signature="java.lang.String getName()" class="teamma.data.SkillType" />
	<method signature="int getSkillCount()" class="teamma.data.SkillType" />
	<method signature="void setName(java.lang.String)" class="teamma.data.SkillType" />
	<method signature="void addSkill(teamma.data.Skill)" class="teamma.data.SkillType" />
	<method signature="void setSpecial(boolean)" class="teamma.data.SkillType" />
	<method signature="java.lang.String getAccronym()" class="teamma.data.SkillType" />
	<method signature="void setAccronym(java.lang.String)" class="teamma.data.SkillType" />
	<method signature="void clearSkills()" class="teamma.data.SkillType" />
	<method signature="boolean isSpecial()" class="teamma.data.SkillType" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="teamma.data.SkillType" />
	<method signature="teamma.data.Skill getSkill(int)" class="teamma.data.SkillType" />
	<class name="org.w3c.dom.html.HTMLDocument" />
	<method signature="void open()" class="org.w3c.dom.html.HTMLDocument" />
	<method signature="org.w3c.dom.html.HTMLCollection getAnchors()" class="org.w3c.dom.html.HTMLDocument" />
	<method signature="void close()" class="org.w3c.dom.html.HTMLDocument" />
	<method signature="org.w3c.dom.html.HTMLElement getBody()" class="org.w3c.dom.html.HTMLDocument" />
	<method signature="org.w3c.dom.html.HTMLCollection getApplets()" class="org.w3c.dom.html.HTMLDocument" />
	<method signature="void write(java.lang.String)" class="org.w3c.dom.html.HTMLDocument" />
	<method signature="void setBody(org.w3c.dom.html.HTMLElement)" class="org.w3c.dom.html.HTMLDocument" />
	<method signature="org.w3c.dom.html.HTMLCollection getLinks()" class="org.w3c.dom.html.HTMLDocument" />
	<method signature="java.lang.String getCookie()" class="org.w3c.dom.html.HTMLDocument" />
	<method signature="org.w3c.dom.Element getElementById(java.lang.String)" class="org.w3c.dom.html.HTMLDocument" />
	<method signature="java.lang.String getTitle()" class="org.w3c.dom.html.HTMLDocument" />
	<method signature="java.lang.String getDomain()" class="org.w3c.dom.html.HTMLDocument" />
	<method signature="org.w3c.dom.html.HTMLCollection getImages()" class="org.w3c.dom.html.HTMLDocument" />
	<method signature="java.lang.String getURL()" class="org.w3c.dom.html.HTMLDocument" />
	<method signature="org.w3c.dom.NodeList getElementsByName(java.lang.String)" class="org.w3c.dom.html.HTMLDocument" />
	<method signature="org.w3c.dom.html.HTMLCollection getForms()" class="org.w3c.dom.html.HTMLDocument" />
	<method signature="void setCookie(java.lang.String)" class="org.w3c.dom.html.HTMLDocument" />
	<method signature="void writeln(java.lang.String)" class="org.w3c.dom.html.HTMLDocument" />
	<method signature="void setTitle(java.lang.String)" class="org.w3c.dom.html.HTMLDocument" />
	<method signature="java.lang.String getReferrer()" class="org.w3c.dom.html.HTMLDocument" />
	<class name="org.jdom2.output.support.AbstractSAXOutputProcessor" />
	<method signature="void process(org.jdom2.output.support.SAXTarget,org.jdom2.output.Format,org.jdom2.Text)" class="org.jdom2.output.support.AbstractSAXOutputProcessor" />
	<method signature="void process(org.jdom2.output.support.SAXTarget,org.jdom2.output.Format,org.jdom2.Document)" class="org.jdom2.output.support.AbstractSAXOutputProcessor" />
	<method signature="void processAsDocument(org.jdom2.output.support.SAXTarget,org.jdom2.output.Format,java.util.List)" class="org.jdom2.output.support.AbstractSAXOutputProcessor" />
	<method signature="void process(org.jdom2.output.support.SAXTarget,org.jdom2.output.Format,org.jdom2.DocType)" class="org.jdom2.output.support.AbstractSAXOutputProcessor" />
	<method signature="void &lt;init&gt;()" class="org.jdom2.output.support.AbstractSAXOutputProcessor" />
	<method signature="void process(org.jdom2.output.support.SAXTarget,org.jdom2.output.Format,java.util.List)" class="org.jdom2.output.support.AbstractSAXOutputProcessor" />
	<method signature="void process(org.jdom2.output.support.SAXTarget,org.jdom2.output.Format,org.jdom2.CDATA)" class="org.jdom2.output.support.AbstractSAXOutputProcessor" />
	<method signature="void process(org.jdom2.output.support.SAXTarget,org.jdom2.output.Format,org.jdom2.EntityRef)" class="org.jdom2.output.support.AbstractSAXOutputProcessor" />
	<method signature="void process(org.jdom2.output.support.SAXTarget,org.jdom2.output.Format,org.jdom2.ProcessingInstruction)" class="org.jdom2.output.support.AbstractSAXOutputProcessor" />
	<method signature="void process(org.jdom2.output.support.SAXTarget,org.jdom2.output.Format,org.jdom2.Comment)" class="org.jdom2.output.support.AbstractSAXOutputProcessor" />
	<method signature="void processAsDocument(org.jdom2.output.support.SAXTarget,org.jdom2.output.Format,org.jdom2.Element)" class="org.jdom2.output.support.AbstractSAXOutputProcessor" />
	<method signature="void process(org.jdom2.output.support.SAXTarget,org.jdom2.output.Format,org.jdom2.Element)" class="org.jdom2.output.support.AbstractSAXOutputProcessor" />
	<class name="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="java.lang.String[] getRecognizedProperties()" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="void endElement(org.apache.xerces.xni.QName,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="java.lang.Boolean getFeatureDefault(java.lang.String)" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="void reset(org.apache.xerces.xni.parser.XMLComponentManager)" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="java.lang.String getRelativeURI(int)" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="java.lang.String restoreLanguage()" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="void elementDecl(java.lang.String,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="java.lang.String[] getRecognizedFeatures()" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="void unparsedEntityDecl(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="void endDocument(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="void endExternalSubset(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="void endGeneralEntity(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="void startParameterEntity(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="void setDocumentSource(org.apache.xerces.xni.parser.XMLDocumentSource)" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="void setDocumentHandler(org.apache.xerces.xni.XMLDocumentHandler)" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="void startCDATA(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="org.apache.xerces.xni.parser.XMLDocumentSource getDocumentSource()" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="void startExternalSubset(org.apache.xerces.xni.XMLResourceIdentifier,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="void setFeature(java.lang.String,boolean)" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="void startDTD(org.apache.xerces.xni.XMLLocator,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="void xmlDecl(java.lang.String,java.lang.String,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="org.apache.xerces.xni.XMLDTDHandler getDTDHandler()" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="org.apache.xerces.xni.parser.XMLDTDSource getDTDSource()" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="org.apache.xerces.xni.XMLDocumentHandler getDocumentHandler()" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="void startConditional(short,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="void comment(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="void processingInstruction(java.lang.String,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="void externalEntityDecl(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="java.lang.String getBaseURI(int)" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="void doctypeDecl(java.lang.String,java.lang.String,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="void ignorableWhitespace(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="void attributeDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="void internalEntityDecl(java.lang.String,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="void textDecl(java.lang.String,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="void emptyElement(org.apache.xerces.xni.QName,org.apache.xerces.xni.XMLAttributes,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="void endAttlist(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="void endConditional(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="java.lang.String getLanguage(int)" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="void startElement(org.apache.xerces.xni.QName,org.apache.xerces.xni.XMLAttributes,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="void startDocument(org.apache.xerces.xni.XMLLocator,java.lang.String,org.apache.xerces.xni.NamespaceContext,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="void startGeneralEntity(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="void startAttlist(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="void notationDecl(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="void endCDATA(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="void setDTDSource(org.apache.xerces.xni.parser.XMLDTDSource)" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="void characters(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="void setDTDHandler(org.apache.xerces.xni.XMLDTDHandler)" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="void endParameterEntity(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="void ignoredCharacters(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="void endDTD(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<method signature="java.lang.Object getPropertyDefault(java.lang.String)" class="org.apache.xerces.xinclude.XIncludeHandler" />
	<class name="javax.xml.stream.events.Namespace" />
	<method signature="java.lang.String getPrefix()" class="javax.xml.stream.events.Namespace" />
	<method signature="boolean isDefaultNamespaceDeclaration()" class="javax.xml.stream.events.Namespace" />
	<method signature="java.lang.String getNamespaceURI()" class="javax.xml.stream.events.Namespace" />
	<class name="org.jfree.chart.encoders.EncoderUtil" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.encoders.EncoderUtil" />
	<method signature="byte[] encode(java.awt.image.BufferedImage,java.lang.String,float)" class="org.jfree.chart.encoders.EncoderUtil" />
	<method signature="void writeBufferedImage(java.awt.image.BufferedImage,java.lang.String,java.io.OutputStream)" class="org.jfree.chart.encoders.EncoderUtil" />
	<method signature="void writeBufferedImage(java.awt.image.BufferedImage,java.lang.String,java.io.OutputStream,float)" class="org.jfree.chart.encoders.EncoderUtil" />
	<method signature="void writeBufferedImage(java.awt.image.BufferedImage,java.lang.String,java.io.OutputStream,float,boolean)" class="org.jfree.chart.encoders.EncoderUtil" />
	<method signature="byte[] encode(java.awt.image.BufferedImage,java.lang.String)" class="org.jfree.chart.encoders.EncoderUtil" />
	<method signature="byte[] encode(java.awt.image.BufferedImage,java.lang.String,boolean)" class="org.jfree.chart.encoders.EncoderUtil" />
	<method signature="void writeBufferedImage(java.awt.image.BufferedImage,java.lang.String,java.io.OutputStream,boolean)" class="org.jfree.chart.encoders.EncoderUtil" />
	<method signature="byte[] encode(java.awt.image.BufferedImage,java.lang.String,float,boolean)" class="org.jfree.chart.encoders.EncoderUtil" />
	<class name="org.apache.xerces.impl.dtd.XMLElementDecl" />
	<method signature="void clear()" class="org.apache.xerces.impl.dtd.XMLElementDecl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dtd.XMLElementDecl" />
	<method signature="void setValues(org.apache.xerces.xni.QName,int,short,org.apache.xerces.impl.dtd.models.ContentModelValidator,org.apache.xerces.impl.dtd.XMLSimpleType)" class="org.apache.xerces.impl.dtd.XMLElementDecl" />
	<class name="org.jfree.chart.entity.JFreeChartEntity" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.entity.JFreeChartEntity" />
	<method signature="int hashCode()" class="org.jfree.chart.entity.JFreeChartEntity" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.entity.JFreeChartEntity" />
	<method signature="org.jfree.chart.JFreeChart getChart()" class="org.jfree.chart.entity.JFreeChartEntity" />
	<method signature="void &lt;init&gt;(java.awt.Shape,org.jfree.chart.JFreeChart,java.lang.String)" class="org.jfree.chart.entity.JFreeChartEntity" />
	<method signature="java.lang.String toString()" class="org.jfree.chart.entity.JFreeChartEntity" />
	<method signature="void &lt;init&gt;(java.awt.Shape,org.jfree.chart.JFreeChart,java.lang.String,java.lang.String)" class="org.jfree.chart.entity.JFreeChartEntity" />
	<method signature="void &lt;init&gt;(java.awt.Shape,org.jfree.chart.JFreeChart)" class="org.jfree.chart.entity.JFreeChartEntity" />
	<class name="org.jfree.chart.plot.dial.DialLayerChangeListener" />
	<method signature="void dialLayerChanged(org.jfree.chart.plot.dial.DialLayerChangeEvent)" class="org.jfree.chart.plot.dial.DialLayerChangeListener" />
	<class name="freemarker.core.StringArraySequence" />
	<method signature="int size()" class="freemarker.core.StringArraySequence" />
	<method signature="void &lt;init&gt;(java.lang.String[])" class="freemarker.core.StringArraySequence" />
	<method signature="freemarker.template.TemplateModel get(int)" class="freemarker.core.StringArraySequence" />
	<class name="org.apache.xerces.impl.dv.DatatypeValidator" />
	<method signature="void validate(java.lang.String,org.apache.xerces.impl.dv.ValidationContext)" class="org.apache.xerces.impl.dv.DatatypeValidator" />
	<class name="org.apache.xerces.impl.dv.xs.DurationDV" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.xs.DurationDV" />
	<method signature="java.lang.Object getActualValue(java.lang.String,org.apache.xerces.impl.dv.ValidationContext)" class="org.apache.xerces.impl.dv.xs.DurationDV" />
	<class name="org.apache.commons.lang3.SerializationUtils" />
	<method signature="java.lang.Object deserialize(java.io.InputStream)" class="org.apache.commons.lang3.SerializationUtils" />
	<method signature="java.io.Serializable roundtrip(java.io.Serializable)" class="org.apache.commons.lang3.SerializationUtils" />
	<method signature="java.lang.Object deserialize(byte[])" class="org.apache.commons.lang3.SerializationUtils" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.SerializationUtils" />
	<method signature="java.io.Serializable clone(java.io.Serializable)" class="org.apache.commons.lang3.SerializationUtils" />
	<method signature="byte[] serialize(java.io.Serializable)" class="org.apache.commons.lang3.SerializationUtils" />
	<method signature="void serialize(java.io.Serializable,java.io.OutputStream)" class="org.apache.commons.lang3.SerializationUtils" />
	<class name="org.apache.xerces.util.AugmentationsImpl" />
	<method signature="java.util.Enumeration keys()" class="org.apache.xerces.util.AugmentationsImpl" />
	<method signature="java.lang.Object getItem(java.lang.String)" class="org.apache.xerces.util.AugmentationsImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.util.AugmentationsImpl" />
	<method signature="void removeAllItems()" class="org.apache.xerces.util.AugmentationsImpl" />
	<method signature="java.lang.String toString()" class="org.apache.xerces.util.AugmentationsImpl" />
	<method signature="java.lang.Object putItem(java.lang.String,java.lang.Object)" class="org.apache.xerces.util.AugmentationsImpl" />
	<method signature="java.lang.Object removeItem(java.lang.String)" class="org.apache.xerces.util.AugmentationsImpl" />
	<class name="com.google.zxing.ResultPoint" />
	<method signature="float getX()" class="com.google.zxing.ResultPoint" />
	<method signature="float getY()" class="com.google.zxing.ResultPoint" />
	<method signature="int hashCode()" class="com.google.zxing.ResultPoint" />
	<method signature="boolean equals(java.lang.Object)" class="com.google.zxing.ResultPoint" />
	<method signature="void orderBestPatterns(com.google.zxing.ResultPoint[])" class="com.google.zxing.ResultPoint" />
	<method signature="float distance(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint)" class="com.google.zxing.ResultPoint" />
	<method signature="java.lang.String toString()" class="com.google.zxing.ResultPoint" />
	<method signature="void &lt;init&gt;(float,float)" class="com.google.zxing.ResultPoint" />
	<class name="com.hexidec.component.EkitStandardParserCallback" />
	<method signature="void reportCB()" class="com.hexidec.component.EkitStandardParserCallback" />
	<method signature="void handleError(java.lang.String,int)" class="com.hexidec.component.EkitStandardParserCallback" />
	<method signature="void &lt;init&gt;()" class="com.hexidec.component.EkitStandardParserCallback" />
	<method signature="java.util.HashMap getTheErrors()" class="com.hexidec.component.EkitStandardParserCallback" />
	<class name="org.jfree.util.SortedConfigurationWriter" />
	<method signature="void &lt;init&gt;()" class="org.jfree.util.SortedConfigurationWriter" />
	<method signature="void save(java.io.OutputStream,org.jfree.util.Configuration)" class="org.jfree.util.SortedConfigurationWriter" />
	<method signature="void save(java.lang.String,org.jfree.util.Configuration)" class="org.jfree.util.SortedConfigurationWriter" />
	<method signature="void save(java.io.File,org.jfree.util.Configuration)" class="org.jfree.util.SortedConfigurationWriter" />
	<class name="org.w3c.dom.html.HTMLBaseFontElement" />
	<method signature="java.lang.String getSize()" class="org.w3c.dom.html.HTMLBaseFontElement" />
	<method signature="void setFace(java.lang.String)" class="org.w3c.dom.html.HTMLBaseFontElement" />
	<method signature="void setColor(java.lang.String)" class="org.w3c.dom.html.HTMLBaseFontElement" />
	<method signature="void setSize(java.lang.String)" class="org.w3c.dom.html.HTMLBaseFontElement" />
	<method signature="java.lang.String getColor()" class="org.w3c.dom.html.HTMLBaseFontElement" />
	<method signature="java.lang.String getFace()" class="org.w3c.dom.html.HTMLBaseFontElement" />
	<class name="org.jfree.ui.HorizontalAlignment" />
	<method signature="int hashCode()" class="org.jfree.ui.HorizontalAlignment" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.ui.HorizontalAlignment" />
	<method signature="java.lang.String toString()" class="org.jfree.ui.HorizontalAlignment" />
	<class name="org.jfree.ui.LengthAdjustmentType" />
	<method signature="int hashCode()" class="org.jfree.ui.LengthAdjustmentType" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.ui.LengthAdjustmentType" />
	<method signature="java.lang.String toString()" class="org.jfree.ui.LengthAdjustmentType" />
	<class name="org.w3c.dom.html.HTMLHRElement" />
	<method signature="void setAlign(java.lang.String)" class="org.w3c.dom.html.HTMLHRElement" />
	<method signature="java.lang.String getSize()" class="org.w3c.dom.html.HTMLHRElement" />
	<method signature="void setNoShade(boolean)" class="org.w3c.dom.html.HTMLHRElement" />
	<method signature="void setSize(java.lang.String)" class="org.w3c.dom.html.HTMLHRElement" />
	<method signature="java.lang.String getWidth()" class="org.w3c.dom.html.HTMLHRElement" />
	<method signature="java.lang.String getAlign()" class="org.w3c.dom.html.HTMLHRElement" />
	<method signature="void setWidth(java.lang.String)" class="org.w3c.dom.html.HTMLHRElement" />
	<method signature="boolean getNoShade()" class="org.w3c.dom.html.HTMLHRElement" />
	<class name="org.jfree.util.WaitingImageObserver" />
	<method signature="java.lang.Object clone()" class="org.jfree.util.WaitingImageObserver" />
	<method signature="boolean imageUpdate(java.awt.Image,int,int,int,int,int)" class="org.jfree.util.WaitingImageObserver" />
	<method signature="void &lt;init&gt;(java.awt.Image)" class="org.jfree.util.WaitingImageObserver" />
	<method signature="void waitImageLoaded()" class="org.jfree.util.WaitingImageObserver" />
	<method signature="boolean isLoadingComplete()" class="org.jfree.util.WaitingImageObserver" />
	<method signature="boolean isError()" class="org.jfree.util.WaitingImageObserver" />
	<class name="org.jfree.data.gantt.TaskSeries" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.gantt.TaskSeries" />
	<method signature="int getItemCount()" class="org.jfree.data.gantt.TaskSeries" />
	<method signature="void remove(org.jfree.data.gantt.Task)" class="org.jfree.data.gantt.TaskSeries" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.gantt.TaskSeries" />
	<method signature="org.jfree.data.gantt.Task get(java.lang.String)" class="org.jfree.data.gantt.TaskSeries" />
	<method signature="org.jfree.data.gantt.Task get(int)" class="org.jfree.data.gantt.TaskSeries" />
	<method signature="void removeAll()" class="org.jfree.data.gantt.TaskSeries" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.data.gantt.TaskSeries" />
	<method signature="void add(org.jfree.data.gantt.Task)" class="org.jfree.data.gantt.TaskSeries" />
	<method signature="java.util.List getTasks()" class="org.jfree.data.gantt.TaskSeries" />
	<class name="org.apache.xerces.impl.xpath.regex.ParseException" />
	<method signature="int getLocation()" class="org.apache.xerces.impl.xpath.regex.ParseException" />
	<method signature="void &lt;init&gt;(java.lang.String,int)" class="org.apache.xerces.impl.xpath.regex.ParseException" />
	<class name="org.jfree.chart.demo.TimeSeriesChartDemo1" />
	<method signature="javax.swing.JPanel createDemoPanel()" class="org.jfree.chart.demo.TimeSeriesChartDemo1" />
	<method signature="void main(java.lang.String[])" class="org.jfree.chart.demo.TimeSeriesChartDemo1" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.chart.demo.TimeSeriesChartDemo1" />
	<class name="org.jfree.data.resources.DataPackageResources_ru" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.resources.DataPackageResources_ru" />
	<method signature="java.lang.Object[][] getContents()" class="org.jfree.data.resources.DataPackageResources_ru" />
	<class name="org.jfree.ui.ApplicationFrame" />
	<method signature="void windowIconified(java.awt.event.WindowEvent)" class="org.jfree.ui.ApplicationFrame" />
	<method signature="void windowClosed(java.awt.event.WindowEvent)" class="org.jfree.ui.ApplicationFrame" />
	<method signature="void windowDeactivated(java.awt.event.WindowEvent)" class="org.jfree.ui.ApplicationFrame" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.ui.ApplicationFrame" />
	<method signature="void windowOpened(java.awt.event.WindowEvent)" class="org.jfree.ui.ApplicationFrame" />
	<method signature="void windowClosing(java.awt.event.WindowEvent)" class="org.jfree.ui.ApplicationFrame" />
	<method signature="void windowActivated(java.awt.event.WindowEvent)" class="org.jfree.ui.ApplicationFrame" />
	<method signature="void windowDeiconified(java.awt.event.WindowEvent)" class="org.jfree.ui.ApplicationFrame" />
	<class name="org.jfree.data.ComparableObjectSeries" />
	<method signature="boolean getAllowDuplicateXValues()" class="org.jfree.data.ComparableObjectSeries" />
	<method signature="int hashCode()" class="org.jfree.data.ComparableObjectSeries" />
	<method signature="void &lt;init&gt;(java.lang.Comparable)" class="org.jfree.data.ComparableObjectSeries" />
	<method signature="boolean getAutoSort()" class="org.jfree.data.ComparableObjectSeries" />
	<method signature="void &lt;init&gt;(java.lang.Comparable,boolean,boolean)" class="org.jfree.data.ComparableObjectSeries" />
	<method signature="org.jfree.data.ComparableObjectItem remove(java.lang.Comparable)" class="org.jfree.data.ComparableObjectSeries" />
	<method signature="void clear()" class="org.jfree.data.ComparableObjectSeries" />
	<method signature="int getItemCount()" class="org.jfree.data.ComparableObjectSeries" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.ComparableObjectSeries" />
	<method signature="int getMaximumItemCount()" class="org.jfree.data.ComparableObjectSeries" />
	<method signature="int indexOf(java.lang.Comparable)" class="org.jfree.data.ComparableObjectSeries" />
	<method signature="void setMaximumItemCount(int)" class="org.jfree.data.ComparableObjectSeries" />
	<class name="org.jfree.ui.about.ContributorsTableModel" />
	<method signature="void &lt;init&gt;(java.util.List)" class="org.jfree.ui.about.ContributorsTableModel" />
	<method signature="int getRowCount()" class="org.jfree.ui.about.ContributorsTableModel" />
	<method signature="java.lang.String getColumnName(int)" class="org.jfree.ui.about.ContributorsTableModel" />
	<method signature="java.lang.Object getValueAt(int,int)" class="org.jfree.ui.about.ContributorsTableModel" />
	<method signature="int getColumnCount()" class="org.jfree.ui.about.ContributorsTableModel" />
	<class name="com.google.zxing.client.result.URIParsedResult" />
	<method signature="java.lang.String getTitle()" class="com.google.zxing.client.result.URIParsedResult" />
	<method signature="java.lang.String getDisplayResult()" class="com.google.zxing.client.result.URIParsedResult" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="com.google.zxing.client.result.URIParsedResult" />
	<method signature="boolean isPossiblyMaliciousURI()" class="com.google.zxing.client.result.URIParsedResult" />
	<method signature="java.lang.String getURI()" class="com.google.zxing.client.result.URIParsedResult" />
	<class name="javax.xml.stream.XMLOutputFactory" />
	<method signature="javax.xml.stream.XMLEventWriter createXMLEventWriter(java.io.OutputStream)" class="javax.xml.stream.XMLOutputFactory" />
	<method signature="javax.xml.stream.XMLStreamWriter createXMLStreamWriter(java.io.Writer)" class="javax.xml.stream.XMLOutputFactory" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="javax.xml.stream.XMLOutputFactory" />
	<method signature="javax.xml.stream.XMLEventWriter createXMLEventWriter(javax.xml.transform.Result)" class="javax.xml.stream.XMLOutputFactory" />
	<method signature="javax.xml.stream.XMLOutputFactory newInstance()" class="javax.xml.stream.XMLOutputFactory" />
	<method signature="javax.xml.stream.XMLInputFactory newInstance(java.lang.String,java.lang.ClassLoader)" class="javax.xml.stream.XMLOutputFactory" />
	<method signature="javax.xml.stream.XMLStreamWriter createXMLStreamWriter(javax.xml.transform.Result)" class="javax.xml.stream.XMLOutputFactory" />
	<method signature="javax.xml.stream.XMLEventWriter createXMLEventWriter(java.io.OutputStream,java.lang.String)" class="javax.xml.stream.XMLOutputFactory" />
	<method signature="boolean isPropertySupported(java.lang.String)" class="javax.xml.stream.XMLOutputFactory" />
	<method signature="javax.xml.stream.XMLStreamWriter createXMLStreamWriter(java.io.OutputStream,java.lang.String)" class="javax.xml.stream.XMLOutputFactory" />
	<method signature="javax.xml.stream.XMLEventWriter createXMLEventWriter(java.io.Writer)" class="javax.xml.stream.XMLOutputFactory" />
	<method signature="javax.xml.stream.XMLStreamWriter createXMLStreamWriter(java.io.OutputStream)" class="javax.xml.stream.XMLOutputFactory" />
	<method signature="java.lang.Object getProperty(java.lang.String)" class="javax.xml.stream.XMLOutputFactory" />
	<class name="edu.umd.cs.findbugs.annotations.ExpectWarning" />
	<method signature="int num()" class="edu.umd.cs.findbugs.annotations.ExpectWarning" />
	<method signature="edu.umd.cs.findbugs.annotations.Confidence confidence()" class="edu.umd.cs.findbugs.annotations.ExpectWarning" />
	<method signature="int rank()" class="edu.umd.cs.findbugs.annotations.ExpectWarning" />
	<method signature="java.lang.String value()" class="edu.umd.cs.findbugs.annotations.ExpectWarning" />
	<class name="org.apache.commons.lang3.tuple.ImmutablePair" />
	<method signature="void &lt;init&gt;(java.lang.Object,java.lang.Object)" class="org.apache.commons.lang3.tuple.ImmutablePair" />
	<method signature="java.lang.Object getLeft()" class="org.apache.commons.lang3.tuple.ImmutablePair" />
	<method signature="java.lang.Object getRight()" class="org.apache.commons.lang3.tuple.ImmutablePair" />
	<method signature="org.apache.commons.lang3.tuple.ImmutablePair of(java.lang.Object,java.lang.Object)" class="org.apache.commons.lang3.tuple.ImmutablePair" />
	<method signature="java.lang.Object setValue(java.lang.Object)" class="org.apache.commons.lang3.tuple.ImmutablePair" />
	<class name="org.apache.wml.WMLGoElement" />
	<method signature="void setHref(java.lang.String)" class="org.apache.wml.WMLGoElement" />
	<method signature="java.lang.String getHref()" class="org.apache.wml.WMLGoElement" />
	<method signature="void setMethod(java.lang.String)" class="org.apache.wml.WMLGoElement" />
	<method signature="java.lang.String getMethod()" class="org.apache.wml.WMLGoElement" />
	<method signature="java.lang.String getSendreferer()" class="org.apache.wml.WMLGoElement" />
	<method signature="void setAcceptCharset(java.lang.String)" class="org.apache.wml.WMLGoElement" />
	<method signature="java.lang.String getAcceptCharset()" class="org.apache.wml.WMLGoElement" />
	<method signature="void setSendreferer(java.lang.String)" class="org.apache.wml.WMLGoElement" />
	<class name="org.apache.xerces.util.XMLStringBuffer" />
	<method signature="void &lt;init&gt;(char)" class="org.apache.xerces.util.XMLStringBuffer" />
	<method signature="void &lt;init&gt;(int)" class="org.apache.xerces.util.XMLStringBuffer" />
	<method signature="void clear()" class="org.apache.xerces.util.XMLStringBuffer" />
	<method signature="void append(char)" class="org.apache.xerces.util.XMLStringBuffer" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.util.XMLStringBuffer" />
	<method signature="void &lt;init&gt;(char[],int,int)" class="org.apache.xerces.util.XMLStringBuffer" />
	<method signature="void append(java.lang.String)" class="org.apache.xerces.util.XMLStringBuffer" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.apache.xerces.util.XMLStringBuffer" />
	<method signature="void append(char[],int,int)" class="org.apache.xerces.util.XMLStringBuffer" />
	<method signature="void &lt;init&gt;(org.apache.xerces.xni.XMLString)" class="org.apache.xerces.util.XMLStringBuffer" />
	<method signature="void append(org.apache.xerces.xni.XMLString)" class="org.apache.xerces.util.XMLStringBuffer" />
	<class name="javax.xml.transform.TransformerException" />
	<method signature="java.lang.String getLocationAsString()" class="javax.xml.transform.TransformerException" />
	<method signature="void &lt;init&gt;(java.lang.String,javax.xml.transform.SourceLocator)" class="javax.xml.transform.TransformerException" />
	<method signature="void printStackTrace(java.io.PrintWriter)" class="javax.xml.transform.TransformerException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Throwable)" class="javax.xml.transform.TransformerException" />
	<method signature="void printStackTrace(java.io.PrintStream)" class="javax.xml.transform.TransformerException" />
	<method signature="void setLocator(javax.xml.transform.SourceLocator)" class="javax.xml.transform.TransformerException" />
	<method signature="java.lang.String getMessageAndLocation()" class="javax.xml.transform.TransformerException" />
	<method signature="javax.xml.transform.SourceLocator getLocator()" class="javax.xml.transform.TransformerException" />
	<method signature="java.lang.Throwable getException()" class="javax.xml.transform.TransformerException" />
	<method signature="java.lang.Throwable initCause(java.lang.Throwable)" class="javax.xml.transform.TransformerException" />
	<method signature="void &lt;init&gt;(java.lang.Throwable)" class="javax.xml.transform.TransformerException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="javax.xml.transform.TransformerException" />
	<method signature="java.lang.Throwable getCause()" class="javax.xml.transform.TransformerException" />
	<method signature="void printStackTrace()" class="javax.xml.transform.TransformerException" />
	<method signature="void &lt;init&gt;(java.lang.String,javax.xml.transform.SourceLocator,java.lang.Throwable)" class="javax.xml.transform.TransformerException" />
	<class name="javax.xml.validation.SchemaFactoryLoader" />
	<method signature="javax.xml.validation.SchemaFactory newFactory(java.lang.String)" class="javax.xml.validation.SchemaFactoryLoader" />
	<class name="javax.xml.stream.XMLEventFactory" />
	<method signature="javax.xml.stream.events.Namespace createNamespace(java.lang.String)" class="javax.xml.stream.XMLEventFactory" />
	<method signature="javax.xml.stream.events.StartDocument createStartDocument(java.lang.String)" class="javax.xml.stream.XMLEventFactory" />
	<method signature="javax.xml.stream.events.StartElement createStartElement(javax.xml.namespace.QName,java.util.Iterator,java.util.Iterator)" class="javax.xml.stream.XMLEventFactory" />
	<method signature="javax.xml.stream.XMLEventFactory newInstance()" class="javax.xml.stream.XMLEventFactory" />
	<method signature="javax.xml.stream.events.Attribute createAttribute(javax.xml.namespace.QName,java.lang.String)" class="javax.xml.stream.XMLEventFactory" />
	<method signature="javax.xml.stream.events.EndElement createEndElement(javax.xml.namespace.QName,java.util.Iterator)" class="javax.xml.stream.XMLEventFactory" />
	<method signature="javax.xml.stream.events.Attribute createAttribute(java.lang.String,java.lang.String)" class="javax.xml.stream.XMLEventFactory" />
	<method signature="javax.xml.stream.events.EndElement createEndElement(java.lang.String,java.lang.String,java.lang.String)" class="javax.xml.stream.XMLEventFactory" />
	<method signature="void setLocation(javax.xml.stream.Location)" class="javax.xml.stream.XMLEventFactory" />
	<method signature="javax.xml.stream.events.StartDocument createStartDocument()" class="javax.xml.stream.XMLEventFactory" />
	<method signature="javax.xml.stream.events.StartElement createStartElement(java.lang.String,java.lang.String,java.lang.String,java.util.Iterator,java.util.Iterator)" class="javax.xml.stream.XMLEventFactory" />
	<method signature="javax.xml.stream.events.EndDocument createEndDocument()" class="javax.xml.stream.XMLEventFactory" />
	<method signature="javax.xml.stream.events.Characters createCData(java.lang.String)" class="javax.xml.stream.XMLEventFactory" />
	<method signature="javax.xml.stream.XMLEventFactory newInstance(java.lang.String,java.lang.ClassLoader)" class="javax.xml.stream.XMLEventFactory" />
	<method signature="javax.xml.stream.events.StartDocument createStartDocument(java.lang.String,java.lang.String,boolean)" class="javax.xml.stream.XMLEventFactory" />
	<method signature="javax.xml.stream.events.Namespace createNamespace(java.lang.String,java.lang.String)" class="javax.xml.stream.XMLEventFactory" />
	<method signature="javax.xml.stream.events.ProcessingInstruction createProcessingInstruction(java.lang.String,java.lang.String)" class="javax.xml.stream.XMLEventFactory" />
	<method signature="javax.xml.stream.events.DTD createDTD(java.lang.String)" class="javax.xml.stream.XMLEventFactory" />
	<method signature="javax.xml.stream.events.Attribute createAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="javax.xml.stream.XMLEventFactory" />
	<method signature="javax.xml.stream.events.Characters createCharacters(java.lang.String)" class="javax.xml.stream.XMLEventFactory" />
	<method signature="javax.xml.stream.events.Characters createIgnorableSpace(java.lang.String)" class="javax.xml.stream.XMLEventFactory" />
	<method signature="javax.xml.stream.events.Comment createComment(java.lang.String)" class="javax.xml.stream.XMLEventFactory" />
	<method signature="javax.xml.stream.events.StartElement createStartElement(java.lang.String,java.lang.String,java.lang.String,java.util.Iterator,java.util.Iterator,javax.xml.namespace.NamespaceContext)" class="javax.xml.stream.XMLEventFactory" />
	<method signature="javax.xml.stream.events.Characters createSpace(java.lang.String)" class="javax.xml.stream.XMLEventFactory" />
	<method signature="javax.xml.stream.events.EntityReference createEntityReference(java.lang.String,javax.xml.stream.events.EntityDeclaration)" class="javax.xml.stream.XMLEventFactory" />
	<method signature="javax.xml.stream.events.StartElement createStartElement(java.lang.String,java.lang.String,java.lang.String)" class="javax.xml.stream.XMLEventFactory" />
	<method signature="javax.xml.stream.events.EndElement createEndElement(java.lang.String,java.lang.String,java.lang.String,java.util.Iterator)" class="javax.xml.stream.XMLEventFactory" />
	<method signature="javax.xml.stream.events.StartDocument createStartDocument(java.lang.String,java.lang.String)" class="javax.xml.stream.XMLEventFactory" />
	<class name="javax.xml.xpath.XPath" />
	<method signature="javax.xml.xpath.XPathVariableResolver getXPathVariableResolver()" class="javax.xml.xpath.XPath" />
	<method signature="void reset()" class="javax.xml.xpath.XPath" />
	<method signature="void setNamespaceContext(javax.xml.namespace.NamespaceContext)" class="javax.xml.xpath.XPath" />
	<method signature="java.lang.String evaluate(java.lang.String,java.lang.Object)" class="javax.xml.xpath.XPath" />
	<method signature="java.lang.Object evaluate(java.lang.String,org.xml.sax.InputSource,javax.xml.namespace.QName)" class="javax.xml.xpath.XPath" />
	<method signature="void setXPathVariableResolver(javax.xml.xpath.XPathVariableResolver)" class="javax.xml.xpath.XPath" />
	<method signature="java.lang.Object evaluate(java.lang.String,java.lang.Object,javax.xml.namespace.QName)" class="javax.xml.xpath.XPath" />
	<method signature="javax.xml.xpath.XPathFunctionResolver getXPathFunctionResolver()" class="javax.xml.xpath.XPath" />
	<method signature="javax.xml.namespace.NamespaceContext getNamespaceContext()" class="javax.xml.xpath.XPath" />
	<method signature="javax.xml.xpath.XPathExpression compile(java.lang.String)" class="javax.xml.xpath.XPath" />
	<method signature="java.lang.String evaluate(java.lang.String,org.xml.sax.InputSource)" class="javax.xml.xpath.XPath" />
	<method signature="void setXPathFunctionResolver(javax.xml.xpath.XPathFunctionResolver)" class="javax.xml.xpath.XPath" />
	<class name="org.jfree.ui.Layer" />
	<method signature="int hashCode()" class="org.jfree.ui.Layer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.ui.Layer" />
	<method signature="java.lang.String toString()" class="org.jfree.ui.Layer" />
	<class name="org.jfree.chart.renderer.PolarItemRenderer" />
	<method signature="void drawSeries(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.PolarPlot,org.jfree.data.xy.XYDataset,int)" class="org.jfree.chart.renderer.PolarItemRenderer" />
	<method signature="void setBaseToolTipGenerator(org.jfree.chart.labels.XYToolTipGenerator)" class="org.jfree.chart.renderer.PolarItemRenderer" />
	<method signature="void drawAngularGridLines(java.awt.Graphics2D,org.jfree.chart.plot.PolarPlot,java.util.List,java.awt.geom.Rectangle2D)" class="org.jfree.chart.renderer.PolarItemRenderer" />
	<method signature="org.jfree.chart.LegendItem getLegendItem(int)" class="org.jfree.chart.renderer.PolarItemRenderer" />
	<method signature="void addChangeListener(org.jfree.chart.event.RendererChangeListener)" class="org.jfree.chart.renderer.PolarItemRenderer" />
	<method signature="void setPlot(org.jfree.chart.plot.PolarPlot)" class="org.jfree.chart.renderer.PolarItemRenderer" />
	<method signature="void removeChangeListener(org.jfree.chart.event.RendererChangeListener)" class="org.jfree.chart.renderer.PolarItemRenderer" />
	<method signature="org.jfree.chart.urls.XYURLGenerator getURLGenerator()" class="org.jfree.chart.renderer.PolarItemRenderer" />
	<method signature="void setURLGenerator(org.jfree.chart.urls.XYURLGenerator)" class="org.jfree.chart.renderer.PolarItemRenderer" />
	<method signature="org.jfree.chart.labels.XYToolTipGenerator getBaseToolTipGenerator()" class="org.jfree.chart.renderer.PolarItemRenderer" />
	<method signature="org.jfree.chart.labels.XYToolTipGenerator getSeriesToolTipGenerator(int)" class="org.jfree.chart.renderer.PolarItemRenderer" />
	<method signature="void setSeriesToolTipGenerator(int,org.jfree.chart.labels.XYToolTipGenerator)" class="org.jfree.chart.renderer.PolarItemRenderer" />
	<method signature="org.jfree.chart.plot.PolarPlot getPlot()" class="org.jfree.chart.renderer.PolarItemRenderer" />
	<method signature="void drawRadialGridLines(java.awt.Graphics2D,org.jfree.chart.plot.PolarPlot,org.jfree.chart.axis.ValueAxis,java.util.List,java.awt.geom.Rectangle2D)" class="org.jfree.chart.renderer.PolarItemRenderer" />
	<method signature="org.jfree.chart.labels.XYToolTipGenerator getToolTipGenerator(int,int)" class="org.jfree.chart.renderer.PolarItemRenderer" />
	<class name="org.jfree.chart.labels.CrosshairLabelGenerator" />
	<method signature="java.lang.String generateLabel(org.jfree.chart.plot.Crosshair)" class="org.jfree.chart.labels.CrosshairLabelGenerator" />
	<class name="org.jdom2.located.LocatedProcessingInstruction" />
	<method signature="void setLine(int)" class="org.jdom2.located.LocatedProcessingInstruction" />
	<method signature="void &lt;init&gt;(java.lang.String,java.util.Map)" class="org.jdom2.located.LocatedProcessingInstruction" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jdom2.located.LocatedProcessingInstruction" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="org.jdom2.located.LocatedProcessingInstruction" />
	<method signature="int getLine()" class="org.jdom2.located.LocatedProcessingInstruction" />
	<method signature="int getColumn()" class="org.jdom2.located.LocatedProcessingInstruction" />
	<method signature="void setColumn(int)" class="org.jdom2.located.LocatedProcessingInstruction" />
	<class name="tourma.data.IWithNameAndPicture" />
	<method signature="java.lang.String getName()" class="tourma.data.IWithNameAndPicture" />
	<method signature="void setName(java.lang.String)" class="tourma.data.IWithNameAndPicture" />
	<method signature="void setPicture(java.awt.image.BufferedImage)" class="tourma.data.IWithNameAndPicture" />
	<method signature="java.awt.image.BufferedImage getPicture()" class="tourma.data.IWithNameAndPicture" />
	<class name="org.jfree.chart.event.AxisChangeEvent" />
	<method signature="org.jfree.chart.axis.Axis getAxis()" class="org.jfree.chart.event.AxisChangeEvent" />
	<method signature="void &lt;init&gt;(org.jfree.chart.axis.Axis)" class="org.jfree.chart.event.AxisChangeEvent" />
	<class name="freemarker.debug.EnvironmentSuspendedEvent" />
	<method signature="freemarker.debug.DebuggedEnvironment getEnvironment()" class="freemarker.debug.EnvironmentSuspendedEvent" />
	<method signature="int getLine()" class="freemarker.debug.EnvironmentSuspendedEvent" />
	<method signature="void &lt;init&gt;(java.lang.Object,int,freemarker.debug.DebuggedEnvironment)" class="freemarker.debug.EnvironmentSuspendedEvent" />
	<class name="freemarker.template.TemplateModelListSequence" />
	<method signature="int size()" class="freemarker.template.TemplateModelListSequence" />
	<method signature="void &lt;init&gt;(java.util.List)" class="freemarker.template.TemplateModelListSequence" />
	<method signature="freemarker.template.TemplateModel get(int)" class="freemarker.template.TemplateModelListSequence" />
	<method signature="java.lang.Object getWrappedObject()" class="freemarker.template.TemplateModelListSequence" />
	<class name="org.apache.commons.lang3.ClassUtils" />
	<method signature="java.lang.String getShortClassName(java.lang.Object,java.lang.String)" class="org.apache.commons.lang3.ClassUtils" />
	<method signature="java.lang.Class getClass(java.lang.ClassLoader,java.lang.String)" class="org.apache.commons.lang3.ClassUtils" />
	<method signature="java.lang.String getPackageCanonicalName(java.lang.Class)" class="org.apache.commons.lang3.ClassUtils" />
	<method signature="java.lang.String getShortCanonicalName(java.lang.Object,java.lang.String)" class="org.apache.commons.lang3.ClassUtils" />
	<method signature="java.lang.String getPackageName(java.lang.String)" class="org.apache.commons.lang3.ClassUtils" />
	<method signature="java.lang.Iterable hierarchy(java.lang.Class)" class="org.apache.commons.lang3.ClassUtils" />
	<method signature="java.lang.Class[] primitivesToWrappers(java.lang.Class[])" class="org.apache.commons.lang3.ClassUtils" />
	<method signature="java.lang.Class getClass(java.lang.ClassLoader,java.lang.String,boolean)" class="org.apache.commons.lang3.ClassUtils" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.ClassUtils" />
	<method signature="java.lang.String getSimpleName(java.lang.Class)" class="org.apache.commons.lang3.ClassUtils" />
	<method signature="java.lang.String getPackageName(java.lang.Class)" class="org.apache.commons.lang3.ClassUtils" />
	<method signature="boolean isAssignable(java.lang.Class[],java.lang.Class[],boolean)" class="org.apache.commons.lang3.ClassUtils" />
	<method signature="java.lang.String getPackageCanonicalName(java.lang.String)" class="org.apache.commons.lang3.ClassUtils" />
	<method signature="java.lang.String getAbbreviatedName(java.lang.String,int)" class="org.apache.commons.lang3.ClassUtils" />
	<method signature="java.lang.Class[] wrappersToPrimitives(java.lang.Class[])" class="org.apache.commons.lang3.ClassUtils" />
	<method signature="boolean isAssignable(java.lang.Class,java.lang.Class)" class="org.apache.commons.lang3.ClassUtils" />
	<method signature="boolean isInnerClass(java.lang.Class)" class="org.apache.commons.lang3.ClassUtils" />
	<method signature="java.lang.Class[] toClass(java.lang.Object[])" class="org.apache.commons.lang3.ClassUtils" />
	<method signature="java.lang.String getShortClassName(java.lang.Class)" class="org.apache.commons.lang3.ClassUtils" />
	<method signature="java.util.List getAllSuperclasses(java.lang.Class)" class="org.apache.commons.lang3.ClassUtils" />
	<method signature="java.lang.Class getClass(java.lang.String,boolean)" class="org.apache.commons.lang3.ClassUtils" />
	<method signature="java.lang.String getPackageCanonicalName(java.lang.Object,java.lang.String)" class="org.apache.commons.lang3.ClassUtils" />
	<method signature="boolean isPrimitiveWrapper(java.lang.Class)" class="org.apache.commons.lang3.ClassUtils" />
	<method signature="java.util.List getAllInterfaces(java.lang.Class)" class="org.apache.commons.lang3.ClassUtils" />
	<method signature="boolean isAssignable(java.lang.Class[],java.lang.Class[])" class="org.apache.commons.lang3.ClassUtils" />
	<method signature="java.lang.String getAbbreviatedName(java.lang.Class,int)" class="org.apache.commons.lang3.ClassUtils" />
	<method signature="java.lang.Class primitiveToWrapper(java.lang.Class)" class="org.apache.commons.lang3.ClassUtils" />
	<method signature="java.lang.Class getClass(java.lang.String)" class="org.apache.commons.lang3.ClassUtils" />
	<method signature="java.lang.String getShortCanonicalName(java.lang.Class)" class="org.apache.commons.lang3.ClassUtils" />
	<method signature="java.lang.Iterable hierarchy(java.lang.Class,org.apache.commons.lang3.ClassUtils$Interfaces)" class="org.apache.commons.lang3.ClassUtils" />
	<method signature="java.lang.String getSimpleName(java.lang.Object,java.lang.String)" class="org.apache.commons.lang3.ClassUtils" />
	<method signature="java.util.List convertClassNamesToClasses(java.util.List)" class="org.apache.commons.lang3.ClassUtils" />
	<method signature="boolean isAssignable(java.lang.Class,java.lang.Class,boolean)" class="org.apache.commons.lang3.ClassUtils" />
	<method signature="java.lang.String getPackageName(java.lang.Object,java.lang.String)" class="org.apache.commons.lang3.ClassUtils" />
	<method signature="java.lang.String getShortCanonicalName(java.lang.String)" class="org.apache.commons.lang3.ClassUtils" />
	<method signature="boolean isPrimitiveOrWrapper(java.lang.Class)" class="org.apache.commons.lang3.ClassUtils" />
	<method signature="java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])" class="org.apache.commons.lang3.ClassUtils" />
	<method signature="java.lang.Class wrapperToPrimitive(java.lang.Class)" class="org.apache.commons.lang3.ClassUtils" />
	<method signature="java.lang.String getShortClassName(java.lang.String)" class="org.apache.commons.lang3.ClassUtils" />
	<method signature="java.util.List convertClassesToClassNames(java.util.List)" class="org.apache.commons.lang3.ClassUtils" />
	<class name="org.jfree.data.function.PolynomialFunction2D" />
	<method signature="double[] getCoefficients()" class="org.jfree.data.function.PolynomialFunction2D" />
	<method signature="int hashCode()" class="org.jfree.data.function.PolynomialFunction2D" />
	<method signature="int getOrder()" class="org.jfree.data.function.PolynomialFunction2D" />
	<method signature="double getValue(double)" class="org.jfree.data.function.PolynomialFunction2D" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.function.PolynomialFunction2D" />
	<method signature="void &lt;init&gt;(double[])" class="org.jfree.data.function.PolynomialFunction2D" />
	<class name="org.apache.xerces.impl.xs.util.XSNamedMapImpl" />
	<method signature="org.apache.xerces.xs.XSObject itemByName(java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.util.XSNamedMapImpl" />
	<method signature="int size()" class="org.apache.xerces.impl.xs.util.XSNamedMapImpl" />
	<method signature="void &lt;init&gt;(java.lang.String[],org.apache.xerces.util.SymbolHash[],int)" class="org.apache.xerces.impl.xs.util.XSNamedMapImpl" />
	<method signature="void &lt;init&gt;(org.apache.xerces.xs.XSObject[],int)" class="org.apache.xerces.impl.xs.util.XSNamedMapImpl" />
	<method signature="boolean containsKey(java.lang.Object)" class="org.apache.xerces.impl.xs.util.XSNamedMapImpl" />
	<method signature="void &lt;init&gt;(java.lang.String,org.apache.xerces.util.SymbolHash)" class="org.apache.xerces.impl.xs.util.XSNamedMapImpl" />
	<method signature="org.apache.xerces.xs.XSObject item(int)" class="org.apache.xerces.impl.xs.util.XSNamedMapImpl" />
	<method signature="int getLength()" class="org.apache.xerces.impl.xs.util.XSNamedMapImpl" />
	<method signature="java.lang.Object get(java.lang.Object)" class="org.apache.xerces.impl.xs.util.XSNamedMapImpl" />
	<method signature="java.util.Set entrySet()" class="org.apache.xerces.impl.xs.util.XSNamedMapImpl" />
	<class name="org.jfree.chart.plot.ValueMarker" />
	<method signature="double getValue()" class="org.jfree.chart.plot.ValueMarker" />
	<method signature="void &lt;init&gt;(double)" class="org.jfree.chart.plot.ValueMarker" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.plot.ValueMarker" />
	<method signature="void setValue(double)" class="org.jfree.chart.plot.ValueMarker" />
	<method signature="void &lt;init&gt;(double,java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)" class="org.jfree.chart.plot.ValueMarker" />
	<method signature="void &lt;init&gt;(double,java.awt.Paint,java.awt.Stroke)" class="org.jfree.chart.plot.ValueMarker" />
	<class name="javax.xml.stream.XMLInputFactory" />
	<method signature="void setXMLReporter(javax.xml.stream.XMLReporter)" class="javax.xml.stream.XMLInputFactory" />
	<method signature="javax.xml.stream.XMLStreamReader createXMLStreamReader(java.io.Reader)" class="javax.xml.stream.XMLInputFactory" />
	<method signature="javax.xml.stream.util.XMLEventAllocator getEventAllocator()" class="javax.xml.stream.XMLInputFactory" />
	<method signature="javax.xml.stream.XMLStreamReader createXMLStreamReader(java.io.InputStream,java.lang.String)" class="javax.xml.stream.XMLInputFactory" />
	<method signature="javax.xml.stream.XMLStreamReader createXMLStreamReader(java.lang.String,java.io.InputStream)" class="javax.xml.stream.XMLInputFactory" />
	<method signature="javax.xml.stream.XMLEventReader createXMLEventReader(javax.xml.stream.XMLStreamReader)" class="javax.xml.stream.XMLInputFactory" />
	<method signature="javax.xml.stream.XMLInputFactory newInstance()" class="javax.xml.stream.XMLInputFactory" />
	<method signature="javax.xml.stream.XMLEventReader createFilteredReader(javax.xml.stream.XMLEventReader,javax.xml.stream.EventFilter)" class="javax.xml.stream.XMLInputFactory" />
	<method signature="javax.xml.stream.XMLEventReader createXMLEventReader(java.io.Reader)" class="javax.xml.stream.XMLInputFactory" />
	<method signature="void setEventAllocator(javax.xml.stream.util.XMLEventAllocator)" class="javax.xml.stream.XMLInputFactory" />
	<method signature="javax.xml.stream.XMLStreamReader createXMLStreamReader(javax.xml.transform.Source)" class="javax.xml.stream.XMLInputFactory" />
	<method signature="javax.xml.stream.XMLStreamReader createXMLStreamReader(java.lang.String,java.io.Reader)" class="javax.xml.stream.XMLInputFactory" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="javax.xml.stream.XMLInputFactory" />
	<method signature="javax.xml.stream.XMLInputFactory newInstance(java.lang.String,java.lang.ClassLoader)" class="javax.xml.stream.XMLInputFactory" />
	<method signature="javax.xml.stream.XMLEventReader createXMLEventReader(java.io.InputStream,java.lang.String)" class="javax.xml.stream.XMLInputFactory" />
	<method signature="javax.xml.stream.XMLResolver getXMLResolver()" class="javax.xml.stream.XMLInputFactory" />
	<method signature="javax.xml.stream.XMLEventReader createXMLEventReader(javax.xml.transform.Source)" class="javax.xml.stream.XMLInputFactory" />
	<method signature="javax.xml.stream.XMLStreamReader createXMLStreamReader(java.io.InputStream)" class="javax.xml.stream.XMLInputFactory" />
	<method signature="boolean isPropertySupported(java.lang.String)" class="javax.xml.stream.XMLInputFactory" />
	<method signature="javax.xml.stream.XMLEventReader createXMLEventReader(java.lang.String,java.io.InputStream)" class="javax.xml.stream.XMLInputFactory" />
	<method signature="void setXMLResolver(javax.xml.stream.XMLResolver)" class="javax.xml.stream.XMLInputFactory" />
	<method signature="javax.xml.stream.XMLEventReader createXMLEventReader(java.io.InputStream)" class="javax.xml.stream.XMLInputFactory" />
	<method signature="javax.xml.stream.XMLReporter getXMLReporter()" class="javax.xml.stream.XMLInputFactory" />
	<method signature="javax.xml.stream.XMLEventReader createXMLEventReader(java.lang.String,java.io.Reader)" class="javax.xml.stream.XMLInputFactory" />
	<method signature="javax.xml.stream.XMLStreamReader createFilteredReader(javax.xml.stream.XMLStreamReader,javax.xml.stream.StreamFilter)" class="javax.xml.stream.XMLInputFactory" />
	<method signature="java.lang.Object getProperty(java.lang.String)" class="javax.xml.stream.XMLInputFactory" />
	<class name="org.apache.xerces.dom3.as.DOMASWriter" />
	<method signature="void writeASModel(java.io.OutputStream,org.apache.xerces.dom3.as.ASModel)" class="org.apache.xerces.dom3.as.DOMASWriter" />
	<class name="org.jfree.data.resources.DataPackageResources_pl" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.resources.DataPackageResources_pl" />
	<method signature="java.lang.Object[][] getContents()" class="org.jfree.data.resources.DataPackageResources_pl" />
	<class name="freemarker.debug.Debugger" />
	<method signature="void addBreakpoint(freemarker.debug.Breakpoint)" class="freemarker.debug.Debugger" />
	<method signature="java.lang.Object addDebuggerListener(freemarker.debug.DebuggerListener)" class="freemarker.debug.Debugger" />
	<method signature="void removeBreakpoints()" class="freemarker.debug.Debugger" />
	<method signature="java.util.Collection getSuspendedEnvironments()" class="freemarker.debug.Debugger" />
	<method signature="void removeBreakpoint(freemarker.debug.Breakpoint)" class="freemarker.debug.Debugger" />
	<method signature="java.util.List getBreakpoints()" class="freemarker.debug.Debugger" />
	<method signature="void removeDebuggerListener(java.lang.Object)" class="freemarker.debug.Debugger" />
	<method signature="java.util.List getBreakpoints(java.lang.String)" class="freemarker.debug.Debugger" />
	<method signature="void removeBreakpoints(java.lang.String)" class="freemarker.debug.Debugger" />
	<class name="freemarker.template.utility.NormalizeNewlines" />
	<method signature="void &lt;init&gt;()" class="freemarker.template.utility.NormalizeNewlines" />
	<method signature="java.io.Writer getWriter(java.io.Writer,java.util.Map)" class="freemarker.template.utility.NormalizeNewlines" />
	<method signature="void transform(java.io.Reader,java.io.Writer)" class="freemarker.template.utility.NormalizeNewlines" />
	<class name="org.apache.html.dom.HTMLQuoteElementImpl" />
	<method signature="java.lang.String getCite()" class="org.apache.html.dom.HTMLQuoteElementImpl" />
	<method signature="void setCite(java.lang.String)" class="org.apache.html.dom.HTMLQuoteElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLQuoteElementImpl" />
	<class name="org.apache.wml.WMLTableElement" />
	<method signature="void setAlign(java.lang.String)" class="org.apache.wml.WMLTableElement" />
	<method signature="java.lang.String getTitle()" class="org.apache.wml.WMLTableElement" />
	<method signature="java.lang.String getXmlLang()" class="org.apache.wml.WMLTableElement" />
	<method signature="void setXmlLang(java.lang.String)" class="org.apache.wml.WMLTableElement" />
	<method signature="java.lang.String getAlign()" class="org.apache.wml.WMLTableElement" />
	<method signature="int getColumns()" class="org.apache.wml.WMLTableElement" />
	<method signature="void setTitle(java.lang.String)" class="org.apache.wml.WMLTableElement" />
	<method signature="void setColumns(int)" class="org.apache.wml.WMLTableElement" />
	<class name="tourma.views.fullscreen.JFullScreenTeamRank" />
	<method signature="void &lt;init&gt;(int)" class="tourma.views.fullscreen.JFullScreenTeamRank" />
	<method signature="void &lt;init&gt;(int,boolean)" class="tourma.views.fullscreen.JFullScreenTeamRank" />
	<method signature="void &lt;init&gt;(java.net.Socket)" class="tourma.views.fullscreen.JFullScreenTeamRank" />
	<method signature="void &lt;init&gt;(java.net.Socket,boolean)" class="tourma.views.fullscreen.JFullScreenTeamRank" />
	<class name="org.jfree.chart.annotations.AbstractXYAnnotation" />
	<method signature="void setToolTipText(java.lang.String)" class="org.jfree.chart.annotations.AbstractXYAnnotation" />
	<method signature="int hashCode()" class="org.jfree.chart.annotations.AbstractXYAnnotation" />
	<method signature="java.lang.String getURL()" class="org.jfree.chart.annotations.AbstractXYAnnotation" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.annotations.AbstractXYAnnotation" />
	<method signature="void setURL(java.lang.String)" class="org.jfree.chart.annotations.AbstractXYAnnotation" />
	<method signature="java.lang.String getToolTipText()" class="org.jfree.chart.annotations.AbstractXYAnnotation" />
	<method signature="void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.annotations.AbstractXYAnnotation" />
	<class name="org.jfree.chart.annotations.AbstractAnnotation" />
	<method signature="void removeChangeListener(org.jfree.chart.event.AnnotationChangeListener)" class="org.jfree.chart.annotations.AbstractAnnotation" />
	<method signature="boolean hasListener(java.util.EventListener)" class="org.jfree.chart.annotations.AbstractAnnotation" />
	<method signature="void setNotify(boolean)" class="org.jfree.chart.annotations.AbstractAnnotation" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.annotations.AbstractAnnotation" />
	<method signature="boolean getNotify()" class="org.jfree.chart.annotations.AbstractAnnotation" />
	<method signature="void addChangeListener(org.jfree.chart.event.AnnotationChangeListener)" class="org.jfree.chart.annotations.AbstractAnnotation" />
	<class name="org.jfree.chart.renderer.category.IntervalBarRenderer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.category.IntervalBarRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.category.IntervalBarRenderer" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)" class="org.jfree.chart.renderer.category.IntervalBarRenderer" />
	<method signature="org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)" class="org.jfree.chart.renderer.category.IntervalBarRenderer" />
	<class name="javax.xml.stream.XMLResolver" />
	<method signature="java.lang.Object resolveEntity(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="javax.xml.stream.XMLResolver" />
	<class name="org.apache.xml.serialize.Encodings" />
	<method signature="void &lt;init&gt;()" class="org.apache.xml.serialize.Encodings" />
	<class name="org.jfree.chart.event.ChartProgressEvent" />
	<method signature="void setChart(org.jfree.chart.JFreeChart)" class="org.jfree.chart.event.ChartProgressEvent" />
	<method signature="int getType()" class="org.jfree.chart.event.ChartProgressEvent" />
	<method signature="void setType(int)" class="org.jfree.chart.event.ChartProgressEvent" />
	<method signature="org.jfree.chart.JFreeChart getChart()" class="org.jfree.chart.event.ChartProgressEvent" />
	<method signature="void setPercent(int)" class="org.jfree.chart.event.ChartProgressEvent" />
	<method signature="void &lt;init&gt;(java.lang.Object,org.jfree.chart.JFreeChart,int,int)" class="org.jfree.chart.event.ChartProgressEvent" />
	<method signature="int getPercent()" class="org.jfree.chart.event.ChartProgressEvent" />
	<class name="org.apache.xerces.jaxp.DocumentBuilderImpl" />
	<method signature="org.w3c.dom.DOMImplementation getDOMImplementation()" class="org.apache.xerces.jaxp.DocumentBuilderImpl" />
	<method signature="boolean isXIncludeAware()" class="org.apache.xerces.jaxp.DocumentBuilderImpl" />
	<method signature="void reset()" class="org.apache.xerces.jaxp.DocumentBuilderImpl" />
	<method signature="org.w3c.dom.Document parse(org.xml.sax.InputSource)" class="org.apache.xerces.jaxp.DocumentBuilderImpl" />
	<method signature="org.w3c.dom.Document newDocument()" class="org.apache.xerces.jaxp.DocumentBuilderImpl" />
	<method signature="javax.xml.validation.Schema getSchema()" class="org.apache.xerces.jaxp.DocumentBuilderImpl" />
	<method signature="boolean isValidating()" class="org.apache.xerces.jaxp.DocumentBuilderImpl" />
	<method signature="boolean isNamespaceAware()" class="org.apache.xerces.jaxp.DocumentBuilderImpl" />
	<method signature="void setEntityResolver(org.xml.sax.EntityResolver)" class="org.apache.xerces.jaxp.DocumentBuilderImpl" />
	<method signature="void setErrorHandler(org.xml.sax.ErrorHandler)" class="org.apache.xerces.jaxp.DocumentBuilderImpl" />
	<class name="org.apache.xerces.impl.xs.XMLSchemaValidator$KeyRefValueStore" />
	<method signature="void endDocument()" class="org.apache.xerces.impl.xs.XMLSchemaValidator$KeyRefValueStore" />
	<method signature="void &lt;init&gt;(org.apache.xerces.impl.xs.XMLSchemaValidator,org.apache.xerces.impl.xs.identity.KeyRef,org.apache.xerces.impl.xs.XMLSchemaValidator$KeyValueStore)" class="org.apache.xerces.impl.xs.XMLSchemaValidator$KeyRefValueStore" />
	<method signature="void endDocumentFragment()" class="org.apache.xerces.impl.xs.XMLSchemaValidator$KeyRefValueStore" />
	<class name="org.apache.xerces.impl.xs.SubstitutionGroupHandler" />
	<method signature="boolean inSubstitutionGroup(org.apache.xerces.impl.xs.XSElementDecl,org.apache.xerces.impl.xs.XSElementDecl)" class="org.apache.xerces.impl.xs.SubstitutionGroupHandler" />
	<method signature="org.apache.xerces.impl.xs.XSElementDecl[] getSubstitutionGroup(org.apache.xerces.impl.xs.XSElementDecl)" class="org.apache.xerces.impl.xs.SubstitutionGroupHandler" />
	<method signature="org.apache.xerces.impl.xs.XSElementDecl getMatchingElemDecl(org.apache.xerces.xni.QName,org.apache.xerces.impl.xs.XSElementDecl)" class="org.apache.xerces.impl.xs.SubstitutionGroupHandler" />
	<method signature="void reset()" class="org.apache.xerces.impl.xs.SubstitutionGroupHandler" />
	<method signature="void addSubstitutionGroup(org.apache.xerces.impl.xs.XSElementDecl[])" class="org.apache.xerces.impl.xs.SubstitutionGroupHandler" />
	<method signature="void &lt;init&gt;(org.apache.xerces.impl.xs.XSElementDeclHelper)" class="org.apache.xerces.impl.xs.SubstitutionGroupHandler" />
	<class name="org.jfree.chart.ClipPath" />
	<method signature="java.awt.Composite getComposite()" class="org.jfree.chart.ClipPath" />
	<method signature="boolean isDrawPath()" class="org.jfree.chart.ClipPath" />
	<method signature="double[] getXValue()" class="org.jfree.chart.ClipPath" />
	<method signature="boolean isClip()" class="org.jfree.chart.ClipPath" />
	<method signature="java.awt.geom.GeneralPath draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis)" class="org.jfree.chart.ClipPath" />
	<method signature="void setDrawPaint(java.awt.Paint)" class="org.jfree.chart.ClipPath" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.ClipPath" />
	<method signature="void setComposite(java.awt.Composite)" class="org.jfree.chart.ClipPath" />
	<method signature="void &lt;init&gt;(double[],double[],boolean,boolean,java.awt.Paint,java.awt.Paint,java.awt.Stroke,java.awt.Composite)" class="org.jfree.chart.ClipPath" />
	<method signature="java.awt.Stroke getDrawStroke()" class="org.jfree.chart.ClipPath" />
	<method signature="void setDrawStroke(java.awt.Stroke)" class="org.jfree.chart.ClipPath" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.ClipPath" />
	<method signature="double[] getYValue()" class="org.jfree.chart.ClipPath" />
	<method signature="void &lt;init&gt;(double[],double[])" class="org.jfree.chart.ClipPath" />
	<method signature="void setYValue(double[])" class="org.jfree.chart.ClipPath" />
	<method signature="java.awt.Paint getFillPaint()" class="org.jfree.chart.ClipPath" />
	<method signature="java.awt.Paint getDrawPaint()" class="org.jfree.chart.ClipPath" />
	<method signature="void setFillPath(boolean)" class="org.jfree.chart.ClipPath" />
	<method signature="void setFillPaint(java.awt.Paint)" class="org.jfree.chart.ClipPath" />
	<method signature="void setClip(boolean)" class="org.jfree.chart.ClipPath" />
	<method signature="boolean isFillPath()" class="org.jfree.chart.ClipPath" />
	<method signature="void setXValue(double[])" class="org.jfree.chart.ClipPath" />
	<method signature="void &lt;init&gt;(double[],double[],boolean,boolean,boolean)" class="org.jfree.chart.ClipPath" />
	<method signature="void setDrawPath(boolean)" class="org.jfree.chart.ClipPath" />
	<method signature="java.awt.geom.GeneralPath generateClipPath(java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis)" class="org.jfree.chart.ClipPath" />
	<class name="freemarker.cache.StringTemplateLoader" />
	<method signature="void &lt;init&gt;()" class="freemarker.cache.StringTemplateLoader" />
	<method signature="java.lang.Object findTemplateSource(java.lang.String)" class="freemarker.cache.StringTemplateLoader" />
	<method signature="void closeTemplateSource(java.lang.Object)" class="freemarker.cache.StringTemplateLoader" />
	<method signature="long getLastModified(java.lang.Object)" class="freemarker.cache.StringTemplateLoader" />
	<method signature="void putTemplate(java.lang.String,java.lang.String)" class="freemarker.cache.StringTemplateLoader" />
	<method signature="java.io.Reader getReader(java.lang.Object,java.lang.String)" class="freemarker.cache.StringTemplateLoader" />
	<method signature="void putTemplate(java.lang.String,java.lang.String,long)" class="freemarker.cache.StringTemplateLoader" />
	<class name="org.jfree.data.general.DefaultKeyedValues2DDataset" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.general.DefaultKeyedValues2DDataset" />
	<class name="tourma.data.GroupPoints" />
	<method signature="void setDrawPoints(int)" class="tourma.data.GroupPoints" />
	<method signature="boolean equals(java.lang.Object)" class="tourma.data.GroupPoints" />
	<method signature="int getVictoryPoints()" class="tourma.data.GroupPoints" />
	<method signature="int getLossPoints()" class="tourma.data.GroupPoints" />
	<method signature="void &lt;init&gt;()" class="tourma.data.GroupPoints" />
	<method signature="void setLossPoints(int)" class="tourma.data.GroupPoints" />
	<method signature="void setVictoryPoints(int)" class="tourma.data.GroupPoints" />
	<method signature="int getDrawPoints()" class="tourma.data.GroupPoints" />
	<class name="org.apache.commons.lang3.event.EventListenerSupport$ProxyInvocationHandler" />
	<method signature="java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])" class="org.apache.commons.lang3.event.EventListenerSupport$ProxyInvocationHandler" />
	<class name="org.apache.wml.dom.WMLTdElementImpl" />
	<method signature="java.lang.String getXmlLang()" class="org.apache.wml.dom.WMLTdElementImpl" />
	<method signature="void setXmlLang(java.lang.String)" class="org.apache.wml.dom.WMLTdElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.wml.dom.WMLDocumentImpl,java.lang.String)" class="org.apache.wml.dom.WMLTdElementImpl" />
	<method signature="java.lang.String getId()" class="org.apache.wml.dom.WMLTdElementImpl" />
	<method signature="java.lang.String getClassName()" class="org.apache.wml.dom.WMLTdElementImpl" />
	<method signature="void setClassName(java.lang.String)" class="org.apache.wml.dom.WMLTdElementImpl" />
	<method signature="void setId(java.lang.String)" class="org.apache.wml.dom.WMLTdElementImpl" />
	<class name="teamma.tableModel.MjtTeamStars" />
	<method signature="boolean isCellEditable(int,int)" class="teamma.tableModel.MjtTeamStars" />
	<method signature="java.awt.Component getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)" class="teamma.tableModel.MjtTeamStars" />
	<method signature="void &lt;init&gt;(teamma.data.Roster)" class="teamma.tableModel.MjtTeamStars" />
	<method signature="int getRowCount()" class="teamma.tableModel.MjtTeamStars" />
	<method signature="java.lang.String getColumnName(int)" class="teamma.tableModel.MjtTeamStars" />
	<method signature="java.lang.Class getColumnClass(int)" class="teamma.tableModel.MjtTeamStars" />
	<method signature="java.lang.Object getValueAt(int,int)" class="teamma.tableModel.MjtTeamStars" />
	<method signature="int getColumnCount()" class="teamma.tableModel.MjtTeamStars" />
	<class name="org.jdom2.JDOMException" />
	<method signature="void &lt;init&gt;()" class="org.jdom2.JDOMException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Throwable)" class="org.jdom2.JDOMException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jdom2.JDOMException" />
	<class name="org.jfree.base.log.PadMessage" />
	<method signature="java.lang.String toString()" class="org.jfree.base.log.PadMessage" />
	<method signature="void &lt;init&gt;(java.lang.Object,int)" class="org.jfree.base.log.PadMessage" />
	<class name="freemarker.ext.jsp.FreemarkerTag" />
	<method signature="int doStartTag()" class="freemarker.ext.jsp.FreemarkerTag" />
	<method signature="void setBodyContent(javax.servlet.jsp.tagext.BodyContent)" class="freemarker.ext.jsp.FreemarkerTag" />
	<method signature="void doInitBody()" class="freemarker.ext.jsp.FreemarkerTag" />
	<method signature="void setPageContext(javax.servlet.jsp.PageContext)" class="freemarker.ext.jsp.FreemarkerTag" />
	<method signature="boolean getCaching()" class="freemarker.ext.jsp.FreemarkerTag" />
	<method signature="void &lt;init&gt;()" class="freemarker.ext.jsp.FreemarkerTag" />
	<method signature="void setName(java.lang.String)" class="freemarker.ext.jsp.FreemarkerTag" />
	<method signature="void setCaching(boolean)" class="freemarker.ext.jsp.FreemarkerTag" />
	<method signature="int doEndTag()" class="freemarker.ext.jsp.FreemarkerTag" />
	<method signature="void release()" class="freemarker.ext.jsp.FreemarkerTag" />
	<method signature="javax.servlet.jsp.tagext.Tag getParent()" class="freemarker.ext.jsp.FreemarkerTag" />
	<method signature="void setParent(javax.servlet.jsp.tagext.Tag)" class="freemarker.ext.jsp.FreemarkerTag" />
	<method signature="int doAfterBody()" class="freemarker.ext.jsp.FreemarkerTag" />
	<class name="com.google.zxing.client.result.WifiParsedResult" />
	<method signature="java.lang.String getPassword()" class="com.google.zxing.client.result.WifiParsedResult" />
	<method signature="boolean isHidden()" class="com.google.zxing.client.result.WifiParsedResult" />
	<method signature="java.lang.String getDisplayResult()" class="com.google.zxing.client.result.WifiParsedResult" />
	<method signature="java.lang.String getSsid()" class="com.google.zxing.client.result.WifiParsedResult" />
	<method signature="java.lang.String getNetworkEncryption()" class="com.google.zxing.client.result.WifiParsedResult" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String)" class="com.google.zxing.client.result.WifiParsedResult" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,boolean)" class="com.google.zxing.client.result.WifiParsedResult" />
	<class name="org.w3c.dom.traversal.DocumentTraversal" />
	<method signature="org.w3c.dom.traversal.TreeWalker createTreeWalker(org.w3c.dom.Node,int,org.w3c.dom.traversal.NodeFilter,boolean)" class="org.w3c.dom.traversal.DocumentTraversal" />
	<method signature="org.w3c.dom.traversal.NodeIterator createNodeIterator(org.w3c.dom.Node,int,org.w3c.dom.traversal.NodeFilter,boolean)" class="org.w3c.dom.traversal.DocumentTraversal" />
	<class name="org.jfree.data.xy.AbstractIntervalXYDataset" />
	<method signature="double getEndYValue(int,int)" class="org.jfree.data.xy.AbstractIntervalXYDataset" />
	<method signature="double getEndXValue(int,int)" class="org.jfree.data.xy.AbstractIntervalXYDataset" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.xy.AbstractIntervalXYDataset" />
	<method signature="double getStartYValue(int,int)" class="org.jfree.data.xy.AbstractIntervalXYDataset" />
	<method signature="double getStartXValue(int,int)" class="org.jfree.data.xy.AbstractIntervalXYDataset" />
	<class name="org.w3c.dom.ls.LSProgressEvent" />
	<method signature="int getPosition()" class="org.w3c.dom.ls.LSProgressEvent" />
	<method signature="org.w3c.dom.ls.LSInput getInput()" class="org.w3c.dom.ls.LSProgressEvent" />
	<method signature="int getTotalSize()" class="org.w3c.dom.ls.LSProgressEvent" />
	<class name="org.apache.commons.lang3.exception.ContextedException" />
	<method signature="java.lang.Object getFirstContextValue(java.lang.String)" class="org.apache.commons.lang3.exception.ContextedException" />
	<method signature="java.lang.String getFormattedExceptionMessage(java.lang.String)" class="org.apache.commons.lang3.exception.ContextedException" />
	<method signature="java.util.List getContextValues(java.lang.String)" class="org.apache.commons.lang3.exception.ContextedException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Throwable,org.apache.commons.lang3.exception.ExceptionContext)" class="org.apache.commons.lang3.exception.ContextedException" />
	<method signature="java.lang.String getRawMessage()" class="org.apache.commons.lang3.exception.ContextedException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Throwable)" class="org.apache.commons.lang3.exception.ContextedException" />
	<method signature="org.apache.commons.lang3.exception.ExceptionContext setContextValue(java.lang.String,java.lang.Object)" class="org.apache.commons.lang3.exception.ContextedException" />
	<method signature="java.lang.String getMessage()" class="org.apache.commons.lang3.exception.ContextedException" />
	<method signature="org.apache.commons.lang3.exception.ExceptionContext addContextValue(java.lang.String,java.lang.Object)" class="org.apache.commons.lang3.exception.ContextedException" />
	<method signature="java.util.Set getContextLabels()" class="org.apache.commons.lang3.exception.ContextedException" />
	<method signature="org.apache.commons.lang3.exception.ContextedException addContextValue(java.lang.String,java.lang.Object)" class="org.apache.commons.lang3.exception.ContextedException" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.exception.ContextedException" />
	<method signature="void &lt;init&gt;(java.lang.Throwable)" class="org.apache.commons.lang3.exception.ContextedException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.apache.commons.lang3.exception.ContextedException" />
	<method signature="org.apache.commons.lang3.exception.ContextedException setContextValue(java.lang.String,java.lang.Object)" class="org.apache.commons.lang3.exception.ContextedException" />
	<method signature="java.util.List getContextEntries()" class="org.apache.commons.lang3.exception.ContextedException" />
	<class name="javax.xml.bind.Marshaller" />
	<method signature="void setEventHandler(javax.xml.bind.ValidationEventHandler)" class="javax.xml.bind.Marshaller" />
	<method signature="void marshal(java.lang.Object,java.io.OutputStream)" class="javax.xml.bind.Marshaller" />
	<method signature="void marshal(java.lang.Object,javax.xml.transform.Result)" class="javax.xml.bind.Marshaller" />
	<method signature="void marshal(java.lang.Object,org.xml.sax.ContentHandler)" class="javax.xml.bind.Marshaller" />
	<method signature="javax.xml.bind.ValidationEventHandler getEventHandler()" class="javax.xml.bind.Marshaller" />
	<method signature="void marshal(java.lang.Object,java.io.Writer)" class="javax.xml.bind.Marshaller" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="javax.xml.bind.Marshaller" />
	<method signature="org.w3c.dom.Node getNode(java.lang.Object)" class="javax.xml.bind.Marshaller" />
	<method signature="void marshal(java.lang.Object,org.w3c.dom.Node)" class="javax.xml.bind.Marshaller" />
	<method signature="java.lang.Object getProperty(java.lang.String)" class="javax.xml.bind.Marshaller" />
	<class name="com.google.zxing.qrcode.decoder.Mode" />
	<method signature="com.google.zxing.qrcode.decoder.Mode forBits(int)" class="com.google.zxing.qrcode.decoder.Mode" />
	<method signature="com.google.zxing.qrcode.decoder.Mode valueOf(java.lang.String)" class="com.google.zxing.qrcode.decoder.Mode" />
	<method signature="com.google.zxing.qrcode.decoder.Mode[] values()" class="com.google.zxing.qrcode.decoder.Mode" />
	<method signature="int getBits()" class="com.google.zxing.qrcode.decoder.Mode" />
	<method signature="int getCharacterCountBits(com.google.zxing.qrcode.decoder.Version)" class="com.google.zxing.qrcode.decoder.Mode" />
	<class name="javax.annotation.concurrent.GuardedBy" />
	<method signature="java.lang.String value()" class="javax.annotation.concurrent.GuardedBy" />
	<class name="org.jfree.data.category.CategoryToPieDataset" />
	<method signature="int getIndex(java.lang.Comparable)" class="org.jfree.data.category.CategoryToPieDataset" />
	<method signature="java.lang.Number getValue(java.lang.Comparable)" class="org.jfree.data.category.CategoryToPieDataset" />
	<method signature="void datasetChanged(org.jfree.data.general.DatasetChangeEvent)" class="org.jfree.data.category.CategoryToPieDataset" />
	<method signature="int getExtractIndex()" class="org.jfree.data.category.CategoryToPieDataset" />
	<method signature="java.util.List getKeys()" class="org.jfree.data.category.CategoryToPieDataset" />
	<method signature="java.lang.Number getValue(int)" class="org.jfree.data.category.CategoryToPieDataset" />
	<method signature="int getItemCount()" class="org.jfree.data.category.CategoryToPieDataset" />
	<method signature="org.jfree.data.category.CategoryDataset getUnderlyingDataset()" class="org.jfree.data.category.CategoryToPieDataset" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.category.CategoryToPieDataset" />
	<method signature="void &lt;init&gt;(org.jfree.data.category.CategoryDataset,org.jfree.util.TableOrder,int)" class="org.jfree.data.category.CategoryToPieDataset" />
	<method signature="java.lang.Comparable getKey(int)" class="org.jfree.data.category.CategoryToPieDataset" />
	<method signature="org.jfree.util.TableOrder getExtractType()" class="org.jfree.data.category.CategoryToPieDataset" />
	<class name="org.jfree.chart.encoders.ImageEncoderFactory" />
	<method signature="void setImageEncoder(java.lang.String,java.lang.String)" class="org.jfree.chart.encoders.ImageEncoderFactory" />
	<method signature="org.jfree.chart.encoders.ImageEncoder newInstance(java.lang.String,float,boolean)" class="org.jfree.chart.encoders.ImageEncoderFactory" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.encoders.ImageEncoderFactory" />
	<method signature="org.jfree.chart.encoders.ImageEncoder newInstance(java.lang.String)" class="org.jfree.chart.encoders.ImageEncoderFactory" />
	<method signature="org.jfree.chart.encoders.ImageEncoder newInstance(java.lang.String,float)" class="org.jfree.chart.encoders.ImageEncoderFactory" />
	<method signature="org.jfree.chart.encoders.ImageEncoder newInstance(java.lang.String,boolean)" class="org.jfree.chart.encoders.ImageEncoderFactory" />
	<class name="freemarker.ext.servlet.HttpRequestParametersHashModel" />
	<method signature="int size()" class="freemarker.ext.servlet.HttpRequestParametersHashModel" />
	<method signature="boolean isEmpty()" class="freemarker.ext.servlet.HttpRequestParametersHashModel" />
	<method signature="freemarker.template.TemplateCollectionModel keys()" class="freemarker.ext.servlet.HttpRequestParametersHashModel" />
	<method signature="freemarker.template.TemplateCollectionModel values()" class="freemarker.ext.servlet.HttpRequestParametersHashModel" />
	<method signature="void &lt;init&gt;(javax.servlet.http.HttpServletRequest)" class="freemarker.ext.servlet.HttpRequestParametersHashModel" />
	<method signature="freemarker.template.TemplateModel get(java.lang.String)" class="freemarker.ext.servlet.HttpRequestParametersHashModel" />
	<class name="org.jfree.chart.renderer.category.BarRenderer3D" />
	<method signature="void drawOutline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D)" class="org.jfree.chart.renderer.category.BarRenderer3D" />
	<method signature="void setWallPaint(java.awt.Paint)" class="org.jfree.chart.renderer.category.BarRenderer3D" />
	<method signature="void drawBackground(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D)" class="org.jfree.chart.renderer.category.BarRenderer3D" />
	<method signature="void drawRangeGridline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double)" class="org.jfree.chart.renderer.category.BarRenderer3D" />
	<method signature="void drawRangeLine(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,java.awt.Paint,java.awt.Stroke)" class="org.jfree.chart.renderer.category.BarRenderer3D" />
	<method signature="void drawDomainGridline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,double)" class="org.jfree.chart.renderer.category.BarRenderer3D" />
	<method signature="double getXOffset()" class="org.jfree.chart.renderer.category.BarRenderer3D" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.category.BarRenderer3D" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.category.BarRenderer3D" />
	<method signature="org.jfree.chart.renderer.category.CategoryItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.renderer.category.BarRenderer3D" />
	<method signature="java.awt.Paint getWallPaint()" class="org.jfree.chart.renderer.category.BarRenderer3D" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)" class="org.jfree.chart.renderer.category.BarRenderer3D" />
	<method signature="double getYOffset()" class="org.jfree.chart.renderer.category.BarRenderer3D" />
	<method signature="void &lt;init&gt;(double,double)" class="org.jfree.chart.renderer.category.BarRenderer3D" />
	<method signature="void drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)" class="org.jfree.chart.renderer.category.BarRenderer3D" />
	<class name="org.apache.xerces.dom.DOMOutputImpl" />
	<method signature="java.lang.String getSystemId()" class="org.apache.xerces.dom.DOMOutputImpl" />
	<method signature="void setCharacterStream(java.io.Writer)" class="org.apache.xerces.dom.DOMOutputImpl" />
	<method signature="void setSystemId(java.lang.String)" class="org.apache.xerces.dom.DOMOutputImpl" />
	<method signature="java.lang.String getEncoding()" class="org.apache.xerces.dom.DOMOutputImpl" />
	<method signature="void setEncoding(java.lang.String)" class="org.apache.xerces.dom.DOMOutputImpl" />
	<method signature="void setByteStream(java.io.OutputStream)" class="org.apache.xerces.dom.DOMOutputImpl" />
	<method signature="java.io.OutputStream getByteStream()" class="org.apache.xerces.dom.DOMOutputImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.dom.DOMOutputImpl" />
	<method signature="java.io.Writer getCharacterStream()" class="org.apache.xerces.dom.DOMOutputImpl" />
	<class name="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
	<method signature="java.lang.Boolean getShapesVisible()" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
	<method signature="void setBaseShapesFilled(boolean)" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
	<method signature="java.lang.Boolean getSeriesShapesVisible(int)" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
	<method signature="org.jfree.chart.LegendItem getLegendItem(int,int)" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
	<method signature="java.lang.Boolean getLinesVisible()" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
	<method signature="void setUseFillPaint(boolean)" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
	<method signature="boolean getBaseLinesVisible()" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
	<method signature="void setSeriesShapesFilled(int,java.lang.Boolean)" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
	<method signature="boolean getBaseShapesVisible()" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
	<method signature="boolean getItemShapeFilled(int,int)" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
	<method signature="java.lang.Boolean getSeriesShapesFilled(int)" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
	<method signature="java.awt.Shape getLegendLine()" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
	<method signature="boolean getUseFillPaint()" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
	<method signature="void setShapesVisible(boolean)" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
	<method signature="boolean getUseOutlinePaint()" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
	<method signature="boolean getDrawSeriesLineAsPath()" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
	<method signature="void setBaseShapesVisible(boolean)" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
	<method signature="java.lang.Boolean getSeriesLinesVisible(int)" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
	<method signature="void setLinesVisible(boolean)" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
	<method signature="void setSeriesLinesVisible(int,boolean)" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
	<method signature="void setLegendLine(java.awt.Shape)" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
	<method signature="void setShapesFilled(java.lang.Boolean)" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
	<method signature="void setSeriesShapesVisible(int,java.lang.Boolean)" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
	<method signature="void setDrawSeriesLineAsPath(boolean)" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
	<method signature="int getPassCount()" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
	<method signature="void setShapesVisible(java.lang.Boolean)" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
	<method signature="void setDrawOutlines(boolean)" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
	<method signature="void setSeriesShapesFilled(int,boolean)" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
	<method signature="boolean getItemShapeVisible(int,int)" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
	<method signature="void &lt;init&gt;(boolean,boolean)" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
	<method signature="org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
	<method signature="void setUseOutlinePaint(boolean)" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
	<method signature="void setLinesVisible(java.lang.Boolean)" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
	<method signature="void setSeriesLinesVisible(int,java.lang.Boolean)" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
	<method signature="void setSeriesShapesVisible(int,boolean)" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
	<method signature="void setShapesFilled(boolean)" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
	<method signature="boolean getDrawOutlines()" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
	<method signature="boolean getItemLineVisible(int,int)" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
	<method signature="boolean getBaseShapesFilled()" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
	<method signature="void setBaseLinesVisible(boolean)" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
	<class name="edu.umd.cs.findbugs.annotations.OverrideMustInvoke" />
	<method signature="edu.umd.cs.findbugs.annotations.When value()" class="edu.umd.cs.findbugs.annotations.OverrideMustInvoke" />
	<class name="org.apache.commons.lang3.SystemUtils" />
	<method signature="java.io.File getUserHome()" class="org.apache.commons.lang3.SystemUtils" />
	<method signature="java.io.File getJavaIoTmpDir()" class="org.apache.commons.lang3.SystemUtils" />
	<method signature="java.io.File getJavaHome()" class="org.apache.commons.lang3.SystemUtils" />
	<method signature="boolean isJavaVersionAtLeast(org.apache.commons.lang3.JavaVersion)" class="org.apache.commons.lang3.SystemUtils" />
	<method signature="boolean isJavaAwtHeadless()" class="org.apache.commons.lang3.SystemUtils" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.SystemUtils" />
	<method signature="java.io.File getUserDir()" class="org.apache.commons.lang3.SystemUtils" />
	<class name="org.xml.sax.SAXException" />
	<method signature="java.lang.Exception getException()" class="org.xml.sax.SAXException" />
	<method signature="void &lt;init&gt;(java.lang.Exception)" class="org.xml.sax.SAXException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Exception)" class="org.xml.sax.SAXException" />
	<method signature="void &lt;init&gt;()" class="org.xml.sax.SAXException" />
	<method signature="java.lang.String toString()" class="org.xml.sax.SAXException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.xml.sax.SAXException" />
	<method signature="java.lang.String getMessage()" class="org.xml.sax.SAXException" />
	<class name="org.apache.xerces.impl.xs.opti.SchemaDOMParser" />
	<method signature="void setEntityResolver(org.apache.xerces.xni.parser.XMLEntityResolver)" class="org.apache.xerces.impl.xs.opti.SchemaDOMParser" />
	<method signature="void processingInstruction(java.lang.String,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.SchemaDOMParser" />
	<method signature="void reset()" class="org.apache.xerces.impl.xs.opti.SchemaDOMParser" />
	<method signature="void endElement(org.apache.xerces.xni.QName,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.SchemaDOMParser" />
	<method signature="boolean getFeature(java.lang.String)" class="org.apache.xerces.impl.xs.opti.SchemaDOMParser" />
	<method signature="void parse(org.apache.xerces.xni.parser.XMLInputSource)" class="org.apache.xerces.impl.xs.opti.SchemaDOMParser" />
	<method signature="void resetNodePool()" class="org.apache.xerces.impl.xs.opti.SchemaDOMParser" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="org.apache.xerces.impl.xs.opti.SchemaDOMParser" />
	<method signature="void &lt;init&gt;(org.apache.xerces.xni.parser.XMLParserConfiguration)" class="org.apache.xerces.impl.xs.opti.SchemaDOMParser" />
	<method signature="void startCDATA(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.SchemaDOMParser" />
	<method signature="void ignorableWhitespace(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.SchemaDOMParser" />
	<method signature="void endDocument(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.SchemaDOMParser" />
	<method signature="void startElement(org.apache.xerces.xni.QName,org.apache.xerces.xni.XMLAttributes,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.SchemaDOMParser" />
	<method signature="void endCDATA(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.SchemaDOMParser" />
	<method signature="void startDocument(org.apache.xerces.xni.XMLLocator,java.lang.String,org.apache.xerces.xni.NamespaceContext,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.SchemaDOMParser" />
	<method signature="void comment(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.SchemaDOMParser" />
	<method signature="org.w3c.dom.Document getDocument()" class="org.apache.xerces.impl.xs.opti.SchemaDOMParser" />
	<method signature="void emptyElement(org.apache.xerces.xni.QName,org.apache.xerces.xni.XMLAttributes,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.SchemaDOMParser" />
	<method signature="void characters(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.xs.opti.SchemaDOMParser" />
	<method signature="void setFeature(java.lang.String,boolean)" class="org.apache.xerces.impl.xs.opti.SchemaDOMParser" />
	<method signature="java.lang.Object getProperty(java.lang.String)" class="org.apache.xerces.impl.xs.opti.SchemaDOMParser" />
	<class name="org.apache.xerces.xs.XSElementDeclaration" />
	<method signature="short getSubstitutionGroupExclusions()" class="org.apache.xerces.xs.XSElementDeclaration" />
	<method signature="boolean getAbstract()" class="org.apache.xerces.xs.XSElementDeclaration" />
	<method signature="boolean getNillable()" class="org.apache.xerces.xs.XSElementDeclaration" />
	<method signature="org.apache.xerces.xs.XSTypeDefinition getTypeDefinition()" class="org.apache.xerces.xs.XSElementDeclaration" />
	<method signature="short getDisallowedSubstitutions()" class="org.apache.xerces.xs.XSElementDeclaration" />
	<method signature="short getScope()" class="org.apache.xerces.xs.XSElementDeclaration" />
	<method signature="org.apache.xerces.xs.ShortList getItemValueTypes()" class="org.apache.xerces.xs.XSElementDeclaration" />
	<method signature="short getConstraintType()" class="org.apache.xerces.xs.XSElementDeclaration" />
	<method signature="boolean isSubstitutionGroupExclusion(short)" class="org.apache.xerces.xs.XSElementDeclaration" />
	<method signature="org.apache.xerces.xs.XSAnnotation getAnnotation()" class="org.apache.xerces.xs.XSElementDeclaration" />
	<method signature="org.apache.xerces.xs.XSObjectList getAnnotations()" class="org.apache.xerces.xs.XSElementDeclaration" />
	<method signature="boolean isDisallowedSubstitution(short)" class="org.apache.xerces.xs.XSElementDeclaration" />
	<method signature="org.apache.xerces.xs.XSNamedMap getIdentityConstraints()" class="org.apache.xerces.xs.XSElementDeclaration" />
	<method signature="org.apache.xerces.xs.XSValue getValueConstraintValue()" class="org.apache.xerces.xs.XSElementDeclaration" />
	<method signature="org.apache.xerces.xs.XSElementDeclaration getSubstitutionGroupAffiliation()" class="org.apache.xerces.xs.XSElementDeclaration" />
	<method signature="java.lang.String getConstraintValue()" class="org.apache.xerces.xs.XSElementDeclaration" />
	<method signature="java.lang.Object getActualVC()" class="org.apache.xerces.xs.XSElementDeclaration" />
	<method signature="org.apache.xerces.xs.XSComplexTypeDefinition getEnclosingCTDefinition()" class="org.apache.xerces.xs.XSElementDeclaration" />
	<method signature="short getActualVCType()" class="org.apache.xerces.xs.XSElementDeclaration" />
	<class name="com.google.zxing.Writer" />
	<method signature="com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int)" class="com.google.zxing.Writer" />
	<method signature="com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map)" class="com.google.zxing.Writer" />
	<class name="org.jfree.chart.panel.CrosshairOverlay" />
	<method signature="java.util.List getDomainCrosshairs()" class="org.jfree.chart.panel.CrosshairOverlay" />
	<method signature="void removeRangeCrosshair(org.jfree.chart.plot.Crosshair)" class="org.jfree.chart.panel.CrosshairOverlay" />
	<method signature="java.util.List getRangeCrosshairs()" class="org.jfree.chart.panel.CrosshairOverlay" />
	<method signature="void propertyChange(java.beans.PropertyChangeEvent)" class="org.jfree.chart.panel.CrosshairOverlay" />
	<method signature="void paintOverlay(java.awt.Graphics2D,org.jfree.chart.ChartPanel)" class="org.jfree.chart.panel.CrosshairOverlay" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.panel.CrosshairOverlay" />
	<method signature="void clearRangeCrosshairs()" class="org.jfree.chart.panel.CrosshairOverlay" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.panel.CrosshairOverlay" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.panel.CrosshairOverlay" />
	<method signature="void clearDomainCrosshairs()" class="org.jfree.chart.panel.CrosshairOverlay" />
	<method signature="void removeDomainCrosshair(org.jfree.chart.plot.Crosshair)" class="org.jfree.chart.panel.CrosshairOverlay" />
	<method signature="void addRangeCrosshair(org.jfree.chart.plot.Crosshair)" class="org.jfree.chart.panel.CrosshairOverlay" />
	<method signature="void addDomainCrosshair(org.jfree.chart.plot.Crosshair)" class="org.jfree.chart.panel.CrosshairOverlay" />
	<class name="teamma.data.StarPlayer" />
	<method signature="java.lang.String getName()" class="teamma.data.StarPlayer" />
	<method signature="void setAgility(int)" class="teamma.data.StarPlayer" />
	<method signature="int getSkillCount()" class="teamma.data.StarPlayer" />
	<method signature="void addSkill(teamma.data.Skill)" class="teamma.data.StarPlayer" />
	<method signature="void setLimit(int)" class="teamma.data.StarPlayer" />
	<method signature="int getCost()" class="teamma.data.StarPlayer" />
	<method signature="void setStrength(int)" class="teamma.data.StarPlayer" />
	<method signature="void setMovement(int)" class="teamma.data.StarPlayer" />
	<method signature="void addRoster(teamma.data.RosterType)" class="teamma.data.StarPlayer" />
	<method signature="java.lang.String getPosition()" class="teamma.data.StarPlayer" />
	<method signature="int getLimit()" class="teamma.data.StarPlayer" />
	<method signature="int getRosterCount()" class="teamma.data.StarPlayer" />
	<method signature="void setName(java.lang.String)" class="teamma.data.StarPlayer" />
	<method signature="teamma.data.RosterType getRoster(int)" class="teamma.data.StarPlayer" />
	<method signature="int getArmor()" class="teamma.data.StarPlayer" />
	<method signature="void setPosition(java.lang.String)" class="teamma.data.StarPlayer" />
	<method signature="void setCost(int)" class="teamma.data.StarPlayer" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="teamma.data.StarPlayer" />
	<method signature="teamma.data.Skill getSkill(int)" class="teamma.data.StarPlayer" />
	<method signature="void setArmor(int)" class="teamma.data.StarPlayer" />
	<method signature="int getStrength()" class="teamma.data.StarPlayer" />
	<method signature="int getAgility()" class="teamma.data.StarPlayer" />
	<method signature="int getMovement()" class="teamma.data.StarPlayer" />
	<class name="org.apache.xerces.impl.dtd.XMLEntityDecl" />
	<method signature="void clear()" class="org.apache.xerces.impl.dtd.XMLEntityDecl" />
	<method signature="void setValues(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)" class="org.apache.xerces.impl.dtd.XMLEntityDecl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dtd.XMLEntityDecl" />
	<method signature="void setValues(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)" class="org.apache.xerces.impl.dtd.XMLEntityDecl" />
	<class name="org.jfree.chart.axis.CategoryLabelPositions" />
	<method signature="org.jfree.chart.axis.CategoryLabelPositions replaceTopPosition(org.jfree.chart.axis.CategoryLabelPositions,org.jfree.chart.axis.CategoryLabelPosition)" class="org.jfree.chart.axis.CategoryLabelPositions" />
	<method signature="int hashCode()" class="org.jfree.chart.axis.CategoryLabelPositions" />
	<method signature="org.jfree.chart.axis.CategoryLabelPositions replaceBottomPosition(org.jfree.chart.axis.CategoryLabelPositions,org.jfree.chart.axis.CategoryLabelPosition)" class="org.jfree.chart.axis.CategoryLabelPositions" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.axis.CategoryLabelPositions" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.axis.CategoryLabelPositions" />
	<method signature="org.jfree.chart.axis.CategoryLabelPositions replaceRightPosition(org.jfree.chart.axis.CategoryLabelPositions,org.jfree.chart.axis.CategoryLabelPosition)" class="org.jfree.chart.axis.CategoryLabelPositions" />
	<method signature="org.jfree.chart.axis.CategoryLabelPosition getLabelPosition(org.jfree.ui.RectangleEdge)" class="org.jfree.chart.axis.CategoryLabelPositions" />
	<method signature="org.jfree.chart.axis.CategoryLabelPositions createUpRotationLabelPositions(double)" class="org.jfree.chart.axis.CategoryLabelPositions" />
	<method signature="org.jfree.chart.axis.CategoryLabelPositions createDownRotationLabelPositions(double)" class="org.jfree.chart.axis.CategoryLabelPositions" />
	<method signature="org.jfree.chart.axis.CategoryLabelPositions replaceLeftPosition(org.jfree.chart.axis.CategoryLabelPositions,org.jfree.chart.axis.CategoryLabelPosition)" class="org.jfree.chart.axis.CategoryLabelPositions" />
	<method signature="void &lt;init&gt;(org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition)" class="org.jfree.chart.axis.CategoryLabelPositions" />
	<class name="javax.xml.xpath.XPathException" />
	<method signature="void &lt;init&gt;(java.lang.Throwable)" class="javax.xml.xpath.XPathException" />
	<method signature="void printStackTrace(java.io.PrintWriter)" class="javax.xml.xpath.XPathException" />
	<method signature="void printStackTrace(java.io.PrintStream)" class="javax.xml.xpath.XPathException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="javax.xml.xpath.XPathException" />
	<method signature="java.lang.Throwable getCause()" class="javax.xml.xpath.XPathException" />
	<method signature="void printStackTrace()" class="javax.xml.xpath.XPathException" />
	<class name="org.apache.xerces.xni.parser.XMLDTDFilter" />
	<class name="org.jfree.chart.plot.SeriesRenderingOrder" />
	<method signature="int hashCode()" class="org.jfree.chart.plot.SeriesRenderingOrder" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.plot.SeriesRenderingOrder" />
	<method signature="java.lang.String toString()" class="org.jfree.chart.plot.SeriesRenderingOrder" />
	<class name="teamma.views.report.JdgPrintableRoster" />
	<method signature="void &lt;init&gt;(java.awt.Frame,boolean,teamma.data.Roster,tourma.data.Coach,boolean)" class="teamma.views.report.JdgPrintableRoster" />
	<class name="fi.iki.elonen.NanoHTTPD$TempFile" />
	<method signature="java.lang.String getName()" class="fi.iki.elonen.NanoHTTPD$TempFile" />
	<method signature="void delete()" class="fi.iki.elonen.NanoHTTPD$TempFile" />
	<method signature="java.io.OutputStream open()" class="fi.iki.elonen.NanoHTTPD$TempFile" />
	<class name="org.apache.xerces.dom.DeepNodeListImpl" />
	<method signature="org.w3c.dom.Node item(int)" class="org.apache.xerces.dom.DeepNodeListImpl" />
	<method signature="void &lt;init&gt;(org.apache.xerces.dom.NodeImpl,java.lang.String)" class="org.apache.xerces.dom.DeepNodeListImpl" />
	<method signature="int getLength()" class="org.apache.xerces.dom.DeepNodeListImpl" />
	<method signature="void &lt;init&gt;(org.apache.xerces.dom.NodeImpl,java.lang.String,java.lang.String)" class="org.apache.xerces.dom.DeepNodeListImpl" />
	<class name="org.apache.xerces.impl.xs.SchemaSymbols" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xs.SchemaSymbols" />
	<class name="org.apache.html.dom.HTMLLinkElementImpl" />
	<method signature="java.lang.String getMedia()" class="org.apache.html.dom.HTMLLinkElementImpl" />
	<method signature="java.lang.String getHref()" class="org.apache.html.dom.HTMLLinkElementImpl" />
	<method signature="void setRel(java.lang.String)" class="org.apache.html.dom.HTMLLinkElementImpl" />
	<method signature="java.lang.String getRev()" class="org.apache.html.dom.HTMLLinkElementImpl" />
	<method signature="java.lang.String getHreflang()" class="org.apache.html.dom.HTMLLinkElementImpl" />
	<method signature="java.lang.String getRel()" class="org.apache.html.dom.HTMLLinkElementImpl" />
	<method signature="boolean getDisabled()" class="org.apache.html.dom.HTMLLinkElementImpl" />
	<method signature="java.lang.String getCharset()" class="org.apache.html.dom.HTMLLinkElementImpl" />
	<method signature="void setMedia(java.lang.String)" class="org.apache.html.dom.HTMLLinkElementImpl" />
	<method signature="void setTarget(java.lang.String)" class="org.apache.html.dom.HTMLLinkElementImpl" />
	<method signature="void setDisabled(boolean)" class="org.apache.html.dom.HTMLLinkElementImpl" />
	<method signature="void setHref(java.lang.String)" class="org.apache.html.dom.HTMLLinkElementImpl" />
	<method signature="java.lang.String getTarget()" class="org.apache.html.dom.HTMLLinkElementImpl" />
	<method signature="void setHreflang(java.lang.String)" class="org.apache.html.dom.HTMLLinkElementImpl" />
	<method signature="void setRev(java.lang.String)" class="org.apache.html.dom.HTMLLinkElementImpl" />
	<method signature="void setCharset(java.lang.String)" class="org.apache.html.dom.HTMLLinkElementImpl" />
	<method signature="java.lang.String getType()" class="org.apache.html.dom.HTMLLinkElementImpl" />
	<method signature="void setType(java.lang.String)" class="org.apache.html.dom.HTMLLinkElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLLinkElementImpl" />
	<class name="org.jdom2.input.stax.StAXFilter" />
	<method signature="java.lang.String pruneComment(int,java.lang.String)" class="org.jdom2.input.stax.StAXFilter" />
	<method signature="java.lang.String includeCDATA(int,java.lang.String)" class="org.jdom2.input.stax.StAXFilter" />
	<method signature="java.lang.String pruneText(int,java.lang.String)" class="org.jdom2.input.stax.StAXFilter" />
	<method signature="boolean pruneElement(int,java.lang.String,org.jdom2.Namespace)" class="org.jdom2.input.stax.StAXFilter" />
	<method signature="boolean includeElement(int,java.lang.String,org.jdom2.Namespace)" class="org.jdom2.input.stax.StAXFilter" />
	<method signature="java.lang.String includeComment(int,java.lang.String)" class="org.jdom2.input.stax.StAXFilter" />
	<method signature="boolean includeProcessingInstruction(int,java.lang.String)" class="org.jdom2.input.stax.StAXFilter" />
	<method signature="java.lang.String pruneCDATA(int,java.lang.String)" class="org.jdom2.input.stax.StAXFilter" />
	<method signature="boolean pruneProcessingInstruction(int,java.lang.String)" class="org.jdom2.input.stax.StAXFilter" />
	<method signature="boolean includeDocType()" class="org.jdom2.input.stax.StAXFilter" />
	<method signature="java.lang.String includeText(int,java.lang.String)" class="org.jdom2.input.stax.StAXFilter" />
	<method signature="boolean includeEntityRef(int,java.lang.String)" class="org.jdom2.input.stax.StAXFilter" />
	<method signature="boolean pruneEntityRef(int,java.lang.String)" class="org.jdom2.input.stax.StAXFilter" />
	<class name="org.jfree.chart.entity.AxisEntity" />
	<method signature="void &lt;init&gt;(java.awt.Shape,org.jfree.chart.axis.Axis,java.lang.String)" class="org.jfree.chart.entity.AxisEntity" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.entity.AxisEntity" />
	<method signature="int hashCode()" class="org.jfree.chart.entity.AxisEntity" />
	<method signature="void &lt;init&gt;(java.awt.Shape,org.jfree.chart.axis.Axis)" class="org.jfree.chart.entity.AxisEntity" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.entity.AxisEntity" />
	<method signature="org.jfree.chart.axis.Axis getAxis()" class="org.jfree.chart.entity.AxisEntity" />
	<method signature="void &lt;init&gt;(java.awt.Shape,org.jfree.chart.axis.Axis,java.lang.String,java.lang.String)" class="org.jfree.chart.entity.AxisEntity" />
	<method signature="java.lang.String toString()" class="org.jfree.chart.entity.AxisEntity" />
	<class name="org.jfree.chart.event.MarkerChangeListener" />
	<method signature="void markerChanged(org.jfree.chart.event.MarkerChangeEvent)" class="org.jfree.chart.event.MarkerChangeListener" />
	<class name="tourma.views.round.JPNMatch" />
	<method signature="void &lt;init&gt;(tourma.data.Match,boolean)" class="tourma.views.round.JPNMatch" />
	<class name="org.jfree.chart.needle.PinNeedle" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.needle.PinNeedle" />
	<method signature="int hashCode()" class="org.jfree.chart.needle.PinNeedle" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.needle.PinNeedle" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.needle.PinNeedle" />
	<class name="freemarker.ext.beans.SimpleMapModel" />
	<method signature="int size()" class="freemarker.ext.beans.SimpleMapModel" />
	<method signature="java.lang.Object getAdaptedObject(java.lang.Class)" class="freemarker.ext.beans.SimpleMapModel" />
	<method signature="boolean isEmpty()" class="freemarker.ext.beans.SimpleMapModel" />
	<method signature="freemarker.template.TemplateCollectionModel keys()" class="freemarker.ext.beans.SimpleMapModel" />
	<method signature="freemarker.template.TemplateCollectionModel values()" class="freemarker.ext.beans.SimpleMapModel" />
	<method signature="java.lang.Object exec(java.util.List)" class="freemarker.ext.beans.SimpleMapModel" />
	<method signature="void &lt;init&gt;(java.util.Map,freemarker.ext.beans.BeansWrapper)" class="freemarker.ext.beans.SimpleMapModel" />
	<method signature="java.lang.Object getWrappedObject()" class="freemarker.ext.beans.SimpleMapModel" />
	<method signature="freemarker.template.TemplateModel get(java.lang.String)" class="freemarker.ext.beans.SimpleMapModel" />
	<class name="org.jfree.chart.plot.PolarPlot" />
	<method signature="void setRadiusMinorGridlinesVisible(boolean)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="int getIndexOf(org.jfree.chart.renderer.PolarItemRenderer)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="boolean isRadiusGridlinesVisible()" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="boolean isAngleLabelsVisible()" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="void setFixedLegendItems(org.jfree.chart.LegendItemCollection)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="void mapDatasetToAxes(int,java.util.List)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="void setRadiusGridlineStroke(java.awt.Stroke)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="void setDataset(int,org.jfree.data.xy.XYDataset)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="org.jfree.chart.axis.TickUnit getAngleTickUnit()" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="void zoomDomainAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="int getAxisIndex(org.jfree.chart.axis.ValueAxis)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="java.awt.Paint getAngleGridlinePaint()" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="void setDataset(org.jfree.data.xy.XYDataset)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="org.jfree.chart.plot.PolarAxisLocation getAxisLocation(int)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="void setRenderer(int,org.jfree.chart.renderer.PolarItemRenderer,boolean)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="java.lang.String getPlotType()" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="int indexOf(org.jfree.data.xy.XYDataset)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="void rendererChanged(org.jfree.chart.event.RendererChangeEvent)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="int getSeriesCount()" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="void setCounterClockwise(boolean)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="void setAngleOffset(double)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="void zoom(double)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="java.awt.Point translateValueThetaRadiusToJava2D(double,double,java.awt.geom.Rectangle2D)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="void setAxis(int,org.jfree.chart.axis.ValueAxis,boolean)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="org.jfree.chart.renderer.PolarItemRenderer getRenderer(int)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="int getDatasetCount()" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="org.jfree.data.xy.XYDataset getDataset()" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="boolean isDomainZoomable()" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="org.jfree.chart.renderer.PolarItemRenderer getRenderer()" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="org.jfree.chart.LegendItemCollection getFixedLegendItems()" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="void mapDatasetToAxis(int,int)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="void zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="void setAngleGridlinePaint(java.awt.Paint)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="void setMargin(int)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="void setAxis(org.jfree.chart.axis.ValueAxis)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="void setRadiusGridlinePaint(java.awt.Paint)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="org.jfree.chart.LegendItemCollection getLegendItems()" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="void setAngleGridlineStroke(java.awt.Stroke)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="java.awt.Stroke getAngleGridlineStroke()" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="void addCornerTextItem(java.lang.String)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="void zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="void setRenderer(int,org.jfree.chart.renderer.PolarItemRenderer)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="boolean isCounterClockwise()" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="double getMaxRadius()" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="java.awt.Point translateToJava2D(double,double,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="void setAngleLabelFont(java.awt.Font)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="java.awt.Paint getRadiusGridlinePaint()" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="void zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="void setAngleTickUnit(org.jfree.chart.axis.TickUnit)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="void &lt;init&gt;(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.PolarItemRenderer)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="org.jfree.chart.plot.PlotOrientation getOrientation()" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="double getAngleOffset()" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="boolean isRadiusMinorGridlinesVisible()" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="boolean isAngleGridlinesVisible()" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="org.jfree.chart.axis.ValueAxis getAxisForDataset(int)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="int getMargin()" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="void setAxisLocation(int,org.jfree.chart.plot.PolarAxisLocation,boolean)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="void setAngleGridlinesVisible(boolean)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="java.awt.Stroke getRadiusGridlineStroke()" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="org.jfree.chart.axis.ValueAxis getAxis()" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="void setAxisLocation(org.jfree.chart.plot.PolarAxisLocation)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="void zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="org.jfree.chart.plot.PolarAxisLocation getAxisLocation()" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="org.jfree.chart.axis.ValueAxis getAxis(int)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="void setAngleLabelsVisible(boolean)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="void setAngleLabelPaint(java.awt.Paint)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="void setAxisLocation(org.jfree.chart.plot.PolarAxisLocation,boolean)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="void zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="void removeCornerTextItem(java.lang.String)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="void setRadiusGridlinesVisible(boolean)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="void clearCornerTextItems()" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="void setAxis(int,org.jfree.chart.axis.ValueAxis)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="void setRenderer(org.jfree.chart.renderer.PolarItemRenderer)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="void datasetChanged(org.jfree.data.general.DatasetChangeEvent)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="void setAxisLocation(int,org.jfree.chart.plot.PolarAxisLocation)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="java.awt.Paint getAngleLabelPaint()" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="boolean isRangeZoomable()" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="int getAxisCount()" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="org.jfree.data.xy.XYDataset getDataset(int)" class="org.jfree.chart.plot.PolarPlot" />
	<method signature="java.awt.Font getAngleLabelFont()" class="org.jfree.chart.plot.PolarPlot" />
	<class name="org.apache.html.dom.HTMLMapElementImpl" />
	<method signature="java.lang.String getName()" class="org.apache.html.dom.HTMLMapElementImpl" />
	<method signature="org.w3c.dom.html.HTMLCollection getAreas()" class="org.apache.html.dom.HTMLMapElementImpl" />
	<method signature="void setName(java.lang.String)" class="org.apache.html.dom.HTMLMapElementImpl" />
	<method signature="org.w3c.dom.Node cloneNode(boolean)" class="org.apache.html.dom.HTMLMapElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLMapElementImpl" />
	<class name="org.apache.xerces.impl.dtd.XMLSimpleType" />
	<method signature="void clear()" class="org.apache.xerces.impl.dtd.XMLSimpleType" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dtd.XMLSimpleType" />
	<method signature="void setValues(org.apache.xerces.impl.dtd.XMLSimpleType)" class="org.apache.xerces.impl.dtd.XMLSimpleType" />
	<method signature="void setValues(short,java.lang.String,java.lang.String[],boolean,short,java.lang.String,java.lang.String,org.apache.xerces.impl.dv.DatatypeValidator)" class="org.apache.xerces.impl.dtd.XMLSimpleType" />
	<class name="org.jfree.date.RelativeDayOfWeekRule" />
	<method signature="void &lt;init&gt;(org.jfree.date.AnnualDateRule,int,int)" class="org.jfree.date.RelativeDayOfWeekRule" />
	<method signature="java.lang.Object clone()" class="org.jfree.date.RelativeDayOfWeekRule" />
	<method signature="org.jfree.date.SerialDate getDate(int)" class="org.jfree.date.RelativeDayOfWeekRule" />
	<method signature="void setSubrule(org.jfree.date.AnnualDateRule)" class="org.jfree.date.RelativeDayOfWeekRule" />
	<method signature="void &lt;init&gt;()" class="org.jfree.date.RelativeDayOfWeekRule" />
	<method signature="void setRelative(int)" class="org.jfree.date.RelativeDayOfWeekRule" />
	<method signature="int getDayOfWeek()" class="org.jfree.date.RelativeDayOfWeekRule" />
	<method signature="int getRelative()" class="org.jfree.date.RelativeDayOfWeekRule" />
	<method signature="org.jfree.date.AnnualDateRule getSubrule()" class="org.jfree.date.RelativeDayOfWeekRule" />
	<method signature="void setDayOfWeek(int)" class="org.jfree.date.RelativeDayOfWeekRule" />
	<class name="org.jfree.chart.block.RectangleConstraint" />
	<method signature="org.jfree.chart.block.RectangleConstraint toRangeHeight(org.jfree.data.Range)" class="org.jfree.chart.block.RectangleConstraint" />
	<method signature="void &lt;init&gt;(org.jfree.data.Range,double)" class="org.jfree.chart.block.RectangleConstraint" />
	<method signature="void &lt;init&gt;(double,org.jfree.data.Range)" class="org.jfree.chart.block.RectangleConstraint" />
	<method signature="double getHeight()" class="org.jfree.chart.block.RectangleConstraint" />
	<method signature="org.jfree.chart.block.RectangleConstraint toFixedWidth(double)" class="org.jfree.chart.block.RectangleConstraint" />
	<method signature="void &lt;init&gt;(org.jfree.data.Range,org.jfree.data.Range)" class="org.jfree.chart.block.RectangleConstraint" />
	<method signature="void &lt;init&gt;(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)" class="org.jfree.chart.block.RectangleConstraint" />
	<method signature="org.jfree.data.Range getWidthRange()" class="org.jfree.chart.block.RectangleConstraint" />
	<method signature="org.jfree.data.Range getHeightRange()" class="org.jfree.chart.block.RectangleConstraint" />
	<method signature="org.jfree.ui.Size2D calculateConstrainedSize(org.jfree.ui.Size2D)" class="org.jfree.chart.block.RectangleConstraint" />
	<method signature="org.jfree.chart.block.LengthConstraintType getWidthConstraintType()" class="org.jfree.chart.block.RectangleConstraint" />
	<method signature="org.jfree.chart.block.LengthConstraintType getHeightConstraintType()" class="org.jfree.chart.block.RectangleConstraint" />
	<method signature="org.jfree.chart.block.RectangleConstraint toRangeWidth(org.jfree.data.Range)" class="org.jfree.chart.block.RectangleConstraint" />
	<method signature="java.lang.String toString()" class="org.jfree.chart.block.RectangleConstraint" />
	<method signature="double getWidth()" class="org.jfree.chart.block.RectangleConstraint" />
	<method signature="org.jfree.chart.block.RectangleConstraint toUnconstrainedHeight()" class="org.jfree.chart.block.RectangleConstraint" />
	<method signature="org.jfree.chart.block.RectangleConstraint toUnconstrainedWidth()" class="org.jfree.chart.block.RectangleConstraint" />
	<method signature="org.jfree.chart.block.RectangleConstraint toFixedHeight(double)" class="org.jfree.chart.block.RectangleConstraint" />
	<method signature="void &lt;init&gt;(double,double)" class="org.jfree.chart.block.RectangleConstraint" />
	<class name="org.jfree.chart.axis.AxisLocation" />
	<method signature="org.jfree.chart.axis.AxisLocation getOpposite()" class="org.jfree.chart.axis.AxisLocation" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.axis.AxisLocation" />
	<method signature="org.jfree.chart.axis.AxisLocation getOpposite(org.jfree.chart.axis.AxisLocation)" class="org.jfree.chart.axis.AxisLocation" />
	<method signature="java.lang.String toString()" class="org.jfree.chart.axis.AxisLocation" />
	<class name="org.jfree.chart.plot.DialShape" />
	<method signature="int hashCode()" class="org.jfree.chart.plot.DialShape" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.plot.DialShape" />
	<method signature="java.lang.String toString()" class="org.jfree.chart.plot.DialShape" />
	<class name="javax.xml.bind.NotIdentifiableEvent" />
	<class name="org.w3c.dom.stylesheets.LinkStyle" />
	<method signature="org.w3c.dom.stylesheets.StyleSheet getSheet()" class="org.w3c.dom.stylesheets.LinkStyle" />
	<class name="tourma.views.fullscreen.JFullScreenIndivAnnex" />
	<method signature="void &lt;init&gt;(int,boolean)" class="tourma.views.fullscreen.JFullScreenIndivAnnex" />
	<method signature="void &lt;init&gt;(java.net.Socket,int)" class="tourma.views.fullscreen.JFullScreenIndivAnnex" />
	<method signature="void &lt;init&gt;(java.net.Socket)" class="tourma.views.fullscreen.JFullScreenIndivAnnex" />
	<method signature="void &lt;init&gt;(int,boolean,int)" class="tourma.views.fullscreen.JFullScreenIndivAnnex" />
	<class name="org.apache.xml.serialize.TextSerializer" />
	<method signature="void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" class="org.apache.xml.serialize.TextSerializer" />
	<method signature="void startElement(java.lang.String,org.xml.sax.AttributeList)" class="org.apache.xml.serialize.TextSerializer" />
	<method signature="void endElement(java.lang.String)" class="org.apache.xml.serialize.TextSerializer" />
	<method signature="void endElementIO(java.lang.String)" class="org.apache.xml.serialize.TextSerializer" />
	<method signature="void processingInstructionIO(java.lang.String,java.lang.String)" class="org.apache.xml.serialize.TextSerializer" />
	<method signature="void comment(java.lang.String)" class="org.apache.xml.serialize.TextSerializer" />
	<method signature="void endElement(java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xml.serialize.TextSerializer" />
	<method signature="void characters(char[],int,int)" class="org.apache.xml.serialize.TextSerializer" />
	<method signature="void &lt;init&gt;()" class="org.apache.xml.serialize.TextSerializer" />
	<method signature="void setOutputFormat(org.apache.xml.serialize.OutputFormat)" class="org.apache.xml.serialize.TextSerializer" />
	<method signature="void comment(char[],int,int)" class="org.apache.xml.serialize.TextSerializer" />
	<class name="org.apache.xerces.impl.xs.identity.IdentityConstraint" />
	<method signature="void addAnnotation(org.apache.xerces.impl.xs.XSAnnotationImpl)" class="org.apache.xerces.impl.xs.identity.IdentityConstraint" />
	<method signature="java.lang.String getName()" class="org.apache.xerces.impl.xs.identity.IdentityConstraint" />
	<method signature="org.apache.xerces.impl.xs.identity.Field getFieldAt(int)" class="org.apache.xerces.impl.xs.identity.IdentityConstraint" />
	<method signature="org.apache.xerces.impl.xs.identity.Selector getSelector()" class="org.apache.xerces.impl.xs.identity.IdentityConstraint" />
	<method signature="void addField(org.apache.xerces.impl.xs.identity.Field)" class="org.apache.xerces.impl.xs.identity.IdentityConstraint" />
	<method signature="org.apache.xerces.xs.StringList getFieldStrs()" class="org.apache.xerces.impl.xs.identity.IdentityConstraint" />
	<method signature="org.apache.xerces.xs.XSIDCDefinition getRefKey()" class="org.apache.xerces.impl.xs.identity.IdentityConstraint" />
	<method signature="java.lang.String getIdentityConstraintName()" class="org.apache.xerces.impl.xs.identity.IdentityConstraint" />
	<method signature="int getFieldCount()" class="org.apache.xerces.impl.xs.identity.IdentityConstraint" />
	<method signature="org.apache.xerces.xs.XSObjectList getAnnotations()" class="org.apache.xerces.impl.xs.identity.IdentityConstraint" />
	<method signature="short getType()" class="org.apache.xerces.impl.xs.identity.IdentityConstraint" />
	<method signature="java.lang.String getElementName()" class="org.apache.xerces.impl.xs.identity.IdentityConstraint" />
	<method signature="boolean equals(org.apache.xerces.impl.xs.identity.IdentityConstraint)" class="org.apache.xerces.impl.xs.identity.IdentityConstraint" />
	<method signature="org.apache.xerces.xs.XSNamespaceItem getNamespaceItem()" class="org.apache.xerces.impl.xs.identity.IdentityConstraint" />
	<method signature="java.lang.String getSelectorStr()" class="org.apache.xerces.impl.xs.identity.IdentityConstraint" />
	<method signature="short getCategory()" class="org.apache.xerces.impl.xs.identity.IdentityConstraint" />
	<method signature="void setSelector(org.apache.xerces.impl.xs.identity.Selector)" class="org.apache.xerces.impl.xs.identity.IdentityConstraint" />
	<method signature="java.lang.String getNamespace()" class="org.apache.xerces.impl.xs.identity.IdentityConstraint" />
	<method signature="java.lang.String toString()" class="org.apache.xerces.impl.xs.identity.IdentityConstraint" />
	<class name="org.apache.xerces.util.ErrorHandlerWrapper" />
	<method signature="void error(java.lang.String,java.lang.String,org.apache.xerces.xni.parser.XMLParseException)" class="org.apache.xerces.util.ErrorHandlerWrapper" />
	<method signature="void &lt;init&gt;(org.xml.sax.ErrorHandler)" class="org.apache.xerces.util.ErrorHandlerWrapper" />
	<method signature="org.xml.sax.ErrorHandler getErrorHandler()" class="org.apache.xerces.util.ErrorHandlerWrapper" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.util.ErrorHandlerWrapper" />
	<method signature="void warning(java.lang.String,java.lang.String,org.apache.xerces.xni.parser.XMLParseException)" class="org.apache.xerces.util.ErrorHandlerWrapper" />
	<method signature="void fatalError(java.lang.String,java.lang.String,org.apache.xerces.xni.parser.XMLParseException)" class="org.apache.xerces.util.ErrorHandlerWrapper" />
	<method signature="void setErrorHandler(org.xml.sax.ErrorHandler)" class="org.apache.xerces.util.ErrorHandlerWrapper" />
	<class name="org.apache.commons.lang3.CharUtils" />
	<method signature="char toChar(java.lang.String)" class="org.apache.commons.lang3.CharUtils" />
	<method signature="java.lang.Character toCharacterObject(char)" class="org.apache.commons.lang3.CharUtils" />
	<method signature="boolean isAsciiAlphaUpper(char)" class="org.apache.commons.lang3.CharUtils" />
	<method signature="int compare(char,char)" class="org.apache.commons.lang3.CharUtils" />
	<method signature="boolean isAsciiPrintable(char)" class="org.apache.commons.lang3.CharUtils" />
	<method signature="int toIntValue(java.lang.Character,int)" class="org.apache.commons.lang3.CharUtils" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.CharUtils" />
	<method signature="char toChar(java.lang.Character)" class="org.apache.commons.lang3.CharUtils" />
	<method signature="int toIntValue(char,int)" class="org.apache.commons.lang3.CharUtils" />
	<method signature="boolean isAsciiNumeric(char)" class="org.apache.commons.lang3.CharUtils" />
	<method signature="char toChar(java.lang.Character,char)" class="org.apache.commons.lang3.CharUtils" />
	<method signature="java.lang.String toString(java.lang.Character)" class="org.apache.commons.lang3.CharUtils" />
	<method signature="java.lang.String toString(char)" class="org.apache.commons.lang3.CharUtils" />
	<method signature="boolean isAsciiControl(char)" class="org.apache.commons.lang3.CharUtils" />
	<method signature="char toChar(java.lang.String,char)" class="org.apache.commons.lang3.CharUtils" />
	<method signature="int toIntValue(char)" class="org.apache.commons.lang3.CharUtils" />
	<method signature="int toIntValue(java.lang.Character)" class="org.apache.commons.lang3.CharUtils" />
	<method signature="boolean isAsciiAlphaLower(char)" class="org.apache.commons.lang3.CharUtils" />
	<method signature="boolean isAscii(char)" class="org.apache.commons.lang3.CharUtils" />
	<method signature="java.lang.String unicodeEscaped(java.lang.Character)" class="org.apache.commons.lang3.CharUtils" />
	<method signature="boolean isAsciiAlphanumeric(char)" class="org.apache.commons.lang3.CharUtils" />
	<method signature="java.lang.String unicodeEscaped(char)" class="org.apache.commons.lang3.CharUtils" />
	<method signature="java.lang.Character toCharacterObject(java.lang.String)" class="org.apache.commons.lang3.CharUtils" />
	<method signature="boolean isAsciiAlpha(char)" class="org.apache.commons.lang3.CharUtils" />
	<class name="org.apache.xerces.dom.ChildNode" />
	<method signature="org.w3c.dom.Node getPreviousSibling()" class="org.apache.xerces.dom.ChildNode" />
	<method signature="org.w3c.dom.Node getNextSibling()" class="org.apache.xerces.dom.ChildNode" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.dom.ChildNode" />
	<method signature="org.w3c.dom.Node cloneNode(boolean)" class="org.apache.xerces.dom.ChildNode" />
	<method signature="org.w3c.dom.Node getParentNode()" class="org.apache.xerces.dom.ChildNode" />
	<class name="org.jfree.chart.plot.dial.StandardDialScale" />
	<method signature="double getMajorTickIncrement()" class="org.jfree.chart.plot.dial.StandardDialScale" />
	<method signature="java.awt.Paint getTickLabelPaint()" class="org.jfree.chart.plot.dial.StandardDialScale" />
	<method signature="double getLowerBound()" class="org.jfree.chart.plot.dial.StandardDialScale" />
	<method signature="java.awt.Stroke getMinorTickStroke()" class="org.jfree.chart.plot.dial.StandardDialScale" />
	<method signature="boolean isClippedToWindow()" class="org.jfree.chart.plot.dial.StandardDialScale" />
	<method signature="java.awt.Stroke getMajorTickStroke()" class="org.jfree.chart.plot.dial.StandardDialScale" />
	<method signature="java.awt.Paint getMinorTickPaint()" class="org.jfree.chart.plot.dial.StandardDialScale" />
	<method signature="void setTickLabelFont(java.awt.Font)" class="org.jfree.chart.plot.dial.StandardDialScale" />
	<method signature="java.text.NumberFormat getTickLabelFormatter()" class="org.jfree.chart.plot.dial.StandardDialScale" />
	<method signature="void setTickLabelsVisible(boolean)" class="org.jfree.chart.plot.dial.StandardDialScale" />
	<method signature="double getMajorTickLength()" class="org.jfree.chart.plot.dial.StandardDialScale" />
	<method signature="java.awt.Paint getMajorTickPaint()" class="org.jfree.chart.plot.dial.StandardDialScale" />
	<method signature="double getTickLabelOffset()" class="org.jfree.chart.plot.dial.StandardDialScale" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.plot.dial.StandardDialScale" />
	<method signature="void setMinorTickStroke(java.awt.Stroke)" class="org.jfree.chart.plot.dial.StandardDialScale" />
	<method signature="void setTickLabelPaint(java.awt.Paint)" class="org.jfree.chart.plot.dial.StandardDialScale" />
	<method signature="void setTickLabelFormatter(java.text.NumberFormat)" class="org.jfree.chart.plot.dial.StandardDialScale" />
	<method signature="double valueToAngle(double)" class="org.jfree.chart.plot.dial.StandardDialScale" />
	<method signature="void setTickRadius(double)" class="org.jfree.chart.plot.dial.StandardDialScale" />
	<method signature="void setLowerBound(double)" class="org.jfree.chart.plot.dial.StandardDialScale" />
	<method signature="double getMinorTickLength()" class="org.jfree.chart.plot.dial.StandardDialScale" />
	<method signature="void setMinorTickPaint(java.awt.Paint)" class="org.jfree.chart.plot.dial.StandardDialScale" />
	<method signature="void setTickLabelOffset(double)" class="org.jfree.chart.plot.dial.StandardDialScale" />
	<method signature="void &lt;init&gt;(double,double,double,double,double,int)" class="org.jfree.chart.plot.dial.StandardDialScale" />
	<method signature="double getUpperBound()" class="org.jfree.chart.plot.dial.StandardDialScale" />
	<method signature="void setMajorTickLength(double)" class="org.jfree.chart.plot.dial.StandardDialScale" />
	<method signature="void setFirstTickLabelVisible(boolean)" class="org.jfree.chart.plot.dial.StandardDialScale" />
	<method signature="void setMinorTickLength(double)" class="org.jfree.chart.plot.dial.StandardDialScale" />
	<method signature="void setMajorTickIncrement(double)" class="org.jfree.chart.plot.dial.StandardDialScale" />
	<method signature="boolean getTickLabelsVisible()" class="org.jfree.chart.plot.dial.StandardDialScale" />
	<method signature="boolean getFirstTickLabelVisible()" class="org.jfree.chart.plot.dial.StandardDialScale" />
	<method signature="void setMajorTickPaint(java.awt.Paint)" class="org.jfree.chart.plot.dial.StandardDialScale" />
	<method signature="int getMinorTickCount()" class="org.jfree.chart.plot.dial.StandardDialScale" />
	<method signature="double getExtent()" class="org.jfree.chart.plot.dial.StandardDialScale" />
	<method signature="java.awt.Font getTickLabelFont()" class="org.jfree.chart.plot.dial.StandardDialScale" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.plot.dial.StandardDialScale" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.plot.dial.StandardDialScale" />
	<method signature="void setStartAngle(double)" class="org.jfree.chart.plot.dial.StandardDialScale" />
	<method signature="void setUpperBound(double)" class="org.jfree.chart.plot.dial.StandardDialScale" />
	<method signature="void setMajorTickStroke(java.awt.Stroke)" class="org.jfree.chart.plot.dial.StandardDialScale" />
	<method signature="void setMinorTickCount(int)" class="org.jfree.chart.plot.dial.StandardDialScale" />
	<method signature="int hashCode()" class="org.jfree.chart.plot.dial.StandardDialScale" />
	<method signature="double getStartAngle()" class="org.jfree.chart.plot.dial.StandardDialScale" />
	<method signature="void setExtent(double)" class="org.jfree.chart.plot.dial.StandardDialScale" />
	<method signature="double getTickRadius()" class="org.jfree.chart.plot.dial.StandardDialScale" />
	<method signature="double angleToValue(double)" class="org.jfree.chart.plot.dial.StandardDialScale" />
	<method signature="void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)" class="org.jfree.chart.plot.dial.StandardDialScale" />
	<class name="org.apache.xerces.xni.grammars.XSGrammar" />
	<method signature="org.apache.xerces.xs.XSModel toXSModel()" class="org.apache.xerces.xni.grammars.XSGrammar" />
	<method signature="org.apache.xerces.xs.XSModel toXSModel(org.apache.xerces.xni.grammars.XSGrammar[])" class="org.apache.xerces.xni.grammars.XSGrammar" />
	<class name="org.jfree.data.xy.XYDatasetTableModel" />
	<method signature="boolean isCellEditable(int,int)" class="org.jfree.data.xy.XYDatasetTableModel" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.xy.XYDatasetTableModel" />
	<method signature="int getRowCount()" class="org.jfree.data.xy.XYDatasetTableModel" />
	<method signature="void setValueAt(java.lang.Object,int,int)" class="org.jfree.data.xy.XYDatasetTableModel" />
	<method signature="void datasetChanged(org.jfree.data.general.DatasetChangeEvent)" class="org.jfree.data.xy.XYDatasetTableModel" />
	<method signature="void setModel(org.jfree.data.xy.TableXYDataset)" class="org.jfree.data.xy.XYDatasetTableModel" />
	<method signature="java.lang.String getColumnName(int)" class="org.jfree.data.xy.XYDatasetTableModel" />
	<method signature="void &lt;init&gt;(org.jfree.data.xy.TableXYDataset)" class="org.jfree.data.xy.XYDatasetTableModel" />
	<method signature="java.lang.Object getValueAt(int,int)" class="org.jfree.data.xy.XYDatasetTableModel" />
	<method signature="int getColumnCount()" class="org.jfree.data.xy.XYDatasetTableModel" />
	<class name="org.apache.xerces.stax.ImmutableLocation" />
	<method signature="java.lang.String getSystemId()" class="org.apache.xerces.stax.ImmutableLocation" />
	<method signature="int getCharacterOffset()" class="org.apache.xerces.stax.ImmutableLocation" />
	<method signature="int getLineNumber()" class="org.apache.xerces.stax.ImmutableLocation" />
	<method signature="void &lt;init&gt;(javax.xml.stream.Location)" class="org.apache.xerces.stax.ImmutableLocation" />
	<method signature="void &lt;init&gt;(int,int,int,java.lang.String,java.lang.String)" class="org.apache.xerces.stax.ImmutableLocation" />
	<method signature="int getColumnNumber()" class="org.apache.xerces.stax.ImmutableLocation" />
	<method signature="java.lang.String getPublicId()" class="org.apache.xerces.stax.ImmutableLocation" />
	<class name="org.unbescape.html.HtmlEscape" />
	<method signature="void unescapeHtml(char[],int,int,java.io.Writer)" class="org.unbescape.html.HtmlEscape" />
	<method signature="void escapeHtml5(char[],int,int,java.io.Writer)" class="org.unbescape.html.HtmlEscape" />
	<method signature="void escapeHtml(char[],int,int,java.io.Writer,org.unbescape.html.HtmlEscapeType,org.unbescape.html.HtmlEscapeLevel)" class="org.unbescape.html.HtmlEscape" />
	<method signature="void escapeHtml4(char[],int,int,java.io.Writer)" class="org.unbescape.html.HtmlEscape" />
	<method signature="java.lang.String escapeHtml(java.lang.String,org.unbescape.html.HtmlEscapeType,org.unbescape.html.HtmlEscapeLevel)" class="org.unbescape.html.HtmlEscape" />
	<method signature="void escapeHtml4Xml(char[],int,int,java.io.Writer)" class="org.unbescape.html.HtmlEscape" />
	<method signature="void escapeHtml5Xml(char[],int,int,java.io.Writer)" class="org.unbescape.html.HtmlEscape" />
	<method signature="java.lang.String escapeHtml5Xml(java.lang.String)" class="org.unbescape.html.HtmlEscape" />
	<method signature="java.lang.String escapeHtml4Xml(java.lang.String)" class="org.unbescape.html.HtmlEscape" />
	<method signature="java.lang.String unescapeHtml(java.lang.String)" class="org.unbescape.html.HtmlEscape" />
	<method signature="java.lang.String escapeHtml4(java.lang.String)" class="org.unbescape.html.HtmlEscape" />
	<method signature="java.lang.String escapeHtml5(java.lang.String)" class="org.unbescape.html.HtmlEscape" />
	<class name="org.jfree.chart.renderer.xy.DeviationRenderer$State" />
	<method signature="void &lt;init&gt;(org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.renderer.xy.DeviationRenderer$State" />
	<class name="freemarker.template.utility.StringUtil" />
	<method signature="java.lang.String XMLEncQAttr(java.lang.String)" class="freemarker.template.utility.StringUtil" />
	<method signature="java.lang.String jQuote(java.lang.Object)" class="freemarker.template.utility.StringUtil" />
	<method signature="java.lang.String leftPad(java.lang.String,int,java.lang.String)" class="freemarker.template.utility.StringUtil" />
	<method signature="java.lang.String XMLEncNQG(java.lang.String)" class="freemarker.template.utility.StringUtil" />
	<method signature="java.lang.String javaStringEnc(java.lang.String)" class="freemarker.template.utility.StringUtil" />
	<method signature="java.lang.String javaScriptStringEnc(java.lang.String)" class="freemarker.template.utility.StringUtil" />
	<method signature="java.lang.String[] split(java.lang.String,char)" class="freemarker.template.utility.StringUtil" />
	<method signature="java.lang.String jQuote(java.lang.String)" class="freemarker.template.utility.StringUtil" />
	<method signature="boolean getYesNo(java.lang.String)" class="freemarker.template.utility.StringUtil" />
	<method signature="boolean matchesName(java.lang.String,java.lang.String,java.lang.String,freemarker.core.Environment)" class="freemarker.template.utility.StringUtil" />
	<method signature="java.lang.String FTLStringLiteralEnc(java.lang.String)" class="freemarker.template.utility.StringUtil" />
	<method signature="java.lang.String rightPad(java.lang.String,int,char)" class="freemarker.template.utility.StringUtil" />
	<method signature="int versionStringToInt(java.lang.String)" class="freemarker.template.utility.StringUtil" />
	<method signature="java.util.Locale deduceLocale(java.lang.String)" class="freemarker.template.utility.StringUtil" />
	<method signature="void &lt;init&gt;()" class="freemarker.template.utility.StringUtil" />
	<method signature="java.lang.String FTLStringLiteralDec(java.lang.String)" class="freemarker.template.utility.StringUtil" />
	<method signature="java.lang.String capitalize(java.lang.String)" class="freemarker.template.utility.StringUtil" />
	<method signature="java.lang.String jsonStringEnc(java.lang.String)" class="freemarker.template.utility.StringUtil" />
	<method signature="java.lang.String[] split(java.lang.String,java.lang.String,boolean)" class="freemarker.template.utility.StringUtil" />
	<method signature="java.lang.String rightPad(java.lang.String,int)" class="freemarker.template.utility.StringUtil" />
	<method signature="java.lang.String chomp(java.lang.String)" class="freemarker.template.utility.StringUtil" />
	<method signature="java.lang.String XMLEnc(java.lang.String)" class="freemarker.template.utility.StringUtil" />
	<method signature="java.lang.String HTMLEnc(java.lang.String)" class="freemarker.template.utility.StringUtil" />
	<method signature="boolean isXMLID(java.lang.String)" class="freemarker.template.utility.StringUtil" />
	<method signature="java.lang.String RTFEnc(java.lang.String)" class="freemarker.template.utility.StringUtil" />
	<method signature="java.lang.String leftPad(java.lang.String,int)" class="freemarker.template.utility.StringUtil" />
	<method signature="java.lang.String jQuoteNoXSS(java.lang.String)" class="freemarker.template.utility.StringUtil" />
	<method signature="java.lang.String rightPad(java.lang.String,int,java.lang.String)" class="freemarker.template.utility.StringUtil" />
	<method signature="java.lang.String XMLEncNA(java.lang.String)" class="freemarker.template.utility.StringUtil" />
	<method signature="java.lang.String URLEnc(java.lang.String,java.lang.String)" class="freemarker.template.utility.StringUtil" />
	<method signature="java.lang.String replace(java.lang.String,java.lang.String,java.lang.String,boolean,boolean)" class="freemarker.template.utility.StringUtil" />
	<method signature="java.util.Map parseNameValuePairList(java.lang.String,java.lang.String)" class="freemarker.template.utility.StringUtil" />
	<method signature="java.lang.String jQuoteNoXSS(java.lang.Object)" class="freemarker.template.utility.StringUtil" />
	<method signature="java.lang.String XHTMLEnc(java.lang.String)" class="freemarker.template.utility.StringUtil" />
	<method signature="java.lang.String leftPad(java.lang.String,int,char)" class="freemarker.template.utility.StringUtil" />
	<class name="org.xml.sax.helpers.LocatorImpl" />
	<method signature="java.lang.String getSystemId()" class="org.xml.sax.helpers.LocatorImpl" />
	<method signature="void setSystemId(java.lang.String)" class="org.xml.sax.helpers.LocatorImpl" />
	<method signature="int getLineNumber()" class="org.xml.sax.helpers.LocatorImpl" />
	<method signature="void &lt;init&gt;()" class="org.xml.sax.helpers.LocatorImpl" />
	<method signature="void setLineNumber(int)" class="org.xml.sax.helpers.LocatorImpl" />
	<method signature="void &lt;init&gt;(org.xml.sax.Locator)" class="org.xml.sax.helpers.LocatorImpl" />
	<method signature="void setColumnNumber(int)" class="org.xml.sax.helpers.LocatorImpl" />
	<method signature="java.lang.String getPublicId()" class="org.xml.sax.helpers.LocatorImpl" />
	<method signature="int getColumnNumber()" class="org.xml.sax.helpers.LocatorImpl" />
	<method signature="void setPublicId(java.lang.String)" class="org.xml.sax.helpers.LocatorImpl" />
	<class name="org.jfree.chart.plot.PiePlotState" />
	<method signature="void &lt;init&gt;(org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.plot.PiePlotState" />
	<method signature="void setPieWRadius(double)" class="org.jfree.chart.plot.PiePlotState" />
	<method signature="double getLatestAngle()" class="org.jfree.chart.plot.PiePlotState" />
	<method signature="void setExplodedPieArea(java.awt.geom.Rectangle2D)" class="org.jfree.chart.plot.PiePlotState" />
	<method signature="void setPieCenterY(double)" class="org.jfree.chart.plot.PiePlotState" />
	<method signature="void setPieCenterX(double)" class="org.jfree.chart.plot.PiePlotState" />
	<method signature="double getTotal()" class="org.jfree.chart.plot.PiePlotState" />
	<method signature="double getPieHRadius()" class="org.jfree.chart.plot.PiePlotState" />
	<method signature="void setLinkArea(java.awt.geom.Rectangle2D)" class="org.jfree.chart.plot.PiePlotState" />
	<method signature="void setPieHRadius(double)" class="org.jfree.chart.plot.PiePlotState" />
	<method signature="java.awt.geom.Rectangle2D getLinkArea()" class="org.jfree.chart.plot.PiePlotState" />
	<method signature="int getPassesRequired()" class="org.jfree.chart.plot.PiePlotState" />
	<method signature="java.awt.geom.Rectangle2D getPieArea()" class="org.jfree.chart.plot.PiePlotState" />
	<method signature="double getPieCenterX()" class="org.jfree.chart.plot.PiePlotState" />
	<method signature="void setPassesRequired(int)" class="org.jfree.chart.plot.PiePlotState" />
	<method signature="double getPieCenterY()" class="org.jfree.chart.plot.PiePlotState" />
	<method signature="java.awt.geom.Rectangle2D getExplodedPieArea()" class="org.jfree.chart.plot.PiePlotState" />
	<method signature="void setPieArea(java.awt.geom.Rectangle2D)" class="org.jfree.chart.plot.PiePlotState" />
	<method signature="double getPieWRadius()" class="org.jfree.chart.plot.PiePlotState" />
	<method signature="void setTotal(double)" class="org.jfree.chart.plot.PiePlotState" />
	<method signature="void setLatestAngle(double)" class="org.jfree.chart.plot.PiePlotState" />
	<class name="org.unbescape.javascript.JavaScriptEscapeType" />
	<method signature="org.unbescape.javascript.JavaScriptEscapeType valueOf(java.lang.String)" class="org.unbescape.javascript.JavaScriptEscapeType" />
	<method signature="org.unbescape.javascript.JavaScriptEscapeType[] values()" class="org.unbescape.javascript.JavaScriptEscapeType" />
	<class name="org.apache.commons.lang3.reflect.TypeUtils" />
	<method signature="java.lang.reflect.Type[] getImplicitBounds(java.lang.reflect.TypeVariable)" class="org.apache.commons.lang3.reflect.TypeUtils" />
	<method signature="boolean isInstance(java.lang.Object,java.lang.reflect.Type)" class="org.apache.commons.lang3.reflect.TypeUtils" />
	<method signature="java.lang.reflect.ParameterizedType parameterize(java.lang.Class,java.util.Map)" class="org.apache.commons.lang3.reflect.TypeUtils" />
	<method signature="java.lang.reflect.GenericArrayType genericArrayType(java.lang.reflect.Type)" class="org.apache.commons.lang3.reflect.TypeUtils" />
	<method signature="java.util.Map determineTypeArguments(java.lang.Class,java.lang.reflect.ParameterizedType)" class="org.apache.commons.lang3.reflect.TypeUtils" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.reflect.TypeUtils" />
	<method signature="java.lang.String toLongString(java.lang.reflect.TypeVariable)" class="org.apache.commons.lang3.reflect.TypeUtils" />
	<method signature="boolean containsTypeVariables(java.lang.reflect.Type)" class="org.apache.commons.lang3.reflect.TypeUtils" />
	<method signature="java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type)" class="org.apache.commons.lang3.reflect.TypeUtils" />
	<method signature="boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)" class="org.apache.commons.lang3.reflect.TypeUtils" />
	<method signature="java.lang.reflect.Type[] normalizeUpperBounds(java.lang.reflect.Type[])" class="org.apache.commons.lang3.reflect.TypeUtils" />
	<method signature="org.apache.commons.lang3.reflect.Typed wrap(java.lang.reflect.Type)" class="org.apache.commons.lang3.reflect.TypeUtils" />
	<method signature="java.lang.Class getRawType(java.lang.reflect.Type,java.lang.reflect.Type)" class="org.apache.commons.lang3.reflect.TypeUtils" />
	<method signature="java.lang.reflect.ParameterizedType parameterizeWithOwner(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type[])" class="org.apache.commons.lang3.reflect.TypeUtils" />
	<method signature="java.util.Map getTypeArguments(java.lang.reflect.Type,java.lang.Class)" class="org.apache.commons.lang3.reflect.TypeUtils" />
	<method signature="boolean isArrayType(java.lang.reflect.Type)" class="org.apache.commons.lang3.reflect.TypeUtils" />
	<method signature="org.apache.commons.lang3.reflect.Typed wrap(java.lang.Class)" class="org.apache.commons.lang3.reflect.TypeUtils" />
	<method signature="org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeBuilder wildcardType()" class="org.apache.commons.lang3.reflect.TypeUtils" />
	<method signature="boolean equals(java.lang.reflect.Type,java.lang.reflect.Type)" class="org.apache.commons.lang3.reflect.TypeUtils" />
	<method signature="java.lang.reflect.Type[] getImplicitUpperBounds(java.lang.reflect.WildcardType)" class="org.apache.commons.lang3.reflect.TypeUtils" />
	<method signature="java.lang.reflect.ParameterizedType parameterizeWithOwner(java.lang.reflect.Type,java.lang.Class,java.util.Map)" class="org.apache.commons.lang3.reflect.TypeUtils" />
	<method signature="java.util.Map getTypeArguments(java.lang.reflect.ParameterizedType)" class="org.apache.commons.lang3.reflect.TypeUtils" />
	<method signature="boolean typesSatisfyVariables(java.util.Map)" class="org.apache.commons.lang3.reflect.TypeUtils" />
	<method signature="java.lang.reflect.Type unrollVariables(java.util.Map,java.lang.reflect.Type)" class="org.apache.commons.lang3.reflect.TypeUtils" />
	<method signature="java.lang.reflect.ParameterizedType parameterize(java.lang.Class,java.lang.reflect.Type[])" class="org.apache.commons.lang3.reflect.TypeUtils" />
	<method signature="java.lang.reflect.Type[] getImplicitLowerBounds(java.lang.reflect.WildcardType)" class="org.apache.commons.lang3.reflect.TypeUtils" />
	<method signature="java.lang.String toString(java.lang.reflect.Type)" class="org.apache.commons.lang3.reflect.TypeUtils" />
	<class name="org.apache.xerces.xni.parser.XMLErrorHandler" />
	<method signature="void error(java.lang.String,java.lang.String,org.apache.xerces.xni.parser.XMLParseException)" class="org.apache.xerces.xni.parser.XMLErrorHandler" />
	<method signature="void warning(java.lang.String,java.lang.String,org.apache.xerces.xni.parser.XMLParseException)" class="org.apache.xerces.xni.parser.XMLErrorHandler" />
	<method signature="void fatalError(java.lang.String,java.lang.String,org.apache.xerces.xni.parser.XMLParseException)" class="org.apache.xerces.xni.parser.XMLErrorHandler" />
	<class name="org.w3c.dom.html.HTMLLIElement" />
	<method signature="int getValue()" class="org.w3c.dom.html.HTMLLIElement" />
	<method signature="java.lang.String getType()" class="org.w3c.dom.html.HTMLLIElement" />
	<method signature="void setValue(int)" class="org.w3c.dom.html.HTMLLIElement" />
	<method signature="void setType(java.lang.String)" class="org.w3c.dom.html.HTMLLIElement" />
	<class name="org.jfree.data.general.AbstractDataset" />
	<method signature="org.jfree.data.general.DatasetGroup getGroup()" class="org.jfree.data.general.AbstractDataset" />
	<method signature="boolean hasListener(java.util.EventListener)" class="org.jfree.data.general.AbstractDataset" />
	<method signature="void addChangeListener(org.jfree.data.general.DatasetChangeListener)" class="org.jfree.data.general.AbstractDataset" />
	<method signature="void validateObject()" class="org.jfree.data.general.AbstractDataset" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.general.AbstractDataset" />
	<method signature="void removeChangeListener(org.jfree.data.general.DatasetChangeListener)" class="org.jfree.data.general.AbstractDataset" />
	<method signature="void setGroup(org.jfree.data.general.DatasetGroup)" class="org.jfree.data.general.AbstractDataset" />
	<class name="org.jfree.text.TextUtilities" />
	<method signature="void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.ui.TextAnchor,double,org.jfree.ui.TextAnchor)" class="org.jfree.text.TextUtilities" />
	<method signature="org.jfree.text.TextBlock createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,org.jfree.text.TextMeasurer)" class="org.jfree.text.TextUtilities" />
	<method signature="java.awt.Shape calculateRotatedStringBounds(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.ui.TextAnchor,double,org.jfree.ui.TextAnchor)" class="org.jfree.text.TextUtilities" />
	<method signature="boolean getUseFontMetricsGetStringBounds()" class="org.jfree.text.TextUtilities" />
	<method signature="void setUseFontMetricsGetStringBounds(boolean)" class="org.jfree.text.TextUtilities" />
	<method signature="java.awt.geom.Rectangle2D drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.ui.TextAnchor)" class="org.jfree.text.TextUtilities" />
	<method signature="java.awt.Shape calculateRotatedStringBounds(java.lang.String,java.awt.Graphics2D,float,float,double,float,float)" class="org.jfree.text.TextUtilities" />
	<method signature="void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,double,float,float)" class="org.jfree.text.TextUtilities" />
	<method signature="void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.ui.TextAnchor,double,float,float)" class="org.jfree.text.TextUtilities" />
	<method signature="org.jfree.text.TextBlock createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,int,org.jfree.text.TextMeasurer)" class="org.jfree.text.TextUtilities" />
	<method signature="org.jfree.text.TextBlock createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint)" class="org.jfree.text.TextUtilities" />
	<method signature="java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)" class="org.jfree.text.TextUtilities" />
	<method signature="void drawRotatedString(java.lang.String,java.awt.Graphics2D,double,float,float)" class="org.jfree.text.TextUtilities" />
	<method signature="boolean isUseDrawRotatedStringWorkaround()" class="org.jfree.text.TextUtilities" />
	<method signature="void setUseDrawRotatedStringWorkaround(boolean)" class="org.jfree.text.TextUtilities" />
	<class name="org.apache.xerces.dom3.as.ASAttributeDeclaration" />
	<method signature="org.apache.xerces.dom3.as.ASDataType getDataType()" class="org.apache.xerces.dom3.as.ASAttributeDeclaration" />
	<method signature="org.apache.xerces.dom3.as.ASObjectList getOwnerElements()" class="org.apache.xerces.dom3.as.ASAttributeDeclaration" />
	<method signature="void setDataValue(java.lang.String)" class="org.apache.xerces.dom3.as.ASAttributeDeclaration" />
	<method signature="short getDefaultType()" class="org.apache.xerces.dom3.as.ASAttributeDeclaration" />
	<method signature="void setDataType(org.apache.xerces.dom3.as.ASDataType)" class="org.apache.xerces.dom3.as.ASAttributeDeclaration" />
	<method signature="void setOwnerElements(org.apache.xerces.dom3.as.ASObjectList)" class="org.apache.xerces.dom3.as.ASAttributeDeclaration" />
	<method signature="void setDefaultType(short)" class="org.apache.xerces.dom3.as.ASAttributeDeclaration" />
	<method signature="java.lang.String getDataValue()" class="org.apache.xerces.dom3.as.ASAttributeDeclaration" />
	<method signature="java.lang.String getEnumAttr()" class="org.apache.xerces.dom3.as.ASAttributeDeclaration" />
	<method signature="void setEnumAttr(java.lang.String)" class="org.apache.xerces.dom3.as.ASAttributeDeclaration" />
	<class name="org.apache.xerces.xpointer.XPointerHandler" />
	<method signature="void processingInstruction(java.lang.String,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xpointer.XPointerHandler" />
	<method signature="void endElement(org.apache.xerces.xni.QName,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xpointer.XPointerHandler" />
	<method signature="void setDocumentHandler(org.apache.xerces.xni.XMLDocumentHandler)" class="org.apache.xerces.xpointer.XPointerHandler" />
	<method signature="void startCDATA(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xpointer.XPointerHandler" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable,org.apache.xerces.xni.parser.XMLErrorHandler,org.apache.xerces.impl.XMLErrorReporter)" class="org.apache.xerces.xpointer.XPointerHandler" />
	<method signature="void ignorableWhitespace(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xpointer.XPointerHandler" />
	<method signature="java.util.ArrayList getPointerParts()" class="org.apache.xerces.xpointer.XPointerHandler" />
	<method signature="void endCDATA(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xpointer.XPointerHandler" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.xpointer.XPointerHandler" />
	<method signature="boolean isXPointerResolved()" class="org.apache.xerces.xpointer.XPointerHandler" />
	<method signature="void parseXPointer(java.lang.String)" class="org.apache.xerces.xpointer.XPointerHandler" />
	<method signature="void emptyElement(org.apache.xerces.xni.QName,org.apache.xerces.xni.XMLAttributes,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xpointer.XPointerHandler" />
	<method signature="void characters(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xpointer.XPointerHandler" />
	<method signature="boolean isFragmentResolved()" class="org.apache.xerces.xpointer.XPointerHandler" />
	<method signature="boolean isChildFragmentResolved()" class="org.apache.xerces.xpointer.XPointerHandler" />
	<method signature="boolean resolveXPointer(org.apache.xerces.xni.QName,org.apache.xerces.xni.XMLAttributes,org.apache.xerces.xni.Augmentations,int)" class="org.apache.xerces.xpointer.XPointerHandler" />
	<method signature="org.apache.xerces.xpointer.XPointerPart getXPointerPart()" class="org.apache.xerces.xpointer.XPointerHandler" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="org.apache.xerces.xpointer.XPointerHandler" />
	<method signature="void startElement(org.apache.xerces.xni.QName,org.apache.xerces.xni.XMLAttributes,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xpointer.XPointerHandler" />
	<method signature="void comment(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xpointer.XPointerHandler" />
	<class name="org.jfree.base.log.MemoryUsageMessage" />
	<method signature="java.lang.String toString()" class="org.jfree.base.log.MemoryUsageMessage" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.base.log.MemoryUsageMessage" />
	<class name="org.jfree.data.jdbc.JDBCPieDataset" />
	<method signature="void &lt;init&gt;(java.sql.Connection)" class="org.jfree.data.jdbc.JDBCPieDataset" />
	<method signature="void close()" class="org.jfree.data.jdbc.JDBCPieDataset" />
	<method signature="void executeQuery(java.lang.String)" class="org.jfree.data.jdbc.JDBCPieDataset" />
	<method signature="void executeQuery(java.sql.Connection,java.lang.String)" class="org.jfree.data.jdbc.JDBCPieDataset" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.jfree.data.jdbc.JDBCPieDataset" />
	<method signature="void &lt;init&gt;(java.sql.Connection,java.lang.String)" class="org.jfree.data.jdbc.JDBCPieDataset" />
	<class name="org.jfree.chart.labels.IntervalCategoryItemLabelGenerator" />
	<method signature="void &lt;init&gt;(java.lang.String,java.text.NumberFormat)" class="org.jfree.chart.labels.IntervalCategoryItemLabelGenerator" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.labels.IntervalCategoryItemLabelGenerator" />
	<method signature="void &lt;init&gt;(java.lang.String,java.text.DateFormat)" class="org.jfree.chart.labels.IntervalCategoryItemLabelGenerator" />
	<class name="com.google.zxing.qrcode.encoder.Encoder" />
	<method signature="com.google.zxing.qrcode.encoder.QRCode encode(java.lang.String,com.google.zxing.qrcode.decoder.ErrorCorrectionLevel)" class="com.google.zxing.qrcode.encoder.Encoder" />
	<method signature="com.google.zxing.qrcode.decoder.Mode chooseMode(java.lang.String)" class="com.google.zxing.qrcode.encoder.Encoder" />
	<method signature="com.google.zxing.qrcode.encoder.QRCode encode(java.lang.String,com.google.zxing.qrcode.decoder.ErrorCorrectionLevel,java.util.Map)" class="com.google.zxing.qrcode.encoder.Encoder" />
	<class name="org.apache.wml.dom.WMLWmlElementImpl" />
	<method signature="java.lang.String getXmlLang()" class="org.apache.wml.dom.WMLWmlElementImpl" />
	<method signature="void setXmlLang(java.lang.String)" class="org.apache.wml.dom.WMLWmlElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.wml.dom.WMLDocumentImpl,java.lang.String)" class="org.apache.wml.dom.WMLWmlElementImpl" />
	<method signature="java.lang.String getId()" class="org.apache.wml.dom.WMLWmlElementImpl" />
	<method signature="java.lang.String getClassName()" class="org.apache.wml.dom.WMLWmlElementImpl" />
	<method signature="void setClassName(java.lang.String)" class="org.apache.wml.dom.WMLWmlElementImpl" />
	<method signature="void setId(java.lang.String)" class="org.apache.wml.dom.WMLWmlElementImpl" />
	<class name="org.jfree.chart.annotations.CategoryLineAnnotation" />
	<method signature="int hashCode()" class="org.jfree.chart.annotations.CategoryLineAnnotation" />
	<method signature="void &lt;init&gt;(java.lang.Comparable,double,java.lang.Comparable,double,java.awt.Paint,java.awt.Stroke)" class="org.jfree.chart.annotations.CategoryLineAnnotation" />
	<method signature="java.awt.Paint getPaint()" class="org.jfree.chart.annotations.CategoryLineAnnotation" />
	<method signature="void setCategory2(java.lang.Comparable)" class="org.jfree.chart.annotations.CategoryLineAnnotation" />
	<method signature="void setValue1(double)" class="org.jfree.chart.annotations.CategoryLineAnnotation" />
	<method signature="void setCategory1(java.lang.Comparable)" class="org.jfree.chart.annotations.CategoryLineAnnotation" />
	<method signature="void setValue2(double)" class="org.jfree.chart.annotations.CategoryLineAnnotation" />
	<method signature="void setPaint(java.awt.Paint)" class="org.jfree.chart.annotations.CategoryLineAnnotation" />
	<method signature="java.lang.Comparable getCategory1()" class="org.jfree.chart.annotations.CategoryLineAnnotation" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.annotations.CategoryLineAnnotation" />
	<method signature="java.lang.Comparable getCategory2()" class="org.jfree.chart.annotations.CategoryLineAnnotation" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.annotations.CategoryLineAnnotation" />
	<method signature="void setStroke(java.awt.Stroke)" class="org.jfree.chart.annotations.CategoryLineAnnotation" />
	<method signature="void draw(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis)" class="org.jfree.chart.annotations.CategoryLineAnnotation" />
	<method signature="double getValue2()" class="org.jfree.chart.annotations.CategoryLineAnnotation" />
	<method signature="double getValue1()" class="org.jfree.chart.annotations.CategoryLineAnnotation" />
	<method signature="java.awt.Stroke getStroke()" class="org.jfree.chart.annotations.CategoryLineAnnotation" />
	<class name="org.w3c.dom.events.DocumentEvent" />
	<method signature="org.w3c.dom.events.Event createEvent(java.lang.String)" class="org.w3c.dom.events.DocumentEvent" />
	<class name="com.google.zxing.oned.rss.AbstractRSSReader" />
	<class name="org.apache.xml.serialize.LineSeparator" />
	<method signature="void &lt;init&gt;()" class="org.apache.xml.serialize.LineSeparator" />
	<class name="org.jfree.ui.PaintSample" />
	<method signature="java.awt.Dimension getPreferredSize()" class="org.jfree.ui.PaintSample" />
	<method signature="java.awt.Paint getPaint()" class="org.jfree.ui.PaintSample" />
	<method signature="void &lt;init&gt;(java.awt.Paint)" class="org.jfree.ui.PaintSample" />
	<method signature="void setPaint(java.awt.Paint)" class="org.jfree.ui.PaintSample" />
	<method signature="void paintComponent(java.awt.Graphics)" class="org.jfree.ui.PaintSample" />
	<class name="freemarker.template.utility.ToCanonical" />
	<method signature="void &lt;init&gt;()" class="freemarker.template.utility.ToCanonical" />
	<method signature="void main(java.lang.String[])" class="freemarker.template.utility.ToCanonical" />
	<class name="org.jfree.chart.entity.ChartEntity" />
	<method signature="java.lang.String getImageMapAreaTag(org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)" class="org.jfree.chart.entity.ChartEntity" />
	<method signature="int hashCode()" class="org.jfree.chart.entity.ChartEntity" />
	<method signature="void &lt;init&gt;(java.awt.Shape,java.lang.String,java.lang.String)" class="org.jfree.chart.entity.ChartEntity" />
	<method signature="java.lang.String getURLText()" class="org.jfree.chart.entity.ChartEntity" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.entity.ChartEntity" />
	<method signature="void setToolTipText(java.lang.String)" class="org.jfree.chart.entity.ChartEntity" />
	<method signature="void &lt;init&gt;(java.awt.Shape,java.lang.String)" class="org.jfree.chart.entity.ChartEntity" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.entity.ChartEntity" />
	<method signature="java.awt.Shape getArea()" class="org.jfree.chart.entity.ChartEntity" />
	<method signature="void setArea(java.awt.Shape)" class="org.jfree.chart.entity.ChartEntity" />
	<method signature="void setURLText(java.lang.String)" class="org.jfree.chart.entity.ChartEntity" />
	<method signature="java.lang.String toString()" class="org.jfree.chart.entity.ChartEntity" />
	<method signature="java.lang.String getToolTipText()" class="org.jfree.chart.entity.ChartEntity" />
	<method signature="void &lt;init&gt;(java.awt.Shape)" class="org.jfree.chart.entity.ChartEntity" />
	<method signature="java.lang.String getShapeType()" class="org.jfree.chart.entity.ChartEntity" />
	<method signature="java.lang.String getShapeCoords()" class="org.jfree.chart.entity.ChartEntity" />
	<class name="org.jfree.data.DataUtilities" />
	<method signature="double calculateColumnTotal(org.jfree.data.Values2D,int)" class="org.jfree.data.DataUtilities" />
	<method signature="double calculateColumnTotal(org.jfree.data.Values2D,int,int[])" class="org.jfree.data.DataUtilities" />
	<method signature="double[][] clone(double[][])" class="org.jfree.data.DataUtilities" />
	<method signature="java.lang.Number[][] createNumberArray2D(double[][])" class="org.jfree.data.DataUtilities" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.DataUtilities" />
	<method signature="boolean equal(double[][],double[][])" class="org.jfree.data.DataUtilities" />
	<method signature="double calculateRowTotal(org.jfree.data.Values2D,int)" class="org.jfree.data.DataUtilities" />
	<method signature="double calculateRowTotal(org.jfree.data.Values2D,int,int[])" class="org.jfree.data.DataUtilities" />
	<method signature="org.jfree.data.KeyedValues getCumulativePercentages(org.jfree.data.KeyedValues)" class="org.jfree.data.DataUtilities" />
	<method signature="java.lang.Number[] createNumberArray(double[])" class="org.jfree.data.DataUtilities" />
	<class name="org.xml.sax.XMLReader" />
	<method signature="void setDTDHandler(org.xml.sax.DTDHandler)" class="org.xml.sax.XMLReader" />
	<method signature="org.xml.sax.ErrorHandler getErrorHandler()" class="org.xml.sax.XMLReader" />
	<method signature="boolean getFeature(java.lang.String)" class="org.xml.sax.XMLReader" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="org.xml.sax.XMLReader" />
	<method signature="org.xml.sax.DTDHandler getDTDHandler()" class="org.xml.sax.XMLReader" />
	<method signature="void parse(org.xml.sax.InputSource)" class="org.xml.sax.XMLReader" />
	<method signature="org.xml.sax.EntityResolver getEntityResolver()" class="org.xml.sax.XMLReader" />
	<method signature="void setContentHandler(org.xml.sax.ContentHandler)" class="org.xml.sax.XMLReader" />
	<method signature="org.xml.sax.ContentHandler getContentHandler()" class="org.xml.sax.XMLReader" />
	<method signature="void setEntityResolver(org.xml.sax.EntityResolver)" class="org.xml.sax.XMLReader" />
	<method signature="void parse(java.lang.String)" class="org.xml.sax.XMLReader" />
	<method signature="void setFeature(java.lang.String,boolean)" class="org.xml.sax.XMLReader" />
	<method signature="java.lang.Object getProperty(java.lang.String)" class="org.xml.sax.XMLReader" />
	<method signature="void setErrorHandler(org.xml.sax.ErrorHandler)" class="org.xml.sax.XMLReader" />
	<class name="com.google.zxing.client.result.VCardResultParser" />
	<method signature="com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result)" class="com.google.zxing.client.result.VCardResultParser" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.client.result.VCardResultParser" />
	<method signature="com.google.zxing.client.result.AddressBookParsedResult parse(com.google.zxing.Result)" class="com.google.zxing.client.result.VCardResultParser" />
	<class name="org.apache.xerces.impl.XMLDocumentScannerImpl$XMLDeclDispatcher" />
	<method signature="boolean dispatch(boolean)" class="org.apache.xerces.impl.XMLDocumentScannerImpl$XMLDeclDispatcher" />
	<class name="org.w3c.dom.events.UIEvent" />
	<method signature="int getDetail()" class="org.w3c.dom.events.UIEvent" />
	<method signature="void initUIEvent(java.lang.String,boolean,boolean,org.w3c.dom.views.AbstractView,int)" class="org.w3c.dom.events.UIEvent" />
	<method signature="org.w3c.dom.views.AbstractView getView()" class="org.w3c.dom.events.UIEvent" />
	<class name="org.jfree.chart.PaintMap" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.PaintMap" />
	<method signature="java.awt.Paint getPaint(java.lang.Comparable)" class="org.jfree.chart.PaintMap" />
	<method signature="void clear()" class="org.jfree.chart.PaintMap" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.PaintMap" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.PaintMap" />
	<method signature="boolean containsKey(java.lang.Comparable)" class="org.jfree.chart.PaintMap" />
	<method signature="void put(java.lang.Comparable,java.awt.Paint)" class="org.jfree.chart.PaintMap" />
	<class name="org.jfree.chart.plot.RingPlot" />
	<method signature="org.jfree.chart.plot.PiePlotState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlot,java.lang.Integer,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.plot.RingPlot" />
	<method signature="void setSectionDepth(double)" class="org.jfree.chart.plot.RingPlot" />
	<method signature="void setSeparatorStroke(java.awt.Stroke)" class="org.jfree.chart.plot.RingPlot" />
	<method signature="double getOuterSeparatorExtension()" class="org.jfree.chart.plot.RingPlot" />
	<method signature="void setSeparatorsVisible(boolean)" class="org.jfree.chart.plot.RingPlot" />
	<method signature="double getInnerSeparatorExtension()" class="org.jfree.chart.plot.RingPlot" />
	<method signature="double getSectionDepth()" class="org.jfree.chart.plot.RingPlot" />
	<method signature="void &lt;init&gt;(org.jfree.data.general.PieDataset)" class="org.jfree.chart.plot.RingPlot" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.plot.RingPlot" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.plot.RingPlot" />
	<method signature="boolean getSeparatorsVisible()" class="org.jfree.chart.plot.RingPlot" />
	<method signature="void setSeparatorPaint(java.awt.Paint)" class="org.jfree.chart.plot.RingPlot" />
	<method signature="void setInnerSeparatorExtension(double)" class="org.jfree.chart.plot.RingPlot" />
	<method signature="void setOuterSeparatorExtension(double)" class="org.jfree.chart.plot.RingPlot" />
	<method signature="java.awt.Stroke getSeparatorStroke()" class="org.jfree.chart.plot.RingPlot" />
	<method signature="java.awt.Paint getSeparatorPaint()" class="org.jfree.chart.plot.RingPlot" />
	<class name="freemarker.template.utility.Collections12" />
	<method signature="java.util.Map singletonMap(java.lang.Object,java.lang.Object)" class="freemarker.template.utility.Collections12" />
	<method signature="java.util.List singletonList(java.lang.Object)" class="freemarker.template.utility.Collections12" />
	<class name="tourma.utility.Version" />
	<method signature="java.lang.String getProperty(java.lang.String)" class="tourma.utility.Version" />
	<method signature="tourma.utility.Version getSingleton()" class="tourma.utility.Version" />
	<class name="org.apache.xerces.impl.xs.XMLSchemaValidator$LocalIDKey" />
	<method signature="void &lt;init&gt;(org.apache.xerces.impl.xs.identity.IdentityConstraint,int)" class="org.apache.xerces.impl.xs.XMLSchemaValidator$LocalIDKey" />
	<method signature="int hashCode()" class="org.apache.xerces.impl.xs.XMLSchemaValidator$LocalIDKey" />
	<method signature="boolean equals(java.lang.Object)" class="org.apache.xerces.impl.xs.XMLSchemaValidator$LocalIDKey" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xs.XMLSchemaValidator$LocalIDKey" />
	<class name="org.jfree.data.general.DefaultPieDataset" />
	<method signature="int hashCode()" class="org.jfree.data.general.DefaultPieDataset" />
	<method signature="int getIndex(java.lang.Comparable)" class="org.jfree.data.general.DefaultPieDataset" />
	<method signature="java.lang.Number getValue(java.lang.Comparable)" class="org.jfree.data.general.DefaultPieDataset" />
	<method signature="void insertValue(int,java.lang.Comparable,double)" class="org.jfree.data.general.DefaultPieDataset" />
	<method signature="void sortByKeys(org.jfree.util.SortOrder)" class="org.jfree.data.general.DefaultPieDataset" />
	<method signature="void sortByValues(org.jfree.util.SortOrder)" class="org.jfree.data.general.DefaultPieDataset" />
	<method signature="void remove(java.lang.Comparable)" class="org.jfree.data.general.DefaultPieDataset" />
	<method signature="void &lt;init&gt;(org.jfree.data.KeyedValues)" class="org.jfree.data.general.DefaultPieDataset" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.general.DefaultPieDataset" />
	<method signature="java.util.List getKeys()" class="org.jfree.data.general.DefaultPieDataset" />
	<method signature="java.lang.Number getValue(int)" class="org.jfree.data.general.DefaultPieDataset" />
	<method signature="void clear()" class="org.jfree.data.general.DefaultPieDataset" />
	<method signature="int getItemCount()" class="org.jfree.data.general.DefaultPieDataset" />
	<method signature="void setValue(java.lang.Comparable,double)" class="org.jfree.data.general.DefaultPieDataset" />
	<method signature="void insertValue(int,java.lang.Comparable,java.lang.Number)" class="org.jfree.data.general.DefaultPieDataset" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.general.DefaultPieDataset" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.general.DefaultPieDataset" />
	<method signature="java.lang.Comparable getKey(int)" class="org.jfree.data.general.DefaultPieDataset" />
	<method signature="void setValue(java.lang.Comparable,java.lang.Number)" class="org.jfree.data.general.DefaultPieDataset" />
	<class name="org.jfree.chart.JFreeChart" />
	<method signature="void setBorderPaint(java.awt.Paint)" class="org.jfree.chart.JFreeChart" />
	<method signature="void setPadding(org.jfree.ui.RectangleInsets)" class="org.jfree.chart.JFreeChart" />
	<method signature="void setBorderStroke(java.awt.Stroke)" class="org.jfree.chart.JFreeChart" />
	<method signature="org.jfree.ui.RectangleInsets getPadding()" class="org.jfree.chart.JFreeChart" />
	<method signature="void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.ChartRenderingInfo)" class="org.jfree.chart.JFreeChart" />
	<method signature="boolean getAntiAlias()" class="org.jfree.chart.JFreeChart" />
	<method signature="java.awt.image.BufferedImage createBufferedImage(int,int,org.jfree.chart.ChartRenderingInfo)" class="org.jfree.chart.JFreeChart" />
	<method signature="void addChangeListener(org.jfree.chart.event.ChartChangeListener)" class="org.jfree.chart.JFreeChart" />
	<method signature="void setAntiAlias(boolean)" class="org.jfree.chart.JFreeChart" />
	<method signature="void removeSubtitle(org.jfree.chart.title.Title)" class="org.jfree.chart.JFreeChart" />
	<method signature="void &lt;init&gt;(org.jfree.chart.plot.Plot)" class="org.jfree.chart.JFreeChart" />
	<method signature="void setRenderingHints(java.awt.RenderingHints)" class="org.jfree.chart.JFreeChart" />
	<method signature="void setTitle(org.jfree.chart.title.TextTitle)" class="org.jfree.chart.JFreeChart" />
	<method signature="void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.ChartRenderingInfo)" class="org.jfree.chart.JFreeChart" />
	<method signature="boolean isNotify()" class="org.jfree.chart.JFreeChart" />
	<method signature="void plotChanged(org.jfree.chart.event.PlotChangeEvent)" class="org.jfree.chart.JFreeChart" />
	<method signature="void clearSubtitles()" class="org.jfree.chart.JFreeChart" />
	<method signature="java.awt.Paint getBackgroundPaint()" class="org.jfree.chart.JFreeChart" />
	<method signature="org.jfree.chart.title.TextTitle getTitle()" class="org.jfree.chart.JFreeChart" />
	<method signature="void setSubtitles(java.util.List)" class="org.jfree.chart.JFreeChart" />
	<method signature="java.awt.image.BufferedImage createBufferedImage(int,int,double,double,org.jfree.chart.ChartRenderingInfo)" class="org.jfree.chart.JFreeChart" />
	<method signature="int getSubtitleCount()" class="org.jfree.chart.JFreeChart" />
	<method signature="void setBorderVisible(boolean)" class="org.jfree.chart.JFreeChart" />
	<method signature="void setTextAntiAlias(java.lang.Object)" class="org.jfree.chart.JFreeChart" />
	<method signature="void &lt;init&gt;(java.lang.String,org.jfree.chart.plot.Plot)" class="org.jfree.chart.JFreeChart" />
	<method signature="org.jfree.chart.plot.Plot getPlot()" class="org.jfree.chart.JFreeChart" />
	<method signature="org.jfree.chart.title.Title getSubtitle(int)" class="org.jfree.chart.JFreeChart" />
	<method signature="java.lang.Object getTextAntiAlias()" class="org.jfree.chart.JFreeChart" />
	<method signature="java.awt.Paint getBorderPaint()" class="org.jfree.chart.JFreeChart" />
	<method signature="int getBackgroundImageAlignment()" class="org.jfree.chart.JFreeChart" />
	<method signature="void addLegend(org.jfree.chart.title.LegendTitle)" class="org.jfree.chart.JFreeChart" />
	<method signature="void addSubtitle(int,org.jfree.chart.title.Title)" class="org.jfree.chart.JFreeChart" />
	<method signature="void setBackgroundImageAlpha(float)" class="org.jfree.chart.JFreeChart" />
	<method signature="void setTitle(java.lang.String)" class="org.jfree.chart.JFreeChart" />
	<method signature="void setBackgroundImage(java.awt.Image)" class="org.jfree.chart.JFreeChart" />
	<method signature="org.jfree.chart.plot.CategoryPlot getCategoryPlot()" class="org.jfree.chart.JFreeChart" />
	<method signature="void setBackgroundImageAlignment(int)" class="org.jfree.chart.JFreeChart" />
	<method signature="float getBackgroundImageAlpha()" class="org.jfree.chart.JFreeChart" />
	<method signature="java.awt.RenderingHints getRenderingHints()" class="org.jfree.chart.JFreeChart" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.JFreeChart" />
	<method signature="void addSubtitle(org.jfree.chart.title.Title)" class="org.jfree.chart.JFreeChart" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.JFreeChart" />
	<method signature="java.awt.image.BufferedImage createBufferedImage(int,int)" class="org.jfree.chart.JFreeChart" />
	<method signature="void main(java.lang.String[])" class="org.jfree.chart.JFreeChart" />
	<method signature="java.util.List getSubtitles()" class="org.jfree.chart.JFreeChart" />
	<method signature="java.awt.Image getBackgroundImage()" class="org.jfree.chart.JFreeChart" />
	<method signature="void removeLegend()" class="org.jfree.chart.JFreeChart" />
	<method signature="org.jfree.chart.plot.XYPlot getXYPlot()" class="org.jfree.chart.JFreeChart" />
	<method signature="java.awt.Stroke getBorderStroke()" class="org.jfree.chart.JFreeChart" />
	<method signature="org.jfree.chart.title.LegendTitle getLegend(int)" class="org.jfree.chart.JFreeChart" />
	<method signature="void fireChartChanged()" class="org.jfree.chart.JFreeChart" />
	<method signature="void &lt;init&gt;(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)" class="org.jfree.chart.JFreeChart" />
	<method signature="boolean isBorderVisible()" class="org.jfree.chart.JFreeChart" />
	<method signature="void setTextAntiAlias(boolean)" class="org.jfree.chart.JFreeChart" />
	<method signature="void addProgressListener(org.jfree.chart.event.ChartProgressListener)" class="org.jfree.chart.JFreeChart" />
	<method signature="void setNotify(boolean)" class="org.jfree.chart.JFreeChart" />
	<method signature="void handleClick(int,int,org.jfree.chart.ChartRenderingInfo)" class="org.jfree.chart.JFreeChart" />
	<method signature="void removeProgressListener(org.jfree.chart.event.ChartProgressListener)" class="org.jfree.chart.JFreeChart" />
	<method signature="void removeChangeListener(org.jfree.chart.event.ChartChangeListener)" class="org.jfree.chart.JFreeChart" />
	<method signature="java.awt.image.BufferedImage createBufferedImage(int,int,int,org.jfree.chart.ChartRenderingInfo)" class="org.jfree.chart.JFreeChart" />
	<method signature="void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" class="org.jfree.chart.JFreeChart" />
	<method signature="org.jfree.chart.title.LegendTitle getLegend()" class="org.jfree.chart.JFreeChart" />
	<method signature="void titleChanged(org.jfree.chart.event.TitleChangeEvent)" class="org.jfree.chart.JFreeChart" />
	<method signature="void setBackgroundPaint(java.awt.Paint)" class="org.jfree.chart.JFreeChart" />
	<class name="freemarker.ext.beans.InvalidPropertyException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="freemarker.ext.beans.InvalidPropertyException" />
	<class name="org.apache.xerces.dom.ParentNode" />
	<method signature="org.w3c.dom.NodeList getChildNodes()" class="org.apache.xerces.dom.ParentNode" />
	<method signature="org.w3c.dom.Node cloneNode(boolean)" class="org.apache.xerces.dom.ParentNode" />
	<method signature="void setReadOnly(boolean,boolean)" class="org.apache.xerces.dom.ParentNode" />
	<method signature="int getLength()" class="org.apache.xerces.dom.ParentNode" />
	<method signature="org.w3c.dom.Node getLastChild()" class="org.apache.xerces.dom.ParentNode" />
	<method signature="org.w3c.dom.Node item(int)" class="org.apache.xerces.dom.ParentNode" />
	<method signature="org.w3c.dom.Node insertBefore(org.w3c.dom.Node,org.w3c.dom.Node)" class="org.apache.xerces.dom.ParentNode" />
	<method signature="boolean isEqualNode(org.w3c.dom.Node)" class="org.apache.xerces.dom.ParentNode" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.dom.ParentNode" />
	<method signature="org.w3c.dom.Node removeChild(org.w3c.dom.Node)" class="org.apache.xerces.dom.ParentNode" />
	<method signature="java.lang.String getTextContent()" class="org.apache.xerces.dom.ParentNode" />
	<method signature="void normalize()" class="org.apache.xerces.dom.ParentNode" />
	<method signature="org.w3c.dom.Node getFirstChild()" class="org.apache.xerces.dom.ParentNode" />
	<method signature="org.w3c.dom.Document getOwnerDocument()" class="org.apache.xerces.dom.ParentNode" />
	<method signature="org.w3c.dom.Node replaceChild(org.w3c.dom.Node,org.w3c.dom.Node)" class="org.apache.xerces.dom.ParentNode" />
	<method signature="void setTextContent(java.lang.String)" class="org.apache.xerces.dom.ParentNode" />
	<method signature="boolean hasChildNodes()" class="org.apache.xerces.dom.ParentNode" />
	<class name="com.toedter.calendar.JDayChooser" />
	<method signature="void setSundayForeground(java.awt.Color)" class="com.toedter.calendar.JDayChooser" />
	<method signature="java.util.Locale getLocale()" class="com.toedter.calendar.JDayChooser" />
	<method signature="void addDateEvaluator(com.toedter.calendar.IDateEvaluator)" class="com.toedter.calendar.JDayChooser" />
	<method signature="void keyPressed(java.awt.event.KeyEvent)" class="com.toedter.calendar.JDayChooser" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="com.toedter.calendar.JDayChooser" />
	<method signature="void setCalendar(java.util.Calendar)" class="com.toedter.calendar.JDayChooser" />
	<method signature="void &lt;init&gt;()" class="com.toedter.calendar.JDayChooser" />
	<method signature="java.util.Date setMaxSelectableDate(java.util.Date)" class="com.toedter.calendar.JDayChooser" />
	<method signature="void setWeekdayForeground(java.awt.Color)" class="com.toedter.calendar.JDayChooser" />
	<method signature="void setDecorationBordersVisible(boolean)" class="com.toedter.calendar.JDayChooser" />
	<method signature="boolean isDecorationBordersVisible()" class="com.toedter.calendar.JDayChooser" />
	<method signature="java.util.Date setMinSelectableDate(java.util.Date)" class="com.toedter.calendar.JDayChooser" />
	<method signature="java.awt.Color getWeekdayForeground()" class="com.toedter.calendar.JDayChooser" />
	<method signature="void setDecorationBackgroundVisible(boolean)" class="com.toedter.calendar.JDayChooser" />
	<method signature="void setSelectableDateRange(java.util.Date,java.util.Date)" class="com.toedter.calendar.JDayChooser" />
	<method signature="java.util.Date getMaxSelectableDate()" class="com.toedter.calendar.JDayChooser" />
	<method signature="javax.swing.JPanel getDayPanel()" class="com.toedter.calendar.JDayChooser" />
	<method signature="java.util.Date getMinSelectableDate()" class="com.toedter.calendar.JDayChooser" />
	<method signature="void keyTyped(java.awt.event.KeyEvent)" class="com.toedter.calendar.JDayChooser" />
	<method signature="void setWeekOfYearVisible(boolean)" class="com.toedter.calendar.JDayChooser" />
	<method signature="void setDecorationBackgroundColor(java.awt.Color)" class="com.toedter.calendar.JDayChooser" />
	<method signature="void setLocale(java.util.Locale)" class="com.toedter.calendar.JDayChooser" />
	<method signature="void setDay(int)" class="com.toedter.calendar.JDayChooser" />
	<method signature="void setEnabled(boolean)" class="com.toedter.calendar.JDayChooser" />
	<method signature="void focusLost(java.awt.event.FocusEvent)" class="com.toedter.calendar.JDayChooser" />
	<method signature="void setFocus()" class="com.toedter.calendar.JDayChooser" />
	<method signature="java.awt.Color getSundayForeground()" class="com.toedter.calendar.JDayChooser" />
	<method signature="java.awt.Color getDecorationBackgroundColor()" class="com.toedter.calendar.JDayChooser" />
	<method signature="boolean isDecorationBackgroundVisible()" class="com.toedter.calendar.JDayChooser" />
	<method signature="void setFont(java.awt.Font)" class="com.toedter.calendar.JDayChooser" />
	<method signature="void main(java.lang.String[])" class="com.toedter.calendar.JDayChooser" />
	<method signature="void &lt;init&gt;(boolean)" class="com.toedter.calendar.JDayChooser" />
	<method signature="int getDay()" class="com.toedter.calendar.JDayChooser" />
	<method signature="boolean isWeekOfYearVisible()" class="com.toedter.calendar.JDayChooser" />
	<method signature="void setDayBordersVisible(boolean)" class="com.toedter.calendar.JDayChooser" />
	<method signature="void setAlwaysFireDayProperty(boolean)" class="com.toedter.calendar.JDayChooser" />
	<method signature="void keyReleased(java.awt.event.KeyEvent)" class="com.toedter.calendar.JDayChooser" />
	<method signature="void updateUI()" class="com.toedter.calendar.JDayChooser" />
	<method signature="void setYear(int)" class="com.toedter.calendar.JDayChooser" />
	<method signature="boolean isDayBordersVisible()" class="com.toedter.calendar.JDayChooser" />
	<method signature="void setMaxDayCharacters(int)" class="com.toedter.calendar.JDayChooser" />
	<method signature="void removeDateEvaluator(com.toedter.calendar.IDateEvaluator)" class="com.toedter.calendar.JDayChooser" />
	<method signature="void setForeground(java.awt.Color)" class="com.toedter.calendar.JDayChooser" />
	<method signature="void focusGained(java.awt.event.FocusEvent)" class="com.toedter.calendar.JDayChooser" />
	<method signature="int getMaxDayCharacters()" class="com.toedter.calendar.JDayChooser" />
	<method signature="void setMonth(int)" class="com.toedter.calendar.JDayChooser" />
	<class name="org.apache.xerces.impl.xs.XMLSchemaValidator$ValueStoreCache" />
	<method signature="void initValueStoresFor(org.apache.xerces.impl.xs.XSElementDecl,org.apache.xerces.impl.xs.identity.FieldActivator)" class="org.apache.xerces.impl.xs.XMLSchemaValidator$ValueStoreCache" />
	<method signature="void &lt;init&gt;(org.apache.xerces.impl.xs.XMLSchemaValidator)" class="org.apache.xerces.impl.xs.XMLSchemaValidator$ValueStoreCache" />
	<method signature="void startDocument()" class="org.apache.xerces.impl.xs.XMLSchemaValidator$ValueStoreCache" />
	<method signature="void transplant(org.apache.xerces.impl.xs.identity.IdentityConstraint,int)" class="org.apache.xerces.impl.xs.XMLSchemaValidator$ValueStoreCache" />
	<method signature="void endDocument()" class="org.apache.xerces.impl.xs.XMLSchemaValidator$ValueStoreCache" />
	<method signature="org.apache.xerces.impl.xs.XMLSchemaValidator$ValueStoreBase getGlobalValueStoreFor(org.apache.xerces.impl.xs.identity.IdentityConstraint)" class="org.apache.xerces.impl.xs.XMLSchemaValidator$ValueStoreCache" />
	<method signature="java.lang.String toString()" class="org.apache.xerces.impl.xs.XMLSchemaValidator$ValueStoreCache" />
	<method signature="void endElement()" class="org.apache.xerces.impl.xs.XMLSchemaValidator$ValueStoreCache" />
	<method signature="org.apache.xerces.impl.xs.XMLSchemaValidator$ValueStoreBase getValueStoreFor(org.apache.xerces.impl.xs.identity.IdentityConstraint,int)" class="org.apache.xerces.impl.xs.XMLSchemaValidator$ValueStoreCache" />
	<method signature="void startElement()" class="org.apache.xerces.impl.xs.XMLSchemaValidator$ValueStoreCache" />
	<class name="org.jfree.chart.plot.dial.StandardDialFrame" />
	<method signature="int hashCode()" class="org.jfree.chart.plot.dial.StandardDialFrame" />
	<method signature="java.awt.Paint getBackgroundPaint()" class="org.jfree.chart.plot.dial.StandardDialFrame" />
	<method signature="java.awt.Shape getWindow(java.awt.geom.Rectangle2D)" class="org.jfree.chart.plot.dial.StandardDialFrame" />
	<method signature="boolean isClippedToWindow()" class="org.jfree.chart.plot.dial.StandardDialFrame" />
	<method signature="java.awt.Paint getForegroundPaint()" class="org.jfree.chart.plot.dial.StandardDialFrame" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.plot.dial.StandardDialFrame" />
	<method signature="void setRadius(double)" class="org.jfree.chart.plot.dial.StandardDialFrame" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.plot.dial.StandardDialFrame" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.plot.dial.StandardDialFrame" />
	<method signature="void setStroke(java.awt.Stroke)" class="org.jfree.chart.plot.dial.StandardDialFrame" />
	<method signature="void setForegroundPaint(java.awt.Paint)" class="org.jfree.chart.plot.dial.StandardDialFrame" />
	<method signature="double getRadius()" class="org.jfree.chart.plot.dial.StandardDialFrame" />
	<method signature="void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)" class="org.jfree.chart.plot.dial.StandardDialFrame" />
	<method signature="java.awt.Stroke getStroke()" class="org.jfree.chart.plot.dial.StandardDialFrame" />
	<method signature="void setBackgroundPaint(java.awt.Paint)" class="org.jfree.chart.plot.dial.StandardDialFrame" />
	<class name="org.jfree.data.general.KeyedValueDataset" />
	<class name="javax.xml.transform.stream.StreamResult" />
	<method signature="java.lang.String getSystemId()" class="javax.xml.transform.stream.StreamResult" />
	<method signature="void setSystemId(java.lang.String)" class="javax.xml.transform.stream.StreamResult" />
	<method signature="java.io.Writer getWriter()" class="javax.xml.transform.stream.StreamResult" />
	<method signature="void &lt;init&gt;(java.io.OutputStream)" class="javax.xml.transform.stream.StreamResult" />
	<method signature="void setSystemId(java.io.File)" class="javax.xml.transform.stream.StreamResult" />
	<method signature="void &lt;init&gt;(java.io.File)" class="javax.xml.transform.stream.StreamResult" />
	<method signature="void setWriter(java.io.Writer)" class="javax.xml.transform.stream.StreamResult" />
	<method signature="void &lt;init&gt;()" class="javax.xml.transform.stream.StreamResult" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="javax.xml.transform.stream.StreamResult" />
	<method signature="void setOutputStream(java.io.OutputStream)" class="javax.xml.transform.stream.StreamResult" />
	<method signature="void &lt;init&gt;(java.io.Writer)" class="javax.xml.transform.stream.StreamResult" />
	<method signature="java.io.OutputStream getOutputStream()" class="javax.xml.transform.stream.StreamResult" />
	<class name="org.jfree.data.category.IntervalCategoryDataset" />
	<method signature="java.lang.Number getStartValue(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.category.IntervalCategoryDataset" />
	<method signature="java.lang.Number getEndValue(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.category.IntervalCategoryDataset" />
	<method signature="java.lang.Number getStartValue(int,int)" class="org.jfree.data.category.IntervalCategoryDataset" />
	<method signature="java.lang.Number getEndValue(int,int)" class="org.jfree.data.category.IntervalCategoryDataset" />
	<class name="org.apache.xerces.util.SAXMessageFormatter" />
	<method signature="java.lang.String formatMessage(java.util.Locale,java.lang.String,java.lang.Object[])" class="org.apache.xerces.util.SAXMessageFormatter" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.util.SAXMessageFormatter" />
	<class name="org.jfree.data.gantt.XYTaskDataset" />
	<method signature="double getEndXValue(int,int)" class="org.jfree.data.gantt.XYTaskDataset" />
	<method signature="org.jfree.data.gantt.TaskSeriesCollection getTasks()" class="org.jfree.data.gantt.XYTaskDataset" />
	<method signature="double getSeriesWidth()" class="org.jfree.data.gantt.XYTaskDataset" />
	<method signature="java.lang.Number getX(int,int)" class="org.jfree.data.gantt.XYTaskDataset" />
	<method signature="double getStartYValue(int,int)" class="org.jfree.data.gantt.XYTaskDataset" />
	<method signature="void &lt;init&gt;(org.jfree.data.gantt.TaskSeriesCollection)" class="org.jfree.data.gantt.XYTaskDataset" />
	<method signature="java.lang.Number getY(int,int)" class="org.jfree.data.gantt.XYTaskDataset" />
	<method signature="int getSeriesCount()" class="org.jfree.data.gantt.XYTaskDataset" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.gantt.XYTaskDataset" />
	<method signature="java.lang.Comparable getSeriesKey(int)" class="org.jfree.data.gantt.XYTaskDataset" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.gantt.XYTaskDataset" />
	<method signature="java.lang.Number getEndX(int,int)" class="org.jfree.data.gantt.XYTaskDataset" />
	<method signature="int getItemCount(int)" class="org.jfree.data.gantt.XYTaskDataset" />
	<method signature="java.lang.Number getEndY(int,int)" class="org.jfree.data.gantt.XYTaskDataset" />
	<method signature="double getXValue(int,int)" class="org.jfree.data.gantt.XYTaskDataset" />
	<method signature="void setSeriesWidth(double)" class="org.jfree.data.gantt.XYTaskDataset" />
	<method signature="void datasetChanged(org.jfree.data.general.DatasetChangeEvent)" class="org.jfree.data.gantt.XYTaskDataset" />
	<method signature="boolean isTransposed()" class="org.jfree.data.gantt.XYTaskDataset" />
	<method signature="double getEndYValue(int,int)" class="org.jfree.data.gantt.XYTaskDataset" />
	<method signature="double getStartXValue(int,int)" class="org.jfree.data.gantt.XYTaskDataset" />
	<method signature="void setTransposed(boolean)" class="org.jfree.data.gantt.XYTaskDataset" />
	<method signature="java.lang.Number getStartX(int,int)" class="org.jfree.data.gantt.XYTaskDataset" />
	<method signature="java.lang.Number getStartY(int,int)" class="org.jfree.data.gantt.XYTaskDataset" />
	<method signature="double getYValue(int,int)" class="org.jfree.data.gantt.XYTaskDataset" />
	<class name="org.apache.wml.dom.WMLUElementImpl" />
	<method signature="java.lang.String getXmlLang()" class="org.apache.wml.dom.WMLUElementImpl" />
	<method signature="void setXmlLang(java.lang.String)" class="org.apache.wml.dom.WMLUElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.wml.dom.WMLDocumentImpl,java.lang.String)" class="org.apache.wml.dom.WMLUElementImpl" />
	<method signature="java.lang.String getId()" class="org.apache.wml.dom.WMLUElementImpl" />
	<method signature="java.lang.String getClassName()" class="org.apache.wml.dom.WMLUElementImpl" />
	<method signature="void setClassName(java.lang.String)" class="org.apache.wml.dom.WMLUElementImpl" />
	<method signature="void setId(java.lang.String)" class="org.apache.wml.dom.WMLUElementImpl" />
	<class name="org.jfree.util.AbstractObjectList" />
	<method signature="int size()" class="org.jfree.util.AbstractObjectList" />
	<method signature="int hashCode()" class="org.jfree.util.AbstractObjectList" />
	<method signature="java.lang.Object clone()" class="org.jfree.util.AbstractObjectList" />
	<method signature="void clear()" class="org.jfree.util.AbstractObjectList" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.util.AbstractObjectList" />
	<class name="com.hexidec.util.Base64Codec" />
	<method signature="byte[] decodeBytes(byte[])" class="com.hexidec.util.Base64Codec" />
	<method signature="java.lang.String encode(byte[])" class="com.hexidec.util.Base64Codec" />
	<method signature="void &lt;init&gt;()" class="com.hexidec.util.Base64Codec" />
	<method signature="java.lang.String encode(java.lang.String)" class="com.hexidec.util.Base64Codec" />
	<method signature="java.lang.String decode(java.lang.String)" class="com.hexidec.util.Base64Codec" />
	<method signature="byte[] decodeBytes(java.lang.String)" class="com.hexidec.util.Base64Codec" />
	<class name="org.jfree.data.xy.XYIntervalDataItem" />
	<method signature="double getYValue()" class="org.jfree.data.xy.XYIntervalDataItem" />
	<method signature="double getXLowValue()" class="org.jfree.data.xy.XYIntervalDataItem" />
	<method signature="double getXHighValue()" class="org.jfree.data.xy.XYIntervalDataItem" />
	<method signature="double getYHighValue()" class="org.jfree.data.xy.XYIntervalDataItem" />
	<method signature="double getYLowValue()" class="org.jfree.data.xy.XYIntervalDataItem" />
	<method signature="void &lt;init&gt;(double,double,double,double,double,double)" class="org.jfree.data.xy.XYIntervalDataItem" />
	<method signature="java.lang.Double getX()" class="org.jfree.data.xy.XYIntervalDataItem" />
	<class name="org.apache.html.dom.HTMLDListElementImpl" />
	<method signature="void setCompact(boolean)" class="org.apache.html.dom.HTMLDListElementImpl" />
	<method signature="boolean getCompact()" class="org.apache.html.dom.HTMLDListElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLDListElementImpl" />
	<class name="javax.xml.bind.MarshalException" />
	<method signature="void &lt;init&gt;(java.lang.Throwable)" class="javax.xml.bind.MarshalException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Throwable)" class="javax.xml.bind.MarshalException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.Throwable)" class="javax.xml.bind.MarshalException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="javax.xml.bind.MarshalException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="javax.xml.bind.MarshalException" />
	<class name="com.google.zxing.client.result.ProductResultParser" />
	<method signature="com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result)" class="com.google.zxing.client.result.ProductResultParser" />
	<method signature="com.google.zxing.client.result.ProductParsedResult parse(com.google.zxing.Result)" class="com.google.zxing.client.result.ProductResultParser" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.client.result.ProductResultParser" />
	<class name="org.jfree.ui.StandardDialog" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="org.jfree.ui.StandardDialog" />
	<method signature="void &lt;init&gt;(java.awt.Frame,java.lang.String,boolean)" class="org.jfree.ui.StandardDialog" />
	<method signature="boolean isCancelled()" class="org.jfree.ui.StandardDialog" />
	<method signature="void &lt;init&gt;(java.awt.Dialog,java.lang.String,boolean)" class="org.jfree.ui.StandardDialog" />
	<class name="org.apache.xml.serialize.DOMSerializerImpl" />
	<method signature="java.lang.Object getParameter(java.lang.String)" class="org.apache.xml.serialize.DOMSerializerImpl" />
	<method signature="void setParameter(java.lang.String,java.lang.Object)" class="org.apache.xml.serialize.DOMSerializerImpl" />
	<method signature="boolean canSetParameter(java.lang.String,java.lang.Object)" class="org.apache.xml.serialize.DOMSerializerImpl" />
	<method signature="org.w3c.dom.DOMStringList getParameterNames()" class="org.apache.xml.serialize.DOMSerializerImpl" />
	<method signature="void setNewLine(java.lang.String)" class="org.apache.xml.serialize.DOMSerializerImpl" />
	<method signature="org.w3c.dom.ls.LSSerializerFilter getFilter()" class="org.apache.xml.serialize.DOMSerializerImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xml.serialize.DOMSerializerImpl" />
	<method signature="java.lang.String getNewLine()" class="org.apache.xml.serialize.DOMSerializerImpl" />
	<method signature="boolean writeToURI(org.w3c.dom.Node,java.lang.String)" class="org.apache.xml.serialize.DOMSerializerImpl" />
	<method signature="org.w3c.dom.DOMConfiguration getDomConfig()" class="org.apache.xml.serialize.DOMSerializerImpl" />
	<method signature="java.lang.String writeToString(org.w3c.dom.Node)" class="org.apache.xml.serialize.DOMSerializerImpl" />
	<method signature="void setFilter(org.w3c.dom.ls.LSSerializerFilter)" class="org.apache.xml.serialize.DOMSerializerImpl" />
	<method signature="boolean write(org.w3c.dom.Node,org.w3c.dom.ls.LSOutput)" class="org.apache.xml.serialize.DOMSerializerImpl" />
	<class name="org.apache.xerces.dom.ASDOMImplementationImpl" />
	<method signature="org.w3c.dom.DOMImplementation getDOMImplementation()" class="org.apache.xerces.dom.ASDOMImplementationImpl" />
	<method signature="org.apache.xerces.dom3.as.ASModel createAS(boolean)" class="org.apache.xerces.dom.ASDOMImplementationImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.dom.ASDOMImplementationImpl" />
	<method signature="org.apache.xerces.dom3.as.DOMASBuilder createDOMASBuilder()" class="org.apache.xerces.dom.ASDOMImplementationImpl" />
	<method signature="org.apache.xerces.dom3.as.DOMASWriter createDOMASWriter()" class="org.apache.xerces.dom.ASDOMImplementationImpl" />
	<class name="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder appendln(java.lang.StringBuilder)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder ensureCapacity(int)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder append(java.lang.CharSequence)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder deleteAll(java.lang.String)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder append(double)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="java.lang.StringBuilder toStringBuilder()" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder appendSeparator(char)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder setLength(int)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder appendln(double)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder delete(int,int)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="int indexOf(java.lang.String)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="char[] toCharArray()" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder append(java.lang.StringBuilder)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder insert(int,int)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder deleteFirst(java.lang.String)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder replaceAll(char,char)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="java.lang.String rightString(int)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="java.lang.String substring(int)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder append(org.apache.commons.lang3.text.StrBuilder)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="int indexOf(org.apache.commons.lang3.text.StrMatcher)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder append(char[],int,int)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder trim()" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(int,int,char)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder appendSeparator(java.lang.String,java.lang.String)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="int indexOf(java.lang.String,int)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder insert(int,char[])" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder appendln(char[],int,int)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder minimizeCapacity()" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder appendln(org.apache.commons.lang3.text.StrBuilder)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="void &lt;init&gt;(int)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="int lastIndexOf(char)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="char[] getChars(char[])" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder appendAll(java.lang.Object[])" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="java.lang.Appendable append(java.lang.CharSequence,int,int)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder replaceAll(org.apache.commons.lang3.text.StrMatcher,java.lang.String)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="java.io.Writer asWriter()" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="void getChars(int,int,char[],int)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="char[] toCharArray(int,int)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder appendln(java.lang.Object)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder append(java.nio.CharBuffer)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder append(java.lang.StringBuffer)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder replaceAll(java.lang.String,java.lang.String)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder append(boolean)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder append(int)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder appendln(boolean)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder appendln(int)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder appendln(java.lang.StringBuffer)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="int lastIndexOf(java.lang.String,int)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder append(java.lang.Object)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder setNullText(java.lang.String)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="int lastIndexOf(org.apache.commons.lang3.text.StrMatcher)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="boolean endsWith(java.lang.String)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="java.lang.String getNewLineText()" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="boolean isEmpty()" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="java.lang.Appendable append(char)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder appendln(char)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder insert(int,char[],int,int)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder append(char)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder insert(int,boolean)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="int indexOf(char)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="java.lang.Appendable append(java.lang.CharSequence)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="boolean contains(java.lang.String)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="int length()" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder reverse()" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="java.lang.Object build()" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder appendAll(java.lang.Iterable)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder deleteFirst(org.apache.commons.lang3.text.StrMatcher)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="int lastIndexOf(java.lang.String)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="int hashCode()" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="java.lang.String leftString(int)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder appendAll(java.util.Iterator)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder deleteAll(org.apache.commons.lang3.text.StrMatcher)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="java.lang.CharSequence subSequence(int,int)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(int,int,char)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder appendSeparator(char,char)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder append(java.lang.String,int,int)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder appendln(java.lang.String,int,int)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="java.lang.String toString()" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder insert(int,char)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="int size()" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder insert(int,java.lang.Object)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder appendln(char[])" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder appendNull()" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder append(char[])" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder appendSeparator(char,int)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="java.lang.String substring(int,int)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="int lastIndexOf(org.apache.commons.lang3.text.StrMatcher,int)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder replaceFirst(char,char)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="java.lang.String midString(int,int)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="int indexOf(char,int)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder append(java.lang.String)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder appendWithSeparators(java.lang.Iterable,java.lang.String)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="boolean startsWith(java.lang.String)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder appendln(java.lang.String)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder appendln(java.lang.String,java.lang.Object[])" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="java.io.Reader asReader()" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder insert(int,double)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder setNewLineText(java.lang.String)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder appendWithSeparators(java.util.Iterator,java.lang.String)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder append(java.lang.String,java.lang.Object[])" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="boolean contains(org.apache.commons.lang3.text.StrMatcher)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder deleteCharAt(int)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder insert(int,java.lang.String)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="boolean equalsIgnoreCase(org.apache.commons.lang3.text.StrBuilder)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder setCharAt(int,char)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder replaceFirst(org.apache.commons.lang3.text.StrMatcher,java.lang.String)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder replaceFirst(java.lang.String,java.lang.String)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder replace(int,int,java.lang.String)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder appendln(java.lang.StringBuffer,int,int)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder appendSeparator(java.lang.String)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder insert(int,long)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder appendln(float)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder appendWithSeparators(java.lang.Object[],java.lang.String)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder append(float)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder append(java.lang.StringBuffer,int,int)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder appendPadding(int,char)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder deleteAll(char)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="boolean equals(org.apache.commons.lang3.text.StrBuilder)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder replace(org.apache.commons.lang3.text.StrMatcher,java.lang.String,int,int,int)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="boolean equals(java.lang.Object)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder clear()" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder deleteFirst(char)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder append(java.lang.CharSequence,int,int)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder append(long)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="int indexOf(org.apache.commons.lang3.text.StrMatcher,int)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder append(org.apache.commons.lang3.text.StrBuilder,int,int)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrTokenizer asTokenizer()" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder appendln(org.apache.commons.lang3.text.StrBuilder,int,int)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="java.lang.StringBuffer toStringBuffer()" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder append(java.nio.CharBuffer,int,int)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="boolean contains(char)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder appendln(long)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="java.lang.String getNullText()" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="int readFrom(java.lang.Readable)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder appendln(java.lang.StringBuilder,int,int)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="void appendTo(java.lang.Appendable)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="java.lang.String build()" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder appendNewLine()" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder append(java.lang.StringBuilder,int,int)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="char charAt(int)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="int capacity()" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder appendSeparator(java.lang.String,int)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="org.apache.commons.lang3.text.StrBuilder insert(int,float)" class="org.apache.commons.lang3.text.StrBuilder" />
	<method signature="int lastIndexOf(char,int)" class="org.apache.commons.lang3.text.StrBuilder" />
	<class name="freemarker.template.TemplateExceptionHandler" />
	<method signature="void handleTemplateException(freemarker.template.TemplateException,freemarker.core.Environment,java.io.Writer)" class="freemarker.template.TemplateExceptionHandler" />
	<class name="org.apache.xerces.xpointer.XPointerPart" />
	<method signature="boolean isFragmentResolved()" class="org.apache.xerces.xpointer.XPointerPart" />
	<method signature="boolean isChildFragmentResolved()" class="org.apache.xerces.xpointer.XPointerPart" />
	<method signature="java.lang.String getSchemeData()" class="org.apache.xerces.xpointer.XPointerPart" />
	<method signature="boolean resolveXPointer(org.apache.xerces.xni.QName,org.apache.xerces.xni.XMLAttributes,org.apache.xerces.xni.Augmentations,int)" class="org.apache.xerces.xpointer.XPointerPart" />
	<method signature="void parseXPointer(java.lang.String)" class="org.apache.xerces.xpointer.XPointerPart" />
	<method signature="void setSchemeName(java.lang.String)" class="org.apache.xerces.xpointer.XPointerPart" />
	<method signature="java.lang.String getSchemeName()" class="org.apache.xerces.xpointer.XPointerPart" />
	<method signature="void setSchemeData(java.lang.String)" class="org.apache.xerces.xpointer.XPointerPart" />
	<class name="org.jfree.ui.tabbedui.TabbedApplet" />
	<method signature="void &lt;init&gt;()" class="org.jfree.ui.tabbedui.TabbedApplet" />
	<method signature="void init(org.jfree.ui.tabbedui.AbstractTabbedUI)" class="org.jfree.ui.tabbedui.TabbedApplet" />
	<class name="org.w3c.dom.html.HTMLTableRowElement" />
	<method signature="void setAlign(java.lang.String)" class="org.w3c.dom.html.HTMLTableRowElement" />
	<method signature="void setBgColor(java.lang.String)" class="org.w3c.dom.html.HTMLTableRowElement" />
	<method signature="java.lang.String getCh()" class="org.w3c.dom.html.HTMLTableRowElement" />
	<method signature="org.w3c.dom.html.HTMLElement insertCell(int)" class="org.w3c.dom.html.HTMLTableRowElement" />
	<method signature="int getRowIndex()" class="org.w3c.dom.html.HTMLTableRowElement" />
	<method signature="void setVAlign(java.lang.String)" class="org.w3c.dom.html.HTMLTableRowElement" />
	<method signature="java.lang.String getAlign()" class="org.w3c.dom.html.HTMLTableRowElement" />
	<method signature="void setRowIndex(int)" class="org.w3c.dom.html.HTMLTableRowElement" />
	<method signature="void setChOff(java.lang.String)" class="org.w3c.dom.html.HTMLTableRowElement" />
	<method signature="int getSectionRowIndex()" class="org.w3c.dom.html.HTMLTableRowElement" />
	<method signature="void setCh(java.lang.String)" class="org.w3c.dom.html.HTMLTableRowElement" />
	<method signature="org.w3c.dom.html.HTMLCollection getCells()" class="org.w3c.dom.html.HTMLTableRowElement" />
	<method signature="void deleteCell(int)" class="org.w3c.dom.html.HTMLTableRowElement" />
	<method signature="void setCells(org.w3c.dom.html.HTMLCollection)" class="org.w3c.dom.html.HTMLTableRowElement" />
	<method signature="java.lang.String getChOff()" class="org.w3c.dom.html.HTMLTableRowElement" />
	<method signature="void setSectionRowIndex(int)" class="org.w3c.dom.html.HTMLTableRowElement" />
	<method signature="java.lang.String getBgColor()" class="org.w3c.dom.html.HTMLTableRowElement" />
	<method signature="java.lang.String getVAlign()" class="org.w3c.dom.html.HTMLTableRowElement" />
	<class name="org.jdom2.output.support.AbstractXMLOutputProcessor" />
	<method signature="void process(java.io.Writer,org.jdom2.output.Format,org.jdom2.ProcessingInstruction)" class="org.jdom2.output.support.AbstractXMLOutputProcessor" />
	<method signature="void process(java.io.Writer,org.jdom2.output.Format,org.jdom2.CDATA)" class="org.jdom2.output.support.AbstractXMLOutputProcessor" />
	<method signature="void &lt;init&gt;()" class="org.jdom2.output.support.AbstractXMLOutputProcessor" />
	<method signature="void process(java.io.Writer,org.jdom2.output.Format,org.jdom2.DocType)" class="org.jdom2.output.support.AbstractXMLOutputProcessor" />
	<method signature="void process(java.io.Writer,org.jdom2.output.Format,java.util.List)" class="org.jdom2.output.support.AbstractXMLOutputProcessor" />
	<method signature="void process(java.io.Writer,org.jdom2.output.Format,org.jdom2.Text)" class="org.jdom2.output.support.AbstractXMLOutputProcessor" />
	<method signature="void process(java.io.Writer,org.jdom2.output.Format,org.jdom2.Comment)" class="org.jdom2.output.support.AbstractXMLOutputProcessor" />
	<method signature="void process(java.io.Writer,org.jdom2.output.Format,org.jdom2.Element)" class="org.jdom2.output.support.AbstractXMLOutputProcessor" />
	<method signature="void process(java.io.Writer,org.jdom2.output.Format,org.jdom2.Document)" class="org.jdom2.output.support.AbstractXMLOutputProcessor" />
	<method signature="void process(java.io.Writer,org.jdom2.output.Format,org.jdom2.EntityRef)" class="org.jdom2.output.support.AbstractXMLOutputProcessor" />
	<class name="org.jfree.chart.util.DefaultShadowGenerator" />
	<method signature="float getShadowOpacity()" class="org.jfree.chart.util.DefaultShadowGenerator" />
	<method signature="int hashCode()" class="org.jfree.chart.util.DefaultShadowGenerator" />
	<method signature="double getAngle()" class="org.jfree.chart.util.DefaultShadowGenerator" />
	<method signature="int calculateOffsetX()" class="org.jfree.chart.util.DefaultShadowGenerator" />
	<method signature="java.awt.Color getShadowColor()" class="org.jfree.chart.util.DefaultShadowGenerator" />
	<method signature="int getShadowSize()" class="org.jfree.chart.util.DefaultShadowGenerator" />
	<method signature="void &lt;init&gt;(int,java.awt.Color,float,int,double)" class="org.jfree.chart.util.DefaultShadowGenerator" />
	<method signature="int getDistance()" class="org.jfree.chart.util.DefaultShadowGenerator" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.util.DefaultShadowGenerator" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.util.DefaultShadowGenerator" />
	<method signature="int calculateOffsetY()" class="org.jfree.chart.util.DefaultShadowGenerator" />
	<method signature="java.awt.image.BufferedImage createDropShadow(java.awt.image.BufferedImage)" class="org.jfree.chart.util.DefaultShadowGenerator" />
	<class name="org.apache.xerces.xinclude.XIncludeNamespaceSupport" />
	<method signature="void &lt;init&gt;(org.apache.xerces.xni.NamespaceContext)" class="org.apache.xerces.xinclude.XIncludeNamespaceSupport" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.xinclude.XIncludeNamespaceSupport" />
	<method signature="void setContextInvalid()" class="org.apache.xerces.xinclude.XIncludeNamespaceSupport" />
	<method signature="void pushContext()" class="org.apache.xerces.xinclude.XIncludeNamespaceSupport" />
	<method signature="java.lang.String getURIFromIncludeParent(java.lang.String)" class="org.apache.xerces.xinclude.XIncludeNamespaceSupport" />
	<class name="org.jfree.chart.labels.AbstractPieItemLabelGenerator" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.labels.AbstractPieItemLabelGenerator" />
	<method signature="int hashCode()" class="org.jfree.chart.labels.AbstractPieItemLabelGenerator" />
	<method signature="java.lang.String getLabelFormat()" class="org.jfree.chart.labels.AbstractPieItemLabelGenerator" />
	<method signature="java.text.NumberFormat getNumberFormat()" class="org.jfree.chart.labels.AbstractPieItemLabelGenerator" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.labels.AbstractPieItemLabelGenerator" />
	<method signature="java.text.NumberFormat getPercentFormat()" class="org.jfree.chart.labels.AbstractPieItemLabelGenerator" />
	<class name="tourma.utils.display.TourmaProtocol" />
	<method signature="void &lt;init&gt;()" class="tourma.utils.display.TourmaProtocol" />
	<class name="org.apache.commons.lang3.concurrent.ConstantInitializer" />
	<method signature="int hashCode()" class="org.apache.commons.lang3.concurrent.ConstantInitializer" />
	<method signature="boolean equals(java.lang.Object)" class="org.apache.commons.lang3.concurrent.ConstantInitializer" />
	<method signature="java.lang.String toString()" class="org.apache.commons.lang3.concurrent.ConstantInitializer" />
	<method signature="java.lang.Object getObject()" class="org.apache.commons.lang3.concurrent.ConstantInitializer" />
	<method signature="void &lt;init&gt;(java.lang.Object)" class="org.apache.commons.lang3.concurrent.ConstantInitializer" />
	<method signature="java.lang.Object get()" class="org.apache.commons.lang3.concurrent.ConstantInitializer" />
	<class name="org.apache.xerces.impl.dv.InvalidDatatypeValueException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Object[])" class="org.apache.xerces.impl.dv.InvalidDatatypeValueException" />
	<class name="edu.umd.cs.findbugs.annotations.SuppressFBWarnings" />
	<method signature="java.lang.String[] value()" class="edu.umd.cs.findbugs.annotations.SuppressFBWarnings" />
	<method signature="java.lang.String justification()" class="edu.umd.cs.findbugs.annotations.SuppressFBWarnings" />
	<class name="org.jfree.layout.FormatLayout" />
	<method signature="void addLayoutComponent(java.lang.String,java.awt.Component)" class="org.jfree.layout.FormatLayout" />
	<method signature="void layoutContainer(java.awt.Container)" class="org.jfree.layout.FormatLayout" />
	<method signature="void complete()" class="org.jfree.layout.FormatLayout" />
	<method signature="void &lt;init&gt;(int,int[])" class="org.jfree.layout.FormatLayout" />
	<method signature="void removeLayoutComponent(java.awt.Component)" class="org.jfree.layout.FormatLayout" />
	<method signature="java.awt.Dimension minimumLayoutSize(java.awt.Container)" class="org.jfree.layout.FormatLayout" />
	<method signature="void addLayoutComponent(java.awt.Component)" class="org.jfree.layout.FormatLayout" />
	<method signature="java.awt.Dimension preferredLayoutSize(java.awt.Container)" class="org.jfree.layout.FormatLayout" />
	<method signature="void removeLayoutComponent(java.lang.String,java.awt.Component)" class="org.jfree.layout.FormatLayout" />
	<class name="org.jdom2.input.DOMBuilder" />
	<method signature="org.jdom2.Text build(org.w3c.dom.Text)" class="org.jdom2.input.DOMBuilder" />
	<method signature="org.jdom2.Element build(org.w3c.dom.Element)" class="org.jdom2.input.DOMBuilder" />
	<method signature="org.jdom2.DocType build(org.w3c.dom.DocumentType)" class="org.jdom2.input.DOMBuilder" />
	<method signature="void setFactory(org.jdom2.JDOMFactory)" class="org.jdom2.input.DOMBuilder" />
	<method signature="org.jdom2.ProcessingInstruction build(org.w3c.dom.ProcessingInstruction)" class="org.jdom2.input.DOMBuilder" />
	<method signature="org.jdom2.EntityRef build(org.w3c.dom.EntityReference)" class="org.jdom2.input.DOMBuilder" />
	<method signature="org.jdom2.JDOMFactory getFactory()" class="org.jdom2.input.DOMBuilder" />
	<method signature="org.jdom2.Document build(org.w3c.dom.Document)" class="org.jdom2.input.DOMBuilder" />
	<method signature="void &lt;init&gt;()" class="org.jdom2.input.DOMBuilder" />
	<method signature="org.jdom2.Comment build(org.w3c.dom.Comment)" class="org.jdom2.input.DOMBuilder" />
	<method signature="org.jdom2.CDATA build(org.w3c.dom.CDATASection)" class="org.jdom2.input.DOMBuilder" />
	<class name="org.apache.xerces.xs.XSNamedMap" />
	<method signature="org.apache.xerces.xs.XSObject itemByName(java.lang.String,java.lang.String)" class="org.apache.xerces.xs.XSNamedMap" />
	<method signature="org.apache.xerces.xs.XSObject item(int)" class="org.apache.xerces.xs.XSNamedMap" />
	<method signature="int getLength()" class="org.apache.xerces.xs.XSNamedMap" />
	<class name="org.jfree.data.Range" />
	<method signature="int hashCode()" class="org.jfree.data.Range" />
	<method signature="org.jfree.data.Range combine(org.jfree.data.Range,org.jfree.data.Range)" class="org.jfree.data.Range" />
	<method signature="org.jfree.data.Range scale(org.jfree.data.Range,double)" class="org.jfree.data.Range" />
	<method signature="double getLength()" class="org.jfree.data.Range" />
	<method signature="org.jfree.data.Range shift(org.jfree.data.Range,double,boolean)" class="org.jfree.data.Range" />
	<method signature="double constrain(double)" class="org.jfree.data.Range" />
	<method signature="org.jfree.data.Range expandToInclude(org.jfree.data.Range,double)" class="org.jfree.data.Range" />
	<method signature="double getLowerBound()" class="org.jfree.data.Range" />
	<method signature="org.jfree.data.Range shift(org.jfree.data.Range,double)" class="org.jfree.data.Range" />
	<method signature="double getCentralValue()" class="org.jfree.data.Range" />
	<method signature="boolean contains(double)" class="org.jfree.data.Range" />
	<method signature="boolean intersects(double,double)" class="org.jfree.data.Range" />
	<method signature="org.jfree.data.Range combineIgnoringNaN(org.jfree.data.Range,org.jfree.data.Range)" class="org.jfree.data.Range" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.Range" />
	<method signature="boolean intersects(org.jfree.data.Range)" class="org.jfree.data.Range" />
	<method signature="java.lang.String toString()" class="org.jfree.data.Range" />
	<method signature="double getUpperBound()" class="org.jfree.data.Range" />
	<method signature="org.jfree.data.Range expand(org.jfree.data.Range,double,double)" class="org.jfree.data.Range" />
	<method signature="void &lt;init&gt;(double,double)" class="org.jfree.data.Range" />
	<class name="com.swabunga.spell.event.WordTokenizer" />
	<method signature="boolean hasMoreWords()" class="com.swabunga.spell.event.WordTokenizer" />
	<method signature="int getCurrentWordEnd()" class="com.swabunga.spell.event.WordTokenizer" />
	<method signature="java.lang.String nextWord()" class="com.swabunga.spell.event.WordTokenizer" />
	<method signature="int getCurrentWordPosition()" class="com.swabunga.spell.event.WordTokenizer" />
	<method signature="int getCurrentWordCount()" class="com.swabunga.spell.event.WordTokenizer" />
	<method signature="void replaceWord(java.lang.String)" class="com.swabunga.spell.event.WordTokenizer" />
	<method signature="boolean isNewSentance()" class="com.swabunga.spell.event.WordTokenizer" />
	<method signature="java.lang.String getContext()" class="com.swabunga.spell.event.WordTokenizer" />
	<class name="com.swabunga.spell.swing.JSpellForm" />
	<method signature="void setSpellEvent(com.swabunga.spell.event.SpellCheckEvent)" class="com.swabunga.spell.swing.JSpellForm" />
	<method signature="void valueChanged(javax.swing.event.ListSelectionEvent)" class="com.swabunga.spell.swing.JSpellForm" />
	<method signature="void addActionListener(java.awt.event.ActionListener)" class="com.swabunga.spell.swing.JSpellForm" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="com.swabunga.spell.swing.JSpellForm" />
	<method signature="void &lt;init&gt;()" class="com.swabunga.spell.swing.JSpellForm" />
	<method signature="void main(java.lang.String[])" class="com.swabunga.spell.swing.JSpellForm" />
	<method signature="void removeActionListener(java.awt.event.ActionListener)" class="com.swabunga.spell.swing.JSpellForm" />
	<class name="org.jfree.chart.needle.PointerNeedle" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.needle.PointerNeedle" />
	<method signature="int hashCode()" class="org.jfree.chart.needle.PointerNeedle" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.needle.PointerNeedle" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.needle.PointerNeedle" />
	<class name="org.w3c.dom.html.HTMLDOMImplementation" />
	<method signature="org.w3c.dom.html.HTMLDocument createHTMLDocument(java.lang.String)" class="org.w3c.dom.html.HTMLDOMImplementation" />
	<class name="org.w3c.dom.ls.LSSerializerFilter" />
	<method signature="int getWhatToShow()" class="org.w3c.dom.ls.LSSerializerFilter" />
	<class name="org.jdom2.input.sax.XMLReaderJDOMFactory" />
	<method signature="boolean isValidating()" class="org.jdom2.input.sax.XMLReaderJDOMFactory" />
	<method signature="org.xml.sax.XMLReader createXMLReader()" class="org.jdom2.input.sax.XMLReaderJDOMFactory" />
	<class name="org.jfree.data.time.TimePeriodValuesCollection" />
	<method signature="boolean getDomainIsPointsInTime()" class="org.jfree.data.time.TimePeriodValuesCollection" />
	<method signature="java.lang.Number getX(int,int)" class="org.jfree.data.time.TimePeriodValuesCollection" />
	<method signature="java.lang.Number getY(int,int)" class="org.jfree.data.time.TimePeriodValuesCollection" />
	<method signature="void removeSeries(int)" class="org.jfree.data.time.TimePeriodValuesCollection" />
	<method signature="int getSeriesCount()" class="org.jfree.data.time.TimePeriodValuesCollection" />
	<method signature="org.jfree.data.Range getDomainBounds(boolean)" class="org.jfree.data.time.TimePeriodValuesCollection" />
	<method signature="java.lang.Comparable getSeriesKey(int)" class="org.jfree.data.time.TimePeriodValuesCollection" />
	<method signature="void &lt;init&gt;(org.jfree.data.time.TimePeriodValues)" class="org.jfree.data.time.TimePeriodValuesCollection" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.time.TimePeriodValuesCollection" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.time.TimePeriodValuesCollection" />
	<method signature="java.lang.Number getEndX(int,int)" class="org.jfree.data.time.TimePeriodValuesCollection" />
	<method signature="int getItemCount(int)" class="org.jfree.data.time.TimePeriodValuesCollection" />
	<method signature="java.lang.Number getEndY(int,int)" class="org.jfree.data.time.TimePeriodValuesCollection" />
	<method signature="double getDomainUpperBound(boolean)" class="org.jfree.data.time.TimePeriodValuesCollection" />
	<method signature="org.jfree.data.time.TimePeriodAnchor getXPosition()" class="org.jfree.data.time.TimePeriodValuesCollection" />
	<method signature="void removeSeries(org.jfree.data.time.TimePeriodValues)" class="org.jfree.data.time.TimePeriodValuesCollection" />
	<method signature="void setDomainIsPointsInTime(boolean)" class="org.jfree.data.time.TimePeriodValuesCollection" />
	<method signature="double getDomainLowerBound(boolean)" class="org.jfree.data.time.TimePeriodValuesCollection" />
	<method signature="void setXPosition(org.jfree.data.time.TimePeriodAnchor)" class="org.jfree.data.time.TimePeriodValuesCollection" />
	<method signature="org.jfree.data.time.TimePeriodValues getSeries(int)" class="org.jfree.data.time.TimePeriodValuesCollection" />
	<method signature="java.lang.Number getStartX(int,int)" class="org.jfree.data.time.TimePeriodValuesCollection" />
	<method signature="java.lang.Number getStartY(int,int)" class="org.jfree.data.time.TimePeriodValuesCollection" />
	<method signature="void addSeries(org.jfree.data.time.TimePeriodValues)" class="org.jfree.data.time.TimePeriodValuesCollection" />
	<class name="org.apache.xerces.xni.grammars.XMLDTDDescription" />
	<method signature="java.lang.String getRootName()" class="org.apache.xerces.xni.grammars.XMLDTDDescription" />
	<class name="tourma.tableModel.MjtMatchTeams" />
	<method signature="boolean isCellEditable(int,int)" class="tourma.tableModel.MjtMatchTeams" />
	<method signature="java.awt.Component getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)" class="tourma.tableModel.MjtMatchTeams" />
	<method signature="int getRowCount()" class="tourma.tableModel.MjtMatchTeams" />
	<method signature="java.lang.String getColumnName(int)" class="tourma.tableModel.MjtMatchTeams" />
	<method signature="void &lt;init&gt;(java.util.ArrayList,tourma.data.Round)" class="tourma.tableModel.MjtMatchTeams" />
	<method signature="java.lang.Class getColumnClass(int)" class="tourma.tableModel.MjtMatchTeams" />
	<method signature="java.lang.Object getValueAt(int,int)" class="tourma.tableModel.MjtMatchTeams" />
	<method signature="int getColumnCount()" class="tourma.tableModel.MjtMatchTeams" />
	<class name="org.jfree.chart.plot.CompassPlot" />
	<method signature="java.lang.String getPlotType()" class="org.jfree.chart.plot.CompassPlot" />
	<method signature="void setSeriesOutlinePaint(int,java.awt.Paint)" class="org.jfree.chart.plot.CompassPlot" />
	<method signature="void setSeriesPaint(int,java.awt.Paint)" class="org.jfree.chart.plot.CompassPlot" />
	<method signature="boolean getDrawBorder()" class="org.jfree.chart.plot.CompassPlot" />
	<method signature="java.awt.Paint getRosePaint()" class="org.jfree.chart.plot.CompassPlot" />
	<method signature="void &lt;init&gt;(org.jfree.data.general.ValueDataset)" class="org.jfree.chart.plot.CompassPlot" />
	<method signature="void setSeriesOutlineStroke(int,java.awt.Stroke)" class="org.jfree.chart.plot.CompassPlot" />
	<method signature="java.awt.Paint getRoseHighlightPaint()" class="org.jfree.chart.plot.CompassPlot" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.plot.CompassPlot" />
	<method signature="void setSeriesNeedle(int)" class="org.jfree.chart.plot.CompassPlot" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.plot.CompassPlot" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.plot.CompassPlot" />
	<method signature="void zoom(double)" class="org.jfree.chart.plot.CompassPlot" />
	<method signature="int getLabelType()" class="org.jfree.chart.plot.CompassPlot" />
	<method signature="java.awt.Paint getRoseCenterPaint()" class="org.jfree.chart.plot.CompassPlot" />
	<method signature="void setRoseHighlightPaint(java.awt.Paint)" class="org.jfree.chart.plot.CompassPlot" />
	<method signature="void setLabelType(int)" class="org.jfree.chart.plot.CompassPlot" />
	<method signature="void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.plot.CompassPlot" />
	<method signature="double getRevolutionDistance()" class="org.jfree.chart.plot.CompassPlot" />
	<method signature="void setRosePaint(java.awt.Paint)" class="org.jfree.chart.plot.CompassPlot" />
	<method signature="void setSeriesNeedle(int,org.jfree.chart.needle.MeterNeedle)" class="org.jfree.chart.plot.CompassPlot" />
	<method signature="void setRoseCenterPaint(java.awt.Paint)" class="org.jfree.chart.plot.CompassPlot" />
	<method signature="void setLabelFont(java.awt.Font)" class="org.jfree.chart.plot.CompassPlot" />
	<method signature="void setSeriesNeedle(int,int)" class="org.jfree.chart.plot.CompassPlot" />
	<method signature="void addDataset(org.jfree.data.general.ValueDataset,org.jfree.chart.needle.MeterNeedle)" class="org.jfree.chart.plot.CompassPlot" />
	<method signature="void setRevolutionDistance(double)" class="org.jfree.chart.plot.CompassPlot" />
	<method signature="java.awt.Font getLabelFont()" class="org.jfree.chart.plot.CompassPlot" />
	<method signature="void setDrawBorder(boolean)" class="org.jfree.chart.plot.CompassPlot" />
	<method signature="void addDataset(org.jfree.data.general.ValueDataset)" class="org.jfree.chart.plot.CompassPlot" />
	<method signature="org.jfree.data.general.ValueDataset[] getDatasets()" class="org.jfree.chart.plot.CompassPlot" />
	<method signature="org.jfree.chart.LegendItemCollection getLegendItems()" class="org.jfree.chart.plot.CompassPlot" />
	<class name="org.jfree.data.general.HeatMapDataset" />
	<method signature="int getXSampleCount()" class="org.jfree.data.general.HeatMapDataset" />
	<method signature="java.lang.Number getZ(int,int)" class="org.jfree.data.general.HeatMapDataset" />
	<method signature="double getMinimumXValue()" class="org.jfree.data.general.HeatMapDataset" />
	<method signature="double getYValue(int)" class="org.jfree.data.general.HeatMapDataset" />
	<method signature="double getMaximumXValue()" class="org.jfree.data.general.HeatMapDataset" />
	<method signature="double getMinimumYValue()" class="org.jfree.data.general.HeatMapDataset" />
	<method signature="double getZValue(int,int)" class="org.jfree.data.general.HeatMapDataset" />
	<method signature="double getMaximumYValue()" class="org.jfree.data.general.HeatMapDataset" />
	<method signature="double getXValue(int)" class="org.jfree.data.general.HeatMapDataset" />
	<method signature="int getYSampleCount()" class="org.jfree.data.general.HeatMapDataset" />
	<class name="org.apache.xerces.dom.DeferredProcessingInstructionImpl" />
	<method signature="int getNodeIndex()" class="org.apache.xerces.dom.DeferredProcessingInstructionImpl" />
	<class name="org.w3c.dom.html.HTMLInputElement" />
	<method signature="boolean getChecked()" class="org.w3c.dom.html.HTMLInputElement" />
	<method signature="int getMaxLength()" class="org.w3c.dom.html.HTMLInputElement" />
	<method signature="java.lang.String getName()" class="org.w3c.dom.html.HTMLInputElement" />
	<method signature="java.lang.String getAccept()" class="org.w3c.dom.html.HTMLInputElement" />
	<method signature="void setSize(java.lang.String)" class="org.w3c.dom.html.HTMLInputElement" />
	<method signature="boolean getReadOnly()" class="org.w3c.dom.html.HTMLInputElement" />
	<method signature="void setReadOnly(boolean)" class="org.w3c.dom.html.HTMLInputElement" />
	<method signature="java.lang.String getUseMap()" class="org.w3c.dom.html.HTMLInputElement" />
	<method signature="java.lang.String getDefaultValue()" class="org.w3c.dom.html.HTMLInputElement" />
	<method signature="boolean getDisabled()" class="org.w3c.dom.html.HTMLInputElement" />
	<method signature="int getTabIndex()" class="org.w3c.dom.html.HTMLInputElement" />
	<method signature="void setDefaultValue(java.lang.String)" class="org.w3c.dom.html.HTMLInputElement" />
	<method signature="void setName(java.lang.String)" class="org.w3c.dom.html.HTMLInputElement" />
	<method signature="void click()" class="org.w3c.dom.html.HTMLInputElement" />
	<method signature="void setDefaultChecked(boolean)" class="org.w3c.dom.html.HTMLInputElement" />
	<method signature="void setAccessKey(java.lang.String)" class="org.w3c.dom.html.HTMLInputElement" />
	<method signature="void setAlign(java.lang.String)" class="org.w3c.dom.html.HTMLInputElement" />
	<method signature="void setValue(java.lang.String)" class="org.w3c.dom.html.HTMLInputElement" />
	<method signature="void setMaxLength(int)" class="org.w3c.dom.html.HTMLInputElement" />
	<method signature="java.lang.String getSrc()" class="org.w3c.dom.html.HTMLInputElement" />
	<method signature="void setAccept(java.lang.String)" class="org.w3c.dom.html.HTMLInputElement" />
	<method signature="java.lang.String getAlign()" class="org.w3c.dom.html.HTMLInputElement" />
	<method signature="boolean getDefaultChecked()" class="org.w3c.dom.html.HTMLInputElement" />
	<method signature="void setTabIndex(int)" class="org.w3c.dom.html.HTMLInputElement" />
	<method signature="void setChecked(boolean)" class="org.w3c.dom.html.HTMLInputElement" />
	<method signature="void setDisabled(boolean)" class="org.w3c.dom.html.HTMLInputElement" />
	<method signature="java.lang.String getSize()" class="org.w3c.dom.html.HTMLInputElement" />
	<method signature="void setAlt(java.lang.String)" class="org.w3c.dom.html.HTMLInputElement" />
	<method signature="java.lang.String getValue()" class="org.w3c.dom.html.HTMLInputElement" />
	<method signature="void blur()" class="org.w3c.dom.html.HTMLInputElement" />
	<method signature="void focus()" class="org.w3c.dom.html.HTMLInputElement" />
	<method signature="void setSrc(java.lang.String)" class="org.w3c.dom.html.HTMLInputElement" />
	<method signature="java.lang.String getType()" class="org.w3c.dom.html.HTMLInputElement" />
	<method signature="void setUseMap(java.lang.String)" class="org.w3c.dom.html.HTMLInputElement" />
	<method signature="java.lang.String getAlt()" class="org.w3c.dom.html.HTMLInputElement" />
	<method signature="void select()" class="org.w3c.dom.html.HTMLInputElement" />
	<method signature="java.lang.String getAccessKey()" class="org.w3c.dom.html.HTMLInputElement" />
	<method signature="org.w3c.dom.html.HTMLFormElement getForm()" class="org.w3c.dom.html.HTMLInputElement" />
	<class name="freemarker.template.utility.CaptureOutput" />
	<method signature="void &lt;init&gt;()" class="freemarker.template.utility.CaptureOutput" />
	<method signature="java.io.Writer getWriter(java.io.Writer,java.util.Map)" class="freemarker.template.utility.CaptureOutput" />
	<class name="org.jfree.chart.util.ResourceBundleWrapper" />
	<method signature="java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader)" class="org.jfree.chart.util.ResourceBundleWrapper" />
	<method signature="java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)" class="org.jfree.chart.util.ResourceBundleWrapper" />
	<method signature="void removeCodeBase(java.net.URL,java.net.URLClassLoader)" class="org.jfree.chart.util.ResourceBundleWrapper" />
	<method signature="java.util.ResourceBundle getBundle(java.lang.String)" class="org.jfree.chart.util.ResourceBundleWrapper" />
	<class name="org.jfree.chart.axis.SegmentedTimeline$Segment" />
	<method signature="boolean contains(long)" class="org.jfree.chart.axis.SegmentedTimeline$Segment" />
	<method signature="java.util.Date getDate()" class="org.jfree.chart.axis.SegmentedTimeline$Segment" />
	<method signature="boolean after(org.jfree.chart.axis.SegmentedTimeline$Segment)" class="org.jfree.chart.axis.SegmentedTimeline$Segment" />
	<method signature="boolean contains(long,long)" class="org.jfree.chart.axis.SegmentedTimeline$Segment" />
	<method signature="boolean contained(long,long)" class="org.jfree.chart.axis.SegmentedTimeline$Segment" />
	<method signature="void moveIndexToStart()" class="org.jfree.chart.axis.SegmentedTimeline$Segment" />
	<method signature="long getSegmentEnd()" class="org.jfree.chart.axis.SegmentedTimeline$Segment" />
	<method signature="org.jfree.chart.axis.SegmentedTimeline$Segment copy()" class="org.jfree.chart.axis.SegmentedTimeline$Segment" />
	<method signature="org.jfree.chart.axis.SegmentedTimeline$Segment intersect(long,long)" class="org.jfree.chart.axis.SegmentedTimeline$Segment" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.axis.SegmentedTimeline$Segment" />
	<method signature="boolean inExcludeSegments()" class="org.jfree.chart.axis.SegmentedTimeline$Segment" />
	<method signature="boolean before(org.jfree.chart.axis.SegmentedTimeline$Segment)" class="org.jfree.chart.axis.SegmentedTimeline$Segment" />
	<method signature="int compareTo(java.lang.Object)" class="org.jfree.chart.axis.SegmentedTimeline$Segment" />
	<method signature="void inc(long)" class="org.jfree.chart.axis.SegmentedTimeline$Segment" />
	<method signature="long getSegmentCount()" class="org.jfree.chart.axis.SegmentedTimeline$Segment" />
	<method signature="long getMillisecond()" class="org.jfree.chart.axis.SegmentedTimeline$Segment" />
	<method signature="long calculateSegmentNumber(long)" class="org.jfree.chart.axis.SegmentedTimeline$Segment" />
	<method signature="void inc()" class="org.jfree.chart.axis.SegmentedTimeline$Segment" />
	<method signature="boolean inExceptionSegments()" class="org.jfree.chart.axis.SegmentedTimeline$Segment" />
	<method signature="boolean inIncludeSegments()" class="org.jfree.chart.axis.SegmentedTimeline$Segment" />
	<method signature="boolean contains(org.jfree.chart.axis.SegmentedTimeline$Segment)" class="org.jfree.chart.axis.SegmentedTimeline$Segment" />
	<method signature="long getSegmentStart()" class="org.jfree.chart.axis.SegmentedTimeline$Segment" />
	<method signature="void dec()" class="org.jfree.chart.axis.SegmentedTimeline$Segment" />
	<method signature="void dec(long)" class="org.jfree.chart.axis.SegmentedTimeline$Segment" />
	<method signature="void moveIndexToEnd()" class="org.jfree.chart.axis.SegmentedTimeline$Segment" />
	<method signature="long getSegmentNumber()" class="org.jfree.chart.axis.SegmentedTimeline$Segment" />
	<class name="org.apache.wml.dom.WMLEmElementImpl" />
	<method signature="java.lang.String getXmlLang()" class="org.apache.wml.dom.WMLEmElementImpl" />
	<method signature="void setXmlLang(java.lang.String)" class="org.apache.wml.dom.WMLEmElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.wml.dom.WMLDocumentImpl,java.lang.String)" class="org.apache.wml.dom.WMLEmElementImpl" />
	<method signature="java.lang.String getId()" class="org.apache.wml.dom.WMLEmElementImpl" />
	<method signature="java.lang.String getClassName()" class="org.apache.wml.dom.WMLEmElementImpl" />
	<method signature="void setClassName(java.lang.String)" class="org.apache.wml.dom.WMLEmElementImpl" />
	<method signature="void setId(java.lang.String)" class="org.apache.wml.dom.WMLEmElementImpl" />
	<class name="com.google.zxing.oned.UPCEANReader" />
	<method signature="com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map)" class="com.google.zxing.oned.UPCEANReader" />
	<method signature="com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,int[],java.util.Map)" class="com.google.zxing.oned.UPCEANReader" />
	<class name="org.jfree.data.xy.YIntervalSeries" />
	<method signature="java.lang.Number getX(int)" class="org.jfree.data.xy.YIntervalSeries" />
	<method signature="double getYValue(int)" class="org.jfree.data.xy.YIntervalSeries" />
	<method signature="void &lt;init&gt;(java.lang.Comparable)" class="org.jfree.data.xy.YIntervalSeries" />
	<method signature="void &lt;init&gt;(java.lang.Comparable,boolean,boolean)" class="org.jfree.data.xy.YIntervalSeries" />
	<method signature="void add(double,double,double,double)" class="org.jfree.data.xy.YIntervalSeries" />
	<method signature="double getYLowValue(int)" class="org.jfree.data.xy.YIntervalSeries" />
	<method signature="org.jfree.data.ComparableObjectItem getDataItem(int)" class="org.jfree.data.xy.YIntervalSeries" />
	<method signature="double getYHighValue(int)" class="org.jfree.data.xy.YIntervalSeries" />
	<class name="org.w3c.dom.ls.LSParserFilter" />
	<method signature="short startElement(org.w3c.dom.Element)" class="org.w3c.dom.ls.LSParserFilter" />
	<method signature="int getWhatToShow()" class="org.w3c.dom.ls.LSParserFilter" />
	<method signature="short acceptNode(org.w3c.dom.Node)" class="org.w3c.dom.ls.LSParserFilter" />
	<class name="org.apache.xml.serialize.SerializerFactory" />
	<method signature="org.apache.xml.serialize.SerializerFactory getSerializerFactory(java.lang.String)" class="org.apache.xml.serialize.SerializerFactory" />
	<method signature="org.apache.xml.serialize.Serializer makeSerializer(org.apache.xml.serialize.OutputFormat)" class="org.apache.xml.serialize.SerializerFactory" />
	<method signature="org.apache.xml.serialize.Serializer makeSerializer(java.io.OutputStream,org.apache.xml.serialize.OutputFormat)" class="org.apache.xml.serialize.SerializerFactory" />
	<method signature="void &lt;init&gt;()" class="org.apache.xml.serialize.SerializerFactory" />
	<method signature="void registerSerializerFactory(org.apache.xml.serialize.SerializerFactory)" class="org.apache.xml.serialize.SerializerFactory" />
	<method signature="org.apache.xml.serialize.Serializer makeSerializer(java.io.Writer,org.apache.xml.serialize.OutputFormat)" class="org.apache.xml.serialize.SerializerFactory" />
	<class name="com.google.zxing.client.result.BookmarkDoCoMoResultParser" />
	<method signature="com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result)" class="com.google.zxing.client.result.BookmarkDoCoMoResultParser" />
	<method signature="com.google.zxing.client.result.URIParsedResult parse(com.google.zxing.Result)" class="com.google.zxing.client.result.BookmarkDoCoMoResultParser" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.client.result.BookmarkDoCoMoResultParser" />
	<class name="org.jfree.chart.renderer.category.StackedAreaRenderer" />
	<method signature="void setRenderAsPercentages(boolean)" class="org.jfree.chart.renderer.category.StackedAreaRenderer" />
	<method signature="int getPassCount()" class="org.jfree.chart.renderer.category.StackedAreaRenderer" />
	<method signature="org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)" class="org.jfree.chart.renderer.category.StackedAreaRenderer" />
	<method signature="boolean getRenderAsPercentages()" class="org.jfree.chart.renderer.category.StackedAreaRenderer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.category.StackedAreaRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.category.StackedAreaRenderer" />
	<method signature="void &lt;init&gt;(boolean)" class="org.jfree.chart.renderer.category.StackedAreaRenderer" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)" class="org.jfree.chart.renderer.category.StackedAreaRenderer" />
	<class name="freemarker.core.Environment" />
	<method signature="void include(freemarker.template.Template)" class="freemarker.core.Environment" />
	<method signature="freemarker.template.Template getTemplate()" class="freemarker.core.Environment" />
	<method signature="freemarker.template.Configuration getConfiguration()" class="freemarker.core.Environment" />
	<method signature="freemarker.template.TemplateModel getVariable(java.lang.String)" class="freemarker.core.Environment" />
	<method signature="void setURLEscapingCharset(java.lang.String)" class="freemarker.core.Environment" />
	<method signature="void setTimeFormat(java.lang.String)" class="freemarker.core.Environment" />
	<method signature="void setTemplateExceptionHandler(freemarker.template.TemplateExceptionHandler)" class="freemarker.core.Environment" />
	<method signature="void visit(freemarker.core.TemplateElement,freemarker.template.TemplateDirectiveModel,java.util.Map,java.util.List)" class="freemarker.core.Environment" />
	<method signature="void setNumberFormat(java.lang.String)" class="freemarker.core.Environment" />
	<method signature="freemarker.template.TemplateNodeModel getCurrentVisitorNode()" class="freemarker.core.Environment" />
	<method signature="void setOut(java.io.Writer)" class="freemarker.core.Environment" />
	<method signature="freemarker.template.TemplateHashModel getGlobalVariables()" class="freemarker.core.Environment" />
	<method signature="freemarker.core.Environment$Namespace getMainNamespace()" class="freemarker.core.Environment" />
	<method signature="freemarker.core.Environment$Namespace getGlobalNamespace()" class="freemarker.core.Environment" />
	<method signature="freemarker.template.TemplateModel getGlobalVariable(java.lang.String)" class="freemarker.core.Environment" />
	<method signature="freemarker.core.Environment$Namespace getCurrentNamespace()" class="freemarker.core.Environment" />
	<method signature="void outputInstructionStack(java.io.PrintWriter)" class="freemarker.core.Environment" />
	<method signature="freemarker.template.Template getTemplateForInclusion(java.lang.String,java.lang.String,boolean)" class="freemarker.core.Environment" />
	<method signature="void __setitem__(java.lang.String,java.lang.Object)" class="freemarker.core.Environment" />
	<method signature="void setTimeZone(java.util.TimeZone)" class="freemarker.core.Environment" />
	<method signature="freemarker.core.Environment$Namespace importLib(java.lang.String,java.lang.String)" class="freemarker.core.Environment" />
	<method signature="freemarker.core.Environment$Namespace getNamespace(java.lang.String)" class="freemarker.core.Environment" />
	<method signature="void setLocale(java.util.Locale)" class="freemarker.core.Environment" />
	<method signature="java.io.Writer getOut()" class="freemarker.core.Environment" />
	<method signature="freemarker.core.Environment$Namespace importLib(freemarker.template.Template,java.lang.String)" class="freemarker.core.Environment" />
	<method signature="freemarker.core.Environment getCurrentEnvironment()" class="freemarker.core.Environment" />
	<method signature="freemarker.template.TemplateModel getLocalVariable(java.lang.String)" class="freemarker.core.Environment" />
	<method signature="void setLocalVariable(java.lang.String,freemarker.template.TemplateModel)" class="freemarker.core.Environment" />
	<method signature="void setCurrentVisitorNode(freemarker.template.TemplateNodeModel)" class="freemarker.core.Environment" />
	<method signature="freemarker.template.Template getTemplateForImporting(java.lang.String)" class="freemarker.core.Environment" />
	<method signature="void setDateTimeFormat(java.lang.String)" class="freemarker.core.Environment" />
	<method signature="void process()" class="freemarker.core.Environment" />
	<method signature="freemarker.template.TemplateHashModel getDataModel()" class="freemarker.core.Environment" />
	<method signature="void include(java.lang.String,java.lang.String,boolean)" class="freemarker.core.Environment" />
	<method signature="java.util.Set getKnownVariableNames()" class="freemarker.core.Environment" />
	<method signature="java.text.NumberFormat getCNumberFormat()" class="freemarker.core.Environment" />
	<method signature="void &lt;init&gt;(freemarker.template.Template,freemarker.template.TemplateHashModel,java.io.Writer)" class="freemarker.core.Environment" />
	<method signature="java.lang.Object __getitem__(java.lang.String)" class="freemarker.core.Environment" />
	<method signature="void setVariable(java.lang.String,freemarker.template.TemplateModel)" class="freemarker.core.Environment" />
	<method signature="void setOutputEncoding(java.lang.String)" class="freemarker.core.Environment" />
	<method signature="void setDateFormat(java.lang.String)" class="freemarker.core.Environment" />
	<method signature="java.lang.String getDefaultNS()" class="freemarker.core.Environment" />
	<method signature="void setGlobalVariable(java.lang.String,freemarker.template.TemplateModel)" class="freemarker.core.Environment" />
	<method signature="java.lang.String getPrefixForNamespace(java.lang.String)" class="freemarker.core.Environment" />
	<method signature="java.lang.String getNamespaceForPrefix(java.lang.String)" class="freemarker.core.Environment" />
	<class name="org.apache.commons.lang3.time.DatePrinter" />
	<method signature="java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)" class="org.apache.commons.lang3.time.DatePrinter" />
	<method signature="java.lang.String format(java.util.Calendar)" class="org.apache.commons.lang3.time.DatePrinter" />
	<method signature="java.util.Locale getLocale()" class="org.apache.commons.lang3.time.DatePrinter" />
	<method signature="java.lang.String format(long)" class="org.apache.commons.lang3.time.DatePrinter" />
	<method signature="java.lang.StringBuffer format(java.util.Calendar,java.lang.StringBuffer)" class="org.apache.commons.lang3.time.DatePrinter" />
	<method signature="java.util.TimeZone getTimeZone()" class="org.apache.commons.lang3.time.DatePrinter" />
	<method signature="java.lang.String getPattern()" class="org.apache.commons.lang3.time.DatePrinter" />
	<method signature="java.lang.String format(java.util.Date)" class="org.apache.commons.lang3.time.DatePrinter" />
	<method signature="java.lang.StringBuffer format(long,java.lang.StringBuffer)" class="org.apache.commons.lang3.time.DatePrinter" />
	<method signature="java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer)" class="org.apache.commons.lang3.time.DatePrinter" />
	<class name="org.apache.xerces.impl.dtd.models.CMStateSet" />
	<method signature="int hashCode()" class="org.apache.xerces.impl.dtd.models.CMStateSet" />
	<method signature="void intersection(org.apache.xerces.impl.dtd.models.CMStateSet)" class="org.apache.xerces.impl.dtd.models.CMStateSet" />
	<method signature="void setTo(org.apache.xerces.impl.dtd.models.CMStateSet)" class="org.apache.xerces.impl.dtd.models.CMStateSet" />
	<method signature="boolean getBit(int)" class="org.apache.xerces.impl.dtd.models.CMStateSet" />
	<method signature="void &lt;init&gt;(int)" class="org.apache.xerces.impl.dtd.models.CMStateSet" />
	<method signature="boolean isEmpty()" class="org.apache.xerces.impl.dtd.models.CMStateSet" />
	<method signature="boolean equals(java.lang.Object)" class="org.apache.xerces.impl.dtd.models.CMStateSet" />
	<method signature="void setBit(int)" class="org.apache.xerces.impl.dtd.models.CMStateSet" />
	<method signature="java.lang.String toString()" class="org.apache.xerces.impl.dtd.models.CMStateSet" />
	<method signature="void union(org.apache.xerces.impl.dtd.models.CMStateSet)" class="org.apache.xerces.impl.dtd.models.CMStateSet" />
	<method signature="void zeroBits()" class="org.apache.xerces.impl.dtd.models.CMStateSet" />
	<class name="org.jfree.ui.StandardGradientPaintTransformer" />
	<method signature="void &lt;init&gt;(org.jfree.ui.GradientPaintTransformType)" class="org.jfree.ui.StandardGradientPaintTransformer" />
	<method signature="java.lang.Object clone()" class="org.jfree.ui.StandardGradientPaintTransformer" />
	<method signature="int hashCode()" class="org.jfree.ui.StandardGradientPaintTransformer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.ui.StandardGradientPaintTransformer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.ui.StandardGradientPaintTransformer" />
	<method signature="org.jfree.ui.GradientPaintTransformType getType()" class="org.jfree.ui.StandardGradientPaintTransformer" />
	<method signature="java.awt.GradientPaint transform(java.awt.GradientPaint,java.awt.Shape)" class="org.jfree.ui.StandardGradientPaintTransformer" />
	<class name="freemarker.template.TemplateModelAdapter" />
	<method signature="freemarker.template.TemplateModel getTemplateModel()" class="freemarker.template.TemplateModelAdapter" />
	<class name="org.apache.xerces.xni.parser.XMLConfigurationException" />
	<method signature="void &lt;init&gt;(short,java.lang.String,java.lang.String)" class="org.apache.xerces.xni.parser.XMLConfigurationException" />
	<method signature="java.lang.String getIdentifier()" class="org.apache.xerces.xni.parser.XMLConfigurationException" />
	<method signature="void &lt;init&gt;(short,java.lang.String)" class="org.apache.xerces.xni.parser.XMLConfigurationException" />
	<method signature="short getType()" class="org.apache.xerces.xni.parser.XMLConfigurationException" />
	<class name="org.jdom2.EntityRef" />
	<method signature="java.lang.String getSystemID()" class="org.jdom2.EntityRef" />
	<method signature="java.lang.String getName()" class="org.jdom2.EntityRef" />
	<method signature="org.jdom2.EntityRef setName(java.lang.String)" class="org.jdom2.EntityRef" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String)" class="org.jdom2.EntityRef" />
	<method signature="java.lang.String getPublicID()" class="org.jdom2.EntityRef" />
	<method signature="org.jdom2.EntityRef setPublicID(java.lang.String)" class="org.jdom2.EntityRef" />
	<method signature="org.jdom2.Element getParent()" class="org.jdom2.EntityRef" />
	<method signature="org.jdom2.Content detach()" class="org.jdom2.EntityRef" />
	<method signature="org.jdom2.Content clone()" class="org.jdom2.EntityRef" />
	<method signature="java.lang.Object clone()" class="org.jdom2.EntityRef" />
	<method signature="org.jdom2.EntityRef setSystemID(java.lang.String)" class="org.jdom2.EntityRef" />
	<method signature="java.lang.String getValue()" class="org.jdom2.EntityRef" />
	<method signature="org.jdom2.EntityRef clone()" class="org.jdom2.EntityRef" />
	<method signature="org.jdom2.EntityRef detach()" class="org.jdom2.EntityRef" />
	<method signature="java.lang.String toString()" class="org.jdom2.EntityRef" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jdom2.EntityRef" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="org.jdom2.EntityRef" />
	<method signature="org.jdom2.Parent getParent()" class="org.jdom2.EntityRef" />
	<method signature="org.jdom2.CloneBase clone()" class="org.jdom2.EntityRef" />
	<class name="org.jfree.text.TextBlock" />
	<method signature="int hashCode()" class="org.jfree.text.TextBlock" />
	<method signature="org.jfree.ui.HorizontalAlignment getLineAlignment()" class="org.jfree.text.TextBlock" />
	<method signature="void addLine(org.jfree.text.TextLine)" class="org.jfree.text.TextBlock" />
	<method signature="void addLine(java.lang.String,java.awt.Font,java.awt.Paint)" class="org.jfree.text.TextBlock" />
	<method signature="void draw(java.awt.Graphics2D,float,float,org.jfree.text.TextBlockAnchor,float,float,double)" class="org.jfree.text.TextBlock" />
	<method signature="java.awt.Shape calculateBounds(java.awt.Graphics2D,float,float,org.jfree.text.TextBlockAnchor,float,float,double)" class="org.jfree.text.TextBlock" />
	<method signature="org.jfree.text.TextLine getLastLine()" class="org.jfree.text.TextBlock" />
	<method signature="void setLineAlignment(org.jfree.ui.HorizontalAlignment)" class="org.jfree.text.TextBlock" />
	<method signature="java.util.List getLines()" class="org.jfree.text.TextBlock" />
	<method signature="void draw(java.awt.Graphics2D,float,float,org.jfree.text.TextBlockAnchor)" class="org.jfree.text.TextBlock" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.text.TextBlock" />
	<method signature="void &lt;init&gt;()" class="org.jfree.text.TextBlock" />
	<method signature="org.jfree.ui.Size2D calculateDimensions(java.awt.Graphics2D)" class="org.jfree.text.TextBlock" />
	<class name="org.apache.commons.lang3.time.FastDateParser" />
	<method signature="java.util.Locale getLocale()" class="org.apache.commons.lang3.time.FastDateParser" />
	<method signature="java.util.TimeZone getTimeZone()" class="org.apache.commons.lang3.time.FastDateParser" />
	<method signature="java.util.Date parse(java.lang.String)" class="org.apache.commons.lang3.time.FastDateParser" />
	<method signature="boolean equals(java.lang.Object)" class="org.apache.commons.lang3.time.FastDateParser" />
	<method signature="int hashCode()" class="org.apache.commons.lang3.time.FastDateParser" />
	<method signature="java.util.Date parse(java.lang.String,java.text.ParsePosition)" class="org.apache.commons.lang3.time.FastDateParser" />
	<method signature="java.lang.Object parseObject(java.lang.String)" class="org.apache.commons.lang3.time.FastDateParser" />
	<method signature="java.lang.String toString()" class="org.apache.commons.lang3.time.FastDateParser" />
	<method signature="java.lang.String getPattern()" class="org.apache.commons.lang3.time.FastDateParser" />
	<method signature="java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)" class="org.apache.commons.lang3.time.FastDateParser" />
	<class name="org.apache.xerces.impl.xs.XSAttributeGroupDecl" />
	<method signature="java.lang.String getName()" class="org.apache.xerces.impl.xs.XSAttributeGroupDecl" />
	<method signature="org.apache.xerces.xs.XSAttributeUse getAttributeUseNoProhibited(java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.XSAttributeGroupDecl" />
	<method signature="void reset()" class="org.apache.xerces.impl.xs.XSAttributeGroupDecl" />
	<method signature="org.apache.xerces.xs.XSAttributeUse getAttributeUse(java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.XSAttributeGroupDecl" />
	<method signature="org.apache.xerces.xs.XSAnnotation getAnnotation()" class="org.apache.xerces.impl.xs.XSAttributeGroupDecl" />
	<method signature="org.apache.xerces.xs.XSObjectList getAnnotations()" class="org.apache.xerces.impl.xs.XSAttributeGroupDecl" />
	<method signature="short getType()" class="org.apache.xerces.impl.xs.XSAttributeGroupDecl" />
	<method signature="java.lang.Object[] validRestrictionOf(java.lang.String,org.apache.xerces.impl.xs.XSAttributeGroupDecl)" class="org.apache.xerces.impl.xs.XSAttributeGroupDecl" />
	<method signature="org.apache.xerces.xs.XSNamespaceItem getNamespaceItem()" class="org.apache.xerces.impl.xs.XSAttributeGroupDecl" />
	<method signature="void removeProhibitedAttrs()" class="org.apache.xerces.impl.xs.XSAttributeGroupDecl" />
	<method signature="void replaceAttributeUse(org.apache.xerces.xs.XSAttributeUse,org.apache.xerces.impl.xs.XSAttributeUseImpl)" class="org.apache.xerces.impl.xs.XSAttributeGroupDecl" />
	<method signature="org.apache.xerces.xs.XSObjectList getAttributeUses()" class="org.apache.xerces.impl.xs.XSAttributeGroupDecl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xs.XSAttributeGroupDecl" />
	<method signature="java.lang.String getNamespace()" class="org.apache.xerces.impl.xs.XSAttributeGroupDecl" />
	<method signature="org.apache.xerces.xs.XSWildcard getAttributeWildcard()" class="org.apache.xerces.impl.xs.XSAttributeGroupDecl" />
	<method signature="java.lang.String addAttributeUse(org.apache.xerces.impl.xs.XSAttributeUseImpl)" class="org.apache.xerces.impl.xs.XSAttributeGroupDecl" />
	<class name="org.jfree.chart.needle.ArrowNeedle" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.needle.ArrowNeedle" />
	<method signature="int hashCode()" class="org.jfree.chart.needle.ArrowNeedle" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.needle.ArrowNeedle" />
	<method signature="void &lt;init&gt;(boolean)" class="org.jfree.chart.needle.ArrowNeedle" />
	<class name="org.apache.xerces.impl.dtd.models.CMLeaf" />
	<method signature="void &lt;init&gt;(org.apache.xerces.xni.QName,int)" class="org.apache.xerces.impl.dtd.models.CMLeaf" />
	<method signature="void &lt;init&gt;(org.apache.xerces.xni.QName)" class="org.apache.xerces.impl.dtd.models.CMLeaf" />
	<method signature="java.lang.String toString()" class="org.apache.xerces.impl.dtd.models.CMLeaf" />
	<method signature="boolean isNullable()" class="org.apache.xerces.impl.dtd.models.CMLeaf" />
	<class name="freemarker.template.Template$WrongEncodingException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="freemarker.template.Template$WrongEncodingException" />
	<class name="net.jcip.annotations.NotThreadSafe" />
	<class name="com.toedter.components.JSpinField" />
	<method signature="void setMinimum(int)" class="com.toedter.components.JSpinField" />
	<method signature="void setHorizontalAlignment(int)" class="com.toedter.components.JSpinField" />
	<method signature="void adjustWidthToMaximumValue()" class="com.toedter.components.JSpinField" />
	<method signature="int getValue()" class="com.toedter.components.JSpinField" />
	<method signature="void setEnabled(boolean)" class="com.toedter.components.JSpinField" />
	<method signature="void setValue(int)" class="com.toedter.components.JSpinField" />
	<method signature="void &lt;init&gt;(int,int)" class="com.toedter.components.JSpinField" />
	<method signature="int getMinimum()" class="com.toedter.components.JSpinField" />
	<method signature="void focusLost(java.awt.event.FocusEvent)" class="com.toedter.components.JSpinField" />
	<method signature="void stateChanged(javax.swing.event.ChangeEvent)" class="com.toedter.components.JSpinField" />
	<method signature="java.awt.Component getSpinner()" class="com.toedter.components.JSpinField" />
	<method signature="void caretUpdate(javax.swing.event.CaretEvent)" class="com.toedter.components.JSpinField" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="com.toedter.components.JSpinField" />
	<method signature="void &lt;init&gt;()" class="com.toedter.components.JSpinField" />
	<method signature="void setFont(java.awt.Font)" class="com.toedter.components.JSpinField" />
	<method signature="void main(java.lang.String[])" class="com.toedter.components.JSpinField" />
	<method signature="void setMaximum(int)" class="com.toedter.components.JSpinField" />
	<method signature="int getMaximum()" class="com.toedter.components.JSpinField" />
	<method signature="void setForeground(java.awt.Color)" class="com.toedter.components.JSpinField" />
	<method signature="void focusGained(java.awt.event.FocusEvent)" class="com.toedter.components.JSpinField" />
	<class name="org.apache.xerces.parsers.DTDParser" />
	<method signature="void startAttlist(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.DTDParser" />
	<method signature="void setDTDContentModelSource(org.apache.xerces.xni.parser.XMLDTDContentModelSource)" class="org.apache.xerces.parsers.DTDParser" />
	<method signature="void startContentModel(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.DTDParser" />
	<method signature="org.apache.xerces.impl.dtd.DTDGrammar getDTDGrammar()" class="org.apache.xerces.parsers.DTDParser" />
	<method signature="void processingInstruction(java.lang.String,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.DTDParser" />
	<method signature="void pcdata(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.DTDParser" />
	<method signature="void childrenStartGroup()" class="org.apache.xerces.parsers.DTDParser" />
	<method signature="void textDecl(java.lang.String,java.lang.String)" class="org.apache.xerces.parsers.DTDParser" />
	<method signature="void externalEntityDecl(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.DTDParser" />
	<method signature="void notationDecl(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.DTDParser" />
	<method signature="void startParameterEntity(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.DTDParser" />
	<method signature="void startGroup(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.DTDParser" />
	<method signature="void endEntity(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.DTDParser" />
	<method signature="void attributeDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.DTDParser" />
	<method signature="void empty(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.DTDParser" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable)" class="org.apache.xerces.parsers.DTDParser" />
	<method signature="void internalEntityDecl(java.lang.String,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.DTDParser" />
	<method signature="void textDecl(java.lang.String,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.DTDParser" />
	<method signature="org.apache.xerces.xni.parser.XMLDTDContentModelSource getDTDContentModelSource()" class="org.apache.xerces.parsers.DTDParser" />
	<method signature="void separator(short,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.DTDParser" />
	<method signature="void startExternalSubset(org.apache.xerces.xni.XMLResourceIdentifier,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.DTDParser" />
	<method signature="void startContentModel(java.lang.String,short)" class="org.apache.xerces.parsers.DTDParser" />
	<method signature="void endContentModel(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.DTDParser" />
	<method signature="void startEntity(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.parsers.DTDParser" />
	<method signature="void setDTDSource(org.apache.xerces.xni.parser.XMLDTDSource)" class="org.apache.xerces.parsers.DTDParser" />
	<method signature="void startDTD(org.apache.xerces.xni.XMLLocator,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.DTDParser" />
	<method signature="void elementDecl(java.lang.String,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.DTDParser" />
	<method signature="void childrenElement(java.lang.String)" class="org.apache.xerces.parsers.DTDParser" />
	<method signature="void element(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.DTDParser" />
	<method signature="void childrenSeparator(short)" class="org.apache.xerces.parsers.DTDParser" />
	<method signature="org.apache.xerces.xni.parser.XMLDTDSource getDTDSource()" class="org.apache.xerces.parsers.DTDParser" />
	<method signature="void endAttlist(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.DTDParser" />
	<method signature="void endParameterEntity(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.DTDParser" />
	<method signature="void endConditional(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.DTDParser" />
	<method signature="void childrenEndGroup()" class="org.apache.xerces.parsers.DTDParser" />
	<method signature="void ignoredCharacters(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.DTDParser" />
	<method signature="void startConditional(short,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.DTDParser" />
	<method signature="void endDTD(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.DTDParser" />
	<method signature="void childrenOccurrence(short)" class="org.apache.xerces.parsers.DTDParser" />
	<method signature="void unparsedEntityDecl(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.DTDParser" />
	<method signature="void any(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.DTDParser" />
	<method signature="void endExternalSubset(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.DTDParser" />
	<method signature="void comment(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.DTDParser" />
	<method signature="void mixedElement(java.lang.String)" class="org.apache.xerces.parsers.DTDParser" />
	<method signature="void endGroup(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.DTDParser" />
	<method signature="void endContentModel()" class="org.apache.xerces.parsers.DTDParser" />
	<method signature="void occurrence(short,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.DTDParser" />
	<class name="org.w3c.dom.css.DOMImplementationCSS" />
	<method signature="org.w3c.dom.css.CSSStyleSheet createCSSStyleSheet(java.lang.String,java.lang.String)" class="org.w3c.dom.css.DOMImplementationCSS" />
	<class name="org.xml.sax.XMLFilter" />
	<method signature="org.xml.sax.XMLReader getParent()" class="org.xml.sax.XMLFilter" />
	<method signature="void setParent(org.xml.sax.XMLReader)" class="org.xml.sax.XMLFilter" />
	<class name="freemarker.template.DefaultObjectWrapper" />
	<method signature="void &lt;init&gt;()" class="freemarker.template.DefaultObjectWrapper" />
	<method signature="freemarker.template.TemplateModel wrap(java.lang.Object)" class="freemarker.template.DefaultObjectWrapper" />
	<method signature="freemarker.template.TemplateModel wrapDomNode(java.lang.Object)" class="freemarker.template.DefaultObjectWrapper" />
	<class name="org.jfree.chart.util.LogFormat" />
	<method signature="java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.FieldPosition)" class="org.jfree.chart.util.LogFormat" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.util.LogFormat" />
	<method signature="void &lt;init&gt;(double,java.lang.String,java.lang.String,boolean)" class="org.jfree.chart.util.LogFormat" />
	<method signature="java.text.NumberFormat getExponentFormat()" class="org.jfree.chart.util.LogFormat" />
	<method signature="void setExponentFormat(java.text.NumberFormat)" class="org.jfree.chart.util.LogFormat" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.util.LogFormat" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.util.LogFormat" />
	<method signature="java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.FieldPosition)" class="org.jfree.chart.util.LogFormat" />
	<method signature="java.lang.Number parse(java.lang.String,java.text.ParsePosition)" class="org.jfree.chart.util.LogFormat" />
	<method signature="void &lt;init&gt;(double,java.lang.String,boolean)" class="org.jfree.chart.util.LogFormat" />
	<class name="org.apache.xerces.xni.XMLLocator" />
	<method signature="java.lang.String getEncoding()" class="org.apache.xerces.xni.XMLLocator" />
	<method signature="int getCharacterOffset()" class="org.apache.xerces.xni.XMLLocator" />
	<method signature="java.lang.String getExpandedSystemId()" class="org.apache.xerces.xni.XMLLocator" />
	<method signature="int getLineNumber()" class="org.apache.xerces.xni.XMLLocator" />
	<method signature="java.lang.String getPublicId()" class="org.apache.xerces.xni.XMLLocator" />
	<method signature="java.lang.String getLiteralSystemId()" class="org.apache.xerces.xni.XMLLocator" />
	<method signature="int getColumnNumber()" class="org.apache.xerces.xni.XMLLocator" />
	<method signature="java.lang.String getBaseSystemId()" class="org.apache.xerces.xni.XMLLocator" />
	<method signature="java.lang.String getXMLVersion()" class="org.apache.xerces.xni.XMLLocator" />
	<class name="org.jfree.chart.block.ColumnArrangement" />
	<method signature="void add(org.jfree.chart.block.Block,java.lang.Object)" class="org.jfree.chart.block.ColumnArrangement" />
	<method signature="void clear()" class="org.jfree.chart.block.ColumnArrangement" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.block.ColumnArrangement" />
	<method signature="org.jfree.ui.Size2D arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" class="org.jfree.chart.block.ColumnArrangement" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.block.ColumnArrangement" />
	<method signature="void &lt;init&gt;(org.jfree.ui.HorizontalAlignment,org.jfree.ui.VerticalAlignment,double,double)" class="org.jfree.chart.block.ColumnArrangement" />
	<class name="org.jfree.data.time.TimePeriodValues" />
	<method signature="org.jfree.data.time.TimePeriodValue getDataItem(int)" class="org.jfree.data.time.TimePeriodValues" />
	<method signature="void add(org.jfree.data.time.TimePeriod,double)" class="org.jfree.data.time.TimePeriodValues" />
	<method signature="void setDomainDescription(java.lang.String)" class="org.jfree.data.time.TimePeriodValues" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.time.TimePeriodValues" />
	<method signature="int getMinMiddleIndex()" class="org.jfree.data.time.TimePeriodValues" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.time.TimePeriodValues" />
	<method signature="java.lang.String getDomainDescription()" class="org.jfree.data.time.TimePeriodValues" />
	<method signature="org.jfree.data.time.TimePeriodValues createCopy(int,int)" class="org.jfree.data.time.TimePeriodValues" />
	<method signature="java.lang.String getRangeDescription()" class="org.jfree.data.time.TimePeriodValues" />
	<method signature="void update(int,java.lang.Number)" class="org.jfree.data.time.TimePeriodValues" />
	<method signature="int hashCode()" class="org.jfree.data.time.TimePeriodValues" />
	<method signature="org.jfree.data.time.TimePeriod getTimePeriod(int)" class="org.jfree.data.time.TimePeriodValues" />
	<method signature="int getMaxMiddleIndex()" class="org.jfree.data.time.TimePeriodValues" />
	<method signature="int getMinStartIndex()" class="org.jfree.data.time.TimePeriodValues" />
	<method signature="void add(org.jfree.data.time.TimePeriod,java.lang.Number)" class="org.jfree.data.time.TimePeriodValues" />
	<method signature="int getMaxEndIndex()" class="org.jfree.data.time.TimePeriodValues" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String)" class="org.jfree.data.time.TimePeriodValues" />
	<method signature="int getMaxStartIndex()" class="org.jfree.data.time.TimePeriodValues" />
	<method signature="void delete(int,int)" class="org.jfree.data.time.TimePeriodValues" />
	<method signature="void setRangeDescription(java.lang.String)" class="org.jfree.data.time.TimePeriodValues" />
	<method signature="java.lang.Number getValue(int)" class="org.jfree.data.time.TimePeriodValues" />
	<method signature="int getItemCount()" class="org.jfree.data.time.TimePeriodValues" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.data.time.TimePeriodValues" />
	<method signature="void add(org.jfree.data.time.TimePeriodValue)" class="org.jfree.data.time.TimePeriodValues" />
	<method signature="int getMinEndIndex()" class="org.jfree.data.time.TimePeriodValues" />
	<class name="org.apache.html.dom.HTMLOptionElementImpl" />
	<method signature="java.lang.String getLabel()" class="org.apache.html.dom.HTMLOptionElementImpl" />
	<method signature="void setValue(java.lang.String)" class="org.apache.html.dom.HTMLOptionElementImpl" />
	<method signature="java.lang.String getText()" class="org.apache.html.dom.HTMLOptionElementImpl" />
	<method signature="void setIndex(int)" class="org.apache.html.dom.HTMLOptionElementImpl" />
	<method signature="void setText(java.lang.String)" class="org.apache.html.dom.HTMLOptionElementImpl" />
	<method signature="boolean getSelected()" class="org.apache.html.dom.HTMLOptionElementImpl" />
	<method signature="boolean getDisabled()" class="org.apache.html.dom.HTMLOptionElementImpl" />
	<method signature="void setLabel(java.lang.String)" class="org.apache.html.dom.HTMLOptionElementImpl" />
	<method signature="int getIndex()" class="org.apache.html.dom.HTMLOptionElementImpl" />
	<method signature="void setDisabled(boolean)" class="org.apache.html.dom.HTMLOptionElementImpl" />
	<method signature="void setSelected(boolean)" class="org.apache.html.dom.HTMLOptionElementImpl" />
	<method signature="java.lang.String getValue()" class="org.apache.html.dom.HTMLOptionElementImpl" />
	<method signature="boolean getDefaultSelected()" class="org.apache.html.dom.HTMLOptionElementImpl" />
	<method signature="void setDefaultSelected(boolean)" class="org.apache.html.dom.HTMLOptionElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLOptionElementImpl" />
	<class name="org.jfree.chart.plot.dial.DialLayerChangeEvent" />
	<method signature="org.jfree.chart.plot.dial.DialLayer getDialLayer()" class="org.jfree.chart.plot.dial.DialLayerChangeEvent" />
	<method signature="void &lt;init&gt;(org.jfree.chart.plot.dial.DialLayer)" class="org.jfree.chart.plot.dial.DialLayerChangeEvent" />
	<class name="org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer" />
	<method signature="java.awt.Stroke getErrorIndicatorStroke()" class="org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer" />
	<method signature="int hashCode()" class="org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer" />
	<method signature="void setErrorIndicatorPaint(java.awt.Paint)" class="org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer" />
	<method signature="org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)" class="org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer" />
	<method signature="java.awt.Paint getErrorIndicatorPaint()" class="org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer" />
	<method signature="void setErrorIndicatorStroke(java.awt.Stroke)" class="org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer" />
	<method signature="void &lt;init&gt;(boolean,boolean)" class="org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)" class="org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer" />
	<class name="org.w3c.dom.html.HTMLParagraphElement" />
	<method signature="void setAlign(java.lang.String)" class="org.w3c.dom.html.HTMLParagraphElement" />
	<method signature="java.lang.String getAlign()" class="org.w3c.dom.html.HTMLParagraphElement" />
	<class name="org.jfree.ui.tabbedui.DetailEditor" />
	<method signature="void clear()" class="org.jfree.ui.tabbedui.DetailEditor" />
	<method signature="void update()" class="org.jfree.ui.tabbedui.DetailEditor" />
	<method signature="void &lt;init&gt;()" class="org.jfree.ui.tabbedui.DetailEditor" />
	<method signature="boolean isConfirmed()" class="org.jfree.ui.tabbedui.DetailEditor" />
	<method signature="java.lang.Object getObject()" class="org.jfree.ui.tabbedui.DetailEditor" />
	<method signature="void setObject(java.lang.Object)" class="org.jfree.ui.tabbedui.DetailEditor" />
	<class name="org.jfree.ui.about.SystemPropertiesTableModel" />
	<method signature="void sortByColumn(int,boolean)" class="org.jfree.ui.about.SystemPropertiesTableModel" />
	<method signature="void &lt;init&gt;()" class="org.jfree.ui.about.SystemPropertiesTableModel" />
	<method signature="int getRowCount()" class="org.jfree.ui.about.SystemPropertiesTableModel" />
	<method signature="boolean isSortable(int)" class="org.jfree.ui.about.SystemPropertiesTableModel" />
	<method signature="java.lang.String getColumnName(int)" class="org.jfree.ui.about.SystemPropertiesTableModel" />
	<method signature="java.lang.Object getValueAt(int,int)" class="org.jfree.ui.about.SystemPropertiesTableModel" />
	<method signature="int getColumnCount()" class="org.jfree.ui.about.SystemPropertiesTableModel" />
	<class name="org.jfree.chart.urls.TimeSeriesURLGenerator" />
	<method signature="java.lang.String generateURL(org.jfree.data.xy.XYDataset,int,int)" class="org.jfree.chart.urls.TimeSeriesURLGenerator" />
	<method signature="java.lang.String getPrefix()" class="org.jfree.chart.urls.TimeSeriesURLGenerator" />
	<method signature="java.text.DateFormat getDateFormat()" class="org.jfree.chart.urls.TimeSeriesURLGenerator" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.urls.TimeSeriesURLGenerator" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.urls.TimeSeriesURLGenerator" />
	<method signature="java.lang.String getSeriesParameterName()" class="org.jfree.chart.urls.TimeSeriesURLGenerator" />
	<method signature="void &lt;init&gt;(java.text.DateFormat,java.lang.String,java.lang.String,java.lang.String)" class="org.jfree.chart.urls.TimeSeriesURLGenerator" />
	<method signature="java.lang.String getItemParameterName()" class="org.jfree.chart.urls.TimeSeriesURLGenerator" />
	<class name="org.jfree.date.DayAndMonthRule" />
	<method signature="org.jfree.date.SerialDate getDate(int)" class="org.jfree.date.DayAndMonthRule" />
	<method signature="void &lt;init&gt;()" class="org.jfree.date.DayAndMonthRule" />
	<method signature="void &lt;init&gt;(int,int)" class="org.jfree.date.DayAndMonthRule" />
	<method signature="void setDayOfMonth(int)" class="org.jfree.date.DayAndMonthRule" />
	<method signature="int getDayOfMonth()" class="org.jfree.date.DayAndMonthRule" />
	<method signature="int getMonth()" class="org.jfree.date.DayAndMonthRule" />
	<method signature="void setMonth(int)" class="org.jfree.date.DayAndMonthRule" />
	<class name="com.toedter.components.JSpinFieldBeanInfo" />
	<method signature="void &lt;init&gt;()" class="com.toedter.components.JSpinFieldBeanInfo" />
	<class name="org.jfree.data.xml.DatasetReader" />
	<method signature="org.jfree.data.general.PieDataset readPieDatasetFromXML(java.io.File)" class="org.jfree.data.xml.DatasetReader" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.xml.DatasetReader" />
	<method signature="org.jfree.data.general.PieDataset readPieDatasetFromXML(java.io.InputStream)" class="org.jfree.data.xml.DatasetReader" />
	<method signature="org.jfree.data.category.CategoryDataset readCategoryDatasetFromXML(java.io.File)" class="org.jfree.data.xml.DatasetReader" />
	<method signature="org.jfree.data.category.CategoryDataset readCategoryDatasetFromXML(java.io.InputStream)" class="org.jfree.data.xml.DatasetReader" />
	<class name="org.apache.xerces.impl.XMLEntityManager" />
	<method signature="java.lang.String[] getRecognizedProperties()" class="org.apache.xerces.impl.XMLEntityManager" />
	<method signature="void reset()" class="org.apache.xerces.impl.XMLEntityManager" />
	<method signature="org.apache.xerces.impl.XMLEntityScanner getEntityScanner()" class="org.apache.xerces.impl.XMLEntityManager" />
	<method signature="java.lang.Boolean getFeatureDefault(java.lang.String)" class="org.apache.xerces.impl.XMLEntityManager" />
	<method signature="void startEntity(java.lang.String,org.apache.xerces.xni.parser.XMLInputSource,boolean,boolean)" class="org.apache.xerces.impl.XMLEntityManager" />
	<method signature="void reset(org.apache.xerces.xni.parser.XMLComponentManager)" class="org.apache.xerces.impl.XMLEntityManager" />
	<method signature="void endExternalSubset()" class="org.apache.xerces.impl.XMLEntityManager" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.XMLEntityManager" />
	<method signature="org.apache.xerces.xni.parser.XMLInputSource resolveEntity(org.apache.xerces.xni.XMLResourceIdentifier)" class="org.apache.xerces.impl.XMLEntityManager" />
	<method signature="java.lang.String expandSystemId(java.lang.String,java.lang.String,boolean)" class="org.apache.xerces.impl.XMLEntityManager" />
	<method signature="java.lang.String[] getRecognizedFeatures()" class="org.apache.xerces.impl.XMLEntityManager" />
	<method signature="boolean isDeclaredEntity(java.lang.String)" class="org.apache.xerces.impl.XMLEntityManager" />
	<method signature="org.apache.xerces.xni.XMLResourceIdentifier getCurrentResourceIdentifier()" class="org.apache.xerces.impl.XMLEntityManager" />
	<method signature="void addUnparsedEntity(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.impl.XMLEntityManager" />
	<method signature="boolean isUnparsedEntity(java.lang.String)" class="org.apache.xerces.impl.XMLEntityManager" />
	<method signature="void setEntityHandler(org.apache.xerces.impl.XMLEntityHandler)" class="org.apache.xerces.impl.XMLEntityManager" />
	<method signature="void startDocumentEntity(org.apache.xerces.xni.parser.XMLInputSource)" class="org.apache.xerces.impl.XMLEntityManager" />
	<method signature="void &lt;init&gt;(org.apache.xerces.impl.XMLEntityManager)" class="org.apache.xerces.impl.XMLEntityManager" />
	<method signature="java.io.OutputStream createOutputStream(java.lang.String)" class="org.apache.xerces.impl.XMLEntityManager" />
	<method signature="void absolutizeAgainstUserDir(org.apache.xerces.util.URI)" class="org.apache.xerces.impl.XMLEntityManager" />
	<method signature="boolean isEntityDeclInExternalSubset(java.lang.String)" class="org.apache.xerces.impl.XMLEntityManager" />
	<method signature="void startDTDEntity(org.apache.xerces.xni.parser.XMLInputSource)" class="org.apache.xerces.impl.XMLEntityManager" />
	<method signature="boolean isExternalEntity(java.lang.String)" class="org.apache.xerces.impl.XMLEntityManager" />
	<method signature="void setScannerVersion(short)" class="org.apache.xerces.impl.XMLEntityManager" />
	<method signature="void setFeature(java.lang.String,boolean)" class="org.apache.xerces.impl.XMLEntityManager" />
	<method signature="void setStandalone(boolean)" class="org.apache.xerces.impl.XMLEntityManager" />
	<method signature="void startEntity(java.lang.String,boolean)" class="org.apache.xerces.impl.XMLEntityManager" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="org.apache.xerces.impl.XMLEntityManager" />
	<method signature="boolean isStandalone()" class="org.apache.xerces.impl.XMLEntityManager" />
	<method signature="void startExternalSubset()" class="org.apache.xerces.impl.XMLEntityManager" />
	<method signature="java.lang.Object getPropertyDefault(java.lang.String)" class="org.apache.xerces.impl.XMLEntityManager" />
	<method signature="java.lang.String setupCurrentEntity(java.lang.String,org.apache.xerces.xni.parser.XMLInputSource,boolean,boolean)" class="org.apache.xerces.impl.XMLEntityManager" />
	<method signature="void addInternalEntity(java.lang.String,java.lang.String)" class="org.apache.xerces.impl.XMLEntityManager" />
	<method signature="void addExternalEntity(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.impl.XMLEntityManager" />
	<method signature="org.apache.xerces.impl.XMLEntityManager$ScannedEntity getCurrentEntity()" class="org.apache.xerces.impl.XMLEntityManager" />
	<method signature="void closeReaders()" class="org.apache.xerces.impl.XMLEntityManager" />
	<class name="org.jfree.chart.needle.PlumNeedle" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.needle.PlumNeedle" />
	<method signature="int hashCode()" class="org.jfree.chart.needle.PlumNeedle" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.needle.PlumNeedle" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.needle.PlumNeedle" />
	<class name="org.apache.xerces.xs.XSSimpleTypeDefinition" />
	<method signature="short getVariety()" class="org.apache.xerces.xs.XSSimpleTypeDefinition" />
	<method signature="short getBuiltInKind()" class="org.apache.xerces.xs.XSSimpleTypeDefinition" />
	<method signature="org.apache.xerces.xs.XSSimpleTypeDefinition getItemType()" class="org.apache.xerces.xs.XSSimpleTypeDefinition" />
	<method signature="short getFixedFacets()" class="org.apache.xerces.xs.XSSimpleTypeDefinition" />
	<method signature="org.apache.xerces.xs.StringList getLexicalPattern()" class="org.apache.xerces.xs.XSSimpleTypeDefinition" />
	<method signature="boolean getBounded()" class="org.apache.xerces.xs.XSSimpleTypeDefinition" />
	<method signature="org.apache.xerces.xs.StringList getLexicalEnumeration()" class="org.apache.xerces.xs.XSSimpleTypeDefinition" />
	<method signature="org.apache.xerces.xs.XSObjectList getMultiValueFacets()" class="org.apache.xerces.xs.XSSimpleTypeDefinition" />
	<method signature="org.apache.xerces.xs.XSObjectList getAnnotations()" class="org.apache.xerces.xs.XSSimpleTypeDefinition" />
	<method signature="org.apache.xerces.xs.XSObject getFacet(int)" class="org.apache.xerces.xs.XSSimpleTypeDefinition" />
	<method signature="org.apache.xerces.xs.XSObjectList getMemberTypes()" class="org.apache.xerces.xs.XSSimpleTypeDefinition" />
	<method signature="boolean isFixedFacet(short)" class="org.apache.xerces.xs.XSSimpleTypeDefinition" />
	<method signature="short getOrdered()" class="org.apache.xerces.xs.XSSimpleTypeDefinition" />
	<method signature="java.lang.String getLexicalFacetValue(short)" class="org.apache.xerces.xs.XSSimpleTypeDefinition" />
	<method signature="boolean getFinite()" class="org.apache.xerces.xs.XSSimpleTypeDefinition" />
	<method signature="boolean isDefinedFacet(short)" class="org.apache.xerces.xs.XSSimpleTypeDefinition" />
	<method signature="boolean getNumeric()" class="org.apache.xerces.xs.XSSimpleTypeDefinition" />
	<method signature="org.apache.xerces.xs.XSObjectList getFacets()" class="org.apache.xerces.xs.XSSimpleTypeDefinition" />
	<method signature="org.apache.xerces.xs.XSSimpleTypeDefinition getPrimitiveType()" class="org.apache.xerces.xs.XSSimpleTypeDefinition" />
	<method signature="short getDefinedFacets()" class="org.apache.xerces.xs.XSSimpleTypeDefinition" />
	<class name="org.apache.commons.lang3.builder.DiffBuilder" />
	<method signature="org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,long,long)" class="org.apache.commons.lang3.builder.DiffBuilder" />
	<method signature="org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,int[],int[])" class="org.apache.commons.lang3.builder.DiffBuilder" />
	<method signature="org.apache.commons.lang3.builder.DiffResult build()" class="org.apache.commons.lang3.builder.DiffBuilder" />
	<method signature="org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,double,double)" class="org.apache.commons.lang3.builder.DiffBuilder" />
	<method signature="org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,boolean,boolean)" class="org.apache.commons.lang3.builder.DiffBuilder" />
	<method signature="org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,double[],double[])" class="org.apache.commons.lang3.builder.DiffBuilder" />
	<method signature="void &lt;init&gt;(java.lang.Object,java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle)" class="org.apache.commons.lang3.builder.DiffBuilder" />
	<method signature="org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,char[],char[])" class="org.apache.commons.lang3.builder.DiffBuilder" />
	<method signature="org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,float,float)" class="org.apache.commons.lang3.builder.DiffBuilder" />
	<method signature="org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,long[],long[])" class="org.apache.commons.lang3.builder.DiffBuilder" />
	<method signature="org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,byte,byte)" class="org.apache.commons.lang3.builder.DiffBuilder" />
	<method signature="org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,byte[],byte[])" class="org.apache.commons.lang3.builder.DiffBuilder" />
	<method signature="void &lt;init&gt;(java.lang.Object,java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,boolean)" class="org.apache.commons.lang3.builder.DiffBuilder" />
	<method signature="org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,java.lang.Object,java.lang.Object)" class="org.apache.commons.lang3.builder.DiffBuilder" />
	<method signature="org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,int,int)" class="org.apache.commons.lang3.builder.DiffBuilder" />
	<method signature="org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,java.lang.Object[],java.lang.Object[])" class="org.apache.commons.lang3.builder.DiffBuilder" />
	<method signature="org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,boolean[],boolean[])" class="org.apache.commons.lang3.builder.DiffBuilder" />
	<method signature="org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,float[],float[])" class="org.apache.commons.lang3.builder.DiffBuilder" />
	<method signature="org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,short,short)" class="org.apache.commons.lang3.builder.DiffBuilder" />
	<method signature="java.lang.Object build()" class="org.apache.commons.lang3.builder.DiffBuilder" />
	<method signature="org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,char,char)" class="org.apache.commons.lang3.builder.DiffBuilder" />
	<method signature="org.apache.commons.lang3.builder.DiffBuilder append(java.lang.String,short[],short[])" class="org.apache.commons.lang3.builder.DiffBuilder" />
	<class name="org.jfree.data.xy.AbstractXYDataset" />
	<method signature="double getXValue(int,int)" class="org.jfree.data.xy.AbstractXYDataset" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.xy.AbstractXYDataset" />
	<method signature="org.jfree.data.DomainOrder getDomainOrder()" class="org.jfree.data.xy.AbstractXYDataset" />
	<method signature="double getYValue(int,int)" class="org.jfree.data.xy.AbstractXYDataset" />
	<class name="edu.umd.cs.findbugs.annotations.UnknownNullness" />
	<class name="org.jfree.chart.StrokeMap" />
	<method signature="void put(java.lang.Comparable,java.awt.Stroke)" class="org.jfree.chart.StrokeMap" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.StrokeMap" />
	<method signature="void clear()" class="org.jfree.chart.StrokeMap" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.StrokeMap" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.StrokeMap" />
	<method signature="boolean containsKey(java.lang.Comparable)" class="org.jfree.chart.StrokeMap" />
	<method signature="java.awt.Stroke getStroke(java.lang.Comparable)" class="org.jfree.chart.StrokeMap" />
	<class name="org.jfree.date.SpreadsheetDate" />
	<method signature="int compareTo(java.lang.Object)" class="org.jfree.date.SpreadsheetDate" />
	<method signature="boolean isOnOrBefore(org.jfree.date.SerialDate)" class="org.jfree.date.SpreadsheetDate" />
	<method signature="int hashCode()" class="org.jfree.date.SpreadsheetDate" />
	<method signature="int getYYYY()" class="org.jfree.date.SpreadsheetDate" />
	<method signature="int getDayOfWeek()" class="org.jfree.date.SpreadsheetDate" />
	<method signature="boolean isBefore(org.jfree.date.SerialDate)" class="org.jfree.date.SpreadsheetDate" />
	<method signature="int compare(org.jfree.date.SerialDate)" class="org.jfree.date.SpreadsheetDate" />
	<method signature="int getMonth()" class="org.jfree.date.SpreadsheetDate" />
	<method signature="int getDayOfMonth()" class="org.jfree.date.SpreadsheetDate" />
	<method signature="void &lt;init&gt;(int)" class="org.jfree.date.SpreadsheetDate" />
	<method signature="boolean isInRange(org.jfree.date.SerialDate,org.jfree.date.SerialDate)" class="org.jfree.date.SpreadsheetDate" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.date.SpreadsheetDate" />
	<method signature="boolean isInRange(org.jfree.date.SerialDate,org.jfree.date.SerialDate,int)" class="org.jfree.date.SpreadsheetDate" />
	<method signature="boolean isOnOrAfter(org.jfree.date.SerialDate)" class="org.jfree.date.SpreadsheetDate" />
	<method signature="int toSerial()" class="org.jfree.date.SpreadsheetDate" />
	<method signature="boolean isAfter(org.jfree.date.SerialDate)" class="org.jfree.date.SpreadsheetDate" />
	<method signature="java.util.Date toDate()" class="org.jfree.date.SpreadsheetDate" />
	<method signature="boolean isOn(org.jfree.date.SerialDate)" class="org.jfree.date.SpreadsheetDate" />
	<method signature="void &lt;init&gt;(int,int,int)" class="org.jfree.date.SpreadsheetDate" />
	<class name="org.jfree.chart.block.BlockParams" />
	<method signature="boolean getGenerateEntities()" class="org.jfree.chart.block.BlockParams" />
	<method signature="void setTranslateY(double)" class="org.jfree.chart.block.BlockParams" />
	<method signature="void setGenerateEntities(boolean)" class="org.jfree.chart.block.BlockParams" />
	<method signature="void setTranslateX(double)" class="org.jfree.chart.block.BlockParams" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.block.BlockParams" />
	<method signature="double getTranslateX()" class="org.jfree.chart.block.BlockParams" />
	<method signature="double getTranslateY()" class="org.jfree.chart.block.BlockParams" />
	<class name="org.apache.xerces.impl.io.UCSReader" />
	<method signature="void mark(int)" class="org.apache.xerces.impl.io.UCSReader" />
	<method signature="int read(char[],int,int)" class="org.apache.xerces.impl.io.UCSReader" />
	<method signature="long skip(long)" class="org.apache.xerces.impl.io.UCSReader" />
	<method signature="void reset()" class="org.apache.xerces.impl.io.UCSReader" />
	<method signature="void &lt;init&gt;(java.io.InputStream,byte[],short)" class="org.apache.xerces.impl.io.UCSReader" />
	<method signature="int read()" class="org.apache.xerces.impl.io.UCSReader" />
	<method signature="void close()" class="org.apache.xerces.impl.io.UCSReader" />
	<method signature="void &lt;init&gt;(java.io.InputStream,int,short)" class="org.apache.xerces.impl.io.UCSReader" />
	<method signature="boolean ready()" class="org.apache.xerces.impl.io.UCSReader" />
	<method signature="boolean markSupported()" class="org.apache.xerces.impl.io.UCSReader" />
	<method signature="void &lt;init&gt;(java.io.InputStream,short)" class="org.apache.xerces.impl.io.UCSReader" />
	<class name="org.jfree.data.xy.DefaultXYZDataset" />
	<method signature="java.lang.Number getZ(int,int)" class="org.jfree.data.xy.DefaultXYZDataset" />
	<method signature="double getXValue(int,int)" class="org.jfree.data.xy.DefaultXYZDataset" />
	<method signature="int hashCode()" class="org.jfree.data.xy.DefaultXYZDataset" />
	<method signature="java.lang.Number getX(int,int)" class="org.jfree.data.xy.DefaultXYZDataset" />
	<method signature="java.lang.Number getY(int,int)" class="org.jfree.data.xy.DefaultXYZDataset" />
	<method signature="int getSeriesCount()" class="org.jfree.data.xy.DefaultXYZDataset" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.xy.DefaultXYZDataset" />
	<method signature="java.lang.Comparable getSeriesKey(int)" class="org.jfree.data.xy.DefaultXYZDataset" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.xy.DefaultXYZDataset" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.xy.DefaultXYZDataset" />
	<method signature="double getZValue(int,int)" class="org.jfree.data.xy.DefaultXYZDataset" />
	<method signature="int indexOf(java.lang.Comparable)" class="org.jfree.data.xy.DefaultXYZDataset" />
	<method signature="org.jfree.data.DomainOrder getDomainOrder()" class="org.jfree.data.xy.DefaultXYZDataset" />
	<method signature="void addSeries(java.lang.Comparable,double[][])" class="org.jfree.data.xy.DefaultXYZDataset" />
	<method signature="void removeSeries(java.lang.Comparable)" class="org.jfree.data.xy.DefaultXYZDataset" />
	<method signature="int getItemCount(int)" class="org.jfree.data.xy.DefaultXYZDataset" />
	<method signature="double getYValue(int,int)" class="org.jfree.data.xy.DefaultXYZDataset" />
	<class name="com.google.zxing.multi.qrcode.detector.MultiDetector" />
	<method signature="com.google.zxing.common.DetectorResult[] detectMulti(java.util.Map)" class="com.google.zxing.multi.qrcode.detector.MultiDetector" />
	<method signature="void &lt;init&gt;(com.google.zxing.common.BitMatrix)" class="com.google.zxing.multi.qrcode.detector.MultiDetector" />
	<class name="org.jfree.chart.block.Arrangement" />
	<method signature="void add(org.jfree.chart.block.Block,java.lang.Object)" class="org.jfree.chart.block.Arrangement" />
	<method signature="void clear()" class="org.jfree.chart.block.Arrangement" />
	<method signature="org.jfree.ui.Size2D arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" class="org.jfree.chart.block.Arrangement" />
	<class name="freemarker.ext.jython.JythonHashModel" />
	<method signature="int size()" class="freemarker.ext.jython.JythonHashModel" />
	<method signature="void &lt;init&gt;(org.python.core.PyObject,freemarker.ext.jython.JythonWrapper)" class="freemarker.ext.jython.JythonHashModel" />
	<method signature="freemarker.template.TemplateCollectionModel keys()" class="freemarker.ext.jython.JythonHashModel" />
	<method signature="freemarker.template.TemplateCollectionModel values()" class="freemarker.ext.jython.JythonHashModel" />
	<class name="org.apache.xerces.xni.parser.XMLDocumentScanner" />
	<method signature="boolean scanDocument(boolean)" class="org.apache.xerces.xni.parser.XMLDocumentScanner" />
	<method signature="void setInputSource(org.apache.xerces.xni.parser.XMLInputSource)" class="org.apache.xerces.xni.parser.XMLDocumentScanner" />
	<class name="org.netbeans.lib.awtextra.AbsoluteConstraints" />
	<method signature="void &lt;init&gt;(java.awt.Point,java.awt.Dimension)" class="org.netbeans.lib.awtextra.AbsoluteConstraints" />
	<method signature="int getX()" class="org.netbeans.lib.awtextra.AbsoluteConstraints" />
	<method signature="int getHeight()" class="org.netbeans.lib.awtextra.AbsoluteConstraints" />
	<method signature="int getY()" class="org.netbeans.lib.awtextra.AbsoluteConstraints" />
	<method signature="java.lang.String toString()" class="org.netbeans.lib.awtextra.AbsoluteConstraints" />
	<method signature="void &lt;init&gt;(java.awt.Point)" class="org.netbeans.lib.awtextra.AbsoluteConstraints" />
	<method signature="void &lt;init&gt;(int,int)" class="org.netbeans.lib.awtextra.AbsoluteConstraints" />
	<method signature="void &lt;init&gt;(int,int,int,int)" class="org.netbeans.lib.awtextra.AbsoluteConstraints" />
	<method signature="int getWidth()" class="org.netbeans.lib.awtextra.AbsoluteConstraints" />
	<class name="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="void normalizeDocument()" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="void abort()" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="java.lang.String getDocumentURI()" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="void &lt;init&gt;(org.w3c.dom.DocumentType,boolean)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="java.lang.String getEncoding()" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="boolean isXMLName(java.lang.String,boolean)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="org.w3c.dom.Element createElementNS(java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="org.w3c.dom.Node removeChild(org.w3c.dom.Node)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="java.lang.String getTextContent()" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="boolean getStandalone()" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="boolean loadXML(java.lang.String)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="org.w3c.dom.Attr createAttributeNS(java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="org.w3c.dom.ProcessingInstruction createProcessingInstruction(java.lang.String,java.lang.String)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="boolean isValidQName(java.lang.String,java.lang.String,boolean)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String,java.lang.String)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="void setXmlEncoding(java.lang.String)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="org.w3c.dom.CDATASection createCDATASection(java.lang.String)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="org.w3c.dom.DocumentFragment createDocumentFragment()" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="boolean getErrorChecking()" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="org.w3c.dom.Node replaceChild(org.w3c.dom.Node,org.w3c.dom.Node)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="org.w3c.dom.Comment createComment(java.lang.String)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="org.w3c.dom.DocumentType getDoctype()" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="java.util.Enumeration getIdentifiers()" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="org.w3c.dom.Node cloneNode(boolean)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="org.w3c.dom.EntityReference createEntityReference(java.lang.String)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="java.lang.String getXmlVersion()" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="boolean getAsync()" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="java.lang.Object clone()" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="java.lang.String getXmlEncoding()" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="java.lang.String getBaseURI()" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="java.lang.String getVersion()" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="void setStandalone(boolean)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="java.lang.String saveXML(org.w3c.dom.Node)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="org.w3c.dom.Element getIdentifier(java.lang.String)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="java.lang.String getInputEncoding()" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="org.w3c.dom.Element getElementById(java.lang.String)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="void setXmlStandalone(boolean)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="void setXmlVersion(java.lang.String)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="void setAsync(boolean)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="org.w3c.dom.DocumentType createDocumentType(java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="void setDocumentURI(java.lang.String)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="java.lang.Object getFeature(java.lang.String,java.lang.String)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="org.w3c.dom.DOMConfiguration getDomConfig()" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="org.w3c.dom.Node importNode(org.w3c.dom.Node,boolean)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="void putIdentifier(java.lang.String,org.w3c.dom.Element)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="java.lang.Object getUserData(org.w3c.dom.Node,java.lang.String)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="boolean getStrictErrorChecking()" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="org.w3c.dom.Element createElementNS(java.lang.String,java.lang.String)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="org.w3c.dom.Node insertBefore(org.w3c.dom.Node,org.w3c.dom.Node)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="boolean getXmlStandalone()" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="void setErrorChecking(boolean)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="org.w3c.dom.Element createElement(java.lang.String)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="short getNodeType()" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="org.w3c.dom.Text createTextNode(java.lang.String)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="org.w3c.dom.Entity createEntity(java.lang.String)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="org.w3c.dom.Element getDocumentElement()" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="void &lt;init&gt;(org.w3c.dom.DocumentType)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="void setInputEncoding(java.lang.String)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="org.w3c.dom.Node adoptNode(org.w3c.dom.Node)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="org.w3c.dom.Attr createAttributeNS(java.lang.String,java.lang.String)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="void setVersion(java.lang.String)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="org.w3c.dom.Attr createAttribute(java.lang.String)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="boolean load(java.lang.String)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="void setTextContent(java.lang.String)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="org.w3c.dom.Node renameNode(org.w3c.dom.Node,java.lang.String,java.lang.String)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="java.lang.Object setUserData(org.w3c.dom.Node,java.lang.String,java.lang.Object,org.w3c.dom.UserDataHandler)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="org.w3c.dom.Notation createNotation(java.lang.String)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="void setEncoding(java.lang.String)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="org.w3c.dom.DOMImplementation getImplementation()" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="org.apache.xerces.dom.ElementDefinitionImpl createElementDefinition(java.lang.String)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="void &lt;init&gt;(boolean)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="void removeIdentifier(java.lang.String)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="java.lang.String getNodeName()" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="org.w3c.dom.NodeList getElementsByTagName(java.lang.String)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="void setStrictErrorChecking(boolean)" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<method signature="org.w3c.dom.Document getOwnerDocument()" class="org.apache.xerces.dom.CoreDocumentImpl" />
	<class name="com.hexidec.ekit.action.SetFontFamilyAction" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="com.hexidec.ekit.action.SetFontFamilyAction" />
	<method signature="void &lt;init&gt;(com.hexidec.ekit.EkitCore,java.lang.String)" class="com.hexidec.ekit.action.SetFontFamilyAction" />
	<class name="org.jfree.data.xy.XYZDataset" />
	<method signature="java.lang.Number getZ(int,int)" class="org.jfree.data.xy.XYZDataset" />
	<method signature="double getZValue(int,int)" class="org.jfree.data.xy.XYZDataset" />
	<class name="org.w3c.dom.xpath.XPathEvaluator" />
	<method signature="org.w3c.dom.xpath.XPathExpression createExpression(java.lang.String,org.w3c.dom.xpath.XPathNSResolver)" class="org.w3c.dom.xpath.XPathEvaluator" />
	<method signature="java.lang.Object evaluate(java.lang.String,org.w3c.dom.Node,org.w3c.dom.xpath.XPathNSResolver,short,java.lang.Object)" class="org.w3c.dom.xpath.XPathEvaluator" />
	<method signature="org.w3c.dom.xpath.XPathNSResolver createNSResolver(org.w3c.dom.Node)" class="org.w3c.dom.xpath.XPathEvaluator" />
	<class name="net.jcip.annotations.GuardedBy" />
	<method signature="java.lang.String value()" class="net.jcip.annotations.GuardedBy" />
	<class name="com.google.zxing.ResultMetadataType" />
	<method signature="com.google.zxing.ResultMetadataType valueOf(java.lang.String)" class="com.google.zxing.ResultMetadataType" />
	<method signature="com.google.zxing.ResultMetadataType[] values()" class="com.google.zxing.ResultMetadataType" />
	<class name="org.apache.commons.lang3.concurrent.CallableBackgroundInitializer" />
	<method signature="void &lt;init&gt;(java.util.concurrent.Callable)" class="org.apache.commons.lang3.concurrent.CallableBackgroundInitializer" />
	<method signature="void &lt;init&gt;(java.util.concurrent.Callable,java.util.concurrent.ExecutorService)" class="org.apache.commons.lang3.concurrent.CallableBackgroundInitializer" />
	<class name="org.jfree.data.time.TimePeriodAnchor" />
	<method signature="int hashCode()" class="org.jfree.data.time.TimePeriodAnchor" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.time.TimePeriodAnchor" />
	<method signature="java.lang.String toString()" class="org.jfree.data.time.TimePeriodAnchor" />
	<class name="org.w3c.dom.html.HTMLBaseElement" />
	<method signature="void setHref(java.lang.String)" class="org.w3c.dom.html.HTMLBaseElement" />
	<method signature="java.lang.String getTarget()" class="org.w3c.dom.html.HTMLBaseElement" />
	<method signature="java.lang.String getHref()" class="org.w3c.dom.html.HTMLBaseElement" />
	<method signature="void setTarget(java.lang.String)" class="org.w3c.dom.html.HTMLBaseElement" />
	<class name="freemarker.core.StopException" />
	<method signature="void printStackTrace(java.io.PrintWriter)" class="freemarker.core.StopException" />
	<method signature="void printStackTrace(java.io.PrintStream)" class="freemarker.core.StopException" />
	<class name="org.jfree.chart.plot.CombinedRangeCategoryPlot" />
	<method signature="java.util.List getSubplots()" class="org.jfree.chart.plot.CombinedRangeCategoryPlot" />
	<method signature="void add(org.jfree.chart.plot.CategoryPlot)" class="org.jfree.chart.plot.CombinedRangeCategoryPlot" />
	<method signature="void setGap(double)" class="org.jfree.chart.plot.CombinedRangeCategoryPlot" />
	<method signature="void remove(org.jfree.chart.plot.CategoryPlot)" class="org.jfree.chart.plot.CombinedRangeCategoryPlot" />
	<method signature="org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)" class="org.jfree.chart.plot.CombinedRangeCategoryPlot" />
	<method signature="void setOrientation(org.jfree.chart.plot.PlotOrientation)" class="org.jfree.chart.plot.CombinedRangeCategoryPlot" />
	<method signature="void handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.plot.CombinedRangeCategoryPlot" />
	<method signature="void &lt;init&gt;(org.jfree.chart.axis.ValueAxis)" class="org.jfree.chart.plot.CombinedRangeCategoryPlot" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.plot.CombinedRangeCategoryPlot" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.plot.CombinedRangeCategoryPlot" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.plot.CombinedRangeCategoryPlot" />
	<method signature="double getGap()" class="org.jfree.chart.plot.CombinedRangeCategoryPlot" />
	<method signature="void add(org.jfree.chart.plot.CategoryPlot,int)" class="org.jfree.chart.plot.CombinedRangeCategoryPlot" />
	<method signature="org.jfree.chart.LegendItemCollection getLegendItems()" class="org.jfree.chart.plot.CombinedRangeCategoryPlot" />
	<method signature="void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.plot.CombinedRangeCategoryPlot" />
	<method signature="void plotChanged(org.jfree.chart.event.PlotChangeEvent)" class="org.jfree.chart.plot.CombinedRangeCategoryPlot" />
	<class name="org.xml.sax.Attributes" />
	<method signature="java.lang.String getValue(int)" class="org.xml.sax.Attributes" />
	<method signature="java.lang.String getType(java.lang.String)" class="org.xml.sax.Attributes" />
	<method signature="java.lang.String getLocalName(int)" class="org.xml.sax.Attributes" />
	<method signature="java.lang.String getType(int)" class="org.xml.sax.Attributes" />
	<method signature="java.lang.String getValue(java.lang.String)" class="org.xml.sax.Attributes" />
	<method signature="int getIndex(java.lang.String,java.lang.String)" class="org.xml.sax.Attributes" />
	<method signature="java.lang.String getQName(int)" class="org.xml.sax.Attributes" />
	<method signature="int getLength()" class="org.xml.sax.Attributes" />
	<method signature="java.lang.String getURI(int)" class="org.xml.sax.Attributes" />
	<method signature="int getIndex(java.lang.String)" class="org.xml.sax.Attributes" />
	<method signature="java.lang.String getType(java.lang.String,java.lang.String)" class="org.xml.sax.Attributes" />
	<method signature="java.lang.String getValue(java.lang.String,java.lang.String)" class="org.xml.sax.Attributes" />
	<class name="com.hexidec.ekit.component.ImageURLDialog" />
	<method signature="java.lang.String getImageWidth()" class="com.hexidec.ekit.component.ImageURLDialog" />
	<method signature="java.lang.String getImageHeight()" class="com.hexidec.ekit.component.ImageURLDialog" />
	<method signature="java.lang.String getImageUrl()" class="com.hexidec.ekit.component.ImageURLDialog" />
	<method signature="void &lt;init&gt;(java.awt.Frame,java.lang.String,boolean)" class="com.hexidec.ekit.component.ImageURLDialog" />
	<method signature="java.lang.String getImageAlt()" class="com.hexidec.ekit.component.ImageURLDialog" />
	<method signature="java.lang.String getDecisionValue()" class="com.hexidec.ekit.component.ImageURLDialog" />
	<class name="fi.iki.elonen.NanoHTTPD$DefaultAsyncRunner" />
	<method signature="void closeAll()" class="fi.iki.elonen.NanoHTTPD$DefaultAsyncRunner" />
	<method signature="void &lt;init&gt;()" class="fi.iki.elonen.NanoHTTPD$DefaultAsyncRunner" />
	<method signature="void closed(fi.iki.elonen.NanoHTTPD$ClientHandler)" class="fi.iki.elonen.NanoHTTPD$DefaultAsyncRunner" />
	<method signature="java.util.List getRunning()" class="fi.iki.elonen.NanoHTTPD$DefaultAsyncRunner" />
	<method signature="void exec(fi.iki.elonen.NanoHTTPD$ClientHandler)" class="fi.iki.elonen.NanoHTTPD$DefaultAsyncRunner" />
	<class name="org.apache.xerces.util.NamespaceSupport$Prefixes" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.NamespaceSupport,java.lang.String[],int)" class="org.apache.xerces.util.NamespaceSupport$Prefixes" />
	<method signature="java.lang.Object nextElement()" class="org.apache.xerces.util.NamespaceSupport$Prefixes" />
	<method signature="java.lang.String toString()" class="org.apache.xerces.util.NamespaceSupport$Prefixes" />
	<method signature="boolean hasMoreElements()" class="org.apache.xerces.util.NamespaceSupport$Prefixes" />
	<class name="org.apache.html.dom.HTMLFormControl" />
	<class name="org.apache.xerces.impl.RevalidationHandler" />
	<method signature="boolean characterData(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.RevalidationHandler" />
	<class name="org.jdom2.transform.JDOMSource" />
	<method signature="org.xml.sax.XMLReader getXMLReader()" class="org.jdom2.transform.JDOMSource" />
	<method signature="void &lt;init&gt;(java.util.List)" class="org.jdom2.transform.JDOMSource" />
	<method signature="void &lt;init&gt;(org.jdom2.Document)" class="org.jdom2.transform.JDOMSource" />
	<method signature="org.jdom2.Document getDocument()" class="org.jdom2.transform.JDOMSource" />
	<method signature="void setNodes(java.util.List)" class="org.jdom2.transform.JDOMSource" />
	<method signature="void setXMLReader(org.xml.sax.XMLReader)" class="org.jdom2.transform.JDOMSource" />
	<method signature="void setDocument(org.jdom2.Document)" class="org.jdom2.transform.JDOMSource" />
	<method signature="void &lt;init&gt;(org.jdom2.Document,org.xml.sax.EntityResolver)" class="org.jdom2.transform.JDOMSource" />
	<method signature="void &lt;init&gt;(org.jdom2.Element)" class="org.jdom2.transform.JDOMSource" />
	<method signature="java.util.List getNodes()" class="org.jdom2.transform.JDOMSource" />
	<method signature="void setInputSource(org.xml.sax.InputSource)" class="org.jdom2.transform.JDOMSource" />
	<class name="org.jfree.chart.renderer.xy.VectorRenderer" />
	<method signature="org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)" class="org.jfree.chart.renderer.xy.VectorRenderer" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.renderer.xy.VectorRenderer" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)" class="org.jfree.chart.renderer.xy.VectorRenderer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.xy.VectorRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.xy.VectorRenderer" />
	<method signature="org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset)" class="org.jfree.chart.renderer.xy.VectorRenderer" />
	<class name="org.jfree.chart.renderer.category.CategoryStepRenderer" />
	<method signature="org.jfree.chart.LegendItem getLegendItem(int,int)" class="org.jfree.chart.renderer.category.CategoryStepRenderer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.category.CategoryStepRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.category.CategoryStepRenderer" />
	<method signature="boolean getStagger()" class="org.jfree.chart.renderer.category.CategoryStepRenderer" />
	<method signature="void setStagger(boolean)" class="org.jfree.chart.renderer.category.CategoryStepRenderer" />
	<method signature="void &lt;init&gt;(boolean)" class="org.jfree.chart.renderer.category.CategoryStepRenderer" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)" class="org.jfree.chart.renderer.category.CategoryStepRenderer" />
	<class name="org.jfree.text.TextMeasurer" />
	<method signature="float getStringWidth(java.lang.String,int,int)" class="org.jfree.text.TextMeasurer" />
	<class name="com.google.zxing.qrcode.QRCodeWriter" />
	<method signature="com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int)" class="com.google.zxing.qrcode.QRCodeWriter" />
	<method signature="com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map)" class="com.google.zxing.qrcode.QRCodeWriter" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.qrcode.QRCodeWriter" />
	<class name="org.apache.commons.lang3.BooleanUtils" />
	<method signature="java.lang.Boolean negate(java.lang.Boolean)" class="org.apache.commons.lang3.BooleanUtils" />
	<method signature="java.lang.Boolean toBooleanObject(java.lang.String)" class="org.apache.commons.lang3.BooleanUtils" />
	<method signature="boolean or(boolean[])" class="org.apache.commons.lang3.BooleanUtils" />
	<method signature="java.lang.Integer toIntegerObject(java.lang.Boolean)" class="org.apache.commons.lang3.BooleanUtils" />
	<method signature="java.lang.String toString(java.lang.Boolean,java.lang.String,java.lang.String,java.lang.String)" class="org.apache.commons.lang3.BooleanUtils" />
	<method signature="boolean isFalse(java.lang.Boolean)" class="org.apache.commons.lang3.BooleanUtils" />
	<method signature="boolean toBoolean(int)" class="org.apache.commons.lang3.BooleanUtils" />
	<method signature="int toInteger(java.lang.Boolean,int,int,int)" class="org.apache.commons.lang3.BooleanUtils" />
	<method signature="java.lang.Boolean toBooleanObject(java.lang.Integer)" class="org.apache.commons.lang3.BooleanUtils" />
	<method signature="java.lang.String toStringOnOff(boolean)" class="org.apache.commons.lang3.BooleanUtils" />
	<method signature="java.lang.Boolean toBooleanObject(int,int,int,int)" class="org.apache.commons.lang3.BooleanUtils" />
	<method signature="boolean isNotTrue(java.lang.Boolean)" class="org.apache.commons.lang3.BooleanUtils" />
	<method signature="boolean toBoolean(java.lang.Integer,java.lang.Integer,java.lang.Integer)" class="org.apache.commons.lang3.BooleanUtils" />
	<method signature="boolean toBoolean(java.lang.String,java.lang.String,java.lang.String)" class="org.apache.commons.lang3.BooleanUtils" />
	<method signature="java.lang.String toStringTrueFalse(java.lang.Boolean)" class="org.apache.commons.lang3.BooleanUtils" />
	<method signature="java.lang.Integer toIntegerObject(boolean,java.lang.Integer,java.lang.Integer)" class="org.apache.commons.lang3.BooleanUtils" />
	<method signature="java.lang.Boolean xor(java.lang.Boolean[])" class="org.apache.commons.lang3.BooleanUtils" />
	<method signature="java.lang.Boolean toBooleanObject(int)" class="org.apache.commons.lang3.BooleanUtils" />
	<method signature="java.lang.Integer toIntegerObject(boolean)" class="org.apache.commons.lang3.BooleanUtils" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.BooleanUtils" />
	<method signature="java.lang.Boolean and(java.lang.Boolean[])" class="org.apache.commons.lang3.BooleanUtils" />
	<method signature="java.lang.String toStringYesNo(java.lang.Boolean)" class="org.apache.commons.lang3.BooleanUtils" />
	<method signature="boolean isTrue(java.lang.Boolean)" class="org.apache.commons.lang3.BooleanUtils" />
	<method signature="int toInteger(boolean)" class="org.apache.commons.lang3.BooleanUtils" />
	<method signature="boolean toBoolean(int,int,int)" class="org.apache.commons.lang3.BooleanUtils" />
	<method signature="java.lang.Boolean or(java.lang.Boolean[])" class="org.apache.commons.lang3.BooleanUtils" />
	<method signature="java.lang.Integer toIntegerObject(java.lang.Boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer)" class="org.apache.commons.lang3.BooleanUtils" />
	<method signature="java.lang.String toStringOnOff(java.lang.Boolean)" class="org.apache.commons.lang3.BooleanUtils" />
	<method signature="boolean isNotFalse(java.lang.Boolean)" class="org.apache.commons.lang3.BooleanUtils" />
	<method signature="boolean toBooleanDefaultIfNull(java.lang.Boolean,boolean)" class="org.apache.commons.lang3.BooleanUtils" />
	<method signature="int toInteger(boolean,int,int)" class="org.apache.commons.lang3.BooleanUtils" />
	<method signature="boolean and(boolean[])" class="org.apache.commons.lang3.BooleanUtils" />
	<method signature="java.lang.String toStringTrueFalse(boolean)" class="org.apache.commons.lang3.BooleanUtils" />
	<method signature="java.lang.Boolean toBooleanObject(java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)" class="org.apache.commons.lang3.BooleanUtils" />
	<method signature="int compare(boolean,boolean)" class="org.apache.commons.lang3.BooleanUtils" />
	<method signature="boolean xor(boolean[])" class="org.apache.commons.lang3.BooleanUtils" />
	<method signature="boolean toBoolean(java.lang.Boolean)" class="org.apache.commons.lang3.BooleanUtils" />
	<method signature="java.lang.String toStringYesNo(boolean)" class="org.apache.commons.lang3.BooleanUtils" />
	<method signature="java.lang.Boolean toBooleanObject(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.apache.commons.lang3.BooleanUtils" />
	<method signature="boolean toBoolean(java.lang.String)" class="org.apache.commons.lang3.BooleanUtils" />
	<method signature="java.lang.String toString(boolean,java.lang.String,java.lang.String)" class="org.apache.commons.lang3.BooleanUtils" />
	<class name="org.apache.commons.lang3.text.translate.JavaUnicodeEscaper" />
	<method signature="org.apache.commons.lang3.text.translate.JavaUnicodeEscaper below(int)" class="org.apache.commons.lang3.text.translate.JavaUnicodeEscaper" />
	<method signature="org.apache.commons.lang3.text.translate.JavaUnicodeEscaper outsideOf(int,int)" class="org.apache.commons.lang3.text.translate.JavaUnicodeEscaper" />
	<method signature="void &lt;init&gt;(int,int,boolean)" class="org.apache.commons.lang3.text.translate.JavaUnicodeEscaper" />
	<method signature="org.apache.commons.lang3.text.translate.JavaUnicodeEscaper between(int,int)" class="org.apache.commons.lang3.text.translate.JavaUnicodeEscaper" />
	<method signature="org.apache.commons.lang3.text.translate.JavaUnicodeEscaper above(int)" class="org.apache.commons.lang3.text.translate.JavaUnicodeEscaper" />
	<class name="freemarker.template.TemplateException" />
	<method signature="void &lt;init&gt;(freemarker.core.Environment)" class="freemarker.template.TemplateException" />
	<method signature="void printStackTrace(java.io.PrintWriter)" class="freemarker.template.TemplateException" />
	<method signature="void printStackTrace(java.io.PrintStream)" class="freemarker.template.TemplateException" />
	<method signature="void &lt;init&gt;(java.lang.String,freemarker.core.Environment)" class="freemarker.template.TemplateException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Exception,freemarker.core.Environment)" class="freemarker.template.TemplateException" />
	<method signature="java.lang.Exception getCauseException()" class="freemarker.template.TemplateException" />
	<method signature="java.lang.String getFTLInstructionStack()" class="freemarker.template.TemplateException" />
	<method signature="freemarker.core.Environment getEnvironment()" class="freemarker.template.TemplateException" />
	<method signature="java.lang.Throwable getCause()" class="freemarker.template.TemplateException" />
	<method signature="void &lt;init&gt;(java.lang.Exception,freemarker.core.Environment)" class="freemarker.template.TemplateException" />
	<class name="org.w3c.dom.html.HTMLFormElement" />
	<method signature="java.lang.String getName()" class="org.w3c.dom.html.HTMLFormElement" />
	<method signature="void reset()" class="org.w3c.dom.html.HTMLFormElement" />
	<method signature="void setMethod(java.lang.String)" class="org.w3c.dom.html.HTMLFormElement" />
	<method signature="java.lang.String getAction()" class="org.w3c.dom.html.HTMLFormElement" />
	<method signature="java.lang.String getMethod()" class="org.w3c.dom.html.HTMLFormElement" />
	<method signature="void setAcceptCharset(java.lang.String)" class="org.w3c.dom.html.HTMLFormElement" />
	<method signature="int getLength()" class="org.w3c.dom.html.HTMLFormElement" />
	<method signature="java.lang.String getAcceptCharset()" class="org.w3c.dom.html.HTMLFormElement" />
	<method signature="void setTarget(java.lang.String)" class="org.w3c.dom.html.HTMLFormElement" />
	<method signature="java.lang.String getTarget()" class="org.w3c.dom.html.HTMLFormElement" />
	<method signature="void setAction(java.lang.String)" class="org.w3c.dom.html.HTMLFormElement" />
	<method signature="void setName(java.lang.String)" class="org.w3c.dom.html.HTMLFormElement" />
	<method signature="void setEnctype(java.lang.String)" class="org.w3c.dom.html.HTMLFormElement" />
	<method signature="org.w3c.dom.html.HTMLCollection getElements()" class="org.w3c.dom.html.HTMLFormElement" />
	<method signature="java.lang.String getEnctype()" class="org.w3c.dom.html.HTMLFormElement" />
	<method signature="void submit()" class="org.w3c.dom.html.HTMLFormElement" />
	<class name="org.jfree.chart.event.MarkerChangeEvent" />
	<method signature="org.jfree.chart.plot.Marker getMarker()" class="org.jfree.chart.event.MarkerChangeEvent" />
	<method signature="void &lt;init&gt;(org.jfree.chart.plot.Marker)" class="org.jfree.chart.event.MarkerChangeEvent" />
	<class name="org.jfree.chart.plot.MultiplePiePlot" />
	<method signature="java.lang.String getPlotType()" class="org.jfree.chart.plot.MultiplePiePlot" />
	<method signature="org.jfree.chart.JFreeChart getPieChart()" class="org.jfree.chart.plot.MultiplePiePlot" />
	<method signature="void setDataExtractOrder(org.jfree.util.TableOrder)" class="org.jfree.chart.plot.MultiplePiePlot" />
	<method signature="void setDataset(org.jfree.data.category.CategoryDataset)" class="org.jfree.chart.plot.MultiplePiePlot" />
	<method signature="void setLimit(double)" class="org.jfree.chart.plot.MultiplePiePlot" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.plot.MultiplePiePlot" />
	<method signature="void setAggregatedItemsPaint(java.awt.Paint)" class="org.jfree.chart.plot.MultiplePiePlot" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.plot.MultiplePiePlot" />
	<method signature="void &lt;init&gt;(org.jfree.data.category.CategoryDataset)" class="org.jfree.chart.plot.MultiplePiePlot" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.plot.MultiplePiePlot" />
	<method signature="void setPieChart(org.jfree.chart.JFreeChart)" class="org.jfree.chart.plot.MultiplePiePlot" />
	<method signature="java.awt.Shape getLegendItemShape()" class="org.jfree.chart.plot.MultiplePiePlot" />
	<method signature="void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.plot.MultiplePiePlot" />
	<method signature="java.awt.Paint getAggregatedItemsPaint()" class="org.jfree.chart.plot.MultiplePiePlot" />
	<method signature="java.lang.Comparable getAggregatedItemsKey()" class="org.jfree.chart.plot.MultiplePiePlot" />
	<method signature="org.jfree.util.TableOrder getDataExtractOrder()" class="org.jfree.chart.plot.MultiplePiePlot" />
	<method signature="void setAggregatedItemsKey(java.lang.Comparable)" class="org.jfree.chart.plot.MultiplePiePlot" />
	<method signature="double getLimit()" class="org.jfree.chart.plot.MultiplePiePlot" />
	<method signature="org.jfree.chart.LegendItemCollection getLegendItems()" class="org.jfree.chart.plot.MultiplePiePlot" />
	<method signature="org.jfree.data.category.CategoryDataset getDataset()" class="org.jfree.chart.plot.MultiplePiePlot" />
	<method signature="void setLegendItemShape(java.awt.Shape)" class="org.jfree.chart.plot.MultiplePiePlot" />
	<class name="org.apache.xerces.dom.DOMNormalizer" />
	<method signature="void processingInstruction(java.lang.String,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.dom.DOMNormalizer" />
	<method signature="void endElement(org.apache.xerces.xni.QName,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.dom.DOMNormalizer" />
	<method signature="void isAttrValueWF(org.w3c.dom.DOMErrorHandler,org.apache.xerces.dom.DOMErrorImpl,org.apache.xerces.dom.DOMLocatorImpl,org.w3c.dom.NamedNodeMap,org.w3c.dom.Attr,java.lang.String,boolean)" class="org.apache.xerces.dom.DOMNormalizer" />
	<method signature="void setDocumentSource(org.apache.xerces.xni.parser.XMLDocumentSource)" class="org.apache.xerces.dom.DOMNormalizer" />
	<method signature="void doctypeDecl(java.lang.String,java.lang.String,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.dom.DOMNormalizer" />
	<method signature="void isXMLCharWF(org.w3c.dom.DOMErrorHandler,org.apache.xerces.dom.DOMErrorImpl,org.apache.xerces.dom.DOMLocatorImpl,java.lang.String,boolean)" class="org.apache.xerces.dom.DOMNormalizer" />
	<method signature="void startCDATA(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.dom.DOMNormalizer" />
	<method signature="void ignorableWhitespace(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.dom.DOMNormalizer" />
	<method signature="void reportDOMError(org.w3c.dom.DOMErrorHandler,org.apache.xerces.dom.DOMErrorImpl,org.apache.xerces.dom.DOMLocatorImpl,java.lang.String,short,java.lang.String)" class="org.apache.xerces.dom.DOMNormalizer" />
	<method signature="void endCDATA(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.dom.DOMNormalizer" />
	<method signature="void textDecl(java.lang.String,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.dom.DOMNormalizer" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.dom.DOMNormalizer" />
	<method signature="org.apache.xerces.xni.parser.XMLDocumentSource getDocumentSource()" class="org.apache.xerces.dom.DOMNormalizer" />
	<method signature="void emptyElement(org.apache.xerces.xni.QName,org.apache.xerces.xni.XMLAttributes,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.dom.DOMNormalizer" />
	<method signature="void characters(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.dom.DOMNormalizer" />
	<method signature="void isCDataWF(org.w3c.dom.DOMErrorHandler,org.apache.xerces.dom.DOMErrorImpl,org.apache.xerces.dom.DOMLocatorImpl,java.lang.String,boolean)" class="org.apache.xerces.dom.DOMNormalizer" />
	<method signature="void xmlDecl(java.lang.String,java.lang.String,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.dom.DOMNormalizer" />
	<method signature="void endDocument(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.dom.DOMNormalizer" />
	<method signature="void startElement(org.apache.xerces.xni.QName,org.apache.xerces.xni.XMLAttributes,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.dom.DOMNormalizer" />
	<method signature="void startDocument(org.apache.xerces.xni.XMLLocator,java.lang.String,org.apache.xerces.xni.NamespaceContext,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.dom.DOMNormalizer" />
	<method signature="void comment(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.dom.DOMNormalizer" />
	<method signature="void startGeneralEntity(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.dom.DOMNormalizer" />
	<method signature="void isCommentWF(org.w3c.dom.DOMErrorHandler,org.apache.xerces.dom.DOMErrorImpl,org.apache.xerces.dom.DOMLocatorImpl,java.lang.String,boolean)" class="org.apache.xerces.dom.DOMNormalizer" />
	<method signature="void endGeneralEntity(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.dom.DOMNormalizer" />
	<class name="org.unbescape.xml.XmlEscapeType" />
	<method signature="org.unbescape.xml.XmlEscapeType valueOf(java.lang.String)" class="org.unbescape.xml.XmlEscapeType" />
	<method signature="org.unbescape.xml.XmlEscapeType[] values()" class="org.unbescape.xml.XmlEscapeType" />
	<class name="org.apache.xerces.impl.XMLDocumentScannerImpl$DTDDispatcher" />
	<method signature="boolean dispatch(boolean)" class="org.apache.xerces.impl.XMLDocumentScannerImpl$DTDDispatcher" />
	<class name="freemarker.core.TextBlock" />
	<method signature="void accept(freemarker.core.Environment)" class="freemarker.core.TextBlock" />
	<method signature="void &lt;init&gt;(java.lang.String,boolean)" class="freemarker.core.TextBlock" />
	<method signature="java.lang.String getDescription()" class="freemarker.core.TextBlock" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="freemarker.core.TextBlock" />
	<method signature="java.lang.String getCanonicalForm()" class="freemarker.core.TextBlock" />
	<class name="org.jfree.chart.plot.dial.DialTextAnnotation" />
	<method signature="java.lang.String getLabel()" class="org.jfree.chart.plot.dial.DialTextAnnotation" />
	<method signature="int hashCode()" class="org.jfree.chart.plot.dial.DialTextAnnotation" />
	<method signature="double getAngle()" class="org.jfree.chart.plot.dial.DialTextAnnotation" />
	<method signature="java.awt.Paint getPaint()" class="org.jfree.chart.plot.dial.DialTextAnnotation" />
	<method signature="java.awt.Font getFont()" class="org.jfree.chart.plot.dial.DialTextAnnotation" />
	<method signature="org.jfree.ui.TextAnchor getAnchor()" class="org.jfree.chart.plot.dial.DialTextAnnotation" />
	<method signature="boolean isClippedToWindow()" class="org.jfree.chart.plot.dial.DialTextAnnotation" />
	<method signature="void setLabel(java.lang.String)" class="org.jfree.chart.plot.dial.DialTextAnnotation" />
	<method signature="void setPaint(java.awt.Paint)" class="org.jfree.chart.plot.dial.DialTextAnnotation" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.plot.dial.DialTextAnnotation" />
	<method signature="void setRadius(double)" class="org.jfree.chart.plot.dial.DialTextAnnotation" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.plot.dial.DialTextAnnotation" />
	<method signature="void setAnchor(org.jfree.ui.TextAnchor)" class="org.jfree.chart.plot.dial.DialTextAnnotation" />
	<method signature="void setFont(java.awt.Font)" class="org.jfree.chart.plot.dial.DialTextAnnotation" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.chart.plot.dial.DialTextAnnotation" />
	<method signature="void setAngle(double)" class="org.jfree.chart.plot.dial.DialTextAnnotation" />
	<method signature="double getRadius()" class="org.jfree.chart.plot.dial.DialTextAnnotation" />
	<method signature="void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)" class="org.jfree.chart.plot.dial.DialTextAnnotation" />
	<class name="org.apache.xerces.impl.dtd.XMLDTDDescription" />
	<method signature="void &lt;init&gt;(org.apache.xerces.xni.parser.XMLInputSource)" class="org.apache.xerces.impl.dtd.XMLDTDDescription" />
	<method signature="void setPossibleRoots(java.util.ArrayList)" class="org.apache.xerces.impl.dtd.XMLDTDDescription" />
	<method signature="java.lang.String getGrammarType()" class="org.apache.xerces.impl.dtd.XMLDTDDescription" />
	<method signature="int hashCode()" class="org.apache.xerces.impl.dtd.XMLDTDDescription" />
	<method signature="java.lang.String getRootName()" class="org.apache.xerces.impl.dtd.XMLDTDDescription" />
	<method signature="void setRootName(java.lang.String)" class="org.apache.xerces.impl.dtd.XMLDTDDescription" />
	<method signature="boolean equals(java.lang.Object)" class="org.apache.xerces.impl.dtd.XMLDTDDescription" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.impl.dtd.XMLDTDDescription" />
	<method signature="void setPossibleRoots(java.util.Vector)" class="org.apache.xerces.impl.dtd.XMLDTDDescription" />
	<method signature="void &lt;init&gt;(org.apache.xerces.xni.XMLResourceIdentifier,java.lang.String)" class="org.apache.xerces.impl.dtd.XMLDTDDescription" />
	<class name="org.jfree.chart.HashUtilities" />
	<method signature="int hashCodeForPaint(java.awt.Paint)" class="org.jfree.chart.HashUtilities" />
	<method signature="int hashCode(int,org.jfree.util.StrokeList)" class="org.jfree.chart.HashUtilities" />
	<method signature="int hashCode(int,java.awt.Stroke)" class="org.jfree.chart.HashUtilities" />
	<method signature="int hashCode(int,org.jfree.util.PaintList)" class="org.jfree.chart.HashUtilities" />
	<method signature="int hashCode(int,java.lang.Comparable)" class="org.jfree.chart.HashUtilities" />
	<method signature="int hashCode(int,org.jfree.util.BooleanList)" class="org.jfree.chart.HashUtilities" />
	<method signature="int hashCode(int,boolean)" class="org.jfree.chart.HashUtilities" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.HashUtilities" />
	<method signature="int hashCodeForDoubleArray(double[])" class="org.jfree.chart.HashUtilities" />
	<method signature="int hashCode(int,int)" class="org.jfree.chart.HashUtilities" />
	<method signature="int hashCode(int,java.lang.String)" class="org.jfree.chart.HashUtilities" />
	<method signature="int hashCode(int,java.awt.Paint)" class="org.jfree.chart.HashUtilities" />
	<method signature="int hashCode(int,double)" class="org.jfree.chart.HashUtilities" />
	<method signature="int hashCode(int,java.lang.Object)" class="org.jfree.chart.HashUtilities" />
	<class name="org.jfree.chart.renderer.xy.XYBlockRenderer" />
	<method signature="org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)" class="org.jfree.chart.renderer.xy.XYBlockRenderer" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)" class="org.jfree.chart.renderer.xy.XYBlockRenderer" />
	<method signature="double getBlockWidth()" class="org.jfree.chart.renderer.xy.XYBlockRenderer" />
	<method signature="org.jfree.ui.RectangleAnchor getBlockAnchor()" class="org.jfree.chart.renderer.xy.XYBlockRenderer" />
	<method signature="void setPaintScale(org.jfree.chart.renderer.PaintScale)" class="org.jfree.chart.renderer.xy.XYBlockRenderer" />
	<method signature="void setBlockAnchor(org.jfree.ui.RectangleAnchor)" class="org.jfree.chart.renderer.xy.XYBlockRenderer" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.renderer.xy.XYBlockRenderer" />
	<method signature="void setBlockHeight(double)" class="org.jfree.chart.renderer.xy.XYBlockRenderer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.xy.XYBlockRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.xy.XYBlockRenderer" />
	<method signature="void setBlockWidth(double)" class="org.jfree.chart.renderer.xy.XYBlockRenderer" />
	<method signature="double getBlockHeight()" class="org.jfree.chart.renderer.xy.XYBlockRenderer" />
	<method signature="org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset)" class="org.jfree.chart.renderer.xy.XYBlockRenderer" />
	<method signature="org.jfree.chart.renderer.PaintScale getPaintScale()" class="org.jfree.chart.renderer.xy.XYBlockRenderer" />
	<class name="org.apache.xerces.dom3.as.ASObjectList" />
	<method signature="org.apache.xerces.dom3.as.ASObject item(int)" class="org.apache.xerces.dom3.as.ASObjectList" />
	<method signature="int getLength()" class="org.apache.xerces.dom3.as.ASObjectList" />
	<class name="org.apache.xerces.stax.events.AttributeImpl" />
	<method signature="boolean isSpecified()" class="org.apache.xerces.stax.events.AttributeImpl" />
	<method signature="java.lang.String getValue()" class="org.apache.xerces.stax.events.AttributeImpl" />
	<method signature="java.lang.String getDTDType()" class="org.apache.xerces.stax.events.AttributeImpl" />
	<method signature="void &lt;init&gt;(javax.xml.namespace.QName,java.lang.String,java.lang.String,boolean,javax.xml.stream.Location)" class="org.apache.xerces.stax.events.AttributeImpl" />
	<method signature="void writeAsEncodedUnicode(java.io.Writer)" class="org.apache.xerces.stax.events.AttributeImpl" />
	<method signature="javax.xml.namespace.QName getName()" class="org.apache.xerces.stax.events.AttributeImpl" />
	<class name="org.apache.xerces.impl.xs.opti.DefaultText" />
	<method signature="java.lang.String getWholeText()" class="org.apache.xerces.impl.xs.opti.DefaultText" />
	<method signature="void appendData(java.lang.String)" class="org.apache.xerces.impl.xs.opti.DefaultText" />
	<method signature="void insertData(int,java.lang.String)" class="org.apache.xerces.impl.xs.opti.DefaultText" />
	<method signature="boolean isElementContentWhitespace()" class="org.apache.xerces.impl.xs.opti.DefaultText" />
	<method signature="int getLength()" class="org.apache.xerces.impl.xs.opti.DefaultText" />
	<method signature="org.w3c.dom.Text replaceWholeText(java.lang.String)" class="org.apache.xerces.impl.xs.opti.DefaultText" />
	<method signature="void setData(java.lang.String)" class="org.apache.xerces.impl.xs.opti.DefaultText" />
	<method signature="void deleteData(int,int)" class="org.apache.xerces.impl.xs.opti.DefaultText" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xs.opti.DefaultText" />
	<method signature="java.lang.String substringData(int,int)" class="org.apache.xerces.impl.xs.opti.DefaultText" />
	<method signature="org.w3c.dom.Text splitText(int)" class="org.apache.xerces.impl.xs.opti.DefaultText" />
	<method signature="void replaceData(int,int,java.lang.String)" class="org.apache.xerces.impl.xs.opti.DefaultText" />
	<method signature="java.lang.String getData()" class="org.apache.xerces.impl.xs.opti.DefaultText" />
	<class name="javax.xml.datatype.DatatypeConstants$Field" />
	<method signature="java.lang.String toString()" class="javax.xml.datatype.DatatypeConstants$Field" />
	<method signature="int getId()" class="javax.xml.datatype.DatatypeConstants$Field" />
	<class name="org.jdom2.util.NamespaceStack" />
	<method signature="org.jdom2.Namespace[] getScope()" class="org.jdom2.util.NamespaceStack" />
	<method signature="boolean isInScope(org.jdom2.Namespace)" class="org.jdom2.util.NamespaceStack" />
	<method signature="void pop()" class="org.jdom2.util.NamespaceStack" />
	<method signature="java.lang.Iterable addedForward()" class="org.jdom2.util.NamespaceStack" />
	<method signature="java.util.Iterator iterator()" class="org.jdom2.util.NamespaceStack" />
	<method signature="void &lt;init&gt;(org.jdom2.Namespace[])" class="org.jdom2.util.NamespaceStack" />
	<method signature="void &lt;init&gt;()" class="org.jdom2.util.NamespaceStack" />
	<method signature="void push(org.jdom2.Element)" class="org.jdom2.util.NamespaceStack" />
	<method signature="void push(org.jdom2.Attribute)" class="org.jdom2.util.NamespaceStack" />
	<method signature="java.lang.Iterable addedReverse()" class="org.jdom2.util.NamespaceStack" />
	<class name="org.jfree.chart.LegendItem" />
	<method signature="void setOutlineStroke(java.awt.Stroke)" class="org.jfree.chart.LegendItem" />
	<method signature="java.lang.String getLabel()" class="org.jfree.chart.LegendItem" />
	<method signature="void setDatasetIndex(int)" class="org.jfree.chart.LegendItem" />
	<method signature="java.awt.Stroke getOutlineStroke()" class="org.jfree.chart.LegendItem" />
	<method signature="void setLine(java.awt.Shape)" class="org.jfree.chart.LegendItem" />
	<method signature="void setLinePaint(java.awt.Paint)" class="org.jfree.chart.LegendItem" />
	<method signature="void setToolTipText(java.lang.String)" class="org.jfree.chart.LegendItem" />
	<method signature="void &lt;init&gt;(java.text.AttributedString,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint,java.awt.Stroke,java.awt.Paint)" class="org.jfree.chart.LegendItem" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Stroke,java.awt.Paint)" class="org.jfree.chart.LegendItem" />
	<method signature="java.awt.Paint getOutlinePaint()" class="org.jfree.chart.LegendItem" />
	<method signature="java.awt.Paint getFillPaint()" class="org.jfree.chart.LegendItem" />
	<method signature="boolean isShapeVisible()" class="org.jfree.chart.LegendItem" />
	<method signature="boolean isShapeOutlineVisible()" class="org.jfree.chart.LegendItem" />
	<method signature="java.lang.Comparable getSeriesKey()" class="org.jfree.chart.LegendItem" />
	<method signature="java.awt.Paint getLabelPaint()" class="org.jfree.chart.LegendItem" />
	<method signature="org.jfree.data.general.Dataset getDataset()" class="org.jfree.chart.LegendItem" />
	<method signature="void setFillPaintTransformer(org.jfree.ui.GradientPaintTransformer)" class="org.jfree.chart.LegendItem" />
	<method signature="void setLabelPaint(java.awt.Paint)" class="org.jfree.chart.LegendItem" />
	<method signature="org.jfree.ui.GradientPaintTransformer getFillPaintTransformer()" class="org.jfree.chart.LegendItem" />
	<method signature="boolean isLineVisible()" class="org.jfree.chart.LegendItem" />
	<method signature="java.awt.Font getLabelFont()" class="org.jfree.chart.LegendItem" />
	<method signature="void &lt;init&gt;(java.text.AttributedString,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint)" class="org.jfree.chart.LegendItem" />
	<method signature="void setDataset(org.jfree.data.general.Dataset)" class="org.jfree.chart.LegendItem" />
	<method signature="java.text.AttributedString getAttributedLabel()" class="org.jfree.chart.LegendItem" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.chart.LegendItem" />
	<method signature="java.awt.Shape getShape()" class="org.jfree.chart.LegendItem" />
	<method signature="void &lt;init&gt;(java.lang.String,java.awt.Paint)" class="org.jfree.chart.LegendItem" />
	<method signature="void setOutlinePaint(java.awt.Paint)" class="org.jfree.chart.LegendItem" />
	<method signature="java.lang.String getURLText()" class="org.jfree.chart.LegendItem" />
	<method signature="java.lang.String getDescription()" class="org.jfree.chart.LegendItem" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)" class="org.jfree.chart.LegendItem" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.LegendItem" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.LegendItem" />
	<method signature="void setSeriesIndex(int)" class="org.jfree.chart.LegendItem" />
	<method signature="void setURLText(java.lang.String)" class="org.jfree.chart.LegendItem" />
	<method signature="void &lt;init&gt;(java.text.AttributedString,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Stroke,java.awt.Paint)" class="org.jfree.chart.LegendItem" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint,java.awt.Stroke,java.awt.Paint)" class="org.jfree.chart.LegendItem" />
	<method signature="void setDescription(java.lang.String)" class="org.jfree.chart.LegendItem" />
	<method signature="boolean isShapeFilled()" class="org.jfree.chart.LegendItem" />
	<method signature="int getDatasetIndex()" class="org.jfree.chart.LegendItem" />
	<method signature="void setShape(java.awt.Shape)" class="org.jfree.chart.LegendItem" />
	<method signature="java.awt.Paint getLinePaint()" class="org.jfree.chart.LegendItem" />
	<method signature="java.awt.Shape getLine()" class="org.jfree.chart.LegendItem" />
	<method signature="java.awt.Stroke getLineStroke()" class="org.jfree.chart.LegendItem" />
	<method signature="void setSeriesKey(java.lang.Comparable)" class="org.jfree.chart.LegendItem" />
	<method signature="void &lt;init&gt;(java.text.AttributedString,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)" class="org.jfree.chart.LegendItem" />
	<method signature="void setFillPaint(java.awt.Paint)" class="org.jfree.chart.LegendItem" />
	<method signature="void setLabelFont(java.awt.Font)" class="org.jfree.chart.LegendItem" />
	<method signature="void setShapeVisible(boolean)" class="org.jfree.chart.LegendItem" />
	<method signature="void setLineVisible(boolean)" class="org.jfree.chart.LegendItem" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint)" class="org.jfree.chart.LegendItem" />
	<method signature="int getSeriesIndex()" class="org.jfree.chart.LegendItem" />
	<method signature="java.lang.String getToolTipText()" class="org.jfree.chart.LegendItem" />
	<class name="com.toedter.calendar.demo.DateChooserPanel" />
	<method signature="void setLocale(java.util.Locale)" class="com.toedter.calendar.demo.DateChooserPanel" />
	<method signature="java.util.Date getDate()" class="com.toedter.calendar.demo.DateChooserPanel" />
	<method signature="void setMaxSelectableDate(java.util.Date)" class="com.toedter.calendar.demo.DateChooserPanel" />
	<method signature="void setDate(java.util.Date)" class="com.toedter.calendar.demo.DateChooserPanel" />
	<method signature="java.util.Locale getLocale()" class="com.toedter.calendar.demo.DateChooserPanel" />
	<method signature="void setEnabled(boolean)" class="com.toedter.calendar.demo.DateChooserPanel" />
	<method signature="void propertyChange(java.beans.PropertyChangeEvent)" class="com.toedter.calendar.demo.DateChooserPanel" />
	<method signature="boolean isEnabled()" class="com.toedter.calendar.demo.DateChooserPanel" />
	<method signature="java.util.Date getMaxSelectableDate()" class="com.toedter.calendar.demo.DateChooserPanel" />
	<method signature="void setMinSelectableDate(java.util.Date)" class="com.toedter.calendar.demo.DateChooserPanel" />
	<method signature="java.lang.String getDateFormatString()" class="com.toedter.calendar.demo.DateChooserPanel" />
	<method signature="void &lt;init&gt;()" class="com.toedter.calendar.demo.DateChooserPanel" />
	<method signature="void setDateFormatString(java.lang.String)" class="com.toedter.calendar.demo.DateChooserPanel" />
	<method signature="java.util.Date getMinSelectableDate()" class="com.toedter.calendar.demo.DateChooserPanel" />
	<class name="org.jfree.data.statistics.MultiValueCategoryDataset" />
	<method signature="java.util.List getValues(int,int)" class="org.jfree.data.statistics.MultiValueCategoryDataset" />
	<method signature="java.util.List getValues(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.statistics.MultiValueCategoryDataset" />
	<class name="org.jfree.util.ExtendedConfiguration" />
	<method signature="boolean getBoolProperty(java.lang.String)" class="org.jfree.util.ExtendedConfiguration" />
	<method signature="int getIntProperty(java.lang.String)" class="org.jfree.util.ExtendedConfiguration" />
	<method signature="boolean isPropertySet(java.lang.String)" class="org.jfree.util.ExtendedConfiguration" />
	<method signature="boolean getBoolProperty(java.lang.String,boolean)" class="org.jfree.util.ExtendedConfiguration" />
	<method signature="int getIntProperty(java.lang.String,int)" class="org.jfree.util.ExtendedConfiguration" />
	<class name="fi.iki.elonen.NanoHTTPD$Method" />
	<method signature="fi.iki.elonen.NanoHTTPD$Method[] values()" class="fi.iki.elonen.NanoHTTPD$Method" />
	<method signature="fi.iki.elonen.NanoHTTPD$Method valueOf(java.lang.String)" class="fi.iki.elonen.NanoHTTPD$Method" />
	<class name="javax.xml.bind.helpers.AbstractMarshallerImpl" />
	<method signature="void setEventHandler(javax.xml.bind.ValidationEventHandler)" class="javax.xml.bind.helpers.AbstractMarshallerImpl" />
	<method signature="void marshal(java.lang.Object,java.io.OutputStream)" class="javax.xml.bind.helpers.AbstractMarshallerImpl" />
	<method signature="javax.xml.bind.ValidationEventHandler getEventHandler()" class="javax.xml.bind.helpers.AbstractMarshallerImpl" />
	<method signature="void marshal(java.lang.Object,java.io.Writer)" class="javax.xml.bind.helpers.AbstractMarshallerImpl" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="javax.xml.bind.helpers.AbstractMarshallerImpl" />
	<method signature="org.w3c.dom.Node getNode(java.lang.Object)" class="javax.xml.bind.helpers.AbstractMarshallerImpl" />
	<method signature="void marshal(java.lang.Object,org.w3c.dom.Node)" class="javax.xml.bind.helpers.AbstractMarshallerImpl" />
	<method signature="void marshal(java.lang.Object,org.xml.sax.ContentHandler)" class="javax.xml.bind.helpers.AbstractMarshallerImpl" />
	<method signature="void &lt;init&gt;()" class="javax.xml.bind.helpers.AbstractMarshallerImpl" />
	<method signature="java.lang.Object getProperty(java.lang.String)" class="javax.xml.bind.helpers.AbstractMarshallerImpl" />
	<class name="fi.iki.elonen.NanoHTTPD$Response" />
	<method signature="fi.iki.elonen.NanoHTTPD$Response$IStatus getStatus()" class="fi.iki.elonen.NanoHTTPD$Response" />
	<method signature="void setChunkedTransfer(boolean)" class="fi.iki.elonen.NanoHTTPD$Response" />
	<method signature="void setGzipEncoding(boolean)" class="fi.iki.elonen.NanoHTTPD$Response" />
	<method signature="java.lang.String getMimeType()" class="fi.iki.elonen.NanoHTTPD$Response" />
	<method signature="void close()" class="fi.iki.elonen.NanoHTTPD$Response" />
	<method signature="void setData(java.io.InputStream)" class="fi.iki.elonen.NanoHTTPD$Response" />
	<method signature="void setRequestMethod(fi.iki.elonen.NanoHTTPD$Method)" class="fi.iki.elonen.NanoHTTPD$Response" />
	<method signature="void setStatus(fi.iki.elonen.NanoHTTPD$Response$IStatus)" class="fi.iki.elonen.NanoHTTPD$Response" />
	<method signature="void addHeader(java.lang.String,java.lang.String)" class="fi.iki.elonen.NanoHTTPD$Response" />
	<method signature="java.io.InputStream getData()" class="fi.iki.elonen.NanoHTTPD$Response" />
	<method signature="java.lang.String getHeader(java.lang.String)" class="fi.iki.elonen.NanoHTTPD$Response" />
	<method signature="fi.iki.elonen.NanoHTTPD$Method getRequestMethod()" class="fi.iki.elonen.NanoHTTPD$Response" />
	<method signature="void setKeepAlive(boolean)" class="fi.iki.elonen.NanoHTTPD$Response" />
	<method signature="void setMimeType(java.lang.String)" class="fi.iki.elonen.NanoHTTPD$Response" />
	<class name="javax.xml.datatype.DatatypeConfigurationException" />
	<method signature="void &lt;init&gt;()" class="javax.xml.datatype.DatatypeConfigurationException" />
	<method signature="void &lt;init&gt;(java.lang.Throwable)" class="javax.xml.datatype.DatatypeConfigurationException" />
	<method signature="void printStackTrace(java.io.PrintWriter)" class="javax.xml.datatype.DatatypeConfigurationException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Throwable)" class="javax.xml.datatype.DatatypeConfigurationException" />
	<method signature="void printStackTrace(java.io.PrintStream)" class="javax.xml.datatype.DatatypeConfigurationException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="javax.xml.datatype.DatatypeConfigurationException" />
	<method signature="void printStackTrace()" class="javax.xml.datatype.DatatypeConfigurationException" />
	<class name="freemarker.ext.beans.MapModel" />
	<method signature="int size()" class="freemarker.ext.beans.MapModel" />
	<method signature="boolean isEmpty()" class="freemarker.ext.beans.MapModel" />
	<method signature="java.lang.Object exec(java.util.List)" class="freemarker.ext.beans.MapModel" />
	<method signature="void &lt;init&gt;(java.util.Map,freemarker.ext.beans.BeansWrapper)" class="freemarker.ext.beans.MapModel" />
	<class name="org.w3c.dom.NameList" />
	<method signature="java.lang.String getName(int)" class="org.w3c.dom.NameList" />
	<method signature="boolean containsNS(java.lang.String,java.lang.String)" class="org.w3c.dom.NameList" />
	<method signature="java.lang.String getNamespaceURI(int)" class="org.w3c.dom.NameList" />
	<method signature="boolean contains(java.lang.String)" class="org.w3c.dom.NameList" />
	<method signature="int getLength()" class="org.w3c.dom.NameList" />
	<class name="edu.umd.cs.findbugs.annotations.DefaultAnnotationForParameters" />
	<method signature="edu.umd.cs.findbugs.annotations.Confidence confidence()" class="edu.umd.cs.findbugs.annotations.DefaultAnnotationForParameters" />
	<method signature="edu.umd.cs.findbugs.annotations.Priority priority()" class="edu.umd.cs.findbugs.annotations.DefaultAnnotationForParameters" />
	<method signature="java.lang.Class[] value()" class="edu.umd.cs.findbugs.annotations.DefaultAnnotationForParameters" />
	<class name="org.jfree.chart.urls.CategoryURLGenerator" />
	<method signature="java.lang.String generateURL(org.jfree.data.category.CategoryDataset,int,int)" class="org.jfree.chart.urls.CategoryURLGenerator" />
	<class name="com.google.zxing.pdf417.decoder.Decoder" />
	<method signature="com.google.zxing.common.DecoderResult decode(com.google.zxing.common.BitMatrix)" class="com.google.zxing.pdf417.decoder.Decoder" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.pdf417.decoder.Decoder" />
	<method signature="com.google.zxing.common.DecoderResult decode(boolean[][])" class="com.google.zxing.pdf417.decoder.Decoder" />
	<class name="org.jfree.chart.ChartMouseEvent" />
	<method signature="java.awt.event.MouseEvent getTrigger()" class="org.jfree.chart.ChartMouseEvent" />
	<method signature="org.jfree.chart.entity.ChartEntity getEntity()" class="org.jfree.chart.ChartMouseEvent" />
	<method signature="org.jfree.chart.JFreeChart getChart()" class="org.jfree.chart.ChartMouseEvent" />
	<method signature="void &lt;init&gt;(org.jfree.chart.JFreeChart,java.awt.event.MouseEvent,org.jfree.chart.entity.ChartEntity)" class="org.jfree.chart.ChartMouseEvent" />
	<class name="org.jfree.chart.axis.ValueAxis" />
	<method signature="void setUpArrow(java.awt.Shape)" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="double getLowerBound()" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="void setNegativeArrowVisible(boolean)" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="boolean isAutoTickUnitSelection()" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="boolean isVerticalTickLabels()" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="void setFixedAutoRange(double)" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="java.awt.Shape getDownArrow()" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="void resizeRange(double,double)" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="double getFixedAutoRange()" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="java.awt.Shape getUpArrow()" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="java.awt.Shape getLeftArrow()" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="org.jfree.chart.axis.TickUnitSource getStandardTickUnits()" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="void pan(double)" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="boolean isInverted()" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="java.awt.Shape getRightArrow()" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="void setVerticalTickLabels(boolean)" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="double lengthToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="void setLowerBound(double)" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="double getLowerMargin()" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="void setRangeWithMargins(double,double)" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="void setDefaultAutoRange(org.jfree.data.Range)" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="void setUpperMargin(double)" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="void setAutoRangeMinimumSize(double)" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="double getUpperMargin()" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="void setRange(double,double)" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="void resizeRange2(double,double)" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="double getUpperBound()" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="void setPositiveArrowVisible(boolean)" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="void centerRange(double)" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="void setAutoTickUnitSelection(boolean,boolean)" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="void zoomRange(double,double)" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="void setAutoTickUnitSelection(boolean)" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="boolean isNegativeArrowVisible()" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="void setRangeWithMargins(org.jfree.data.Range,boolean,boolean)" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="void setRangeWithMargins(org.jfree.data.Range)" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="int getMinorTickCount()" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="void setRange(org.jfree.data.Range,boolean,boolean)" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="void setRange(org.jfree.data.Range)" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="void setDownArrow(java.awt.Shape)" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="void setLowerMargin(double)" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="void setUpperBound(double)" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="void setLeftArrow(java.awt.Shape)" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="void setMinorTickCount(int)" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="void setAutoRangeMinimumSize(double,boolean)" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="void setRangeAboutValue(double,double)" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge,org.jfree.chart.axis.AxisSpace)" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="double getAutoRangeMinimumSize()" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="org.jfree.data.Range getDefaultAutoRange()" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="boolean isPositiveArrowVisible()" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="org.jfree.data.Range getRange()" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="void setRightArrow(java.awt.Shape)" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="void resizeRange(double)" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="boolean isAutoRange()" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="void setAutoRange(boolean)" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="void setInverted(boolean)" class="org.jfree.chart.axis.ValueAxis" />
	<method signature="void setStandardTickUnits(org.jfree.chart.axis.TickUnitSource)" class="org.jfree.chart.axis.ValueAxis" />
	<class name="org.jfree.data.statistics.HistogramBin" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.statistics.HistogramBin" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.statistics.HistogramBin" />
	<method signature="double getBinWidth()" class="org.jfree.data.statistics.HistogramBin" />
	<method signature="int getCount()" class="org.jfree.data.statistics.HistogramBin" />
	<method signature="double getStartBoundary()" class="org.jfree.data.statistics.HistogramBin" />
	<method signature="void incrementCount()" class="org.jfree.data.statistics.HistogramBin" />
	<method signature="double getEndBoundary()" class="org.jfree.data.statistics.HistogramBin" />
	<method signature="void &lt;init&gt;(double,double)" class="org.jfree.data.statistics.HistogramBin" />
	<class name="org.jfree.ui.action.ActionButton" />
	<method signature="void &lt;init&gt;(javax.swing.Icon)" class="org.jfree.ui.action.ActionButton" />
	<method signature="void &lt;init&gt;()" class="org.jfree.ui.action.ActionButton" />
	<method signature="void &lt;init&gt;(javax.swing.Action)" class="org.jfree.ui.action.ActionButton" />
	<method signature="javax.swing.Action getAction()" class="org.jfree.ui.action.ActionButton" />
	<method signature="void setEnabled(boolean)" class="org.jfree.ui.action.ActionButton" />
	<method signature="void setAction(javax.swing.Action)" class="org.jfree.ui.action.ActionButton" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.ui.action.ActionButton" />
	<method signature="void &lt;init&gt;(java.lang.String,javax.swing.Icon)" class="org.jfree.ui.action.ActionButton" />
	<class name="javax.xml.transform.Transformer" />
	<method signature="void clearParameters()" class="javax.xml.transform.Transformer" />
	<method signature="javax.xml.transform.ErrorListener getErrorListener()" class="javax.xml.transform.Transformer" />
	<method signature="void reset()" class="javax.xml.transform.Transformer" />
	<method signature="java.lang.Object getParameter(java.lang.String)" class="javax.xml.transform.Transformer" />
	<method signature="javax.xml.transform.URIResolver getURIResolver()" class="javax.xml.transform.Transformer" />
	<method signature="void setParameter(java.lang.String,java.lang.Object)" class="javax.xml.transform.Transformer" />
	<method signature="void transform(javax.xml.transform.Source,javax.xml.transform.Result)" class="javax.xml.transform.Transformer" />
	<method signature="void setOutputProperties(java.util.Properties)" class="javax.xml.transform.Transformer" />
	<method signature="void setOutputProperty(java.lang.String,java.lang.String)" class="javax.xml.transform.Transformer" />
	<method signature="void setURIResolver(javax.xml.transform.URIResolver)" class="javax.xml.transform.Transformer" />
	<method signature="java.util.Properties getOutputProperties()" class="javax.xml.transform.Transformer" />
	<method signature="void setErrorListener(javax.xml.transform.ErrorListener)" class="javax.xml.transform.Transformer" />
	<method signature="java.lang.String getOutputProperty(java.lang.String)" class="javax.xml.transform.Transformer" />
	<class name="org.apache.xerces.impl.dv.xs.TypeValidator" />
	<method signature="void checkExtraRules(java.lang.Object,org.apache.xerces.impl.dv.ValidationContext)" class="org.apache.xerces.impl.dv.xs.TypeValidator" />
	<method signature="int getDigit(char)" class="org.apache.xerces.impl.dv.xs.TypeValidator" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.xs.TypeValidator" />
	<method signature="boolean isDigit(char)" class="org.apache.xerces.impl.dv.xs.TypeValidator" />
	<method signature="java.lang.Object getActualValue(java.lang.String,org.apache.xerces.impl.dv.ValidationContext)" class="org.apache.xerces.impl.dv.xs.TypeValidator" />
	<method signature="int getTotalDigits(java.lang.Object)" class="org.apache.xerces.impl.dv.xs.TypeValidator" />
	<method signature="int getDataLength(java.lang.Object)" class="org.apache.xerces.impl.dv.xs.TypeValidator" />
	<method signature="boolean isIdentical(java.lang.Object,java.lang.Object)" class="org.apache.xerces.impl.dv.xs.TypeValidator" />
	<method signature="int compare(java.lang.Object,java.lang.Object)" class="org.apache.xerces.impl.dv.xs.TypeValidator" />
	<method signature="short getAllowedFacets()" class="org.apache.xerces.impl.dv.xs.TypeValidator" />
	<method signature="int getFractionDigits(java.lang.Object)" class="org.apache.xerces.impl.dv.xs.TypeValidator" />
	<class name="org.w3c.dom.css.CSSRule" />
	<method signature="java.lang.String getCssText()" class="org.w3c.dom.css.CSSRule" />
	<method signature="void setCssText(java.lang.String)" class="org.w3c.dom.css.CSSRule" />
	<method signature="org.w3c.dom.css.CSSStyleSheet getParentStyleSheet()" class="org.w3c.dom.css.CSSRule" />
	<method signature="short getType()" class="org.w3c.dom.css.CSSRule" />
	<method signature="org.w3c.dom.css.CSSRule getParentRule()" class="org.w3c.dom.css.CSSRule" />
	<class name="org.apache.xerces.impl.dv.dtd.XML11IDREFDatatypeValidator" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.dtd.XML11IDREFDatatypeValidator" />
	<method signature="void validate(java.lang.String,org.apache.xerces.impl.dv.ValidationContext)" class="org.apache.xerces.impl.dv.dtd.XML11IDREFDatatypeValidator" />
	<class name="org.jfree.chart.event.ChartChangeListener" />
	<method signature="void chartChanged(org.jfree.chart.event.ChartChangeEvent)" class="org.jfree.chart.event.ChartChangeListener" />
	<class name="org.apache.xerces.dom.DOMImplementationListImpl" />
	<method signature="void &lt;init&gt;(java.util.ArrayList)" class="org.apache.xerces.dom.DOMImplementationListImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.dom.DOMImplementationListImpl" />
	<method signature="void &lt;init&gt;(java.util.Vector)" class="org.apache.xerces.dom.DOMImplementationListImpl" />
	<method signature="org.w3c.dom.DOMImplementation item(int)" class="org.apache.xerces.dom.DOMImplementationListImpl" />
	<method signature="int getLength()" class="org.apache.xerces.dom.DOMImplementationListImpl" />
	<class name="org.w3c.dom.html.HTMLObjectElement" />
	<method signature="java.lang.String getName()" class="org.w3c.dom.html.HTMLObjectElement" />
	<method signature="java.lang.String getBorder()" class="org.w3c.dom.html.HTMLObjectElement" />
	<method signature="java.lang.String getCodeBase()" class="org.w3c.dom.html.HTMLObjectElement" />
	<method signature="java.lang.String getStandby()" class="org.w3c.dom.html.HTMLObjectElement" />
	<method signature="java.lang.String getUseMap()" class="org.w3c.dom.html.HTMLObjectElement" />
	<method signature="void setCodeType(java.lang.String)" class="org.w3c.dom.html.HTMLObjectElement" />
	<method signature="java.lang.String getWidth()" class="org.w3c.dom.html.HTMLObjectElement" />
	<method signature="java.lang.String getHspace()" class="org.w3c.dom.html.HTMLObjectElement" />
	<method signature="java.lang.String getHeight()" class="org.w3c.dom.html.HTMLObjectElement" />
	<method signature="int getTabIndex()" class="org.w3c.dom.html.HTMLObjectElement" />
	<method signature="void setName(java.lang.String)" class="org.w3c.dom.html.HTMLObjectElement" />
	<method signature="void setStandby(java.lang.String)" class="org.w3c.dom.html.HTMLObjectElement" />
	<method signature="java.lang.String getData()" class="org.w3c.dom.html.HTMLObjectElement" />
	<method signature="java.lang.String getCode()" class="org.w3c.dom.html.HTMLObjectElement" />
	<method signature="void setAlign(java.lang.String)" class="org.w3c.dom.html.HTMLObjectElement" />
	<method signature="void setBorder(java.lang.String)" class="org.w3c.dom.html.HTMLObjectElement" />
	<method signature="java.lang.String getCodeType()" class="org.w3c.dom.html.HTMLObjectElement" />
	<method signature="java.lang.String getAlign()" class="org.w3c.dom.html.HTMLObjectElement" />
	<method signature="void setTabIndex(int)" class="org.w3c.dom.html.HTMLObjectElement" />
	<method signature="void setCode(java.lang.String)" class="org.w3c.dom.html.HTMLObjectElement" />
	<method signature="void setArchive(java.lang.String)" class="org.w3c.dom.html.HTMLObjectElement" />
	<method signature="void setDeclare(boolean)" class="org.w3c.dom.html.HTMLObjectElement" />
	<method signature="void setData(java.lang.String)" class="org.w3c.dom.html.HTMLObjectElement" />
	<method signature="boolean getDeclare()" class="org.w3c.dom.html.HTMLObjectElement" />
	<method signature="void setVspace(java.lang.String)" class="org.w3c.dom.html.HTMLObjectElement" />
	<method signature="java.lang.String getType()" class="org.w3c.dom.html.HTMLObjectElement" />
	<method signature="void setUseMap(java.lang.String)" class="org.w3c.dom.html.HTMLObjectElement" />
	<method signature="java.lang.String getArchive()" class="org.w3c.dom.html.HTMLObjectElement" />
	<method signature="void setCodeBase(java.lang.String)" class="org.w3c.dom.html.HTMLObjectElement" />
	<method signature="void setType(java.lang.String)" class="org.w3c.dom.html.HTMLObjectElement" />
	<method signature="void setHeight(java.lang.String)" class="org.w3c.dom.html.HTMLObjectElement" />
	<method signature="void setHspace(java.lang.String)" class="org.w3c.dom.html.HTMLObjectElement" />
	<method signature="void setWidth(java.lang.String)" class="org.w3c.dom.html.HTMLObjectElement" />
	<method signature="org.w3c.dom.html.HTMLFormElement getForm()" class="org.w3c.dom.html.HTMLObjectElement" />
	<method signature="java.lang.String getVspace()" class="org.w3c.dom.html.HTMLObjectElement" />
	<class name="freemarker.debug.impl.DebuggerService" />
	<method signature="void &lt;init&gt;()" class="freemarker.debug.impl.DebuggerService" />
	<method signature="void registerTemplate(freemarker.template.Template)" class="freemarker.debug.impl.DebuggerService" />
	<method signature="java.util.List getBreakpoints(java.lang.String)" class="freemarker.debug.impl.DebuggerService" />
	<method signature="boolean suspendEnvironment(freemarker.core.Environment,int)" class="freemarker.debug.impl.DebuggerService" />
	<class name="org.apache.xerces.impl.xpath.XPath" />
	<method signature="org.apache.xerces.impl.xpath.XPath$LocationPath getLocationPath()" class="org.apache.xerces.impl.xpath.XPath" />
	<method signature="void main(java.lang.String[])" class="org.apache.xerces.impl.xpath.XPath" />
	<method signature="java.lang.String toString()" class="org.apache.xerces.impl.xpath.XPath" />
	<method signature="org.apache.xerces.impl.xpath.XPath$LocationPath[] getLocationPaths()" class="org.apache.xerces.impl.xpath.XPath" />
	<method signature="void &lt;init&gt;(java.lang.String,org.apache.xerces.util.SymbolTable,org.apache.xerces.xni.NamespaceContext)" class="org.apache.xerces.impl.xpath.XPath" />
	<class name="org.jfree.ui.FontChooserPanel" />
	<method signature="void &lt;init&gt;(java.awt.Font)" class="org.jfree.ui.FontChooserPanel" />
	<method signature="java.lang.String getSelectedName()" class="org.jfree.ui.FontChooserPanel" />
	<method signature="void setSelectedFont(java.awt.Font)" class="org.jfree.ui.FontChooserPanel" />
	<method signature="java.awt.Font getSelectedFont()" class="org.jfree.ui.FontChooserPanel" />
	<method signature="int getSelectedSize()" class="org.jfree.ui.FontChooserPanel" />
	<method signature="int getSelectedStyle()" class="org.jfree.ui.FontChooserPanel" />
	<class name="org.apache.xerces.impl.io.UTF8Reader" />
	<method signature="void mark(int)" class="org.apache.xerces.impl.io.UTF8Reader" />
	<method signature="int read(char[],int,int)" class="org.apache.xerces.impl.io.UTF8Reader" />
	<method signature="void &lt;init&gt;(java.io.InputStream)" class="org.apache.xerces.impl.io.UTF8Reader" />
	<method signature="void &lt;init&gt;(java.io.InputStream,int,org.apache.xerces.util.MessageFormatter,java.util.Locale)" class="org.apache.xerces.impl.io.UTF8Reader" />
	<method signature="void reset()" class="org.apache.xerces.impl.io.UTF8Reader" />
	<method signature="void &lt;init&gt;(java.io.InputStream,org.apache.xerces.util.MessageFormatter,java.util.Locale)" class="org.apache.xerces.impl.io.UTF8Reader" />
	<method signature="void &lt;init&gt;(java.io.InputStream,byte[],org.apache.xerces.util.MessageFormatter,java.util.Locale)" class="org.apache.xerces.impl.io.UTF8Reader" />
	<method signature="void close()" class="org.apache.xerces.impl.io.UTF8Reader" />
	<method signature="boolean ready()" class="org.apache.xerces.impl.io.UTF8Reader" />
	<method signature="long skip(long)" class="org.apache.xerces.impl.io.UTF8Reader" />
	<method signature="int read()" class="org.apache.xerces.impl.io.UTF8Reader" />
	<method signature="boolean markSupported()" class="org.apache.xerces.impl.io.UTF8Reader" />
	<class name="org.apache.xml.serialize.ElementState" />
	<method signature="void &lt;init&gt;()" class="org.apache.xml.serialize.ElementState" />
	<class name="org.xml.sax.Parser" />
	<method signature="void setDTDHandler(org.xml.sax.DTDHandler)" class="org.xml.sax.Parser" />
	<method signature="void setLocale(java.util.Locale)" class="org.xml.sax.Parser" />
	<method signature="void setDocumentHandler(org.xml.sax.DocumentHandler)" class="org.xml.sax.Parser" />
	<method signature="void setEntityResolver(org.xml.sax.EntityResolver)" class="org.xml.sax.Parser" />
	<method signature="void parse(java.lang.String)" class="org.xml.sax.Parser" />
	<method signature="void setErrorHandler(org.xml.sax.ErrorHandler)" class="org.xml.sax.Parser" />
	<method signature="void parse(org.xml.sax.InputSource)" class="org.xml.sax.Parser" />
	<class name="org.jfree.data.statistics.BoxAndWhiskerCategoryDataset" />
	<method signature="java.lang.Number getMeanValue(int,int)" class="org.jfree.data.statistics.BoxAndWhiskerCategoryDataset" />
	<method signature="java.lang.Number getMedianValue(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.statistics.BoxAndWhiskerCategoryDataset" />
	<method signature="java.lang.Number getMeanValue(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.statistics.BoxAndWhiskerCategoryDataset" />
	<method signature="java.lang.Number getMedianValue(int,int)" class="org.jfree.data.statistics.BoxAndWhiskerCategoryDataset" />
	<method signature="java.lang.Number getMinOutlier(int,int)" class="org.jfree.data.statistics.BoxAndWhiskerCategoryDataset" />
	<method signature="java.util.List getOutliers(int,int)" class="org.jfree.data.statistics.BoxAndWhiskerCategoryDataset" />
	<method signature="java.lang.Number getMinOutlier(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.statistics.BoxAndWhiskerCategoryDataset" />
	<method signature="java.lang.Number getMinRegularValue(int,int)" class="org.jfree.data.statistics.BoxAndWhiskerCategoryDataset" />
	<method signature="java.lang.Number getQ3Value(int,int)" class="org.jfree.data.statistics.BoxAndWhiskerCategoryDataset" />
	<method signature="java.lang.Number getMaxRegularValue(int,int)" class="org.jfree.data.statistics.BoxAndWhiskerCategoryDataset" />
	<method signature="java.lang.Number getMaxOutlier(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.statistics.BoxAndWhiskerCategoryDataset" />
	<method signature="java.util.List getOutliers(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.statistics.BoxAndWhiskerCategoryDataset" />
	<method signature="java.lang.Number getMinRegularValue(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.statistics.BoxAndWhiskerCategoryDataset" />
	<method signature="java.lang.Number getQ3Value(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.statistics.BoxAndWhiskerCategoryDataset" />
	<method signature="java.lang.Number getMaxRegularValue(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.statistics.BoxAndWhiskerCategoryDataset" />
	<method signature="java.lang.Number getMaxOutlier(int,int)" class="org.jfree.data.statistics.BoxAndWhiskerCategoryDataset" />
	<method signature="java.lang.Number getQ1Value(int,int)" class="org.jfree.data.statistics.BoxAndWhiskerCategoryDataset" />
	<method signature="java.lang.Number getQ1Value(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.statistics.BoxAndWhiskerCategoryDataset" />
	<class name="org.apache.xerces.impl.xs.models.XSAllCM" />
	<method signature="void &lt;init&gt;(boolean,int)" class="org.apache.xerces.impl.xs.models.XSAllCM" />
	<method signature="void addElement(org.apache.xerces.impl.xs.XSElementDecl,boolean)" class="org.apache.xerces.impl.xs.models.XSAllCM" />
	<method signature="int[] startContentModel()" class="org.apache.xerces.impl.xs.models.XSAllCM" />
	<method signature="boolean checkUniqueParticleAttribution(org.apache.xerces.impl.xs.SubstitutionGroupHandler)" class="org.apache.xerces.impl.xs.models.XSAllCM" />
	<method signature="int[] occurenceInfo(int[])" class="org.apache.xerces.impl.xs.models.XSAllCM" />
	<method signature="java.lang.Object oneTransition(org.apache.xerces.xni.QName,int[],org.apache.xerces.impl.xs.SubstitutionGroupHandler)" class="org.apache.xerces.impl.xs.models.XSAllCM" />
	<method signature="java.util.Vector whatCanGoHere(int[])" class="org.apache.xerces.impl.xs.models.XSAllCM" />
	<method signature="java.lang.String getTermName(int)" class="org.apache.xerces.impl.xs.models.XSAllCM" />
	<method signature="boolean endContentModel(int[])" class="org.apache.xerces.impl.xs.models.XSAllCM" />
	<method signature="boolean isCompactedForUPA()" class="org.apache.xerces.impl.xs.models.XSAllCM" />
	<class name="org.apache.xerces.xni.QName" />
	<method signature="java.lang.Object clone()" class="org.apache.xerces.xni.QName" />
	<method signature="void &lt;init&gt;(org.apache.xerces.xni.QName)" class="org.apache.xerces.xni.QName" />
	<method signature="void clear()" class="org.apache.xerces.xni.QName" />
	<method signature="int hashCode()" class="org.apache.xerces.xni.QName" />
	<method signature="boolean equals(java.lang.Object)" class="org.apache.xerces.xni.QName" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.xni.QName" />
	<method signature="void setValues(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.xni.QName" />
	<method signature="java.lang.String toString()" class="org.apache.xerces.xni.QName" />
	<method signature="void setValues(org.apache.xerces.xni.QName)" class="org.apache.xerces.xni.QName" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.xni.QName" />
	<class name="javax.xml.bind.PrintConversionEvent" />
	<class name="org.jfree.chart.plot.XYPlot" />
	<method signature="void setShadowGenerator(org.jfree.chart.util.ShadowGenerator)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.ui.Layer)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="java.awt.Stroke getDomainZeroBaselineStroke()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void addDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.ui.Layer,boolean)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setRangeZeroBaselinePaint(java.awt.Paint)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setRangeCrosshairValue(double)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="boolean isRangeZeroBaselineVisible()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setRangeMinorGridlinePaint(java.awt.Paint)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setRangeCrosshairVisible(boolean)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setRangeMinorGridlinesVisible(boolean)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void addRangeMarker(org.jfree.chart.plot.Marker)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void panRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="boolean removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.ui.Layer)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="java.awt.Stroke getDomainMinorGridlineStroke()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="boolean render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.CrosshairState)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="java.awt.Stroke getDomainGridlineStroke()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="java.util.Collection getRangeMarkers(org.jfree.ui.Layer)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void clearRangeMarkers()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="boolean removeDomainMarker(org.jfree.chart.plot.Marker)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="java.awt.Stroke getRangeZeroBaselineStroke()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="boolean removeDomainMarker(org.jfree.chart.plot.Marker,org.jfree.ui.Layer)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="java.util.Collection getRangeMarkers(int,org.jfree.ui.Layer)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="int getRangeAxisCount()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void drawDomainTickBands(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setRangeGridlineStroke(java.awt.Stroke)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setDomainMinorGridlinesVisible(boolean)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setDomainCrosshairValue(double,boolean)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setRenderer(int,org.jfree.chart.renderer.xy.XYItemRenderer)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="int indexOf(org.jfree.data.xy.XYDataset)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="org.jfree.chart.renderer.xy.XYItemRenderer getRenderer()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void rendererChanged(org.jfree.chart.event.RendererChangeEvent)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="int getSeriesCount()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="java.awt.geom.Point2D getQuadrantOrigin()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="java.awt.Paint getDomainMinorGridlinePaint()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setDomainAxes(org.jfree.chart.axis.ValueAxis[])" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="org.jfree.chart.plot.SeriesRenderingOrder getSeriesRenderingOrder()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="org.jfree.chart.axis.AxisLocation getDomainAxisLocation()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="org.jfree.data.xy.XYDataset getDataset()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="boolean isDomainZoomable()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void clearDomainAxes()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setRangeMinorGridlineStroke(java.awt.Stroke)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="boolean isRangePannable()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setDomainZeroBaselinePaint(java.awt.Paint)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setRangeTickBandPaint(java.awt.Paint)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void addRangeMarker(org.jfree.chart.plot.Marker,org.jfree.ui.Layer)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void configureDomainAxes()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="boolean removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.ui.Layer,boolean)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void clearDomainMarkers(int)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void addAnnotation(org.jfree.chart.annotations.XYAnnotation,boolean)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="org.jfree.chart.renderer.xy.XYItemRenderer getRenderer(int)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setDomainCrosshairStroke(java.awt.Stroke)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="org.jfree.chart.LegendItemCollection getLegendItems()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void configureRangeAxes()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void clearAnnotations()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="boolean removeRangeMarker(org.jfree.chart.plot.Marker)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="org.jfree.chart.axis.ValueAxis getRangeAxis()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void addDomainMarker(org.jfree.chart.plot.Marker,org.jfree.ui.Layer)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="java.awt.Paint getDomainCrosshairPaint()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setDomainAxis(int,org.jfree.chart.axis.ValueAxis,boolean)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void clearRangeAxes()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setDomainPannable(boolean)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setDomainCrosshairValue(double)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setRangeAxisLocation(org.jfree.chart.axis.AxisLocation)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void clearRangeMarkers(int)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="boolean removeRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.ui.Layer)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setDomainCrosshairLockedOnData(boolean)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="org.jfree.ui.RectangleEdge getDomainAxisEdge(int)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="org.jfree.chart.plot.PlotOrientation getOrientation()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setDomainAxis(org.jfree.chart.axis.ValueAxis)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setRangeZeroBaselineVisible(boolean)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void annotationChanged(org.jfree.chart.event.AnnotationChangeEvent)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="java.awt.Paint getDomainZeroBaselinePaint()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setDomainAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setRangePannable(boolean)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="boolean isDomainMinorGridlinesVisible()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="java.util.Collection getDomainMarkers(org.jfree.ui.Layer)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setRangeCrosshairStroke(java.awt.Stroke)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="boolean isDomainZeroBaselineVisible()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="java.util.List getAnnotations()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setRangeCrosshairLockedOnData(boolean)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setDomainZeroBaselineVisible(boolean)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setRangeAxis(org.jfree.chart.axis.ValueAxis)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="org.jfree.chart.axis.ValueAxis getDomainAxis(int)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="org.jfree.chart.axis.AxisSpace getFixedDomainAxisSpace()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void clearDomainMarkers()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="boolean removeDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.ui.Layer,boolean)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="int getDomainAxisCount()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setSeriesRenderingOrder(org.jfree.chart.plot.SeriesRenderingOrder)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace,boolean)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="java.util.Collection getDomainMarkers(int,org.jfree.ui.Layer)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setRangeCrosshairValue(double,boolean)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="org.jfree.ui.RectangleEdge getDomainAxisEdge()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="org.jfree.chart.axis.AxisLocation getRangeAxisLocation()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="double getRangeCrosshairValue()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setDomainGridlinePaint(java.awt.Paint)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setRangeAxis(int,org.jfree.chart.axis.ValueAxis,boolean)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setOrientation(org.jfree.chart.plot.PlotOrientation)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.ui.Layer,boolean)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void addDomainMarker(int,org.jfree.chart.plot.Marker,org.jfree.ui.Layer)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void mapDatasetToRangeAxis(int,int)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="boolean removeAnnotation(org.jfree.chart.annotations.XYAnnotation)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setDomainZeroBaselineStroke(java.awt.Stroke)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void addDomainMarker(org.jfree.chart.plot.Marker)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="java.awt.Paint getRangeMinorGridlinePaint()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="boolean removeRangeMarker(org.jfree.chart.plot.Marker,org.jfree.ui.Layer)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="org.jfree.chart.axis.ValueAxis getDomainAxisForDataset(int)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="java.awt.Paint getQuadrantPaint(int)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="java.awt.Paint getRangeZeroBaselinePaint()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="boolean isDomainGridlinesVisible()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setDomainMinorGridlineStroke(java.awt.Stroke)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="boolean isDomainCrosshairLockedOnData()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void mapDatasetToDomainAxes(int,java.util.List)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void addAnnotation(org.jfree.chart.annotations.XYAnnotation)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setFixedLegendItems(org.jfree.chart.LegendItemCollection)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void &lt;init&gt;(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="java.awt.Stroke getRangeCrosshairStroke()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setDataset(int,org.jfree.data.xy.XYDataset)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void zoomDomainAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="int getWeight()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="java.awt.Paint getDomainGridlinePaint()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setDataset(org.jfree.data.xy.XYDataset)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setDomainAxis(int,org.jfree.chart.axis.ValueAxis)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="boolean isDomainPannable()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="int getIndexOf(org.jfree.chart.renderer.xy.XYItemRenderer)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="java.lang.String getPlotType()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setRangeAxes(org.jfree.chart.axis.ValueAxis[])" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setAxisOffset(org.jfree.ui.RectangleInsets)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="java.awt.Stroke getRangeMinorGridlineStroke()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setRangeZeroBaselineStroke(java.awt.Stroke)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setRangeCrosshairPaint(java.awt.Paint)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setRangeAxis(int,org.jfree.chart.axis.ValueAxis)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="org.jfree.chart.axis.AxisSpace getFixedRangeAxisSpace()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setQuadrantPaint(int,java.awt.Paint)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="int getDatasetCount()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setDatasetRenderingOrder(org.jfree.chart.plot.DatasetRenderingOrder)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="boolean isRangeMinorGridlinesVisible()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="org.jfree.chart.axis.AxisLocation getDomainAxisLocation(int)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="org.jfree.chart.LegendItemCollection getFixedLegendItems()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setDomainTickBandPaint(java.awt.Paint)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setWeight(int)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void panDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setRenderer(int,org.jfree.chart.renderer.xy.XYItemRenderer,boolean)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="boolean isRangeCrosshairVisible()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setRangeGridlinePaint(java.awt.Paint)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setDomainCrosshairPaint(java.awt.Paint)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void mapDatasetToRangeAxes(int,java.util.List)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="boolean removeAnnotation(org.jfree.chart.annotations.XYAnnotation,boolean)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="int getDomainAxisIndex(org.jfree.chart.axis.ValueAxis)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="org.jfree.chart.util.ShadowGenerator getShadowGenerator()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void mapDatasetToDomainAxis(int,int)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setRenderers(org.jfree.chart.renderer.xy.XYItemRenderer[])" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="java.awt.Paint getRangeGridlinePaint()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="org.jfree.ui.RectangleEdge getRangeAxisEdge()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void drawRangeTickBands(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.util.List)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="int getRendererCount()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setDomainGridlineStroke(java.awt.Stroke)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="org.jfree.chart.plot.DatasetRenderingOrder getDatasetRenderingOrder()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="boolean isRangeCrosshairLockedOnData()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setQuadrantOrigin(java.awt.geom.Point2D)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="org.jfree.chart.axis.ValueAxis getDomainAxis()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setDomainMinorGridlinePaint(java.awt.Paint)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="boolean isDomainCrosshairVisible()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void zoomDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="java.awt.Stroke getRangeGridlineStroke()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="boolean isRangeGridlinesVisible()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="int getRangeAxisIndex(org.jfree.chart.axis.ValueAxis)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setRangeGridlinesVisible(boolean)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="java.awt.Paint getRangeCrosshairPaint()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setDomainGridlinesVisible(boolean)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="org.jfree.chart.axis.AxisLocation getRangeAxisLocation(int)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="org.jfree.ui.RectangleEdge getRangeAxisEdge(int)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="org.jfree.chart.renderer.xy.XYItemRenderer getRendererForDataset(org.jfree.data.xy.XYDataset)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setRangeAxisLocation(org.jfree.chart.axis.AxisLocation,boolean)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="org.jfree.chart.axis.ValueAxis getRangeAxisForDataset(int)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setDomainCrosshairVisible(boolean)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void drawAnnotations(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="org.jfree.ui.RectangleInsets getAxisOffset()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="double getDomainCrosshairValue()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void datasetChanged(org.jfree.data.general.DatasetChangeEvent)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="void setDomainAxisLocation(org.jfree.chart.axis.AxisLocation)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="java.awt.Stroke getDomainCrosshairStroke()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="boolean isRangeZoomable()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="java.awt.Paint getRangeTickBandPaint()" class="org.jfree.chart.plot.XYPlot" />
	<method signature="org.jfree.chart.axis.ValueAxis getRangeAxis(int)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="org.jfree.data.xy.XYDataset getDataset(int)" class="org.jfree.chart.plot.XYPlot" />
	<method signature="java.awt.Paint getDomainTickBandPaint()" class="org.jfree.chart.plot.XYPlot" />
	<class name="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="boolean getBaseSeriesVisible()" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setSeriesPositiveItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition,boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.awt.Shape lookupLegendShape(int)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setItemLabelFont(java.awt.Font,boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="org.jfree.chart.labels.ItemLabelPosition getPositiveItemLabelPosition()" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setOutlinePaint(java.awt.Paint,boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setItemLabelPaint(java.awt.Paint)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.lang.Boolean getCreateEntities()" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="boolean getBaseCreateEntities()" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="org.jfree.chart.labels.ItemLabelPosition getPositiveItemLabelPosition(int,int)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.awt.Paint lookupSeriesFillPaint(int)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="boolean isSeriesItemLabelsVisible(int)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setBaseItemLabelFont(java.awt.Font,boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setSeriesVisible(int,java.lang.Boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setBaseCreateEntities(boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setBaseFillPaint(java.awt.Paint)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setBaseStroke(java.awt.Stroke,boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setAutoPopulateSeriesShape(boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.awt.Paint getSeriesItemLabelPaint(int)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setSeriesShape(int,java.awt.Shape,boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setItemLabelsVisible(java.lang.Boolean,boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="boolean isItemLabelVisible(int,int)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setSeriesVisible(java.lang.Boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setBaseSeriesVisibleInLegend(boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="org.jfree.chart.plot.DrawingSupplier getDrawingSupplier()" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setOutlinePaint(java.awt.Paint)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setItemLabelPaint(java.awt.Paint,boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="org.jfree.chart.labels.ItemLabelPosition getNegativeItemLabelPosition(int,int)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="boolean getAutoPopulateSeriesPaint()" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.awt.Paint getSeriesFillPaint(int)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setSeriesCreateEntities(int,java.lang.Boolean,boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setCreateEntities(java.lang.Boolean,boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="org.jfree.chart.labels.ItemLabelPosition getNegativeItemLabelPosition()" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="boolean getAutoPopulateSeriesOutlinePaint()" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.awt.Paint getBasePaint()" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void addChangeListener(org.jfree.chart.event.RendererChangeListener)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setBaseLegendTextFont(java.awt.Font)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.awt.Paint getBaseItemLabelPaint()" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.lang.Boolean getSeriesCreateEntities(int)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.awt.Font getBaseLegendTextFont()" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setBaseFillPaint(java.awt.Paint,boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.awt.Stroke lookupSeriesStroke(int)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.awt.Stroke lookupSeriesOutlineStroke(int)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.lang.Boolean getSeriesVisibleInLegend()" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setNegativeItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition,boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.lang.Boolean getSeriesVisible(int)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.awt.Stroke getSeriesStroke(int)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setSeriesItemLabelFont(int,java.awt.Font)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.awt.Paint lookupSeriesOutlinePaint(int)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="boolean hasListener(java.util.EventListener)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.awt.Paint getBaseOutlinePaint()" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.awt.Shape getItemShape(int,int)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setShape(java.awt.Shape,boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.awt.Paint getBaseLegendTextPaint()" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setDataBoundsIncludesVisibleSeriesOnly(boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setAutoPopulateSeriesPaint(boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setBaseStroke(java.awt.Stroke)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.awt.Font getItemLabelFont()" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setAutoPopulateSeriesFillPaint(boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.awt.Stroke getItemOutlineStroke(int,int)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setBaseItemLabelsVisible(java.lang.Boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.awt.Paint getItemOutlinePaint(int,int)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setSeriesCreateEntities(int,java.lang.Boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.lang.Boolean getSeriesVisible()" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="boolean isSeriesVisible(int)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setBaseShape(java.awt.Shape,boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setBasePaint(java.awt.Paint)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.lang.Boolean getSeriesVisibleInLegend(int)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setSeriesVisibleInLegend(java.lang.Boolean,boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setSeriesVisible(int,java.lang.Boolean,boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void notifyListeners(org.jfree.chart.event.RendererChangeEvent)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void clearSeriesStrokes(boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="boolean getBaseSeriesVisibleInLegend()" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="boolean getAutoPopulateSeriesOutlineStroke()" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setSeriesNegativeItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition,boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setBasePaint(java.awt.Paint,boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.awt.Stroke getBaseStroke()" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.awt.Paint lookupLegendTextPaint(int)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setPositiveItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition,boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setBaseItemLabelsVisible(boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="int getDefaultEntityRadius()" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setBasePositiveItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="boolean getAutoPopulateSeriesStroke()" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setBaseNegativeItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setBaseSeriesVisible(boolean,boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.awt.Shape getLegendShape(int)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setOutlineStroke(java.awt.Stroke)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.awt.Font getItemLabelFont(int,int)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setBaseItemLabelFont(java.awt.Font)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setAutoPopulateSeriesOutlinePaint(boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setSeriesPaint(int,java.awt.Paint)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setSeriesOutlineStroke(int,java.awt.Stroke)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.awt.Stroke getSeriesOutlineStroke(int)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void removeChangeListener(org.jfree.chart.event.RendererChangeListener)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setPaint(java.awt.Paint,boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setSeriesFillPaint(int,java.awt.Paint,boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="boolean getItemVisible(int,int)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="org.jfree.chart.labels.ItemLabelPosition getBasePositiveItemLabelPosition()" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setBaseOutlineStroke(java.awt.Stroke,boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setLegendTextPaint(int,java.awt.Paint)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setItemLabelFont(java.awt.Font)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setSeriesOutlineStroke(int,java.awt.Stroke,boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setBaseOutlinePaint(java.awt.Paint)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setItemLabelsVisible(java.lang.Boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setBaseItemLabelPaint(java.awt.Paint)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="boolean getDataBoundsIncludesVisibleSeriesOnly()" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="boolean isSeriesVisibleInLegend(int)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setBaseLegendShape(java.awt.Shape)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setSeriesPositiveItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setLegendTextFont(int,java.awt.Font)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setSeriesOutlinePaint(int,java.awt.Paint)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setSeriesItemLabelsVisible(int,java.lang.Boolean,boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.awt.Paint getItemLabelPaint()" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setCreateEntities(java.lang.Boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setPaint(java.awt.Paint)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setSeriesVisible(java.lang.Boolean,boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setSeriesVisibleInLegend(int,java.lang.Boolean,boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="boolean getAutoPopulateSeriesFillPaint()" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.awt.Shape getSeriesShape(int)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setShape(java.awt.Shape)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="int hashCode()" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="double getItemLabelAnchorOffset()" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.awt.Shape getBaseShape()" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.awt.Paint getItemPaint(int,int)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setSeriesItemLabelPaint(int,java.awt.Paint,boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setBaseShape(java.awt.Shape)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setSeriesItemLabelsVisible(int,boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setBaseOutlinePaint(java.awt.Paint,boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setItemLabelsVisible(boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setBaseItemLabelPaint(java.awt.Paint,boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setStroke(java.awt.Stroke)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setBaseSeriesVisible(boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setAutoPopulateSeriesStroke(boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setSeriesShape(int,java.awt.Shape)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setNegativeItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setAutoPopulateSeriesOutlineStroke(boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setOutlineStroke(java.awt.Stroke,boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="org.jfree.chart.labels.ItemLabelPosition getBaseNegativeItemLabelPosition()" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.awt.Paint getLegendTextPaint(int)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setSeriesItemLabelPaint(int,java.awt.Paint)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.awt.Stroke getBaseOutlineStroke()" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.awt.Font lookupLegendTextFont(int)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.awt.Font getBaseItemLabelFont()" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setSeriesItemLabelsVisible(int,java.lang.Boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="org.jfree.chart.labels.ItemLabelPosition getSeriesNegativeItemLabelPosition(int)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setBaseCreateEntities(boolean,boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.awt.Paint getSeriesOutlinePaint(int)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.awt.Shape getBaseLegendShape()" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setBaseOutlineStroke(java.awt.Stroke)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setFillPaint(java.awt.Paint,boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setSeriesOutlinePaint(int,java.awt.Paint,boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.awt.Paint lookupSeriesPaint(int)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.awt.Font getLegendTextFont(int)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setSeriesVisibleInLegend(int,java.lang.Boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setBaseItemLabelsVisible(java.lang.Boolean,boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setSeriesItemLabelFont(int,java.awt.Font,boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="boolean getAutoPopulateSeriesShape()" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.awt.Paint getBaseFillPaint()" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setSeriesStroke(int,java.awt.Stroke,boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setBaseSeriesVisibleInLegend(boolean,boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="boolean getItemCreateEntity(int,int)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setSeriesVisibleInLegend(java.lang.Boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setDefaultEntityRadius(int)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setSeriesFillPaint(int,java.awt.Paint)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.lang.Boolean getBaseItemLabelsVisible()" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setFillPaint(java.awt.Paint)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.awt.Shape lookupSeriesShape(int)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setItemLabelAnchorOffset(double)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setSeriesStroke(int,java.awt.Stroke)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setSeriesNegativeItemLabelPosition(int,org.jfree.chart.labels.ItemLabelPosition)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setPositiveItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="org.jfree.chart.labels.ItemLabelPosition getSeriesPositiveItemLabelPosition(int)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.awt.Paint getItemFillPaint(int,int)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.awt.Paint getSeriesPaint(int)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.awt.Paint getItemLabelPaint(int,int)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setBaseLegendTextPaint(java.awt.Paint)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setSeriesPaint(int,java.awt.Paint,boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.awt.Stroke getItemStroke(int,int)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setBasePositiveItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition,boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setStroke(java.awt.Stroke,boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void clearSeriesPaints(boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setLegendShape(int,java.awt.Shape)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="void setBaseNegativeItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition,boolean)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<method signature="java.awt.Font getSeriesItemLabelFont(int)" class="org.jfree.chart.renderer.AbstractRenderer" />
	<class name="javax.xml.transform.stream.StreamSource" />
	<method signature="void setReader(java.io.Reader)" class="javax.xml.transform.stream.StreamSource" />
	<method signature="java.lang.String getSystemId()" class="javax.xml.transform.stream.StreamSource" />
	<method signature="void setSystemId(java.lang.String)" class="javax.xml.transform.stream.StreamSource" />
	<method signature="void &lt;init&gt;(java.io.InputStream)" class="javax.xml.transform.stream.StreamSource" />
	<method signature="java.io.InputStream getInputStream()" class="javax.xml.transform.stream.StreamSource" />
	<method signature="void setSystemId(java.io.File)" class="javax.xml.transform.stream.StreamSource" />
	<method signature="void &lt;init&gt;(java.io.InputStream,java.lang.String)" class="javax.xml.transform.stream.StreamSource" />
	<method signature="java.lang.String getPublicId()" class="javax.xml.transform.stream.StreamSource" />
	<method signature="void &lt;init&gt;(java.io.File)" class="javax.xml.transform.stream.StreamSource" />
	<method signature="void &lt;init&gt;(java.io.Reader,java.lang.String)" class="javax.xml.transform.stream.StreamSource" />
	<method signature="void &lt;init&gt;()" class="javax.xml.transform.stream.StreamSource" />
	<method signature="void &lt;init&gt;(java.io.Reader)" class="javax.xml.transform.stream.StreamSource" />
	<method signature="void setInputStream(java.io.InputStream)" class="javax.xml.transform.stream.StreamSource" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="javax.xml.transform.stream.StreamSource" />
	<method signature="java.io.Reader getReader()" class="javax.xml.transform.stream.StreamSource" />
	<method signature="void setPublicId(java.lang.String)" class="javax.xml.transform.stream.StreamSource" />
	<class name="org.jfree.data.KeyedObjects" />
	<method signature="void insertValue(int,java.lang.Comparable,java.lang.Object)" class="org.jfree.data.KeyedObjects" />
	<method signature="int hashCode()" class="org.jfree.data.KeyedObjects" />
	<method signature="int getIndex(java.lang.Comparable)" class="org.jfree.data.KeyedObjects" />
	<method signature="java.lang.Object getObject(int)" class="org.jfree.data.KeyedObjects" />
	<method signature="java.lang.Object getObject(java.lang.Comparable)" class="org.jfree.data.KeyedObjects" />
	<method signature="void removeValue(int)" class="org.jfree.data.KeyedObjects" />
	<method signature="void addObject(java.lang.Comparable,java.lang.Object)" class="org.jfree.data.KeyedObjects" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.KeyedObjects" />
	<method signature="java.util.List getKeys()" class="org.jfree.data.KeyedObjects" />
	<method signature="void clear()" class="org.jfree.data.KeyedObjects" />
	<method signature="int getItemCount()" class="org.jfree.data.KeyedObjects" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.KeyedObjects" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.KeyedObjects" />
	<method signature="void setObject(java.lang.Comparable,java.lang.Object)" class="org.jfree.data.KeyedObjects" />
	<method signature="java.lang.Comparable getKey(int)" class="org.jfree.data.KeyedObjects" />
	<method signature="void removeValue(java.lang.Comparable)" class="org.jfree.data.KeyedObjects" />
	<class name="org.apache.xerces.impl.XMLDocumentScannerImpl" />
	<method signature="java.lang.String[] getRecognizedProperties()" class="org.apache.xerces.impl.XMLDocumentScannerImpl" />
	<method signature="void startEntity(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.XMLDocumentScannerImpl" />
	<method signature="java.lang.String[] getRecognizedFeatures()" class="org.apache.xerces.impl.XMLDocumentScannerImpl" />
	<method signature="java.lang.Boolean getFeatureDefault(java.lang.String)" class="org.apache.xerces.impl.XMLDocumentScannerImpl" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="org.apache.xerces.impl.XMLDocumentScannerImpl" />
	<method signature="void reset(org.apache.xerces.xni.parser.XMLComponentManager)" class="org.apache.xerces.impl.XMLDocumentScannerImpl" />
	<method signature="void endEntity(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.XMLDocumentScannerImpl" />
	<method signature="java.lang.Object getPropertyDefault(java.lang.String)" class="org.apache.xerces.impl.XMLDocumentScannerImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.XMLDocumentScannerImpl" />
	<method signature="void setInputSource(org.apache.xerces.xni.parser.XMLInputSource)" class="org.apache.xerces.impl.XMLDocumentScannerImpl" />
	<method signature="void setFeature(java.lang.String,boolean)" class="org.apache.xerces.impl.XMLDocumentScannerImpl" />
	<class name="org.apache.xerces.xs.datatypes.XSDecimal" />
	<method signature="byte getByte()" class="org.apache.xerces.xs.datatypes.XSDecimal" />
	<method signature="long getLong()" class="org.apache.xerces.xs.datatypes.XSDecimal" />
	<method signature="int getInt()" class="org.apache.xerces.xs.datatypes.XSDecimal" />
	<method signature="java.math.BigInteger getBigInteger()" class="org.apache.xerces.xs.datatypes.XSDecimal" />
	<method signature="java.math.BigDecimal getBigDecimal()" class="org.apache.xerces.xs.datatypes.XSDecimal" />
	<method signature="short getShort()" class="org.apache.xerces.xs.datatypes.XSDecimal" />
	<class name="org.jfree.data.time.TimeSeriesCollection" />
	<method signature="boolean getDomainIsPointsInTime()" class="org.jfree.data.time.TimeSeriesCollection" />
	<method signature="int[] getSurroundingItems(int,long)" class="org.jfree.data.time.TimeSeriesCollection" />
	<method signature="java.lang.Number getX(int,int)" class="org.jfree.data.time.TimeSeriesCollection" />
	<method signature="java.lang.Number getY(int,int)" class="org.jfree.data.time.TimeSeriesCollection" />
	<method signature="void removeSeries(int)" class="org.jfree.data.time.TimeSeriesCollection" />
	<method signature="void &lt;init&gt;(java.util.TimeZone)" class="org.jfree.data.time.TimeSeriesCollection" />
	<method signature="int getSeriesCount()" class="org.jfree.data.time.TimeSeriesCollection" />
	<method signature="org.jfree.data.Range getDomainBounds(boolean)" class="org.jfree.data.time.TimeSeriesCollection" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.time.TimeSeriesCollection" />
	<method signature="java.lang.Comparable getSeriesKey(int)" class="org.jfree.data.time.TimeSeriesCollection" />
	<method signature="void &lt;init&gt;(org.jfree.data.time.TimeSeries)" class="org.jfree.data.time.TimeSeriesCollection" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.time.TimeSeriesCollection" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.time.TimeSeriesCollection" />
	<method signature="java.lang.Number getEndX(int,int)" class="org.jfree.data.time.TimeSeriesCollection" />
	<method signature="org.jfree.data.DomainOrder getDomainOrder()" class="org.jfree.data.time.TimeSeriesCollection" />
	<method signature="int getItemCount(int)" class="org.jfree.data.time.TimeSeriesCollection" />
	<method signature="java.lang.Number getEndY(int,int)" class="org.jfree.data.time.TimeSeriesCollection" />
	<method signature="double getDomainUpperBound(boolean)" class="org.jfree.data.time.TimeSeriesCollection" />
	<method signature="org.jfree.data.Range getRangeBounds(java.util.List,org.jfree.data.Range,boolean)" class="org.jfree.data.time.TimeSeriesCollection" />
	<method signature="double getXValue(int,int)" class="org.jfree.data.time.TimeSeriesCollection" />
	<method signature="int hashCode()" class="org.jfree.data.time.TimeSeriesCollection" />
	<method signature="int indexOf(org.jfree.data.time.TimeSeries)" class="org.jfree.data.time.TimeSeriesCollection" />
	<method signature="org.jfree.data.Range getRangeBounds(boolean)" class="org.jfree.data.time.TimeSeriesCollection" />
	<method signature="void setDomainIsPointsInTime(boolean)" class="org.jfree.data.time.TimeSeriesCollection" />
	<method signature="org.jfree.data.time.TimePeriodAnchor getXPosition()" class="org.jfree.data.time.TimeSeriesCollection" />
	<method signature="void removeSeries(org.jfree.data.time.TimeSeries)" class="org.jfree.data.time.TimeSeriesCollection" />
	<method signature="double getDomainLowerBound(boolean)" class="org.jfree.data.time.TimeSeriesCollection" />
	<method signature="void setXPosition(org.jfree.data.time.TimePeriodAnchor)" class="org.jfree.data.time.TimeSeriesCollection" />
	<method signature="java.util.List getSeries()" class="org.jfree.data.time.TimeSeriesCollection" />
	<method signature="org.jfree.data.time.TimeSeries getSeries(int)" class="org.jfree.data.time.TimeSeriesCollection" />
	<method signature="void &lt;init&gt;(org.jfree.data.time.TimeSeries,java.util.TimeZone)" class="org.jfree.data.time.TimeSeriesCollection" />
	<method signature="org.jfree.data.time.TimeSeries getSeries(java.lang.Comparable)" class="org.jfree.data.time.TimeSeriesCollection" />
	<method signature="void addSeries(org.jfree.data.time.TimeSeries)" class="org.jfree.data.time.TimeSeriesCollection" />
	<method signature="org.jfree.data.Range getDomainBounds(java.util.List,boolean)" class="org.jfree.data.time.TimeSeriesCollection" />
	<method signature="java.lang.Number getStartX(int,int)" class="org.jfree.data.time.TimeSeriesCollection" />
	<method signature="java.lang.Number getStartY(int,int)" class="org.jfree.data.time.TimeSeriesCollection" />
	<method signature="void removeAllSeries()" class="org.jfree.data.time.TimeSeriesCollection" />
	<class name="freemarker.log.Logger" />
	<method signature="boolean isErrorEnabled()" class="freemarker.log.Logger" />
	<method signature="void warn(java.lang.String)" class="freemarker.log.Logger" />
	<method signature="void error(java.lang.String,java.lang.Throwable)" class="freemarker.log.Logger" />
	<method signature="boolean isDebugEnabled()" class="freemarker.log.Logger" />
	<method signature="void debug(java.lang.String,java.lang.Throwable)" class="freemarker.log.Logger" />
	<method signature="void info(java.lang.String)" class="freemarker.log.Logger" />
	<method signature="boolean isInfoEnabled()" class="freemarker.log.Logger" />
	<method signature="boolean isFatalEnabled()" class="freemarker.log.Logger" />
	<method signature="void info(java.lang.String,java.lang.Throwable)" class="freemarker.log.Logger" />
	<method signature="void debug(java.lang.String)" class="freemarker.log.Logger" />
	<method signature="void &lt;init&gt;()" class="freemarker.log.Logger" />
	<method signature="boolean isWarnEnabled()" class="freemarker.log.Logger" />
	<method signature="void setCategoryPrefix(java.lang.String)" class="freemarker.log.Logger" />
	<method signature="void selectLoggerLibrary(int)" class="freemarker.log.Logger" />
	<method signature="void warn(java.lang.String,java.lang.Throwable)" class="freemarker.log.Logger" />
	<method signature="void error(java.lang.String)" class="freemarker.log.Logger" />
	<method signature="freemarker.log.Logger getLogger(java.lang.String)" class="freemarker.log.Logger" />
	<class name="tourma.views.system.MtRevisions" />
	<method signature="void &lt;init&gt;(java.util.ArrayList,java.util.ArrayList)" class="tourma.views.system.MtRevisions" />
	<method signature="boolean isCellEditable(int,int)" class="tourma.views.system.MtRevisions" />
	<method signature="java.awt.Component getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)" class="tourma.views.system.MtRevisions" />
	<method signature="int getRowCount()" class="tourma.views.system.MtRevisions" />
	<method signature="java.lang.String getColumnName(int)" class="tourma.views.system.MtRevisions" />
	<method signature="java.lang.Class getColumnClass(int)" class="tourma.views.system.MtRevisions" />
	<method signature="java.lang.Object getValueAt(int,int)" class="tourma.views.system.MtRevisions" />
	<method signature="int getColumnCount()" class="tourma.views.system.MtRevisions" />
	<class name="org.jdom2.IllegalDataException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jdom2.IllegalDataException" />
	<class name="org.apache.xerces.stax.events.CharactersImpl" />
	<method signature="boolean isWhiteSpace()" class="org.apache.xerces.stax.events.CharactersImpl" />
	<method signature="boolean isCData()" class="org.apache.xerces.stax.events.CharactersImpl" />
	<method signature="boolean isIgnorableWhiteSpace()" class="org.apache.xerces.stax.events.CharactersImpl" />
	<method signature="void &lt;init&gt;(java.lang.String,int,javax.xml.stream.Location)" class="org.apache.xerces.stax.events.CharactersImpl" />
	<method signature="void writeAsEncodedUnicode(java.io.Writer)" class="org.apache.xerces.stax.events.CharactersImpl" />
	<method signature="java.lang.String getData()" class="org.apache.xerces.stax.events.CharactersImpl" />
	<class name="org.unbescape.json.JsonEscape" />
	<method signature="java.lang.String escapeJson(java.lang.String,org.unbescape.json.JsonEscapeType,org.unbescape.json.JsonEscapeLevel)" class="org.unbescape.json.JsonEscape" />
	<method signature="void unescapeJson(char[],int,int,java.io.Writer)" class="org.unbescape.json.JsonEscape" />
	<method signature="java.lang.String escapeJsonMinimal(java.lang.String)" class="org.unbescape.json.JsonEscape" />
	<method signature="void escapeJson(char[],int,int,java.io.Writer,org.unbescape.json.JsonEscapeType,org.unbescape.json.JsonEscapeLevel)" class="org.unbescape.json.JsonEscape" />
	<method signature="java.lang.String escapeJson(java.lang.String)" class="org.unbescape.json.JsonEscape" />
	<method signature="java.lang.String unescapeJson(java.lang.String)" class="org.unbescape.json.JsonEscape" />
	<method signature="void escapeJsonMinimal(char[],int,int,java.io.Writer)" class="org.unbescape.json.JsonEscape" />
	<method signature="void escapeJson(char[],int,int,java.io.Writer)" class="org.unbescape.json.JsonEscape" />
	<class name="org.jfree.chart.annotations.XYShapeAnnotation" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.annotations.XYShapeAnnotation" />
	<method signature="int hashCode()" class="org.jfree.chart.annotations.XYShapeAnnotation" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.annotations.XYShapeAnnotation" />
	<method signature="void &lt;init&gt;(java.awt.Shape,java.awt.Stroke,java.awt.Paint)" class="org.jfree.chart.annotations.XYShapeAnnotation" />
	<method signature="void &lt;init&gt;(java.awt.Shape)" class="org.jfree.chart.annotations.XYShapeAnnotation" />
	<method signature="void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.annotations.XYShapeAnnotation" />
	<method signature="void &lt;init&gt;(java.awt.Shape,java.awt.Stroke,java.awt.Paint,java.awt.Paint)" class="org.jfree.chart.annotations.XYShapeAnnotation" />
	<class name="freemarker.template.TemplateModelException" />
	<method signature="void &lt;init&gt;(java.lang.Exception)" class="freemarker.template.TemplateModelException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Exception)" class="freemarker.template.TemplateModelException" />
	<method signature="void &lt;init&gt;()" class="freemarker.template.TemplateModelException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="freemarker.template.TemplateModelException" />
	<class name="org.jfree.chart.axis.AxisSpace" />
	<method signature="void ensureAtLeast(org.jfree.chart.axis.AxisSpace)" class="org.jfree.chart.axis.AxisSpace" />
	<method signature="double getRight()" class="org.jfree.chart.axis.AxisSpace" />
	<method signature="int hashCode()" class="org.jfree.chart.axis.AxisSpace" />
	<method signature="void setRight(double)" class="org.jfree.chart.axis.AxisSpace" />
	<method signature="double getTop()" class="org.jfree.chart.axis.AxisSpace" />
	<method signature="java.awt.geom.Rectangle2D expand(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)" class="org.jfree.chart.axis.AxisSpace" />
	<method signature="void setBottom(double)" class="org.jfree.chart.axis.AxisSpace" />
	<method signature="void setTop(double)" class="org.jfree.chart.axis.AxisSpace" />
	<method signature="void ensureAtLeast(double,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.axis.AxisSpace" />
	<method signature="double getLeft()" class="org.jfree.chart.axis.AxisSpace" />
	<method signature="java.awt.geom.Rectangle2D shrink(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)" class="org.jfree.chart.axis.AxisSpace" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.axis.AxisSpace" />
	<method signature="double getBottom()" class="org.jfree.chart.axis.AxisSpace" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.axis.AxisSpace" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.axis.AxisSpace" />
	<method signature="void setLeft(double)" class="org.jfree.chart.axis.AxisSpace" />
	<method signature="java.lang.String toString()" class="org.jfree.chart.axis.AxisSpace" />
	<method signature="java.awt.geom.Rectangle2D reserved(java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.axis.AxisSpace" />
	<method signature="void add(double,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.axis.AxisSpace" />
	<class name="freemarker.core.CommandLine" />
	<method signature="void &lt;init&gt;()" class="freemarker.core.CommandLine" />
	<method signature="void main(java.lang.String[])" class="freemarker.core.CommandLine" />
	<class name="javax.annotation.meta.TypeQualifierValidator" />
	<method signature="javax.annotation.meta.When forConstantValue(java.lang.annotation.Annotation,java.lang.Object)" class="javax.annotation.meta.TypeQualifierValidator" />
	<class name="org.jfree.data.jdbc.JDBCCategoryDataset" />
	<method signature="void &lt;init&gt;(java.sql.Connection)" class="org.jfree.data.jdbc.JDBCCategoryDataset" />
	<method signature="void setTranspose(boolean)" class="org.jfree.data.jdbc.JDBCCategoryDataset" />
	<method signature="void executeQuery(java.lang.String)" class="org.jfree.data.jdbc.JDBCCategoryDataset" />
	<method signature="void executeQuery(java.sql.Connection,java.lang.String)" class="org.jfree.data.jdbc.JDBCCategoryDataset" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.jfree.data.jdbc.JDBCCategoryDataset" />
	<method signature="void &lt;init&gt;(java.sql.Connection,java.lang.String)" class="org.jfree.data.jdbc.JDBCCategoryDataset" />
	<method signature="boolean getTranspose()" class="org.jfree.data.jdbc.JDBCCategoryDataset" />
	<class name="org.jfree.util.BooleanList" />
	<method signature="int hashCode()" class="org.jfree.util.BooleanList" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.util.BooleanList" />
	<method signature="void &lt;init&gt;()" class="org.jfree.util.BooleanList" />
	<method signature="java.lang.Boolean getBoolean(int)" class="org.jfree.util.BooleanList" />
	<method signature="void setBoolean(int,java.lang.Boolean)" class="org.jfree.util.BooleanList" />
	<class name="freemarker.ext.servlet.IncludePage" />
	<method signature="void execute(freemarker.core.Environment,java.util.Map,freemarker.template.TemplateModel[],freemarker.template.TemplateDirectiveBody)" class="freemarker.ext.servlet.IncludePage" />
	<method signature="void &lt;init&gt;(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" class="freemarker.ext.servlet.IncludePage" />
	<class name="org.apache.commons.lang3.RandomUtils" />
	<method signature="byte[] nextBytes(int)" class="org.apache.commons.lang3.RandomUtils" />
	<method signature="long nextLong(long,long)" class="org.apache.commons.lang3.RandomUtils" />
	<method signature="int nextInt(int,int)" class="org.apache.commons.lang3.RandomUtils" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.RandomUtils" />
	<method signature="double nextDouble(double,double)" class="org.apache.commons.lang3.RandomUtils" />
	<method signature="float nextFloat(float,float)" class="org.apache.commons.lang3.RandomUtils" />
	<class name="com.google.zxing.oned.OneDimensionalCodeWriter" />
	<method signature="com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int)" class="com.google.zxing.oned.OneDimensionalCodeWriter" />
	<method signature="com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map)" class="com.google.zxing.oned.OneDimensionalCodeWriter" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.oned.OneDimensionalCodeWriter" />
	<method signature="boolean[] encode(java.lang.String)" class="com.google.zxing.oned.OneDimensionalCodeWriter" />
	<method signature="int getDefaultMargin()" class="com.google.zxing.oned.OneDimensionalCodeWriter" />
	<class name="org.apache.xerces.impl.XMLVersionDetector" />
	<method signature="void startDocumentParsing(org.apache.xerces.impl.XMLEntityHandler,short)" class="org.apache.xerces.impl.XMLVersionDetector" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.XMLVersionDetector" />
	<method signature="short determineDocVersion(org.apache.xerces.xni.parser.XMLInputSource)" class="org.apache.xerces.impl.XMLVersionDetector" />
	<method signature="void reset(org.apache.xerces.xni.parser.XMLComponentManager)" class="org.apache.xerces.impl.XMLVersionDetector" />
	<class name="org.jfree.chart.renderer.category.LineRenderer3D" />
	<method signature="void drawOutline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D)" class="org.jfree.chart.renderer.category.LineRenderer3D" />
	<method signature="void setWallPaint(java.awt.Paint)" class="org.jfree.chart.renderer.category.LineRenderer3D" />
	<method signature="void drawBackground(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D)" class="org.jfree.chart.renderer.category.LineRenderer3D" />
	<method signature="void drawRangeGridline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double)" class="org.jfree.chart.renderer.category.LineRenderer3D" />
	<method signature="void drawDomainGridline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,double)" class="org.jfree.chart.renderer.category.LineRenderer3D" />
	<method signature="double getXOffset()" class="org.jfree.chart.renderer.category.LineRenderer3D" />
	<method signature="void setXOffset(double)" class="org.jfree.chart.renderer.category.LineRenderer3D" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.category.LineRenderer3D" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.category.LineRenderer3D" />
	<method signature="java.awt.Paint getWallPaint()" class="org.jfree.chart.renderer.category.LineRenderer3D" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)" class="org.jfree.chart.renderer.category.LineRenderer3D" />
	<method signature="void setYOffset(double)" class="org.jfree.chart.renderer.category.LineRenderer3D" />
	<method signature="double getYOffset()" class="org.jfree.chart.renderer.category.LineRenderer3D" />
	<method signature="void drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)" class="org.jfree.chart.renderer.category.LineRenderer3D" />
	<class name="org.jdom2.output.support.WalkerTRIM" />
	<method signature="void &lt;init&gt;(java.util.List,org.jdom2.output.support.FormatStack,boolean)" class="org.jdom2.output.support.WalkerTRIM" />
	<class name="org.jfree.ui.Spinner" />
	<method signature="void &lt;init&gt;(int)" class="org.jfree.ui.Spinner" />
	<method signature="void mouseReleased(java.awt.event.MouseEvent)" class="org.jfree.ui.Spinner" />
	<method signature="int getValue()" class="org.jfree.ui.Spinner" />
	<method signature="void mouseClicked(java.awt.event.MouseEvent)" class="org.jfree.ui.Spinner" />
	<method signature="void mouseExited(java.awt.event.MouseEvent)" class="org.jfree.ui.Spinner" />
	<method signature="void mouseEntered(java.awt.event.MouseEvent)" class="org.jfree.ui.Spinner" />
	<method signature="void mousePressed(java.awt.event.MouseEvent)" class="org.jfree.ui.Spinner" />
	<class name="org.jfree.chart.urls.CustomCategoryURLGenerator" />
	<method signature="java.lang.String generateURL(org.jfree.data.category.CategoryDataset,int,int)" class="org.jfree.chart.urls.CustomCategoryURLGenerator" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.urls.CustomCategoryURLGenerator" />
	<method signature="java.lang.String getURL(int,int)" class="org.jfree.chart.urls.CustomCategoryURLGenerator" />
	<method signature="void addURLSeries(java.util.List)" class="org.jfree.chart.urls.CustomCategoryURLGenerator" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.urls.CustomCategoryURLGenerator" />
	<method signature="int getListCount()" class="org.jfree.chart.urls.CustomCategoryURLGenerator" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.urls.CustomCategoryURLGenerator" />
	<method signature="int getURLCount(int)" class="org.jfree.chart.urls.CustomCategoryURLGenerator" />
	<class name="org.apache.wml.dom.WMLImgElementImpl" />
	<method signature="void setAlign(java.lang.String)" class="org.apache.wml.dom.WMLImgElementImpl" />
	<method signature="java.lang.String getXmlLang()" class="org.apache.wml.dom.WMLImgElementImpl" />
	<method signature="java.lang.String getSrc()" class="org.apache.wml.dom.WMLImgElementImpl" />
	<method signature="java.lang.String getLocalSrc()" class="org.apache.wml.dom.WMLImgElementImpl" />
	<method signature="java.lang.String getId()" class="org.apache.wml.dom.WMLImgElementImpl" />
	<method signature="java.lang.String getWidth()" class="org.apache.wml.dom.WMLImgElementImpl" />
	<method signature="java.lang.String getAlign()" class="org.apache.wml.dom.WMLImgElementImpl" />
	<method signature="java.lang.String getHspace()" class="org.apache.wml.dom.WMLImgElementImpl" />
	<method signature="void setId(java.lang.String)" class="org.apache.wml.dom.WMLImgElementImpl" />
	<method signature="java.lang.String getHeight()" class="org.apache.wml.dom.WMLImgElementImpl" />
	<method signature="void setLocalSrc(java.lang.String)" class="org.apache.wml.dom.WMLImgElementImpl" />
	<method signature="void setAlt(java.lang.String)" class="org.apache.wml.dom.WMLImgElementImpl" />
	<method signature="void setXmlLang(java.lang.String)" class="org.apache.wml.dom.WMLImgElementImpl" />
	<method signature="void setVspace(java.lang.String)" class="org.apache.wml.dom.WMLImgElementImpl" />
	<method signature="void setSrc(java.lang.String)" class="org.apache.wml.dom.WMLImgElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.wml.dom.WMLDocumentImpl,java.lang.String)" class="org.apache.wml.dom.WMLImgElementImpl" />
	<method signature="java.lang.String getClassName()" class="org.apache.wml.dom.WMLImgElementImpl" />
	<method signature="java.lang.String getAlt()" class="org.apache.wml.dom.WMLImgElementImpl" />
	<method signature="void setWidth(java.lang.String)" class="org.apache.wml.dom.WMLImgElementImpl" />
	<method signature="void setHeight(java.lang.String)" class="org.apache.wml.dom.WMLImgElementImpl" />
	<method signature="void setHspace(java.lang.String)" class="org.apache.wml.dom.WMLImgElementImpl" />
	<method signature="void setClassName(java.lang.String)" class="org.apache.wml.dom.WMLImgElementImpl" />
	<method signature="java.lang.String getVspace()" class="org.apache.wml.dom.WMLImgElementImpl" />
	<class name="org.jfree.ui.StrokeChooserPanel" />
	<method signature="java.awt.Stroke getSelectedStroke()" class="org.jfree.ui.StrokeChooserPanel" />
	<method signature="void &lt;init&gt;(org.jfree.ui.StrokeSample,org.jfree.ui.StrokeSample[])" class="org.jfree.ui.StrokeChooserPanel" />
	<class name="javax.xml.stream.events.EndDocument" />
	<class name="org.apache.wml.dom.WMLPostfieldElementImpl" />
	<method signature="void setValue(java.lang.String)" class="org.apache.wml.dom.WMLPostfieldElementImpl" />
	<method signature="java.lang.String getName()" class="org.apache.wml.dom.WMLPostfieldElementImpl" />
	<method signature="java.lang.String getValue()" class="org.apache.wml.dom.WMLPostfieldElementImpl" />
	<method signature="void setName(java.lang.String)" class="org.apache.wml.dom.WMLPostfieldElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.wml.dom.WMLDocumentImpl,java.lang.String)" class="org.apache.wml.dom.WMLPostfieldElementImpl" />
	<method signature="java.lang.String getId()" class="org.apache.wml.dom.WMLPostfieldElementImpl" />
	<method signature="java.lang.String getClassName()" class="org.apache.wml.dom.WMLPostfieldElementImpl" />
	<method signature="void setClassName(java.lang.String)" class="org.apache.wml.dom.WMLPostfieldElementImpl" />
	<method signature="void setId(java.lang.String)" class="org.apache.wml.dom.WMLPostfieldElementImpl" />
	<class name="org.jfree.chart.renderer.category.StackedBarRenderer3D" />
	<method signature="void setRenderAsPercentages(boolean)" class="org.jfree.chart.renderer.category.StackedBarRenderer3D" />
	<method signature="int hashCode()" class="org.jfree.chart.renderer.category.StackedBarRenderer3D" />
	<method signature="void &lt;init&gt;(double,double,boolean)" class="org.jfree.chart.renderer.category.StackedBarRenderer3D" />
	<method signature="org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)" class="org.jfree.chart.renderer.category.StackedBarRenderer3D" />
	<method signature="boolean getRenderAsPercentages()" class="org.jfree.chart.renderer.category.StackedBarRenderer3D" />
	<method signature="void setIgnoreZeroValues(boolean)" class="org.jfree.chart.renderer.category.StackedBarRenderer3D" />
	<method signature="boolean getIgnoreZeroValues()" class="org.jfree.chart.renderer.category.StackedBarRenderer3D" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.category.StackedBarRenderer3D" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.category.StackedBarRenderer3D" />
	<method signature="void &lt;init&gt;(boolean)" class="org.jfree.chart.renderer.category.StackedBarRenderer3D" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)" class="org.jfree.chart.renderer.category.StackedBarRenderer3D" />
	<method signature="void &lt;init&gt;(double,double)" class="org.jfree.chart.renderer.category.StackedBarRenderer3D" />
	<class name="org.jfree.chart.annotations.Annotation" />
	<method signature="void removeChangeListener(org.jfree.chart.event.AnnotationChangeListener)" class="org.jfree.chart.annotations.Annotation" />
	<method signature="void addChangeListener(org.jfree.chart.event.AnnotationChangeListener)" class="org.jfree.chart.annotations.Annotation" />
	<class name="javax.xml.bind.util.ValidationEventCollector" />
	<method signature="void reset()" class="javax.xml.bind.util.ValidationEventCollector" />
	<method signature="javax.xml.bind.ValidationEvent[] getEvents()" class="javax.xml.bind.util.ValidationEventCollector" />
	<method signature="void &lt;init&gt;()" class="javax.xml.bind.util.ValidationEventCollector" />
	<method signature="boolean hasEvents()" class="javax.xml.bind.util.ValidationEventCollector" />
	<method signature="boolean handleEvent(javax.xml.bind.ValidationEvent)" class="javax.xml.bind.util.ValidationEventCollector" />
	<class name="tourma.utility.Pair" />
	<method signature="java.lang.Object getSecond()" class="tourma.utility.Pair" />
	<method signature="void setSecond(java.lang.Object)" class="tourma.utility.Pair" />
	<method signature="int hashCode()" class="tourma.utility.Pair" />
	<method signature="boolean equals(java.lang.Object)" class="tourma.utility.Pair" />
	<method signature="void setFirst(java.lang.Object)" class="tourma.utility.Pair" />
	<method signature="void &lt;init&gt;(java.lang.Object,java.lang.Object)" class="tourma.utility.Pair" />
	<method signature="java.lang.String toString()" class="tourma.utility.Pair" />
	<method signature="java.lang.Object getFirst()" class="tourma.utility.Pair" />
	<class name="org.jdom2.output.support.WalkerTRIM_FULL_WHITE" />
	<method signature="void &lt;init&gt;(java.util.List,org.jdom2.output.support.FormatStack,boolean)" class="org.jdom2.output.support.WalkerTRIM_FULL_WHITE" />
	<class name="org.apache.wml.WMLAElement" />
	<method signature="void setHref(java.lang.String)" class="org.apache.wml.WMLAElement" />
	<method signature="java.lang.String getTitle()" class="org.apache.wml.WMLAElement" />
	<method signature="java.lang.String getXmlLang()" class="org.apache.wml.WMLAElement" />
	<method signature="java.lang.String getHref()" class="org.apache.wml.WMLAElement" />
	<method signature="void setXmlLang(java.lang.String)" class="org.apache.wml.WMLAElement" />
	<method signature="java.lang.String getId()" class="org.apache.wml.WMLAElement" />
	<method signature="void setTitle(java.lang.String)" class="org.apache.wml.WMLAElement" />
	<method signature="void setId(java.lang.String)" class="org.apache.wml.WMLAElement" />
	<class name="org.apache.xerces.xs.datatypes.XSFloat" />
	<method signature="float getValue()" class="org.apache.xerces.xs.datatypes.XSFloat" />
	<class name="org.jfree.data.ComparableObjectItem" />
	<method signature="int compareTo(java.lang.Object)" class="org.jfree.data.ComparableObjectItem" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.ComparableObjectItem" />
	<method signature="int hashCode()" class="org.jfree.data.ComparableObjectItem" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.ComparableObjectItem" />
	<method signature="void &lt;init&gt;(java.lang.Comparable,java.lang.Object)" class="org.jfree.data.ComparableObjectItem" />
	<class name="org.apache.xerces.dom.AttributeMap" />
	<method signature="org.w3c.dom.Node removeNamedItem(java.lang.String)" class="org.apache.xerces.dom.AttributeMap" />
	<method signature="org.w3c.dom.Node setNamedItemNS(org.w3c.dom.Node)" class="org.apache.xerces.dom.AttributeMap" />
	<method signature="org.w3c.dom.Node setNamedItem(org.w3c.dom.Node)" class="org.apache.xerces.dom.AttributeMap" />
	<method signature="org.w3c.dom.Node removeNamedItemNS(java.lang.String,java.lang.String)" class="org.apache.xerces.dom.AttributeMap" />
	<method signature="org.apache.xerces.dom.NamedNodeMapImpl cloneMap(org.apache.xerces.dom.NodeImpl)" class="org.apache.xerces.dom.AttributeMap" />
	<class name="com.google.zxing.client.result.VEventResultParser" />
	<method signature="com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result)" class="com.google.zxing.client.result.VEventResultParser" />
	<method signature="com.google.zxing.client.result.CalendarParsedResult parse(com.google.zxing.Result)" class="com.google.zxing.client.result.VEventResultParser" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.client.result.VEventResultParser" />
	<class name="org.apache.xerces.util.DatatypeMessageFormatter" />
	<method signature="java.lang.String formatMessage(java.util.Locale,java.lang.String,java.lang.Object[])" class="org.apache.xerces.util.DatatypeMessageFormatter" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.util.DatatypeMessageFormatter" />
	<class name="org.jfree.chart.title.CompositeTitle" />
	<method signature="void setTitleContainer(org.jfree.chart.block.BlockContainer)" class="org.jfree.chart.title.CompositeTitle" />
	<method signature="java.awt.Paint getBackgroundPaint()" class="org.jfree.chart.title.CompositeTitle" />
	<method signature="org.jfree.ui.Size2D arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" class="org.jfree.chart.title.CompositeTitle" />
	<method signature="org.jfree.chart.block.BlockContainer getContainer()" class="org.jfree.chart.title.CompositeTitle" />
	<method signature="java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)" class="org.jfree.chart.title.CompositeTitle" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.title.CompositeTitle" />
	<method signature="void &lt;init&gt;(org.jfree.chart.block.BlockContainer)" class="org.jfree.chart.title.CompositeTitle" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.title.CompositeTitle" />
	<method signature="void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" class="org.jfree.chart.title.CompositeTitle" />
	<method signature="void setBackgroundPaint(java.awt.Paint)" class="org.jfree.chart.title.CompositeTitle" />
	<class name="org.jfree.base.modules.PackageState" />
	<method signature="void &lt;init&gt;(org.jfree.base.modules.Module)" class="org.jfree.base.modules.PackageState" />
	<method signature="int hashCode()" class="org.jfree.base.modules.PackageState" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.base.modules.PackageState" />
	<method signature="void &lt;init&gt;(org.jfree.base.modules.Module,int)" class="org.jfree.base.modules.PackageState" />
	<method signature="boolean configure(org.jfree.base.modules.SubSystem)" class="org.jfree.base.modules.PackageState" />
	<method signature="int getState()" class="org.jfree.base.modules.PackageState" />
	<method signature="boolean initialize(org.jfree.base.modules.SubSystem)" class="org.jfree.base.modules.PackageState" />
	<method signature="org.jfree.base.modules.Module getModule()" class="org.jfree.base.modules.PackageState" />
	<class name="org.jfree.data.xml.CategoryDatasetHandler" />
	<method signature="void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" class="org.jfree.data.xml.CategoryDatasetHandler" />
	<method signature="void endElement(java.lang.String,java.lang.String,java.lang.String)" class="org.jfree.data.xml.CategoryDatasetHandler" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.xml.CategoryDatasetHandler" />
	<method signature="org.jfree.data.category.CategoryDataset getDataset()" class="org.jfree.data.xml.CategoryDatasetHandler" />
	<method signature="void addItem(java.lang.Comparable,java.lang.Comparable,java.lang.Number)" class="org.jfree.data.xml.CategoryDatasetHandler" />
	<class name="org.w3c.dom.css.CSSPageRule" />
	<method signature="java.lang.String getSelectorText()" class="org.w3c.dom.css.CSSPageRule" />
	<method signature="void setSelectorText(java.lang.String)" class="org.w3c.dom.css.CSSPageRule" />
	<method signature="org.w3c.dom.css.CSSStyleDeclaration getStyle()" class="org.w3c.dom.css.CSSPageRule" />
	<class name="org.jfree.data.time.TimeSeriesTableModel" />
	<method signature="void seriesChanged(org.jfree.data.general.SeriesChangeEvent)" class="org.jfree.data.time.TimeSeriesTableModel" />
	<method signature="void setValueAt(java.lang.Object,int,int)" class="org.jfree.data.time.TimeSeriesTableModel" />
	<method signature="boolean isCellEditable(int,int)" class="org.jfree.data.time.TimeSeriesTableModel" />
	<method signature="void &lt;init&gt;(org.jfree.data.time.TimeSeries)" class="org.jfree.data.time.TimeSeriesTableModel" />
	<method signature="void &lt;init&gt;(org.jfree.data.time.TimeSeries,boolean)" class="org.jfree.data.time.TimeSeriesTableModel" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.time.TimeSeriesTableModel" />
	<method signature="int getRowCount()" class="org.jfree.data.time.TimeSeriesTableModel" />
	<method signature="java.lang.String getColumnName(int)" class="org.jfree.data.time.TimeSeriesTableModel" />
	<method signature="java.lang.Class getColumnClass(int)" class="org.jfree.data.time.TimeSeriesTableModel" />
	<method signature="java.lang.Object getValueAt(int,int)" class="org.jfree.data.time.TimeSeriesTableModel" />
	<method signature="int getColumnCount()" class="org.jfree.data.time.TimeSeriesTableModel" />
	<class name="org.jfree.chart.labels.ItemLabelAnchor" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.labels.ItemLabelAnchor" />
	<method signature="java.lang.String toString()" class="org.jfree.chart.labels.ItemLabelAnchor" />
	<class name="javax.xml.stream.events.ProcessingInstruction" />
	<method signature="java.lang.String getTarget()" class="javax.xml.stream.events.ProcessingInstruction" />
	<method signature="java.lang.String getData()" class="javax.xml.stream.events.ProcessingInstruction" />
	<class name="org.jfree.data.time.TimeSeriesDataItem" />
	<method signature="int compareTo(java.lang.Object)" class="org.jfree.data.time.TimeSeriesDataItem" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.time.TimeSeriesDataItem" />
	<method signature="int hashCode()" class="org.jfree.data.time.TimeSeriesDataItem" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.time.TimeSeriesDataItem" />
	<method signature="java.lang.Number getValue()" class="org.jfree.data.time.TimeSeriesDataItem" />
	<method signature="void &lt;init&gt;(org.jfree.data.time.RegularTimePeriod,double)" class="org.jfree.data.time.TimeSeriesDataItem" />
	<method signature="org.jfree.data.time.RegularTimePeriod getPeriod()" class="org.jfree.data.time.TimeSeriesDataItem" />
	<method signature="void &lt;init&gt;(org.jfree.data.time.RegularTimePeriod,java.lang.Number)" class="org.jfree.data.time.TimeSeriesDataItem" />
	<method signature="void setValue(java.lang.Number)" class="org.jfree.data.time.TimeSeriesDataItem" />
	<class name="tourma.views.fullscreen.JFullScreenMatchs$Animation" />
	<method signature="void &lt;init&gt;(tourma.views.fullscreen.JFullScreenMatchs)" class="tourma.views.fullscreen.JFullScreenMatchs$Animation" />
	<method signature="void run()" class="tourma.views.fullscreen.JFullScreenMatchs$Animation" />
	<method signature="void setSuspended(boolean)" class="tourma.views.fullscreen.JFullScreenMatchs$Animation" />
	<class name="org.apache.xerces.util.SecurityManager" />
	<method signature="int getEntityExpansionLimit()" class="org.apache.xerces.util.SecurityManager" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.util.SecurityManager" />
	<method signature="void setEntityExpansionLimit(int)" class="org.apache.xerces.util.SecurityManager" />
	<method signature="void setMaxOccurNodeLimit(int)" class="org.apache.xerces.util.SecurityManager" />
	<method signature="int getMaxOccurNodeLimit()" class="org.apache.xerces.util.SecurityManager" />
	<class name="org.apache.html.dom.HTMLInputElementImpl" />
	<method signature="boolean getChecked()" class="org.apache.html.dom.HTMLInputElementImpl" />
	<method signature="int getMaxLength()" class="org.apache.html.dom.HTMLInputElementImpl" />
	<method signature="java.lang.String getName()" class="org.apache.html.dom.HTMLInputElementImpl" />
	<method signature="java.lang.String getAccept()" class="org.apache.html.dom.HTMLInputElementImpl" />
	<method signature="void setSize(java.lang.String)" class="org.apache.html.dom.HTMLInputElementImpl" />
	<method signature="boolean getReadOnly()" class="org.apache.html.dom.HTMLInputElementImpl" />
	<method signature="void setReadOnly(boolean)" class="org.apache.html.dom.HTMLInputElementImpl" />
	<method signature="java.lang.String getUseMap()" class="org.apache.html.dom.HTMLInputElementImpl" />
	<method signature="java.lang.String getDefaultValue()" class="org.apache.html.dom.HTMLInputElementImpl" />
	<method signature="boolean getDisabled()" class="org.apache.html.dom.HTMLInputElementImpl" />
	<method signature="int getTabIndex()" class="org.apache.html.dom.HTMLInputElementImpl" />
	<method signature="void setDefaultValue(java.lang.String)" class="org.apache.html.dom.HTMLInputElementImpl" />
	<method signature="void setName(java.lang.String)" class="org.apache.html.dom.HTMLInputElementImpl" />
	<method signature="void click()" class="org.apache.html.dom.HTMLInputElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLInputElementImpl" />
	<method signature="void setDefaultChecked(boolean)" class="org.apache.html.dom.HTMLInputElementImpl" />
	<method signature="void setAccessKey(java.lang.String)" class="org.apache.html.dom.HTMLInputElementImpl" />
	<method signature="void setAlign(java.lang.String)" class="org.apache.html.dom.HTMLInputElementImpl" />
	<method signature="void setValue(java.lang.String)" class="org.apache.html.dom.HTMLInputElementImpl" />
	<method signature="void setMaxLength(int)" class="org.apache.html.dom.HTMLInputElementImpl" />
	<method signature="java.lang.String getSrc()" class="org.apache.html.dom.HTMLInputElementImpl" />
	<method signature="void setAccept(java.lang.String)" class="org.apache.html.dom.HTMLInputElementImpl" />
	<method signature="java.lang.String getAlign()" class="org.apache.html.dom.HTMLInputElementImpl" />
	<method signature="boolean getDefaultChecked()" class="org.apache.html.dom.HTMLInputElementImpl" />
	<method signature="void setTabIndex(int)" class="org.apache.html.dom.HTMLInputElementImpl" />
	<method signature="void setChecked(boolean)" class="org.apache.html.dom.HTMLInputElementImpl" />
	<method signature="void setDisabled(boolean)" class="org.apache.html.dom.HTMLInputElementImpl" />
	<method signature="java.lang.String getSize()" class="org.apache.html.dom.HTMLInputElementImpl" />
	<method signature="void setAlt(java.lang.String)" class="org.apache.html.dom.HTMLInputElementImpl" />
	<method signature="java.lang.String getValue()" class="org.apache.html.dom.HTMLInputElementImpl" />
	<method signature="void blur()" class="org.apache.html.dom.HTMLInputElementImpl" />
	<method signature="void focus()" class="org.apache.html.dom.HTMLInputElementImpl" />
	<method signature="void setSrc(java.lang.String)" class="org.apache.html.dom.HTMLInputElementImpl" />
	<method signature="java.lang.String getType()" class="org.apache.html.dom.HTMLInputElementImpl" />
	<method signature="void setUseMap(java.lang.String)" class="org.apache.html.dom.HTMLInputElementImpl" />
	<method signature="java.lang.String getAlt()" class="org.apache.html.dom.HTMLInputElementImpl" />
	<method signature="void select()" class="org.apache.html.dom.HTMLInputElementImpl" />
	<method signature="java.lang.String getAccessKey()" class="org.apache.html.dom.HTMLInputElementImpl" />
	<class name="org.jfree.chart.axis.DateTickUnitType" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.axis.DateTickUnitType" />
	<method signature="java.lang.String toString()" class="org.jfree.chart.axis.DateTickUnitType" />
	<method signature="int getCalendarField()" class="org.jfree.chart.axis.DateTickUnitType" />
	<class name="org.apache.xerces.impl.xs.traversers.XSDHandler" />
	<method signature="void setDeclPool(org.apache.xerces.impl.xs.XSDeclarationPool)" class="org.apache.xerces.impl.xs.traversers.XSDHandler" />
	<method signature="void reset(org.apache.xerces.xni.parser.XMLComponentManager)" class="org.apache.xerces.impl.xs.traversers.XSDHandler" />
	<method signature="boolean element2Locator(org.w3c.dom.Element,org.apache.xerces.impl.xs.util.SimpleLocator)" class="org.apache.xerces.impl.xs.traversers.XSDHandler" />
	<method signature="org.apache.xerces.impl.xs.SchemaGrammar parseSchema(org.apache.xerces.xni.parser.XMLInputSource,org.apache.xerces.impl.xs.XSDDescription,java.util.Hashtable)" class="org.apache.xerces.impl.xs.traversers.XSDHandler" />
	<method signature="void &lt;init&gt;(org.apache.xerces.impl.xs.XSGrammarBucket)" class="org.apache.xerces.impl.xs.traversers.XSDHandler" />
	<method signature="void setDVFactory(org.apache.xerces.impl.dv.SchemaDVFactory)" class="org.apache.xerces.impl.xs.traversers.XSDHandler" />
	<method signature="java.lang.String schemaDocument2SystemId(org.apache.xerces.impl.xs.traversers.XSDocumentInfo)" class="org.apache.xerces.impl.xs.traversers.XSDHandler" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xs.traversers.XSDHandler" />
	<method signature="org.apache.xerces.impl.xs.util.SimpleLocator element2Locator(org.w3c.dom.Element)" class="org.apache.xerces.impl.xs.traversers.XSDHandler" />
	<method signature="void setGenerateSyntheticAnnotations(boolean)" class="org.apache.xerces.impl.xs.traversers.XSDHandler" />
	<class name="org.w3c.dom.css.RGBColor" />
	<method signature="org.w3c.dom.css.CSSPrimitiveValue getRed()" class="org.w3c.dom.css.RGBColor" />
	<method signature="org.w3c.dom.css.CSSPrimitiveValue getGreen()" class="org.w3c.dom.css.RGBColor" />
	<method signature="org.w3c.dom.css.CSSPrimitiveValue getBlue()" class="org.w3c.dom.css.RGBColor" />
	<class name="org.apache.xerces.dom.DeferredAttrImpl" />
	<method signature="int getNodeIndex()" class="org.apache.xerces.dom.DeferredAttrImpl" />
	<class name="org.apache.xerces.xni.XMLDTDHandler" />
	<method signature="void startAttlist(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDTDHandler" />
	<method signature="void elementDecl(java.lang.String,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDTDHandler" />
	<method signature="void processingInstruction(java.lang.String,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDTDHandler" />
	<method signature="org.apache.xerces.xni.parser.XMLDTDSource getDTDSource()" class="org.apache.xerces.xni.XMLDTDHandler" />
	<method signature="void externalEntityDecl(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDTDHandler" />
	<method signature="void endParameterEntity(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDTDHandler" />
	<method signature="void endAttlist(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDTDHandler" />
	<method signature="void notationDecl(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDTDHandler" />
	<method signature="void startParameterEntity(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDTDHandler" />
	<method signature="void endConditional(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDTDHandler" />
	<method signature="void ignoredCharacters(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDTDHandler" />
	<method signature="void attributeDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDTDHandler" />
	<method signature="void startConditional(short,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDTDHandler" />
	<method signature="void endDTD(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDTDHandler" />
	<method signature="void internalEntityDecl(java.lang.String,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDTDHandler" />
	<method signature="void unparsedEntityDecl(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDTDHandler" />
	<method signature="void textDecl(java.lang.String,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDTDHandler" />
	<method signature="void endExternalSubset(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDTDHandler" />
	<method signature="void comment(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDTDHandler" />
	<method signature="void startExternalSubset(org.apache.xerces.xni.XMLResourceIdentifier,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDTDHandler" />
	<method signature="void setDTDSource(org.apache.xerces.xni.parser.XMLDTDSource)" class="org.apache.xerces.xni.XMLDTDHandler" />
	<method signature="void startDTD(org.apache.xerces.xni.XMLLocator,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDTDHandler" />
	<class name="org.apache.xerces.impl.dv.dtd.DTDDVFactoryImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.dtd.DTDDVFactoryImpl" />
	<method signature="java.util.Hashtable getBuiltInTypes()" class="org.apache.xerces.impl.dv.dtd.DTDDVFactoryImpl" />
	<method signature="org.apache.xerces.impl.dv.DatatypeValidator getBuiltInDV(java.lang.String)" class="org.apache.xerces.impl.dv.dtd.DTDDVFactoryImpl" />
	<class name="org.jfree.chart.labels.PieSectionLabelGenerator" />
	<method signature="java.lang.String generateSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)" class="org.jfree.chart.labels.PieSectionLabelGenerator" />
	<method signature="java.text.AttributedString generateAttributedSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)" class="org.jfree.chart.labels.PieSectionLabelGenerator" />
	<class name="org.jfree.ui.tabbedui.AbstractTabbedUI" />
	<method signature="void setGlobalMenu(boolean)" class="org.jfree.ui.tabbedui.AbstractTabbedUI" />
	<method signature="int getRootEditorCount()" class="org.jfree.ui.tabbedui.AbstractTabbedUI" />
	<method signature="boolean isGlobalMenu()" class="org.jfree.ui.tabbedui.AbstractTabbedUI" />
	<method signature="org.jfree.ui.tabbedui.RootEditor getRootEditor(int)" class="org.jfree.ui.tabbedui.AbstractTabbedUI" />
	<method signature="javax.swing.Action getCloseAction()" class="org.jfree.ui.tabbedui.AbstractTabbedUI" />
	<method signature="void &lt;init&gt;()" class="org.jfree.ui.tabbedui.AbstractTabbedUI" />
	<method signature="javax.swing.JMenuBar getJMenuBar()" class="org.jfree.ui.tabbedui.AbstractTabbedUI" />
	<method signature="void addRootEditor(org.jfree.ui.tabbedui.RootEditor)" class="org.jfree.ui.tabbedui.AbstractTabbedUI" />
	<method signature="void setSelectedEditor(int)" class="org.jfree.ui.tabbedui.AbstractTabbedUI" />
	<method signature="int getSelectedEditor()" class="org.jfree.ui.tabbedui.AbstractTabbedUI" />
	<class name="tourma.views.system.JdgAbout" />
	<method signature="void &lt;init&gt;(java.awt.Frame,boolean)" class="tourma.views.system.JdgAbout" />
	<class name="org.jfree.chart.renderer.category.WaterfallBarRenderer" />
	<method signature="void setPositiveBarPaint(java.awt.Paint)" class="org.jfree.chart.renderer.category.WaterfallBarRenderer" />
	<method signature="java.awt.Paint getFirstBarPaint()" class="org.jfree.chart.renderer.category.WaterfallBarRenderer" />
	<method signature="java.awt.Paint getNegativeBarPaint()" class="org.jfree.chart.renderer.category.WaterfallBarRenderer" />
	<method signature="org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)" class="org.jfree.chart.renderer.category.WaterfallBarRenderer" />
	<method signature="void setFirstBarPaint(java.awt.Paint)" class="org.jfree.chart.renderer.category.WaterfallBarRenderer" />
	<method signature="void setLastBarPaint(java.awt.Paint)" class="org.jfree.chart.renderer.category.WaterfallBarRenderer" />
	<method signature="void setNegativeBarPaint(java.awt.Paint)" class="org.jfree.chart.renderer.category.WaterfallBarRenderer" />
	<method signature="void &lt;init&gt;(java.awt.Paint,java.awt.Paint,java.awt.Paint,java.awt.Paint)" class="org.jfree.chart.renderer.category.WaterfallBarRenderer" />
	<method signature="java.awt.Paint getLastBarPaint()" class="org.jfree.chart.renderer.category.WaterfallBarRenderer" />
	<method signature="java.awt.Paint getPositiveBarPaint()" class="org.jfree.chart.renderer.category.WaterfallBarRenderer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.category.WaterfallBarRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.category.WaterfallBarRenderer" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)" class="org.jfree.chart.renderer.category.WaterfallBarRenderer" />
	<class name="org.apache.xerces.impl.xs.XMLSchemaLoader" />
	<method signature="java.lang.String[] getRecognizedProperties()" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
	<method signature="void setLocale(java.util.Locale)" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
	<method signature="boolean tokenizeSchemaLocationStr(java.lang.String,java.util.Hashtable,java.lang.String)" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
	<method signature="java.lang.Object getParameter(java.lang.String)" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
	<method signature="void loadGrammar(org.apache.xerces.xni.parser.XMLInputSource[])" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
	<method signature="java.lang.Boolean getFeatureDefault(java.lang.String)" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
	<method signature="boolean getFeature(java.lang.String)" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
	<method signature="java.util.Locale getLocale()" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
	<method signature="void setParameter(java.lang.String,java.lang.Object)" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
	<method signature="org.apache.xerces.xs.XSModel loadURIList(org.apache.xerces.xs.StringList)" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
	<method signature="org.w3c.dom.DOMConfiguration getConfig()" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
	<method signature="org.apache.xerces.xni.grammars.Grammar loadGrammar(org.apache.xerces.xni.parser.XMLInputSource)" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
	<method signature="void reset(org.apache.xerces.xni.parser.XMLComponentManager)" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
	<method signature="org.apache.xerces.xni.parser.XMLErrorHandler getErrorHandler()" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable)" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
	<method signature="org.apache.xerces.impl.xs.XSElementDecl getGlobalElementDecl(org.apache.xerces.xni.QName)" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
	<method signature="void setFeature(java.lang.String,boolean)" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
	<method signature="void setEntityResolver(org.apache.xerces.xni.parser.XMLEntityResolver)" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
	<method signature="org.apache.xerces.xs.XSModel load(org.w3c.dom.ls.LSInput)" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
	<method signature="java.lang.String[] getRecognizedFeatures()" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
	<method signature="org.apache.xerces.xs.XSModel loadInputList(org.apache.xerces.xs.LSInputList)" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
	<method signature="boolean canSetParameter(java.lang.String,java.lang.Object)" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
	<method signature="java.lang.Object getPropertyDefault(java.lang.String)" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
	<method signature="org.w3c.dom.DOMStringList getParameterNames()" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
	<method signature="void setErrorHandler(org.apache.xerces.xni.parser.XMLErrorHandler)" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
	<method signature="org.apache.xerces.xni.parser.XMLInputSource resolveDocument(org.apache.xerces.impl.xs.XSDDescription,java.util.Hashtable,org.apache.xerces.xni.parser.XMLEntityResolver)" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
	<method signature="void processExternalHints(java.lang.String,java.lang.String,java.util.Hashtable,org.apache.xerces.impl.XMLErrorReporter)" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
	<method signature="org.apache.xerces.xs.XSModel loadURI(java.lang.String)" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
	<method signature="org.apache.xerces.xni.parser.XMLEntityResolver getEntityResolver()" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
	<method signature="java.lang.Object getProperty(java.lang.String)" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
	<class name="com.hexidec.ekit.component.RelativeImageView" />
	<method signature="java.awt.Shape modelToView(int,java.awt.Shape,javax.swing.text.Position$Bias)" class="com.hexidec.ekit.component.RelativeImageView" />
	<method signature="void mouseClicked(java.awt.event.MouseEvent)" class="com.hexidec.ekit.component.RelativeImageView" />
	<method signature="void paint(java.awt.Graphics,java.awt.Shape)" class="com.hexidec.ekit.component.RelativeImageView" />
	<method signature="void setParent(javax.swing.text.View)" class="com.hexidec.ekit.component.RelativeImageView" />
	<method signature="boolean imageUpdate(java.awt.Image,int,int,int,int,int)" class="com.hexidec.ekit.component.RelativeImageView" />
	<method signature="void mouseReleased(java.awt.event.MouseEvent)" class="com.hexidec.ekit.component.RelativeImageView" />
	<method signature="float getAlignment(int)" class="com.hexidec.ekit.component.RelativeImageView" />
	<method signature="void &lt;init&gt;(javax.swing.text.Element)" class="com.hexidec.ekit.component.RelativeImageView" />
	<method signature="void mouseEntered(java.awt.event.MouseEvent)" class="com.hexidec.ekit.component.RelativeImageView" />
	<method signature="float getPreferredSpan(int)" class="com.hexidec.ekit.component.RelativeImageView" />
	<method signature="void mouseMoved(java.awt.event.MouseEvent)" class="com.hexidec.ekit.component.RelativeImageView" />
	<method signature="int viewToModel(float,float,java.awt.Shape,javax.swing.text.Position$Bias[])" class="com.hexidec.ekit.component.RelativeImageView" />
	<method signature="void mouseDragged(java.awt.event.MouseEvent)" class="com.hexidec.ekit.component.RelativeImageView" />
	<method signature="void mouseExited(java.awt.event.MouseEvent)" class="com.hexidec.ekit.component.RelativeImageView" />
	<method signature="void changedUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)" class="com.hexidec.ekit.component.RelativeImageView" />
	<method signature="javax.swing.text.AttributeSet getAttributes()" class="com.hexidec.ekit.component.RelativeImageView" />
	<method signature="void mousePressed(java.awt.event.MouseEvent)" class="com.hexidec.ekit.component.RelativeImageView" />
	<class name="org.apache.commons.lang3.text.translate.EntityArrays" />
	<method signature="java.lang.String[][] HTML40_EXTENDED_UNESCAPE()" class="org.apache.commons.lang3.text.translate.EntityArrays" />
	<method signature="java.lang.String[][] BASIC_ESCAPE()" class="org.apache.commons.lang3.text.translate.EntityArrays" />
	<method signature="java.lang.String[][] JAVA_CTRL_CHARS_ESCAPE()" class="org.apache.commons.lang3.text.translate.EntityArrays" />
	<method signature="java.lang.String[][] APOS_UNESCAPE()" class="org.apache.commons.lang3.text.translate.EntityArrays" />
	<method signature="java.lang.String[][] APOS_ESCAPE()" class="org.apache.commons.lang3.text.translate.EntityArrays" />
	<method signature="java.lang.String[][] ISO8859_1_ESCAPE()" class="org.apache.commons.lang3.text.translate.EntityArrays" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.text.translate.EntityArrays" />
	<method signature="java.lang.String[][] invert(java.lang.String[][])" class="org.apache.commons.lang3.text.translate.EntityArrays" />
	<method signature="java.lang.String[][] HTML40_EXTENDED_ESCAPE()" class="org.apache.commons.lang3.text.translate.EntityArrays" />
	<method signature="java.lang.String[][] ISO8859_1_UNESCAPE()" class="org.apache.commons.lang3.text.translate.EntityArrays" />
	<method signature="java.lang.String[][] BASIC_UNESCAPE()" class="org.apache.commons.lang3.text.translate.EntityArrays" />
	<method signature="java.lang.String[][] JAVA_CTRL_CHARS_UNESCAPE()" class="org.apache.commons.lang3.text.translate.EntityArrays" />
	<class name="org.jfree.ui.DateChooserPanel" />
	<method signature="java.util.Date getDate()" class="org.jfree.ui.DateChooserPanel" />
	<method signature="int getYearSelectionRange()" class="org.jfree.ui.DateChooserPanel" />
	<method signature="java.awt.Color getChosenMonthButtonColor()" class="org.jfree.ui.DateChooserPanel" />
	<method signature="void setChosenOtherButtonColor(java.awt.Color)" class="org.jfree.ui.DateChooserPanel" />
	<method signature="void setDate(java.util.Date)" class="org.jfree.ui.DateChooserPanel" />
	<method signature="void &lt;init&gt;(java.util.Calendar,boolean)" class="org.jfree.ui.DateChooserPanel" />
	<method signature="void setChosenMonthButtonColor(java.awt.Color)" class="org.jfree.ui.DateChooserPanel" />
	<method signature="void setYearSelectionRange(int)" class="org.jfree.ui.DateChooserPanel" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="org.jfree.ui.DateChooserPanel" />
	<method signature="java.awt.Color getChosenDateButtonColor()" class="org.jfree.ui.DateChooserPanel" />
	<method signature="void &lt;init&gt;()" class="org.jfree.ui.DateChooserPanel" />
	<method signature="java.awt.Color getChosenOtherButtonColor()" class="org.jfree.ui.DateChooserPanel" />
	<method signature="void setChosenDateButtonColor(java.awt.Color)" class="org.jfree.ui.DateChooserPanel" />
	<class name="org.apache.xerces.parsers.NonValidatingConfiguration" />
	<method signature="void setLocale(java.util.Locale)" class="org.apache.xerces.parsers.NonValidatingConfiguration" />
	<method signature="boolean parse(boolean)" class="org.apache.xerces.parsers.NonValidatingConfiguration" />
	<method signature="boolean getFeature(java.lang.String)" class="org.apache.xerces.parsers.NonValidatingConfiguration" />
	<method signature="void parse(org.apache.xerces.xni.parser.XMLInputSource)" class="org.apache.xerces.parsers.NonValidatingConfiguration" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="org.apache.xerces.parsers.NonValidatingConfiguration" />
	<method signature="void cleanup()" class="org.apache.xerces.parsers.NonValidatingConfiguration" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable)" class="org.apache.xerces.parsers.NonValidatingConfiguration" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable,org.apache.xerces.xni.grammars.XMLGrammarPool,org.apache.xerces.xni.parser.XMLComponentManager)" class="org.apache.xerces.parsers.NonValidatingConfiguration" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.parsers.NonValidatingConfiguration" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable,org.apache.xerces.xni.grammars.XMLGrammarPool)" class="org.apache.xerces.parsers.NonValidatingConfiguration" />
	<method signature="void setInputSource(org.apache.xerces.xni.parser.XMLInputSource)" class="org.apache.xerces.parsers.NonValidatingConfiguration" />
	<method signature="void setFeature(java.lang.String,boolean)" class="org.apache.xerces.parsers.NonValidatingConfiguration" />
	<method signature="java.lang.Object getProperty(java.lang.String)" class="org.apache.xerces.parsers.NonValidatingConfiguration" />
	<class name="org.apache.html.dom.HTMLTableRowElementImpl" />
	<method signature="void setAlign(java.lang.String)" class="org.apache.html.dom.HTMLTableRowElementImpl" />
	<method signature="void setBgColor(java.lang.String)" class="org.apache.html.dom.HTMLTableRowElementImpl" />
	<method signature="java.lang.String getCh()" class="org.apache.html.dom.HTMLTableRowElementImpl" />
	<method signature="org.w3c.dom.html.HTMLElement insertCell(int)" class="org.apache.html.dom.HTMLTableRowElementImpl" />
	<method signature="int getRowIndex()" class="org.apache.html.dom.HTMLTableRowElementImpl" />
	<method signature="org.w3c.dom.Node cloneNode(boolean)" class="org.apache.html.dom.HTMLTableRowElementImpl" />
	<method signature="void setVAlign(java.lang.String)" class="org.apache.html.dom.HTMLTableRowElementImpl" />
	<method signature="java.lang.String getAlign()" class="org.apache.html.dom.HTMLTableRowElementImpl" />
	<method signature="void setRowIndex(int)" class="org.apache.html.dom.HTMLTableRowElementImpl" />
	<method signature="void setChOff(java.lang.String)" class="org.apache.html.dom.HTMLTableRowElementImpl" />
	<method signature="int getSectionRowIndex()" class="org.apache.html.dom.HTMLTableRowElementImpl" />
	<method signature="void setCh(java.lang.String)" class="org.apache.html.dom.HTMLTableRowElementImpl" />
	<method signature="org.w3c.dom.html.HTMLCollection getCells()" class="org.apache.html.dom.HTMLTableRowElementImpl" />
	<method signature="void deleteCell(int)" class="org.apache.html.dom.HTMLTableRowElementImpl" />
	<method signature="void setCells(org.w3c.dom.html.HTMLCollection)" class="org.apache.html.dom.HTMLTableRowElementImpl" />
	<method signature="java.lang.String getChOff()" class="org.apache.html.dom.HTMLTableRowElementImpl" />
	<method signature="void setSectionRowIndex(int)" class="org.apache.html.dom.HTMLTableRowElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLTableRowElementImpl" />
	<method signature="java.lang.String getBgColor()" class="org.apache.html.dom.HTMLTableRowElementImpl" />
	<method signature="java.lang.String getVAlign()" class="org.apache.html.dom.HTMLTableRowElementImpl" />
	<class name="com.google.zxing.NotFoundException" />
	<method signature="com.google.zxing.NotFoundException getNotFoundInstance()" class="com.google.zxing.NotFoundException" />
	<class name="org.apache.xerces.dom.ProcessingInstructionImpl" />
	<method signature="short getNodeType()" class="org.apache.xerces.dom.ProcessingInstructionImpl" />
	<method signature="java.lang.String getTarget()" class="org.apache.xerces.dom.ProcessingInstructionImpl" />
	<method signature="java.lang.String getNodeName()" class="org.apache.xerces.dom.ProcessingInstructionImpl" />
	<method signature="java.lang.String getBaseURI()" class="org.apache.xerces.dom.ProcessingInstructionImpl" />
	<method signature="void &lt;init&gt;(org.apache.xerces.dom.CoreDocumentImpl,java.lang.String,java.lang.String)" class="org.apache.xerces.dom.ProcessingInstructionImpl" />
	<class name="org.apache.wml.WMLWmlElement" />
	<method signature="java.lang.String getXmlLang()" class="org.apache.wml.WMLWmlElement" />
	<method signature="void setXmlLang(java.lang.String)" class="org.apache.wml.WMLWmlElement" />
	<class name="javax.xml.datatype.DatatypeFactory" />
	<method signature="javax.xml.datatype.DatatypeFactory newInstance()" class="javax.xml.datatype.DatatypeFactory" />
	<method signature="javax.xml.datatype.XMLGregorianCalendar newXMLGregorianCalendarTime(int,int,int,java.math.BigDecimal,int)" class="javax.xml.datatype.DatatypeFactory" />
	<method signature="javax.xml.datatype.DatatypeFactory newInstance(java.lang.String,java.lang.ClassLoader)" class="javax.xml.datatype.DatatypeFactory" />
	<method signature="javax.xml.datatype.Duration newDurationDayTime(boolean,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)" class="javax.xml.datatype.DatatypeFactory" />
	<method signature="javax.xml.datatype.Duration newDurationDayTime(long)" class="javax.xml.datatype.DatatypeFactory" />
	<method signature="javax.xml.datatype.Duration newDurationYearMonth(long)" class="javax.xml.datatype.DatatypeFactory" />
	<method signature="javax.xml.datatype.Duration newDurationDayTime(java.lang.String)" class="javax.xml.datatype.DatatypeFactory" />
	<method signature="javax.xml.datatype.Duration newDurationYearMonth(java.lang.String)" class="javax.xml.datatype.DatatypeFactory" />
	<method signature="javax.xml.datatype.XMLGregorianCalendar newXMLGregorianCalendar()" class="javax.xml.datatype.DatatypeFactory" />
	<method signature="javax.xml.datatype.XMLGregorianCalendar newXMLGregorianCalendar(java.util.GregorianCalendar)" class="javax.xml.datatype.DatatypeFactory" />
	<method signature="javax.xml.datatype.Duration newDuration(boolean,int,int,int,int,int,int)" class="javax.xml.datatype.DatatypeFactory" />
	<method signature="javax.xml.datatype.Duration newDurationYearMonth(boolean,java.math.BigInteger,java.math.BigInteger)" class="javax.xml.datatype.DatatypeFactory" />
	<method signature="javax.xml.datatype.XMLGregorianCalendar newXMLGregorianCalendar(int,int,int,int,int,int,int,int)" class="javax.xml.datatype.DatatypeFactory" />
	<method signature="javax.xml.datatype.Duration newDuration(long)" class="javax.xml.datatype.DatatypeFactory" />
	<method signature="javax.xml.datatype.XMLGregorianCalendar newXMLGregorianCalendarTime(int,int,int,int)" class="javax.xml.datatype.DatatypeFactory" />
	<method signature="javax.xml.datatype.Duration newDuration(java.lang.String)" class="javax.xml.datatype.DatatypeFactory" />
	<method signature="javax.xml.datatype.Duration newDuration(boolean,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigDecimal)" class="javax.xml.datatype.DatatypeFactory" />
	<method signature="javax.xml.datatype.XMLGregorianCalendar newXMLGregorianCalendar(java.math.BigInteger,int,int,int,int,int,java.math.BigDecimal,int)" class="javax.xml.datatype.DatatypeFactory" />
	<method signature="javax.xml.datatype.XMLGregorianCalendar newXMLGregorianCalendarTime(int,int,int,int,int)" class="javax.xml.datatype.DatatypeFactory" />
	<method signature="javax.xml.datatype.Duration newDurationDayTime(boolean,int,int,int,int)" class="javax.xml.datatype.DatatypeFactory" />
	<method signature="javax.xml.datatype.XMLGregorianCalendar newXMLGregorianCalendarDate(int,int,int,int)" class="javax.xml.datatype.DatatypeFactory" />
	<method signature="javax.xml.datatype.Duration newDurationYearMonth(boolean,int,int)" class="javax.xml.datatype.DatatypeFactory" />
	<method signature="javax.xml.datatype.XMLGregorianCalendar newXMLGregorianCalendar(java.lang.String)" class="javax.xml.datatype.DatatypeFactory" />
	<class name="org.jfree.chart.renderer.xy.XYBarRenderer" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)" class="org.jfree.chart.renderer.xy.XYBarRenderer" />
	<method signature="java.awt.Shape getLegendBar()" class="org.jfree.chart.renderer.xy.XYBarRenderer" />
	<method signature="void setShadowYOffset(double)" class="org.jfree.chart.renderer.xy.XYBarRenderer" />
	<method signature="org.jfree.ui.GradientPaintTransformer getGradientPaintTransformer()" class="org.jfree.chart.renderer.xy.XYBarRenderer" />
	<method signature="double getBase()" class="org.jfree.chart.renderer.xy.XYBarRenderer" />
	<method signature="boolean getUseYInterval()" class="org.jfree.chart.renderer.xy.XYBarRenderer" />
	<method signature="boolean isDrawBarOutline()" class="org.jfree.chart.renderer.xy.XYBarRenderer" />
	<method signature="void setGradientPaintTransformer(org.jfree.ui.GradientPaintTransformer)" class="org.jfree.chart.renderer.xy.XYBarRenderer" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.renderer.xy.XYBarRenderer" />
	<method signature="void &lt;init&gt;(double)" class="org.jfree.chart.renderer.xy.XYBarRenderer" />
	<method signature="org.jfree.chart.LegendItem getLegendItem(int,int)" class="org.jfree.chart.renderer.xy.XYBarRenderer" />
	<method signature="double getShadowXOffset()" class="org.jfree.chart.renderer.xy.XYBarRenderer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.xy.XYBarRenderer" />
	<method signature="void setMargin(double)" class="org.jfree.chart.renderer.xy.XYBarRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.xy.XYBarRenderer" />
	<method signature="void setNegativeItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)" class="org.jfree.chart.renderer.xy.XYBarRenderer" />
	<method signature="org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset)" class="org.jfree.chart.renderer.xy.XYBarRenderer" />
	<method signature="void setLegendBar(java.awt.Shape)" class="org.jfree.chart.renderer.xy.XYBarRenderer" />
	<method signature="boolean getShadowsVisible()" class="org.jfree.chart.renderer.xy.XYBarRenderer" />
	<method signature="org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.renderer.xy.XYBarRenderer" />
	<method signature="boolean getDefaultShadowsVisible()" class="org.jfree.chart.renderer.xy.XYBarRenderer" />
	<method signature="void setBarPainter(org.jfree.chart.renderer.xy.XYBarPainter)" class="org.jfree.chart.renderer.xy.XYBarRenderer" />
	<method signature="double getBarAlignmentFactor()" class="org.jfree.chart.renderer.xy.XYBarRenderer" />
	<method signature="org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)" class="org.jfree.chart.renderer.xy.XYBarRenderer" />
	<method signature="org.jfree.chart.labels.ItemLabelPosition getPositiveItemLabelPositionFallback()" class="org.jfree.chart.renderer.xy.XYBarRenderer" />
	<method signature="void setBase(double)" class="org.jfree.chart.renderer.xy.XYBarRenderer" />
	<method signature="void setUseYInterval(boolean)" class="org.jfree.chart.renderer.xy.XYBarRenderer" />
	<method signature="org.jfree.chart.renderer.xy.XYBarPainter getDefaultBarPainter()" class="org.jfree.chart.renderer.xy.XYBarRenderer" />
	<method signature="void setDefaultBarPainter(org.jfree.chart.renderer.xy.XYBarPainter)" class="org.jfree.chart.renderer.xy.XYBarRenderer" />
	<method signature="void setShadowVisible(boolean)" class="org.jfree.chart.renderer.xy.XYBarRenderer" />
	<method signature="void setPositiveItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)" class="org.jfree.chart.renderer.xy.XYBarRenderer" />
	<method signature="void setDefaultShadowsVisible(boolean)" class="org.jfree.chart.renderer.xy.XYBarRenderer" />
	<method signature="double getMargin()" class="org.jfree.chart.renderer.xy.XYBarRenderer" />
	<method signature="void setDrawBarOutline(boolean)" class="org.jfree.chart.renderer.xy.XYBarRenderer" />
	<method signature="void setShadowXOffset(double)" class="org.jfree.chart.renderer.xy.XYBarRenderer" />
	<method signature="double getShadowYOffset()" class="org.jfree.chart.renderer.xy.XYBarRenderer" />
	<method signature="void setBarAlignmentFactor(double)" class="org.jfree.chart.renderer.xy.XYBarRenderer" />
	<method signature="org.jfree.chart.renderer.xy.XYBarPainter getBarPainter()" class="org.jfree.chart.renderer.xy.XYBarRenderer" />
	<method signature="org.jfree.chart.labels.ItemLabelPosition getNegativeItemLabelPositionFallback()" class="org.jfree.chart.renderer.xy.XYBarRenderer" />
	<class name="org.apache.xerces.impl.xs.models.XSDFACM" />
	<method signature="boolean checkUniqueParticleAttribution(org.apache.xerces.impl.xs.SubstitutionGroupHandler)" class="org.apache.xerces.impl.xs.models.XSDFACM" />
	<method signature="boolean isFinalState(int)" class="org.apache.xerces.impl.xs.models.XSDFACM" />
	<method signature="java.lang.Object oneTransition(org.apache.xerces.xni.QName,int[],org.apache.xerces.impl.xs.SubstitutionGroupHandler)" class="org.apache.xerces.impl.xs.models.XSDFACM" />
	<method signature="boolean endContentModel(int[])" class="org.apache.xerces.impl.xs.models.XSDFACM" />
	<method signature="boolean isCompactedForUPA()" class="org.apache.xerces.impl.xs.models.XSDFACM" />
	<method signature="int[] startContentModel()" class="org.apache.xerces.impl.xs.models.XSDFACM" />
	<method signature="int[] occurenceInfo(int[])" class="org.apache.xerces.impl.xs.models.XSDFACM" />
	<method signature="void &lt;init&gt;(org.apache.xerces.impl.dtd.models.CMNode,int)" class="org.apache.xerces.impl.xs.models.XSDFACM" />
	<method signature="java.util.Vector whatCanGoHere(int[])" class="org.apache.xerces.impl.xs.models.XSDFACM" />
	<method signature="java.lang.String getTermName(int)" class="org.apache.xerces.impl.xs.models.XSDFACM" />
	<class name="org.jfree.chart.axis.Timeline" />
	<method signature="boolean containsDomainRange(java.util.Date,java.util.Date)" class="org.jfree.chart.axis.Timeline" />
	<method signature="long toTimelineValue(java.util.Date)" class="org.jfree.chart.axis.Timeline" />
	<method signature="boolean containsDomainValue(long)" class="org.jfree.chart.axis.Timeline" />
	<method signature="long toMillisecond(long)" class="org.jfree.chart.axis.Timeline" />
	<method signature="long toTimelineValue(long)" class="org.jfree.chart.axis.Timeline" />
	<method signature="boolean containsDomainRange(long,long)" class="org.jfree.chart.axis.Timeline" />
	<method signature="boolean containsDomainValue(java.util.Date)" class="org.jfree.chart.axis.Timeline" />
	<class name="freemarker.template.TemplateNodeModel" />
	<method signature="freemarker.template.TemplateSequenceModel getChildNodes()" class="freemarker.template.TemplateNodeModel" />
	<method signature="java.lang.String getNodeName()" class="freemarker.template.TemplateNodeModel" />
	<method signature="java.lang.String getNodeNamespace()" class="freemarker.template.TemplateNodeModel" />
	<method signature="java.lang.String getNodeType()" class="freemarker.template.TemplateNodeModel" />
	<method signature="freemarker.template.TemplateNodeModel getParentNode()" class="freemarker.template.TemplateNodeModel" />
	<class name="org.apache.commons.lang3.reflect.InheritanceUtils" />
	<method signature="int distance(java.lang.Class,java.lang.Class)" class="org.apache.commons.lang3.reflect.InheritanceUtils" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.reflect.InheritanceUtils" />
	<class name="org.w3c.dom.html.HTMLQuoteElement" />
	<method signature="java.lang.String getCite()" class="org.w3c.dom.html.HTMLQuoteElement" />
	<method signature="void setCite(java.lang.String)" class="org.w3c.dom.html.HTMLQuoteElement" />
	<class name="javax.xml.transform.dom.DOMSource" />
	<method signature="java.lang.String getSystemId()" class="javax.xml.transform.dom.DOMSource" />
	<method signature="void &lt;init&gt;(org.w3c.dom.Node,java.lang.String)" class="javax.xml.transform.dom.DOMSource" />
	<method signature="void setSystemId(java.lang.String)" class="javax.xml.transform.dom.DOMSource" />
	<method signature="void &lt;init&gt;()" class="javax.xml.transform.dom.DOMSource" />
	<method signature="void setNode(org.w3c.dom.Node)" class="javax.xml.transform.dom.DOMSource" />
	<method signature="org.w3c.dom.Node getNode()" class="javax.xml.transform.dom.DOMSource" />
	<method signature="void &lt;init&gt;(org.w3c.dom.Node)" class="javax.xml.transform.dom.DOMSource" />
	<class name="com.google.zxing.common.BitSource" />
	<method signature="int getBitOffset()" class="com.google.zxing.common.BitSource" />
	<method signature="int getByteOffset()" class="com.google.zxing.common.BitSource" />
	<method signature="int readBits(int)" class="com.google.zxing.common.BitSource" />
	<method signature="int available()" class="com.google.zxing.common.BitSource" />
	<method signature="void &lt;init&gt;(byte[])" class="com.google.zxing.common.BitSource" />
	<class name="org.apache.xerces.impl.xs.util.XSInputSource" />
	<method signature="void &lt;init&gt;(org.apache.xerces.impl.xs.SchemaGrammar[])" class="org.apache.xerces.impl.xs.util.XSInputSource" />
	<method signature="org.apache.xerces.impl.xs.SchemaGrammar[] getGrammars()" class="org.apache.xerces.impl.xs.util.XSInputSource" />
	<method signature="void setComponents(org.apache.xerces.xs.XSObject[])" class="org.apache.xerces.impl.xs.util.XSInputSource" />
	<method signature="void setGrammars(org.apache.xerces.impl.xs.SchemaGrammar[])" class="org.apache.xerces.impl.xs.util.XSInputSource" />
	<method signature="void &lt;init&gt;(org.apache.xerces.xs.XSObject[])" class="org.apache.xerces.impl.xs.util.XSInputSource" />
	<method signature="org.apache.xerces.xs.XSObject[] getComponents()" class="org.apache.xerces.impl.xs.util.XSInputSource" />
	<class name="org.apache.xerces.impl.xs.util.XIntPool" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xs.util.XIntPool" />
	<method signature="org.apache.xerces.impl.xs.util.XInt getXInt(int)" class="org.apache.xerces.impl.xs.util.XIntPool" />
	<class name="org.apache.xerces.stax.events.StartDocumentImpl" />
	<method signature="java.lang.String getSystemId()" class="org.apache.xerces.stax.events.StartDocumentImpl" />
	<method signature="java.lang.String getCharacterEncodingScheme()" class="org.apache.xerces.stax.events.StartDocumentImpl" />
	<method signature="java.lang.String getVersion()" class="org.apache.xerces.stax.events.StartDocumentImpl" />
	<method signature="void &lt;init&gt;(java.lang.String,boolean,boolean,boolean,java.lang.String,javax.xml.stream.Location)" class="org.apache.xerces.stax.events.StartDocumentImpl" />
	<method signature="boolean standaloneSet()" class="org.apache.xerces.stax.events.StartDocumentImpl" />
	<method signature="void writeAsEncodedUnicode(java.io.Writer)" class="org.apache.xerces.stax.events.StartDocumentImpl" />
	<method signature="boolean isStandalone()" class="org.apache.xerces.stax.events.StartDocumentImpl" />
	<method signature="boolean encodingSet()" class="org.apache.xerces.stax.events.StartDocumentImpl" />
	<class name="org.apache.xerces.util.SoftReferenceSymbolTable$SREntryData" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.apache.xerces.util.SoftReferenceSymbolTable$SREntryData" />
	<method signature="void &lt;init&gt;(java.lang.String,char[],int,int)" class="org.apache.xerces.util.SoftReferenceSymbolTable$SREntryData" />
	<class name="com.google.zxing.client.result.SMTPResultParser" />
	<method signature="com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result)" class="com.google.zxing.client.result.SMTPResultParser" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.client.result.SMTPResultParser" />
	<method signature="com.google.zxing.client.result.EmailAddressParsedResult parse(com.google.zxing.Result)" class="com.google.zxing.client.result.SMTPResultParser" />
	<class name="freemarker.template.SimpleHash" />
	<method signature="int size()" class="freemarker.template.SimpleHash" />
	<method signature="void put(java.lang.String,boolean)" class="freemarker.template.SimpleHash" />
	<method signature="java.util.Map toMap()" class="freemarker.template.SimpleHash" />
	<method signature="void putAll(java.util.Map)" class="freemarker.template.SimpleHash" />
	<method signature="freemarker.template.TemplateCollectionModel keys()" class="freemarker.template.SimpleHash" />
	<method signature="freemarker.template.TemplateCollectionModel values()" class="freemarker.template.SimpleHash" />
	<method signature="void &lt;init&gt;(java.util.Map,freemarker.template.ObjectWrapper)" class="freemarker.template.SimpleHash" />
	<method signature="void &lt;init&gt;(freemarker.template.ObjectWrapper)" class="freemarker.template.SimpleHash" />
	<method signature="freemarker.template.SimpleHash synchronizedWrapper()" class="freemarker.template.SimpleHash" />
	<method signature="void put(java.lang.String,java.lang.Object)" class="freemarker.template.SimpleHash" />
	<method signature="boolean isEmpty()" class="freemarker.template.SimpleHash" />
	<method signature="void &lt;init&gt;()" class="freemarker.template.SimpleHash" />
	<method signature="void remove(java.lang.String)" class="freemarker.template.SimpleHash" />
	<method signature="java.lang.String toString()" class="freemarker.template.SimpleHash" />
	<method signature="void &lt;init&gt;(java.util.Map)" class="freemarker.template.SimpleHash" />
	<method signature="freemarker.template.TemplateModel get(java.lang.String)" class="freemarker.template.SimpleHash" />
	<class name="org.apache.wml.WMLAnchorElement" />
	<method signature="java.lang.String getTitle()" class="org.apache.wml.WMLAnchorElement" />
	<method signature="java.lang.String getXmlLang()" class="org.apache.wml.WMLAnchorElement" />
	<method signature="void setXmlLang(java.lang.String)" class="org.apache.wml.WMLAnchorElement" />
	<method signature="void setTitle(java.lang.String)" class="org.apache.wml.WMLAnchorElement" />
	<class name="org.apache.xerces.dom.AttrImpl" />
	<method signature="java.lang.String getName()" class="org.apache.xerces.dom.AttrImpl" />
	<method signature="org.w3c.dom.NodeList getChildNodes()" class="org.apache.xerces.dom.AttrImpl" />
	<method signature="org.w3c.dom.Node cloneNode(boolean)" class="org.apache.xerces.dom.AttrImpl" />
	<method signature="org.w3c.dom.Element getOwnerElement()" class="org.apache.xerces.dom.AttrImpl" />
	<method signature="void setReadOnly(boolean,boolean)" class="org.apache.xerces.dom.AttrImpl" />
	<method signature="void setType(java.lang.Object)" class="org.apache.xerces.dom.AttrImpl" />
	<method signature="int getLength()" class="org.apache.xerces.dom.AttrImpl" />
	<method signature="org.w3c.dom.Node getLastChild()" class="org.apache.xerces.dom.AttrImpl" />
	<method signature="org.w3c.dom.Node item(int)" class="org.apache.xerces.dom.AttrImpl" />
	<method signature="org.w3c.dom.Node insertBefore(org.w3c.dom.Node,org.w3c.dom.Node)" class="org.apache.xerces.dom.AttrImpl" />
	<method signature="boolean isEqualNode(org.w3c.dom.Node)" class="org.apache.xerces.dom.AttrImpl" />
	<method signature="java.lang.String getTypeNamespace()" class="org.apache.xerces.dom.AttrImpl" />
	<method signature="java.lang.String getTypeName()" class="org.apache.xerces.dom.AttrImpl" />
	<method signature="short getNodeType()" class="org.apache.xerces.dom.AttrImpl" />
	<method signature="org.w3c.dom.TypeInfo getSchemaTypeInfo()" class="org.apache.xerces.dom.AttrImpl" />
	<method signature="void setValue(java.lang.String)" class="org.apache.xerces.dom.AttrImpl" />
	<method signature="void setNodeValue(java.lang.String)" class="org.apache.xerces.dom.AttrImpl" />
	<method signature="void setSpecified(boolean)" class="org.apache.xerces.dom.AttrImpl" />
	<method signature="boolean isId()" class="org.apache.xerces.dom.AttrImpl" />
	<method signature="java.lang.String getNodeName()" class="org.apache.xerces.dom.AttrImpl" />
	<method signature="org.w3c.dom.Node removeChild(org.w3c.dom.Node)" class="org.apache.xerces.dom.AttrImpl" />
	<method signature="boolean isDerivedFrom(java.lang.String,java.lang.String,int)" class="org.apache.xerces.dom.AttrImpl" />
	<method signature="boolean getSpecified()" class="org.apache.xerces.dom.AttrImpl" />
	<method signature="void normalize()" class="org.apache.xerces.dom.AttrImpl" />
	<method signature="java.lang.String getNodeValue()" class="org.apache.xerces.dom.AttrImpl" />
	<method signature="java.lang.String getValue()" class="org.apache.xerces.dom.AttrImpl" />
	<method signature="org.w3c.dom.Element getElement()" class="org.apache.xerces.dom.AttrImpl" />
	<method signature="java.lang.String toString()" class="org.apache.xerces.dom.AttrImpl" />
	<method signature="org.w3c.dom.Node getFirstChild()" class="org.apache.xerces.dom.AttrImpl" />
	<method signature="void setIdAttribute(boolean)" class="org.apache.xerces.dom.AttrImpl" />
	<method signature="org.w3c.dom.Node replaceChild(org.w3c.dom.Node,org.w3c.dom.Node)" class="org.apache.xerces.dom.AttrImpl" />
	<method signature="boolean hasChildNodes()" class="org.apache.xerces.dom.AttrImpl" />
	<class name="org.jfree.chart.event.AxisChangeListener" />
	<method signature="void axisChanged(org.jfree.chart.event.AxisChangeEvent)" class="org.jfree.chart.event.AxisChangeListener" />
	<class name="com.toedter.calendar.JCalendar" />
	<method signature="void setMaxSelectableDate(java.util.Date)" class="com.toedter.calendar.JCalendar" />
	<method signature="void setSundayForeground(java.awt.Color)" class="com.toedter.calendar.JCalendar" />
	<method signature="java.util.Locale getLocale()" class="com.toedter.calendar.JCalendar" />
	<method signature="void &lt;init&gt;(java.util.Calendar)" class="com.toedter.calendar.JCalendar" />
	<method signature="com.toedter.calendar.JDayChooser getDayChooser()" class="com.toedter.calendar.JCalendar" />
	<method signature="boolean isEnabled()" class="com.toedter.calendar.JCalendar" />
	<method signature="void &lt;init&gt;(java.util.Date)" class="com.toedter.calendar.JCalendar" />
	<method signature="com.toedter.calendar.JMonthChooser getMonthChooser()" class="com.toedter.calendar.JCalendar" />
	<method signature="void setCalendar(java.util.Calendar)" class="com.toedter.calendar.JCalendar" />
	<method signature="void &lt;init&gt;()" class="com.toedter.calendar.JCalendar" />
	<method signature="void setWeekdayForeground(java.awt.Color)" class="com.toedter.calendar.JCalendar" />
	<method signature="void setDecorationBordersVisible(boolean)" class="com.toedter.calendar.JCalendar" />
	<method signature="boolean isDecorationBordersVisible()" class="com.toedter.calendar.JCalendar" />
	<method signature="void setDecorationBackgroundVisible(boolean)" class="com.toedter.calendar.JCalendar" />
	<method signature="java.awt.Color getWeekdayForeground()" class="com.toedter.calendar.JCalendar" />
	<method signature="void setSelectableDateRange(java.util.Date,java.util.Date)" class="com.toedter.calendar.JCalendar" />
	<method signature="java.util.Date getMaxSelectableDate()" class="com.toedter.calendar.JCalendar" />
	<method signature="boolean isNullDateButtonVisible()" class="com.toedter.calendar.JCalendar" />
	<method signature="void setMinSelectableDate(java.util.Date)" class="com.toedter.calendar.JCalendar" />
	<method signature="void &lt;init&gt;(java.util.Date,java.util.Locale,boolean,boolean)" class="com.toedter.calendar.JCalendar" />
	<method signature="java.util.Date getMinSelectableDate()" class="com.toedter.calendar.JCalendar" />
	<method signature="void setNullDateButtonVisible(boolean)" class="com.toedter.calendar.JCalendar" />
	<method signature="void &lt;init&gt;(java.util.Date,boolean)" class="com.toedter.calendar.JCalendar" />
	<method signature="void setWeekOfYearVisible(boolean)" class="com.toedter.calendar.JCalendar" />
	<method signature="void setDecorationBackgroundColor(java.awt.Color)" class="com.toedter.calendar.JCalendar" />
	<method signature="void setLocale(java.util.Locale)" class="com.toedter.calendar.JCalendar" />
	<method signature="java.util.Date getDate()" class="com.toedter.calendar.JCalendar" />
	<method signature="void setTodayButtonVisible(boolean)" class="com.toedter.calendar.JCalendar" />
	<method signature="void setEnabled(boolean)" class="com.toedter.calendar.JCalendar" />
	<method signature="void setDate(java.util.Date)" class="com.toedter.calendar.JCalendar" />
	<method signature="void &lt;init&gt;(java.util.Date,java.util.Locale)" class="com.toedter.calendar.JCalendar" />
	<method signature="void propertyChange(java.beans.PropertyChangeEvent)" class="com.toedter.calendar.JCalendar" />
	<method signature="java.util.Calendar getCalendar()" class="com.toedter.calendar.JCalendar" />
	<method signature="void setNullDateButtonText(java.lang.String)" class="com.toedter.calendar.JCalendar" />
	<method signature="void &lt;init&gt;(java.util.Locale)" class="com.toedter.calendar.JCalendar" />
	<method signature="com.toedter.calendar.JYearChooser getYearChooser()" class="com.toedter.calendar.JCalendar" />
	<method signature="java.awt.Color getSundayForeground()" class="com.toedter.calendar.JCalendar" />
	<method signature="java.awt.Color getDecorationBackgroundColor()" class="com.toedter.calendar.JCalendar" />
	<method signature="boolean isDecorationBackgroundVisible()" class="com.toedter.calendar.JCalendar" />
	<method signature="void main(java.lang.String[])" class="com.toedter.calendar.JCalendar" />
	<method signature="void setFont(java.awt.Font)" class="com.toedter.calendar.JCalendar" />
	<method signature="java.lang.String getTodayButtonText()" class="com.toedter.calendar.JCalendar" />
	<method signature="void &lt;init&gt;(boolean)" class="com.toedter.calendar.JCalendar" />
	<method signature="boolean isWeekOfYearVisible()" class="com.toedter.calendar.JCalendar" />
	<method signature="void setBackground(java.awt.Color)" class="com.toedter.calendar.JCalendar" />
	<method signature="void setTodayButtonText(java.lang.String)" class="com.toedter.calendar.JCalendar" />
	<method signature="void &lt;init&gt;(java.util.Locale,boolean)" class="com.toedter.calendar.JCalendar" />
	<method signature="java.lang.String getNullDateButtonText()" class="com.toedter.calendar.JCalendar" />
	<method signature="boolean isTodayButtonVisible()" class="com.toedter.calendar.JCalendar" />
	<method signature="void setMaxDayCharacters(int)" class="com.toedter.calendar.JCalendar" />
	<method signature="void setForeground(java.awt.Color)" class="com.toedter.calendar.JCalendar" />
	<method signature="int getMaxDayCharacters()" class="com.toedter.calendar.JCalendar" />
	<class name="org.jfree.data.time.Quarter" />
	<method signature="int compareTo(java.lang.Object)" class="org.jfree.data.time.Quarter" />
	<method signature="int getYearValue()" class="org.jfree.data.time.Quarter" />
	<method signature="int getQuarter()" class="org.jfree.data.time.Quarter" />
	<method signature="int hashCode()" class="org.jfree.data.time.Quarter" />
	<method signature="void &lt;init&gt;(java.util.Date,java.util.TimeZone)" class="org.jfree.data.time.Quarter" />
	<method signature="org.jfree.data.time.RegularTimePeriod previous()" class="org.jfree.data.time.Quarter" />
	<method signature="long getLastMillisecond()" class="org.jfree.data.time.Quarter" />
	<method signature="org.jfree.data.time.RegularTimePeriod next()" class="org.jfree.data.time.Quarter" />
	<method signature="long getLastMillisecond(java.util.Calendar)" class="org.jfree.data.time.Quarter" />
	<method signature="org.jfree.data.time.Quarter parseQuarter(java.lang.String)" class="org.jfree.data.time.Quarter" />
	<method signature="void &lt;init&gt;(int,int)" class="org.jfree.data.time.Quarter" />
	<method signature="void &lt;init&gt;(int,org.jfree.data.time.Year)" class="org.jfree.data.time.Quarter" />
	<method signature="org.jfree.data.time.Year getYear()" class="org.jfree.data.time.Quarter" />
	<method signature="void &lt;init&gt;(java.util.Date)" class="org.jfree.data.time.Quarter" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.time.Quarter" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.time.Quarter" />
	<method signature="long getFirstMillisecond()" class="org.jfree.data.time.Quarter" />
	<method signature="void peg(java.util.Calendar)" class="org.jfree.data.time.Quarter" />
	<method signature="void &lt;init&gt;(java.util.Date,java.util.TimeZone,java.util.Locale)" class="org.jfree.data.time.Quarter" />
	<method signature="java.lang.String toString()" class="org.jfree.data.time.Quarter" />
	<method signature="long getFirstMillisecond(java.util.Calendar)" class="org.jfree.data.time.Quarter" />
	<method signature="long getSerialIndex()" class="org.jfree.data.time.Quarter" />
	<class name="org.jdom2.input.sax.DefaultSAXHandlerFactory" />
	<method signature="org.jdom2.input.sax.SAXHandler createSAXHandler(org.jdom2.JDOMFactory)" class="org.jdom2.input.sax.DefaultSAXHandlerFactory" />
	<method signature="void &lt;init&gt;()" class="org.jdom2.input.sax.DefaultSAXHandlerFactory" />
	<class name="org.jfree.data.KeyedValueComparatorType" />
	<method signature="int hashCode()" class="org.jfree.data.KeyedValueComparatorType" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.KeyedValueComparatorType" />
	<method signature="java.lang.String toString()" class="org.jfree.data.KeyedValueComparatorType" />
	<class name="org.jfree.chart.needle.LongNeedle" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.needle.LongNeedle" />
	<method signature="int hashCode()" class="org.jfree.chart.needle.LongNeedle" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.needle.LongNeedle" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.needle.LongNeedle" />
	<class name="org.jfree.chart.labels.StandardXYItemLabelGenerator" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.labels.StandardXYItemLabelGenerator" />
	<method signature="void &lt;init&gt;(java.lang.String,java.text.DateFormat,java.text.NumberFormat)" class="org.jfree.chart.labels.StandardXYItemLabelGenerator" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.labels.StandardXYItemLabelGenerator" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.labels.StandardXYItemLabelGenerator" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.chart.labels.StandardXYItemLabelGenerator" />
	<method signature="void &lt;init&gt;(java.lang.String,java.text.DateFormat,java.text.DateFormat)" class="org.jfree.chart.labels.StandardXYItemLabelGenerator" />
	<method signature="void &lt;init&gt;(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" class="org.jfree.chart.labels.StandardXYItemLabelGenerator" />
	<method signature="void &lt;init&gt;(java.lang.String,java.text.NumberFormat,java.text.DateFormat)" class="org.jfree.chart.labels.StandardXYItemLabelGenerator" />
	<method signature="java.lang.String generateLabel(org.jfree.data.xy.XYDataset,int,int)" class="org.jfree.chart.labels.StandardXYItemLabelGenerator" />
	<class name="org.jfree.data.time.TimePeriod" />
	<method signature="java.util.Date getEnd()" class="org.jfree.data.time.TimePeriod" />
	<method signature="java.util.Date getStart()" class="org.jfree.data.time.TimePeriod" />
	<class name="org.jfree.chart.annotations.XYAnnotationBoundsInfo" />
	<method signature="org.jfree.data.Range getXRange()" class="org.jfree.chart.annotations.XYAnnotationBoundsInfo" />
	<method signature="boolean getIncludeInDataBounds()" class="org.jfree.chart.annotations.XYAnnotationBoundsInfo" />
	<method signature="org.jfree.data.Range getYRange()" class="org.jfree.chart.annotations.XYAnnotationBoundsInfo" />
	<class name="javax.xml.stream.util.EventReaderDelegate" />
	<method signature="javax.xml.stream.events.XMLEvent nextEvent()" class="javax.xml.stream.util.EventReaderDelegate" />
	<method signature="void close()" class="javax.xml.stream.util.EventReaderDelegate" />
	<method signature="void setParent(javax.xml.stream.XMLEventReader)" class="javax.xml.stream.util.EventReaderDelegate" />
	<method signature="java.lang.Object next()" class="javax.xml.stream.util.EventReaderDelegate" />
	<method signature="javax.xml.stream.events.XMLEvent nextTag()" class="javax.xml.stream.util.EventReaderDelegate" />
	<method signature="javax.xml.stream.XMLEventReader getParent()" class="javax.xml.stream.util.EventReaderDelegate" />
	<method signature="java.lang.String getElementText()" class="javax.xml.stream.util.EventReaderDelegate" />
	<method signature="javax.xml.stream.events.XMLEvent peek()" class="javax.xml.stream.util.EventReaderDelegate" />
	<method signature="void remove()" class="javax.xml.stream.util.EventReaderDelegate" />
	<method signature="void &lt;init&gt;()" class="javax.xml.stream.util.EventReaderDelegate" />
	<method signature="boolean hasNext()" class="javax.xml.stream.util.EventReaderDelegate" />
	<method signature="void &lt;init&gt;(javax.xml.stream.XMLEventReader)" class="javax.xml.stream.util.EventReaderDelegate" />
	<method signature="java.lang.Object getProperty(java.lang.String)" class="javax.xml.stream.util.EventReaderDelegate" />
	<class name="org.apache.commons.lang3.reflect.Typed" />
	<method signature="java.lang.reflect.Type getType()" class="org.apache.commons.lang3.reflect.Typed" />
	<class name="org.apache.xerces.jaxp.validation.XMLSchemaFactory" />
	<method signature="void setResourceResolver(org.w3c.dom.ls.LSResourceResolver)" class="org.apache.xerces.jaxp.validation.XMLSchemaFactory" />
	<method signature="org.xml.sax.ErrorHandler getErrorHandler()" class="org.apache.xerces.jaxp.validation.XMLSchemaFactory" />
	<method signature="boolean getFeature(java.lang.String)" class="org.apache.xerces.jaxp.validation.XMLSchemaFactory" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="org.apache.xerces.jaxp.validation.XMLSchemaFactory" />
	<method signature="boolean isSchemaLanguageSupported(java.lang.String)" class="org.apache.xerces.jaxp.validation.XMLSchemaFactory" />
	<method signature="javax.xml.validation.Schema newSchema()" class="org.apache.xerces.jaxp.validation.XMLSchemaFactory" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.jaxp.validation.XMLSchemaFactory" />
	<method signature="javax.xml.validation.Schema newSchema(org.apache.xerces.xni.grammars.XMLGrammarPool)" class="org.apache.xerces.jaxp.validation.XMLSchemaFactory" />
	<method signature="javax.xml.validation.Schema newSchema(javax.xml.transform.Source[])" class="org.apache.xerces.jaxp.validation.XMLSchemaFactory" />
	<method signature="org.w3c.dom.ls.LSResourceResolver getResourceResolver()" class="org.apache.xerces.jaxp.validation.XMLSchemaFactory" />
	<method signature="void setFeature(java.lang.String,boolean)" class="org.apache.xerces.jaxp.validation.XMLSchemaFactory" />
	<method signature="void setErrorHandler(org.xml.sax.ErrorHandler)" class="org.apache.xerces.jaxp.validation.XMLSchemaFactory" />
	<method signature="java.lang.Object getProperty(java.lang.String)" class="org.apache.xerces.jaxp.validation.XMLSchemaFactory" />
	<class name="org.apache.xerces.util.ShadowedSymbolTable" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable)" class="org.apache.xerces.util.ShadowedSymbolTable" />
	<method signature="int hash(char[],int,int)" class="org.apache.xerces.util.ShadowedSymbolTable" />
	<method signature="java.lang.String addSymbol(char[],int,int)" class="org.apache.xerces.util.ShadowedSymbolTable" />
	<method signature="int hash(java.lang.String)" class="org.apache.xerces.util.ShadowedSymbolTable" />
	<method signature="java.lang.String addSymbol(java.lang.String)" class="org.apache.xerces.util.ShadowedSymbolTable" />
	<class name="org.jfree.chart.imagemap.StandardToolTipTagFragmentGenerator" />
	<method signature="java.lang.String generateToolTipFragment(java.lang.String)" class="org.jfree.chart.imagemap.StandardToolTipTagFragmentGenerator" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.imagemap.StandardToolTipTagFragmentGenerator" />
	<class name="freemarker.cache.NullCacheStorage" />
	<method signature="void clear()" class="freemarker.cache.NullCacheStorage" />
	<method signature="void put(java.lang.Object,java.lang.Object)" class="freemarker.cache.NullCacheStorage" />
	<method signature="void &lt;init&gt;()" class="freemarker.cache.NullCacheStorage" />
	<method signature="boolean isConcurrent()" class="freemarker.cache.NullCacheStorage" />
	<method signature="java.lang.Object get(java.lang.Object)" class="freemarker.cache.NullCacheStorage" />
	<method signature="void remove(java.lang.Object)" class="freemarker.cache.NullCacheStorage" />
	<class name="org.apache.xerces.impl.xs.identity.Field$XPath" />
	<method signature="void &lt;init&gt;(java.lang.String,org.apache.xerces.util.SymbolTable,org.apache.xerces.xni.NamespaceContext)" class="org.apache.xerces.impl.xs.identity.Field$XPath" />
	<class name="org.jdom2.output.support.DOMOutputProcessor" />
	<method signature="java.util.List process(org.w3c.dom.Document,org.jdom2.output.Format,java.util.List)" class="org.jdom2.output.support.DOMOutputProcessor" />
	<method signature="org.w3c.dom.Text process(org.w3c.dom.Document,org.jdom2.output.Format,org.jdom2.Text)" class="org.jdom2.output.support.DOMOutputProcessor" />
	<method signature="org.w3c.dom.Element process(org.w3c.dom.Document,org.jdom2.output.Format,org.jdom2.Element)" class="org.jdom2.output.support.DOMOutputProcessor" />
	<method signature="org.w3c.dom.Attr process(org.w3c.dom.Document,org.jdom2.output.Format,org.jdom2.Attribute)" class="org.jdom2.output.support.DOMOutputProcessor" />
	<method signature="org.w3c.dom.ProcessingInstruction process(org.w3c.dom.Document,org.jdom2.output.Format,org.jdom2.ProcessingInstruction)" class="org.jdom2.output.support.DOMOutputProcessor" />
	<method signature="org.w3c.dom.CDATASection process(org.w3c.dom.Document,org.jdom2.output.Format,org.jdom2.CDATA)" class="org.jdom2.output.support.DOMOutputProcessor" />
	<method signature="org.w3c.dom.Document process(org.w3c.dom.Document,org.jdom2.output.Format,org.jdom2.Document)" class="org.jdom2.output.support.DOMOutputProcessor" />
	<method signature="org.w3c.dom.Comment process(org.w3c.dom.Document,org.jdom2.output.Format,org.jdom2.Comment)" class="org.jdom2.output.support.DOMOutputProcessor" />
	<method signature="org.w3c.dom.EntityReference process(org.w3c.dom.Document,org.jdom2.output.Format,org.jdom2.EntityRef)" class="org.jdom2.output.support.DOMOutputProcessor" />
	<class name="org.jfree.data.xy.DefaultTableXYDataset" />
	<method signature="java.lang.Number getX(int,int)" class="org.jfree.data.xy.DefaultTableXYDataset" />
	<method signature="java.lang.Number getY(int,int)" class="org.jfree.data.xy.DefaultTableXYDataset" />
	<method signature="void removeSeries(int)" class="org.jfree.data.xy.DefaultTableXYDataset" />
	<method signature="int getSeriesCount()" class="org.jfree.data.xy.DefaultTableXYDataset" />
	<method signature="org.jfree.data.xy.XYSeries getSeries(int)" class="org.jfree.data.xy.DefaultTableXYDataset" />
	<method signature="void prune()" class="org.jfree.data.xy.DefaultTableXYDataset" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.xy.DefaultTableXYDataset" />
	<method signature="org.jfree.data.Range getDomainBounds(boolean)" class="org.jfree.data.xy.DefaultTableXYDataset" />
	<method signature="java.lang.Comparable getSeriesKey(int)" class="org.jfree.data.xy.DefaultTableXYDataset" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.xy.DefaultTableXYDataset" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.xy.DefaultTableXYDataset" />
	<method signature="java.lang.Number getEndX(int,int)" class="org.jfree.data.xy.DefaultTableXYDataset" />
	<method signature="void &lt;init&gt;(boolean)" class="org.jfree.data.xy.DefaultTableXYDataset" />
	<method signature="void updateXPoints()" class="org.jfree.data.xy.DefaultTableXYDataset" />
	<method signature="int getItemCount(int)" class="org.jfree.data.xy.DefaultTableXYDataset" />
	<method signature="java.lang.Number getEndY(int,int)" class="org.jfree.data.xy.DefaultTableXYDataset" />
	<method signature="double getDomainUpperBound(boolean)" class="org.jfree.data.xy.DefaultTableXYDataset" />
	<method signature="double getIntervalPositionFactor()" class="org.jfree.data.xy.DefaultTableXYDataset" />
	<method signature="void seriesChanged(org.jfree.data.general.SeriesChangeEvent)" class="org.jfree.data.xy.DefaultTableXYDataset" />
	<method signature="int hashCode()" class="org.jfree.data.xy.DefaultTableXYDataset" />
	<method signature="boolean isAutoPrune()" class="org.jfree.data.xy.DefaultTableXYDataset" />
	<method signature="void removeAllValuesForX(java.lang.Number)" class="org.jfree.data.xy.DefaultTableXYDataset" />
	<method signature="void setIntervalPositionFactor(double)" class="org.jfree.data.xy.DefaultTableXYDataset" />
	<method signature="void setIntervalWidth(double)" class="org.jfree.data.xy.DefaultTableXYDataset" />
	<method signature="void removeSeries(org.jfree.data.xy.XYSeries)" class="org.jfree.data.xy.DefaultTableXYDataset" />
	<method signature="double getDomainLowerBound(boolean)" class="org.jfree.data.xy.DefaultTableXYDataset" />
	<method signature="double getIntervalWidth()" class="org.jfree.data.xy.DefaultTableXYDataset" />
	<method signature="int getItemCount()" class="org.jfree.data.xy.DefaultTableXYDataset" />
	<method signature="void setAutoWidth(boolean)" class="org.jfree.data.xy.DefaultTableXYDataset" />
	<method signature="java.lang.Number getStartX(int,int)" class="org.jfree.data.xy.DefaultTableXYDataset" />
	<method signature="void addSeries(org.jfree.data.xy.XYSeries)" class="org.jfree.data.xy.DefaultTableXYDataset" />
	<method signature="java.lang.Number getStartY(int,int)" class="org.jfree.data.xy.DefaultTableXYDataset" />
	<method signature="boolean isAutoWidth()" class="org.jfree.data.xy.DefaultTableXYDataset" />
	<method signature="void removeAllSeries()" class="org.jfree.data.xy.DefaultTableXYDataset" />
	<class name="com.google.zxing.oned.Code128Reader" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.oned.Code128Reader" />
	<method signature="com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map)" class="com.google.zxing.oned.Code128Reader" />
	<class name="org.w3c.dom.Document" />
	<method signature="org.w3c.dom.Comment createComment(java.lang.String)" class="org.w3c.dom.Document" />
	<method signature="org.w3c.dom.DocumentType getDoctype()" class="org.w3c.dom.Document" />
	<method signature="org.w3c.dom.EntityReference createEntityReference(java.lang.String)" class="org.w3c.dom.Document" />
	<method signature="java.lang.String getXmlVersion()" class="org.w3c.dom.Document" />
	<method signature="org.w3c.dom.Element createElementNS(java.lang.String,java.lang.String)" class="org.w3c.dom.Document" />
	<method signature="boolean getStrictErrorChecking()" class="org.w3c.dom.Document" />
	<method signature="void normalizeDocument()" class="org.w3c.dom.Document" />
	<method signature="java.lang.String getDocumentURI()" class="org.w3c.dom.Document" />
	<method signature="java.lang.String getXmlEncoding()" class="org.w3c.dom.Document" />
	<method signature="boolean getXmlStandalone()" class="org.w3c.dom.Document" />
	<method signature="org.w3c.dom.DOMImplementation getImplementation()" class="org.w3c.dom.Document" />
	<method signature="org.w3c.dom.Element createElement(java.lang.String)" class="org.w3c.dom.Document" />
	<method signature="org.w3c.dom.Text createTextNode(java.lang.String)" class="org.w3c.dom.Document" />
	<method signature="org.w3c.dom.Element getDocumentElement()" class="org.w3c.dom.Document" />
	<method signature="java.lang.String getInputEncoding()" class="org.w3c.dom.Document" />
	<method signature="org.w3c.dom.ProcessingInstruction createProcessingInstruction(java.lang.String,java.lang.String)" class="org.w3c.dom.Document" />
	<method signature="org.w3c.dom.Node adoptNode(org.w3c.dom.Node)" class="org.w3c.dom.Document" />
	<method signature="org.w3c.dom.Attr createAttributeNS(java.lang.String,java.lang.String)" class="org.w3c.dom.Document" />
	<method signature="org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String,java.lang.String)" class="org.w3c.dom.Document" />
	<method signature="org.w3c.dom.Element getElementById(java.lang.String)" class="org.w3c.dom.Document" />
	<method signature="org.w3c.dom.NodeList getElementsByTagName(java.lang.String)" class="org.w3c.dom.Document" />
	<method signature="void setXmlStandalone(boolean)" class="org.w3c.dom.Document" />
	<method signature="void setXmlVersion(java.lang.String)" class="org.w3c.dom.Document" />
	<method signature="org.w3c.dom.Attr createAttribute(java.lang.String)" class="org.w3c.dom.Document" />
	<method signature="void setStrictErrorChecking(boolean)" class="org.w3c.dom.Document" />
	<method signature="void setDocumentURI(java.lang.String)" class="org.w3c.dom.Document" />
	<method signature="org.w3c.dom.DocumentFragment createDocumentFragment()" class="org.w3c.dom.Document" />
	<method signature="org.w3c.dom.CDATASection createCDATASection(java.lang.String)" class="org.w3c.dom.Document" />
	<method signature="org.w3c.dom.DOMConfiguration getDomConfig()" class="org.w3c.dom.Document" />
	<method signature="org.w3c.dom.Node renameNode(org.w3c.dom.Node,java.lang.String,java.lang.String)" class="org.w3c.dom.Document" />
	<method signature="org.w3c.dom.Node importNode(org.w3c.dom.Node,boolean)" class="org.w3c.dom.Document" />
	<class name="org.w3c.dom.html.HTMLMenuElement" />
	<method signature="void setCompact(boolean)" class="org.w3c.dom.html.HTMLMenuElement" />
	<method signature="boolean getCompact()" class="org.w3c.dom.html.HTMLMenuElement" />
	<class name="org.apache.wml.WMLOptionElement" />
	<method signature="void setValue(java.lang.String)" class="org.apache.wml.WMLOptionElement" />
	<method signature="java.lang.String getTitle()" class="org.apache.wml.WMLOptionElement" />
	<method signature="java.lang.String getOnPick()" class="org.apache.wml.WMLOptionElement" />
	<method signature="java.lang.String getXmlLang()" class="org.apache.wml.WMLOptionElement" />
	<method signature="java.lang.String getValue()" class="org.apache.wml.WMLOptionElement" />
	<method signature="void setXmlLang(java.lang.String)" class="org.apache.wml.WMLOptionElement" />
	<method signature="void setOnPick(java.lang.String)" class="org.apache.wml.WMLOptionElement" />
	<method signature="void setTitle(java.lang.String)" class="org.apache.wml.WMLOptionElement" />
	<class name="org.jfree.chart.plot.Plot" />
	<method signature="void setOutlineStroke(java.awt.Stroke)" class="org.jfree.chart.plot.Plot" />
	<method signature="void setForegroundAlpha(float)" class="org.jfree.chart.plot.Plot" />
	<method signature="void setNoDataMessageFont(java.awt.Font)" class="org.jfree.chart.plot.Plot" />
	<method signature="org.jfree.chart.plot.Plot getParent()" class="org.jfree.chart.plot.Plot" />
	<method signature="java.awt.Stroke getOutlineStroke()" class="org.jfree.chart.plot.Plot" />
	<method signature="void drawBackground(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" class="org.jfree.chart.plot.Plot" />
	<method signature="org.jfree.ui.RectangleInsets getInsets()" class="org.jfree.chart.plot.Plot" />
	<method signature="java.awt.Paint getOutlinePaint()" class="org.jfree.chart.plot.Plot" />
	<method signature="float getForegroundAlpha()" class="org.jfree.chart.plot.Plot" />
	<method signature="boolean isNotify()" class="org.jfree.chart.plot.Plot" />
	<method signature="void addChangeListener(org.jfree.chart.event.PlotChangeListener)" class="org.jfree.chart.plot.Plot" />
	<method signature="org.jfree.ui.RectangleEdge resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)" class="org.jfree.chart.plot.Plot" />
	<method signature="void setBackgroundAlpha(float)" class="org.jfree.chart.plot.Plot" />
	<method signature="void drawOutline(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" class="org.jfree.chart.plot.Plot" />
	<method signature="void annotationChanged(org.jfree.chart.event.AnnotationChangeEvent)" class="org.jfree.chart.plot.Plot" />
	<method signature="void setInsets(org.jfree.ui.RectangleInsets)" class="org.jfree.chart.plot.Plot" />
	<method signature="java.awt.Paint getBackgroundPaint()" class="org.jfree.chart.plot.Plot" />
	<method signature="void notifyListeners(org.jfree.chart.event.PlotChangeEvent)" class="org.jfree.chart.plot.Plot" />
	<method signature="void handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.plot.Plot" />
	<method signature="void setInsets(org.jfree.ui.RectangleInsets,boolean)" class="org.jfree.chart.plot.Plot" />
	<method signature="boolean isSubplot()" class="org.jfree.chart.plot.Plot" />
	<method signature="void drawBackgroundImage(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" class="org.jfree.chart.plot.Plot" />
	<method signature="void setNoDataMessage(java.lang.String)" class="org.jfree.chart.plot.Plot" />
	<method signature="void setNoDataMessagePaint(java.awt.Paint)" class="org.jfree.chart.plot.Plot" />
	<method signature="void setDrawingSupplier(org.jfree.chart.plot.DrawingSupplier)" class="org.jfree.chart.plot.Plot" />
	<method signature="int getBackgroundImageAlignment()" class="org.jfree.chart.plot.Plot" />
	<method signature="void axisChanged(org.jfree.chart.event.AxisChangeEvent)" class="org.jfree.chart.plot.Plot" />
	<method signature="boolean isOutlineVisible()" class="org.jfree.chart.plot.Plot" />
	<method signature="void setBackgroundImageAlpha(float)" class="org.jfree.chart.plot.Plot" />
	<method signature="java.lang.String getPlotType()" class="org.jfree.chart.plot.Plot" />
	<method signature="void setBackgroundImage(java.awt.Image)" class="org.jfree.chart.plot.Plot" />
	<method signature="org.jfree.chart.plot.DrawingSupplier getDrawingSupplier()" class="org.jfree.chart.plot.Plot" />
	<method signature="org.jfree.data.general.DatasetGroup getDatasetGroup()" class="org.jfree.chart.plot.Plot" />
	<method signature="void setBackgroundImageAlignment(int)" class="org.jfree.chart.plot.Plot" />
	<method signature="float getBackgroundImageAlpha()" class="org.jfree.chart.plot.Plot" />
	<method signature="void setOutlinePaint(java.awt.Paint)" class="org.jfree.chart.plot.Plot" />
	<method signature="void setDrawingSupplier(org.jfree.chart.plot.DrawingSupplier,boolean)" class="org.jfree.chart.plot.Plot" />
	<method signature="java.awt.Font getNoDataMessageFont()" class="org.jfree.chart.plot.Plot" />
	<method signature="java.awt.Paint getNoDataMessagePaint()" class="org.jfree.chart.plot.Plot" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.plot.Plot" />
	<method signature="float getBackgroundAlpha()" class="org.jfree.chart.plot.Plot" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.plot.Plot" />
	<method signature="void zoom(double)" class="org.jfree.chart.plot.Plot" />
	<method signature="void markerChanged(org.jfree.chart.event.MarkerChangeEvent)" class="org.jfree.chart.plot.Plot" />
	<method signature="void setOutlineVisible(boolean)" class="org.jfree.chart.plot.Plot" />
	<method signature="org.jfree.chart.plot.Plot getRootPlot()" class="org.jfree.chart.plot.Plot" />
	<method signature="java.awt.Image getBackgroundImage()" class="org.jfree.chart.plot.Plot" />
	<method signature="void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.plot.Plot" />
	<method signature="void removeChangeListener(org.jfree.chart.event.PlotChangeListener)" class="org.jfree.chart.plot.Plot" />
	<method signature="void datasetChanged(org.jfree.data.general.DatasetChangeEvent)" class="org.jfree.chart.plot.Plot" />
	<method signature="void setNotify(boolean)" class="org.jfree.chart.plot.Plot" />
	<method signature="void setParent(org.jfree.chart.plot.Plot)" class="org.jfree.chart.plot.Plot" />
	<method signature="org.jfree.chart.LegendItemCollection getLegendItems()" class="org.jfree.chart.plot.Plot" />
	<method signature="java.lang.String getNoDataMessage()" class="org.jfree.chart.plot.Plot" />
	<method signature="org.jfree.ui.RectangleEdge resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)" class="org.jfree.chart.plot.Plot" />
	<method signature="void setBackgroundPaint(java.awt.Paint)" class="org.jfree.chart.plot.Plot" />
	<class name="org.apache.xerces.util.IntStack" />
	<method signature="int size()" class="org.apache.xerces.util.IntStack" />
	<method signature="void push(int)" class="org.apache.xerces.util.IntStack" />
	<method signature="int elementAt(int)" class="org.apache.xerces.util.IntStack" />
	<method signature="void clear()" class="org.apache.xerces.util.IntStack" />
	<method signature="int pop()" class="org.apache.xerces.util.IntStack" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.util.IntStack" />
	<method signature="void print()" class="org.apache.xerces.util.IntStack" />
	<method signature="int peek()" class="org.apache.xerces.util.IntStack" />
	<class name="org.apache.commons.lang3.text.translate.AggregateTranslator" />
	<method signature="void &lt;init&gt;(org.apache.commons.lang3.text.translate.CharSequenceTranslator[])" class="org.apache.commons.lang3.text.translate.AggregateTranslator" />
	<method signature="int translate(java.lang.CharSequence,int,java.io.Writer)" class="org.apache.commons.lang3.text.translate.AggregateTranslator" />
	<class name="org.apache.wml.WMLCardElement" />
	<method signature="java.lang.String getXmlLang()" class="org.apache.wml.WMLCardElement" />
	<method signature="java.lang.String getOnEnterBackward()" class="org.apache.wml.WMLCardElement" />
	<method signature="void setNewContext(boolean)" class="org.apache.wml.WMLCardElement" />
	<method signature="void setOnTimer(java.lang.String)" class="org.apache.wml.WMLCardElement" />
	<method signature="void setOnEnterForward(java.lang.String)" class="org.apache.wml.WMLCardElement" />
	<method signature="java.lang.String getTitle()" class="org.apache.wml.WMLCardElement" />
	<method signature="boolean getOrdered()" class="org.apache.wml.WMLCardElement" />
	<method signature="boolean getNewContext()" class="org.apache.wml.WMLCardElement" />
	<method signature="java.lang.String getOnTimer()" class="org.apache.wml.WMLCardElement" />
	<method signature="void setXmlLang(java.lang.String)" class="org.apache.wml.WMLCardElement" />
	<method signature="void setOrdered(boolean)" class="org.apache.wml.WMLCardElement" />
	<method signature="void setOnEnterBackward(java.lang.String)" class="org.apache.wml.WMLCardElement" />
	<method signature="java.lang.String getOnEnterForward()" class="org.apache.wml.WMLCardElement" />
	<method signature="void setTitle(java.lang.String)" class="org.apache.wml.WMLCardElement" />
	<class name="fi.iki.elonen.NanoHTTPD$AsyncRunner" />
	<method signature="void closeAll()" class="fi.iki.elonen.NanoHTTPD$AsyncRunner" />
	<method signature="void closed(fi.iki.elonen.NanoHTTPD$ClientHandler)" class="fi.iki.elonen.NanoHTTPD$AsyncRunner" />
	<method signature="void exec(fi.iki.elonen.NanoHTTPD$ClientHandler)" class="fi.iki.elonen.NanoHTTPD$AsyncRunner" />
	<class name="org.apache.wml.dom.WMLPElementImpl" />
	<method signature="void setAlign(java.lang.String)" class="org.apache.wml.dom.WMLPElementImpl" />
	<method signature="java.lang.String getXmlLang()" class="org.apache.wml.dom.WMLPElementImpl" />
	<method signature="void setXmlLang(java.lang.String)" class="org.apache.wml.dom.WMLPElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.wml.dom.WMLDocumentImpl,java.lang.String)" class="org.apache.wml.dom.WMLPElementImpl" />
	<method signature="java.lang.String getId()" class="org.apache.wml.dom.WMLPElementImpl" />
	<method signature="java.lang.String getClassName()" class="org.apache.wml.dom.WMLPElementImpl" />
	<method signature="java.lang.String getMode()" class="org.apache.wml.dom.WMLPElementImpl" />
	<method signature="java.lang.String getAlign()" class="org.apache.wml.dom.WMLPElementImpl" />
	<method signature="void setClassName(java.lang.String)" class="org.apache.wml.dom.WMLPElementImpl" />
	<method signature="void setMode(java.lang.String)" class="org.apache.wml.dom.WMLPElementImpl" />
	<method signature="void setId(java.lang.String)" class="org.apache.wml.dom.WMLPElementImpl" />
	<class name="org.apache.wml.dom.WMLIElementImpl" />
	<method signature="java.lang.String getXmlLang()" class="org.apache.wml.dom.WMLIElementImpl" />
	<method signature="void setXmlLang(java.lang.String)" class="org.apache.wml.dom.WMLIElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.wml.dom.WMLDocumentImpl,java.lang.String)" class="org.apache.wml.dom.WMLIElementImpl" />
	<method signature="java.lang.String getId()" class="org.apache.wml.dom.WMLIElementImpl" />
	<method signature="java.lang.String getClassName()" class="org.apache.wml.dom.WMLIElementImpl" />
	<method signature="void setClassName(java.lang.String)" class="org.apache.wml.dom.WMLIElementImpl" />
	<method signature="void setId(java.lang.String)" class="org.apache.wml.dom.WMLIElementImpl" />
	<class name="org.apache.xerces.stax.events.DTDImpl" />
	<method signature="java.util.List getEntities()" class="org.apache.xerces.stax.events.DTDImpl" />
	<method signature="java.util.List getNotations()" class="org.apache.xerces.stax.events.DTDImpl" />
	<method signature="java.lang.String getDocumentTypeDeclaration()" class="org.apache.xerces.stax.events.DTDImpl" />
	<method signature="void writeAsEncodedUnicode(java.io.Writer)" class="org.apache.xerces.stax.events.DTDImpl" />
	<method signature="java.lang.Object getProcessedDTD()" class="org.apache.xerces.stax.events.DTDImpl" />
	<method signature="void &lt;init&gt;(java.lang.String,javax.xml.stream.Location)" class="org.apache.xerces.stax.events.DTDImpl" />
	<class name="org.jdom2.IllegalNameException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jdom2.IllegalNameException" />
	<class name="org.jfree.data.function.LineFunction2D" />
	<method signature="double getSlope()" class="org.jfree.data.function.LineFunction2D" />
	<method signature="int hashCode()" class="org.jfree.data.function.LineFunction2D" />
	<method signature="double getValue(double)" class="org.jfree.data.function.LineFunction2D" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.function.LineFunction2D" />
	<method signature="double getIntercept()" class="org.jfree.data.function.LineFunction2D" />
	<method signature="void &lt;init&gt;(double,double)" class="org.jfree.data.function.LineFunction2D" />
	<class name="org.apache.xmlcommons.Version" />
	<method signature="java.lang.String getProduct()" class="org.apache.xmlcommons.Version" />
	<method signature="java.lang.String getVersion()" class="org.apache.xmlcommons.Version" />
	<method signature="void &lt;init&gt;()" class="org.apache.xmlcommons.Version" />
	<method signature="void main(java.lang.String[])" class="org.apache.xmlcommons.Version" />
	<method signature="java.lang.String getVersionNum()" class="org.apache.xmlcommons.Version" />
	<class name="org.jfree.ui.action.ActionDowngrade" />
	<class name="org.w3c.dom.xpath.XPathResult" />
	<method signature="java.lang.String getStringValue()" class="org.w3c.dom.xpath.XPathResult" />
	<method signature="boolean getInvalidIteratorState()" class="org.w3c.dom.xpath.XPathResult" />
	<method signature="org.w3c.dom.Node iterateNext()" class="org.w3c.dom.xpath.XPathResult" />
	<method signature="org.w3c.dom.Node snapshotItem(int)" class="org.w3c.dom.xpath.XPathResult" />
	<method signature="int getSnapshotLength()" class="org.w3c.dom.xpath.XPathResult" />
	<method signature="boolean getBooleanValue()" class="org.w3c.dom.xpath.XPathResult" />
	<method signature="org.w3c.dom.Node getSingleNodeValue()" class="org.w3c.dom.xpath.XPathResult" />
	<method signature="double getNumberValue()" class="org.w3c.dom.xpath.XPathResult" />
	<method signature="short getResultType()" class="org.w3c.dom.xpath.XPathResult" />
	<class name="tourma.data.Pool" />
	<method signature="java.lang.String getName()" class="tourma.data.Pool" />
	<method signature="java.util.ArrayList getCompetitors()" class="tourma.data.Pool" />
	<method signature="boolean equals(java.lang.Object)" class="tourma.data.Pool" />
	<method signature="void &lt;init&gt;()" class="tourma.data.Pool" />
	<method signature="void setName(java.lang.String)" class="tourma.data.Pool" />
	<method signature="void setXMLElement(org.jdom2.Element)" class="tourma.data.Pool" />
	<method signature="int getCompetitorCount()" class="tourma.data.Pool" />
	<method signature="tourma.data.Competitor getCompetitor(int)" class="tourma.data.Pool" />
	<method signature="org.jdom2.Element getXMLElement()" class="tourma.data.Pool" />
	<method signature="void addCompetitor(tourma.data.Competitor)" class="tourma.data.Pool" />
	<class name="com.google.zxing.qrcode.detector.FinderPattern" />
	<method signature="float getEstimatedModuleSize()" class="com.google.zxing.qrcode.detector.FinderPattern" />
	<class name="org.w3c.dom.html.HTMLOListElement" />
	<method signature="int getStart()" class="org.w3c.dom.html.HTMLOListElement" />
	<method signature="void setCompact(boolean)" class="org.w3c.dom.html.HTMLOListElement" />
	<method signature="boolean getCompact()" class="org.w3c.dom.html.HTMLOListElement" />
	<method signature="java.lang.String getType()" class="org.w3c.dom.html.HTMLOListElement" />
	<method signature="void setStart(int)" class="org.w3c.dom.html.HTMLOListElement" />
	<method signature="void setType(java.lang.String)" class="org.w3c.dom.html.HTMLOListElement" />
	<class name="javax.xml.stream.events.EntityDeclaration" />
	<method signature="java.lang.String getSystemId()" class="javax.xml.stream.events.EntityDeclaration" />
	<method signature="java.lang.String getName()" class="javax.xml.stream.events.EntityDeclaration" />
	<method signature="java.lang.String getReplacementText()" class="javax.xml.stream.events.EntityDeclaration" />
	<method signature="java.lang.String getNotationName()" class="javax.xml.stream.events.EntityDeclaration" />
	<method signature="java.lang.String getPublicId()" class="javax.xml.stream.events.EntityDeclaration" />
	<method signature="java.lang.String getBaseURI()" class="javax.xml.stream.events.EntityDeclaration" />
	<class name="com.toedter.calendar.IDateEvaluator" />
	<method signature="java.awt.Color getSpecialForegroundColor()" class="com.toedter.calendar.IDateEvaluator" />
	<method signature="java.awt.Color getInvalidBackroundColor()" class="com.toedter.calendar.IDateEvaluator" />
	<method signature="java.awt.Color getSpecialBackroundColor()" class="com.toedter.calendar.IDateEvaluator" />
	<method signature="boolean isInvalid(java.util.Date)" class="com.toedter.calendar.IDateEvaluator" />
	<method signature="java.lang.String getSpecialTooltip()" class="com.toedter.calendar.IDateEvaluator" />
	<method signature="java.awt.Color getInvalidForegroundColor()" class="com.toedter.calendar.IDateEvaluator" />
	<method signature="boolean isSpecial(java.util.Date)" class="com.toedter.calendar.IDateEvaluator" />
	<method signature="java.lang.String getInvalidTooltip()" class="com.toedter.calendar.IDateEvaluator" />
	<class name="org.apache.html.dom.HTMLModElementImpl" />
	<method signature="java.lang.String getCite()" class="org.apache.html.dom.HTMLModElementImpl" />
	<method signature="java.lang.String getDateTime()" class="org.apache.html.dom.HTMLModElementImpl" />
	<method signature="void setDateTime(java.lang.String)" class="org.apache.html.dom.HTMLModElementImpl" />
	<method signature="void setCite(java.lang.String)" class="org.apache.html.dom.HTMLModElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLModElementImpl" />
	<class name="com.google.zxing.oned.Code93Reader" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.oned.Code93Reader" />
	<method signature="com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map)" class="com.google.zxing.oned.Code93Reader" />
	<class name="freemarker.template.utility.ClassUtil" />
	<method signature="java.lang.Class forName(java.lang.String)" class="freemarker.template.utility.ClassUtil" />
	<class name="org.jfree.data.time.Week" />
	<method signature="int getYearValue()" class="org.jfree.data.time.Week" />
	<method signature="org.jfree.data.time.RegularTimePeriod previous()" class="org.jfree.data.time.Week" />
	<method signature="long getLastMillisecond(java.util.Calendar)" class="org.jfree.data.time.Week" />
	<method signature="void &lt;init&gt;(int,int)" class="org.jfree.data.time.Week" />
	<method signature="void &lt;init&gt;(int,org.jfree.data.time.Year)" class="org.jfree.data.time.Week" />
	<method signature="void &lt;init&gt;(java.util.Date)" class="org.jfree.data.time.Week" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.time.Week" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.time.Week" />
	<method signature="long getFirstMillisecond()" class="org.jfree.data.time.Week" />
	<method signature="int getWeek()" class="org.jfree.data.time.Week" />
	<method signature="long getSerialIndex()" class="org.jfree.data.time.Week" />
	<method signature="int compareTo(java.lang.Object)" class="org.jfree.data.time.Week" />
	<method signature="int hashCode()" class="org.jfree.data.time.Week" />
	<method signature="void &lt;init&gt;(java.util.Date,java.util.TimeZone)" class="org.jfree.data.time.Week" />
	<method signature="long getLastMillisecond()" class="org.jfree.data.time.Week" />
	<method signature="org.jfree.data.time.RegularTimePeriod next()" class="org.jfree.data.time.Week" />
	<method signature="org.jfree.data.time.Week parseWeek(java.lang.String)" class="org.jfree.data.time.Week" />
	<method signature="org.jfree.data.time.Year getYear()" class="org.jfree.data.time.Week" />
	<method signature="void peg(java.util.Calendar)" class="org.jfree.data.time.Week" />
	<method signature="void &lt;init&gt;(java.util.Date,java.util.TimeZone,java.util.Locale)" class="org.jfree.data.time.Week" />
	<method signature="java.lang.String toString()" class="org.jfree.data.time.Week" />
	<method signature="long getFirstMillisecond(java.util.Calendar)" class="org.jfree.data.time.Week" />
	<class name="org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset" />
	<method signature="java.lang.Number getMeanValue(int,int)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset" />
	<method signature="java.lang.Number getMedianValue(int,int)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset" />
	<method signature="java.lang.Number getX(int,int)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset" />
	<method signature="double getOutlierCoefficient()" class="org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset" />
	<method signature="java.lang.Number getY(int,int)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset" />
	<method signature="int getSeriesCount()" class="org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset" />
	<method signature="java.lang.Comparable getSeriesKey(int)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset" />
	<method signature="java.lang.Number getQ3Value(int,int)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset" />
	<method signature="java.lang.Number getMaxRegularValue(int,int)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset" />
	<method signature="void setFaroutCoefficient(double)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset" />
	<method signature="java.util.Date getXDate(int,int)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset" />
	<method signature="java.lang.Number getMaxOutlier(int,int)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset" />
	<method signature="org.jfree.data.statistics.BoxAndWhiskerItem getItem(int,int)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset" />
	<method signature="int getItemCount(int)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset" />
	<method signature="double getRangeLowerBound(boolean)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset" />
	<method signature="void &lt;init&gt;(java.lang.Comparable)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset" />
	<method signature="org.jfree.data.Range getRangeBounds(boolean)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset" />
	<method signature="void add(java.util.Date,org.jfree.data.statistics.BoxAndWhiskerItem)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset" />
	<method signature="java.lang.Number getMinOutlier(int,int)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset" />
	<method signature="java.util.List getOutliers(int,int)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset" />
	<method signature="double getRangeUpperBound(boolean)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset" />
	<method signature="java.lang.Number getMinRegularValue(int,int)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset" />
	<method signature="void setOutlierCoefficient(double)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset" />
	<method signature="double getFaroutCoefficient()" class="org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset" />
	<method signature="java.lang.Number getQ1Value(int,int)" class="org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset" />
	<class name="org.jfree.chart.renderer.LookupPaintScale" />
	<method signature="double getLowerBound()" class="org.jfree.chart.renderer.LookupPaintScale" />
	<method signature="java.awt.Paint getDefaultPaint()" class="org.jfree.chart.renderer.LookupPaintScale" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.renderer.LookupPaintScale" />
	<method signature="void add(double,java.awt.Paint)" class="org.jfree.chart.renderer.LookupPaintScale" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.LookupPaintScale" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.LookupPaintScale" />
	<method signature="double getUpperBound()" class="org.jfree.chart.renderer.LookupPaintScale" />
	<method signature="java.awt.Paint getPaint(double)" class="org.jfree.chart.renderer.LookupPaintScale" />
	<method signature="void &lt;init&gt;(double,double,java.awt.Paint)" class="org.jfree.chart.renderer.LookupPaintScale" />
	<method signature="void add(java.lang.Number,java.awt.Paint)" class="org.jfree.chart.renderer.LookupPaintScale" />
	<class name="org.jfree.chart.needle.ShipNeedle" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.needle.ShipNeedle" />
	<method signature="int hashCode()" class="org.jfree.chart.needle.ShipNeedle" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.needle.ShipNeedle" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.needle.ShipNeedle" />
	<class name="freemarker.cache.FileTemplateLoader" />
	<method signature="void &lt;init&gt;(java.io.File)" class="freemarker.cache.FileTemplateLoader" />
	<method signature="void &lt;init&gt;()" class="freemarker.cache.FileTemplateLoader" />
	<method signature="java.lang.Object findTemplateSource(java.lang.String)" class="freemarker.cache.FileTemplateLoader" />
	<method signature="long getLastModified(java.lang.Object)" class="freemarker.cache.FileTemplateLoader" />
	<method signature="void closeTemplateSource(java.lang.Object)" class="freemarker.cache.FileTemplateLoader" />
	<method signature="java.io.Reader getReader(java.lang.Object,java.lang.String)" class="freemarker.cache.FileTemplateLoader" />
	<method signature="void &lt;init&gt;(java.io.File,boolean)" class="freemarker.cache.FileTemplateLoader" />
	<class name="org.w3c.dom.html.HTMLCollection" />
	<method signature="org.w3c.dom.Node item(int)" class="org.w3c.dom.html.HTMLCollection" />
	<method signature="org.w3c.dom.Node namedItem(java.lang.String)" class="org.w3c.dom.html.HTMLCollection" />
	<method signature="int getLength()" class="org.w3c.dom.html.HTMLCollection" />
	<class name="org.apache.xerces.impl.dv.DatatypeException" />
	<method signature="java.lang.String getKey()" class="org.apache.xerces.impl.dv.DatatypeException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Object[])" class="org.apache.xerces.impl.dv.DatatypeException" />
	<method signature="java.lang.Object[] getArgs()" class="org.apache.xerces.impl.dv.DatatypeException" />
	<method signature="java.lang.String getMessage()" class="org.apache.xerces.impl.dv.DatatypeException" />
	<class name="com.toedter.plaf.JCalendarTheme" />
	<method signature="java.lang.String getName()" class="com.toedter.plaf.JCalendarTheme" />
	<method signature="javax.swing.plaf.ColorUIResource getMenuSelectedBackground()" class="com.toedter.plaf.JCalendarTheme" />
	<method signature="javax.swing.plaf.FontUIResource getMenuTextFont()" class="com.toedter.plaf.JCalendarTheme" />
	<method signature="javax.swing.plaf.ColorUIResource getFocusColor()" class="com.toedter.plaf.JCalendarTheme" />
	<method signature="javax.swing.plaf.FontUIResource getSystemTextFont()" class="com.toedter.plaf.JCalendarTheme" />
	<method signature="javax.swing.plaf.ColorUIResource getToggleButtonCheckColor()" class="com.toedter.plaf.JCalendarTheme" />
	<method signature="javax.swing.plaf.FontUIResource getControlTextFont()" class="com.toedter.plaf.JCalendarTheme" />
	<method signature="void &lt;init&gt;()" class="com.toedter.plaf.JCalendarTheme" />
	<method signature="javax.swing.plaf.FontUIResource getUserTextFont()" class="com.toedter.plaf.JCalendarTheme" />
	<method signature="javax.swing.plaf.ColorUIResource getMenuItemBackground()" class="com.toedter.plaf.JCalendarTheme" />
	<method signature="javax.swing.plaf.ColorUIResource getPrimaryControlShadow()" class="com.toedter.plaf.JCalendarTheme" />
	<method signature="javax.swing.plaf.ColorUIResource getMenuSelectedForeground()" class="com.toedter.plaf.JCalendarTheme" />
	<class name="org.jfree.chart.labels.StandardCrosshairLabelGenerator" />
	<method signature="int hashCode()" class="org.jfree.chart.labels.StandardCrosshairLabelGenerator" />
	<method signature="java.text.NumberFormat getNumberFormat()" class="org.jfree.chart.labels.StandardCrosshairLabelGenerator" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.labels.StandardCrosshairLabelGenerator" />
	<method signature="void &lt;init&gt;(java.lang.String,java.text.NumberFormat)" class="org.jfree.chart.labels.StandardCrosshairLabelGenerator" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.labels.StandardCrosshairLabelGenerator" />
	<method signature="java.lang.String getLabelTemplate()" class="org.jfree.chart.labels.StandardCrosshairLabelGenerator" />
	<method signature="java.lang.String generateLabel(org.jfree.chart.plot.Crosshair)" class="org.jfree.chart.labels.StandardCrosshairLabelGenerator" />
	<class name="org.apache.xerces.xs.datatypes.XSDouble" />
	<method signature="double getValue()" class="org.apache.xerces.xs.datatypes.XSDouble" />
	<class name="org.apache.commons.lang3.text.translate.CodePointTranslator" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.text.translate.CodePointTranslator" />
	<method signature="int translate(java.lang.CharSequence,int,java.io.Writer)" class="org.apache.commons.lang3.text.translate.CodePointTranslator" />
	<method signature="boolean translate(int,java.io.Writer)" class="org.apache.commons.lang3.text.translate.CodePointTranslator" />
	<class name="org.apache.xerces.impl.dv.XSFacets" />
	<method signature="void reset()" class="org.apache.xerces.impl.dv.XSFacets" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.XSFacets" />
	<class name="tourma.views.parameters.JPNParamCategories" />
	<method signature="void update()" class="tourma.views.parameters.JPNParamCategories" />
	<method signature="void &lt;init&gt;()" class="tourma.views.parameters.JPNParamCategories" />
	<class name="org.jfree.chart.axis.NumberAxis" />
	<method signature="boolean getAutoRangeStickyZero()" class="org.jfree.chart.axis.NumberAxis" />
	<method signature="org.jfree.chart.axis.MarkerAxisBand getMarkerBand()" class="org.jfree.chart.axis.NumberAxis" />
	<method signature="org.jfree.chart.axis.TickUnitSource createStandardTickUnits()" class="org.jfree.chart.axis.NumberAxis" />
	<method signature="void setTickUnit(org.jfree.chart.axis.NumberTickUnit)" class="org.jfree.chart.axis.NumberAxis" />
	<method signature="void setTickUnit(org.jfree.chart.axis.NumberTickUnit,boolean,boolean)" class="org.jfree.chart.axis.NumberAxis" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.axis.NumberAxis" />
	<method signature="void configure()" class="org.jfree.chart.axis.NumberAxis" />
	<method signature="org.jfree.chart.axis.TickUnitSource createIntegerTickUnits()" class="org.jfree.chart.axis.NumberAxis" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.axis.NumberAxis" />
	<method signature="java.text.NumberFormat getNumberFormatOverride()" class="org.jfree.chart.axis.NumberAxis" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.axis.NumberAxis" />
	<method signature="org.jfree.data.RangeType getRangeType()" class="org.jfree.chart.axis.NumberAxis" />
	<method signature="org.jfree.chart.axis.TickUnitSource createIntegerTickUnits(java.util.Locale)" class="org.jfree.chart.axis.NumberAxis" />
	<method signature="int hashCode()" class="org.jfree.chart.axis.NumberAxis" />
	<method signature="boolean getAutoRangeIncludesZero()" class="org.jfree.chart.axis.NumberAxis" />
	<method signature="double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.axis.NumberAxis" />
	<method signature="void setRangeType(org.jfree.data.RangeType)" class="org.jfree.chart.axis.NumberAxis" />
	<method signature="void setAutoRangeIncludesZero(boolean)" class="org.jfree.chart.axis.NumberAxis" />
	<method signature="void setAutoRangeStickyZero(boolean)" class="org.jfree.chart.axis.NumberAxis" />
	<method signature="java.util.List refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.axis.NumberAxis" />
	<method signature="org.jfree.chart.axis.TickUnitSource createStandardTickUnits(java.util.Locale)" class="org.jfree.chart.axis.NumberAxis" />
	<method signature="void setNumberFormatOverride(java.text.NumberFormat)" class="org.jfree.chart.axis.NumberAxis" />
	<method signature="void setMarkerBand(org.jfree.chart.axis.MarkerAxisBand)" class="org.jfree.chart.axis.NumberAxis" />
	<method signature="org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.axis.NumberAxis" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.chart.axis.NumberAxis" />
	<method signature="double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.axis.NumberAxis" />
	<method signature="org.jfree.chart.axis.NumberTickUnit getTickUnit()" class="org.jfree.chart.axis.NumberAxis" />
	<class name="org.jfree.ui.DateCellRenderer" />
	<method signature="void &lt;init&gt;(java.text.DateFormat)" class="org.jfree.ui.DateCellRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.ui.DateCellRenderer" />
	<method signature="java.awt.Component getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)" class="org.jfree.ui.DateCellRenderer" />
	<class name="tourma.utils.display.TableFormat" />
	<method signature="void setColumnSize(javax.swing.JTable)" class="tourma.utils.display.TableFormat" />
	<class name="org.jfree.data.KeyedObject" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.KeyedObject" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.KeyedObject" />
	<method signature="void &lt;init&gt;(java.lang.Comparable,java.lang.Object)" class="org.jfree.data.KeyedObject" />
	<method signature="java.lang.Object getObject()" class="org.jfree.data.KeyedObject" />
	<method signature="void setObject(java.lang.Object)" class="org.jfree.data.KeyedObject" />
	<method signature="java.lang.Comparable getKey()" class="org.jfree.data.KeyedObject" />
	<class name="javax.annotation.RegEx$Checker" />
	<method signature="void &lt;init&gt;()" class="javax.annotation.RegEx$Checker" />
	<method signature="javax.annotation.meta.When forConstantValue(java.lang.annotation.Annotation,java.lang.Object)" class="javax.annotation.RegEx$Checker" />
	<method signature="javax.annotation.meta.When forConstantValue(javax.annotation.RegEx,java.lang.Object)" class="javax.annotation.RegEx$Checker" />
	<class name="org.jfree.chart.editor.ChartEditorFactory" />
	<method signature="org.jfree.chart.editor.ChartEditor createEditor(org.jfree.chart.JFreeChart)" class="org.jfree.chart.editor.ChartEditorFactory" />
	<class name="org.w3c.dom.ls.LSResourceResolver" />
	<method signature="org.w3c.dom.ls.LSInput resolveResource(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.w3c.dom.ls.LSResourceResolver" />
	<class name="org.apache.xerces.impl.xs.AttributePSVImpl" />
	<method signature="org.apache.xerces.xs.XSSimpleTypeDefinition getMemberTypeDefinition()" class="org.apache.xerces.impl.xs.AttributePSVImpl" />
	<method signature="org.apache.xerces.xs.XSValue getSchemaValue()" class="org.apache.xerces.impl.xs.AttributePSVImpl" />
	<method signature="void reset()" class="org.apache.xerces.impl.xs.AttributePSVImpl" />
	<method signature="org.apache.xerces.xs.XSTypeDefinition getTypeDefinition()" class="org.apache.xerces.impl.xs.AttributePSVImpl" />
	<method signature="java.lang.String getValidationContext()" class="org.apache.xerces.impl.xs.AttributePSVImpl" />
	<method signature="org.apache.xerces.xs.ShortList getItemValueTypes()" class="org.apache.xerces.impl.xs.AttributePSVImpl" />
	<method signature="org.apache.xerces.xs.XSAttributeDeclaration getAttributeDeclaration()" class="org.apache.xerces.impl.xs.AttributePSVImpl" />
	<method signature="org.apache.xerces.xs.StringList getErrorMessages()" class="org.apache.xerces.impl.xs.AttributePSVImpl" />
	<method signature="short getValidity()" class="org.apache.xerces.impl.xs.AttributePSVImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xs.AttributePSVImpl" />
	<method signature="short getActualNormalizedValueType()" class="org.apache.xerces.impl.xs.AttributePSVImpl" />
	<method signature="boolean getIsSchemaSpecified()" class="org.apache.xerces.impl.xs.AttributePSVImpl" />
	<method signature="java.lang.Object getActualNormalizedValue()" class="org.apache.xerces.impl.xs.AttributePSVImpl" />
	<method signature="java.lang.String getSchemaDefault()" class="org.apache.xerces.impl.xs.AttributePSVImpl" />
	<method signature="org.apache.xerces.xs.StringList getErrorCodes()" class="org.apache.xerces.impl.xs.AttributePSVImpl" />
	<method signature="short getValidationAttempted()" class="org.apache.xerces.impl.xs.AttributePSVImpl" />
	<method signature="java.lang.String getSchemaNormalizedValue()" class="org.apache.xerces.impl.xs.AttributePSVImpl" />
	<class name="freemarker.log.CommonsLoggingLoggerFactory" />
	<method signature="void &lt;init&gt;()" class="freemarker.log.CommonsLoggingLoggerFactory" />
	<method signature="freemarker.log.Logger getLogger(java.lang.String)" class="freemarker.log.CommonsLoggingLoggerFactory" />
	<class name="freemarker.template.TemplateBooleanModel" />
	<method signature="boolean getAsBoolean()" class="freemarker.template.TemplateBooleanModel" />
	<class name="freemarker.ext.beans.StringModel" />
	<method signature="void &lt;init&gt;(java.lang.Object,freemarker.ext.beans.BeansWrapper)" class="freemarker.ext.beans.StringModel" />
	<method signature="java.lang.String getAsString()" class="freemarker.ext.beans.StringModel" />
	<class name="org.apache.xerces.impl.xs.XSDeclarationPool" />
	<method signature="void reset()" class="org.apache.xerces.impl.xs.XSDeclarationPool" />
	<method signature="org.apache.xerces.impl.xs.XSAttributeUseImpl getAttributeUse()" class="org.apache.xerces.impl.xs.XSDeclarationPool" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xs.XSDeclarationPool" />
	<method signature="org.apache.xerces.impl.xs.XSAttributeDecl getAttributeDecl()" class="org.apache.xerces.impl.xs.XSDeclarationPool" />
	<method signature="void setDVFactory(org.apache.xerces.impl.dv.xs.SchemaDVFactoryImpl)" class="org.apache.xerces.impl.xs.XSDeclarationPool" />
	<method signature="org.apache.xerces.impl.xs.XSComplexTypeDecl getComplexTypeDecl()" class="org.apache.xerces.impl.xs.XSDeclarationPool" />
	<method signature="org.apache.xerces.impl.xs.XSModelGroupImpl getModelGroup()" class="org.apache.xerces.impl.xs.XSDeclarationPool" />
	<method signature="org.apache.xerces.impl.xs.XSElementDecl getElementDecl()" class="org.apache.xerces.impl.xs.XSDeclarationPool" />
	<method signature="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl getSimpleTypeDecl()" class="org.apache.xerces.impl.xs.XSDeclarationPool" />
	<method signature="org.apache.xerces.impl.xs.XSParticleDecl getParticleDecl()" class="org.apache.xerces.impl.xs.XSDeclarationPool" />
	<class name="javax.annotation.meta.Exclusive" />
	<class name="org.jfree.chart.renderer.category.LevelRenderer" />
	<method signature="int hashCode()" class="org.jfree.chart.renderer.category.LevelRenderer" />
	<method signature="void setItemMargin(double)" class="org.jfree.chart.renderer.category.LevelRenderer" />
	<method signature="double getMaximumItemWidth()" class="org.jfree.chart.renderer.category.LevelRenderer" />
	<method signature="double getMaxItemWidth()" class="org.jfree.chart.renderer.category.LevelRenderer" />
	<method signature="double getItemMiddle(java.lang.Comparable,java.lang.Comparable,org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.renderer.category.LevelRenderer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.category.LevelRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.category.LevelRenderer" />
	<method signature="double getItemMargin()" class="org.jfree.chart.renderer.category.LevelRenderer" />
	<method signature="org.jfree.chart.renderer.category.CategoryItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.renderer.category.LevelRenderer" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)" class="org.jfree.chart.renderer.category.LevelRenderer" />
	<method signature="void setMaximumItemWidth(double)" class="org.jfree.chart.renderer.category.LevelRenderer" />
	<method signature="void setMaxItemWidth(double)" class="org.jfree.chart.renderer.category.LevelRenderer" />
	<class name="freemarker.core.TemplateObject" />
	<method signature="java.lang.String getStartLocation()" class="freemarker.core.TemplateObject" />
	<method signature="freemarker.template.Template getTemplate()" class="freemarker.core.TemplateObject" />
	<method signature="int getBeginLine()" class="freemarker.core.TemplateObject" />
	<method signature="java.lang.String getEndLocationQuoted()" class="freemarker.core.TemplateObject" />
	<method signature="int getBeginColumn()" class="freemarker.core.TemplateObject" />
	<method signature="int getEndColumn()" class="freemarker.core.TemplateObject" />
	<method signature="int getEndLine()" class="freemarker.core.TemplateObject" />
	<method signature="java.lang.String getStartLocationQuoted()" class="freemarker.core.TemplateObject" />
	<method signature="java.lang.String getSource()" class="freemarker.core.TemplateObject" />
	<method signature="boolean contains(int,int)" class="freemarker.core.TemplateObject" />
	<method signature="void &lt;init&gt;()" class="freemarker.core.TemplateObject" />
	<method signature="java.lang.String toString()" class="freemarker.core.TemplateObject" />
	<method signature="java.lang.String getEndLocation()" class="freemarker.core.TemplateObject" />
	<method signature="java.lang.String getCanonicalForm()" class="freemarker.core.TemplateObject" />
	<class name="org.apache.wml.dom.WMLBElementImpl" />
	<method signature="java.lang.String getXmlLang()" class="org.apache.wml.dom.WMLBElementImpl" />
	<method signature="void setXmlLang(java.lang.String)" class="org.apache.wml.dom.WMLBElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.wml.dom.WMLDocumentImpl,java.lang.String)" class="org.apache.wml.dom.WMLBElementImpl" />
	<method signature="java.lang.String getId()" class="org.apache.wml.dom.WMLBElementImpl" />
	<method signature="java.lang.String getClassName()" class="org.apache.wml.dom.WMLBElementImpl" />
	<method signature="void setClassName(java.lang.String)" class="org.apache.wml.dom.WMLBElementImpl" />
	<method signature="void setId(java.lang.String)" class="org.apache.wml.dom.WMLBElementImpl" />
	<class name="org.apache.commons.lang3.builder.DiffResult" />
	<method signature="java.util.Iterator iterator()" class="org.apache.commons.lang3.builder.DiffResult" />
	<method signature="java.util.List getDiffs()" class="org.apache.commons.lang3.builder.DiffResult" />
	<method signature="int getNumberOfDiffs()" class="org.apache.commons.lang3.builder.DiffResult" />
	<method signature="java.lang.String toString()" class="org.apache.commons.lang3.builder.DiffResult" />
	<method signature="org.apache.commons.lang3.builder.ToStringStyle getToStringStyle()" class="org.apache.commons.lang3.builder.DiffResult" />
	<method signature="java.lang.String toString(org.apache.commons.lang3.builder.ToStringStyle)" class="org.apache.commons.lang3.builder.DiffResult" />
	<class name="org.apache.xerces.dom3.as.DocumentAS" />
	<method signature="org.apache.xerces.dom3.as.ASModel getInternalAS()" class="org.apache.xerces.dom3.as.DocumentAS" />
	<method signature="void setBoundASModels(org.apache.xerces.dom3.as.ASObjectList)" class="org.apache.xerces.dom3.as.DocumentAS" />
	<method signature="void removeAS(org.apache.xerces.dom3.as.ASModel)" class="org.apache.xerces.dom3.as.DocumentAS" />
	<method signature="void setInternalAS(org.apache.xerces.dom3.as.ASModel)" class="org.apache.xerces.dom3.as.DocumentAS" />
	<method signature="org.apache.xerces.dom3.as.ASModel getActiveASModel()" class="org.apache.xerces.dom3.as.DocumentAS" />
	<method signature="void validate()" class="org.apache.xerces.dom3.as.DocumentAS" />
	<method signature="org.apache.xerces.dom3.as.ASObjectList getBoundASModels()" class="org.apache.xerces.dom3.as.DocumentAS" />
	<method signature="org.apache.xerces.dom3.as.ASElementDeclaration getElementDeclaration()" class="org.apache.xerces.dom3.as.DocumentAS" />
	<method signature="void setActiveASModel(org.apache.xerces.dom3.as.ASModel)" class="org.apache.xerces.dom3.as.DocumentAS" />
	<method signature="void addAS(org.apache.xerces.dom3.as.ASModel)" class="org.apache.xerces.dom3.as.DocumentAS" />
	<class name="org.apache.xerces.impl.xs.XSElementDecl" />
	<method signature="short getSubstitutionGroupExclusions()" class="org.apache.xerces.impl.xs.XSElementDecl" />
	<method signature="boolean getAbstract()" class="org.apache.xerces.impl.xs.XSElementDecl" />
	<method signature="java.lang.String getName()" class="org.apache.xerces.impl.xs.XSElementDecl" />
	<method signature="void reset()" class="org.apache.xerces.impl.xs.XSElementDecl" />
	<method signature="boolean getNillable()" class="org.apache.xerces.impl.xs.XSElementDecl" />
	<method signature="org.apache.xerces.xs.XSTypeDefinition getTypeDefinition()" class="org.apache.xerces.impl.xs.XSElementDecl" />
	<method signature="short getScope()" class="org.apache.xerces.impl.xs.XSElementDecl" />
	<method signature="boolean isSubstitutionGroupExclusion(short)" class="org.apache.xerces.impl.xs.XSElementDecl" />
	<method signature="short getType()" class="org.apache.xerces.impl.xs.XSElementDecl" />
	<method signature="boolean isDisallowedSubstitution(short)" class="org.apache.xerces.impl.xs.XSElementDecl" />
	<method signature="org.apache.xerces.xs.XSNamedMap getIdentityConstraints()" class="org.apache.xerces.impl.xs.XSElementDecl" />
	<method signature="org.apache.xerces.xs.XSValue getValueConstraintValue()" class="org.apache.xerces.impl.xs.XSElementDecl" />
	<method signature="org.apache.xerces.xs.XSElementDeclaration getSubstitutionGroupAffiliation()" class="org.apache.xerces.impl.xs.XSElementDecl" />
	<method signature="boolean equals(java.lang.Object)" class="org.apache.xerces.impl.xs.XSElementDecl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xs.XSElementDecl" />
	<method signature="void setConstraintType(short)" class="org.apache.xerces.impl.xs.XSElementDecl" />
	<method signature="java.lang.Object getActualVC()" class="org.apache.xerces.impl.xs.XSElementDecl" />
	<method signature="org.apache.xerces.xs.XSComplexTypeDefinition getEnclosingCTDefinition()" class="org.apache.xerces.impl.xs.XSElementDecl" />
	<method signature="int hashCode()" class="org.apache.xerces.impl.xs.XSElementDecl" />
	<method signature="short getDisallowedSubstitutions()" class="org.apache.xerces.impl.xs.XSElementDecl" />
	<method signature="org.apache.xerces.xs.ShortList getItemValueTypes()" class="org.apache.xerces.impl.xs.XSElementDecl" />
	<method signature="short getConstraintType()" class="org.apache.xerces.impl.xs.XSElementDecl" />
	<method signature="org.apache.xerces.xs.XSAnnotation getAnnotation()" class="org.apache.xerces.impl.xs.XSElementDecl" />
	<method signature="org.apache.xerces.xs.XSObjectList getAnnotations()" class="org.apache.xerces.impl.xs.XSElementDecl" />
	<method signature="void setIsNillable()" class="org.apache.xerces.impl.xs.XSElementDecl" />
	<method signature="org.apache.xerces.xs.XSNamespaceItem getNamespaceItem()" class="org.apache.xerces.impl.xs.XSElementDecl" />
	<method signature="void setIsAbstract()" class="org.apache.xerces.impl.xs.XSElementDecl" />
	<method signature="void addIDConstraint(org.apache.xerces.impl.xs.identity.IdentityConstraint)" class="org.apache.xerces.impl.xs.XSElementDecl" />
	<method signature="org.apache.xerces.impl.xs.identity.IdentityConstraint[] getIDConstraints()" class="org.apache.xerces.impl.xs.XSElementDecl" />
	<method signature="java.lang.String getConstraintValue()" class="org.apache.xerces.impl.xs.XSElementDecl" />
	<method signature="java.lang.String getNamespace()" class="org.apache.xerces.impl.xs.XSElementDecl" />
	<method signature="java.lang.String toString()" class="org.apache.xerces.impl.xs.XSElementDecl" />
	<method signature="void setIsGlobal()" class="org.apache.xerces.impl.xs.XSElementDecl" />
	<method signature="void setIsLocal(org.apache.xerces.impl.xs.XSComplexTypeDecl)" class="org.apache.xerces.impl.xs.XSElementDecl" />
	<method signature="short getActualVCType()" class="org.apache.xerces.impl.xs.XSElementDecl" />
	<class name="org.jfree.chart.renderer.xy.DeviationRenderer" />
	<method signature="void setDrawSeriesLineAsPath(boolean)" class="org.jfree.chart.renderer.xy.DeviationRenderer" />
	<method signature="org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)" class="org.jfree.chart.renderer.xy.DeviationRenderer" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)" class="org.jfree.chart.renderer.xy.DeviationRenderer" />
	<method signature="int getPassCount()" class="org.jfree.chart.renderer.xy.DeviationRenderer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.xy.DeviationRenderer" />
	<method signature="void setAlpha(float)" class="org.jfree.chart.renderer.xy.DeviationRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.xy.DeviationRenderer" />
	<method signature="void &lt;init&gt;(boolean,boolean)" class="org.jfree.chart.renderer.xy.DeviationRenderer" />
	<method signature="float getAlpha()" class="org.jfree.chart.renderer.xy.DeviationRenderer" />
	<method signature="org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.renderer.xy.DeviationRenderer" />
	<class name="org.jfree.data.xy.XYInterval" />
	<method signature="double getY()" class="org.jfree.data.xy.XYInterval" />
	<method signature="double getXLow()" class="org.jfree.data.xy.XYInterval" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.xy.XYInterval" />
	<method signature="void &lt;init&gt;(double,double,double,double,double)" class="org.jfree.data.xy.XYInterval" />
	<method signature="double getYLow()" class="org.jfree.data.xy.XYInterval" />
	<method signature="double getYHigh()" class="org.jfree.data.xy.XYInterval" />
	<method signature="double getXHigh()" class="org.jfree.data.xy.XYInterval" />
	<class name="org.apache.xerces.xs.ElementPSVI" />
	<method signature="org.apache.xerces.xs.XSNotationDeclaration getNotation()" class="org.apache.xerces.xs.ElementPSVI" />
	<method signature="org.apache.xerces.xs.XSModel getSchemaInformation()" class="org.apache.xerces.xs.ElementPSVI" />
	<method signature="org.apache.xerces.xs.XSElementDeclaration getElementDeclaration()" class="org.apache.xerces.xs.ElementPSVI" />
	<method signature="boolean getNil()" class="org.apache.xerces.xs.ElementPSVI" />
	<class name="org.jfree.base.modules.DefaultModuleInfo" />
	<method signature="int hashCode()" class="org.jfree.base.modules.DefaultModuleInfo" />
	<method signature="java.lang.String getModuleClass()" class="org.jfree.base.modules.DefaultModuleInfo" />
	<method signature="java.lang.String getPatchLevel()" class="org.jfree.base.modules.DefaultModuleInfo" />
	<method signature="void setModuleClass(java.lang.String)" class="org.jfree.base.modules.DefaultModuleInfo" />
	<method signature="void setMinorVersion(java.lang.String)" class="org.jfree.base.modules.DefaultModuleInfo" />
	<method signature="java.lang.String getMinorVersion()" class="org.jfree.base.modules.DefaultModuleInfo" />
	<method signature="java.lang.String getMajorVersion()" class="org.jfree.base.modules.DefaultModuleInfo" />
	<method signature="void setPatchLevel(java.lang.String)" class="org.jfree.base.modules.DefaultModuleInfo" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.base.modules.DefaultModuleInfo" />
	<method signature="void &lt;init&gt;()" class="org.jfree.base.modules.DefaultModuleInfo" />
	<method signature="void setMajorVersion(java.lang.String)" class="org.jfree.base.modules.DefaultModuleInfo" />
	<method signature="java.lang.String toString()" class="org.jfree.base.modules.DefaultModuleInfo" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.jfree.base.modules.DefaultModuleInfo" />
	<class name="org.apache.commons.lang3.text.ExtendedMessageFormat" />
	<method signature="void setFormat(int,java.text.Format)" class="org.apache.commons.lang3.text.ExtendedMessageFormat" />
	<method signature="java.lang.String toPattern()" class="org.apache.commons.lang3.text.ExtendedMessageFormat" />
	<method signature="int hashCode()" class="org.apache.commons.lang3.text.ExtendedMessageFormat" />
	<method signature="void &lt;init&gt;(java.lang.String,java.util.Locale)" class="org.apache.commons.lang3.text.ExtendedMessageFormat" />
	<method signature="void setFormats(java.text.Format[])" class="org.apache.commons.lang3.text.ExtendedMessageFormat" />
	<method signature="void applyPattern(java.lang.String)" class="org.apache.commons.lang3.text.ExtendedMessageFormat" />
	<method signature="void &lt;init&gt;(java.lang.String,java.util.Locale,java.util.Map)" class="org.apache.commons.lang3.text.ExtendedMessageFormat" />
	<method signature="void setFormatByArgumentIndex(int,java.text.Format)" class="org.apache.commons.lang3.text.ExtendedMessageFormat" />
	<method signature="boolean equals(java.lang.Object)" class="org.apache.commons.lang3.text.ExtendedMessageFormat" />
	<method signature="void &lt;init&gt;(java.lang.String,java.util.Map)" class="org.apache.commons.lang3.text.ExtendedMessageFormat" />
	<method signature="void setFormatsByArgumentIndex(java.text.Format[])" class="org.apache.commons.lang3.text.ExtendedMessageFormat" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.apache.commons.lang3.text.ExtendedMessageFormat" />
	<class name="org.apache.xerces.util.HTTPInputSource" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,java.io.InputStream,java.lang.String)" class="org.apache.xerces.util.HTTPInputSource" />
	<method signature="void setHTTPRequestProperty(java.lang.String,java.lang.String)" class="org.apache.xerces.util.HTTPInputSource" />
	<method signature="java.util.Iterator getHTTPRequestProperties()" class="org.apache.xerces.util.HTTPInputSource" />
	<method signature="void &lt;init&gt;(org.apache.xerces.xni.XMLResourceIdentifier)" class="org.apache.xerces.util.HTTPInputSource" />
	<method signature="void setFollowHTTPRedirects(boolean)" class="org.apache.xerces.util.HTTPInputSource" />
	<method signature="java.lang.String getHTTPRequestProperty(java.lang.String)" class="org.apache.xerces.util.HTTPInputSource" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.util.HTTPInputSource" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,java.io.Reader,java.lang.String)" class="org.apache.xerces.util.HTTPInputSource" />
	<method signature="boolean getFollowHTTPRedirects()" class="org.apache.xerces.util.HTTPInputSource" />
	<class name="org.jfree.data.DefaultKeyedValues2D" />
	<method signature="java.lang.Number getValue(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.DefaultKeyedValues2D" />
	<method signature="int hashCode()" class="org.jfree.data.DefaultKeyedValues2D" />
	<method signature="java.lang.Number getValue(int,int)" class="org.jfree.data.DefaultKeyedValues2D" />
	<method signature="java.util.List getColumnKeys()" class="org.jfree.data.DefaultKeyedValues2D" />
	<method signature="void removeRow(int)" class="org.jfree.data.DefaultKeyedValues2D" />
	<method signature="java.lang.Comparable getColumnKey(int)" class="org.jfree.data.DefaultKeyedValues2D" />
	<method signature="java.util.List getRowKeys()" class="org.jfree.data.DefaultKeyedValues2D" />
	<method signature="void removeColumn(int)" class="org.jfree.data.DefaultKeyedValues2D" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.DefaultKeyedValues2D" />
	<method signature="void addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.DefaultKeyedValues2D" />
	<method signature="void removeRow(java.lang.Comparable)" class="org.jfree.data.DefaultKeyedValues2D" />
	<method signature="java.lang.Comparable getRowKey(int)" class="org.jfree.data.DefaultKeyedValues2D" />
	<method signature="void clear()" class="org.jfree.data.DefaultKeyedValues2D" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.DefaultKeyedValues2D" />
	<method signature="int getRowIndex(java.lang.Comparable)" class="org.jfree.data.DefaultKeyedValues2D" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.DefaultKeyedValues2D" />
	<method signature="int getRowCount()" class="org.jfree.data.DefaultKeyedValues2D" />
	<method signature="void setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.DefaultKeyedValues2D" />
	<method signature="void removeColumn(java.lang.Comparable)" class="org.jfree.data.DefaultKeyedValues2D" />
	<method signature="void &lt;init&gt;(boolean)" class="org.jfree.data.DefaultKeyedValues2D" />
	<method signature="void removeValue(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.DefaultKeyedValues2D" />
	<method signature="int getColumnIndex(java.lang.Comparable)" class="org.jfree.data.DefaultKeyedValues2D" />
	<method signature="int getColumnCount()" class="org.jfree.data.DefaultKeyedValues2D" />
	<class name="tourma.views.fullscreen.JFullScreen$Animation" />
	<method signature="void run()" class="tourma.views.fullscreen.JFullScreen$Animation" />
	<method signature="void setSuspended(boolean)" class="tourma.views.fullscreen.JFullScreen$Animation" />
	<class name="org.apache.xerces.impl.dtd.XML11DTDProcessor" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable)" class="org.apache.xerces.impl.dtd.XML11DTDProcessor" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dtd.XML11DTDProcessor" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable,org.apache.xerces.xni.grammars.XMLGrammarPool)" class="org.apache.xerces.impl.dtd.XML11DTDProcessor" />
	<class name="edu.umd.cs.findbugs.annotations.CreatesObligation" />
	<class name="freemarker.template.utility.UnrecognizedTimeZoneException" />
	<method signature="java.lang.String getTimeZoneName()" class="freemarker.template.utility.UnrecognizedTimeZoneException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="freemarker.template.utility.UnrecognizedTimeZoneException" />
	<class name="org.apache.xerces.dom.DeferredCommentImpl" />
	<method signature="int getNodeIndex()" class="org.apache.xerces.dom.DeferredCommentImpl" />
	<class name="org.apache.xerces.impl.dv.util.HexBin" />
	<method signature="byte[] decode(java.lang.String)" class="org.apache.xerces.impl.dv.util.HexBin" />
	<method signature="java.lang.String encode(byte[])" class="org.apache.xerces.impl.dv.util.HexBin" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.util.HexBin" />
	<class name="org.xml.sax.ContentHandler" />
	<method signature="void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" class="org.xml.sax.ContentHandler" />
	<method signature="void skippedEntity(java.lang.String)" class="org.xml.sax.ContentHandler" />
	<method signature="void endPrefixMapping(java.lang.String)" class="org.xml.sax.ContentHandler" />
	<method signature="void startPrefixMapping(java.lang.String,java.lang.String)" class="org.xml.sax.ContentHandler" />
	<method signature="void endElement(java.lang.String,java.lang.String,java.lang.String)" class="org.xml.sax.ContentHandler" />
	<method signature="void characters(char[],int,int)" class="org.xml.sax.ContentHandler" />
	<method signature="void startDocument()" class="org.xml.sax.ContentHandler" />
	<method signature="void endDocument()" class="org.xml.sax.ContentHandler" />
	<method signature="void ignorableWhitespace(char[],int,int)" class="org.xml.sax.ContentHandler" />
	<method signature="void processingInstruction(java.lang.String,java.lang.String)" class="org.xml.sax.ContentHandler" />
	<method signature="void setDocumentLocator(org.xml.sax.Locator)" class="org.xml.sax.ContentHandler" />
	<class name="org.apache.xerces.dom3.as.DOMImplementationAS" />
	<method signature="org.apache.xerces.dom3.as.ASModel createAS(boolean)" class="org.apache.xerces.dom3.as.DOMImplementationAS" />
	<method signature="org.apache.xerces.dom3.as.DOMASBuilder createDOMASBuilder()" class="org.apache.xerces.dom3.as.DOMImplementationAS" />
	<method signature="org.apache.xerces.dom3.as.DOMASWriter createDOMASWriter()" class="org.apache.xerces.dom3.as.DOMImplementationAS" />
	<class name="org.jfree.data.time.DynamicTimeSeriesCollection$ValueSequence" />
	<method signature="void &lt;init&gt;(org.jfree.data.time.DynamicTimeSeriesCollection,int)" class="org.jfree.data.time.DynamicTimeSeriesCollection$ValueSequence" />
	<method signature="void &lt;init&gt;(org.jfree.data.time.DynamicTimeSeriesCollection)" class="org.jfree.data.time.DynamicTimeSeriesCollection$ValueSequence" />
	<method signature="void enterData(int,float)" class="org.jfree.data.time.DynamicTimeSeriesCollection$ValueSequence" />
	<method signature="float getData(int)" class="org.jfree.data.time.DynamicTimeSeriesCollection$ValueSequence" />
	<class name="org.apache.html.dom.HTMLOptGroupElementImpl" />
	<method signature="void setDisabled(boolean)" class="org.apache.html.dom.HTMLOptGroupElementImpl" />
	<method signature="java.lang.String getLabel()" class="org.apache.html.dom.HTMLOptGroupElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLOptGroupElementImpl" />
	<method signature="boolean getDisabled()" class="org.apache.html.dom.HTMLOptGroupElementImpl" />
	<method signature="void setLabel(java.lang.String)" class="org.apache.html.dom.HTMLOptGroupElementImpl" />
	<class name="org.apache.xerces.jaxp.DocumentBuilderFactoryImpl" />
	<method signature="javax.xml.validation.Schema getSchema()" class="org.apache.xerces.jaxp.DocumentBuilderFactoryImpl" />
	<method signature="boolean isXIncludeAware()" class="org.apache.xerces.jaxp.DocumentBuilderFactoryImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.jaxp.DocumentBuilderFactoryImpl" />
	<method signature="boolean getFeature(java.lang.String)" class="org.apache.xerces.jaxp.DocumentBuilderFactoryImpl" />
	<method signature="javax.xml.parsers.DocumentBuilder newDocumentBuilder()" class="org.apache.xerces.jaxp.DocumentBuilderFactoryImpl" />
	<method signature="void setXIncludeAware(boolean)" class="org.apache.xerces.jaxp.DocumentBuilderFactoryImpl" />
	<method signature="void setAttribute(java.lang.String,java.lang.Object)" class="org.apache.xerces.jaxp.DocumentBuilderFactoryImpl" />
	<method signature="void setFeature(java.lang.String,boolean)" class="org.apache.xerces.jaxp.DocumentBuilderFactoryImpl" />
	<method signature="java.lang.Object getAttribute(java.lang.String)" class="org.apache.xerces.jaxp.DocumentBuilderFactoryImpl" />
	<method signature="void setSchema(javax.xml.validation.Schema)" class="org.apache.xerces.jaxp.DocumentBuilderFactoryImpl" />
	<class name="org.jfree.data.DefaultKeyedValues" />
	<method signature="int hashCode()" class="org.jfree.data.DefaultKeyedValues" />
	<method signature="int getIndex(java.lang.Comparable)" class="org.jfree.data.DefaultKeyedValues" />
	<method signature="java.lang.Number getValue(java.lang.Comparable)" class="org.jfree.data.DefaultKeyedValues" />
	<method signature="void insertValue(int,java.lang.Comparable,double)" class="org.jfree.data.DefaultKeyedValues" />
	<method signature="void sortByKeys(org.jfree.util.SortOrder)" class="org.jfree.data.DefaultKeyedValues" />
	<method signature="void sortByValues(org.jfree.util.SortOrder)" class="org.jfree.data.DefaultKeyedValues" />
	<method signature="void removeValue(int)" class="org.jfree.data.DefaultKeyedValues" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.DefaultKeyedValues" />
	<method signature="java.util.List getKeys()" class="org.jfree.data.DefaultKeyedValues" />
	<method signature="java.lang.Number getValue(int)" class="org.jfree.data.DefaultKeyedValues" />
	<method signature="void clear()" class="org.jfree.data.DefaultKeyedValues" />
	<method signature="int getItemCount()" class="org.jfree.data.DefaultKeyedValues" />
	<method signature="void setValue(java.lang.Comparable,double)" class="org.jfree.data.DefaultKeyedValues" />
	<method signature="void insertValue(int,java.lang.Comparable,java.lang.Number)" class="org.jfree.data.DefaultKeyedValues" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.DefaultKeyedValues" />
	<method signature="void addValue(java.lang.Comparable,java.lang.Number)" class="org.jfree.data.DefaultKeyedValues" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.DefaultKeyedValues" />
	<method signature="java.lang.Comparable getKey(int)" class="org.jfree.data.DefaultKeyedValues" />
	<method signature="void addValue(java.lang.Comparable,double)" class="org.jfree.data.DefaultKeyedValues" />
	<method signature="void removeValue(java.lang.Comparable)" class="org.jfree.data.DefaultKeyedValues" />
	<method signature="void setValue(java.lang.Comparable,java.lang.Number)" class="org.jfree.data.DefaultKeyedValues" />
	<class name="com.hexidec.ekit.component.JButtonNoFocus" />
	<method signature="void &lt;init&gt;(javax.swing.Icon)" class="com.hexidec.ekit.component.JButtonNoFocus" />
	<method signature="boolean isFocusable()" class="com.hexidec.ekit.component.JButtonNoFocus" />
	<method signature="void &lt;init&gt;()" class="com.hexidec.ekit.component.JButtonNoFocus" />
	<method signature="void &lt;init&gt;(javax.swing.Action)" class="com.hexidec.ekit.component.JButtonNoFocus" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="com.hexidec.ekit.component.JButtonNoFocus" />
	<method signature="void &lt;init&gt;(java.lang.String,javax.swing.Icon)" class="com.hexidec.ekit.component.JButtonNoFocus" />
	<class name="org.w3c.dom.html.HTMLTableSectionElement" />
	<method signature="void setAlign(java.lang.String)" class="org.w3c.dom.html.HTMLTableSectionElement" />
	<method signature="void setChOff(java.lang.String)" class="org.w3c.dom.html.HTMLTableSectionElement" />
	<method signature="java.lang.String getCh()" class="org.w3c.dom.html.HTMLTableSectionElement" />
	<method signature="void setCh(java.lang.String)" class="org.w3c.dom.html.HTMLTableSectionElement" />
	<method signature="org.w3c.dom.html.HTMLElement insertRow(int)" class="org.w3c.dom.html.HTMLTableSectionElement" />
	<method signature="org.w3c.dom.html.HTMLCollection getRows()" class="org.w3c.dom.html.HTMLTableSectionElement" />
	<method signature="java.lang.String getChOff()" class="org.w3c.dom.html.HTMLTableSectionElement" />
	<method signature="void setVAlign(java.lang.String)" class="org.w3c.dom.html.HTMLTableSectionElement" />
	<method signature="java.lang.String getAlign()" class="org.w3c.dom.html.HTMLTableSectionElement" />
	<method signature="java.lang.String getVAlign()" class="org.w3c.dom.html.HTMLTableSectionElement" />
	<method signature="void deleteRow(int)" class="org.w3c.dom.html.HTMLTableSectionElement" />
	<class name="org.apache.html.dom.HTMLBaseFontElementImpl" />
	<method signature="java.lang.String getSize()" class="org.apache.html.dom.HTMLBaseFontElementImpl" />
	<method signature="void setFace(java.lang.String)" class="org.apache.html.dom.HTMLBaseFontElementImpl" />
	<method signature="void setColor(java.lang.String)" class="org.apache.html.dom.HTMLBaseFontElementImpl" />
	<method signature="void setSize(java.lang.String)" class="org.apache.html.dom.HTMLBaseFontElementImpl" />
	<method signature="java.lang.String getColor()" class="org.apache.html.dom.HTMLBaseFontElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLBaseFontElementImpl" />
	<method signature="java.lang.String getFace()" class="org.apache.html.dom.HTMLBaseFontElementImpl" />
	<class name="com.hexidec.ekit.component.UserInputDialog" />
	<method signature="java.lang.String getInputText()" class="com.hexidec.ekit.component.UserInputDialog" />
	<method signature="void &lt;init&gt;(java.awt.Frame,java.lang.String,boolean,java.lang.String)" class="com.hexidec.ekit.component.UserInputDialog" />
	<method signature="void &lt;init&gt;(java.awt.Frame,java.lang.String,boolean,java.lang.String,java.lang.String)" class="com.hexidec.ekit.component.UserInputDialog" />
	<class name="freemarker.core.DebugBreak" />
	<method signature="void &lt;init&gt;(freemarker.core.TemplateElement)" class="freemarker.core.DebugBreak" />
	<method signature="java.lang.String getCanonicalForm()" class="freemarker.core.DebugBreak" />
	<method signature="java.lang.String getDescription()" class="freemarker.core.DebugBreak" />
	<class name="tourma.utils.Icons" />
	<method signature="javax.swing.ImageIcon getParams()" class="tourma.utils.Icons" />
	<method signature="javax.swing.ImageIcon getStar()" class="tourma.utils.Icons" />
	<method signature="javax.swing.ImageIcon getStats()" class="tourma.utils.Icons" />
	<method signature="javax.swing.ImageIcon getDices()" class="tourma.utils.Icons" />
	<class name="org.apache.xerces.impl.dv.xs.DecimalDV" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.xs.DecimalDV" />
	<method signature="java.lang.Object getActualValue(java.lang.String,org.apache.xerces.impl.dv.ValidationContext)" class="org.apache.xerces.impl.dv.xs.DecimalDV" />
	<method signature="int getTotalDigits(java.lang.Object)" class="org.apache.xerces.impl.dv.xs.DecimalDV" />
	<method signature="int compare(java.lang.Object,java.lang.Object)" class="org.apache.xerces.impl.dv.xs.DecimalDV" />
	<method signature="short getAllowedFacets()" class="org.apache.xerces.impl.dv.xs.DecimalDV" />
	<method signature="int getFractionDigits(java.lang.Object)" class="org.apache.xerces.impl.dv.xs.DecimalDV" />
	<class name="org.jfree.chart.renderer.xy.XYErrorRenderer" />
	<method signature="org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)" class="org.jfree.chart.renderer.xy.XYErrorRenderer" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)" class="org.jfree.chart.renderer.xy.XYErrorRenderer" />
	<method signature="void setDrawYError(boolean)" class="org.jfree.chart.renderer.xy.XYErrorRenderer" />
	<method signature="void setErrorPaint(java.awt.Paint)" class="org.jfree.chart.renderer.xy.XYErrorRenderer" />
	<method signature="double getCapLength()" class="org.jfree.chart.renderer.xy.XYErrorRenderer" />
	<method signature="java.awt.Paint getErrorPaint()" class="org.jfree.chart.renderer.xy.XYErrorRenderer" />
	<method signature="void setDrawXError(boolean)" class="org.jfree.chart.renderer.xy.XYErrorRenderer" />
	<method signature="void setErrorStroke(java.awt.Stroke)" class="org.jfree.chart.renderer.xy.XYErrorRenderer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.xy.XYErrorRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.xy.XYErrorRenderer" />
	<method signature="boolean getDrawYError()" class="org.jfree.chart.renderer.xy.XYErrorRenderer" />
	<method signature="java.awt.Stroke getErrorStroke()" class="org.jfree.chart.renderer.xy.XYErrorRenderer" />
	<method signature="boolean getDrawXError()" class="org.jfree.chart.renderer.xy.XYErrorRenderer" />
	<method signature="org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset)" class="org.jfree.chart.renderer.xy.XYErrorRenderer" />
	<method signature="void setCapLength(double)" class="org.jfree.chart.renderer.xy.XYErrorRenderer" />
	<class name="javax.xml.transform.Templates" />
	<method signature="java.util.Properties getOutputProperties()" class="javax.xml.transform.Templates" />
	<method signature="javax.xml.transform.Transformer newTransformer()" class="javax.xml.transform.Templates" />
	<class name="org.unbescape.properties.PropertiesValueEscapeLevel" />
	<method signature="int getEscapeLevel()" class="org.unbescape.properties.PropertiesValueEscapeLevel" />
	<method signature="org.unbescape.properties.PropertiesValueEscapeLevel[] values()" class="org.unbescape.properties.PropertiesValueEscapeLevel" />
	<method signature="org.unbescape.properties.PropertiesValueEscapeLevel valueOf(java.lang.String)" class="org.unbescape.properties.PropertiesValueEscapeLevel" />
	<method signature="org.unbescape.properties.PropertiesValueEscapeLevel forLevel(int)" class="org.unbescape.properties.PropertiesValueEscapeLevel" />
	<class name="org.jfree.chart.axis.LogAxis" />
	<method signature="void setTickUnit(org.jfree.chart.axis.NumberTickUnit)" class="org.jfree.chart.axis.LogAxis" />
	<method signature="double getBase()" class="org.jfree.chart.axis.LogAxis" />
	<method signature="void setTickUnit(org.jfree.chart.axis.NumberTickUnit,boolean,boolean)" class="org.jfree.chart.axis.LogAxis" />
	<method signature="void configure()" class="org.jfree.chart.axis.LogAxis" />
	<method signature="double exponentLengthToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.axis.LogAxis" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.axis.LogAxis" />
	<method signature="java.text.NumberFormat getNumberFormatOverride()" class="org.jfree.chart.axis.LogAxis" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.axis.LogAxis" />
	<method signature="void pan(double)" class="org.jfree.chart.axis.LogAxis" />
	<method signature="int hashCode()" class="org.jfree.chart.axis.LogAxis" />
	<method signature="void setBase(double)" class="org.jfree.chart.axis.LogAxis" />
	<method signature="double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.axis.LogAxis" />
	<method signature="double getSmallestValue()" class="org.jfree.chart.axis.LogAxis" />
	<method signature="double calculateValue(double)" class="org.jfree.chart.axis.LogAxis" />
	<method signature="org.jfree.chart.axis.TickUnitSource createLogTickUnits(java.util.Locale)" class="org.jfree.chart.axis.LogAxis" />
	<method signature="double calculateLog(double)" class="org.jfree.chart.axis.LogAxis" />
	<method signature="java.util.List refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.axis.LogAxis" />
	<method signature="void setNumberFormatOverride(java.text.NumberFormat)" class="org.jfree.chart.axis.LogAxis" />
	<method signature="org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.axis.LogAxis" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.chart.axis.LogAxis" />
	<method signature="void setSmallestValue(double)" class="org.jfree.chart.axis.LogAxis" />
	<method signature="double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.axis.LogAxis" />
	<method signature="void zoomRange(double,double)" class="org.jfree.chart.axis.LogAxis" />
	<method signature="org.jfree.chart.axis.NumberTickUnit getTickUnit()" class="org.jfree.chart.axis.LogAxis" />
	<class name="org.jfree.chart.renderer.RendererState" />
	<method signature="void &lt;init&gt;(org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.renderer.RendererState" />
	<method signature="org.jfree.chart.plot.PlotRenderingInfo getInfo()" class="org.jfree.chart.renderer.RendererState" />
	<method signature="org.jfree.chart.entity.EntityCollection getEntityCollection()" class="org.jfree.chart.renderer.RendererState" />
	<class name="freemarker.ext.beans.BeansModelCache" />
	<class name="org.apache.xerces.stax.events.StartElementImpl" />
	<method signature="java.util.Iterator getAttributes()" class="org.apache.xerces.stax.events.StartElementImpl" />
	<method signature="void &lt;init&gt;(javax.xml.namespace.QName,java.util.Iterator,java.util.Iterator,javax.xml.namespace.NamespaceContext,javax.xml.stream.Location)" class="org.apache.xerces.stax.events.StartElementImpl" />
	<method signature="javax.xml.namespace.NamespaceContext getNamespaceContext()" class="org.apache.xerces.stax.events.StartElementImpl" />
	<method signature="void writeAsEncodedUnicode(java.io.Writer)" class="org.apache.xerces.stax.events.StartElementImpl" />
	<method signature="java.lang.String getNamespaceURI(java.lang.String)" class="org.apache.xerces.stax.events.StartElementImpl" />
	<method signature="javax.xml.stream.events.Attribute getAttributeByName(javax.xml.namespace.QName)" class="org.apache.xerces.stax.events.StartElementImpl" />
	<class name="org.apache.commons.lang3.text.translate.OctalUnescaper" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.text.translate.OctalUnescaper" />
	<method signature="int translate(java.lang.CharSequence,int,java.io.Writer)" class="org.apache.commons.lang3.text.translate.OctalUnescaper" />
	<class name="org.apache.xerces.xs.XSAttributeGroupDefinition" />
	<method signature="org.apache.xerces.xs.XSObjectList getAttributeUses()" class="org.apache.xerces.xs.XSAttributeGroupDefinition" />
	<method signature="org.apache.xerces.xs.XSWildcard getAttributeWildcard()" class="org.apache.xerces.xs.XSAttributeGroupDefinition" />
	<method signature="org.apache.xerces.xs.XSAnnotation getAnnotation()" class="org.apache.xerces.xs.XSAttributeGroupDefinition" />
	<method signature="org.apache.xerces.xs.XSObjectList getAnnotations()" class="org.apache.xerces.xs.XSAttributeGroupDefinition" />
	<class name="javax.annotation.Detainted" />
	<class name="org.apache.xerces.util.SAXLocatorWrapper" />
	<method signature="org.xml.sax.Locator getLocator()" class="org.apache.xerces.util.SAXLocatorWrapper" />
	<method signature="int getLineNumber()" class="org.apache.xerces.util.SAXLocatorWrapper" />
	<method signature="void setLocator(org.xml.sax.Locator)" class="org.apache.xerces.util.SAXLocatorWrapper" />
	<method signature="java.lang.String getPublicId()" class="org.apache.xerces.util.SAXLocatorWrapper" />
	<method signature="java.lang.String getLiteralSystemId()" class="org.apache.xerces.util.SAXLocatorWrapper" />
	<method signature="java.lang.String getBaseSystemId()" class="org.apache.xerces.util.SAXLocatorWrapper" />
	<method signature="java.lang.String getEncoding()" class="org.apache.xerces.util.SAXLocatorWrapper" />
	<method signature="int getCharacterOffset()" class="org.apache.xerces.util.SAXLocatorWrapper" />
	<method signature="java.lang.String getExpandedSystemId()" class="org.apache.xerces.util.SAXLocatorWrapper" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.util.SAXLocatorWrapper" />
	<method signature="int getColumnNumber()" class="org.apache.xerces.util.SAXLocatorWrapper" />
	<method signature="java.lang.String getXMLVersion()" class="org.apache.xerces.util.SAXLocatorWrapper" />
	<class name="com.swabunga.spell.engine.PropertyConfiguration" />
	<method signature="boolean getBoolean(java.lang.String)" class="com.swabunga.spell.engine.PropertyConfiguration" />
	<method signature="void save()" class="com.swabunga.spell.engine.PropertyConfiguration" />
	<method signature="void setBoolean(java.lang.String,boolean)" class="com.swabunga.spell.engine.PropertyConfiguration" />
	<method signature="void &lt;init&gt;()" class="com.swabunga.spell.engine.PropertyConfiguration" />
	<method signature="int getInteger(java.lang.String)" class="com.swabunga.spell.engine.PropertyConfiguration" />
	<method signature="void setInteger(java.lang.String,int)" class="com.swabunga.spell.engine.PropertyConfiguration" />
	<class name="org.jfree.ui.Size2D" />
	<method signature="void setWidth(double)" class="org.jfree.ui.Size2D" />
	<method signature="void setHeight(double)" class="org.jfree.ui.Size2D" />
	<method signature="java.lang.Object clone()" class="org.jfree.ui.Size2D" />
	<method signature="double getHeight()" class="org.jfree.ui.Size2D" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.ui.Size2D" />
	<method signature="void &lt;init&gt;()" class="org.jfree.ui.Size2D" />
	<method signature="java.lang.String toString()" class="org.jfree.ui.Size2D" />
	<method signature="double getWidth()" class="org.jfree.ui.Size2D" />
	<method signature="void &lt;init&gt;(double,double)" class="org.jfree.ui.Size2D" />
	<class name="teamma.data.PlayerType" />
	<method signature="teamma.data.SkillType getSingle(int)" class="teamma.data.PlayerType" />
	<method signature="int getSkillCount()" class="teamma.data.PlayerType" />
	<method signature="int getCost()" class="teamma.data.PlayerType" />
	<method signature="void setStrength(int)" class="teamma.data.PlayerType" />
	<method signature="void setMovement(int)" class="teamma.data.PlayerType" />
	<method signature="int getSingleCount()" class="teamma.data.PlayerType" />
	<method signature="int getArmor()" class="teamma.data.PlayerType" />
	<method signature="void setPosition(java.lang.String)" class="teamma.data.PlayerType" />
	<method signature="void setCost(int)" class="teamma.data.PlayerType" />
	<method signature="void setArmor(int)" class="teamma.data.PlayerType" />
	<method signature="int getStrength()" class="teamma.data.PlayerType" />
	<method signature="int getDoubleCount()" class="teamma.data.PlayerType" />
	<method signature="boolean containedByDouble(teamma.data.SkillType)" class="teamma.data.PlayerType" />
	<method signature="void setAgility(int)" class="teamma.data.PlayerType" />
	<method signature="void addSkill(teamma.data.Skill)" class="teamma.data.PlayerType" />
	<method signature="void setLimit(int)" class="teamma.data.PlayerType" />
	<method signature="void addSingle(teamma.data.SkillType)" class="teamma.data.PlayerType" />
	<method signature="void addDouble(teamma.data.SkillType)" class="teamma.data.PlayerType" />
	<method signature="java.lang.String getPosition()" class="teamma.data.PlayerType" />
	<method signature="int getLimit()" class="teamma.data.PlayerType" />
	<method signature="boolean containedBySingle(teamma.data.SkillType)" class="teamma.data.PlayerType" />
	<method signature="teamma.data.SkillType getDouble(int)" class="teamma.data.PlayerType" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="teamma.data.PlayerType" />
	<method signature="teamma.data.Skill getSkill(int)" class="teamma.data.PlayerType" />
	<method signature="int getAgility()" class="teamma.data.PlayerType" />
	<method signature="int getMovement()" class="teamma.data.PlayerType" />
	<class name="tourma.utility.ExtensionFileFilter" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String[])" class="tourma.utility.ExtensionFileFilter" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="tourma.utility.ExtensionFileFilter" />
	<method signature="void setDescription(java.lang.String)" class="tourma.utility.ExtensionFileFilter" />
	<method signature="java.lang.String getDescription()" class="tourma.utility.ExtensionFileFilter" />
	<method signature="boolean accept(java.io.File)" class="tourma.utility.ExtensionFileFilter" />
	<class name="org.jfree.chart.renderer.xy.StandardXYItemRenderer$State" />
	<method signature="void &lt;init&gt;(org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.renderer.xy.StandardXYItemRenderer$State" />
	<method signature="void setSeriesIndex(int)" class="org.jfree.chart.renderer.xy.StandardXYItemRenderer$State" />
	<method signature="boolean isLastPointGood()" class="org.jfree.chart.renderer.xy.StandardXYItemRenderer$State" />
	<method signature="int getSeriesIndex()" class="org.jfree.chart.renderer.xy.StandardXYItemRenderer$State" />
	<method signature="void setLastPointGood(boolean)" class="org.jfree.chart.renderer.xy.StandardXYItemRenderer$State" />
	<class name="org.apache.commons.lang3.concurrent.ConcurrentInitializer" />
	<method signature="java.lang.Object get()" class="org.apache.commons.lang3.concurrent.ConcurrentInitializer" />
	<class name="javax.xml.transform.URIResolver" />
	<method signature="javax.xml.transform.Source resolve(java.lang.String,java.lang.String)" class="javax.xml.transform.URIResolver" />
	<class name="org.jfree.chart.block.LabelBlock" />
	<method signature="void &lt;init&gt;(java.lang.String,java.awt.Font)" class="org.jfree.chart.block.LabelBlock" />
	<method signature="java.awt.Paint getPaint()" class="org.jfree.chart.block.LabelBlock" />
	<method signature="org.jfree.ui.Size2D arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" class="org.jfree.chart.block.LabelBlock" />
	<method signature="java.awt.Font getFont()" class="org.jfree.chart.block.LabelBlock" />
	<method signature="void setContentAlignmentPoint(org.jfree.text.TextBlockAnchor)" class="org.jfree.chart.block.LabelBlock" />
	<method signature="java.lang.String getURLText()" class="org.jfree.chart.block.LabelBlock" />
	<method signature="void setPaint(java.awt.Paint)" class="org.jfree.chart.block.LabelBlock" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.block.LabelBlock" />
	<method signature="void setToolTipText(java.lang.String)" class="org.jfree.chart.block.LabelBlock" />
	<method signature="org.jfree.text.TextBlockAnchor getContentAlignmentPoint()" class="org.jfree.chart.block.LabelBlock" />
	<method signature="java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)" class="org.jfree.chart.block.LabelBlock" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.block.LabelBlock" />
	<method signature="void setFont(java.awt.Font)" class="org.jfree.chart.block.LabelBlock" />
	<method signature="void setURLText(java.lang.String)" class="org.jfree.chart.block.LabelBlock" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.chart.block.LabelBlock" />
	<method signature="void &lt;init&gt;(java.lang.String,java.awt.Font,java.awt.Paint)" class="org.jfree.chart.block.LabelBlock" />
	<method signature="void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" class="org.jfree.chart.block.LabelBlock" />
	<method signature="java.lang.String getToolTipText()" class="org.jfree.chart.block.LabelBlock" />
	<method signature="org.jfree.ui.RectangleAnchor getTextAnchor()" class="org.jfree.chart.block.LabelBlock" />
	<method signature="void setTextAnchor(org.jfree.ui.RectangleAnchor)" class="org.jfree.chart.block.LabelBlock" />
	<class name="org.jfree.data.gantt.SlidingGanttCategoryDataset" />
	<method signature="java.lang.Number getStartValue(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.gantt.SlidingGanttCategoryDataset" />
	<method signature="int getSubIntervalCount(int,int)" class="org.jfree.data.gantt.SlidingGanttCategoryDataset" />
	<method signature="java.lang.Number getValue(int,int)" class="org.jfree.data.gantt.SlidingGanttCategoryDataset" />
	<method signature="java.util.List getColumnKeys()" class="org.jfree.data.gantt.SlidingGanttCategoryDataset" />
	<method signature="void setFirstCategoryIndex(int)" class="org.jfree.data.gantt.SlidingGanttCategoryDataset" />
	<method signature="int getSubIntervalCount(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.gantt.SlidingGanttCategoryDataset" />
	<method signature="java.lang.Number getPercentComplete(int,int)" class="org.jfree.data.gantt.SlidingGanttCategoryDataset" />
	<method signature="java.util.List getRowKeys()" class="org.jfree.data.gantt.SlidingGanttCategoryDataset" />
	<method signature="java.lang.Number getEndValue(java.lang.Comparable,java.lang.Comparable,int)" class="org.jfree.data.gantt.SlidingGanttCategoryDataset" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.gantt.SlidingGanttCategoryDataset" />
	<method signature="java.lang.Number getPercentComplete(java.lang.Comparable,java.lang.Comparable,int)" class="org.jfree.data.gantt.SlidingGanttCategoryDataset" />
	<method signature="java.lang.Number getEndValue(int,int)" class="org.jfree.data.gantt.SlidingGanttCategoryDataset" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.gantt.SlidingGanttCategoryDataset" />
	<method signature="void setMaximumCategoryCount(int)" class="org.jfree.data.gantt.SlidingGanttCategoryDataset" />
	<method signature="java.lang.Number getStartValue(int,int,int)" class="org.jfree.data.gantt.SlidingGanttCategoryDataset" />
	<method signature="int getRowCount()" class="org.jfree.data.gantt.SlidingGanttCategoryDataset" />
	<method signature="int getColumnCount()" class="org.jfree.data.gantt.SlidingGanttCategoryDataset" />
	<method signature="java.lang.Number getValue(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.gantt.SlidingGanttCategoryDataset" />
	<method signature="org.jfree.data.gantt.GanttCategoryDataset getUnderlyingDataset()" class="org.jfree.data.gantt.SlidingGanttCategoryDataset" />
	<method signature="java.lang.Number getStartValue(int,int)" class="org.jfree.data.gantt.SlidingGanttCategoryDataset" />
	<method signature="java.lang.Number getEndValue(int,int,int)" class="org.jfree.data.gantt.SlidingGanttCategoryDataset" />
	<method signature="int getFirstCategoryIndex()" class="org.jfree.data.gantt.SlidingGanttCategoryDataset" />
	<method signature="java.lang.Comparable getColumnKey(int)" class="org.jfree.data.gantt.SlidingGanttCategoryDataset" />
	<method signature="void &lt;init&gt;(org.jfree.data.gantt.GanttCategoryDataset,int,int)" class="org.jfree.data.gantt.SlidingGanttCategoryDataset" />
	<method signature="java.lang.Number getPercentComplete(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.gantt.SlidingGanttCategoryDataset" />
	<method signature="java.lang.Number getEndValue(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.gantt.SlidingGanttCategoryDataset" />
	<method signature="java.lang.Comparable getRowKey(int)" class="org.jfree.data.gantt.SlidingGanttCategoryDataset" />
	<method signature="int getRowIndex(java.lang.Comparable)" class="org.jfree.data.gantt.SlidingGanttCategoryDataset" />
	<method signature="java.lang.Number getPercentComplete(int,int,int)" class="org.jfree.data.gantt.SlidingGanttCategoryDataset" />
	<method signature="int getMaximumCategoryCount()" class="org.jfree.data.gantt.SlidingGanttCategoryDataset" />
	<method signature="int getColumnIndex(java.lang.Comparable)" class="org.jfree.data.gantt.SlidingGanttCategoryDataset" />
	<method signature="java.lang.Number getStartValue(java.lang.Comparable,java.lang.Comparable,int)" class="org.jfree.data.gantt.SlidingGanttCategoryDataset" />
	<class name="org.jfree.chart.plot.CategoryMarker" />
	<method signature="void setDrawAsLine(boolean)" class="org.jfree.chart.plot.CategoryMarker" />
	<method signature="void &lt;init&gt;(java.lang.Comparable)" class="org.jfree.chart.plot.CategoryMarker" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.plot.CategoryMarker" />
	<method signature="void setKey(java.lang.Comparable)" class="org.jfree.chart.plot.CategoryMarker" />
	<method signature="void &lt;init&gt;(java.lang.Comparable,java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)" class="org.jfree.chart.plot.CategoryMarker" />
	<method signature="boolean getDrawAsLine()" class="org.jfree.chart.plot.CategoryMarker" />
	<method signature="void &lt;init&gt;(java.lang.Comparable,java.awt.Paint,java.awt.Stroke)" class="org.jfree.chart.plot.CategoryMarker" />
	<method signature="java.lang.Comparable getKey()" class="org.jfree.chart.plot.CategoryMarker" />
	<class name="org.w3c.dom.css.CSSMediaRule" />
	<method signature="org.w3c.dom.stylesheets.MediaList getMedia()" class="org.w3c.dom.css.CSSMediaRule" />
	<method signature="org.w3c.dom.css.CSSRuleList getCssRules()" class="org.w3c.dom.css.CSSMediaRule" />
	<method signature="void deleteRule(int)" class="org.w3c.dom.css.CSSMediaRule" />
	<method signature="int insertRule(java.lang.String,int)" class="org.w3c.dom.css.CSSMediaRule" />
	<class name="org.apache.xerces.dom.DeferredElementNSImpl" />
	<method signature="int getNodeIndex()" class="org.apache.xerces.dom.DeferredElementNSImpl" />
	<class name="org.jfree.ui.LengthLimitingDocument" />
	<method signature="int getMaxLength()" class="org.jfree.ui.LengthLimitingDocument" />
	<method signature="void &lt;init&gt;(int)" class="org.jfree.ui.LengthLimitingDocument" />
	<method signature="void setMaxLength(int)" class="org.jfree.ui.LengthLimitingDocument" />
	<method signature="void insertString(int,java.lang.String,javax.swing.text.AttributeSet)" class="org.jfree.ui.LengthLimitingDocument" />
	<method signature="void &lt;init&gt;()" class="org.jfree.ui.LengthLimitingDocument" />
	<class name="org.unbescape.json.JsonEscapeLevel" />
	<method signature="int getEscapeLevel()" class="org.unbescape.json.JsonEscapeLevel" />
	<method signature="org.unbescape.json.JsonEscapeLevel[] values()" class="org.unbescape.json.JsonEscapeLevel" />
	<method signature="org.unbescape.json.JsonEscapeLevel valueOf(java.lang.String)" class="org.unbescape.json.JsonEscapeLevel" />
	<method signature="org.unbescape.json.JsonEscapeLevel forLevel(int)" class="org.unbescape.json.JsonEscapeLevel" />
	<class name="freemarker.log.SLF4JLoggerFactory" />
	<method signature="void &lt;init&gt;()" class="freemarker.log.SLF4JLoggerFactory" />
	<method signature="freemarker.log.Logger getLogger(java.lang.String)" class="freemarker.log.SLF4JLoggerFactory" />
	<class name="org.jfree.chart.renderer.PaintScale" />
	<method signature="double getLowerBound()" class="org.jfree.chart.renderer.PaintScale" />
	<method signature="double getUpperBound()" class="org.jfree.chart.renderer.PaintScale" />
	<method signature="java.awt.Paint getPaint(double)" class="org.jfree.chart.renderer.PaintScale" />
	<class name="org.apache.commons.lang3.concurrent.AtomicInitializer" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.concurrent.AtomicInitializer" />
	<method signature="java.lang.Object get()" class="org.apache.commons.lang3.concurrent.AtomicInitializer" />
	<class name="org.jfree.util.FastStack" />
	<method signature="int size()" class="org.jfree.util.FastStack" />
	<method signature="java.lang.Object clone()" class="org.jfree.util.FastStack" />
	<method signature="void &lt;init&gt;(int)" class="org.jfree.util.FastStack" />
	<method signature="void clear()" class="org.jfree.util.FastStack" />
	<method signature="java.lang.Object get(int)" class="org.jfree.util.FastStack" />
	<method signature="boolean isEmpty()" class="org.jfree.util.FastStack" />
	<method signature="void &lt;init&gt;()" class="org.jfree.util.FastStack" />
	<method signature="java.lang.Object peek()" class="org.jfree.util.FastStack" />
	<method signature="java.lang.Object pop()" class="org.jfree.util.FastStack" />
	<method signature="void push(java.lang.Object)" class="org.jfree.util.FastStack" />
	<class name="org.jfree.chart.labels.XYSeriesLabelGenerator" />
	<method signature="java.lang.String generateLabel(org.jfree.data.xy.XYDataset,int)" class="org.jfree.chart.labels.XYSeriesLabelGenerator" />
	<class name="org.jfree.data.category.DefaultCategoryDataset" />
	<method signature="java.lang.Number getValue(int,int)" class="org.jfree.data.category.DefaultCategoryDataset" />
	<method signature="java.util.List getColumnKeys()" class="org.jfree.data.category.DefaultCategoryDataset" />
	<method signature="void removeRow(int)" class="org.jfree.data.category.DefaultCategoryDataset" />
	<method signature="java.util.List getRowKeys()" class="org.jfree.data.category.DefaultCategoryDataset" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.category.DefaultCategoryDataset" />
	<method signature="void removeRow(java.lang.Comparable)" class="org.jfree.data.category.DefaultCategoryDataset" />
	<method signature="void clear()" class="org.jfree.data.category.DefaultCategoryDataset" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.category.DefaultCategoryDataset" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.category.DefaultCategoryDataset" />
	<method signature="int getRowCount()" class="org.jfree.data.category.DefaultCategoryDataset" />
	<method signature="void setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.category.DefaultCategoryDataset" />
	<method signature="void setValue(double,java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.category.DefaultCategoryDataset" />
	<method signature="void removeValue(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.category.DefaultCategoryDataset" />
	<method signature="int getColumnCount()" class="org.jfree.data.category.DefaultCategoryDataset" />
	<method signature="java.lang.Number getValue(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.category.DefaultCategoryDataset" />
	<method signature="int hashCode()" class="org.jfree.data.category.DefaultCategoryDataset" />
	<method signature="void incrementValue(double,java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.category.DefaultCategoryDataset" />
	<method signature="java.lang.Comparable getColumnKey(int)" class="org.jfree.data.category.DefaultCategoryDataset" />
	<method signature="void removeColumn(int)" class="org.jfree.data.category.DefaultCategoryDataset" />
	<method signature="void addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.category.DefaultCategoryDataset" />
	<method signature="java.lang.Comparable getRowKey(int)" class="org.jfree.data.category.DefaultCategoryDataset" />
	<method signature="void addValue(double,java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.category.DefaultCategoryDataset" />
	<method signature="int getRowIndex(java.lang.Comparable)" class="org.jfree.data.category.DefaultCategoryDataset" />
	<method signature="void removeColumn(java.lang.Comparable)" class="org.jfree.data.category.DefaultCategoryDataset" />
	<method signature="int getColumnIndex(java.lang.Comparable)" class="org.jfree.data.category.DefaultCategoryDataset" />
	<class name="org.apache.xerces.impl.XMLNSDocumentScannerImpl$NSContentDispatcher" />
	<class name="freemarker.template.utility.DeepUnwrap" />
	<method signature="java.lang.Object premissiveUnwrap(freemarker.template.TemplateModel)" class="freemarker.template.utility.DeepUnwrap" />
	<method signature="void &lt;init&gt;()" class="freemarker.template.utility.DeepUnwrap" />
	<method signature="java.lang.Object unwrap(freemarker.template.TemplateModel)" class="freemarker.template.utility.DeepUnwrap" />
	<method signature="java.lang.Object permissiveUnwrap(freemarker.template.TemplateModel)" class="freemarker.template.utility.DeepUnwrap" />
	<class name="org.jdom2.input.sax.package-info" />
	<class name="org.apache.xerces.impl.xpath.XPath$Axis" />
	<method signature="java.lang.Object clone()" class="org.apache.xerces.impl.xpath.XPath$Axis" />
	<method signature="java.lang.String toString()" class="org.apache.xerces.impl.xpath.XPath$Axis" />
	<method signature="void &lt;init&gt;(short)" class="org.apache.xerces.impl.xpath.XPath$Axis" />
	<class name="org.jfree.ui.FontChooserDialog" />
	<method signature="java.awt.Font getSelectedFont()" class="org.jfree.ui.FontChooserDialog" />
	<method signature="void &lt;init&gt;(java.awt.Frame,java.lang.String,boolean,java.awt.Font)" class="org.jfree.ui.FontChooserDialog" />
	<method signature="void &lt;init&gt;(java.awt.Dialog,java.lang.String,boolean,java.awt.Font)" class="org.jfree.ui.FontChooserDialog" />
	<class name="com.google.zxing.multi.ByQuadrantReader" />
	<method signature="void &lt;init&gt;(com.google.zxing.Reader)" class="com.google.zxing.multi.ByQuadrantReader" />
	<method signature="com.google.zxing.Result decode(com.google.zxing.BinaryBitmap)" class="com.google.zxing.multi.ByQuadrantReader" />
	<method signature="void reset()" class="com.google.zxing.multi.ByQuadrantReader" />
	<method signature="com.google.zxing.Result decode(com.google.zxing.BinaryBitmap,java.util.Map)" class="com.google.zxing.multi.ByQuadrantReader" />
	<class name="org.apache.xerces.impl.xs.XSModelImpl" />
	<method signature="int size()" class="org.apache.xerces.impl.xs.XSModelImpl" />
	<method signature="org.apache.xerces.xs.XSElementDeclaration getElementDeclaration(java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.XSModelImpl" />
	<method signature="org.apache.xerces.xs.XSNotationDeclaration getNotationDeclaration(java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.XSModelImpl" />
	<method signature="boolean hasIDConstraints()" class="org.apache.xerces.impl.xs.XSModelImpl" />
	<method signature="org.apache.xerces.xs.XSTypeDefinition getTypeDefinition(java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.XSModelImpl" />
	<method signature="org.apache.xerces.xs.XSModelGroupDefinition getModelGroupDefinition(java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.XSModelImpl" />
	<method signature="org.apache.xerces.xs.XSNamedMap getComponentsByNamespace(short,java.lang.String)" class="org.apache.xerces.impl.xs.XSModelImpl" />
	<method signature="org.apache.xerces.xs.XSAttributeGroupDefinition getAttributeGroup(java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.XSModelImpl" />
	<method signature="int getLength()" class="org.apache.xerces.impl.xs.XSModelImpl" />
	<method signature="org.apache.xerces.xs.XSModelGroupDefinition getModelGroupDefinition(java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.XSModelImpl" />
	<method signature="java.lang.Object get(int)" class="org.apache.xerces.impl.xs.XSModelImpl" />
	<method signature="org.apache.xerces.xs.XSIDCDefinition getIDCDefinition(java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.XSModelImpl" />
	<method signature="org.apache.xerces.xs.XSTypeDefinition getTypeDefinition(java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.XSModelImpl" />
	<method signature="org.apache.xerces.xs.XSNotationDeclaration getNotationDeclaration(java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.XSModelImpl" />
	<method signature="void &lt;init&gt;(org.apache.xerces.impl.xs.SchemaGrammar[],short)" class="org.apache.xerces.impl.xs.XSModelImpl" />
	<method signature="org.apache.xerces.xs.XSAttributeDeclaration getAttributeDeclaration(java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.XSModelImpl" />
	<method signature="org.apache.xerces.xs.XSNamespaceItemList getNamespaceItems()" class="org.apache.xerces.impl.xs.XSModelImpl" />
	<method signature="org.apache.xerces.xs.XSIDCDefinition getIDCDefinition(java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.XSModelImpl" />
	<method signature="org.apache.xerces.xs.XSNamespaceItem item(int)" class="org.apache.xerces.impl.xs.XSModelImpl" />
	<method signature="org.apache.xerces.xs.XSObjectList getAnnotations()" class="org.apache.xerces.impl.xs.XSModelImpl" />
	<method signature="org.apache.xerces.xs.XSNamedMap getComponents(short)" class="org.apache.xerces.impl.xs.XSModelImpl" />
	<method signature="org.apache.xerces.xs.XSAttributeDeclaration getAttributeDeclaration(java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.XSModelImpl" />
	<method signature="java.util.ListIterator listIterator(int)" class="org.apache.xerces.impl.xs.XSModelImpl" />
	<method signature="void &lt;init&gt;(org.apache.xerces.impl.xs.SchemaGrammar[])" class="org.apache.xerces.impl.xs.XSModelImpl" />
	<method signature="java.util.ListIterator listIterator()" class="org.apache.xerces.impl.xs.XSModelImpl" />
	<method signature="java.util.Iterator iterator()" class="org.apache.xerces.impl.xs.XSModelImpl" />
	<method signature="org.apache.xerces.xs.StringList getNamespaces()" class="org.apache.xerces.impl.xs.XSModelImpl" />
	<method signature="org.apache.xerces.xs.XSObjectList getSubstitutionGroup(org.apache.xerces.xs.XSElementDeclaration)" class="org.apache.xerces.impl.xs.XSModelImpl" />
	<method signature="java.lang.Object[] toArray(java.lang.Object[])" class="org.apache.xerces.impl.xs.XSModelImpl" />
	<method signature="org.apache.xerces.xs.XSElementDeclaration getElementDeclaration(java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.XSModelImpl" />
	<method signature="org.apache.xerces.xs.XSAttributeGroupDefinition getAttributeGroup(java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.XSModelImpl" />
	<method signature="java.lang.Object[] toArray()" class="org.apache.xerces.impl.xs.XSModelImpl" />
	<class name="org.jfree.chart.plot.Pannable" />
	<method signature="org.jfree.chart.plot.PlotOrientation getOrientation()" class="org.jfree.chart.plot.Pannable" />
	<method signature="boolean isRangePannable()" class="org.jfree.chart.plot.Pannable" />
	<method signature="void panDomainAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" class="org.jfree.chart.plot.Pannable" />
	<method signature="void panRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" class="org.jfree.chart.plot.Pannable" />
	<method signature="boolean isDomainPannable()" class="org.jfree.chart.plot.Pannable" />
	<class name="org.jfree.ui.FloatDimension" />
	<method signature="void setSize(double,double)" class="org.jfree.ui.FloatDimension" />
	<method signature="int hashCode()" class="org.jfree.ui.FloatDimension" />
	<method signature="double getHeight()" class="org.jfree.ui.FloatDimension" />
	<method signature="void setWidth(double)" class="org.jfree.ui.FloatDimension" />
	<method signature="void setHeight(double)" class="org.jfree.ui.FloatDimension" />
	<method signature="java.lang.Object clone()" class="org.jfree.ui.FloatDimension" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.ui.FloatDimension" />
	<method signature="void &lt;init&gt;()" class="org.jfree.ui.FloatDimension" />
	<method signature="void &lt;init&gt;(org.jfree.ui.FloatDimension)" class="org.jfree.ui.FloatDimension" />
	<method signature="java.lang.String toString()" class="org.jfree.ui.FloatDimension" />
	<method signature="double getWidth()" class="org.jfree.ui.FloatDimension" />
	<method signature="void &lt;init&gt;(float,float)" class="org.jfree.ui.FloatDimension" />
	<class name="com.google.zxing.client.result.SMSMMSResultParser" />
	<method signature="com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result)" class="com.google.zxing.client.result.SMSMMSResultParser" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.client.result.SMSMMSResultParser" />
	<method signature="com.google.zxing.client.result.SMSParsedResult parse(com.google.zxing.Result)" class="com.google.zxing.client.result.SMSMMSResultParser" />
	<class name="org.apache.xerces.dom.PSVIDOMImplementationImpl" />
	<method signature="org.w3c.dom.DOMImplementation getDOMImplementation()" class="org.apache.xerces.dom.PSVIDOMImplementationImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.dom.PSVIDOMImplementationImpl" />
	<method signature="boolean hasFeature(java.lang.String,java.lang.String)" class="org.apache.xerces.dom.PSVIDOMImplementationImpl" />
	<class name="org.jdom2.internal.ArrayCopy" />
	<method signature="boolean[] copyOf(boolean[],int)" class="org.jdom2.internal.ArrayCopy" />
	<method signature="java.lang.Object[] copyOf(java.lang.Object[],int)" class="org.jdom2.internal.ArrayCopy" />
	<method signature="char[] copyOf(char[],int)" class="org.jdom2.internal.ArrayCopy" />
	<method signature="int[] copyOf(int[],int)" class="org.jdom2.internal.ArrayCopy" />
	<method signature="java.lang.Object[] copyOfRange(java.lang.Object[],int,int)" class="org.jdom2.internal.ArrayCopy" />
	<class name="org.jfree.ui.about.SystemProperties" />
	<method signature="org.jfree.ui.SortableTable createSystemPropertiesTable()" class="org.jfree.ui.about.SystemProperties" />
	<class name="org.jdom2.xpath.XPathHelper" />
	<method signature="java.lang.String getRelativePath(org.jdom2.Content,org.jdom2.Attribute)" class="org.jdom2.xpath.XPathHelper" />
	<method signature="java.lang.String getRelativePath(org.jdom2.Attribute,org.jdom2.Content)" class="org.jdom2.xpath.XPathHelper" />
	<method signature="java.lang.String getAbsolutePath(org.jdom2.Content)" class="org.jdom2.xpath.XPathHelper" />
	<method signature="java.lang.String getRelativePath(org.jdom2.Attribute,org.jdom2.Attribute)" class="org.jdom2.xpath.XPathHelper" />
	<method signature="java.lang.String getAbsolutePath(org.jdom2.Attribute)" class="org.jdom2.xpath.XPathHelper" />
	<method signature="java.lang.String getRelativePath(org.jdom2.Content,org.jdom2.Content)" class="org.jdom2.xpath.XPathHelper" />
	<class name="com.google.zxing.oned.EAN13Writer" />
	<method signature="com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map)" class="com.google.zxing.oned.EAN13Writer" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.oned.EAN13Writer" />
	<method signature="boolean[] encode(java.lang.String)" class="com.google.zxing.oned.EAN13Writer" />
	<class name="org.jfree.chart.renderer.xy.XYItemRendererState" />
	<method signature="void &lt;init&gt;(org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.renderer.xy.XYItemRendererState" />
	<method signature="int getLastItemIndex()" class="org.jfree.chart.renderer.xy.XYItemRendererState" />
	<method signature="boolean getProcessVisibleItemsOnly()" class="org.jfree.chart.renderer.xy.XYItemRendererState" />
	<method signature="void setProcessVisibleItemsOnly(boolean)" class="org.jfree.chart.renderer.xy.XYItemRendererState" />
	<method signature="void startSeriesPass(org.jfree.data.xy.XYDataset,int,int,int,int,int)" class="org.jfree.chart.renderer.xy.XYItemRendererState" />
	<method signature="void endSeriesPass(org.jfree.data.xy.XYDataset,int,int,int,int,int)" class="org.jfree.chart.renderer.xy.XYItemRendererState" />
	<method signature="int getFirstItemIndex()" class="org.jfree.chart.renderer.xy.XYItemRendererState" />
	<class name="org.jfree.data.RangeType" />
	<method signature="int hashCode()" class="org.jfree.data.RangeType" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.RangeType" />
	<method signature="java.lang.String toString()" class="org.jfree.data.RangeType" />
	<class name="org.jfree.util.StackableRuntimeException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Exception)" class="org.jfree.util.StackableRuntimeException" />
	<method signature="void &lt;init&gt;()" class="org.jfree.util.StackableRuntimeException" />
	<method signature="java.lang.Exception getParent()" class="org.jfree.util.StackableRuntimeException" />
	<method signature="void printStackTrace(java.io.PrintWriter)" class="org.jfree.util.StackableRuntimeException" />
	<method signature="void printStackTrace(java.io.PrintStream)" class="org.jfree.util.StackableRuntimeException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.util.StackableRuntimeException" />
	<class name="javax.xml.transform.stax.StAXSource" />
	<method signature="java.lang.String getSystemId()" class="javax.xml.transform.stax.StAXSource" />
	<method signature="void setSystemId(java.lang.String)" class="javax.xml.transform.stax.StAXSource" />
	<method signature="void &lt;init&gt;(javax.xml.stream.XMLStreamReader)" class="javax.xml.transform.stax.StAXSource" />
	<method signature="javax.xml.stream.XMLStreamReader getXMLStreamReader()" class="javax.xml.transform.stax.StAXSource" />
	<method signature="javax.xml.stream.XMLEventReader getXMLEventReader()" class="javax.xml.transform.stax.StAXSource" />
	<method signature="void &lt;init&gt;(javax.xml.stream.XMLEventReader)" class="javax.xml.transform.stax.StAXSource" />
	<class name="org.apache.xerces.util.DOMErrorHandlerWrapper" />
	<method signature="void error(java.lang.String,java.lang.String,org.apache.xerces.xni.parser.XMLParseException)" class="org.apache.xerces.util.DOMErrorHandlerWrapper" />
	<method signature="org.w3c.dom.DOMErrorHandler getErrorHandler()" class="org.apache.xerces.util.DOMErrorHandlerWrapper" />
	<method signature="void setErrorHandler(org.w3c.dom.DOMErrorHandler)" class="org.apache.xerces.util.DOMErrorHandlerWrapper" />
	<method signature="boolean handleError(org.w3c.dom.DOMError)" class="org.apache.xerces.util.DOMErrorHandlerWrapper" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.util.DOMErrorHandlerWrapper" />
	<method signature="void warning(java.lang.String,java.lang.String,org.apache.xerces.xni.parser.XMLParseException)" class="org.apache.xerces.util.DOMErrorHandlerWrapper" />
	<method signature="void fatalError(java.lang.String,java.lang.String,org.apache.xerces.xni.parser.XMLParseException)" class="org.apache.xerces.util.DOMErrorHandlerWrapper" />
	<method signature="void &lt;init&gt;(org.w3c.dom.DOMErrorHandler)" class="org.apache.xerces.util.DOMErrorHandlerWrapper" />
	<class name="org.jfree.chart.renderer.category.BarRenderer" />
	<method signature="void setMinimumBarLength(double)" class="org.jfree.chart.renderer.category.BarRenderer" />
	<method signature="org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset,boolean)" class="org.jfree.chart.renderer.category.BarRenderer" />
	<method signature="double getBase()" class="org.jfree.chart.renderer.category.BarRenderer" />
	<method signature="double getMinimumBarLength()" class="org.jfree.chart.renderer.category.BarRenderer" />
	<method signature="void setGradientPaintTransformer(org.jfree.ui.GradientPaintTransformer)" class="org.jfree.chart.renderer.category.BarRenderer" />
	<method signature="org.jfree.chart.LegendItem getLegendItem(int,int)" class="org.jfree.chart.renderer.category.BarRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.category.BarRenderer" />
	<method signature="double getItemMargin()" class="org.jfree.chart.renderer.category.BarRenderer" />
	<method signature="void setNegativeItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)" class="org.jfree.chart.renderer.category.BarRenderer" />
	<method signature="void setMaximumBarWidth(double)" class="org.jfree.chart.renderer.category.BarRenderer" />
	<method signature="void setBarPainter(org.jfree.chart.renderer.category.BarPainter)" class="org.jfree.chart.renderer.category.BarRenderer" />
	<method signature="boolean getDefaultShadowsVisible()" class="org.jfree.chart.renderer.category.BarRenderer" />
	<method signature="void setBase(double)" class="org.jfree.chart.renderer.category.BarRenderer" />
	<method signature="void setShadowPaint(java.awt.Paint)" class="org.jfree.chart.renderer.category.BarRenderer" />
	<method signature="void setDefaultBarPainter(org.jfree.chart.renderer.category.BarPainter)" class="org.jfree.chart.renderer.category.BarRenderer" />
	<method signature="void setDefaultShadowsVisible(boolean)" class="org.jfree.chart.renderer.category.BarRenderer" />
	<method signature="void setShadowXOffset(double)" class="org.jfree.chart.renderer.category.BarRenderer" />
	<method signature="double getLowerClip()" class="org.jfree.chart.renderer.category.BarRenderer" />
	<method signature="org.jfree.chart.labels.ItemLabelPosition getNegativeItemLabelPositionFallback()" class="org.jfree.chart.renderer.category.BarRenderer" />
	<method signature="boolean getIncludeBaseInRange()" class="org.jfree.chart.renderer.category.BarRenderer" />
	<method signature="org.jfree.chart.renderer.category.BarPainter getDefaultBarPainter()" class="org.jfree.chart.renderer.category.BarRenderer" />
	<method signature="void setShadowYOffset(double)" class="org.jfree.chart.renderer.category.BarRenderer" />
	<method signature="void setItemMargin(double)" class="org.jfree.chart.renderer.category.BarRenderer" />
	<method signature="org.jfree.ui.GradientPaintTransformer getGradientPaintTransformer()" class="org.jfree.chart.renderer.category.BarRenderer" />
	<method signature="double getMaximumBarWidth()" class="org.jfree.chart.renderer.category.BarRenderer" />
	<method signature="boolean isDrawBarOutline()" class="org.jfree.chart.renderer.category.BarRenderer" />
	<method signature="double getShadowXOffset()" class="org.jfree.chart.renderer.category.BarRenderer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.category.BarRenderer" />
	<method signature="void setIncludeBaseInRange(boolean)" class="org.jfree.chart.renderer.category.BarRenderer" />
	<method signature="org.jfree.chart.renderer.category.BarPainter getBarPainter()" class="org.jfree.chart.renderer.category.BarRenderer" />
	<method signature="java.awt.Paint getShadowPaint()" class="org.jfree.chart.renderer.category.BarRenderer" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)" class="org.jfree.chart.renderer.category.BarRenderer" />
	<method signature="boolean getShadowsVisible()" class="org.jfree.chart.renderer.category.BarRenderer" />
	<method signature="double getUpperClip()" class="org.jfree.chart.renderer.category.BarRenderer" />
	<method signature="org.jfree.chart.labels.ItemLabelPosition getPositiveItemLabelPositionFallback()" class="org.jfree.chart.renderer.category.BarRenderer" />
	<method signature="void setShadowVisible(boolean)" class="org.jfree.chart.renderer.category.BarRenderer" />
	<method signature="void setPositiveItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)" class="org.jfree.chart.renderer.category.BarRenderer" />
	<method signature="void setDrawBarOutline(boolean)" class="org.jfree.chart.renderer.category.BarRenderer" />
	<method signature="org.jfree.chart.renderer.category.CategoryItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.renderer.category.BarRenderer" />
	<method signature="double getShadowYOffset()" class="org.jfree.chart.renderer.category.BarRenderer" />
	<class name="freemarker.core.FMParser" />
	<method signature="freemarker.core.Expression Expression()" class="freemarker.core.FMParser" />
	<method signature="void ReInit(java.io.Reader)" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.Expression IdentifierOrStringLiteral()" class="freemarker.core.FMParser" />
	<method signature="void ReInit(java.io.InputStream)" class="freemarker.core.FMParser" />
	<method signature="void &lt;init&gt;(freemarker.template.Template,java.io.Reader,boolean,boolean)" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.AttemptBlock Attempt()" class="freemarker.core.FMParser" />
	<method signature="void enable_tracing()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.StopInstruction Stop()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.ReturnInstruction Return()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.NumericalOutput NumericalOutput()" class="freemarker.core.FMParser" />
	<method signature="java.util.ArrayList PositionalArgs()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.TemplateElement Flush()" class="freemarker.core.FMParser" />
	<method signature="void ReInit(freemarker.core.FMParserTokenManager)" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.Token getNextToken()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.Expression AndExpression()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.TransformBlock Transform()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.TextBlock PCData()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.VisitNode Visit()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.Expression PrimaryExpression()" class="freemarker.core.FMParser" />
	<method signature="void disable_tracing()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.Expression NumberLiteral()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.IteratorBlock ForEach()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.StringLiteral StringLiteral(boolean)" class="freemarker.core.FMParser" />
	<method signature="void HeaderElement()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.IteratorBlock List()" class="freemarker.core.FMParser" />
	<method signature="java.util.HashMap NamedArgs()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.Token LooseDirectiveEnd()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.Expression BooleanLiteral()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.FMParser createExpressionParser(java.lang.String)" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.BreakInstruction Break()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.Expression DefaultTo(freemarker.core.Expression)" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.TemplateElement FreemarkerDirective()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.Expression AddSubExpression(freemarker.core.Expression)" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.ListLiteral ListLiteral()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.TemplateElement Assign()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.TemplateElement Trim()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.HashLiteral HashLiteral()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.TemplateElement Call()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.Comment Comment()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.Token UnparsedContent(java.lang.StringBuffer)" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.Expression UnaryPlusMinusExpression()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.Case Case()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.Expression OrExpression()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.Expression RangeExpression()" class="freemarker.core.FMParser" />
	<method signature="void &lt;init&gt;(freemarker.template.Template,java.io.Reader,boolean,boolean,int,int)" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.TemplateElement Content()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.FallbackInstruction FallBack()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.Expression DotVariable(freemarker.core.Expression)" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.TemplateElement FreeMarkerText()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.Macro Macro()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.BuiltinVariable BuiltinVariable()" class="freemarker.core.FMParser" />
	<method signature="java.util.Map ParamList()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.Expression DynamicKey(freemarker.core.Expression)" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.Expression Parenthesis()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.Token getToken(int)" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.ParseException generateParseException()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.Include Include()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.Expression AdditiveExpression()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.Expression RelationalExpression()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.DollarVariable StringOutput()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.RecoveryBlock Recover()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.Expression MultiplicativeExpression()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.CompressedBlock Compress()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.TextBlock NoParse()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.EscapeBlock Escape()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.TemplateElement Nested()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.LibraryLoad Import()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.TemplateElement If()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.MethodCall MethodArgs(freemarker.core.Expression)" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.Identifier Identifier()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.TemplateElement Root()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.TemplateElement UnifiedMacroTransform()" class="freemarker.core.FMParser" />
	<method signature="void &lt;init&gt;(java.io.InputStream)" class="freemarker.core.FMParser" />
	<method signature="void &lt;init&gt;(freemarker.template.Template,java.io.Reader,boolean,boolean,int)" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.SwitchBlock Switch()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.PropertySetting Setting()" class="freemarker.core.FMParser" />
	<method signature="void &lt;init&gt;(java.io.Reader)" class="freemarker.core.FMParser" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.Expression UnaryExpression()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.Expression NotExpression()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.RecurseNode Recurse()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.Expression Exists(freemarker.core.Expression)" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.TemplateElement OptionalBlock()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.NoEscapeBlock NoEscape()" class="freemarker.core.FMParser" />
	<method signature="void &lt;init&gt;(freemarker.core.FMParserTokenManager)" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.Expression EqualityExpression()" class="freemarker.core.FMParser" />
	<method signature="freemarker.core.Expression BuiltIn(freemarker.core.Expression)" class="freemarker.core.FMParser" />
	<class name="org.apache.xerces.impl.dtd.models.CMUniOp" />
	<method signature="void &lt;init&gt;(int,org.apache.xerces.impl.dtd.models.CMNode)" class="org.apache.xerces.impl.dtd.models.CMUniOp" />
	<method signature="boolean isNullable()" class="org.apache.xerces.impl.dtd.models.CMUniOp" />
	<class name="org.w3c.dom.css.CSSStyleSheet" />
	<method signature="org.w3c.dom.css.CSSRuleList getCssRules()" class="org.w3c.dom.css.CSSStyleSheet" />
	<method signature="void deleteRule(int)" class="org.w3c.dom.css.CSSStyleSheet" />
	<method signature="int insertRule(java.lang.String,int)" class="org.w3c.dom.css.CSSStyleSheet" />
	<method signature="org.w3c.dom.css.CSSRule getOwnerRule()" class="org.w3c.dom.css.CSSStyleSheet" />
	<class name="org.apache.xerces.impl.xpath.regex.BMPattern" />
	<method signature="void &lt;init&gt;(java.lang.String,boolean)" class="org.apache.xerces.impl.xpath.regex.BMPattern" />
	<method signature="int matches(java.text.CharacterIterator,int,int)" class="org.apache.xerces.impl.xpath.regex.BMPattern" />
	<method signature="void &lt;init&gt;(java.lang.String,int,boolean)" class="org.apache.xerces.impl.xpath.regex.BMPattern" />
	<method signature="int matches(java.lang.String,int,int)" class="org.apache.xerces.impl.xpath.regex.BMPattern" />
	<method signature="int matches(char[],int,int)" class="org.apache.xerces.impl.xpath.regex.BMPattern" />
	<class name="freemarker.ext.rhino.RhinoFunctionModel" />
	<method signature="void &lt;init&gt;(org.mozilla.javascript.Function,org.mozilla.javascript.Scriptable,freemarker.ext.beans.BeansWrapper)" class="freemarker.ext.rhino.RhinoFunctionModel" />
	<method signature="java.lang.Object exec(java.util.List)" class="freemarker.ext.rhino.RhinoFunctionModel" />
	<class name="freemarker.template.WrappingTemplateModel" />
	<method signature="freemarker.template.ObjectWrapper getObjectWrapper()" class="freemarker.template.WrappingTemplateModel" />
	<method signature="void setObjectWrapper(freemarker.template.ObjectWrapper)" class="freemarker.template.WrappingTemplateModel" />
	<method signature="void setDefaultObjectWrapper(freemarker.template.ObjectWrapper)" class="freemarker.template.WrappingTemplateModel" />
	<method signature="freemarker.template.ObjectWrapper getDefaultObjectWrapper()" class="freemarker.template.WrappingTemplateModel" />
	<class name="org.apache.commons.lang3.concurrent.AtomicSafeInitializer" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.concurrent.AtomicSafeInitializer" />
	<method signature="java.lang.Object get()" class="org.apache.commons.lang3.concurrent.AtomicSafeInitializer" />
	<class name="fi.iki.elonen.NanoHTTPD$ResponseException" />
	<method signature="void &lt;init&gt;(fi.iki.elonen.NanoHTTPD$Response$Status,java.lang.String,java.lang.Exception)" class="fi.iki.elonen.NanoHTTPD$ResponseException" />
	<method signature="void &lt;init&gt;(fi.iki.elonen.NanoHTTPD$Response$Status,java.lang.String)" class="fi.iki.elonen.NanoHTTPD$ResponseException" />
	<method signature="fi.iki.elonen.NanoHTTPD$Response$Status getStatus()" class="fi.iki.elonen.NanoHTTPD$ResponseException" />
	<class name="org.apache.xerces.impl.xpath.XPath$Step" />
	<method signature="java.lang.Object clone()" class="org.apache.xerces.impl.xpath.XPath$Step" />
	<method signature="void &lt;init&gt;(org.apache.xerces.impl.xpath.XPath$Axis,org.apache.xerces.impl.xpath.XPath$NodeTest)" class="org.apache.xerces.impl.xpath.XPath$Step" />
	<method signature="java.lang.String toString()" class="org.apache.xerces.impl.xpath.XPath$Step" />
	<class name="tourma.utility.StringConstants" />
	<class name="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder append(char)" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder append(boolean)" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder append(long[])" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object[])" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder append(short[])" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,boolean[],boolean)" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="java.lang.String reflectionToString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle)" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,int)" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="java.lang.Object getObject()" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,boolean[])" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="void setDefaultStyle(org.apache.commons.lang3.builder.ToStringStyle)" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="void &lt;init&gt;(java.lang.Object)" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,java.lang.Object,boolean)" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,long)" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,java.lang.Object)" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,java.lang.Object[],boolean)" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder append(int[])" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder append(float[])" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,long[],boolean)" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder appendAsObjectToString(java.lang.Object)" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder append(byte)" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,char[],boolean)" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder append(double)" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="void &lt;init&gt;(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,java.lang.StringBuffer)" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="void &lt;init&gt;(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle)" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,boolean)" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,float[],boolean)" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder appendSuper(java.lang.String)" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,char[])" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder append(short)" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,char)" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="java.lang.StringBuffer getStringBuffer()" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder append(boolean[])" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder append(long)" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder append(char[])" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,short[])" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="java.lang.String reflectionToString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,boolean)" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,byte[],boolean)" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder append(float)" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,int[])" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringStyle getStyle()" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="java.lang.String reflectionToString(java.lang.Object)" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,long[])" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,int[],boolean)" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder append(int)" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="java.lang.Object build()" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder append(double[])" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringStyle getDefaultStyle()" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,double[])" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,float)" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,float[])" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder append(byte[])" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object)" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="java.lang.String reflectionToString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,boolean,java.lang.Class)" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,double[],boolean)" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,java.lang.Object[])" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,short)" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,short[],boolean)" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,double)" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="java.lang.String build()" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="java.lang.String toString()" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder appendToString(java.lang.String)" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,byte)" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,byte[])" class="org.apache.commons.lang3.builder.ToStringBuilder" />
	<class name="org.apache.xerces.impl.xs.identity.XPathMatcher" />
	<method signature="void startElement(org.apache.xerces.xni.QName,org.apache.xerces.xni.XMLAttributes)" class="org.apache.xerces.impl.xs.identity.XPathMatcher" />
	<method signature="void endElement(org.apache.xerces.xni.QName,org.apache.xerces.xs.XSTypeDefinition,boolean,java.lang.Object,short,org.apache.xerces.xs.ShortList)" class="org.apache.xerces.impl.xs.identity.XPathMatcher" />
	<method signature="java.lang.String toString()" class="org.apache.xerces.impl.xs.identity.XPathMatcher" />
	<method signature="boolean isMatched()" class="org.apache.xerces.impl.xs.identity.XPathMatcher" />
	<method signature="void startDocumentFragment()" class="org.apache.xerces.impl.xs.identity.XPathMatcher" />
	<method signature="void &lt;init&gt;(org.apache.xerces.impl.xpath.XPath)" class="org.apache.xerces.impl.xs.identity.XPathMatcher" />
	<class name="com.toedter.calendar.JYearChooser" />
	<method signature="int getYear()" class="com.toedter.calendar.JYearChooser" />
	<method signature="void setYear(int)" class="com.toedter.calendar.JYearChooser" />
	<method signature="int getEndYear()" class="com.toedter.calendar.JYearChooser" />
	<method signature="void &lt;init&gt;()" class="com.toedter.calendar.JYearChooser" />
	<method signature="void setDayChooser(com.toedter.calendar.JDayChooser)" class="com.toedter.calendar.JYearChooser" />
	<method signature="void main(java.lang.String[])" class="com.toedter.calendar.JYearChooser" />
	<method signature="int getStartYear()" class="com.toedter.calendar.JYearChooser" />
	<method signature="void setValue(int)" class="com.toedter.calendar.JYearChooser" />
	<method signature="void setStartYear(int)" class="com.toedter.calendar.JYearChooser" />
	<method signature="void setEndYear(int)" class="com.toedter.calendar.JYearChooser" />
	<class name="org.jfree.base.BasicProjectInfo" />
	<method signature="java.lang.String getCopyright()" class="org.jfree.base.BasicProjectInfo" />
	<method signature="void addLibrary(org.jfree.base.Library)" class="org.jfree.base.BasicProjectInfo" />
	<method signature="void setInfo(java.lang.String)" class="org.jfree.base.BasicProjectInfo" />
	<method signature="void setVersion(java.lang.String)" class="org.jfree.base.BasicProjectInfo" />
	<method signature="void setCopyright(java.lang.String)" class="org.jfree.base.BasicProjectInfo" />
	<method signature="void &lt;init&gt;()" class="org.jfree.base.BasicProjectInfo" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.jfree.base.BasicProjectInfo" />
	<method signature="void setName(java.lang.String)" class="org.jfree.base.BasicProjectInfo" />
	<method signature="void addOptionalLibrary(java.lang.String)" class="org.jfree.base.BasicProjectInfo" />
	<method signature="org.jfree.base.Library[] getOptionalLibraries()" class="org.jfree.base.BasicProjectInfo" />
	<method signature="void setLicenceName(java.lang.String)" class="org.jfree.base.BasicProjectInfo" />
	<method signature="void addOptionalLibrary(org.jfree.base.Library)" class="org.jfree.base.BasicProjectInfo" />
	<method signature="org.jfree.base.Library[] getLibraries()" class="org.jfree.base.BasicProjectInfo" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.jfree.base.BasicProjectInfo" />
	<class name="org.jfree.ui.tabbedui.RootPanel" />
	<method signature="boolean isActive()" class="org.jfree.ui.tabbedui.RootPanel" />
	<method signature="void setActive(boolean)" class="org.jfree.ui.tabbedui.RootPanel" />
	<method signature="void &lt;init&gt;()" class="org.jfree.ui.tabbedui.RootPanel" />
	<method signature="javax.swing.JComponent getMainPanel()" class="org.jfree.ui.tabbedui.RootPanel" />
	<method signature="javax.swing.JComponent getToolbar()" class="org.jfree.ui.tabbedui.RootPanel" />
	<class name="javax.xml.bind.Unmarshaller" />
	<method signature="void setEventHandler(javax.xml.bind.ValidationEventHandler)" class="javax.xml.bind.Unmarshaller" />
	<method signature="java.lang.Object unmarshal(org.w3c.dom.Node)" class="javax.xml.bind.Unmarshaller" />
	<method signature="javax.xml.bind.ValidationEventHandler getEventHandler()" class="javax.xml.bind.Unmarshaller" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="javax.xml.bind.Unmarshaller" />
	<method signature="javax.xml.bind.UnmarshallerHandler getUnmarshallerHandler()" class="javax.xml.bind.Unmarshaller" />
	<method signature="void setValidating(boolean)" class="javax.xml.bind.Unmarshaller" />
	<method signature="java.lang.Object unmarshal(java.net.URL)" class="javax.xml.bind.Unmarshaller" />
	<method signature="boolean isValidating()" class="javax.xml.bind.Unmarshaller" />
	<method signature="java.lang.Object unmarshal(java.io.File)" class="javax.xml.bind.Unmarshaller" />
	<method signature="java.lang.Object unmarshal(org.xml.sax.InputSource)" class="javax.xml.bind.Unmarshaller" />
	<method signature="java.lang.Object unmarshal(java.io.InputStream)" class="javax.xml.bind.Unmarshaller" />
	<method signature="java.lang.Object unmarshal(javax.xml.transform.Source)" class="javax.xml.bind.Unmarshaller" />
	<method signature="java.lang.Object getProperty(java.lang.String)" class="javax.xml.bind.Unmarshaller" />
	<class name="org.apache.xerces.xni.parser.XMLEntityResolver" />
	<method signature="org.apache.xerces.xni.parser.XMLInputSource resolveEntity(org.apache.xerces.xni.XMLResourceIdentifier)" class="org.apache.xerces.xni.parser.XMLEntityResolver" />
	<class name="org.apache.xerces.parsers.XMLGrammarCachingConfiguration" />
	<method signature="org.apache.xerces.xni.grammars.Grammar parseGrammar(java.lang.String,java.lang.String)" class="org.apache.xerces.parsers.XMLGrammarCachingConfiguration" />
	<method signature="void unlockGrammarPool()" class="org.apache.xerces.parsers.XMLGrammarCachingConfiguration" />
	<method signature="org.apache.xerces.xni.grammars.Grammar parseGrammar(java.lang.String,org.apache.xerces.xni.parser.XMLInputSource)" class="org.apache.xerces.parsers.XMLGrammarCachingConfiguration" />
	<method signature="void clearGrammarPool()" class="org.apache.xerces.parsers.XMLGrammarCachingConfiguration" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable)" class="org.apache.xerces.parsers.XMLGrammarCachingConfiguration" />
	<method signature="void lockGrammarPool()" class="org.apache.xerces.parsers.XMLGrammarCachingConfiguration" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable,org.apache.xerces.xni.grammars.XMLGrammarPool,org.apache.xerces.xni.parser.XMLComponentManager)" class="org.apache.xerces.parsers.XMLGrammarCachingConfiguration" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.parsers.XMLGrammarCachingConfiguration" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable,org.apache.xerces.xni.grammars.XMLGrammarPool)" class="org.apache.xerces.parsers.XMLGrammarCachingConfiguration" />
	<class name="org.jfree.ui.VerticalAlignment" />
	<method signature="int hashCode()" class="org.jfree.ui.VerticalAlignment" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.ui.VerticalAlignment" />
	<method signature="java.lang.String toString()" class="org.jfree.ui.VerticalAlignment" />
	<class name="org.apache.xerces.impl.dv.util.Base64" />
	<method signature="byte[] decode(java.lang.String)" class="org.apache.xerces.impl.dv.util.Base64" />
	<method signature="java.lang.String encode(byte[])" class="org.apache.xerces.impl.dv.util.Base64" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.util.Base64" />
	<class name="org.w3c.dom.NodeList" />
	<method signature="org.w3c.dom.Node item(int)" class="org.w3c.dom.NodeList" />
	<method signature="int getLength()" class="org.w3c.dom.NodeList" />
	<class name="org.w3c.dom.html.HTMLParamElement" />
	<method signature="java.lang.String getName()" class="org.w3c.dom.html.HTMLParamElement" />
	<method signature="void setValue(java.lang.String)" class="org.w3c.dom.html.HTMLParamElement" />
	<method signature="void setValueType(java.lang.String)" class="org.w3c.dom.html.HTMLParamElement" />
	<method signature="java.lang.String getValue()" class="org.w3c.dom.html.HTMLParamElement" />
	<method signature="void setName(java.lang.String)" class="org.w3c.dom.html.HTMLParamElement" />
	<method signature="java.lang.String getType()" class="org.w3c.dom.html.HTMLParamElement" />
	<method signature="void setType(java.lang.String)" class="org.w3c.dom.html.HTMLParamElement" />
	<method signature="java.lang.String getValueType()" class="org.w3c.dom.html.HTMLParamElement" />
	<class name="org.jfree.ui.action.DowngradeActionMap" />
	<method signature="java.lang.Object[] keys()" class="org.jfree.ui.action.DowngradeActionMap" />
	<method signature="int size()" class="org.jfree.ui.action.DowngradeActionMap" />
	<method signature="void clear()" class="org.jfree.ui.action.DowngradeActionMap" />
	<method signature="javax.swing.Action get(java.lang.Object)" class="org.jfree.ui.action.DowngradeActionMap" />
	<method signature="void &lt;init&gt;()" class="org.jfree.ui.action.DowngradeActionMap" />
	<method signature="void setParent(org.jfree.ui.action.DowngradeActionMap)" class="org.jfree.ui.action.DowngradeActionMap" />
	<method signature="void put(java.lang.Object,javax.swing.Action)" class="org.jfree.ui.action.DowngradeActionMap" />
	<method signature="org.jfree.ui.action.DowngradeActionMap getParent()" class="org.jfree.ui.action.DowngradeActionMap" />
	<method signature="java.lang.Object[] allKeys()" class="org.jfree.ui.action.DowngradeActionMap" />
	<method signature="void remove(java.lang.Object)" class="org.jfree.ui.action.DowngradeActionMap" />
	<class name="org.jfree.chart.event.RendererChangeListener" />
	<method signature="void rendererChanged(org.jfree.chart.event.RendererChangeEvent)" class="org.jfree.chart.event.RendererChangeListener" />
	<class name="org.apache.xerces.xni.NamespaceContext" />
	<method signature="void reset()" class="org.apache.xerces.xni.NamespaceContext" />
	<method signature="java.lang.String getPrefix(java.lang.String)" class="org.apache.xerces.xni.NamespaceContext" />
	<method signature="void popContext()" class="org.apache.xerces.xni.NamespaceContext" />
	<method signature="void pushContext()" class="org.apache.xerces.xni.NamespaceContext" />
	<method signature="java.lang.String getURI(java.lang.String)" class="org.apache.xerces.xni.NamespaceContext" />
	<method signature="int getDeclaredPrefixCount()" class="org.apache.xerces.xni.NamespaceContext" />
	<method signature="java.util.Enumeration getAllPrefixes()" class="org.apache.xerces.xni.NamespaceContext" />
	<method signature="boolean declarePrefix(java.lang.String,java.lang.String)" class="org.apache.xerces.xni.NamespaceContext" />
	<method signature="java.lang.String getDeclaredPrefixAt(int)" class="org.apache.xerces.xni.NamespaceContext" />
	<class name="fi.iki.elonen.NanoHTTPD$TempFileManager" />
	<method signature="void clear()" class="fi.iki.elonen.NanoHTTPD$TempFileManager" />
	<method signature="fi.iki.elonen.NanoHTTPD$TempFile createTempFile()" class="fi.iki.elonen.NanoHTTPD$TempFileManager" />
	<class name="org.w3c.dom.ranges.DocumentRange" />
	<method signature="org.w3c.dom.ranges.Range createRange()" class="org.w3c.dom.ranges.DocumentRange" />
	<class name="edu.umd.cs.findbugs.annotations.DefaultAnnotationForFields" />
	<method signature="edu.umd.cs.findbugs.annotations.Confidence confidence()" class="edu.umd.cs.findbugs.annotations.DefaultAnnotationForFields" />
	<method signature="edu.umd.cs.findbugs.annotations.Priority priority()" class="edu.umd.cs.findbugs.annotations.DefaultAnnotationForFields" />
	<method signature="java.lang.Class[] value()" class="edu.umd.cs.findbugs.annotations.DefaultAnnotationForFields" />
	<class name="javax.annotation.Signed" />
	<class name="org.apache.xerces.jaxp.datatype.DatatypeFactoryImpl" />
	<method signature="javax.xml.datatype.XMLGregorianCalendar newXMLGregorianCalendar(int,int,int,int,int,int,int,int)" class="org.apache.xerces.jaxp.datatype.DatatypeFactoryImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.jaxp.datatype.DatatypeFactoryImpl" />
	<method signature="javax.xml.datatype.Duration newDuration(long)" class="org.apache.xerces.jaxp.datatype.DatatypeFactoryImpl" />
	<method signature="javax.xml.datatype.Duration newDuration(boolean,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigDecimal)" class="org.apache.xerces.jaxp.datatype.DatatypeFactoryImpl" />
	<method signature="javax.xml.datatype.Duration newDuration(java.lang.String)" class="org.apache.xerces.jaxp.datatype.DatatypeFactoryImpl" />
	<method signature="javax.xml.datatype.XMLGregorianCalendar newXMLGregorianCalendar(java.math.BigInteger,int,int,int,int,int,java.math.BigDecimal,int)" class="org.apache.xerces.jaxp.datatype.DatatypeFactoryImpl" />
	<method signature="javax.xml.datatype.XMLGregorianCalendar newXMLGregorianCalendar()" class="org.apache.xerces.jaxp.datatype.DatatypeFactoryImpl" />
	<method signature="javax.xml.datatype.XMLGregorianCalendar newXMLGregorianCalendar(java.util.GregorianCalendar)" class="org.apache.xerces.jaxp.datatype.DatatypeFactoryImpl" />
	<method signature="javax.xml.datatype.XMLGregorianCalendar newXMLGregorianCalendar(java.lang.String)" class="org.apache.xerces.jaxp.datatype.DatatypeFactoryImpl" />
	<class name="org.apache.xerces.dom3.as.ASNotationDeclaration" />
	<method signature="java.lang.String getSystemId()" class="org.apache.xerces.dom3.as.ASNotationDeclaration" />
	<method signature="void setSystemId(java.lang.String)" class="org.apache.xerces.dom3.as.ASNotationDeclaration" />
	<method signature="java.lang.String getPublicId()" class="org.apache.xerces.dom3.as.ASNotationDeclaration" />
	<method signature="void setPublicId(java.lang.String)" class="org.apache.xerces.dom3.as.ASNotationDeclaration" />
	<class name="org.jfree.chart.plot.dial.DialLayer" />
	<method signature="void removeChangeListener(org.jfree.chart.plot.dial.DialLayerChangeListener)" class="org.jfree.chart.plot.dial.DialLayer" />
	<method signature="boolean isVisible()" class="org.jfree.chart.plot.dial.DialLayer" />
	<method signature="void addChangeListener(org.jfree.chart.plot.dial.DialLayerChangeListener)" class="org.jfree.chart.plot.dial.DialLayer" />
	<method signature="void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)" class="org.jfree.chart.plot.dial.DialLayer" />
	<method signature="boolean hasListener(java.util.EventListener)" class="org.jfree.chart.plot.dial.DialLayer" />
	<method signature="boolean isClippedToWindow()" class="org.jfree.chart.plot.dial.DialLayer" />
	<class name="org.w3c.dom.ls.DOMImplementationLS" />
	<method signature="org.w3c.dom.ls.LSInput createLSInput()" class="org.w3c.dom.ls.DOMImplementationLS" />
	<method signature="org.w3c.dom.ls.LSSerializer createLSSerializer()" class="org.w3c.dom.ls.DOMImplementationLS" />
	<method signature="org.w3c.dom.ls.LSOutput createLSOutput()" class="org.w3c.dom.ls.DOMImplementationLS" />
	<method signature="org.w3c.dom.ls.LSParser createLSParser(short,java.lang.String)" class="org.w3c.dom.ls.DOMImplementationLS" />
	<class name="org.apache.xerces.dom.DeferredAttrNSImpl" />
	<method signature="int getNodeIndex()" class="org.apache.xerces.dom.DeferredAttrNSImpl" />
	<class name="org.apache.commons.lang3.math.IEEE754rUtils" />
	<method signature="float min(float,float,float)" class="org.apache.commons.lang3.math.IEEE754rUtils" />
	<method signature="float min(float[])" class="org.apache.commons.lang3.math.IEEE754rUtils" />
	<method signature="double min(double,double,double)" class="org.apache.commons.lang3.math.IEEE754rUtils" />
	<method signature="double min(double[])" class="org.apache.commons.lang3.math.IEEE754rUtils" />
	<method signature="double min(double,double)" class="org.apache.commons.lang3.math.IEEE754rUtils" />
	<method signature="float min(float,float)" class="org.apache.commons.lang3.math.IEEE754rUtils" />
	<method signature="float max(float[])" class="org.apache.commons.lang3.math.IEEE754rUtils" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.math.IEEE754rUtils" />
	<method signature="float max(float,float,float)" class="org.apache.commons.lang3.math.IEEE754rUtils" />
	<method signature="double max(double[])" class="org.apache.commons.lang3.math.IEEE754rUtils" />
	<method signature="double max(double,double)" class="org.apache.commons.lang3.math.IEEE754rUtils" />
	<method signature="float max(float,float)" class="org.apache.commons.lang3.math.IEEE754rUtils" />
	<method signature="double max(double,double,double)" class="org.apache.commons.lang3.math.IEEE754rUtils" />
	<class name="freemarker.cache.MultiTemplateLoader" />
	<method signature="void resetState()" class="freemarker.cache.MultiTemplateLoader" />
	<method signature="java.lang.Object findTemplateSource(java.lang.String)" class="freemarker.cache.MultiTemplateLoader" />
	<method signature="long getLastModified(java.lang.Object)" class="freemarker.cache.MultiTemplateLoader" />
	<method signature="void closeTemplateSource(java.lang.Object)" class="freemarker.cache.MultiTemplateLoader" />
	<method signature="java.io.Reader getReader(java.lang.Object,java.lang.String)" class="freemarker.cache.MultiTemplateLoader" />
	<method signature="void &lt;init&gt;(freemarker.cache.TemplateLoader[])" class="freemarker.cache.MultiTemplateLoader" />
	<class name="org.jfree.chart.urls.XYURLGenerator" />
	<method signature="java.lang.String generateURL(org.jfree.data.xy.XYDataset,int,int)" class="org.jfree.chart.urls.XYURLGenerator" />
	<class name="org.apache.wml.WMLElement" />
	<method signature="java.lang.String getId()" class="org.apache.wml.WMLElement" />
	<method signature="java.lang.String getClassName()" class="org.apache.wml.WMLElement" />
	<method signature="void setClassName(java.lang.String)" class="org.apache.wml.WMLElement" />
	<method signature="void setId(java.lang.String)" class="org.apache.wml.WMLElement" />
	<class name="org.jfree.chart.labels.ContourToolTipGenerator" />
	<method signature="java.lang.String generateToolTip(org.jfree.data.contour.ContourDataset,int)" class="org.jfree.chart.labels.ContourToolTipGenerator" />
	<class name="javax.xml.transform.TransformerFactory" />
	<method signature="javax.xml.transform.ErrorListener getErrorListener()" class="javax.xml.transform.TransformerFactory" />
	<method signature="javax.xml.transform.Transformer newTransformer(javax.xml.transform.Source)" class="javax.xml.transform.TransformerFactory" />
	<method signature="javax.xml.transform.Source getAssociatedStylesheet(javax.xml.transform.Source,java.lang.String,java.lang.String,java.lang.String)" class="javax.xml.transform.TransformerFactory" />
	<method signature="javax.xml.transform.URIResolver getURIResolver()" class="javax.xml.transform.TransformerFactory" />
	<method signature="boolean getFeature(java.lang.String)" class="javax.xml.transform.TransformerFactory" />
	<method signature="javax.xml.transform.TransformerFactory newInstance(java.lang.String,java.lang.ClassLoader)" class="javax.xml.transform.TransformerFactory" />
	<method signature="javax.xml.transform.TransformerFactory newInstance()" class="javax.xml.transform.TransformerFactory" />
	<method signature="void setAttribute(java.lang.String,java.lang.Object)" class="javax.xml.transform.TransformerFactory" />
	<method signature="void setURIResolver(javax.xml.transform.URIResolver)" class="javax.xml.transform.TransformerFactory" />
	<method signature="java.lang.Object getAttribute(java.lang.String)" class="javax.xml.transform.TransformerFactory" />
	<method signature="void setErrorListener(javax.xml.transform.ErrorListener)" class="javax.xml.transform.TransformerFactory" />
	<method signature="javax.xml.transform.Transformer newTransformer()" class="javax.xml.transform.TransformerFactory" />
	<method signature="javax.xml.transform.Templates newTemplates(javax.xml.transform.Source)" class="javax.xml.transform.TransformerFactory" />
	<method signature="void setFeature(java.lang.String,boolean)" class="javax.xml.transform.TransformerFactory" />
	<class name="org.jfree.chart.labels.PieToolTipGenerator" />
	<method signature="java.lang.String generateToolTip(org.jfree.data.general.PieDataset,java.lang.Comparable)" class="org.jfree.chart.labels.PieToolTipGenerator" />
	<class name="org.apache.xerces.impl.xs.XSImplementationImpl" />
	<method signature="org.w3c.dom.DOMImplementation getDOMImplementation()" class="org.apache.xerces.impl.xs.XSImplementationImpl" />
	<method signature="org.apache.xerces.xs.XSLoader createXSLoader(org.apache.xerces.xs.StringList)" class="org.apache.xerces.impl.xs.XSImplementationImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xs.XSImplementationImpl" />
	<method signature="org.apache.xerces.xs.StringList getRecognizedVersions()" class="org.apache.xerces.impl.xs.XSImplementationImpl" />
	<method signature="org.apache.xerces.xs.LSInputList createLSInputList(org.w3c.dom.ls.LSInput[])" class="org.apache.xerces.impl.xs.XSImplementationImpl" />
	<method signature="boolean hasFeature(java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.XSImplementationImpl" />
	<method signature="org.apache.xerces.xs.StringList createStringList(java.lang.String[])" class="org.apache.xerces.impl.xs.XSImplementationImpl" />
	<class name="javax.xml.bind.Element" />
	<class name="com.google.zxing.aztec.detector.Detector" />
	<method signature="com.google.zxing.aztec.AztecDetectorResult detect()" class="com.google.zxing.aztec.detector.Detector" />
	<method signature="void &lt;init&gt;(com.google.zxing.common.BitMatrix)" class="com.google.zxing.aztec.detector.Detector" />
	<class name="org.apache.commons.lang3.tuple.MutableTriple" />
	<method signature="void &lt;init&gt;(java.lang.Object,java.lang.Object,java.lang.Object)" class="org.apache.commons.lang3.tuple.MutableTriple" />
	<method signature="org.apache.commons.lang3.tuple.MutableTriple of(java.lang.Object,java.lang.Object,java.lang.Object)" class="org.apache.commons.lang3.tuple.MutableTriple" />
	<method signature="void setLeft(java.lang.Object)" class="org.apache.commons.lang3.tuple.MutableTriple" />
	<method signature="void setMiddle(java.lang.Object)" class="org.apache.commons.lang3.tuple.MutableTriple" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.tuple.MutableTriple" />
	<method signature="java.lang.Object getLeft()" class="org.apache.commons.lang3.tuple.MutableTriple" />
	<method signature="void setRight(java.lang.Object)" class="org.apache.commons.lang3.tuple.MutableTriple" />
	<method signature="java.lang.Object getRight()" class="org.apache.commons.lang3.tuple.MutableTriple" />
	<method signature="java.lang.Object getMiddle()" class="org.apache.commons.lang3.tuple.MutableTriple" />
	<class name="org.apache.xerces.stax.DefaultNamespaceContext" />
	<method signature="java.lang.String getPrefix(java.lang.String)" class="org.apache.xerces.stax.DefaultNamespaceContext" />
	<method signature="org.apache.xerces.stax.DefaultNamespaceContext getInstance()" class="org.apache.xerces.stax.DefaultNamespaceContext" />
	<method signature="java.util.Iterator getPrefixes(java.lang.String)" class="org.apache.xerces.stax.DefaultNamespaceContext" />
	<method signature="java.lang.String getNamespaceURI(java.lang.String)" class="org.apache.xerces.stax.DefaultNamespaceContext" />
	<class name="org.jfree.base.log.DefaultLog" />
	<method signature="void addTarget(org.jfree.util.LogTarget)" class="org.jfree.base.log.DefaultLog" />
	<method signature="void installDefaultLog()" class="org.jfree.base.log.DefaultLog" />
	<method signature="void init()" class="org.jfree.base.log.DefaultLog" />
	<method signature="org.jfree.base.log.DefaultLog getDefaultLog()" class="org.jfree.base.log.DefaultLog" />
	<class name="org.jfree.data.general.AbstractSeriesDataset" />
	<method signature="java.lang.Comparable getSeriesKey(int)" class="org.jfree.data.general.AbstractSeriesDataset" />
	<method signature="void seriesChanged(org.jfree.data.general.SeriesChangeEvent)" class="org.jfree.data.general.AbstractSeriesDataset" />
	<method signature="int indexOf(java.lang.Comparable)" class="org.jfree.data.general.AbstractSeriesDataset" />
	<method signature="int getSeriesCount()" class="org.jfree.data.general.AbstractSeriesDataset" />
	<class name="org.apache.commons.lang3.event.EventUtils" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.event.EventUtils" />
	<method signature="void addEventListener(java.lang.Object,java.lang.Class,java.lang.Object)" class="org.apache.commons.lang3.event.EventUtils" />
	<method signature="void bindEventsToMethod(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Class,java.lang.String[])" class="org.apache.commons.lang3.event.EventUtils" />
	<class name="org.apache.xerces.xs.XSValue" />
	<method signature="org.apache.xerces.xs.XSSimpleTypeDefinition getMemberTypeDefinition()" class="org.apache.xerces.xs.XSValue" />
	<method signature="short getActualValueType()" class="org.apache.xerces.xs.XSValue" />
	<method signature="org.apache.xerces.xs.ShortList getListValueTypes()" class="org.apache.xerces.xs.XSValue" />
	<method signature="org.apache.xerces.xs.XSObjectList getMemberTypeDefinitions()" class="org.apache.xerces.xs.XSValue" />
	<method signature="java.lang.Object getActualValue()" class="org.apache.xerces.xs.XSValue" />
	<method signature="org.apache.xerces.xs.XSSimpleTypeDefinition getTypeDefinition()" class="org.apache.xerces.xs.XSValue" />
	<method signature="java.lang.String getNormalizedValue()" class="org.apache.xerces.xs.XSValue" />
	<class name="org.apache.xerces.dom.DeferredEntityImpl" />
	<method signature="int getNodeIndex()" class="org.apache.xerces.dom.DeferredEntityImpl" />
	<class name="org.apache.xerces.xs.XSNotationDeclaration" />
	<method signature="java.lang.String getSystemId()" class="org.apache.xerces.xs.XSNotationDeclaration" />
	<method signature="org.apache.xerces.xs.XSAnnotation getAnnotation()" class="org.apache.xerces.xs.XSNotationDeclaration" />
	<method signature="org.apache.xerces.xs.XSObjectList getAnnotations()" class="org.apache.xerces.xs.XSNotationDeclaration" />
	<method signature="java.lang.String getPublicId()" class="org.apache.xerces.xs.XSNotationDeclaration" />
	<class name="org.apache.xerces.xs.XSTypeDefinition" />
	<method signature="boolean derivedFrom(java.lang.String,java.lang.String,short)" class="org.apache.xerces.xs.XSTypeDefinition" />
	<method signature="boolean derivedFromType(org.apache.xerces.xs.XSTypeDefinition,short)" class="org.apache.xerces.xs.XSTypeDefinition" />
	<method signature="short getFinal()" class="org.apache.xerces.xs.XSTypeDefinition" />
	<method signature="boolean getAnonymous()" class="org.apache.xerces.xs.XSTypeDefinition" />
	<method signature="org.apache.xerces.xs.XSTypeDefinition getBaseType()" class="org.apache.xerces.xs.XSTypeDefinition" />
	<method signature="boolean isFinal(short)" class="org.apache.xerces.xs.XSTypeDefinition" />
	<method signature="short getTypeCategory()" class="org.apache.xerces.xs.XSTypeDefinition" />
	<class name="net.java.dev.colorchooser.ColorChooser" />
	<method signature="void setColor(java.awt.Color)" class="net.java.dev.colorchooser.ColorChooser" />
	<method signature="void &lt;init&gt;(net.java.dev.colorchooser.Palette[])" class="net.java.dev.colorchooser.ColorChooser" />
	<method signature="java.lang.String getUIClassId()" class="net.java.dev.colorchooser.ColorChooser" />
	<method signature="boolean isContinuousPalettePreferred()" class="net.java.dev.colorchooser.ColorChooser" />
	<method signature="void addActionListener(java.awt.event.ActionListener)" class="net.java.dev.colorchooser.ColorChooser" />
	<method signature="void &lt;init&gt;(net.java.dev.colorchooser.Palette[],java.awt.Color)" class="net.java.dev.colorchooser.ColorChooser" />
	<method signature="void updateUI()" class="net.java.dev.colorchooser.ColorChooser" />
	<method signature="void &lt;init&gt;()" class="net.java.dev.colorchooser.ColorChooser" />
	<method signature="void setPalettes(net.java.dev.colorchooser.Palette[])" class="net.java.dev.colorchooser.ColorChooser" />
	<method signature="java.awt.Color getColor()" class="net.java.dev.colorchooser.ColorChooser" />
	<method signature="net.java.dev.colorchooser.Palette[] getPalettes()" class="net.java.dev.colorchooser.ColorChooser" />
	<method signature="void setContinuousPalettePreferred(boolean)" class="net.java.dev.colorchooser.ColorChooser" />
	<method signature="java.lang.String getColorName(java.awt.Color)" class="net.java.dev.colorchooser.ColorChooser" />
	<method signature="void &lt;init&gt;(java.awt.Color)" class="net.java.dev.colorchooser.ColorChooser" />
	<method signature="java.awt.Color getTransientColor()" class="net.java.dev.colorchooser.ColorChooser" />
	<method signature="java.lang.String colorToString(java.awt.Color)" class="net.java.dev.colorchooser.ColorChooser" />
	<method signature="void removeActionListener(java.awt.event.ActionListener)" class="net.java.dev.colorchooser.ColorChooser" />
	<class name="org.apache.commons.lang3.ObjectUtils" />
	<method signature="java.lang.String identityToString(java.lang.Object)" class="org.apache.commons.lang3.ObjectUtils" />
	<method signature="short CONST(short)" class="org.apache.commons.lang3.ObjectUtils" />
	<method signature="java.lang.String toString(java.lang.Object)" class="org.apache.commons.lang3.ObjectUtils" />
	<method signature="java.lang.Comparable max(java.lang.Comparable[])" class="org.apache.commons.lang3.ObjectUtils" />
	<method signature="short CONST_SHORT(int)" class="org.apache.commons.lang3.ObjectUtils" />
	<method signature="byte CONST_BYTE(int)" class="org.apache.commons.lang3.ObjectUtils" />
	<method signature="java.lang.Object mode(java.lang.Object[])" class="org.apache.commons.lang3.ObjectUtils" />
	<method signature="int compare(java.lang.Comparable,java.lang.Comparable,boolean)" class="org.apache.commons.lang3.ObjectUtils" />
	<method signature="int CONST(int)" class="org.apache.commons.lang3.ObjectUtils" />
	<method signature="java.lang.Object clone(java.lang.Object)" class="org.apache.commons.lang3.ObjectUtils" />
	<method signature="char CONST(char)" class="org.apache.commons.lang3.ObjectUtils" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.ObjectUtils" />
	<method signature="void identityToString(org.apache.commons.lang3.text.StrBuilder,java.lang.Object)" class="org.apache.commons.lang3.ObjectUtils" />
	<method signature="java.lang.Comparable median(java.lang.Comparable[])" class="org.apache.commons.lang3.ObjectUtils" />
	<method signature="java.lang.Object defaultIfNull(java.lang.Object,java.lang.Object)" class="org.apache.commons.lang3.ObjectUtils" />
	<method signature="boolean CONST(boolean)" class="org.apache.commons.lang3.ObjectUtils" />
	<method signature="int compare(java.lang.Comparable,java.lang.Comparable)" class="org.apache.commons.lang3.ObjectUtils" />
	<method signature="int hashCodeMulti(java.lang.Object[])" class="org.apache.commons.lang3.ObjectUtils" />
	<method signature="void identityToString(java.lang.Appendable,java.lang.Object)" class="org.apache.commons.lang3.ObjectUtils" />
	<method signature="void identityToString(java.lang.StringBuffer,java.lang.Object)" class="org.apache.commons.lang3.ObjectUtils" />
	<method signature="java.lang.Object firstNonNull(java.lang.Object[])" class="org.apache.commons.lang3.ObjectUtils" />
	<method signature="boolean notEqual(java.lang.Object,java.lang.Object)" class="org.apache.commons.lang3.ObjectUtils" />
	<method signature="long CONST(long)" class="org.apache.commons.lang3.ObjectUtils" />
	<method signature="java.lang.Comparable min(java.lang.Comparable[])" class="org.apache.commons.lang3.ObjectUtils" />
	<method signature="java.lang.String toString(java.lang.Object,java.lang.String)" class="org.apache.commons.lang3.ObjectUtils" />
	<method signature="float CONST(float)" class="org.apache.commons.lang3.ObjectUtils" />
	<method signature="boolean equals(java.lang.Object,java.lang.Object)" class="org.apache.commons.lang3.ObjectUtils" />
	<method signature="double CONST(double)" class="org.apache.commons.lang3.ObjectUtils" />
	<method signature="java.lang.Object cloneIfPossible(java.lang.Object)" class="org.apache.commons.lang3.ObjectUtils" />
	<method signature="byte CONST(byte)" class="org.apache.commons.lang3.ObjectUtils" />
	<method signature="void identityToString(java.lang.StringBuilder,java.lang.Object)" class="org.apache.commons.lang3.ObjectUtils" />
	<method signature="java.lang.Object median(java.util.Comparator,java.lang.Object[])" class="org.apache.commons.lang3.ObjectUtils" />
	<method signature="int hashCode(java.lang.Object)" class="org.apache.commons.lang3.ObjectUtils" />
	<method signature="java.lang.Object CONST(java.lang.Object)" class="org.apache.commons.lang3.ObjectUtils" />
	<class name="com.google.zxing.common.BitArray" />
	<method signature="void flip(int)" class="com.google.zxing.common.BitArray" />
	<method signature="void setRange(int,int)" class="com.google.zxing.common.BitArray" />
	<method signature="void appendBit(boolean)" class="com.google.zxing.common.BitArray" />
	<method signature="int getNextSet(int)" class="com.google.zxing.common.BitArray" />
	<method signature="int getSize()" class="com.google.zxing.common.BitArray" />
	<method signature="int getSizeInBytes()" class="com.google.zxing.common.BitArray" />
	<method signature="boolean get(int)" class="com.google.zxing.common.BitArray" />
	<method signature="boolean isRange(int,int,boolean)" class="com.google.zxing.common.BitArray" />
	<method signature="void &lt;init&gt;(int)" class="com.google.zxing.common.BitArray" />
	<method signature="int getNextUnset(int)" class="com.google.zxing.common.BitArray" />
	<method signature="void clear()" class="com.google.zxing.common.BitArray" />
	<method signature="void appendBits(int,int)" class="com.google.zxing.common.BitArray" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.common.BitArray" />
	<method signature="void appendBitArray(com.google.zxing.common.BitArray)" class="com.google.zxing.common.BitArray" />
	<method signature="void reverse()" class="com.google.zxing.common.BitArray" />
	<method signature="java.lang.String toString()" class="com.google.zxing.common.BitArray" />
	<method signature="void xor(com.google.zxing.common.BitArray)" class="com.google.zxing.common.BitArray" />
	<method signature="int[] getBitArray()" class="com.google.zxing.common.BitArray" />
	<method signature="void setBulk(int,int)" class="com.google.zxing.common.BitArray" />
	<method signature="void toBytes(int,byte[],int,int)" class="com.google.zxing.common.BitArray" />
	<method signature="void set(int)" class="com.google.zxing.common.BitArray" />
	<class name="javax.xml.bind.ValidationEvent" />
	<method signature="int getSeverity()" class="javax.xml.bind.ValidationEvent" />
	<method signature="java.lang.Throwable getLinkedException()" class="javax.xml.bind.ValidationEvent" />
	<method signature="javax.xml.bind.ValidationEventLocator getLocator()" class="javax.xml.bind.ValidationEvent" />
	<method signature="java.lang.String getMessage()" class="javax.xml.bind.ValidationEvent" />
	<class name="org.jfree.data.io.CSV" />
	<method signature="org.jfree.data.category.CategoryDataset readCategoryDataset(java.io.Reader)" class="org.jfree.data.io.CSV" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.io.CSV" />
	<method signature="void &lt;init&gt;(char,char)" class="org.jfree.data.io.CSV" />
	<class name="org.w3c.dom.Comment" />
	<class name="org.jfree.chart.block.LineBorder" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.block.LineBorder" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.block.LineBorder" />
	<method signature="java.awt.Paint getPaint()" class="org.jfree.chart.block.LineBorder" />
	<method signature="void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" class="org.jfree.chart.block.LineBorder" />
	<method signature="org.jfree.ui.RectangleInsets getInsets()" class="org.jfree.chart.block.LineBorder" />
	<method signature="void &lt;init&gt;(java.awt.Paint,java.awt.Stroke,org.jfree.ui.RectangleInsets)" class="org.jfree.chart.block.LineBorder" />
	<method signature="java.awt.Stroke getStroke()" class="org.jfree.chart.block.LineBorder" />
	<class name="org.apache.html.dom.HTMLObjectElementImpl" />
	<method signature="java.lang.String getName()" class="org.apache.html.dom.HTMLObjectElementImpl" />
	<method signature="java.lang.String getBorder()" class="org.apache.html.dom.HTMLObjectElementImpl" />
	<method signature="java.lang.String getCodeBase()" class="org.apache.html.dom.HTMLObjectElementImpl" />
	<method signature="java.lang.String getStandby()" class="org.apache.html.dom.HTMLObjectElementImpl" />
	<method signature="java.lang.String getUseMap()" class="org.apache.html.dom.HTMLObjectElementImpl" />
	<method signature="void setCodeType(java.lang.String)" class="org.apache.html.dom.HTMLObjectElementImpl" />
	<method signature="java.lang.String getWidth()" class="org.apache.html.dom.HTMLObjectElementImpl" />
	<method signature="java.lang.String getHspace()" class="org.apache.html.dom.HTMLObjectElementImpl" />
	<method signature="java.lang.String getHeight()" class="org.apache.html.dom.HTMLObjectElementImpl" />
	<method signature="int getTabIndex()" class="org.apache.html.dom.HTMLObjectElementImpl" />
	<method signature="void setName(java.lang.String)" class="org.apache.html.dom.HTMLObjectElementImpl" />
	<method signature="void setStandby(java.lang.String)" class="org.apache.html.dom.HTMLObjectElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLObjectElementImpl" />
	<method signature="java.lang.String getData()" class="org.apache.html.dom.HTMLObjectElementImpl" />
	<method signature="java.lang.String getCode()" class="org.apache.html.dom.HTMLObjectElementImpl" />
	<method signature="void setAlign(java.lang.String)" class="org.apache.html.dom.HTMLObjectElementImpl" />
	<method signature="void setBorder(java.lang.String)" class="org.apache.html.dom.HTMLObjectElementImpl" />
	<method signature="java.lang.String getCodeType()" class="org.apache.html.dom.HTMLObjectElementImpl" />
	<method signature="java.lang.String getAlign()" class="org.apache.html.dom.HTMLObjectElementImpl" />
	<method signature="void setTabIndex(int)" class="org.apache.html.dom.HTMLObjectElementImpl" />
	<method signature="void setCode(java.lang.String)" class="org.apache.html.dom.HTMLObjectElementImpl" />
	<method signature="void setArchive(java.lang.String)" class="org.apache.html.dom.HTMLObjectElementImpl" />
	<method signature="void setDeclare(boolean)" class="org.apache.html.dom.HTMLObjectElementImpl" />
	<method signature="void setData(java.lang.String)" class="org.apache.html.dom.HTMLObjectElementImpl" />
	<method signature="boolean getDeclare()" class="org.apache.html.dom.HTMLObjectElementImpl" />
	<method signature="void setVspace(java.lang.String)" class="org.apache.html.dom.HTMLObjectElementImpl" />
	<method signature="java.lang.String getType()" class="org.apache.html.dom.HTMLObjectElementImpl" />
	<method signature="void setUseMap(java.lang.String)" class="org.apache.html.dom.HTMLObjectElementImpl" />
	<method signature="java.lang.String getArchive()" class="org.apache.html.dom.HTMLObjectElementImpl" />
	<method signature="void setCodeBase(java.lang.String)" class="org.apache.html.dom.HTMLObjectElementImpl" />
	<method signature="void setType(java.lang.String)" class="org.apache.html.dom.HTMLObjectElementImpl" />
	<method signature="void setHeight(java.lang.String)" class="org.apache.html.dom.HTMLObjectElementImpl" />
	<method signature="void setHspace(java.lang.String)" class="org.apache.html.dom.HTMLObjectElementImpl" />
	<method signature="void setWidth(java.lang.String)" class="org.apache.html.dom.HTMLObjectElementImpl" />
	<method signature="java.lang.String getVspace()" class="org.apache.html.dom.HTMLObjectElementImpl" />
	<class name="org.apache.xerces.parsers.SoftReferenceSymbolTableConfiguration" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable)" class="org.apache.xerces.parsers.SoftReferenceSymbolTableConfiguration" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable,org.apache.xerces.xni.grammars.XMLGrammarPool,org.apache.xerces.xni.parser.XMLComponentManager)" class="org.apache.xerces.parsers.SoftReferenceSymbolTableConfiguration" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.parsers.SoftReferenceSymbolTableConfiguration" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable,org.apache.xerces.xni.grammars.XMLGrammarPool)" class="org.apache.xerces.parsers.SoftReferenceSymbolTableConfiguration" />
	<class name="freemarker.core.OptInTemplateClassResolver" />
	<method signature="java.lang.Class resolve(java.lang.String,freemarker.core.Environment,freemarker.template.Template)" class="freemarker.core.OptInTemplateClassResolver" />
	<method signature="void &lt;init&gt;(java.util.Set,java.util.List)" class="freemarker.core.OptInTemplateClassResolver" />
	<class name="org.jfree.chart.axis.CategoryLabelWidthType" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.axis.CategoryLabelWidthType" />
	<method signature="java.lang.String toString()" class="org.jfree.chart.axis.CategoryLabelWidthType" />
	<class name="org.apache.xerces.dom.RangeExceptionImpl" />
	<method signature="void &lt;init&gt;(short,java.lang.String)" class="org.apache.xerces.dom.RangeExceptionImpl" />
	<class name="org.jfree.chart.LegendItemCollection" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.LegendItemCollection" />
	<method signature="java.util.Iterator iterator()" class="org.jfree.chart.LegendItemCollection" />
	<method signature="int getItemCount()" class="org.jfree.chart.LegendItemCollection" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.LegendItemCollection" />
	<method signature="org.jfree.chart.LegendItem get(int)" class="org.jfree.chart.LegendItemCollection" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.LegendItemCollection" />
	<method signature="void addAll(org.jfree.chart.LegendItemCollection)" class="org.jfree.chart.LegendItemCollection" />
	<method signature="void add(org.jfree.chart.LegendItem)" class="org.jfree.chart.LegendItemCollection" />
	<class name="org.apache.wml.WMLTdElement" />
	<method signature="java.lang.String getXmlLang()" class="org.apache.wml.WMLTdElement" />
	<method signature="void setXmlLang(java.lang.String)" class="org.apache.wml.WMLTdElement" />
	<class name="org.apache.xerces.impl.xs.models.XSCMUniOp" />
	<method signature="void &lt;init&gt;(int,org.apache.xerces.impl.dtd.models.CMNode)" class="org.apache.xerces.impl.xs.models.XSCMUniOp" />
	<method signature="boolean isNullable()" class="org.apache.xerces.impl.xs.models.XSCMUniOp" />
	<class name="org.jfree.util.ExtendedConfigurationWrapper" />
	<method signature="java.lang.Object clone()" class="org.jfree.util.ExtendedConfigurationWrapper" />
	<method signature="boolean getBoolProperty(java.lang.String)" class="org.jfree.util.ExtendedConfigurationWrapper" />
	<method signature="int getIntProperty(java.lang.String)" class="org.jfree.util.ExtendedConfigurationWrapper" />
	<method signature="java.lang.String getConfigProperty(java.lang.String,java.lang.String)" class="org.jfree.util.ExtendedConfigurationWrapper" />
	<method signature="boolean getBoolProperty(java.lang.String,boolean)" class="org.jfree.util.ExtendedConfigurationWrapper" />
	<method signature="boolean isPropertySet(java.lang.String)" class="org.jfree.util.ExtendedConfigurationWrapper" />
	<method signature="void &lt;init&gt;(org.jfree.util.Configuration)" class="org.jfree.util.ExtendedConfigurationWrapper" />
	<method signature="int getIntProperty(java.lang.String,int)" class="org.jfree.util.ExtendedConfigurationWrapper" />
	<method signature="java.util.Iterator findPropertyKeys(java.lang.String)" class="org.jfree.util.ExtendedConfigurationWrapper" />
	<method signature="java.lang.String getConfigProperty(java.lang.String)" class="org.jfree.util.ExtendedConfigurationWrapper" />
	<method signature="java.util.Enumeration getConfigProperties()" class="org.jfree.util.ExtendedConfigurationWrapper" />
	<class name="freemarker.template.SimpleObjectWrapper" />
	<method signature="void &lt;init&gt;()" class="freemarker.template.SimpleObjectWrapper" />
	<class name="org.jfree.chart.labels.StandardCategoryItemLabelGenerator" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.labels.StandardCategoryItemLabelGenerator" />
	<method signature="void &lt;init&gt;(java.lang.String,java.text.NumberFormat)" class="org.jfree.chart.labels.StandardCategoryItemLabelGenerator" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.labels.StandardCategoryItemLabelGenerator" />
	<method signature="void &lt;init&gt;(java.lang.String,java.text.DateFormat)" class="org.jfree.chart.labels.StandardCategoryItemLabelGenerator" />
	<method signature="void &lt;init&gt;(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)" class="org.jfree.chart.labels.StandardCategoryItemLabelGenerator" />
	<method signature="java.lang.String generateLabel(org.jfree.data.category.CategoryDataset,int,int)" class="org.jfree.chart.labels.StandardCategoryItemLabelGenerator" />
	<class name="com.google.zxing.client.j2se.CommandLineRunner" />
	<method signature="void main(java.lang.String[])" class="com.google.zxing.client.j2se.CommandLineRunner" />
	<class name="org.jfree.chart.event.ChartProgressListener" />
	<method signature="void chartProgress(org.jfree.chart.event.ChartProgressEvent)" class="org.jfree.chart.event.ChartProgressListener" />
	<class name="org.jfree.chart.axis.SegmentedTimeline$BaseTimelineSegmentRange" />
	<method signature="void &lt;init&gt;(org.jfree.chart.axis.SegmentedTimeline,long,long)" class="org.jfree.chart.axis.SegmentedTimeline$BaseTimelineSegmentRange" />
	<class name="org.apache.xerces.util.StAXInputSource" />
	<method signature="void &lt;init&gt;(javax.xml.stream.XMLStreamReader,boolean)" class="org.apache.xerces.util.StAXInputSource" />
	<method signature="void &lt;init&gt;(javax.xml.stream.XMLEventReader,boolean)" class="org.apache.xerces.util.StAXInputSource" />
	<method signature="void setSystemId(java.lang.String)" class="org.apache.xerces.util.StAXInputSource" />
	<method signature="void &lt;init&gt;(javax.xml.stream.XMLStreamReader)" class="org.apache.xerces.util.StAXInputSource" />
	<method signature="javax.xml.stream.XMLStreamReader getXMLStreamReader()" class="org.apache.xerces.util.StAXInputSource" />
	<method signature="boolean shouldConsumeRemainingContent()" class="org.apache.xerces.util.StAXInputSource" />
	<method signature="javax.xml.stream.XMLEventReader getXMLEventReader()" class="org.apache.xerces.util.StAXInputSource" />
	<method signature="void &lt;init&gt;(javax.xml.stream.XMLEventReader)" class="org.apache.xerces.util.StAXInputSource" />
	<class name="org.jfree.util.SortOrder" />
	<method signature="int hashCode()" class="org.jfree.util.SortOrder" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.util.SortOrder" />
	<method signature="java.lang.String toString()" class="org.jfree.util.SortOrder" />
	<class name="com.hexidec.ekit.Ekit" />
	<method signature="void windowClosed(java.awt.event.WindowEvent)" class="com.hexidec.ekit.Ekit" />
	<method signature="void windowClosing(java.awt.event.WindowEvent)" class="com.hexidec.ekit.Ekit" />
	<method signature="void windowActivated(java.awt.event.WindowEvent)" class="com.hexidec.ekit.Ekit" />
	<method signature="void windowDeiconified(java.awt.event.WindowEvent)" class="com.hexidec.ekit.Ekit" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,java.net.URL,boolean,boolean,boolean,boolean,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean)" class="com.hexidec.ekit.Ekit" />
	<method signature="void &lt;init&gt;()" class="com.hexidec.ekit.Ekit" />
	<method signature="void windowIconified(java.awt.event.WindowEvent)" class="com.hexidec.ekit.Ekit" />
	<method signature="void main(java.lang.String[])" class="com.hexidec.ekit.Ekit" />
	<method signature="void windowDeactivated(java.awt.event.WindowEvent)" class="com.hexidec.ekit.Ekit" />
	<method signature="void windowOpened(java.awt.event.WindowEvent)" class="com.hexidec.ekit.Ekit" />
	<method signature="void usage()" class="com.hexidec.ekit.Ekit" />
	<class name="org.apache.wml.dom.WMLElementImpl" />
	<method signature="java.lang.String getXmlLang()" class="org.apache.wml.dom.WMLElementImpl" />
	<method signature="void setXmlLang(java.lang.String)" class="org.apache.wml.dom.WMLElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.wml.dom.WMLDocumentImpl,java.lang.String)" class="org.apache.wml.dom.WMLElementImpl" />
	<method signature="java.lang.String getId()" class="org.apache.wml.dom.WMLElementImpl" />
	<method signature="java.lang.String getClassName()" class="org.apache.wml.dom.WMLElementImpl" />
	<method signature="void setClassName(java.lang.String)" class="org.apache.wml.dom.WMLElementImpl" />
	<method signature="void setId(java.lang.String)" class="org.apache.wml.dom.WMLElementImpl" />
	<class name="org.jfree.ui.Drawable" />
	<method signature="void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" class="org.jfree.ui.Drawable" />
	<class name="org.apache.wml.WMLBrElement" />
	<method signature="java.lang.String getXmlLang()" class="org.apache.wml.WMLBrElement" />
	<method signature="void setXmlLang(java.lang.String)" class="org.apache.wml.WMLBrElement" />
	<class name="com.toedter.calendar.demo.DateChooserPanelBeanInfo" />
	<method signature="void &lt;init&gt;()" class="com.toedter.calendar.demo.DateChooserPanelBeanInfo" />
	<class name="org.w3c.dom.html.HTMLFrameSetElement" />
	<method signature="void setRows(java.lang.String)" class="org.w3c.dom.html.HTMLFrameSetElement" />
	<method signature="java.lang.String getCols()" class="org.w3c.dom.html.HTMLFrameSetElement" />
	<method signature="java.lang.String getRows()" class="org.w3c.dom.html.HTMLFrameSetElement" />
	<method signature="void setCols(java.lang.String)" class="org.w3c.dom.html.HTMLFrameSetElement" />
	<class name="org.xml.sax.ErrorHandler" />
	<method signature="void warning(org.xml.sax.SAXParseException)" class="org.xml.sax.ErrorHandler" />
	<method signature="void error(org.xml.sax.SAXParseException)" class="org.xml.sax.ErrorHandler" />
	<method signature="void fatalError(org.xml.sax.SAXParseException)" class="org.xml.sax.ErrorHandler" />
	<class name="org.jdom2.output.SAXOutputter" />
	<method signature="org.xml.sax.ErrorHandler getErrorHandler()" class="org.jdom2.output.SAXOutputter" />
	<method signature="boolean getFeature(java.lang.String)" class="org.jdom2.output.SAXOutputter" />
	<method signature="void setReportDTDEvents(boolean)" class="org.jdom2.output.SAXOutputter" />
	<method signature="void setDeclHandler(org.xml.sax.ext.DeclHandler)" class="org.jdom2.output.SAXOutputter" />
	<method signature="void setReportNamespaceDeclarations(boolean)" class="org.jdom2.output.SAXOutputter" />
	<method signature="boolean getReportDTDEvents()" class="org.jdom2.output.SAXOutputter" />
	<method signature="org.jdom2.output.JDOMLocator getLocator()" class="org.jdom2.output.SAXOutputter" />
	<method signature="void &lt;init&gt;(org.xml.sax.ContentHandler)" class="org.jdom2.output.SAXOutputter" />
	<method signature="org.xml.sax.DTDHandler getDTDHandler()" class="org.jdom2.output.SAXOutputter" />
	<method signature="org.xml.sax.EntityResolver getEntityResolver()" class="org.jdom2.output.SAXOutputter" />
	<method signature="void setFormat(org.jdom2.output.Format)" class="org.jdom2.output.SAXOutputter" />
	<method signature="void &lt;init&gt;()" class="org.jdom2.output.SAXOutputter" />
	<method signature="void outputFragment(java.util.List)" class="org.jdom2.output.SAXOutputter" />
	<method signature="void setLexicalHandler(org.xml.sax.ext.LexicalHandler)" class="org.jdom2.output.SAXOutputter" />
	<method signature="boolean getReportNamespaceDeclarations()" class="org.jdom2.output.SAXOutputter" />
	<method signature="void setFeature(java.lang.String,boolean)" class="org.jdom2.output.SAXOutputter" />
	<method signature="void output(java.util.List)" class="org.jdom2.output.SAXOutputter" />
	<method signature="void setDTDHandler(org.xml.sax.DTDHandler)" class="org.jdom2.output.SAXOutputter" />
	<method signature="org.xml.sax.ext.DeclHandler getDeclHandler()" class="org.jdom2.output.SAXOutputter" />
	<method signature="org.xml.sax.ext.LexicalHandler getLexicalHandler()" class="org.jdom2.output.SAXOutputter" />
	<method signature="void setSAXOutputProcessor(org.jdom2.output.support.SAXOutputProcessor)" class="org.jdom2.output.SAXOutputter" />
	<method signature="org.jdom2.output.Format getFormat()" class="org.jdom2.output.SAXOutputter" />
	<method signature="void output(org.jdom2.Element)" class="org.jdom2.output.SAXOutputter" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="org.jdom2.output.SAXOutputter" />
	<method signature="org.jdom2.output.support.SAXOutputProcessor getSAXOutputProcessor()" class="org.jdom2.output.SAXOutputter" />
	<method signature="void &lt;init&gt;(org.xml.sax.ContentHandler,org.xml.sax.ErrorHandler,org.xml.sax.DTDHandler,org.xml.sax.EntityResolver)" class="org.jdom2.output.SAXOutputter" />
	<method signature="void &lt;init&gt;(org.jdom2.output.support.SAXOutputProcessor,org.jdom2.output.Format,org.xml.sax.ContentHandler,org.xml.sax.ErrorHandler,org.xml.sax.DTDHandler,org.xml.sax.EntityResolver,org.xml.sax.ext.LexicalHandler)" class="org.jdom2.output.SAXOutputter" />
	<method signature="void output(org.jdom2.Document)" class="org.jdom2.output.SAXOutputter" />
	<method signature="void outputFragment(org.jdom2.Content)" class="org.jdom2.output.SAXOutputter" />
	<method signature="void setContentHandler(org.xml.sax.ContentHandler)" class="org.jdom2.output.SAXOutputter" />
	<method signature="org.xml.sax.ContentHandler getContentHandler()" class="org.jdom2.output.SAXOutputter" />
	<method signature="void setEntityResolver(org.xml.sax.EntityResolver)" class="org.jdom2.output.SAXOutputter" />
	<method signature="void &lt;init&gt;(org.xml.sax.ContentHandler,org.xml.sax.ErrorHandler,org.xml.sax.DTDHandler,org.xml.sax.EntityResolver,org.xml.sax.ext.LexicalHandler)" class="org.jdom2.output.SAXOutputter" />
	<method signature="void setErrorHandler(org.xml.sax.ErrorHandler)" class="org.jdom2.output.SAXOutputter" />
	<method signature="java.lang.Object getProperty(java.lang.String)" class="org.jdom2.output.SAXOutputter" />
	<class name="org.jfree.data.category.SlidingCategoryDataset" />
	<method signature="java.lang.Number getValue(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.category.SlidingCategoryDataset" />
	<method signature="java.lang.Number getValue(int,int)" class="org.jfree.data.category.SlidingCategoryDataset" />
	<method signature="void &lt;init&gt;(org.jfree.data.category.CategoryDataset,int,int)" class="org.jfree.data.category.SlidingCategoryDataset" />
	<method signature="java.util.List getColumnKeys()" class="org.jfree.data.category.SlidingCategoryDataset" />
	<method signature="int getFirstCategoryIndex()" class="org.jfree.data.category.SlidingCategoryDataset" />
	<method signature="java.lang.Comparable getColumnKey(int)" class="org.jfree.data.category.SlidingCategoryDataset" />
	<method signature="void setFirstCategoryIndex(int)" class="org.jfree.data.category.SlidingCategoryDataset" />
	<method signature="java.util.List getRowKeys()" class="org.jfree.data.category.SlidingCategoryDataset" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.category.SlidingCategoryDataset" />
	<method signature="java.lang.Comparable getRowKey(int)" class="org.jfree.data.category.SlidingCategoryDataset" />
	<method signature="org.jfree.data.category.CategoryDataset getUnderlyingDataset()" class="org.jfree.data.category.SlidingCategoryDataset" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.category.SlidingCategoryDataset" />
	<method signature="int getRowIndex(java.lang.Comparable)" class="org.jfree.data.category.SlidingCategoryDataset" />
	<method signature="void setMaximumCategoryCount(int)" class="org.jfree.data.category.SlidingCategoryDataset" />
	<method signature="int getRowCount()" class="org.jfree.data.category.SlidingCategoryDataset" />
	<method signature="int getMaximumCategoryCount()" class="org.jfree.data.category.SlidingCategoryDataset" />
	<method signature="int getColumnIndex(java.lang.Comparable)" class="org.jfree.data.category.SlidingCategoryDataset" />
	<method signature="int getColumnCount()" class="org.jfree.data.category.SlidingCategoryDataset" />
	<class name="org.w3c.dom.ranges.RangeException" />
	<method signature="void &lt;init&gt;(short,java.lang.String)" class="org.w3c.dom.ranges.RangeException" />
	<class name="org.jdom2.located.LocatedJDOMFactory" />
	<method signature="org.jdom2.ProcessingInstruction processingInstruction(int,int,java.lang.String)" class="org.jdom2.located.LocatedJDOMFactory" />
	<method signature="org.jdom2.EntityRef entityRef(int,int,java.lang.String,java.lang.String,java.lang.String)" class="org.jdom2.located.LocatedJDOMFactory" />
	<method signature="org.jdom2.Text text(int,int,java.lang.String)" class="org.jdom2.located.LocatedJDOMFactory" />
	<method signature="org.jdom2.Element element(int,int,java.lang.String,org.jdom2.Namespace)" class="org.jdom2.located.LocatedJDOMFactory" />
	<method signature="org.jdom2.Element element(int,int,java.lang.String)" class="org.jdom2.located.LocatedJDOMFactory" />
	<method signature="org.jdom2.DocType docType(int,int,java.lang.String,java.lang.String,java.lang.String)" class="org.jdom2.located.LocatedJDOMFactory" />
	<method signature="org.jdom2.DocType docType(int,int,java.lang.String,java.lang.String)" class="org.jdom2.located.LocatedJDOMFactory" />
	<method signature="org.jdom2.ProcessingInstruction processingInstruction(int,int,java.lang.String,java.lang.String)" class="org.jdom2.located.LocatedJDOMFactory" />
	<method signature="org.jdom2.Comment comment(int,int,java.lang.String)" class="org.jdom2.located.LocatedJDOMFactory" />
	<method signature="void &lt;init&gt;()" class="org.jdom2.located.LocatedJDOMFactory" />
	<method signature="org.jdom2.ProcessingInstruction processingInstruction(int,int,java.lang.String,java.util.Map)" class="org.jdom2.located.LocatedJDOMFactory" />
	<method signature="org.jdom2.EntityRef entityRef(int,int,java.lang.String)" class="org.jdom2.located.LocatedJDOMFactory" />
	<method signature="org.jdom2.DocType docType(int,int,java.lang.String)" class="org.jdom2.located.LocatedJDOMFactory" />
	<method signature="org.jdom2.EntityRef entityRef(int,int,java.lang.String,java.lang.String)" class="org.jdom2.located.LocatedJDOMFactory" />
	<method signature="org.jdom2.CDATA cdata(int,int,java.lang.String)" class="org.jdom2.located.LocatedJDOMFactory" />
	<method signature="org.jdom2.Element element(int,int,java.lang.String,java.lang.String)" class="org.jdom2.located.LocatedJDOMFactory" />
	<method signature="org.jdom2.Element element(int,int,java.lang.String,java.lang.String,java.lang.String)" class="org.jdom2.located.LocatedJDOMFactory" />
	<class name="org.jfree.chart.renderer.xy.StackedXYAreaRenderer2" />
	<method signature="org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)" class="org.jfree.chart.renderer.xy.StackedXYAreaRenderer2" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)" class="org.jfree.chart.renderer.xy.StackedXYAreaRenderer2" />
	<method signature="int getPassCount()" class="org.jfree.chart.renderer.xy.StackedXYAreaRenderer2" />
	<method signature="void setRoundXCoordinates(boolean)" class="org.jfree.chart.renderer.xy.StackedXYAreaRenderer2" />
	<method signature="boolean getRoundXCoordinates()" class="org.jfree.chart.renderer.xy.StackedXYAreaRenderer2" />
	<method signature="void &lt;init&gt;(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" class="org.jfree.chart.renderer.xy.StackedXYAreaRenderer2" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.renderer.xy.StackedXYAreaRenderer2" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.xy.StackedXYAreaRenderer2" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.xy.StackedXYAreaRenderer2" />
	<class name="org.apache.xerces.util.XMLEntityDescriptionImpl" />
	<method signature="void setDescription(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.util.XMLEntityDescriptionImpl" />
	<method signature="void clear()" class="org.apache.xerces.util.XMLEntityDescriptionImpl" />
	<method signature="int hashCode()" class="org.apache.xerces.util.XMLEntityDescriptionImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.util.XMLEntityDescriptionImpl" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.util.XMLEntityDescriptionImpl" />
	<method signature="java.lang.String toString()" class="org.apache.xerces.util.XMLEntityDescriptionImpl" />
	<method signature="void setDescription(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.util.XMLEntityDescriptionImpl" />
	<method signature="void setEntityName(java.lang.String)" class="org.apache.xerces.util.XMLEntityDescriptionImpl" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.util.XMLEntityDescriptionImpl" />
	<method signature="java.lang.String getEntityName()" class="org.apache.xerces.util.XMLEntityDescriptionImpl" />
	<class name="org.netbeans.lib.awtextra.AbsoluteLayout" />
	<method signature="float getLayoutAlignmentY(java.awt.Container)" class="org.netbeans.lib.awtextra.AbsoluteLayout" />
	<method signature="java.awt.Dimension maximumLayoutSize(java.awt.Container)" class="org.netbeans.lib.awtextra.AbsoluteLayout" />
	<method signature="float getLayoutAlignmentX(java.awt.Container)" class="org.netbeans.lib.awtextra.AbsoluteLayout" />
	<method signature="void addLayoutComponent(java.lang.String,java.awt.Component)" class="org.netbeans.lib.awtextra.AbsoluteLayout" />
	<method signature="void &lt;init&gt;()" class="org.netbeans.lib.awtextra.AbsoluteLayout" />
	<method signature="void layoutContainer(java.awt.Container)" class="org.netbeans.lib.awtextra.AbsoluteLayout" />
	<method signature="void addLayoutComponent(java.awt.Component,java.lang.Object)" class="org.netbeans.lib.awtextra.AbsoluteLayout" />
	<method signature="void removeLayoutComponent(java.awt.Component)" class="org.netbeans.lib.awtextra.AbsoluteLayout" />
	<method signature="java.awt.Dimension preferredLayoutSize(java.awt.Container)" class="org.netbeans.lib.awtextra.AbsoluteLayout" />
	<method signature="java.awt.Dimension minimumLayoutSize(java.awt.Container)" class="org.netbeans.lib.awtextra.AbsoluteLayout" />
	<method signature="void invalidateLayout(java.awt.Container)" class="org.netbeans.lib.awtextra.AbsoluteLayout" />
	<class name="org.jfree.text.TextFragment" />
	<method signature="int hashCode()" class="org.jfree.text.TextFragment" />
	<method signature="java.lang.String getText()" class="org.jfree.text.TextFragment" />
	<method signature="void &lt;init&gt;(java.lang.String,java.awt.Font)" class="org.jfree.text.TextFragment" />
	<method signature="float calculateBaselineOffset(java.awt.Graphics2D,org.jfree.ui.TextAnchor)" class="org.jfree.text.TextFragment" />
	<method signature="void &lt;init&gt;(java.lang.String,java.awt.Font,java.awt.Paint,float)" class="org.jfree.text.TextFragment" />
	<method signature="void draw(java.awt.Graphics2D,float,float,org.jfree.ui.TextAnchor,float,float,double)" class="org.jfree.text.TextFragment" />
	<method signature="java.awt.Paint getPaint()" class="org.jfree.text.TextFragment" />
	<method signature="java.awt.Font getFont()" class="org.jfree.text.TextFragment" />
	<method signature="float getBaselineOffset()" class="org.jfree.text.TextFragment" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.text.TextFragment" />
	<method signature="org.jfree.ui.Size2D calculateDimensions(java.awt.Graphics2D)" class="org.jfree.text.TextFragment" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.text.TextFragment" />
	<method signature="void &lt;init&gt;(java.lang.String,java.awt.Font,java.awt.Paint)" class="org.jfree.text.TextFragment" />
	<class name="javax.annotation.Nonnull$Checker" />
	<method signature="javax.annotation.meta.When forConstantValue(javax.annotation.Nonnull,java.lang.Object)" class="javax.annotation.Nonnull$Checker" />
	<method signature="void &lt;init&gt;()" class="javax.annotation.Nonnull$Checker" />
	<method signature="javax.annotation.meta.When forConstantValue(java.lang.annotation.Annotation,java.lang.Object)" class="javax.annotation.Nonnull$Checker" />
	<class name="org.apache.xerces.parsers.XIncludeParserConfiguration" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable)" class="org.apache.xerces.parsers.XIncludeParserConfiguration" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable,org.apache.xerces.xni.grammars.XMLGrammarPool,org.apache.xerces.xni.parser.XMLComponentManager)" class="org.apache.xerces.parsers.XIncludeParserConfiguration" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.parsers.XIncludeParserConfiguration" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable,org.apache.xerces.xni.grammars.XMLGrammarPool)" class="org.apache.xerces.parsers.XIncludeParserConfiguration" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="org.apache.xerces.parsers.XIncludeParserConfiguration" />
	<class name="org.jfree.chart.ChartTheme" />
	<method signature="void apply(org.jfree.chart.JFreeChart)" class="org.jfree.chart.ChartTheme" />
	<class name="org.jfree.layout.LCBLayout" />
	<method signature="void addLayoutComponent(java.awt.Component)" class="org.jfree.layout.LCBLayout" />
	<method signature="void &lt;init&gt;(int)" class="org.jfree.layout.LCBLayout" />
	<method signature="void addLayoutComponent(java.lang.String,java.awt.Component)" class="org.jfree.layout.LCBLayout" />
	<method signature="void layoutContainer(java.awt.Container)" class="org.jfree.layout.LCBLayout" />
	<method signature="java.awt.Dimension preferredLayoutSize(java.awt.Container)" class="org.jfree.layout.LCBLayout" />
	<method signature="void removeLayoutComponent(java.awt.Component)" class="org.jfree.layout.LCBLayout" />
	<method signature="java.awt.Dimension minimumLayoutSize(java.awt.Container)" class="org.jfree.layout.LCBLayout" />
	<method signature="void removeLayoutComponent(java.lang.String,java.awt.Component)" class="org.jfree.layout.LCBLayout" />
	<class name="org.apache.xerces.impl.dv.xs.EntityDV" />
	<method signature="void checkExtraRules(java.lang.Object,org.apache.xerces.impl.dv.ValidationContext)" class="org.apache.xerces.impl.dv.xs.EntityDV" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.xs.EntityDV" />
	<method signature="java.lang.Object getActualValue(java.lang.String,org.apache.xerces.impl.dv.ValidationContext)" class="org.apache.xerces.impl.dv.xs.EntityDV" />
	<method signature="short getAllowedFacets()" class="org.apache.xerces.impl.dv.xs.EntityDV" />
	<class name="com.google.zxing.client.result.WifiResultParser" />
	<method signature="com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result)" class="com.google.zxing.client.result.WifiResultParser" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.client.result.WifiResultParser" />
	<method signature="com.google.zxing.client.result.WifiParsedResult parse(com.google.zxing.Result)" class="com.google.zxing.client.result.WifiResultParser" />
	<class name="org.apache.xerces.impl.dv.SchemaDVFactory" />
	<method signature="org.apache.xerces.impl.dv.SchemaDVFactory getInstance(java.lang.String)" class="org.apache.xerces.impl.dv.SchemaDVFactory" />
	<method signature="org.apache.xerces.impl.dv.XSSimpleType getBuiltInType(java.lang.String)" class="org.apache.xerces.impl.dv.SchemaDVFactory" />
	<method signature="org.apache.xerces.impl.dv.XSSimpleType createTypeRestriction(java.lang.String,java.lang.String,short,org.apache.xerces.impl.dv.XSSimpleType,org.apache.xerces.xs.XSObjectList)" class="org.apache.xerces.impl.dv.SchemaDVFactory" />
	<method signature="org.apache.xerces.impl.dv.XSSimpleType createTypeUnion(java.lang.String,java.lang.String,short,org.apache.xerces.impl.dv.XSSimpleType[],org.apache.xerces.xs.XSObjectList)" class="org.apache.xerces.impl.dv.SchemaDVFactory" />
	<method signature="org.apache.xerces.impl.dv.XSSimpleType createTypeList(java.lang.String,java.lang.String,short,org.apache.xerces.impl.dv.XSSimpleType,org.apache.xerces.xs.XSObjectList)" class="org.apache.xerces.impl.dv.SchemaDVFactory" />
	<method signature="org.apache.xerces.impl.dv.SchemaDVFactory getInstance()" class="org.apache.xerces.impl.dv.SchemaDVFactory" />
	<method signature="org.apache.xerces.util.SymbolHash getBuiltInTypes()" class="org.apache.xerces.impl.dv.SchemaDVFactory" />
	<class name="org.apache.xerces.dom.DeferredElementImpl" />
	<method signature="int getNodeIndex()" class="org.apache.xerces.dom.DeferredElementImpl" />
	<class name="org.apache.xerces.xinclude.MultipleScopeNamespaceSupport" />
	<method signature="java.lang.String getPrefix(java.lang.String,int,int)" class="org.apache.xerces.xinclude.MultipleScopeNamespaceSupport" />
	<method signature="void reset()" class="org.apache.xerces.xinclude.MultipleScopeNamespaceSupport" />
	<method signature="void &lt;init&gt;(org.apache.xerces.xni.NamespaceContext)" class="org.apache.xerces.xinclude.MultipleScopeNamespaceSupport" />
	<method signature="java.lang.String getURI(java.lang.String)" class="org.apache.xerces.xinclude.MultipleScopeNamespaceSupport" />
	<method signature="int getScopeForContext(int)" class="org.apache.xerces.xinclude.MultipleScopeNamespaceSupport" />
	<method signature="java.lang.String getPrefix(java.lang.String,int)" class="org.apache.xerces.xinclude.MultipleScopeNamespaceSupport" />
	<method signature="void popScope()" class="org.apache.xerces.xinclude.MultipleScopeNamespaceSupport" />
	<method signature="java.lang.String getURI(java.lang.String,int)" class="org.apache.xerces.xinclude.MultipleScopeNamespaceSupport" />
	<method signature="java.lang.String getPrefix(java.lang.String)" class="org.apache.xerces.xinclude.MultipleScopeNamespaceSupport" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.xinclude.MultipleScopeNamespaceSupport" />
	<method signature="java.util.Enumeration getAllPrefixes()" class="org.apache.xerces.xinclude.MultipleScopeNamespaceSupport" />
	<method signature="java.lang.String getURI(java.lang.String,int,int)" class="org.apache.xerces.xinclude.MultipleScopeNamespaceSupport" />
	<method signature="void pushScope()" class="org.apache.xerces.xinclude.MultipleScopeNamespaceSupport" />
	<class name="org.jdom2.output.JDOMLocator" />
	<method signature="java.lang.Object getNode()" class="org.jdom2.output.JDOMLocator" />
	<class name="org.apache.commons.lang3.CharSet" />
	<method signature="org.apache.commons.lang3.CharSet getInstance(java.lang.String[])" class="org.apache.commons.lang3.CharSet" />
	<method signature="int hashCode()" class="org.apache.commons.lang3.CharSet" />
	<method signature="boolean equals(java.lang.Object)" class="org.apache.commons.lang3.CharSet" />
	<method signature="java.lang.String toString()" class="org.apache.commons.lang3.CharSet" />
	<method signature="boolean contains(char)" class="org.apache.commons.lang3.CharSet" />
	<class name="org.apache.html.dom.HTMLMenuElementImpl" />
	<method signature="void setCompact(boolean)" class="org.apache.html.dom.HTMLMenuElementImpl" />
	<method signature="boolean getCompact()" class="org.apache.html.dom.HTMLMenuElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLMenuElementImpl" />
	<class name="org.jfree.chart.title.ShortTextTitle" />
	<method signature="java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)" class="org.jfree.chart.title.ShortTextTitle" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.chart.title.ShortTextTitle" />
	<method signature="org.jfree.ui.Size2D arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" class="org.jfree.chart.title.ShortTextTitle" />
	<class name="org.jdom2.xpath.util.AbstractXPathCompiled" />
	<method signature="java.lang.Object setVariable(java.lang.String,org.jdom2.Namespace,java.lang.Object)" class="org.jdom2.xpath.util.AbstractXPathCompiled" />
	<method signature="java.util.List evaluate(java.lang.Object)" class="org.jdom2.xpath.util.AbstractXPathCompiled" />
	<method signature="org.jdom2.xpath.XPathExpression clone()" class="org.jdom2.xpath.util.AbstractXPathCompiled" />
	<method signature="org.jdom2.filter.Filter getFilter()" class="org.jdom2.xpath.util.AbstractXPathCompiled" />
	<method signature="org.jdom2.xpath.XPathDiagnostic diagnose(java.lang.Object,boolean)" class="org.jdom2.xpath.util.AbstractXPathCompiled" />
	<method signature="java.lang.String getExpression()" class="org.jdom2.xpath.util.AbstractXPathCompiled" />
	<method signature="java.lang.Object clone()" class="org.jdom2.xpath.util.AbstractXPathCompiled" />
	<method signature="java.lang.Object getVariable(java.lang.String)" class="org.jdom2.xpath.util.AbstractXPathCompiled" />
	<method signature="org.jdom2.Namespace getNamespace(java.lang.String)" class="org.jdom2.xpath.util.AbstractXPathCompiled" />
	<method signature="java.lang.Object getVariable(java.lang.String,org.jdom2.Namespace)" class="org.jdom2.xpath.util.AbstractXPathCompiled" />
	<method signature="java.lang.Object setVariable(java.lang.String,java.lang.Object)" class="org.jdom2.xpath.util.AbstractXPathCompiled" />
	<method signature="java.lang.Object evaluateFirst(java.lang.Object)" class="org.jdom2.xpath.util.AbstractXPathCompiled" />
	<method signature="java.lang.String toString()" class="org.jdom2.xpath.util.AbstractXPathCompiled" />
	<method signature="void &lt;init&gt;(java.lang.String,org.jdom2.filter.Filter,java.util.Map,org.jdom2.Namespace[])" class="org.jdom2.xpath.util.AbstractXPathCompiled" />
	<method signature="org.jdom2.Namespace[] getNamespaces()" class="org.jdom2.xpath.util.AbstractXPathCompiled" />
	<class name="org.apache.commons.lang3.builder.ReflectionToStringBuilder" />
	<method signature="java.lang.String toString(java.lang.Object)" class="org.apache.commons.lang3.builder.ReflectionToStringBuilder" />
	<method signature="void &lt;init&gt;(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,java.lang.StringBuffer,java.lang.Class,boolean,boolean)" class="org.apache.commons.lang3.builder.ReflectionToStringBuilder" />
	<method signature="boolean isAppendTransients()" class="org.apache.commons.lang3.builder.ReflectionToStringBuilder" />
	<method signature="java.lang.String toStringExclude(java.lang.Object,java.lang.String[])" class="org.apache.commons.lang3.builder.ReflectionToStringBuilder" />
	<method signature="void &lt;init&gt;(java.lang.Object)" class="org.apache.commons.lang3.builder.ReflectionToStringBuilder" />
	<method signature="java.lang.Class getUpToClass()" class="org.apache.commons.lang3.builder.ReflectionToStringBuilder" />
	<method signature="void setAppendTransients(boolean)" class="org.apache.commons.lang3.builder.ReflectionToStringBuilder" />
	<method signature="java.lang.String toString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,boolean)" class="org.apache.commons.lang3.builder.ReflectionToStringBuilder" />
	<method signature="java.lang.String toString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle)" class="org.apache.commons.lang3.builder.ReflectionToStringBuilder" />
	<method signature="java.lang.String toStringExclude(java.lang.Object,java.util.Collection)" class="org.apache.commons.lang3.builder.ReflectionToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ReflectionToStringBuilder reflectionAppendArray(java.lang.Object)" class="org.apache.commons.lang3.builder.ReflectionToStringBuilder" />
	<method signature="boolean isAppendStatics()" class="org.apache.commons.lang3.builder.ReflectionToStringBuilder" />
	<method signature="void setUpToClass(java.lang.Class)" class="org.apache.commons.lang3.builder.ReflectionToStringBuilder" />
	<method signature="void setAppendStatics(boolean)" class="org.apache.commons.lang3.builder.ReflectionToStringBuilder" />
	<method signature="org.apache.commons.lang3.builder.ReflectionToStringBuilder setExcludeFieldNames(java.lang.String[])" class="org.apache.commons.lang3.builder.ReflectionToStringBuilder" />
	<method signature="java.lang.String toString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,boolean,boolean,java.lang.Class)" class="org.apache.commons.lang3.builder.ReflectionToStringBuilder" />
	<method signature="java.lang.String toString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,boolean,boolean)" class="org.apache.commons.lang3.builder.ReflectionToStringBuilder" />
	<method signature="void &lt;init&gt;(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,java.lang.StringBuffer)" class="org.apache.commons.lang3.builder.ReflectionToStringBuilder" />
	<method signature="void &lt;init&gt;(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle)" class="org.apache.commons.lang3.builder.ReflectionToStringBuilder" />
	<method signature="java.lang.String toString()" class="org.apache.commons.lang3.builder.ReflectionToStringBuilder" />
	<method signature="java.lang.String[] getExcludeFieldNames()" class="org.apache.commons.lang3.builder.ReflectionToStringBuilder" />
	<class name="org.apache.html.dom.HTMLBodyElementImpl" />
	<method signature="void setBgColor(java.lang.String)" class="org.apache.html.dom.HTMLBodyElementImpl" />
	<method signature="java.lang.String getText()" class="org.apache.html.dom.HTMLBodyElementImpl" />
	<method signature="void setLink(java.lang.String)" class="org.apache.html.dom.HTMLBodyElementImpl" />
	<method signature="void setALink(java.lang.String)" class="org.apache.html.dom.HTMLBodyElementImpl" />
	<method signature="void setText(java.lang.String)" class="org.apache.html.dom.HTMLBodyElementImpl" />
	<method signature="java.lang.String getLink()" class="org.apache.html.dom.HTMLBodyElementImpl" />
	<method signature="void setVLink(java.lang.String)" class="org.apache.html.dom.HTMLBodyElementImpl" />
	<method signature="java.lang.String getVLink()" class="org.apache.html.dom.HTMLBodyElementImpl" />
	<method signature="void setBackground(java.lang.String)" class="org.apache.html.dom.HTMLBodyElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLBodyElementImpl" />
	<method signature="java.lang.String getBgColor()" class="org.apache.html.dom.HTMLBodyElementImpl" />
	<method signature="java.lang.String getALink()" class="org.apache.html.dom.HTMLBodyElementImpl" />
	<method signature="java.lang.String getBackground()" class="org.apache.html.dom.HTMLBodyElementImpl" />
	<class name="org.jfree.chart.util.LineUtilities" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.util.LineUtilities" />
	<method signature="boolean clipLine(java.awt.geom.Line2D,java.awt.geom.Rectangle2D)" class="org.jfree.chart.util.LineUtilities" />
	<class name="org.apache.xerces.parsers.AbstractSAXParser" />
	<method signature="void processingInstruction(java.lang.String,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractSAXParser" />
	<method signature="void reset()" class="org.apache.xerces.parsers.AbstractSAXParser" />
	<method signature="void endElement(org.apache.xerces.xni.QName,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractSAXParser" />
	<method signature="org.apache.xerces.xs.AttributePSVI getAttributePSVIByName(java.lang.String,java.lang.String)" class="org.apache.xerces.parsers.AbstractSAXParser" />
	<method signature="void externalEntityDecl(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractSAXParser" />
	<method signature="void doctypeDecl(java.lang.String,java.lang.String,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractSAXParser" />
	<method signature="void parse(org.xml.sax.InputSource)" class="org.apache.xerces.parsers.AbstractSAXParser" />
	<method signature="org.xml.sax.EntityResolver getEntityResolver()" class="org.apache.xerces.parsers.AbstractSAXParser" />
	<method signature="void ignorableWhitespace(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractSAXParser" />
	<method signature="void attributeDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractSAXParser" />
	<method signature="void internalEntityDecl(java.lang.String,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractSAXParser" />
	<method signature="void elementDecl(java.lang.String,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractSAXParser" />
	<method signature="void unparsedEntityDecl(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractSAXParser" />
	<method signature="void endDocument(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractSAXParser" />
	<method signature="void startElement(org.apache.xerces.xni.QName,org.apache.xerces.xni.XMLAttributes,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractSAXParser" />
	<method signature="void endExternalSubset(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractSAXParser" />
	<method signature="void startDocument(org.apache.xerces.xni.XMLLocator,java.lang.String,org.apache.xerces.xni.NamespaceContext,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractSAXParser" />
	<method signature="void startGeneralEntity(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractSAXParser" />
	<method signature="void setContentHandler(org.xml.sax.ContentHandler)" class="org.apache.xerces.parsers.AbstractSAXParser" />
	<method signature="org.xml.sax.ContentHandler getContentHandler()" class="org.apache.xerces.parsers.AbstractSAXParser" />
	<method signature="void endGeneralEntity(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractSAXParser" />
	<method signature="java.lang.Object getProperty(java.lang.String)" class="org.apache.xerces.parsers.AbstractSAXParser" />
	<method signature="void setLocale(java.util.Locale)" class="org.apache.xerces.parsers.AbstractSAXParser" />
	<method signature="org.apache.xerces.xs.ElementPSVI getElementPSVI()" class="org.apache.xerces.parsers.AbstractSAXParser" />
	<method signature="org.xml.sax.ErrorHandler getErrorHandler()" class="org.apache.xerces.parsers.AbstractSAXParser" />
	<method signature="boolean getFeature(java.lang.String)" class="org.apache.xerces.parsers.AbstractSAXParser" />
	<method signature="void notationDecl(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractSAXParser" />
	<method signature="void startParameterEntity(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractSAXParser" />
	<method signature="void startCDATA(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractSAXParser" />
	<method signature="org.xml.sax.DTDHandler getDTDHandler()" class="org.apache.xerces.parsers.AbstractSAXParser" />
	<method signature="void endCDATA(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractSAXParser" />
	<method signature="void startExternalSubset(org.apache.xerces.xni.XMLResourceIdentifier,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractSAXParser" />
	<method signature="void characters(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractSAXParser" />
	<method signature="void setFeature(java.lang.String,boolean)" class="org.apache.xerces.parsers.AbstractSAXParser" />
	<method signature="void xmlDecl(java.lang.String,java.lang.String,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractSAXParser" />
	<method signature="void setDTDHandler(org.xml.sax.DTDHandler)" class="org.apache.xerces.parsers.AbstractSAXParser" />
	<method signature="org.apache.xerces.xs.AttributePSVI getAttributePSVI(int)" class="org.apache.xerces.parsers.AbstractSAXParser" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="org.apache.xerces.parsers.AbstractSAXParser" />
	<method signature="void endParameterEntity(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractSAXParser" />
	<method signature="void endDTD(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractSAXParser" />
	<method signature="void comment(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.parsers.AbstractSAXParser" />
	<method signature="void setDocumentHandler(org.xml.sax.DocumentHandler)" class="org.apache.xerces.parsers.AbstractSAXParser" />
	<method signature="void setEntityResolver(org.xml.sax.EntityResolver)" class="org.apache.xerces.parsers.AbstractSAXParser" />
	<method signature="void parse(java.lang.String)" class="org.apache.xerces.parsers.AbstractSAXParser" />
	<method signature="void setErrorHandler(org.xml.sax.ErrorHandler)" class="org.apache.xerces.parsers.AbstractSAXParser" />
	<class name="org.apache.xerces.impl.dv.dtd.NMTOKENDatatypeValidator" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.dtd.NMTOKENDatatypeValidator" />
	<method signature="void validate(java.lang.String,org.apache.xerces.impl.dv.ValidationContext)" class="org.apache.xerces.impl.dv.dtd.NMTOKENDatatypeValidator" />
	<class name="org.jfree.text.TextBlockAnchor" />
	<method signature="int hashCode()" class="org.jfree.text.TextBlockAnchor" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.text.TextBlockAnchor" />
	<method signature="java.lang.String toString()" class="org.jfree.text.TextBlockAnchor" />
	<class name="org.apache.xerces.impl.XML11DocumentScannerImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.XML11DocumentScannerImpl" />
	<class name="org.apache.commons.lang3.tuple.Pair" />
	<method signature="org.apache.commons.lang3.tuple.Pair of(java.lang.Object,java.lang.Object)" class="org.apache.commons.lang3.tuple.Pair" />
	<method signature="int compareTo(org.apache.commons.lang3.tuple.Pair)" class="org.apache.commons.lang3.tuple.Pair" />
	<method signature="int compareTo(java.lang.Object)" class="org.apache.commons.lang3.tuple.Pair" />
	<method signature="int hashCode()" class="org.apache.commons.lang3.tuple.Pair" />
	<method signature="java.lang.Object getKey()" class="org.apache.commons.lang3.tuple.Pair" />
	<method signature="java.lang.String toString(java.lang.String)" class="org.apache.commons.lang3.tuple.Pair" />
	<method signature="boolean equals(java.lang.Object)" class="org.apache.commons.lang3.tuple.Pair" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.tuple.Pair" />
	<method signature="java.lang.Object getLeft()" class="org.apache.commons.lang3.tuple.Pair" />
	<method signature="java.lang.String toString()" class="org.apache.commons.lang3.tuple.Pair" />
	<method signature="java.lang.Object getValue()" class="org.apache.commons.lang3.tuple.Pair" />
	<method signature="java.lang.Object getRight()" class="org.apache.commons.lang3.tuple.Pair" />
	<class name="org.jdom2.transform.XSLTransformException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Exception)" class="org.jdom2.transform.XSLTransformException" />
	<method signature="void &lt;init&gt;()" class="org.jdom2.transform.XSLTransformException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jdom2.transform.XSLTransformException" />
	<class name="org.jfree.data.general.DefaultKeyedValuesDataset" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.general.DefaultKeyedValuesDataset" />
	<class name="tourma.tableModel.MjtCoaches" />
	<method signature="boolean isCellEditable(int,int)" class="tourma.tableModel.MjtCoaches" />
	<method signature="void &lt;init&gt;(tourma.data.IContainCoachs)" class="tourma.tableModel.MjtCoaches" />
	<method signature="java.awt.Component getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)" class="tourma.tableModel.MjtCoaches" />
	<method signature="int getRowCount()" class="tourma.tableModel.MjtCoaches" />
	<method signature="java.lang.String getColumnName(int)" class="tourma.tableModel.MjtCoaches" />
	<method signature="java.lang.Class getColumnClass(int)" class="tourma.tableModel.MjtCoaches" />
	<method signature="java.lang.Object getValueAt(int,int)" class="tourma.tableModel.MjtCoaches" />
	<method signature="int getColumnCount()" class="tourma.tableModel.MjtCoaches" />
	<class name="org.jfree.data.xy.YIntervalSeriesCollection" />
	<method signature="java.lang.Number getX(int,int)" class="org.jfree.data.xy.YIntervalSeriesCollection" />
	<method signature="double getStartYValue(int,int)" class="org.jfree.data.xy.YIntervalSeriesCollection" />
	<method signature="void removeSeries(org.jfree.data.xy.YIntervalSeries)" class="org.jfree.data.xy.YIntervalSeriesCollection" />
	<method signature="java.lang.Number getY(int,int)" class="org.jfree.data.xy.YIntervalSeriesCollection" />
	<method signature="void removeSeries(int)" class="org.jfree.data.xy.YIntervalSeriesCollection" />
	<method signature="org.jfree.data.xy.YIntervalSeries getSeries(int)" class="org.jfree.data.xy.YIntervalSeriesCollection" />
	<method signature="int getSeriesCount()" class="org.jfree.data.xy.YIntervalSeriesCollection" />
	<method signature="double getEndYValue(int,int)" class="org.jfree.data.xy.YIntervalSeriesCollection" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.xy.YIntervalSeriesCollection" />
	<method signature="java.lang.Comparable getSeriesKey(int)" class="org.jfree.data.xy.YIntervalSeriesCollection" />
	<method signature="void addSeries(org.jfree.data.xy.YIntervalSeries)" class="org.jfree.data.xy.YIntervalSeriesCollection" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.xy.YIntervalSeriesCollection" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.xy.YIntervalSeriesCollection" />
	<method signature="java.lang.Number getEndX(int,int)" class="org.jfree.data.xy.YIntervalSeriesCollection" />
	<method signature="java.lang.Number getStartX(int,int)" class="org.jfree.data.xy.YIntervalSeriesCollection" />
	<method signature="java.lang.Number getStartY(int,int)" class="org.jfree.data.xy.YIntervalSeriesCollection" />
	<method signature="int getItemCount(int)" class="org.jfree.data.xy.YIntervalSeriesCollection" />
	<method signature="double getYValue(int,int)" class="org.jfree.data.xy.YIntervalSeriesCollection" />
	<method signature="java.lang.Number getEndY(int,int)" class="org.jfree.data.xy.YIntervalSeriesCollection" />
	<method signature="void removeAllSeries()" class="org.jfree.data.xy.YIntervalSeriesCollection" />
	<class name="com.hexidec.ekit.component.JComboBoxNoFocus" />
	<method signature="boolean isFocusable()" class="com.hexidec.ekit.component.JComboBoxNoFocus" />
	<method signature="void &lt;init&gt;()" class="com.hexidec.ekit.component.JComboBoxNoFocus" />
	<method signature="void &lt;init&gt;(java.util.Vector)" class="com.hexidec.ekit.component.JComboBoxNoFocus" />
	<class name="org.jfree.chart.block.AbstractBlock" />
	<method signature="void setPadding(org.jfree.ui.RectangleInsets)" class="org.jfree.chart.block.AbstractBlock" />
	<method signature="org.jfree.ui.RectangleInsets getPadding()" class="org.jfree.chart.block.AbstractBlock" />
	<method signature="org.jfree.ui.Size2D arrange(java.awt.Graphics2D)" class="org.jfree.chart.block.AbstractBlock" />
	<method signature="void setMargin(org.jfree.ui.RectangleInsets)" class="org.jfree.chart.block.AbstractBlock" />
	<method signature="void setWidth(double)" class="org.jfree.chart.block.AbstractBlock" />
	<method signature="void setHeight(double)" class="org.jfree.chart.block.AbstractBlock" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.block.AbstractBlock" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.block.AbstractBlock" />
	<method signature="double getContentXOffset()" class="org.jfree.chart.block.AbstractBlock" />
	<method signature="java.awt.geom.Rectangle2D getBounds()" class="org.jfree.chart.block.AbstractBlock" />
	<method signature="org.jfree.chart.block.BlockFrame getFrame()" class="org.jfree.chart.block.AbstractBlock" />
	<method signature="void setMargin(double,double,double,double)" class="org.jfree.chart.block.AbstractBlock" />
	<method signature="double getHeight()" class="org.jfree.chart.block.AbstractBlock" />
	<method signature="void setBorder(org.jfree.chart.block.BlockBorder)" class="org.jfree.chart.block.AbstractBlock" />
	<method signature="org.jfree.ui.RectangleInsets getMargin()" class="org.jfree.chart.block.AbstractBlock" />
	<method signature="java.lang.String getID()" class="org.jfree.chart.block.AbstractBlock" />
	<method signature="org.jfree.ui.Size2D arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" class="org.jfree.chart.block.AbstractBlock" />
	<method signature="void setPadding(double,double,double,double)" class="org.jfree.chart.block.AbstractBlock" />
	<method signature="double getContentYOffset()" class="org.jfree.chart.block.AbstractBlock" />
	<method signature="void setID(java.lang.String)" class="org.jfree.chart.block.AbstractBlock" />
	<method signature="void setBounds(java.awt.geom.Rectangle2D)" class="org.jfree.chart.block.AbstractBlock" />
	<method signature="org.jfree.chart.block.BlockBorder getBorder()" class="org.jfree.chart.block.AbstractBlock" />
	<method signature="void setFrame(org.jfree.chart.block.BlockFrame)" class="org.jfree.chart.block.AbstractBlock" />
	<method signature="double getWidth()" class="org.jfree.chart.block.AbstractBlock" />
	<method signature="void setBorder(double,double,double,double)" class="org.jfree.chart.block.AbstractBlock" />
	<class name="tourma.views.parameters.JPNParameters" />
	<method signature="void update()" class="tourma.views.parameters.JPNParameters" />
	<method signature="void &lt;init&gt;()" class="tourma.views.parameters.JPNParameters" />
	<class name="org.jfree.util.LineBreakIterator" />
	<method signature="int nextPosition()" class="org.jfree.util.LineBreakIterator" />
	<method signature="java.lang.String getText()" class="org.jfree.util.LineBreakIterator" />
	<method signature="void remove()" class="org.jfree.util.LineBreakIterator" />
	<method signature="void &lt;init&gt;()" class="org.jfree.util.LineBreakIterator" />
	<method signature="boolean hasNext()" class="org.jfree.util.LineBreakIterator" />
	<method signature="java.lang.Object next()" class="org.jfree.util.LineBreakIterator" />
	<method signature="void setText(java.lang.String)" class="org.jfree.util.LineBreakIterator" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.util.LineBreakIterator" />
	<method signature="int nextWithEnd()" class="org.jfree.util.LineBreakIterator" />
	<class name="javax.xml.namespace.NamespaceContext" />
	<method signature="java.lang.String getPrefix(java.lang.String)" class="javax.xml.namespace.NamespaceContext" />
	<method signature="java.util.Iterator getPrefixes(java.lang.String)" class="javax.xml.namespace.NamespaceContext" />
	<method signature="java.lang.String getNamespaceURI(java.lang.String)" class="javax.xml.namespace.NamespaceContext" />
	<class name="org.xml.sax.ext.Locator2" />
	<method signature="java.lang.String getEncoding()" class="org.xml.sax.ext.Locator2" />
	<method signature="java.lang.String getXMLVersion()" class="org.xml.sax.ext.Locator2" />
	<class name="org.jfree.data.time.ohlc.OHLCItem" />
	<method signature="double getOpenValue()" class="org.jfree.data.time.ohlc.OHLCItem" />
	<method signature="double getHighValue()" class="org.jfree.data.time.ohlc.OHLCItem" />
	<method signature="double getYValue()" class="org.jfree.data.time.ohlc.OHLCItem" />
	<method signature="double getLowValue()" class="org.jfree.data.time.ohlc.OHLCItem" />
	<method signature="void &lt;init&gt;(org.jfree.data.time.RegularTimePeriod,double,double,double,double)" class="org.jfree.data.time.ohlc.OHLCItem" />
	<method signature="double getCloseValue()" class="org.jfree.data.time.ohlc.OHLCItem" />
	<method signature="org.jfree.data.time.RegularTimePeriod getPeriod()" class="org.jfree.data.time.ohlc.OHLCItem" />
	<class name="org.jfree.chart.LegendRenderingOrder" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.LegendRenderingOrder" />
	<method signature="java.lang.String toString()" class="org.jfree.chart.LegendRenderingOrder" />
	<class name="org.jdom2.Parent" />
	<method signature="org.jdom2.util.IteratorIterable getDescendants(org.jdom2.filter.Filter)" class="org.jdom2.Parent" />
	<method signature="boolean removeContent(org.jdom2.Content)" class="org.jdom2.Parent" />
	<method signature="org.jdom2.Parent addContent(org.jdom2.Content)" class="org.jdom2.Parent" />
	<method signature="org.jdom2.Document getDocument()" class="org.jdom2.Parent" />
	<method signature="org.jdom2.Parent addContent(int,java.util.Collection)" class="org.jdom2.Parent" />
	<method signature="org.jdom2.util.IteratorIterable getDescendants()" class="org.jdom2.Parent" />
	<method signature="java.lang.Object clone()" class="org.jdom2.Parent" />
	<method signature="org.jdom2.Parent addContent(java.util.Collection)" class="org.jdom2.Parent" />
	<method signature="org.jdom2.Content removeContent(int)" class="org.jdom2.Parent" />
	<method signature="java.util.List cloneContent()" class="org.jdom2.Parent" />
	<method signature="int getContentSize()" class="org.jdom2.Parent" />
	<method signature="java.util.List removeContent(org.jdom2.filter.Filter)" class="org.jdom2.Parent" />
	<method signature="java.util.List removeContent()" class="org.jdom2.Parent" />
	<method signature="void canContainContent(org.jdom2.Content,int,boolean)" class="org.jdom2.Parent" />
	<method signature="int indexOf(org.jdom2.Content)" class="org.jdom2.Parent" />
	<method signature="org.jdom2.Content getContent(int)" class="org.jdom2.Parent" />
	<method signature="org.jdom2.Parent getParent()" class="org.jdom2.Parent" />
	<method signature="java.util.List getContent()" class="org.jdom2.Parent" />
	<method signature="org.jdom2.Parent addContent(int,org.jdom2.Content)" class="org.jdom2.Parent" />
	<method signature="java.util.List getContent(org.jdom2.filter.Filter)" class="org.jdom2.Parent" />
	<class name="org.apache.html.dom.HTMLUListElementImpl" />
	<method signature="void setCompact(boolean)" class="org.apache.html.dom.HTMLUListElementImpl" />
	<method signature="boolean getCompact()" class="org.apache.html.dom.HTMLUListElementImpl" />
	<method signature="java.lang.String getType()" class="org.apache.html.dom.HTMLUListElementImpl" />
	<method signature="void setType(java.lang.String)" class="org.apache.html.dom.HTMLUListElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLUListElementImpl" />
	<class name="org.apache.xerces.xni.grammars.XMLSchemaDescription" />
	<method signature="org.apache.xerces.xni.QName getEnclosingElementName()" class="org.apache.xerces.xni.grammars.XMLSchemaDescription" />
	<method signature="org.apache.xerces.xni.QName getTriggeringComponent()" class="org.apache.xerces.xni.grammars.XMLSchemaDescription" />
	<method signature="java.lang.String getTargetNamespace()" class="org.apache.xerces.xni.grammars.XMLSchemaDescription" />
	<method signature="java.lang.String[] getLocationHints()" class="org.apache.xerces.xni.grammars.XMLSchemaDescription" />
	<method signature="short getContextType()" class="org.apache.xerces.xni.grammars.XMLSchemaDescription" />
	<method signature="org.apache.xerces.xni.XMLAttributes getAttributes()" class="org.apache.xerces.xni.grammars.XMLSchemaDescription" />
	<class name="org.apache.xerces.xs.ItemPSVI" />
	<method signature="org.apache.xerces.xs.XSValue getSchemaValue()" class="org.apache.xerces.xs.ItemPSVI" />
	<method signature="org.apache.xerces.xs.XSSimpleTypeDefinition getMemberTypeDefinition()" class="org.apache.xerces.xs.ItemPSVI" />
	<method signature="org.apache.xerces.xs.XSTypeDefinition getTypeDefinition()" class="org.apache.xerces.xs.ItemPSVI" />
	<method signature="java.lang.String getValidationContext()" class="org.apache.xerces.xs.ItemPSVI" />
	<method signature="org.apache.xerces.xs.ShortList getItemValueTypes()" class="org.apache.xerces.xs.ItemPSVI" />
	<method signature="org.apache.xerces.xs.StringList getErrorMessages()" class="org.apache.xerces.xs.ItemPSVI" />
	<method signature="short getValidity()" class="org.apache.xerces.xs.ItemPSVI" />
	<method signature="short getActualNormalizedValueType()" class="org.apache.xerces.xs.ItemPSVI" />
	<method signature="boolean getIsSchemaSpecified()" class="org.apache.xerces.xs.ItemPSVI" />
	<method signature="java.lang.Object getActualNormalizedValue()" class="org.apache.xerces.xs.ItemPSVI" />
	<method signature="org.apache.xerces.xs.StringList getErrorCodes()" class="org.apache.xerces.xs.ItemPSVI" />
	<method signature="java.lang.String getSchemaDefault()" class="org.apache.xerces.xs.ItemPSVI" />
	<method signature="short getValidationAttempted()" class="org.apache.xerces.xs.ItemPSVI" />
	<method signature="java.lang.String getSchemaNormalizedValue()" class="org.apache.xerces.xs.ItemPSVI" />
	<class name="org.jfree.ui.KeyedComboBoxModel" />
	<method signature="void setSelectedKey(java.lang.Object)" class="org.jfree.ui.KeyedComboBoxModel" />
	<method signature="int findElementIndex(java.lang.Object)" class="org.jfree.ui.KeyedComboBoxModel" />
	<method signature="void setData(java.lang.Object[],java.lang.Object[])" class="org.jfree.ui.KeyedComboBoxModel" />
	<method signature="int getSize()" class="org.jfree.ui.KeyedComboBoxModel" />
	<method signature="java.lang.Object getKeyAt(int)" class="org.jfree.ui.KeyedComboBoxModel" />
	<method signature="void setAllowOtherValue(boolean)" class="org.jfree.ui.KeyedComboBoxModel" />
	<method signature="void removeDataElement(java.lang.Object)" class="org.jfree.ui.KeyedComboBoxModel" />
	<method signature="void add(java.lang.Object,java.lang.Object)" class="org.jfree.ui.KeyedComboBoxModel" />
	<method signature="void &lt;init&gt;(java.lang.Object[],java.lang.Object[])" class="org.jfree.ui.KeyedComboBoxModel" />
	<method signature="void setSelectedItem(java.lang.Object)" class="org.jfree.ui.KeyedComboBoxModel" />
	<method signature="void clear()" class="org.jfree.ui.KeyedComboBoxModel" />
	<method signature="void addListDataListener(javax.swing.event.ListDataListener)" class="org.jfree.ui.KeyedComboBoxModel" />
	<method signature="void &lt;init&gt;()" class="org.jfree.ui.KeyedComboBoxModel" />
	<method signature="java.lang.Object getSelectedItem()" class="org.jfree.ui.KeyedComboBoxModel" />
	<method signature="java.lang.Object getElementAt(int)" class="org.jfree.ui.KeyedComboBoxModel" />
	<method signature="void removeListDataListener(javax.swing.event.ListDataListener)" class="org.jfree.ui.KeyedComboBoxModel" />
	<method signature="java.lang.Object getSelectedKey()" class="org.jfree.ui.KeyedComboBoxModel" />
	<class name="org.jdom2.located.LocatedEntityRef" />
	<method signature="void setLine(int)" class="org.jdom2.located.LocatedEntityRef" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jdom2.located.LocatedEntityRef" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="org.jdom2.located.LocatedEntityRef" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String)" class="org.jdom2.located.LocatedEntityRef" />
	<method signature="int getLine()" class="org.jdom2.located.LocatedEntityRef" />
	<method signature="int getColumn()" class="org.jdom2.located.LocatedEntityRef" />
	<method signature="void setColumn(int)" class="org.jdom2.located.LocatedEntityRef" />
	<class name="fi.iki.elonen.NanoHTTPD$Response$Status" />
	<method signature="int getRequestStatus()" class="fi.iki.elonen.NanoHTTPD$Response$Status" />
	<method signature="fi.iki.elonen.NanoHTTPD$Response$Status valueOf(java.lang.String)" class="fi.iki.elonen.NanoHTTPD$Response$Status" />
	<method signature="fi.iki.elonen.NanoHTTPD$Response$Status[] values()" class="fi.iki.elonen.NanoHTTPD$Response$Status" />
	<method signature="java.lang.String getDescription()" class="fi.iki.elonen.NanoHTTPD$Response$Status" />
	<class name="org.jfree.data.xy.NormalizedMatrixSeries" />
	<method signature="void setScaleFactor(double)" class="org.jfree.data.xy.NormalizedMatrixSeries" />
	<method signature="double getScaleFactor()" class="org.jfree.data.xy.NormalizedMatrixSeries" />
	<method signature="void zeroAll()" class="org.jfree.data.xy.NormalizedMatrixSeries" />
	<method signature="void update(int,int,double)" class="org.jfree.data.xy.NormalizedMatrixSeries" />
	<method signature="java.lang.Number getItem(int)" class="org.jfree.data.xy.NormalizedMatrixSeries" />
	<method signature="void &lt;init&gt;(java.lang.String,int,int)" class="org.jfree.data.xy.NormalizedMatrixSeries" />
	<class name="org.jfree.chart.event.ChartChangeEvent" />
	<method signature="void setChart(org.jfree.chart.JFreeChart)" class="org.jfree.chart.event.ChartChangeEvent" />
	<method signature="org.jfree.chart.JFreeChart getChart()" class="org.jfree.chart.event.ChartChangeEvent" />
	<method signature="void setType(org.jfree.chart.event.ChartChangeEventType)" class="org.jfree.chart.event.ChartChangeEvent" />
	<method signature="void &lt;init&gt;(java.lang.Object,org.jfree.chart.JFreeChart,org.jfree.chart.event.ChartChangeEventType)" class="org.jfree.chart.event.ChartChangeEvent" />
	<method signature="void &lt;init&gt;(java.lang.Object)" class="org.jfree.chart.event.ChartChangeEvent" />
	<method signature="void &lt;init&gt;(java.lang.Object,org.jfree.chart.JFreeChart)" class="org.jfree.chart.event.ChartChangeEvent" />
	<method signature="org.jfree.chart.event.ChartChangeEventType getType()" class="org.jfree.chart.event.ChartChangeEvent" />
	<class name="javax.xml.bind.helpers.DefaultValidationEventHandler" />
	<method signature="void &lt;init&gt;()" class="javax.xml.bind.helpers.DefaultValidationEventHandler" />
	<method signature="boolean handleEvent(javax.xml.bind.ValidationEvent)" class="javax.xml.bind.helpers.DefaultValidationEventHandler" />
	<class name="org.apache.xerces.parsers.CachingParserPool$ShadowedGrammarPool" />
	<method signature="void cacheGrammars(java.lang.String,org.apache.xerces.xni.grammars.Grammar[])" class="org.apache.xerces.parsers.CachingParserPool$ShadowedGrammarPool" />
	<method signature="org.apache.xerces.xni.grammars.Grammar getGrammar(org.apache.xerces.xni.grammars.XMLGrammarDescription)" class="org.apache.xerces.parsers.CachingParserPool$ShadowedGrammarPool" />
	<method signature="org.apache.xerces.xni.grammars.Grammar retrieveGrammar(org.apache.xerces.xni.grammars.XMLGrammarDescription)" class="org.apache.xerces.parsers.CachingParserPool$ShadowedGrammarPool" />
	<method signature="boolean containsGrammar(org.apache.xerces.xni.grammars.XMLGrammarDescription)" class="org.apache.xerces.parsers.CachingParserPool$ShadowedGrammarPool" />
	<method signature="void &lt;init&gt;(org.apache.xerces.xni.grammars.XMLGrammarPool)" class="org.apache.xerces.parsers.CachingParserPool$ShadowedGrammarPool" />
	<method signature="org.apache.xerces.xni.grammars.Grammar[] retrieveInitialGrammarSet(java.lang.String)" class="org.apache.xerces.parsers.CachingParserPool$ShadowedGrammarPool" />
	<class name="org.jfree.data.xy.YIntervalDataItem" />
	<method signature="double getYValue()" class="org.jfree.data.xy.YIntervalDataItem" />
	<method signature="void &lt;init&gt;(double,double,double,double)" class="org.jfree.data.xy.YIntervalDataItem" />
	<method signature="double getYHighValue()" class="org.jfree.data.xy.YIntervalDataItem" />
	<method signature="double getYLowValue()" class="org.jfree.data.xy.YIntervalDataItem" />
	<method signature="java.lang.Double getX()" class="org.jfree.data.xy.YIntervalDataItem" />
	<class name="org.unbescape.properties.PropertiesKeyEscapeLevel" />
	<method signature="int getEscapeLevel()" class="org.unbescape.properties.PropertiesKeyEscapeLevel" />
	<method signature="org.unbescape.properties.PropertiesKeyEscapeLevel valueOf(java.lang.String)" class="org.unbescape.properties.PropertiesKeyEscapeLevel" />
	<method signature="org.unbescape.properties.PropertiesKeyEscapeLevel forLevel(int)" class="org.unbescape.properties.PropertiesKeyEscapeLevel" />
	<method signature="org.unbescape.properties.PropertiesKeyEscapeLevel[] values()" class="org.unbescape.properties.PropertiesKeyEscapeLevel" />
	<class name="org.jfree.chart.labels.ItemLabelPosition" />
	<method signature="org.jfree.ui.TextAnchor getRotationAnchor()" class="org.jfree.chart.labels.ItemLabelPosition" />
	<method signature="double getAngle()" class="org.jfree.chart.labels.ItemLabelPosition" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.labels.ItemLabelPosition" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.labels.ItemLabelPosition" />
	<method signature="void &lt;init&gt;(org.jfree.chart.labels.ItemLabelAnchor,org.jfree.ui.TextAnchor)" class="org.jfree.chart.labels.ItemLabelPosition" />
	<method signature="org.jfree.ui.TextAnchor getTextAnchor()" class="org.jfree.chart.labels.ItemLabelPosition" />
	<method signature="void &lt;init&gt;(org.jfree.chart.labels.ItemLabelAnchor,org.jfree.ui.TextAnchor,org.jfree.ui.TextAnchor,double)" class="org.jfree.chart.labels.ItemLabelPosition" />
	<method signature="org.jfree.chart.labels.ItemLabelAnchor getItemLabelAnchor()" class="org.jfree.chart.labels.ItemLabelPosition" />
	<class name="com.google.zxing.ResultPointCallback" />
	<method signature="void foundPossibleResultPoint(com.google.zxing.ResultPoint)" class="com.google.zxing.ResultPointCallback" />
	<class name="javax.xml.xpath.XPathFactoryConfigurationException" />
	<method signature="void &lt;init&gt;(java.lang.Throwable)" class="javax.xml.xpath.XPathFactoryConfigurationException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="javax.xml.xpath.XPathFactoryConfigurationException" />
	<class name="org.apache.xerces.impl.xs.models.CMNodeFactory" />
	<method signature="void reset()" class="org.apache.xerces.impl.xs.models.CMNodeFactory" />
	<method signature="org.apache.xerces.impl.dtd.models.CMNode getCMUniOpNode(int,org.apache.xerces.impl.dtd.models.CMNode)" class="org.apache.xerces.impl.xs.models.CMNodeFactory" />
	<method signature="org.apache.xerces.impl.dtd.models.CMNode getCMLeafNode(int,java.lang.Object,int,int)" class="org.apache.xerces.impl.xs.models.CMNodeFactory" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xs.models.CMNodeFactory" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="org.apache.xerces.impl.xs.models.CMNodeFactory" />
	<method signature="org.apache.xerces.impl.dtd.models.CMNode getCMBinOpNode(int,org.apache.xerces.impl.dtd.models.CMNode,org.apache.xerces.impl.dtd.models.CMNode)" class="org.apache.xerces.impl.xs.models.CMNodeFactory" />
	<method signature="void resetNodeCount()" class="org.apache.xerces.impl.xs.models.CMNodeFactory" />
	<method signature="org.apache.xerces.impl.dtd.models.CMNode getCMRepeatingLeafNode(int,java.lang.Object,int,int,int,int)" class="org.apache.xerces.impl.xs.models.CMNodeFactory" />
	<method signature="void nodeCountCheck()" class="org.apache.xerces.impl.xs.models.CMNodeFactory" />
	<method signature="void reset(org.apache.xerces.xni.parser.XMLComponentManager)" class="org.apache.xerces.impl.xs.models.CMNodeFactory" />
	<class name="org.jfree.chart.axis.CategoryAxis" />
	<method signature="void setMaximumCategoryLabelLines(int)" class="org.jfree.chart.axis.CategoryAxis" />
	<method signature="void setCategoryMargin(double)" class="org.jfree.chart.axis.CategoryAxis" />
	<method signature="double getCategorySeriesMiddle(int,int,int,int,double,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.axis.CategoryAxis" />
	<method signature="double getCategoryMargin()" class="org.jfree.chart.axis.CategoryAxis" />
	<method signature="double getCategoryStart(int,int,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.axis.CategoryAxis" />
	<method signature="void clearCategoryLabelToolTips()" class="org.jfree.chart.axis.CategoryAxis" />
	<method signature="double getCategoryEnd(int,int,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.axis.CategoryAxis" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.axis.CategoryAxis" />
	<method signature="void setMaximumCategoryLabelWidthRatio(float)" class="org.jfree.chart.axis.CategoryAxis" />
	<method signature="void drawTickMarks(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge,org.jfree.chart.axis.AxisState)" class="org.jfree.chart.axis.CategoryAxis" />
	<method signature="double getCategorySeriesMiddle(java.lang.Comparable,java.lang.Comparable,org.jfree.data.category.CategoryDataset,double,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.axis.CategoryAxis" />
	<method signature="double getCategoryMiddle(java.lang.Comparable,java.util.List,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.axis.CategoryAxis" />
	<method signature="void setCategoryLabelPositionOffset(int)" class="org.jfree.chart.axis.CategoryAxis" />
	<method signature="java.awt.Font getTickLabelFont(java.lang.Comparable)" class="org.jfree.chart.axis.CategoryAxis" />
	<method signature="double getLowerMargin()" class="org.jfree.chart.axis.CategoryAxis" />
	<method signature="void setUpperMargin(double)" class="org.jfree.chart.axis.CategoryAxis" />
	<method signature="double getCategoryJava2DCoordinate(org.jfree.chart.axis.CategoryAnchor,int,int,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.axis.CategoryAxis" />
	<method signature="double getUpperMargin()" class="org.jfree.chart.axis.CategoryAxis" />
	<method signature="int getCategoryLabelPositionOffset()" class="org.jfree.chart.axis.CategoryAxis" />
	<method signature="org.jfree.chart.axis.CategoryLabelPositions getCategoryLabelPositions()" class="org.jfree.chart.axis.CategoryAxis" />
	<method signature="org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.axis.CategoryAxis" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.chart.axis.CategoryAxis" />
	<method signature="void setTickLabelPaint(java.lang.Comparable,java.awt.Paint)" class="org.jfree.chart.axis.CategoryAxis" />
	<method signature="void setCategoryLabelPositions(org.jfree.chart.axis.CategoryLabelPositions)" class="org.jfree.chart.axis.CategoryAxis" />
	<method signature="void removeCategoryLabelToolTip(java.lang.Comparable)" class="org.jfree.chart.axis.CategoryAxis" />
	<method signature="void addCategoryLabelToolTip(java.lang.Comparable,java.lang.String)" class="org.jfree.chart.axis.CategoryAxis" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.axis.CategoryAxis" />
	<method signature="void configure()" class="org.jfree.chart.axis.CategoryAxis" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.axis.CategoryAxis" />
	<method signature="java.lang.String getCategoryLabelToolTip(java.lang.Comparable)" class="org.jfree.chart.axis.CategoryAxis" />
	<method signature="void setLowerMargin(double)" class="org.jfree.chart.axis.CategoryAxis" />
	<method signature="void setTickLabelFont(java.lang.Comparable,java.awt.Font)" class="org.jfree.chart.axis.CategoryAxis" />
	<method signature="int hashCode()" class="org.jfree.chart.axis.CategoryAxis" />
	<method signature="int getMaximumCategoryLabelLines()" class="org.jfree.chart.axis.CategoryAxis" />
	<method signature="double getCategoryMiddle(int,int,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.axis.CategoryAxis" />
	<method signature="org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge,org.jfree.chart.axis.AxisSpace)" class="org.jfree.chart.axis.CategoryAxis" />
	<method signature="java.awt.Paint getTickLabelPaint(java.lang.Comparable)" class="org.jfree.chart.axis.CategoryAxis" />
	<method signature="java.util.List refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.axis.CategoryAxis" />
	<method signature="float getMaximumCategoryLabelWidthRatio()" class="org.jfree.chart.axis.CategoryAxis" />
	<class name="com.google.zxing.client.result.ParsedResultType" />
	<method signature="com.google.zxing.client.result.ParsedResultType valueOf(java.lang.String)" class="com.google.zxing.client.result.ParsedResultType" />
	<method signature="com.google.zxing.client.result.ParsedResultType[] values()" class="com.google.zxing.client.result.ParsedResultType" />
	<class name="fi.iki.elonen.NanoHTTPD$HTTPSession" />
	<method signature="java.io.InputStream getInputStream()" class="fi.iki.elonen.NanoHTTPD$HTTPSession" />
	<method signature="fi.iki.elonen.NanoHTTPD$CookieHandler getCookies()" class="fi.iki.elonen.NanoHTTPD$HTTPSession" />
	<method signature="void parseBody(java.util.Map)" class="fi.iki.elonen.NanoHTTPD$HTTPSession" />
	<method signature="void &lt;init&gt;(fi.iki.elonen.NanoHTTPD,fi.iki.elonen.NanoHTTPD$TempFileManager,java.io.InputStream,java.io.OutputStream)" class="fi.iki.elonen.NanoHTTPD$HTTPSession" />
	<method signature="void &lt;init&gt;(fi.iki.elonen.NanoHTTPD,fi.iki.elonen.NanoHTTPD$TempFileManager,java.io.InputStream,java.io.OutputStream,java.net.InetAddress)" class="fi.iki.elonen.NanoHTTPD$HTTPSession" />
	<method signature="java.util.Map getHeaders()" class="fi.iki.elonen.NanoHTTPD$HTTPSession" />
	<method signature="java.util.Map getParms()" class="fi.iki.elonen.NanoHTTPD$HTTPSession" />
	<method signature="void execute()" class="fi.iki.elonen.NanoHTTPD$HTTPSession" />
	<method signature="java.lang.String getUri()" class="fi.iki.elonen.NanoHTTPD$HTTPSession" />
	<method signature="fi.iki.elonen.NanoHTTPD$Method getMethod()" class="fi.iki.elonen.NanoHTTPD$HTTPSession" />
	<method signature="java.lang.String getQueryParameterString()" class="fi.iki.elonen.NanoHTTPD$HTTPSession" />
	<class name="freemarker.ext.beans.BeansWrapper$MethodAppearanceDecision" />
	<method signature="void &lt;init&gt;()" class="freemarker.ext.beans.BeansWrapper$MethodAppearanceDecision" />
	<method signature="void setExposeMethodAs(java.lang.String)" class="freemarker.ext.beans.BeansWrapper$MethodAppearanceDecision" />
	<method signature="boolean getMethodShadowsProperty()" class="freemarker.ext.beans.BeansWrapper$MethodAppearanceDecision" />
	<method signature="java.beans.PropertyDescriptor getExposeAsProperty()" class="freemarker.ext.beans.BeansWrapper$MethodAppearanceDecision" />
	<method signature="java.lang.String getExposeMethodAs()" class="freemarker.ext.beans.BeansWrapper$MethodAppearanceDecision" />
	<method signature="void setMethodShadowsProperty(boolean)" class="freemarker.ext.beans.BeansWrapper$MethodAppearanceDecision" />
	<method signature="void setExposeAsProperty(java.beans.PropertyDescriptor)" class="freemarker.ext.beans.BeansWrapper$MethodAppearanceDecision" />
	<class name="freemarker.template.utility.DOMNodeModel" />
	<method signature="boolean isEmpty()" class="freemarker.template.utility.DOMNodeModel" />
	<method signature="void &lt;init&gt;(org.w3c.dom.Node)" class="freemarker.template.utility.DOMNodeModel" />
	<method signature="freemarker.template.TemplateModel get(java.lang.String)" class="freemarker.template.utility.DOMNodeModel" />
	<class name="org.apache.xerces.dom.DeferredElementDefinitionImpl" />
	<method signature="int getNodeIndex()" class="org.apache.xerces.dom.DeferredElementDefinitionImpl" />
	<class name="com.google.zxing.oned.Code128Writer" />
	<method signature="com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map)" class="com.google.zxing.oned.Code128Writer" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.oned.Code128Writer" />
	<method signature="boolean[] encode(java.lang.String)" class="com.google.zxing.oned.Code128Writer" />
	<class name="org.apache.html.dom.HTMLTableCellElementImpl" />
	<method signature="void setBgColor(java.lang.String)" class="org.apache.html.dom.HTMLTableCellElementImpl" />
	<method signature="java.lang.String getCh()" class="org.apache.html.dom.HTMLTableCellElementImpl" />
	<method signature="void setVAlign(java.lang.String)" class="org.apache.html.dom.HTMLTableCellElementImpl" />
	<method signature="java.lang.String getWidth()" class="org.apache.html.dom.HTMLTableCellElementImpl" />
	<method signature="int getRowSpan()" class="org.apache.html.dom.HTMLTableCellElementImpl" />
	<method signature="boolean getNoWrap()" class="org.apache.html.dom.HTMLTableCellElementImpl" />
	<method signature="java.lang.String getHeight()" class="org.apache.html.dom.HTMLTableCellElementImpl" />
	<method signature="void setChOff(java.lang.String)" class="org.apache.html.dom.HTMLTableCellElementImpl" />
	<method signature="java.lang.String getChOff()" class="org.apache.html.dom.HTMLTableCellElementImpl" />
	<method signature="java.lang.String getAbbr()" class="org.apache.html.dom.HTMLTableCellElementImpl" />
	<method signature="int getColSpan()" class="org.apache.html.dom.HTMLTableCellElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLTableCellElementImpl" />
	<method signature="void setNoWrap(boolean)" class="org.apache.html.dom.HTMLTableCellElementImpl" />
	<method signature="java.lang.String getVAlign()" class="org.apache.html.dom.HTMLTableCellElementImpl" />
	<method signature="void setAlign(java.lang.String)" class="org.apache.html.dom.HTMLTableCellElementImpl" />
	<method signature="void setAbbr(java.lang.String)" class="org.apache.html.dom.HTMLTableCellElementImpl" />
	<method signature="void setCellIndex(int)" class="org.apache.html.dom.HTMLTableCellElementImpl" />
	<method signature="java.lang.String getHeaders()" class="org.apache.html.dom.HTMLTableCellElementImpl" />
	<method signature="java.lang.String getAxis()" class="org.apache.html.dom.HTMLTableCellElementImpl" />
	<method signature="java.lang.String getAlign()" class="org.apache.html.dom.HTMLTableCellElementImpl" />
	<method signature="void setScope(java.lang.String)" class="org.apache.html.dom.HTMLTableCellElementImpl" />
	<method signature="int getCellIndex()" class="org.apache.html.dom.HTMLTableCellElementImpl" />
	<method signature="void setCh(java.lang.String)" class="org.apache.html.dom.HTMLTableCellElementImpl" />
	<method signature="void setHeaders(java.lang.String)" class="org.apache.html.dom.HTMLTableCellElementImpl" />
	<method signature="void setHeight(java.lang.String)" class="org.apache.html.dom.HTMLTableCellElementImpl" />
	<method signature="void setWidth(java.lang.String)" class="org.apache.html.dom.HTMLTableCellElementImpl" />
	<method signature="void setColSpan(int)" class="org.apache.html.dom.HTMLTableCellElementImpl" />
	<method signature="java.lang.String getScope()" class="org.apache.html.dom.HTMLTableCellElementImpl" />
	<method signature="void setAxis(java.lang.String)" class="org.apache.html.dom.HTMLTableCellElementImpl" />
	<method signature="java.lang.String getBgColor()" class="org.apache.html.dom.HTMLTableCellElementImpl" />
	<method signature="void setRowSpan(int)" class="org.apache.html.dom.HTMLTableCellElementImpl" />
	<class name="org.jfree.data.statistics.Regression" />
	<method signature="double[] getPowerRegression(double[][])" class="org.jfree.data.statistics.Regression" />
	<method signature="double[] getOLSRegression(double[][])" class="org.jfree.data.statistics.Regression" />
	<method signature="double[] getOLSRegression(org.jfree.data.xy.XYDataset,int)" class="org.jfree.data.statistics.Regression" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.statistics.Regression" />
	<method signature="double[] getPowerRegression(org.jfree.data.xy.XYDataset,int)" class="org.jfree.data.statistics.Regression" />
	<method signature="double[] getPolynomialRegression(org.jfree.data.xy.XYDataset,int,int)" class="org.jfree.data.statistics.Regression" />
	<class name="org.apache.xerces.xni.parser.XMLDocumentFilter" />
	<class name="freemarker.ext.servlet.ServletContextHashModel" />
	<method signature="boolean isEmpty()" class="freemarker.ext.servlet.ServletContextHashModel" />
	<method signature="javax.servlet.GenericServlet getServlet()" class="freemarker.ext.servlet.ServletContextHashModel" />
	<method signature="void &lt;init&gt;(javax.servlet.GenericServlet,freemarker.template.ObjectWrapper)" class="freemarker.ext.servlet.ServletContextHashModel" />
	<method signature="void &lt;init&gt;(javax.servlet.ServletContext,freemarker.template.ObjectWrapper)" class="freemarker.ext.servlet.ServletContextHashModel" />
	<method signature="freemarker.template.TemplateModel get(java.lang.String)" class="freemarker.ext.servlet.ServletContextHashModel" />
	<class name="javax.xml.bind.util.JAXBResult" />
	<method signature="void &lt;init&gt;(javax.xml.bind.Unmarshaller)" class="javax.xml.bind.util.JAXBResult" />
	<method signature="void &lt;init&gt;(javax.xml.bind.JAXBContext)" class="javax.xml.bind.util.JAXBResult" />
	<method signature="java.lang.Object getResult()" class="javax.xml.bind.util.JAXBResult" />
	<class name="com.google.zxing.client.result.SMSParsedResult" />
	<method signature="java.lang.String[] getVias()" class="com.google.zxing.client.result.SMSParsedResult" />
	<method signature="java.lang.String getSMSURI()" class="com.google.zxing.client.result.SMSParsedResult" />
	<method signature="java.lang.String getSubject()" class="com.google.zxing.client.result.SMSParsedResult" />
	<method signature="java.lang.String getDisplayResult()" class="com.google.zxing.client.result.SMSParsedResult" />
	<method signature="java.lang.String[] getNumbers()" class="com.google.zxing.client.result.SMSParsedResult" />
	<method signature="void &lt;init&gt;(java.lang.String[],java.lang.String[],java.lang.String,java.lang.String)" class="com.google.zxing.client.result.SMSParsedResult" />
	<method signature="java.lang.String getBody()" class="com.google.zxing.client.result.SMSParsedResult" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="com.google.zxing.client.result.SMSParsedResult" />
	<class name="freemarker.template.AdapterTemplateModel" />
	<method signature="java.lang.Object getAdaptedObject(java.lang.Class)" class="freemarker.template.AdapterTemplateModel" />
	<class name="org.jfree.data.KeyedValue" />
	<method signature="java.lang.Comparable getKey()" class="org.jfree.data.KeyedValue" />
	<class name="org.jfree.chart.util.ParamChecks" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.util.ParamChecks" />
	<method signature="void nullNotPermitted(java.lang.Object,java.lang.String)" class="org.jfree.chart.util.ParamChecks" />
	<class name="tourma.views.round.JPNPool" />
	<method signature="void update()" class="tourma.views.round.JPNPool" />
	<method signature="void &lt;init&gt;(tourma.data.Round,tourma.data.Tournament,tourma.data.Pool)" class="tourma.views.round.JPNPool" />
	<method signature="void setRoundOnly(boolean)" class="tourma.views.round.JPNPool" />
	<class name="tourma.views.parameters.JPNParamCriterias" />
	<method signature="void update()" class="tourma.views.parameters.JPNParamCriterias" />
	<method signature="void &lt;init&gt;()" class="tourma.views.parameters.JPNParamCriterias" />
	<class name="org.jfree.ui.StrokeSample" />
	<method signature="void &lt;init&gt;(java.awt.Stroke)" class="org.jfree.ui.StrokeSample" />
	<method signature="java.awt.Component getListCellRendererComponent(javax.swing.JList,java.lang.Object,int,boolean,boolean)" class="org.jfree.ui.StrokeSample" />
	<method signature="void setStroke(java.awt.Stroke)" class="org.jfree.ui.StrokeSample" />
	<method signature="java.awt.Dimension getPreferredSize()" class="org.jfree.ui.StrokeSample" />
	<method signature="java.awt.Stroke getStroke()" class="org.jfree.ui.StrokeSample" />
	<method signature="void paintComponent(java.awt.Graphics)" class="org.jfree.ui.StrokeSample" />
	<class name="org.jfree.data.jdbc.JDBCXYDataset" />
	<method signature="double getRangeLowerBound(boolean)" class="org.jfree.data.jdbc.JDBCXYDataset" />
	<method signature="java.lang.Number getX(int,int)" class="org.jfree.data.jdbc.JDBCXYDataset" />
	<method signature="org.jfree.data.Range getRangeBounds(boolean)" class="org.jfree.data.jdbc.JDBCXYDataset" />
	<method signature="java.lang.Number getY(int,int)" class="org.jfree.data.jdbc.JDBCXYDataset" />
	<method signature="void close()" class="org.jfree.data.jdbc.JDBCXYDataset" />
	<method signature="void setTimeSeries(boolean)" class="org.jfree.data.jdbc.JDBCXYDataset" />
	<method signature="java.lang.String[] getLegendItemLabels()" class="org.jfree.data.jdbc.JDBCXYDataset" />
	<method signature="void executeQuery(java.sql.Connection,java.lang.String)" class="org.jfree.data.jdbc.JDBCXYDataset" />
	<method signature="int getSeriesCount()" class="org.jfree.data.jdbc.JDBCXYDataset" />
	<method signature="void &lt;init&gt;(java.sql.Connection,java.lang.String)" class="org.jfree.data.jdbc.JDBCXYDataset" />
	<method signature="double getRangeUpperBound(boolean)" class="org.jfree.data.jdbc.JDBCXYDataset" />
	<method signature="java.lang.Comparable getSeriesKey(int)" class="org.jfree.data.jdbc.JDBCXYDataset" />
	<method signature="int getLegendItemCount()" class="org.jfree.data.jdbc.JDBCXYDataset" />
	<method signature="boolean isTimeSeries()" class="org.jfree.data.jdbc.JDBCXYDataset" />
	<method signature="void &lt;init&gt;(java.sql.Connection)" class="org.jfree.data.jdbc.JDBCXYDataset" />
	<method signature="int getItemCount()" class="org.jfree.data.jdbc.JDBCXYDataset" />
	<method signature="void executeQuery(java.lang.String)" class="org.jfree.data.jdbc.JDBCXYDataset" />
	<method signature="int getItemCount(int)" class="org.jfree.data.jdbc.JDBCXYDataset" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.jfree.data.jdbc.JDBCXYDataset" />
	<class name="com.google.zxing.client.j2se.GUIRunner" />
	<method signature="void main(java.lang.String[])" class="com.google.zxing.client.j2se.GUIRunner" />
	<class name="com.google.zxing.client.result.AddressBookDoCoMoResultParser" />
	<method signature="com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result)" class="com.google.zxing.client.result.AddressBookDoCoMoResultParser" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.client.result.AddressBookDoCoMoResultParser" />
	<method signature="com.google.zxing.client.result.AddressBookParsedResult parse(com.google.zxing.Result)" class="com.google.zxing.client.result.AddressBookDoCoMoResultParser" />
	<class name="org.jfree.base.BaseBoot" />
	<method signature="org.jfree.base.AbstractBoot getInstance()" class="org.jfree.base.BaseBoot" />
	<method signature="org.jfree.base.config.ModifiableConfiguration getConfiguration()" class="org.jfree.base.BaseBoot" />
	<class name="org.jdom2.filter.ContentFilter" />
	<method signature="void setElementContent()" class="org.jdom2.filter.ContentFilter" />
	<method signature="org.jdom2.Content filter(java.lang.Object)" class="org.jdom2.filter.ContentFilter" />
	<method signature="int hashCode()" class="org.jdom2.filter.ContentFilter" />
	<method signature="int getFilterMask()" class="org.jdom2.filter.ContentFilter" />
	<method signature="void setDocumentContent()" class="org.jdom2.filter.ContentFilter" />
	<method signature="void setTextVisible(boolean)" class="org.jdom2.filter.ContentFilter" />
	<method signature="void setElementVisible(boolean)" class="org.jdom2.filter.ContentFilter" />
	<method signature="void setCDATAVisible(boolean)" class="org.jdom2.filter.ContentFilter" />
	<method signature="void &lt;init&gt;(int)" class="org.jdom2.filter.ContentFilter" />
	<method signature="void setDocTypeVisible(boolean)" class="org.jdom2.filter.ContentFilter" />
	<method signature="void setPIVisible(boolean)" class="org.jdom2.filter.ContentFilter" />
	<method signature="void setEntityRefVisible(boolean)" class="org.jdom2.filter.ContentFilter" />
	<method signature="boolean equals(java.lang.Object)" class="org.jdom2.filter.ContentFilter" />
	<method signature="void &lt;init&gt;()" class="org.jdom2.filter.ContentFilter" />
	<method signature="void setFilterMask(int)" class="org.jdom2.filter.ContentFilter" />
	<method signature="void setCommentVisible(boolean)" class="org.jdom2.filter.ContentFilter" />
	<method signature="java.lang.Object filter(java.lang.Object)" class="org.jdom2.filter.ContentFilter" />
	<method signature="void &lt;init&gt;(boolean)" class="org.jdom2.filter.ContentFilter" />
	<method signature="void setDefaultMask()" class="org.jdom2.filter.ContentFilter" />
	<class name="org.apache.xerces.util.XMLAttributesImpl" />
	<method signature="java.lang.String getType(java.lang.String)" class="org.apache.xerces.util.XMLAttributesImpl" />
	<method signature="java.lang.String getValue(java.lang.String)" class="org.apache.xerces.util.XMLAttributesImpl" />
	<method signature="void setName(int,org.apache.xerces.xni.QName)" class="org.apache.xerces.util.XMLAttributesImpl" />
	<method signature="void setSpecified(int,boolean)" class="org.apache.xerces.util.XMLAttributesImpl" />
	<method signature="void getName(int,org.apache.xerces.xni.QName)" class="org.apache.xerces.util.XMLAttributesImpl" />
	<method signature="java.lang.String getQName(int)" class="org.apache.xerces.util.XMLAttributesImpl" />
	<method signature="boolean isSpecified(int)" class="org.apache.xerces.util.XMLAttributesImpl" />
	<method signature="int getLength()" class="org.apache.xerces.util.XMLAttributesImpl" />
	<method signature="int getIndexFast(java.lang.String)" class="org.apache.xerces.util.XMLAttributesImpl" />
	<method signature="java.lang.String getName(int)" class="org.apache.xerces.util.XMLAttributesImpl" />
	<method signature="int getIndex(java.lang.String)" class="org.apache.xerces.util.XMLAttributesImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.util.XMLAttributesImpl" />
	<method signature="void setAugmentations(int,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.util.XMLAttributesImpl" />
	<method signature="void removeAllAttributes()" class="org.apache.xerces.util.XMLAttributesImpl" />
	<method signature="void setNonNormalizedValue(int,java.lang.String)" class="org.apache.xerces.util.XMLAttributesImpl" />
	<method signature="void addAttributeNS(org.apache.xerces.xni.QName,java.lang.String,java.lang.String)" class="org.apache.xerces.util.XMLAttributesImpl" />
	<method signature="void setNamespaces(boolean)" class="org.apache.xerces.util.XMLAttributesImpl" />
	<method signature="int addAttribute(org.apache.xerces.xni.QName,java.lang.String,java.lang.String)" class="org.apache.xerces.util.XMLAttributesImpl" />
	<method signature="org.apache.xerces.xni.Augmentations getAugmentations(int)" class="org.apache.xerces.util.XMLAttributesImpl" />
	<method signature="void removeAttributeAt(int)" class="org.apache.xerces.util.XMLAttributesImpl" />
	<method signature="java.lang.String getValue(int)" class="org.apache.xerces.util.XMLAttributesImpl" />
	<method signature="java.lang.String getLocalName(int)" class="org.apache.xerces.util.XMLAttributesImpl" />
	<method signature="org.apache.xerces.xni.QName checkDuplicatesNS()" class="org.apache.xerces.util.XMLAttributesImpl" />
	<method signature="java.lang.String getType(int)" class="org.apache.xerces.util.XMLAttributesImpl" />
	<method signature="void setType(int,java.lang.String)" class="org.apache.xerces.util.XMLAttributesImpl" />
	<method signature="int getIndex(java.lang.String,java.lang.String)" class="org.apache.xerces.util.XMLAttributesImpl" />
	<method signature="void setURI(int,java.lang.String)" class="org.apache.xerces.util.XMLAttributesImpl" />
	<method signature="java.lang.String getURI(int)" class="org.apache.xerces.util.XMLAttributesImpl" />
	<method signature="org.apache.xerces.xni.Augmentations getAugmentations(java.lang.String)" class="org.apache.xerces.util.XMLAttributesImpl" />
	<method signature="int getIndexFast(java.lang.String,java.lang.String)" class="org.apache.xerces.util.XMLAttributesImpl" />
	<method signature="void &lt;init&gt;(int)" class="org.apache.xerces.util.XMLAttributesImpl" />
	<method signature="void setValue(int,java.lang.String)" class="org.apache.xerces.util.XMLAttributesImpl" />
	<method signature="java.lang.String getPrefix(int)" class="org.apache.xerces.util.XMLAttributesImpl" />
	<method signature="org.apache.xerces.xni.Augmentations getAugmentations(java.lang.String,java.lang.String)" class="org.apache.xerces.util.XMLAttributesImpl" />
	<method signature="java.lang.String getNonNormalizedValue(int)" class="org.apache.xerces.util.XMLAttributesImpl" />
	<method signature="java.lang.String getType(java.lang.String,java.lang.String)" class="org.apache.xerces.util.XMLAttributesImpl" />
	<method signature="java.lang.String getValue(java.lang.String,java.lang.String)" class="org.apache.xerces.util.XMLAttributesImpl" />
	<class name="org.apache.xerces.xni.XMLString" />
	<method signature="void setValues(char[],int,int)" class="org.apache.xerces.xni.XMLString" />
	<method signature="void clear()" class="org.apache.xerces.xni.XMLString" />
	<method signature="void setValues(org.apache.xerces.xni.XMLString)" class="org.apache.xerces.xni.XMLString" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.xni.XMLString" />
	<method signature="void &lt;init&gt;(char[],int,int)" class="org.apache.xerces.xni.XMLString" />
	<method signature="java.lang.String toString()" class="org.apache.xerces.xni.XMLString" />
	<method signature="void &lt;init&gt;(org.apache.xerces.xni.XMLString)" class="org.apache.xerces.xni.XMLString" />
	<method signature="boolean equals(char[],int,int)" class="org.apache.xerces.xni.XMLString" />
	<method signature="boolean equals(java.lang.String)" class="org.apache.xerces.xni.XMLString" />
	<class name="org.jfree.chart.title.LegendItemBlockContainer" />
	<method signature="void &lt;init&gt;(org.jfree.chart.block.Arrangement,org.jfree.data.general.Dataset,java.lang.Comparable)" class="org.jfree.chart.title.LegendItemBlockContainer" />
	<method signature="void setToolTipText(java.lang.String)" class="org.jfree.chart.title.LegendItemBlockContainer" />
	<method signature="java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)" class="org.jfree.chart.title.LegendItemBlockContainer" />
	<method signature="java.lang.Comparable getSeriesKey()" class="org.jfree.chart.title.LegendItemBlockContainer" />
	<method signature="org.jfree.data.general.Dataset getDataset()" class="org.jfree.chart.title.LegendItemBlockContainer" />
	<method signature="void setURLText(java.lang.String)" class="org.jfree.chart.title.LegendItemBlockContainer" />
	<method signature="void &lt;init&gt;(org.jfree.chart.block.Arrangement,int,int)" class="org.jfree.chart.title.LegendItemBlockContainer" />
	<method signature="int getSeriesIndex()" class="org.jfree.chart.title.LegendItemBlockContainer" />
	<method signature="java.lang.String getToolTipText()" class="org.jfree.chart.title.LegendItemBlockContainer" />
	<method signature="java.lang.String getURLText()" class="org.jfree.chart.title.LegendItemBlockContainer" />
	<method signature="int getDatasetIndex()" class="org.jfree.chart.title.LegendItemBlockContainer" />
	<class name="org.jfree.base.modules.ModuleInfo" />
	<method signature="java.lang.String getMajorVersion()" class="org.jfree.base.modules.ModuleInfo" />
	<method signature="java.lang.String getModuleClass()" class="org.jfree.base.modules.ModuleInfo" />
	<method signature="java.lang.String getPatchLevel()" class="org.jfree.base.modules.ModuleInfo" />
	<method signature="java.lang.String getMinorVersion()" class="org.jfree.base.modules.ModuleInfo" />
	<class name="org.apache.xerces.impl.dv.xs.BaseDVFactory" />
	<method signature="org.apache.xerces.impl.dv.XSSimpleType getBuiltInType(java.lang.String)" class="org.apache.xerces.impl.dv.xs.BaseDVFactory" />
	<method signature="org.apache.xerces.impl.dv.XSSimpleType createTypeRestriction(java.lang.String,java.lang.String,short,org.apache.xerces.impl.dv.XSSimpleType,org.apache.xerces.xs.XSObjectList)" class="org.apache.xerces.impl.dv.xs.BaseDVFactory" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.xs.BaseDVFactory" />
	<method signature="org.apache.xerces.impl.dv.XSSimpleType createTypeUnion(java.lang.String,java.lang.String,short,org.apache.xerces.impl.dv.XSSimpleType[],org.apache.xerces.xs.XSObjectList)" class="org.apache.xerces.impl.dv.xs.BaseDVFactory" />
	<method signature="org.apache.xerces.impl.dv.XSSimpleType createTypeList(java.lang.String,java.lang.String,short,org.apache.xerces.impl.dv.XSSimpleType,org.apache.xerces.xs.XSObjectList)" class="org.apache.xerces.impl.dv.xs.BaseDVFactory" />
	<method signature="org.apache.xerces.util.SymbolHash getBuiltInTypes()" class="org.apache.xerces.impl.dv.xs.BaseDVFactory" />
	<class name="org.apache.xerces.impl.XML11NamespaceBinder" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.XML11NamespaceBinder" />
	<class name="freemarker.template.SimpleCollection" />
	<method signature="void &lt;init&gt;(java.util.Iterator,freemarker.template.ObjectWrapper)" class="freemarker.template.SimpleCollection" />
	<method signature="void &lt;init&gt;(java.util.Collection,freemarker.template.ObjectWrapper)" class="freemarker.template.SimpleCollection" />
	<method signature="freemarker.template.TemplateModelIterator iterator()" class="freemarker.template.SimpleCollection" />
	<method signature="void &lt;init&gt;(java.util.Iterator)" class="freemarker.template.SimpleCollection" />
	<method signature="void &lt;init&gt;(java.util.Collection)" class="freemarker.template.SimpleCollection" />
	<class name="javax.xml.transform.stax.StAXResult" />
	<method signature="java.lang.String getSystemId()" class="javax.xml.transform.stax.StAXResult" />
	<method signature="void setSystemId(java.lang.String)" class="javax.xml.transform.stax.StAXResult" />
	<method signature="javax.xml.stream.XMLEventWriter getXMLEventWriter()" class="javax.xml.transform.stax.StAXResult" />
	<method signature="void &lt;init&gt;(javax.xml.stream.XMLEventWriter)" class="javax.xml.transform.stax.StAXResult" />
	<method signature="javax.xml.stream.XMLStreamWriter getXMLStreamWriter()" class="javax.xml.transform.stax.StAXResult" />
	<method signature="void &lt;init&gt;(javax.xml.stream.XMLStreamWriter)" class="javax.xml.transform.stax.StAXResult" />
	<class name="org.jfree.chart.labels.StandardXYSeriesLabelGenerator" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.labels.StandardXYSeriesLabelGenerator" />
	<method signature="java.lang.String generateLabel(org.jfree.data.xy.XYDataset,int)" class="org.jfree.chart.labels.StandardXYSeriesLabelGenerator" />
	<method signature="int hashCode()" class="org.jfree.chart.labels.StandardXYSeriesLabelGenerator" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.labels.StandardXYSeriesLabelGenerator" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.labels.StandardXYSeriesLabelGenerator" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.chart.labels.StandardXYSeriesLabelGenerator" />
	<class name="org.jfree.data.xy.XYSeries" />
	<method signature="void update(java.lang.Number,java.lang.Number)" class="org.jfree.data.xy.XYSeries" />
	<method signature="boolean getAutoSort()" class="org.jfree.data.xy.XYSeries" />
	<method signature="void add(org.jfree.data.xy.XYDataItem,boolean)" class="org.jfree.data.xy.XYSeries" />
	<method signature="org.jfree.data.xy.XYDataItem addOrUpdate(java.lang.Number,java.lang.Number)" class="org.jfree.data.xy.XYSeries" />
	<method signature="java.util.List getItems()" class="org.jfree.data.xy.XYSeries" />
	<method signature="double getMinY()" class="org.jfree.data.xy.XYSeries" />
	<method signature="double getMinX()" class="org.jfree.data.xy.XYSeries" />
	<method signature="void add(double,double,boolean)" class="org.jfree.data.xy.XYSeries" />
	<method signature="void add(java.lang.Number,java.lang.Number,boolean)" class="org.jfree.data.xy.XYSeries" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.xy.XYSeries" />
	<method signature="void clear()" class="org.jfree.data.xy.XYSeries" />
	<method signature="org.jfree.data.xy.XYDataItem getDataItem(int)" class="org.jfree.data.xy.XYSeries" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.xy.XYSeries" />
	<method signature="double getMaxY()" class="org.jfree.data.xy.XYSeries" />
	<method signature="double getMaxX()" class="org.jfree.data.xy.XYSeries" />
	<method signature="org.jfree.data.xy.XYSeries createCopy(int,int)" class="org.jfree.data.xy.XYSeries" />
	<method signature="double[][] toArray()" class="org.jfree.data.xy.XYSeries" />
	<method signature="void setMaximumItemCount(int)" class="org.jfree.data.xy.XYSeries" />
	<method signature="boolean getAllowDuplicateXValues()" class="org.jfree.data.xy.XYSeries" />
	<method signature="void update(int,java.lang.Number)" class="org.jfree.data.xy.XYSeries" />
	<method signature="int hashCode()" class="org.jfree.data.xy.XYSeries" />
	<method signature="void &lt;init&gt;(java.lang.Comparable)" class="org.jfree.data.xy.XYSeries" />
	<method signature="void &lt;init&gt;(java.lang.Comparable,boolean)" class="org.jfree.data.xy.XYSeries" />
	<method signature="void &lt;init&gt;(java.lang.Comparable,boolean,boolean)" class="org.jfree.data.xy.XYSeries" />
	<method signature="org.jfree.data.xy.XYDataItem addOrUpdate(double,double)" class="org.jfree.data.xy.XYSeries" />
	<method signature="void add(java.lang.Number,java.lang.Number)" class="org.jfree.data.xy.XYSeries" />
	<method signature="void add(org.jfree.data.xy.XYDataItem)" class="org.jfree.data.xy.XYSeries" />
	<method signature="void delete(int,int)" class="org.jfree.data.xy.XYSeries" />
	<method signature="void add(double,java.lang.Number,boolean)" class="org.jfree.data.xy.XYSeries" />
	<method signature="java.lang.Number getY(int)" class="org.jfree.data.xy.XYSeries" />
	<method signature="void updateByIndex(int,java.lang.Number)" class="org.jfree.data.xy.XYSeries" />
	<method signature="java.lang.Number getX(int)" class="org.jfree.data.xy.XYSeries" />
	<method signature="int getItemCount()" class="org.jfree.data.xy.XYSeries" />
	<method signature="void add(double,double)" class="org.jfree.data.xy.XYSeries" />
	<method signature="void add(double,java.lang.Number)" class="org.jfree.data.xy.XYSeries" />
	<method signature="org.jfree.data.xy.XYDataItem remove(int)" class="org.jfree.data.xy.XYSeries" />
	<method signature="int getMaximumItemCount()" class="org.jfree.data.xy.XYSeries" />
	<method signature="org.jfree.data.xy.XYDataItem addOrUpdate(org.jfree.data.xy.XYDataItem)" class="org.jfree.data.xy.XYSeries" />
	<method signature="int indexOf(java.lang.Number)" class="org.jfree.data.xy.XYSeries" />
	<method signature="org.jfree.data.xy.XYDataItem remove(java.lang.Number)" class="org.jfree.data.xy.XYSeries" />
	<class name="com.google.zxing.client.result.EmailAddressResultParser" />
	<method signature="com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result)" class="com.google.zxing.client.result.EmailAddressResultParser" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.client.result.EmailAddressResultParser" />
	<method signature="com.google.zxing.client.result.EmailAddressParsedResult parse(com.google.zxing.Result)" class="com.google.zxing.client.result.EmailAddressResultParser" />
	<class name="org.xml.sax.DTDHandler" />
	<method signature="void notationDecl(java.lang.String,java.lang.String,java.lang.String)" class="org.xml.sax.DTDHandler" />
	<method signature="void unparsedEntityDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.xml.sax.DTDHandler" />
	<class name="javax.xml.validation.TypeInfoProvider" />
	<method signature="org.w3c.dom.TypeInfo getElementTypeInfo()" class="javax.xml.validation.TypeInfoProvider" />
	<method signature="org.w3c.dom.TypeInfo getAttributeTypeInfo(int)" class="javax.xml.validation.TypeInfoProvider" />
	<method signature="boolean isIdAttribute(int)" class="javax.xml.validation.TypeInfoProvider" />
	<method signature="boolean isSpecified(int)" class="javax.xml.validation.TypeInfoProvider" />
	<class name="org.apache.commons.lang3.mutable.MutableObject" />
	<method signature="int hashCode()" class="org.apache.commons.lang3.mutable.MutableObject" />
	<method signature="boolean equals(java.lang.Object)" class="org.apache.commons.lang3.mutable.MutableObject" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.mutable.MutableObject" />
	<method signature="void setValue(java.lang.Object)" class="org.apache.commons.lang3.mutable.MutableObject" />
	<method signature="java.lang.String toString()" class="org.apache.commons.lang3.mutable.MutableObject" />
	<method signature="java.lang.Object getValue()" class="org.apache.commons.lang3.mutable.MutableObject" />
	<method signature="void &lt;init&gt;(java.lang.Object)" class="org.apache.commons.lang3.mutable.MutableObject" />
	<class name="org.jfree.chart.title.LegendTitle" />
	<method signature="java.awt.Font getItemFont()" class="org.jfree.chart.title.LegendTitle" />
	<method signature="org.jfree.ui.RectangleInsets getItemLabelPadding()" class="org.jfree.chart.title.LegendTitle" />
	<method signature="void &lt;init&gt;(org.jfree.chart.LegendItemSource)" class="org.jfree.chart.title.LegendTitle" />
	<method signature="org.jfree.ui.RectangleAnchor getLegendItemGraphicAnchor()" class="org.jfree.chart.title.LegendTitle" />
	<method signature="org.jfree.ui.RectangleAnchor getLegendItemGraphicLocation()" class="org.jfree.chart.title.LegendTitle" />
	<method signature="org.jfree.chart.block.BlockContainer getWrapper()" class="org.jfree.chart.title.LegendTitle" />
	<method signature="void setWrapper(org.jfree.chart.block.BlockContainer)" class="org.jfree.chart.title.LegendTitle" />
	<method signature="org.jfree.ui.RectangleInsets getLegendItemGraphicPadding()" class="org.jfree.chart.title.LegendTitle" />
	<method signature="java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)" class="org.jfree.chart.title.LegendTitle" />
	<method signature="java.awt.Paint getItemPaint()" class="org.jfree.chart.title.LegendTitle" />
	<method signature="void setSources(org.jfree.chart.LegendItemSource[])" class="org.jfree.chart.title.LegendTitle" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.title.LegendTitle" />
	<method signature="org.jfree.util.SortOrder getSortOrder()" class="org.jfree.chart.title.LegendTitle" />
	<method signature="void setItemLabelPadding(org.jfree.ui.RectangleInsets)" class="org.jfree.chart.title.LegendTitle" />
	<method signature="void &lt;init&gt;(org.jfree.chart.LegendItemSource,org.jfree.chart.block.Arrangement,org.jfree.chart.block.Arrangement)" class="org.jfree.chart.title.LegendTitle" />
	<method signature="void setItemPaint(java.awt.Paint)" class="org.jfree.chart.title.LegendTitle" />
	<method signature="org.jfree.chart.block.BlockContainer getItemContainer()" class="org.jfree.chart.title.LegendTitle" />
	<method signature="org.jfree.ui.RectangleEdge getLegendItemGraphicEdge()" class="org.jfree.chart.title.LegendTitle" />
	<method signature="void setLegendItemGraphicLocation(org.jfree.ui.RectangleAnchor)" class="org.jfree.chart.title.LegendTitle" />
	<method signature="org.jfree.chart.LegendItemSource[] getSources()" class="org.jfree.chart.title.LegendTitle" />
	<method signature="void setLegendItemGraphicAnchor(org.jfree.ui.RectangleAnchor)" class="org.jfree.chart.title.LegendTitle" />
	<method signature="void setSortOrder(org.jfree.util.SortOrder)" class="org.jfree.chart.title.LegendTitle" />
	<method signature="java.awt.Paint getBackgroundPaint()" class="org.jfree.chart.title.LegendTitle" />
	<method signature="org.jfree.ui.Size2D arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" class="org.jfree.chart.title.LegendTitle" />
	<method signature="void setLegendItemGraphicEdge(org.jfree.ui.RectangleEdge)" class="org.jfree.chart.title.LegendTitle" />
	<method signature="void setLegendItemGraphicPadding(org.jfree.ui.RectangleInsets)" class="org.jfree.chart.title.LegendTitle" />
	<method signature="void setItemFont(java.awt.Font)" class="org.jfree.chart.title.LegendTitle" />
	<method signature="void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" class="org.jfree.chart.title.LegendTitle" />
	<method signature="void setBackgroundPaint(java.awt.Paint)" class="org.jfree.chart.title.LegendTitle" />
	<class name="org.apache.commons.lang3.exception.ExceptionContext" />
	<method signature="java.util.Set getContextLabels()" class="org.apache.commons.lang3.exception.ExceptionContext" />
	<method signature="java.lang.Object getFirstContextValue(java.lang.String)" class="org.apache.commons.lang3.exception.ExceptionContext" />
	<method signature="java.lang.String getFormattedExceptionMessage(java.lang.String)" class="org.apache.commons.lang3.exception.ExceptionContext" />
	<method signature="java.util.List getContextValues(java.lang.String)" class="org.apache.commons.lang3.exception.ExceptionContext" />
	<method signature="org.apache.commons.lang3.exception.ExceptionContext setContextValue(java.lang.String,java.lang.Object)" class="org.apache.commons.lang3.exception.ExceptionContext" />
	<method signature="org.apache.commons.lang3.exception.ExceptionContext addContextValue(java.lang.String,java.lang.Object)" class="org.apache.commons.lang3.exception.ExceptionContext" />
	<method signature="java.util.List getContextEntries()" class="org.apache.commons.lang3.exception.ExceptionContext" />
	<class name="org.jdom2.adapters.DOMAdapter" />
	<method signature="org.w3c.dom.Document createDocument(org.jdom2.DocType)" class="org.jdom2.adapters.DOMAdapter" />
	<method signature="org.w3c.dom.Document createDocument()" class="org.jdom2.adapters.DOMAdapter" />
	<class name="tourma.views.fullscreen.JFullScreenIndivRank" />
	<method signature="void &lt;init&gt;(int)" class="tourma.views.fullscreen.JFullScreenIndivRank" />
	<method signature="void &lt;init&gt;(java.net.Socket,int)" class="tourma.views.fullscreen.JFullScreenIndivRank" />
	<method signature="void &lt;init&gt;(java.net.Socket)" class="tourma.views.fullscreen.JFullScreenIndivRank" />
	<method signature="void &lt;init&gt;(int,int)" class="tourma.views.fullscreen.JFullScreenIndivRank" />
	<class name="org.apache.xerces.impl.xpath.regex.REUtil" />
	<method signature="boolean matches(java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xpath.regex.REUtil" />
	<method signature="java.lang.String quoteMeta(java.lang.String)" class="org.apache.xerces.impl.xpath.regex.REUtil" />
	<method signature="org.apache.xerces.impl.xpath.regex.RegularExpression createRegex(java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xpath.regex.REUtil" />
	<method signature="void main(java.lang.String[])" class="org.apache.xerces.impl.xpath.regex.REUtil" />
	<method signature="boolean matches(java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xpath.regex.REUtil" />
	<class name="org.jfree.chart.title.LegendGraphic" />
	<method signature="void setOutlineStroke(java.awt.Stroke)" class="org.jfree.chart.title.LegendGraphic" />
	<method signature="java.awt.Shape getShape()" class="org.jfree.chart.title.LegendGraphic" />
	<method signature="java.awt.Stroke getOutlineStroke()" class="org.jfree.chart.title.LegendGraphic" />
	<method signature="void setOutlinePaint(java.awt.Paint)" class="org.jfree.chart.title.LegendGraphic" />
	<method signature="void setLine(java.awt.Shape)" class="org.jfree.chart.title.LegendGraphic" />
	<method signature="void setShapeOutlineVisible(boolean)" class="org.jfree.chart.title.LegendGraphic" />
	<method signature="void setLinePaint(java.awt.Paint)" class="org.jfree.chart.title.LegendGraphic" />
	<method signature="org.jfree.ui.RectangleAnchor getShapeLocation()" class="org.jfree.chart.title.LegendGraphic" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.title.LegendGraphic" />
	<method signature="java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)" class="org.jfree.chart.title.LegendGraphic" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.title.LegendGraphic" />
	<method signature="void setShapeFilled(boolean)" class="org.jfree.chart.title.LegendGraphic" />
	<method signature="java.awt.Paint getOutlinePaint()" class="org.jfree.chart.title.LegendGraphic" />
	<method signature="java.awt.Paint getFillPaint()" class="org.jfree.chart.title.LegendGraphic" />
	<method signature="boolean isShapeVisible()" class="org.jfree.chart.title.LegendGraphic" />
	<method signature="boolean isShapeOutlineVisible()" class="org.jfree.chart.title.LegendGraphic" />
	<method signature="boolean isShapeFilled()" class="org.jfree.chart.title.LegendGraphic" />
	<method signature="org.jfree.ui.RectangleAnchor getShapeAnchor()" class="org.jfree.chart.title.LegendGraphic" />
	<method signature="void setShape(java.awt.Shape)" class="org.jfree.chart.title.LegendGraphic" />
	<method signature="java.awt.Shape getLine()" class="org.jfree.chart.title.LegendGraphic" />
	<method signature="java.awt.Paint getLinePaint()" class="org.jfree.chart.title.LegendGraphic" />
	<method signature="void setLineStroke(java.awt.Stroke)" class="org.jfree.chart.title.LegendGraphic" />
	<method signature="void setShapeAnchor(org.jfree.ui.RectangleAnchor)" class="org.jfree.chart.title.LegendGraphic" />
	<method signature="java.awt.Stroke getLineStroke()" class="org.jfree.chart.title.LegendGraphic" />
	<method signature="int hashCode()" class="org.jfree.chart.title.LegendGraphic" />
	<method signature="void setFillPaintTransformer(org.jfree.ui.GradientPaintTransformer)" class="org.jfree.chart.title.LegendGraphic" />
	<method signature="org.jfree.ui.Size2D arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" class="org.jfree.chart.title.LegendGraphic" />
	<method signature="void setFillPaint(java.awt.Paint)" class="org.jfree.chart.title.LegendGraphic" />
	<method signature="void setShapeLocation(org.jfree.ui.RectangleAnchor)" class="org.jfree.chart.title.LegendGraphic" />
	<method signature="org.jfree.ui.GradientPaintTransformer getFillPaintTransformer()" class="org.jfree.chart.title.LegendGraphic" />
	<method signature="void &lt;init&gt;(java.awt.Shape,java.awt.Paint)" class="org.jfree.chart.title.LegendGraphic" />
	<method signature="boolean isLineVisible()" class="org.jfree.chart.title.LegendGraphic" />
	<method signature="void setShapeVisible(boolean)" class="org.jfree.chart.title.LegendGraphic" />
	<method signature="void setLineVisible(boolean)" class="org.jfree.chart.title.LegendGraphic" />
	<method signature="void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" class="org.jfree.chart.title.LegendGraphic" />
	<class name="org.jfree.chart.plot.CombinedDomainXYPlot" />
	<method signature="java.lang.String getPlotType()" class="org.jfree.chart.plot.CombinedDomainXYPlot" />
	<method signature="org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)" class="org.jfree.chart.plot.CombinedDomainXYPlot" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.plot.CombinedDomainXYPlot" />
	<method signature="void setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)" class="org.jfree.chart.plot.CombinedDomainXYPlot" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.plot.CombinedDomainXYPlot" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.plot.CombinedDomainXYPlot" />
	<method signature="double getGap()" class="org.jfree.chart.plot.CombinedDomainXYPlot" />
	<method signature="void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.plot.CombinedDomainXYPlot" />
	<method signature="void plotChanged(org.jfree.chart.event.PlotChangeEvent)" class="org.jfree.chart.plot.CombinedDomainXYPlot" />
	<method signature="void remove(org.jfree.chart.plot.XYPlot)" class="org.jfree.chart.plot.CombinedDomainXYPlot" />
	<method signature="void panRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" class="org.jfree.chart.plot.CombinedDomainXYPlot" />
	<method signature="void zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" class="org.jfree.chart.plot.CombinedDomainXYPlot" />
	<method signature="void zoomRangeAxes(double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D,boolean)" class="org.jfree.chart.plot.CombinedDomainXYPlot" />
	<method signature="java.util.List getSubplots()" class="org.jfree.chart.plot.CombinedDomainXYPlot" />
	<method signature="org.jfree.chart.plot.XYPlot findSubplot(org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" class="org.jfree.chart.plot.CombinedDomainXYPlot" />
	<method signature="void add(org.jfree.chart.plot.XYPlot,int)" class="org.jfree.chart.plot.CombinedDomainXYPlot" />
	<method signature="void setGap(double)" class="org.jfree.chart.plot.CombinedDomainXYPlot" />
	<method signature="void setOrientation(org.jfree.chart.plot.PlotOrientation)" class="org.jfree.chart.plot.CombinedDomainXYPlot" />
	<method signature="void zoomRangeAxes(double,double,org.jfree.chart.plot.PlotRenderingInfo,java.awt.geom.Point2D)" class="org.jfree.chart.plot.CombinedDomainXYPlot" />
	<method signature="void handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.plot.CombinedDomainXYPlot" />
	<method signature="void &lt;init&gt;(org.jfree.chart.axis.ValueAxis)" class="org.jfree.chart.plot.CombinedDomainXYPlot" />
	<method signature="void add(org.jfree.chart.plot.XYPlot)" class="org.jfree.chart.plot.CombinedDomainXYPlot" />
	<method signature="org.jfree.chart.LegendItemCollection getLegendItems()" class="org.jfree.chart.plot.CombinedDomainXYPlot" />
	<method signature="void setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace)" class="org.jfree.chart.plot.CombinedDomainXYPlot" />
	<class name="com.google.zxing.client.j2se.BufferedImageLuminanceSource" />
	<method signature="void &lt;init&gt;(java.awt.image.BufferedImage)" class="com.google.zxing.client.j2se.BufferedImageLuminanceSource" />
	<method signature="com.google.zxing.LuminanceSource crop(int,int,int,int)" class="com.google.zxing.client.j2se.BufferedImageLuminanceSource" />
	<method signature="com.google.zxing.LuminanceSource rotateCounterClockwise()" class="com.google.zxing.client.j2se.BufferedImageLuminanceSource" />
	<method signature="com.google.zxing.LuminanceSource rotateCounterClockwise45()" class="com.google.zxing.client.j2se.BufferedImageLuminanceSource" />
	<method signature="boolean isRotateSupported()" class="com.google.zxing.client.j2se.BufferedImageLuminanceSource" />
	<method signature="void &lt;init&gt;(java.awt.image.BufferedImage,int,int,int,int)" class="com.google.zxing.client.j2se.BufferedImageLuminanceSource" />
	<method signature="boolean isCropSupported()" class="com.google.zxing.client.j2se.BufferedImageLuminanceSource" />
	<method signature="byte[] getRow(int,byte[])" class="com.google.zxing.client.j2se.BufferedImageLuminanceSource" />
	<method signature="byte[] getMatrix()" class="com.google.zxing.client.j2se.BufferedImageLuminanceSource" />
	<class name="teamma.tableModel.MjtTeamPlayers" />
	<method signature="boolean isCellEditable(int,int)" class="teamma.tableModel.MjtTeamPlayers" />
	<method signature="java.awt.Component getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)" class="teamma.tableModel.MjtTeamPlayers" />
	<method signature="void &lt;init&gt;(teamma.data.Roster)" class="teamma.tableModel.MjtTeamPlayers" />
	<method signature="int getRowCount()" class="teamma.tableModel.MjtTeamPlayers" />
	<method signature="java.lang.String getColumnName(int)" class="teamma.tableModel.MjtTeamPlayers" />
	<method signature="java.lang.Class getColumnClass(int)" class="teamma.tableModel.MjtTeamPlayers" />
	<method signature="java.lang.Object getValueAt(int,int)" class="teamma.tableModel.MjtTeamPlayers" />
	<method signature="int getColumnCount()" class="teamma.tableModel.MjtTeamPlayers" />
	<class name="org.apache.xerces.impl.xpath.XPath$NodeTest" />
	<method signature="java.lang.Object clone()" class="org.apache.xerces.impl.xpath.XPath$NodeTest" />
	<method signature="void &lt;init&gt;(org.apache.xerces.xni.QName)" class="org.apache.xerces.impl.xpath.XPath$NodeTest" />
	<method signature="void &lt;init&gt;(org.apache.xerces.impl.xpath.XPath$NodeTest)" class="org.apache.xerces.impl.xpath.XPath$NodeTest" />
	<method signature="java.lang.String toString()" class="org.apache.xerces.impl.xpath.XPath$NodeTest" />
	<method signature="void &lt;init&gt;(short)" class="org.apache.xerces.impl.xpath.XPath$NodeTest" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xpath.XPath$NodeTest" />
	<class name="org.jfree.chart.renderer.xy.WindItemRenderer" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.renderer.xy.WindItemRenderer" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)" class="org.jfree.chart.renderer.xy.WindItemRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.xy.WindItemRenderer" />
	<class name="freemarker.debug.DebuggerListener" />
	<method signature="void environmentSuspended(freemarker.debug.EnvironmentSuspendedEvent)" class="freemarker.debug.DebuggerListener" />
	<class name="org.jfree.data.time.DynamicTimeSeriesCollection" />
	<method signature="org.jfree.data.time.RegularTimePeriod advanceTime()" class="org.jfree.data.time.DynamicTimeSeriesCollection" />
	<method signature="void &lt;init&gt;(int,int,org.jfree.data.time.RegularTimePeriod,java.util.TimeZone)" class="org.jfree.data.time.DynamicTimeSeriesCollection" />
	<method signature="java.lang.Number getX(int,int)" class="org.jfree.data.time.DynamicTimeSeriesCollection" />
	<method signature="void &lt;init&gt;(int,int,org.jfree.data.time.RegularTimePeriod)" class="org.jfree.data.time.DynamicTimeSeriesCollection" />
	<method signature="int getPosition()" class="org.jfree.data.time.DynamicTimeSeriesCollection" />
	<method signature="void addSeries(float[],int,java.lang.Comparable)" class="org.jfree.data.time.DynamicTimeSeriesCollection" />
	<method signature="java.lang.Number getY(int,int)" class="org.jfree.data.time.DynamicTimeSeriesCollection" />
	<method signature="void &lt;init&gt;(int,int)" class="org.jfree.data.time.DynamicTimeSeriesCollection" />
	<method signature="int getOldestIndex()" class="org.jfree.data.time.DynamicTimeSeriesCollection" />
	<method signature="void addValue(int,int,float)" class="org.jfree.data.time.DynamicTimeSeriesCollection" />
	<method signature="int getSeriesCount()" class="org.jfree.data.time.DynamicTimeSeriesCollection" />
	<method signature="void invalidateRangeInfo()" class="org.jfree.data.time.DynamicTimeSeriesCollection" />
	<method signature="int offsetFromNewest(int)" class="org.jfree.data.time.DynamicTimeSeriesCollection" />
	<method signature="org.jfree.data.time.RegularTimePeriod getOldestTime()" class="org.jfree.data.time.DynamicTimeSeriesCollection" />
	<method signature="void setPosition(int)" class="org.jfree.data.time.DynamicTimeSeriesCollection" />
	<method signature="org.jfree.data.Range getDomainBounds(boolean)" class="org.jfree.data.time.DynamicTimeSeriesCollection" />
	<method signature="java.lang.Comparable getSeriesKey(int)" class="org.jfree.data.time.DynamicTimeSeriesCollection" />
	<method signature="java.lang.Number getEndX(int,int)" class="org.jfree.data.time.DynamicTimeSeriesCollection" />
	<method signature="int getItemCount(int)" class="org.jfree.data.time.DynamicTimeSeriesCollection" />
	<method signature="java.lang.Number getEndY(int,int)" class="org.jfree.data.time.DynamicTimeSeriesCollection" />
	<method signature="double getDomainUpperBound(boolean)" class="org.jfree.data.time.DynamicTimeSeriesCollection" />
	<method signature="double getRangeLowerBound(boolean)" class="org.jfree.data.time.DynamicTimeSeriesCollection" />
	<method signature="int offsetFromOldest(int)" class="org.jfree.data.time.DynamicTimeSeriesCollection" />
	<method signature="long setTimeBase(org.jfree.data.time.RegularTimePeriod)" class="org.jfree.data.time.DynamicTimeSeriesCollection" />
	<method signature="org.jfree.data.Range getRangeBounds(boolean)" class="org.jfree.data.time.DynamicTimeSeriesCollection" />
	<method signature="void &lt;init&gt;(int,int,java.util.TimeZone)" class="org.jfree.data.time.DynamicTimeSeriesCollection" />
	<method signature="double getDomainLowerBound(boolean)" class="org.jfree.data.time.DynamicTimeSeriesCollection" />
	<method signature="int getNewestIndex()" class="org.jfree.data.time.DynamicTimeSeriesCollection" />
	<method signature="double getRangeUpperBound(boolean)" class="org.jfree.data.time.DynamicTimeSeriesCollection" />
	<method signature="org.jfree.data.time.RegularTimePeriod getNewestTime()" class="org.jfree.data.time.DynamicTimeSeriesCollection" />
	<method signature="void setSeriesKey(int,java.lang.Comparable)" class="org.jfree.data.time.DynamicTimeSeriesCollection" />
	<method signature="java.lang.Number getStartX(int,int)" class="org.jfree.data.time.DynamicTimeSeriesCollection" />
	<method signature="java.lang.Number getStartY(int,int)" class="org.jfree.data.time.DynamicTimeSeriesCollection" />
	<method signature="double getYValue(int,int)" class="org.jfree.data.time.DynamicTimeSeriesCollection" />
	<method signature="void appendData(float[])" class="org.jfree.data.time.DynamicTimeSeriesCollection" />
	<method signature="void appendData(float[],int,int)" class="org.jfree.data.time.DynamicTimeSeriesCollection" />
	<class name="org.apache.xerces.impl.XMLEntityManager$InternalEntity" />
	<method signature="void setValues(org.apache.xerces.impl.XMLEntityManager$InternalEntity)" class="org.apache.xerces.impl.XMLEntityManager$InternalEntity" />
	<method signature="boolean isUnparsed()" class="org.apache.xerces.impl.XMLEntityManager$InternalEntity" />
	<method signature="void clear()" class="org.apache.xerces.impl.XMLEntityManager$InternalEntity" />
	<method signature="void setValues(org.apache.xerces.impl.XMLEntityManager$Entity)" class="org.apache.xerces.impl.XMLEntityManager$InternalEntity" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,boolean)" class="org.apache.xerces.impl.XMLEntityManager$InternalEntity" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.XMLEntityManager$InternalEntity" />
	<method signature="boolean isExternal()" class="org.apache.xerces.impl.XMLEntityManager$InternalEntity" />
	<class name="freemarker.template.utility.DateUtil$DateToISO8601CalendarFactory" />
	<method signature="java.util.GregorianCalendar get(java.util.TimeZone,java.util.Date)" class="freemarker.template.utility.DateUtil$DateToISO8601CalendarFactory" />
	<class name="org.apache.xerces.impl.dtd.DTDGrammarBucket" />
	<method signature="void clear()" class="org.apache.xerces.impl.dtd.DTDGrammarBucket" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dtd.DTDGrammarBucket" />
	<method signature="void putGrammar(org.apache.xerces.impl.dtd.DTDGrammar)" class="org.apache.xerces.impl.dtd.DTDGrammarBucket" />
	<method signature="org.apache.xerces.impl.dtd.DTDGrammar getGrammar(org.apache.xerces.xni.grammars.XMLGrammarDescription)" class="org.apache.xerces.impl.dtd.DTDGrammarBucket" />
	<class name="javax.xml.transform.sax.SAXResult" />
	<method signature="java.lang.String getSystemId()" class="javax.xml.transform.sax.SAXResult" />
	<method signature="void setSystemId(java.lang.String)" class="javax.xml.transform.sax.SAXResult" />
	<method signature="void setHandler(org.xml.sax.ContentHandler)" class="javax.xml.transform.sax.SAXResult" />
	<method signature="org.xml.sax.ContentHandler getHandler()" class="javax.xml.transform.sax.SAXResult" />
	<method signature="org.xml.sax.ext.LexicalHandler getLexicalHandler()" class="javax.xml.transform.sax.SAXResult" />
	<method signature="void &lt;init&gt;()" class="javax.xml.transform.sax.SAXResult" />
	<method signature="void setLexicalHandler(org.xml.sax.ext.LexicalHandler)" class="javax.xml.transform.sax.SAXResult" />
	<method signature="void &lt;init&gt;(org.xml.sax.ContentHandler)" class="javax.xml.transform.sax.SAXResult" />
	<class name="org.jdom2.input.sax.AbstractReaderSchemaFactory" />
	<method signature="void &lt;init&gt;(javax.xml.parsers.SAXParserFactory,javax.xml.validation.Schema)" class="org.jdom2.input.sax.AbstractReaderSchemaFactory" />
	<method signature="boolean isValidating()" class="org.jdom2.input.sax.AbstractReaderSchemaFactory" />
	<method signature="org.xml.sax.XMLReader createXMLReader()" class="org.jdom2.input.sax.AbstractReaderSchemaFactory" />
	<class name="org.jfree.chart.event.AnnotationChangeListener" />
	<method signature="void annotationChanged(org.jfree.chart.event.AnnotationChangeEvent)" class="org.jfree.chart.event.AnnotationChangeListener" />
	<class name="org.apache.xerces.jaxp.SAXParserFactoryImpl" />
	<method signature="javax.xml.validation.Schema getSchema()" class="org.apache.xerces.jaxp.SAXParserFactoryImpl" />
	<method signature="javax.xml.parsers.SAXParser newSAXParser()" class="org.apache.xerces.jaxp.SAXParserFactoryImpl" />
	<method signature="boolean isXIncludeAware()" class="org.apache.xerces.jaxp.SAXParserFactoryImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.jaxp.SAXParserFactoryImpl" />
	<method signature="boolean getFeature(java.lang.String)" class="org.apache.xerces.jaxp.SAXParserFactoryImpl" />
	<method signature="void setXIncludeAware(boolean)" class="org.apache.xerces.jaxp.SAXParserFactoryImpl" />
	<method signature="void setFeature(java.lang.String,boolean)" class="org.apache.xerces.jaxp.SAXParserFactoryImpl" />
	<method signature="void setSchema(javax.xml.validation.Schema)" class="org.apache.xerces.jaxp.SAXParserFactoryImpl" />
	<class name="freemarker.core.Macro" />
	<method signature="java.lang.String getName()" class="freemarker.core.Macro" />
	<method signature="void setCatchAll(java.lang.String)" class="freemarker.core.Macro" />
	<method signature="java.lang.String getDescription()" class="freemarker.core.Macro" />
	<method signature="boolean isFunction()" class="freemarker.core.Macro" />
	<method signature="java.lang.String getCanonicalForm()" class="freemarker.core.Macro" />
	<method signature="java.lang.String getCatchAll()" class="freemarker.core.Macro" />
	<method signature="java.lang.String[] getArgumentNames()" class="freemarker.core.Macro" />
	<class name="org.jfree.chart.renderer.xy.StandardXYItemRenderer" />
	<method signature="void setDrawSeriesLineAsPath(boolean)" class="org.jfree.chart.renderer.xy.StandardXYItemRenderer" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)" class="org.jfree.chart.renderer.xy.StandardXYItemRenderer" />
	<method signature="org.jfree.util.UnitType getGapThresholdType()" class="org.jfree.chart.renderer.xy.StandardXYItemRenderer" />
	<method signature="void setBaseShapesFilled(boolean)" class="org.jfree.chart.renderer.xy.StandardXYItemRenderer" />
	<method signature="boolean getPlotDiscontinuous()" class="org.jfree.chart.renderer.xy.StandardXYItemRenderer" />
	<method signature="void setPlotDiscontinuous(boolean)" class="org.jfree.chart.renderer.xy.StandardXYItemRenderer" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.renderer.xy.StandardXYItemRenderer" />
	<method signature="org.jfree.chart.LegendItem getLegendItem(int,int)" class="org.jfree.chart.renderer.xy.StandardXYItemRenderer" />
	<method signature="double getGapThreshold()" class="org.jfree.chart.renderer.xy.StandardXYItemRenderer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.xy.StandardXYItemRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.xy.StandardXYItemRenderer" />
	<method signature="void setSeriesShapesFilled(int,java.lang.Boolean)" class="org.jfree.chart.renderer.xy.StandardXYItemRenderer" />
	<method signature="boolean getBaseShapesVisible()" class="org.jfree.chart.renderer.xy.StandardXYItemRenderer" />
	<method signature="boolean getPlotLines()" class="org.jfree.chart.renderer.xy.StandardXYItemRenderer" />
	<method signature="void setPlotImages(boolean)" class="org.jfree.chart.renderer.xy.StandardXYItemRenderer" />
	<method signature="void setGapThreshold(double)" class="org.jfree.chart.renderer.xy.StandardXYItemRenderer" />
	<method signature="boolean getItemShapeFilled(int,int)" class="org.jfree.chart.renderer.xy.StandardXYItemRenderer" />
	<method signature="java.lang.Boolean getSeriesShapesFilled(int)" class="org.jfree.chart.renderer.xy.StandardXYItemRenderer" />
	<method signature="java.awt.Shape getLegendLine()" class="org.jfree.chart.renderer.xy.StandardXYItemRenderer" />
	<method signature="org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.renderer.xy.StandardXYItemRenderer" />
	<method signature="void setGapThresholdType(org.jfree.util.UnitType)" class="org.jfree.chart.renderer.xy.StandardXYItemRenderer" />
	<method signature="void setShapesFilled(boolean)" class="org.jfree.chart.renderer.xy.StandardXYItemRenderer" />
	<method signature="boolean getPlotImages()" class="org.jfree.chart.renderer.xy.StandardXYItemRenderer" />
	<method signature="boolean getDrawSeriesLineAsPath()" class="org.jfree.chart.renderer.xy.StandardXYItemRenderer" />
	<method signature="void &lt;init&gt;(int)" class="org.jfree.chart.renderer.xy.StandardXYItemRenderer" />
	<method signature="void setBaseShapesVisible(boolean)" class="org.jfree.chart.renderer.xy.StandardXYItemRenderer" />
	<method signature="void &lt;init&gt;(int,org.jfree.chart.labels.XYToolTipGenerator)" class="org.jfree.chart.renderer.xy.StandardXYItemRenderer" />
	<method signature="boolean getBaseShapesFilled()" class="org.jfree.chart.renderer.xy.StandardXYItemRenderer" />
	<method signature="void setLegendLine(java.awt.Shape)" class="org.jfree.chart.renderer.xy.StandardXYItemRenderer" />
	<method signature="void setPlotLines(boolean)" class="org.jfree.chart.renderer.xy.StandardXYItemRenderer" />
	<method signature="void &lt;init&gt;(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" class="org.jfree.chart.renderer.xy.StandardXYItemRenderer" />
	<method signature="java.lang.Boolean getShapesFilled()" class="org.jfree.chart.renderer.xy.StandardXYItemRenderer" />
	<method signature="void setShapesFilled(java.lang.Boolean)" class="org.jfree.chart.renderer.xy.StandardXYItemRenderer" />
	<class name="org.jfree.chart.imagemap.URLTagFragmentGenerator" />
	<method signature="java.lang.String generateURLFragment(java.lang.String)" class="org.jfree.chart.imagemap.URLTagFragmentGenerator" />
	<class name="org.apache.xerces.xinclude.XIncludeHandler$UnparsedEntity" />
	<method signature="boolean equals(java.lang.Object)" class="org.apache.xerces.xinclude.XIncludeHandler$UnparsedEntity" />
	<method signature="boolean isDuplicate(java.lang.Object)" class="org.apache.xerces.xinclude.XIncludeHandler$UnparsedEntity" />
	<class name="com.google.zxing.common.reedsolomon.ReedSolomonDecoder" />
	<method signature="void &lt;init&gt;(com.google.zxing.common.reedsolomon.GenericGF)" class="com.google.zxing.common.reedsolomon.ReedSolomonDecoder" />
	<method signature="void decode(int[],int)" class="com.google.zxing.common.reedsolomon.ReedSolomonDecoder" />
	<class name="org.apache.xerces.impl.xs.XMLSchemaValidator$ShortVector" />
	<method signature="void &lt;init&gt;(int)" class="org.apache.xerces.impl.xs.XMLSchemaValidator$ShortVector" />
	<method signature="void clear()" class="org.apache.xerces.impl.xs.XMLSchemaValidator$ShortVector" />
	<method signature="void add(short)" class="org.apache.xerces.impl.xs.XMLSchemaValidator$ShortVector" />
	<method signature="boolean contains(short)" class="org.apache.xerces.impl.xs.XMLSchemaValidator$ShortVector" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xs.XMLSchemaValidator$ShortVector" />
	<method signature="short valueAt(int)" class="org.apache.xerces.impl.xs.XMLSchemaValidator$ShortVector" />
	<method signature="int length()" class="org.apache.xerces.impl.xs.XMLSchemaValidator$ShortVector" />
	<class name="net.jcip.annotations.ThreadSafe" />
	<class name="org.w3c.dom.stylesheets.MediaList" />
	<method signature="java.lang.String item(int)" class="org.w3c.dom.stylesheets.MediaList" />
	<method signature="void appendMedium(java.lang.String)" class="org.w3c.dom.stylesheets.MediaList" />
	<method signature="java.lang.String getMediaText()" class="org.w3c.dom.stylesheets.MediaList" />
	<method signature="void setMediaText(java.lang.String)" class="org.w3c.dom.stylesheets.MediaList" />
	<method signature="int getLength()" class="org.w3c.dom.stylesheets.MediaList" />
	<method signature="void deleteMedium(java.lang.String)" class="org.w3c.dom.stylesheets.MediaList" />
	<class name="org.apache.xerces.impl.xs.opti.DefaultDocument" />
	<method signature="org.w3c.dom.Comment createComment(java.lang.String)" class="org.apache.xerces.impl.xs.opti.DefaultDocument" />
	<method signature="org.w3c.dom.DocumentType getDoctype()" class="org.apache.xerces.impl.xs.opti.DefaultDocument" />
	<method signature="org.w3c.dom.EntityReference createEntityReference(java.lang.String)" class="org.apache.xerces.impl.xs.opti.DefaultDocument" />
	<method signature="java.lang.String getXmlVersion()" class="org.apache.xerces.impl.xs.opti.DefaultDocument" />
	<method signature="org.w3c.dom.Element createElementNS(java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.opti.DefaultDocument" />
	<method signature="boolean getStrictErrorChecking()" class="org.apache.xerces.impl.xs.opti.DefaultDocument" />
	<method signature="void normalizeDocument()" class="org.apache.xerces.impl.xs.opti.DefaultDocument" />
	<method signature="java.lang.String getDocumentURI()" class="org.apache.xerces.impl.xs.opti.DefaultDocument" />
	<method signature="java.lang.String getXmlEncoding()" class="org.apache.xerces.impl.xs.opti.DefaultDocument" />
	<method signature="boolean getXmlStandalone()" class="org.apache.xerces.impl.xs.opti.DefaultDocument" />
	<method signature="org.w3c.dom.DOMImplementation getImplementation()" class="org.apache.xerces.impl.xs.opti.DefaultDocument" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xs.opti.DefaultDocument" />
	<method signature="org.w3c.dom.Element createElement(java.lang.String)" class="org.apache.xerces.impl.xs.opti.DefaultDocument" />
	<method signature="org.w3c.dom.Text createTextNode(java.lang.String)" class="org.apache.xerces.impl.xs.opti.DefaultDocument" />
	<method signature="org.w3c.dom.Element getDocumentElement()" class="org.apache.xerces.impl.xs.opti.DefaultDocument" />
	<method signature="java.lang.String getInputEncoding()" class="org.apache.xerces.impl.xs.opti.DefaultDocument" />
	<method signature="java.lang.String getNodeName()" class="org.apache.xerces.impl.xs.opti.DefaultDocument" />
	<method signature="org.w3c.dom.ProcessingInstruction createProcessingInstruction(java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.opti.DefaultDocument" />
	<method signature="org.w3c.dom.Node adoptNode(org.w3c.dom.Node)" class="org.apache.xerces.impl.xs.opti.DefaultDocument" />
	<method signature="org.w3c.dom.Attr createAttributeNS(java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.opti.DefaultDocument" />
	<method signature="org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.opti.DefaultDocument" />
	<method signature="org.w3c.dom.Element getElementById(java.lang.String)" class="org.apache.xerces.impl.xs.opti.DefaultDocument" />
	<method signature="org.w3c.dom.NodeList getElementsByTagName(java.lang.String)" class="org.apache.xerces.impl.xs.opti.DefaultDocument" />
	<method signature="void setXmlStandalone(boolean)" class="org.apache.xerces.impl.xs.opti.DefaultDocument" />
	<method signature="void setXmlVersion(java.lang.String)" class="org.apache.xerces.impl.xs.opti.DefaultDocument" />
	<method signature="org.w3c.dom.Attr createAttribute(java.lang.String)" class="org.apache.xerces.impl.xs.opti.DefaultDocument" />
	<method signature="void setStrictErrorChecking(boolean)" class="org.apache.xerces.impl.xs.opti.DefaultDocument" />
	<method signature="void setDocumentURI(java.lang.String)" class="org.apache.xerces.impl.xs.opti.DefaultDocument" />
	<method signature="org.w3c.dom.DocumentFragment createDocumentFragment()" class="org.apache.xerces.impl.xs.opti.DefaultDocument" />
	<method signature="org.w3c.dom.CDATASection createCDATASection(java.lang.String)" class="org.apache.xerces.impl.xs.opti.DefaultDocument" />
	<method signature="org.w3c.dom.DOMConfiguration getDomConfig()" class="org.apache.xerces.impl.xs.opti.DefaultDocument" />
	<method signature="org.w3c.dom.Node renameNode(org.w3c.dom.Node,java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.opti.DefaultDocument" />
	<method signature="org.w3c.dom.Node importNode(org.w3c.dom.Node,boolean)" class="org.apache.xerces.impl.xs.opti.DefaultDocument" />
	<class name="com.google.zxing.client.result.EmailDoCoMoResultParser" />
	<method signature="com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result)" class="com.google.zxing.client.result.EmailDoCoMoResultParser" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.client.result.EmailDoCoMoResultParser" />
	<method signature="com.google.zxing.client.result.EmailAddressParsedResult parse(com.google.zxing.Result)" class="com.google.zxing.client.result.EmailDoCoMoResultParser" />
	<class name="javax.xml.parsers.ParserConfigurationException" />
	<method signature="void &lt;init&gt;()" class="javax.xml.parsers.ParserConfigurationException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="javax.xml.parsers.ParserConfigurationException" />
	<class name="org.apache.xerces.stax.XMLEventFactoryImpl" />
	<method signature="javax.xml.stream.events.Namespace createNamespace(java.lang.String)" class="org.apache.xerces.stax.XMLEventFactoryImpl" />
	<method signature="javax.xml.stream.events.StartDocument createStartDocument(java.lang.String)" class="org.apache.xerces.stax.XMLEventFactoryImpl" />
	<method signature="javax.xml.stream.events.StartElement createStartElement(javax.xml.namespace.QName,java.util.Iterator,java.util.Iterator)" class="org.apache.xerces.stax.XMLEventFactoryImpl" />
	<method signature="javax.xml.stream.events.Attribute createAttribute(javax.xml.namespace.QName,java.lang.String)" class="org.apache.xerces.stax.XMLEventFactoryImpl" />
	<method signature="javax.xml.stream.events.EndElement createEndElement(javax.xml.namespace.QName,java.util.Iterator)" class="org.apache.xerces.stax.XMLEventFactoryImpl" />
	<method signature="javax.xml.stream.events.Attribute createAttribute(java.lang.String,java.lang.String)" class="org.apache.xerces.stax.XMLEventFactoryImpl" />
	<method signature="javax.xml.stream.events.EndElement createEndElement(java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.stax.XMLEventFactoryImpl" />
	<method signature="void setLocation(javax.xml.stream.Location)" class="org.apache.xerces.stax.XMLEventFactoryImpl" />
	<method signature="javax.xml.stream.events.StartDocument createStartDocument()" class="org.apache.xerces.stax.XMLEventFactoryImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.stax.XMLEventFactoryImpl" />
	<method signature="javax.xml.stream.events.StartElement createStartElement(java.lang.String,java.lang.String,java.lang.String,java.util.Iterator,java.util.Iterator)" class="org.apache.xerces.stax.XMLEventFactoryImpl" />
	<method signature="javax.xml.stream.events.EndDocument createEndDocument()" class="org.apache.xerces.stax.XMLEventFactoryImpl" />
	<method signature="javax.xml.stream.events.Characters createCData(java.lang.String)" class="org.apache.xerces.stax.XMLEventFactoryImpl" />
	<method signature="javax.xml.stream.events.StartDocument createStartDocument(java.lang.String,java.lang.String,boolean)" class="org.apache.xerces.stax.XMLEventFactoryImpl" />
	<method signature="javax.xml.stream.events.Namespace createNamespace(java.lang.String,java.lang.String)" class="org.apache.xerces.stax.XMLEventFactoryImpl" />
	<method signature="javax.xml.stream.events.ProcessingInstruction createProcessingInstruction(java.lang.String,java.lang.String)" class="org.apache.xerces.stax.XMLEventFactoryImpl" />
	<method signature="javax.xml.stream.events.DTD createDTD(java.lang.String)" class="org.apache.xerces.stax.XMLEventFactoryImpl" />
	<method signature="javax.xml.stream.events.Attribute createAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.stax.XMLEventFactoryImpl" />
	<method signature="javax.xml.stream.events.Characters createCharacters(java.lang.String)" class="org.apache.xerces.stax.XMLEventFactoryImpl" />
	<method signature="javax.xml.stream.events.Characters createIgnorableSpace(java.lang.String)" class="org.apache.xerces.stax.XMLEventFactoryImpl" />
	<method signature="javax.xml.stream.events.Comment createComment(java.lang.String)" class="org.apache.xerces.stax.XMLEventFactoryImpl" />
	<method signature="javax.xml.stream.events.StartElement createStartElement(java.lang.String,java.lang.String,java.lang.String,java.util.Iterator,java.util.Iterator,javax.xml.namespace.NamespaceContext)" class="org.apache.xerces.stax.XMLEventFactoryImpl" />
	<method signature="javax.xml.stream.events.Characters createSpace(java.lang.String)" class="org.apache.xerces.stax.XMLEventFactoryImpl" />
	<method signature="javax.xml.stream.events.EntityReference createEntityReference(java.lang.String,javax.xml.stream.events.EntityDeclaration)" class="org.apache.xerces.stax.XMLEventFactoryImpl" />
	<method signature="javax.xml.stream.events.StartElement createStartElement(java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.stax.XMLEventFactoryImpl" />
	<method signature="javax.xml.stream.events.EndElement createEndElement(java.lang.String,java.lang.String,java.lang.String,java.util.Iterator)" class="org.apache.xerces.stax.XMLEventFactoryImpl" />
	<method signature="javax.xml.stream.events.StartDocument createStartDocument(java.lang.String,java.lang.String)" class="org.apache.xerces.stax.XMLEventFactoryImpl" />
	<class name="freemarker.template.TemplateScalarModel" />
	<method signature="java.lang.String getAsString()" class="freemarker.template.TemplateScalarModel" />
	<class name="org.apache.wml.WMLSelectElement" />
	<method signature="java.lang.String getName()" class="org.apache.wml.WMLSelectElement" />
	<method signature="void setValue(java.lang.String)" class="org.apache.wml.WMLSelectElement" />
	<method signature="java.lang.String getXmlLang()" class="org.apache.wml.WMLSelectElement" />
	<method signature="boolean getMultiple()" class="org.apache.wml.WMLSelectElement" />
	<method signature="void setTabIndex(int)" class="org.apache.wml.WMLSelectElement" />
	<method signature="void setMultiple(boolean)" class="org.apache.wml.WMLSelectElement" />
	<method signature="java.lang.String getTitle()" class="org.apache.wml.WMLSelectElement" />
	<method signature="java.lang.String getIValue()" class="org.apache.wml.WMLSelectElement" />
	<method signature="java.lang.String getValue()" class="org.apache.wml.WMLSelectElement" />
	<method signature="int getTabIndex()" class="org.apache.wml.WMLSelectElement" />
	<method signature="void setXmlLang(java.lang.String)" class="org.apache.wml.WMLSelectElement" />
	<method signature="void setName(java.lang.String)" class="org.apache.wml.WMLSelectElement" />
	<method signature="java.lang.String getIName()" class="org.apache.wml.WMLSelectElement" />
	<method signature="void setIName(java.lang.String)" class="org.apache.wml.WMLSelectElement" />
	<method signature="void setIValue(java.lang.String)" class="org.apache.wml.WMLSelectElement" />
	<method signature="void setTitle(java.lang.String)" class="org.apache.wml.WMLSelectElement" />
	<class name="com.google.zxing.BarcodeFormat" />
	<method signature="com.google.zxing.BarcodeFormat valueOf(java.lang.String)" class="com.google.zxing.BarcodeFormat" />
	<method signature="com.google.zxing.BarcodeFormat[] values()" class="com.google.zxing.BarcodeFormat" />
	<class name="org.jfree.chart.block.EntityBlockResult" />
	<method signature="org.jfree.chart.entity.EntityCollection getEntityCollection()" class="org.jfree.chart.block.EntityBlockResult" />
	<class name="org.jfree.chart.entity.TitleEntity" />
	<method signature="void &lt;init&gt;(java.awt.Shape,org.jfree.chart.title.Title,java.lang.String,java.lang.String)" class="org.jfree.chart.entity.TitleEntity" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.entity.TitleEntity" />
	<method signature="int hashCode()" class="org.jfree.chart.entity.TitleEntity" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.entity.TitleEntity" />
	<method signature="org.jfree.chart.title.Title getTitle()" class="org.jfree.chart.entity.TitleEntity" />
	<method signature="java.lang.String toString()" class="org.jfree.chart.entity.TitleEntity" />
	<method signature="void &lt;init&gt;(java.awt.Shape,org.jfree.chart.title.Title)" class="org.jfree.chart.entity.TitleEntity" />
	<method signature="void &lt;init&gt;(java.awt.Shape,org.jfree.chart.title.Title,java.lang.String)" class="org.jfree.chart.entity.TitleEntity" />
	<class name="org.jfree.chart.servlet.ServletUtilities" />
	<method signature="void sendTempFile(java.io.File,javax.servlet.http.HttpServletResponse)" class="org.jfree.chart.servlet.ServletUtilities" />
	<method signature="java.lang.String getTempOneTimeFilePrefix()" class="org.jfree.chart.servlet.ServletUtilities" />
	<method signature="java.lang.String saveChartAsPNG(org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo,javax.servlet.http.HttpSession)" class="org.jfree.chart.servlet.ServletUtilities" />
	<method signature="java.lang.String saveChartAsPNG(org.jfree.chart.JFreeChart,int,int,javax.servlet.http.HttpSession)" class="org.jfree.chart.servlet.ServletUtilities" />
	<method signature="java.lang.String saveChartAsJPEG(org.jfree.chart.JFreeChart,int,int,javax.servlet.http.HttpSession)" class="org.jfree.chart.servlet.ServletUtilities" />
	<method signature="void sendTempFile(java.io.File,javax.servlet.http.HttpServletResponse,java.lang.String)" class="org.jfree.chart.servlet.ServletUtilities" />
	<method signature="java.lang.String getTempFilePrefix()" class="org.jfree.chart.servlet.ServletUtilities" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.servlet.ServletUtilities" />
	<method signature="void sendTempFile(java.lang.String,javax.servlet.http.HttpServletResponse)" class="org.jfree.chart.servlet.ServletUtilities" />
	<method signature="void setTempFilePrefix(java.lang.String)" class="org.jfree.chart.servlet.ServletUtilities" />
	<method signature="void setTempOneTimeFilePrefix(java.lang.String)" class="org.jfree.chart.servlet.ServletUtilities" />
	<method signature="java.lang.String saveChartAsJPEG(org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo,javax.servlet.http.HttpSession)" class="org.jfree.chart.servlet.ServletUtilities" />
	<method signature="java.lang.String searchReplace(java.lang.String,java.lang.String,java.lang.String)" class="org.jfree.chart.servlet.ServletUtilities" />
	<class name="org.jfree.base.log.LogConfiguration" />
	<method signature="void setLogTarget(java.lang.String)" class="org.jfree.base.log.LogConfiguration" />
	<method signature="void setLogLevel(java.lang.String)" class="org.jfree.base.log.LogConfiguration" />
	<method signature="java.lang.String getLogLevel()" class="org.jfree.base.log.LogConfiguration" />
	<method signature="void setDisableLogging(boolean)" class="org.jfree.base.log.LogConfiguration" />
	<method signature="java.lang.String getLogTarget()" class="org.jfree.base.log.LogConfiguration" />
	<method signature="boolean isDisableLogging()" class="org.jfree.base.log.LogConfiguration" />
	<class name="org.w3c.dom.ls.LSLoadEvent" />
	<method signature="org.w3c.dom.ls.LSInput getInput()" class="org.w3c.dom.ls.LSLoadEvent" />
	<method signature="org.w3c.dom.Document getNewDocument()" class="org.w3c.dom.ls.LSLoadEvent" />
	<class name="freemarker.debug.impl.RmiDebuggerImpl_Stub" />
	<method signature="void addBreakpoint(freemarker.debug.Breakpoint)" class="freemarker.debug.impl.RmiDebuggerImpl_Stub" />
	<method signature="java.lang.Object addDebuggerListener(freemarker.debug.DebuggerListener)" class="freemarker.debug.impl.RmiDebuggerImpl_Stub" />
	<method signature="void removeBreakpoints()" class="freemarker.debug.impl.RmiDebuggerImpl_Stub" />
	<method signature="java.util.Collection getSuspendedEnvironments()" class="freemarker.debug.impl.RmiDebuggerImpl_Stub" />
	<method signature="void &lt;init&gt;(java.rmi.server.RemoteRef)" class="freemarker.debug.impl.RmiDebuggerImpl_Stub" />
	<method signature="java.util.List getBreakpoints()" class="freemarker.debug.impl.RmiDebuggerImpl_Stub" />
	<method signature="void removeBreakpoint(freemarker.debug.Breakpoint)" class="freemarker.debug.impl.RmiDebuggerImpl_Stub" />
	<method signature="void removeDebuggerListener(java.lang.Object)" class="freemarker.debug.impl.RmiDebuggerImpl_Stub" />
	<method signature="java.util.List getBreakpoints(java.lang.String)" class="freemarker.debug.impl.RmiDebuggerImpl_Stub" />
	<method signature="void removeBreakpoints(java.lang.String)" class="freemarker.debug.impl.RmiDebuggerImpl_Stub" />
	<class name="org.jfree.chart.renderer.xy.XYDifferenceRenderer" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)" class="org.jfree.chart.renderer.xy.XYDifferenceRenderer" />
	<method signature="java.awt.Paint getNegativePaint()" class="org.jfree.chart.renderer.xy.XYDifferenceRenderer" />
	<method signature="int getPassCount()" class="org.jfree.chart.renderer.xy.XYDifferenceRenderer" />
	<method signature="void setRoundXCoordinates(boolean)" class="org.jfree.chart.renderer.xy.XYDifferenceRenderer" />
	<method signature="boolean getRoundXCoordinates()" class="org.jfree.chart.renderer.xy.XYDifferenceRenderer" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.renderer.xy.XYDifferenceRenderer" />
	<method signature="org.jfree.chart.LegendItem getLegendItem(int,int)" class="org.jfree.chart.renderer.xy.XYDifferenceRenderer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.xy.XYDifferenceRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.xy.XYDifferenceRenderer" />
	<method signature="java.awt.Paint getPositivePaint()" class="org.jfree.chart.renderer.xy.XYDifferenceRenderer" />
	<method signature="void &lt;init&gt;(java.awt.Paint,java.awt.Paint,boolean)" class="org.jfree.chart.renderer.xy.XYDifferenceRenderer" />
	<method signature="java.awt.Shape getLegendLine()" class="org.jfree.chart.renderer.xy.XYDifferenceRenderer" />
	<method signature="org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.renderer.xy.XYDifferenceRenderer" />
	<method signature="void setShapesVisible(boolean)" class="org.jfree.chart.renderer.xy.XYDifferenceRenderer" />
	<method signature="void setPositivePaint(java.awt.Paint)" class="org.jfree.chart.renderer.xy.XYDifferenceRenderer" />
	<method signature="void setNegativePaint(java.awt.Paint)" class="org.jfree.chart.renderer.xy.XYDifferenceRenderer" />
	<method signature="boolean getShapesVisible()" class="org.jfree.chart.renderer.xy.XYDifferenceRenderer" />
	<method signature="void setLegendLine(java.awt.Shape)" class="org.jfree.chart.renderer.xy.XYDifferenceRenderer" />
	<class name="org.w3c.dom.html.HTMLTableColElement" />
	<method signature="void setAlign(java.lang.String)" class="org.w3c.dom.html.HTMLTableColElement" />
	<method signature="java.lang.String getCh()" class="org.w3c.dom.html.HTMLTableColElement" />
	<method signature="void setSpan(int)" class="org.w3c.dom.html.HTMLTableColElement" />
	<method signature="void setVAlign(java.lang.String)" class="org.w3c.dom.html.HTMLTableColElement" />
	<method signature="java.lang.String getWidth()" class="org.w3c.dom.html.HTMLTableColElement" />
	<method signature="java.lang.String getAlign()" class="org.w3c.dom.html.HTMLTableColElement" />
	<method signature="void setChOff(java.lang.String)" class="org.w3c.dom.html.HTMLTableColElement" />
	<method signature="int getSpan()" class="org.w3c.dom.html.HTMLTableColElement" />
	<method signature="void setCh(java.lang.String)" class="org.w3c.dom.html.HTMLTableColElement" />
	<method signature="java.lang.String getChOff()" class="org.w3c.dom.html.HTMLTableColElement" />
	<method signature="void setWidth(java.lang.String)" class="org.w3c.dom.html.HTMLTableColElement" />
	<method signature="java.lang.String getVAlign()" class="org.w3c.dom.html.HTMLTableColElement" />
	<class name="org.apache.html.dom.HTMLFormElementImpl" />
	<method signature="java.lang.String getName()" class="org.apache.html.dom.HTMLFormElementImpl" />
	<method signature="org.w3c.dom.NodeList getChildNodes()" class="org.apache.html.dom.HTMLFormElementImpl" />
	<method signature="void reset()" class="org.apache.html.dom.HTMLFormElementImpl" />
	<method signature="org.w3c.dom.Node cloneNode(boolean)" class="org.apache.html.dom.HTMLFormElementImpl" />
	<method signature="void setMethod(java.lang.String)" class="org.apache.html.dom.HTMLFormElementImpl" />
	<method signature="java.lang.String getAction()" class="org.apache.html.dom.HTMLFormElementImpl" />
	<method signature="java.lang.String getMethod()" class="org.apache.html.dom.HTMLFormElementImpl" />
	<method signature="void setAcceptCharset(java.lang.String)" class="org.apache.html.dom.HTMLFormElementImpl" />
	<method signature="int getLength()" class="org.apache.html.dom.HTMLFormElementImpl" />
	<method signature="java.lang.String getAcceptCharset()" class="org.apache.html.dom.HTMLFormElementImpl" />
	<method signature="void setTarget(java.lang.String)" class="org.apache.html.dom.HTMLFormElementImpl" />
	<method signature="java.lang.String getTarget()" class="org.apache.html.dom.HTMLFormElementImpl" />
	<method signature="void setAction(java.lang.String)" class="org.apache.html.dom.HTMLFormElementImpl" />
	<method signature="void setName(java.lang.String)" class="org.apache.html.dom.HTMLFormElementImpl" />
	<method signature="void setEnctype(java.lang.String)" class="org.apache.html.dom.HTMLFormElementImpl" />
	<method signature="org.w3c.dom.html.HTMLCollection getElements()" class="org.apache.html.dom.HTMLFormElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLFormElementImpl" />
	<method signature="java.lang.String getEnctype()" class="org.apache.html.dom.HTMLFormElementImpl" />
	<method signature="void submit()" class="org.apache.html.dom.HTMLFormElementImpl" />
	<class name="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="void &lt;init&gt;(org.apache.commons.lang3.text.StrLookup,org.apache.commons.lang3.text.StrMatcher,org.apache.commons.lang3.text.StrMatcher,char)" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="java.lang.String replace(org.apache.commons.lang3.text.StrBuilder,int,int)" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="boolean replaceIn(org.apache.commons.lang3.text.StrBuilder)" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="org.apache.commons.lang3.text.StrSubstitutor setVariableSuffix(java.lang.String)" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="org.apache.commons.lang3.text.StrSubstitutor setVariablePrefix(java.lang.String)" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="void setVariableResolver(org.apache.commons.lang3.text.StrLookup)" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="void &lt;init&gt;(java.util.Map,java.lang.String,java.lang.String)" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="void &lt;init&gt;(org.apache.commons.lang3.text.StrLookup)" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="org.apache.commons.lang3.text.StrMatcher getVariablePrefixMatcher()" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="org.apache.commons.lang3.text.StrSubstitutor setVariablePrefix(char)" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="org.apache.commons.lang3.text.StrSubstitutor setVariableSuffix(char)" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="org.apache.commons.lang3.text.StrMatcher getValueDelimiterMatcher()" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="org.apache.commons.lang3.text.StrSubstitutor setVariableSuffixMatcher(org.apache.commons.lang3.text.StrMatcher)" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="void setEscapeChar(char)" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="org.apache.commons.lang3.text.StrSubstitutor setValueDelimiterMatcher(org.apache.commons.lang3.text.StrMatcher)" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="org.apache.commons.lang3.text.StrSubstitutor setVariablePrefixMatcher(org.apache.commons.lang3.text.StrMatcher)" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="org.apache.commons.lang3.text.StrMatcher getVariableSuffixMatcher()" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="void &lt;init&gt;(java.util.Map,java.lang.String,java.lang.String,char,java.lang.String)" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="java.lang.String replace(char[],int,int)" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="boolean replaceIn(org.apache.commons.lang3.text.StrBuilder,int,int)" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="java.lang.String replace(java.lang.Object)" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="java.lang.String replaceSystemProperties(java.lang.Object)" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="void &lt;init&gt;(java.util.Map)" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="java.lang.String replace(java.lang.StringBuffer,int,int)" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="java.lang.String replace(java.lang.Object,java.util.Map,java.lang.String,java.lang.String)" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="java.lang.String replace(org.apache.commons.lang3.text.StrBuilder)" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="java.lang.String replace(java.lang.Object,java.util.Properties)" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="char getEscapeChar()" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="void &lt;init&gt;(java.util.Map,java.lang.String,java.lang.String,char)" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="boolean replaceIn(java.lang.StringBuilder)" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="java.lang.String replace(char[])" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="org.apache.commons.lang3.text.StrLookup getVariableResolver()" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="void setEnableSubstitutionInVariables(boolean)" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="void &lt;init&gt;(org.apache.commons.lang3.text.StrLookup,org.apache.commons.lang3.text.StrMatcher,org.apache.commons.lang3.text.StrMatcher,char,org.apache.commons.lang3.text.StrMatcher)" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="void &lt;init&gt;(org.apache.commons.lang3.text.StrLookup,java.lang.String,java.lang.String,char)" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="java.lang.String replace(java.lang.StringBuffer)" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="boolean replaceIn(java.lang.StringBuffer,int,int)" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="boolean replaceIn(java.lang.StringBuilder,int,int)" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="org.apache.commons.lang3.text.StrSubstitutor setValueDelimiter(java.lang.String)" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="java.lang.String replace(java.lang.Object,java.util.Map)" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="java.lang.String replace(java.lang.String,int,int)" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="void &lt;init&gt;(org.apache.commons.lang3.text.StrLookup,java.lang.String,java.lang.String,char,java.lang.String)" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="java.lang.String replace(java.lang.CharSequence)" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="java.lang.String replace(java.lang.CharSequence,int,int)" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="boolean replaceIn(java.lang.StringBuffer)" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="org.apache.commons.lang3.text.StrSubstitutor setValueDelimiter(char)" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="boolean isEnableSubstitutionInVariables()" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<method signature="java.lang.String replace(java.lang.String)" class="org.apache.commons.lang3.text.StrSubstitutor" />
	<class name="org.apache.html.dom.HTMLFieldSetElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLFieldSetElementImpl" />
	<class name="org.apache.xerces.impl.xs.util.StringListImpl" />
	<method signature="int size()" class="org.apache.xerces.impl.xs.util.StringListImpl" />
	<method signature="java.lang.String item(int)" class="org.apache.xerces.impl.xs.util.StringListImpl" />
	<method signature="java.lang.Object get(int)" class="org.apache.xerces.impl.xs.util.StringListImpl" />
	<method signature="void &lt;init&gt;(java.lang.String[],int)" class="org.apache.xerces.impl.xs.util.StringListImpl" />
	<method signature="java.lang.Object[] toArray(java.lang.Object[])" class="org.apache.xerces.impl.xs.util.StringListImpl" />
	<method signature="boolean contains(java.lang.String)" class="org.apache.xerces.impl.xs.util.StringListImpl" />
	<method signature="void &lt;init&gt;(java.util.Vector)" class="org.apache.xerces.impl.xs.util.StringListImpl" />
	<method signature="int getLength()" class="org.apache.xerces.impl.xs.util.StringListImpl" />
	<method signature="java.lang.Object[] toArray()" class="org.apache.xerces.impl.xs.util.StringListImpl" />
	<class name="org.apache.xerces.xs.StringList" />
	<method signature="java.lang.String item(int)" class="org.apache.xerces.xs.StringList" />
	<method signature="boolean contains(java.lang.String)" class="org.apache.xerces.xs.StringList" />
	<method signature="int getLength()" class="org.apache.xerces.xs.StringList" />
	<class name="tourma.views.report.JdgGlobal" />
	<method signature="void &lt;init&gt;(java.awt.Frame,boolean,int,tourma.data.Tournament,tourma.tableModel.MjtRanking,java.util.HashMap,java.util.HashMap,boolean,boolean)" class="tourma.views.report.JdgGlobal" />
	<class name="org.apache.xerces.util.URI$MalformedURIException" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.util.URI$MalformedURIException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.apache.xerces.util.URI$MalformedURIException" />
	<class name="org.apache.xerces.impl.dv.xs.AnySimpleDV" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.xs.AnySimpleDV" />
	<method signature="java.lang.Object getActualValue(java.lang.String,org.apache.xerces.impl.dv.ValidationContext)" class="org.apache.xerces.impl.dv.xs.AnySimpleDV" />
	<method signature="short getAllowedFacets()" class="org.apache.xerces.impl.dv.xs.AnySimpleDV" />
	<class name="org.apache.xerces.impl.dv.dtd.ENTITYDatatypeValidator" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.dtd.ENTITYDatatypeValidator" />
	<method signature="void validate(java.lang.String,org.apache.xerces.impl.dv.ValidationContext)" class="org.apache.xerces.impl.dv.dtd.ENTITYDatatypeValidator" />
	<class name="freemarker.template.TemplateSequenceModel" />
	<method signature="int size()" class="freemarker.template.TemplateSequenceModel" />
	<method signature="freemarker.template.TemplateModel get(int)" class="freemarker.template.TemplateSequenceModel" />
	<class name="com.google.zxing.FormatException" />
	<method signature="com.google.zxing.FormatException getFormatInstance()" class="com.google.zxing.FormatException" />
	<class name="org.apache.xerces.dom.DocumentFragmentImpl" />
	<method signature="short getNodeType()" class="org.apache.xerces.dom.DocumentFragmentImpl" />
	<method signature="void &lt;init&gt;(org.apache.xerces.dom.CoreDocumentImpl)" class="org.apache.xerces.dom.DocumentFragmentImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.dom.DocumentFragmentImpl" />
	<method signature="java.lang.String getNodeName()" class="org.apache.xerces.dom.DocumentFragmentImpl" />
	<method signature="void normalize()" class="org.apache.xerces.dom.DocumentFragmentImpl" />
	<class name="freemarker.debug.impl.RmiDebuggedEnvironmentImpl_Stub" />
	<method signature="freemarker.debug.DebugModel get(int)" class="freemarker.debug.impl.RmiDebuggedEnvironmentImpl_Stub" />
	<method signature="int size()" class="freemarker.debug.impl.RmiDebuggedEnvironmentImpl_Stub" />
	<method signature="freemarker.debug.DebugModel[] get(int,int)" class="freemarker.debug.impl.RmiDebuggedEnvironmentImpl_Stub" />
	<method signature="java.lang.String getAsString()" class="freemarker.debug.impl.RmiDebuggedEnvironmentImpl_Stub" />
	<method signature="boolean getAsBoolean()" class="freemarker.debug.impl.RmiDebuggedEnvironmentImpl_Stub" />
	<method signature="java.lang.String[] keys()" class="freemarker.debug.impl.RmiDebuggedEnvironmentImpl_Stub" />
	<method signature="freemarker.debug.DebugModel get(java.lang.String)" class="freemarker.debug.impl.RmiDebuggedEnvironmentImpl_Stub" />
	<method signature="void stop()" class="freemarker.debug.impl.RmiDebuggedEnvironmentImpl_Stub" />
	<method signature="int getModelTypes()" class="freemarker.debug.impl.RmiDebuggedEnvironmentImpl_Stub" />
	<method signature="freemarker.debug.DebugModel[] get(java.lang.String[])" class="freemarker.debug.impl.RmiDebuggedEnvironmentImpl_Stub" />
	<method signature="java.lang.Number getAsNumber()" class="freemarker.debug.impl.RmiDebuggedEnvironmentImpl_Stub" />
	<method signature="void &lt;init&gt;(java.rmi.server.RemoteRef)" class="freemarker.debug.impl.RmiDebuggedEnvironmentImpl_Stub" />
	<method signature="void resume()" class="freemarker.debug.impl.RmiDebuggedEnvironmentImpl_Stub" />
	<method signature="java.util.Date getAsDate()" class="freemarker.debug.impl.RmiDebuggedEnvironmentImpl_Stub" />
	<method signature="freemarker.debug.DebugModel[] getCollection()" class="freemarker.debug.impl.RmiDebuggedEnvironmentImpl_Stub" />
	<method signature="long getId()" class="freemarker.debug.impl.RmiDebuggedEnvironmentImpl_Stub" />
	<method signature="int getDateType()" class="freemarker.debug.impl.RmiDebuggedEnvironmentImpl_Stub" />
	<class name="org.w3c.dom.html.HTMLLinkElement" />
	<method signature="java.lang.String getMedia()" class="org.w3c.dom.html.HTMLLinkElement" />
	<method signature="java.lang.String getHref()" class="org.w3c.dom.html.HTMLLinkElement" />
	<method signature="void setRel(java.lang.String)" class="org.w3c.dom.html.HTMLLinkElement" />
	<method signature="java.lang.String getRev()" class="org.w3c.dom.html.HTMLLinkElement" />
	<method signature="java.lang.String getHreflang()" class="org.w3c.dom.html.HTMLLinkElement" />
	<method signature="java.lang.String getRel()" class="org.w3c.dom.html.HTMLLinkElement" />
	<method signature="boolean getDisabled()" class="org.w3c.dom.html.HTMLLinkElement" />
	<method signature="java.lang.String getCharset()" class="org.w3c.dom.html.HTMLLinkElement" />
	<method signature="void setMedia(java.lang.String)" class="org.w3c.dom.html.HTMLLinkElement" />
	<method signature="void setTarget(java.lang.String)" class="org.w3c.dom.html.HTMLLinkElement" />
	<method signature="void setDisabled(boolean)" class="org.w3c.dom.html.HTMLLinkElement" />
	<method signature="void setHref(java.lang.String)" class="org.w3c.dom.html.HTMLLinkElement" />
	<method signature="java.lang.String getTarget()" class="org.w3c.dom.html.HTMLLinkElement" />
	<method signature="void setHreflang(java.lang.String)" class="org.w3c.dom.html.HTMLLinkElement" />
	<method signature="void setRev(java.lang.String)" class="org.w3c.dom.html.HTMLLinkElement" />
	<method signature="void setCharset(java.lang.String)" class="org.w3c.dom.html.HTMLLinkElement" />
	<method signature="java.lang.String getType()" class="org.w3c.dom.html.HTMLLinkElement" />
	<method signature="void setType(java.lang.String)" class="org.w3c.dom.html.HTMLLinkElement" />
	<class name="org.jfree.util.AttributedStringUtilities" />
	<method signature="boolean equal(java.text.AttributedString,java.text.AttributedString)" class="org.jfree.util.AttributedStringUtilities" />
	<class name="javax.xml.stream.events.EntityReference" />
	<method signature="java.lang.String getName()" class="javax.xml.stream.events.EntityReference" />
	<method signature="javax.xml.stream.events.EntityDeclaration getDeclaration()" class="javax.xml.stream.events.EntityReference" />
	<class name="org.apache.xerces.impl.xs.XSNotationDecl" />
	<method signature="java.lang.String getSystemId()" class="org.apache.xerces.impl.xs.XSNotationDecl" />
	<method signature="java.lang.String getName()" class="org.apache.xerces.impl.xs.XSNotationDecl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xs.XSNotationDecl" />
	<method signature="java.lang.String getNamespace()" class="org.apache.xerces.impl.xs.XSNotationDecl" />
	<method signature="org.apache.xerces.xs.XSAnnotation getAnnotation()" class="org.apache.xerces.impl.xs.XSNotationDecl" />
	<method signature="org.apache.xerces.xs.XSObjectList getAnnotations()" class="org.apache.xerces.impl.xs.XSNotationDecl" />
	<method signature="short getType()" class="org.apache.xerces.impl.xs.XSNotationDecl" />
	<method signature="java.lang.String getPublicId()" class="org.apache.xerces.impl.xs.XSNotationDecl" />
	<method signature="org.apache.xerces.xs.XSNamespaceItem getNamespaceItem()" class="org.apache.xerces.impl.xs.XSNotationDecl" />
	<class name="org.jfree.ui.GradientPaintTransformType" />
	<method signature="int hashCode()" class="org.jfree.ui.GradientPaintTransformType" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.ui.GradientPaintTransformType" />
	<method signature="java.lang.String toString()" class="org.jfree.ui.GradientPaintTransformType" />
	<class name="org.jdom2.xpath.XPathFactory" />
	<method signature="org.jdom2.xpath.XPathFactory instance()" class="org.jdom2.xpath.XPathFactory" />
	<method signature="org.jdom2.xpath.XPathExpression compile(java.lang.String,org.jdom2.filter.Filter,java.util.Map,java.util.Collection)" class="org.jdom2.xpath.XPathFactory" />
	<method signature="org.jdom2.xpath.XPathFactory newInstance(java.lang.String)" class="org.jdom2.xpath.XPathFactory" />
	<method signature="void &lt;init&gt;()" class="org.jdom2.xpath.XPathFactory" />
	<method signature="org.jdom2.xpath.XPathExpression compile(java.lang.String)" class="org.jdom2.xpath.XPathFactory" />
	<method signature="org.jdom2.xpath.XPathExpression compile(java.lang.String,org.jdom2.filter.Filter,java.util.Map,org.jdom2.Namespace[])" class="org.jdom2.xpath.XPathFactory" />
	<method signature="org.jdom2.xpath.XPathExpression compile(java.lang.String,org.jdom2.filter.Filter)" class="org.jdom2.xpath.XPathFactory" />
	<class name="org.apache.xerces.dom.NodeIteratorImpl" />
	<method signature="void detach()" class="org.apache.xerces.dom.NodeIteratorImpl" />
	<method signature="void &lt;init&gt;(org.apache.xerces.dom.DocumentImpl,org.w3c.dom.Node,int,org.w3c.dom.traversal.NodeFilter,boolean)" class="org.apache.xerces.dom.NodeIteratorImpl" />
	<method signature="boolean getExpandEntityReferences()" class="org.apache.xerces.dom.NodeIteratorImpl" />
	<method signature="org.w3c.dom.traversal.NodeFilter getFilter()" class="org.apache.xerces.dom.NodeIteratorImpl" />
	<method signature="int getWhatToShow()" class="org.apache.xerces.dom.NodeIteratorImpl" />
	<method signature="org.w3c.dom.Node nextNode()" class="org.apache.xerces.dom.NodeIteratorImpl" />
	<method signature="org.w3c.dom.Node getRoot()" class="org.apache.xerces.dom.NodeIteratorImpl" />
	<method signature="void removeNode(org.w3c.dom.Node)" class="org.apache.xerces.dom.NodeIteratorImpl" />
	<method signature="org.w3c.dom.Node previousNode()" class="org.apache.xerces.dom.NodeIteratorImpl" />
	<class name="org.apache.xerces.parsers.XMLGrammarPreparser" />
	<method signature="void setEntityResolver(org.apache.xerces.xni.parser.XMLEntityResolver)" class="org.apache.xerces.parsers.XMLGrammarPreparser" />
	<method signature="void setLocale(java.util.Locale)" class="org.apache.xerces.parsers.XMLGrammarPreparser" />
	<method signature="java.util.Locale getLocale()" class="org.apache.xerces.parsers.XMLGrammarPreparser" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="org.apache.xerces.parsers.XMLGrammarPreparser" />
	<method signature="org.apache.xerces.xni.grammars.XMLGrammarLoader getLoader(java.lang.String)" class="org.apache.xerces.parsers.XMLGrammarPreparser" />
	<method signature="void setGrammarPool(org.apache.xerces.xni.grammars.XMLGrammarPool)" class="org.apache.xerces.parsers.XMLGrammarPreparser" />
	<method signature="org.apache.xerces.xni.parser.XMLErrorHandler getErrorHandler()" class="org.apache.xerces.parsers.XMLGrammarPreparser" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable)" class="org.apache.xerces.parsers.XMLGrammarPreparser" />
	<method signature="void setErrorHandler(org.apache.xerces.xni.parser.XMLErrorHandler)" class="org.apache.xerces.parsers.XMLGrammarPreparser" />
	<method signature="org.apache.xerces.xni.grammars.XMLGrammarPool getGrammarPool()" class="org.apache.xerces.parsers.XMLGrammarPreparser" />
	<method signature="java.lang.Object getProperty(java.lang.String,java.lang.String)" class="org.apache.xerces.parsers.XMLGrammarPreparser" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.parsers.XMLGrammarPreparser" />
	<method signature="org.apache.xerces.xni.grammars.Grammar preparseGrammar(java.lang.String,org.apache.xerces.xni.parser.XMLInputSource)" class="org.apache.xerces.parsers.XMLGrammarPreparser" />
	<method signature="boolean getFeature(java.lang.String,java.lang.String)" class="org.apache.xerces.parsers.XMLGrammarPreparser" />
	<method signature="boolean registerPreparser(java.lang.String,org.apache.xerces.xni.grammars.XMLGrammarLoader)" class="org.apache.xerces.parsers.XMLGrammarPreparser" />
	<method signature="org.apache.xerces.xni.parser.XMLEntityResolver getEntityResolver()" class="org.apache.xerces.parsers.XMLGrammarPreparser" />
	<method signature="void setFeature(java.lang.String,boolean)" class="org.apache.xerces.parsers.XMLGrammarPreparser" />
	<class name="com.google.zxing.client.result.BizcardResultParser" />
	<method signature="com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result)" class="com.google.zxing.client.result.BizcardResultParser" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.client.result.BizcardResultParser" />
	<method signature="com.google.zxing.client.result.AddressBookParsedResult parse(com.google.zxing.Result)" class="com.google.zxing.client.result.BizcardResultParser" />
	<class name="org.jfree.chart.annotations.XYDrawableAnnotation" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.annotations.XYDrawableAnnotation" />
	<method signature="void &lt;init&gt;(double,double,double,double,org.jfree.ui.Drawable)" class="org.jfree.chart.annotations.XYDrawableAnnotation" />
	<method signature="int hashCode()" class="org.jfree.chart.annotations.XYDrawableAnnotation" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.annotations.XYDrawableAnnotation" />
	<method signature="void &lt;init&gt;(double,double,double,double,double,org.jfree.ui.Drawable)" class="org.jfree.chart.annotations.XYDrawableAnnotation" />
	<method signature="void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.annotations.XYDrawableAnnotation" />
	<class name="javax.xml.parsers.FactoryConfigurationError" />
	<method signature="java.lang.Exception getException()" class="javax.xml.parsers.FactoryConfigurationError" />
	<method signature="void &lt;init&gt;(java.lang.Exception)" class="javax.xml.parsers.FactoryConfigurationError" />
	<method signature="void &lt;init&gt;(java.lang.Exception,java.lang.String)" class="javax.xml.parsers.FactoryConfigurationError" />
	<method signature="void &lt;init&gt;()" class="javax.xml.parsers.FactoryConfigurationError" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="javax.xml.parsers.FactoryConfigurationError" />
	<method signature="java.lang.String getMessage()" class="javax.xml.parsers.FactoryConfigurationError" />
	<class name="org.jfree.text.G2TextMeasurer" />
	<method signature="float getStringWidth(java.lang.String,int,int)" class="org.jfree.text.G2TextMeasurer" />
	<method signature="void &lt;init&gt;(java.awt.Graphics2D)" class="org.jfree.text.G2TextMeasurer" />
	<class name="com.google.zxing.common.GridSampler" />
	<method signature="com.google.zxing.common.GridSampler getInstance()" class="com.google.zxing.common.GridSampler" />
	<method signature="com.google.zxing.common.BitMatrix sampleGrid(com.google.zxing.common.BitMatrix,int,int,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float)" class="com.google.zxing.common.GridSampler" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.common.GridSampler" />
	<method signature="void setGridSampler(com.google.zxing.common.GridSampler)" class="com.google.zxing.common.GridSampler" />
	<method signature="com.google.zxing.common.BitMatrix sampleGrid(com.google.zxing.common.BitMatrix,int,int,com.google.zxing.common.PerspectiveTransform)" class="com.google.zxing.common.GridSampler" />
	<class name="org.jfree.chart.plot.dial.DialPointer$Pointer" />
	<method signature="void setWidthRadius(double)" class="org.jfree.chart.plot.dial.DialPointer$Pointer" />
	<method signature="int hashCode()" class="org.jfree.chart.plot.dial.DialPointer$Pointer" />
	<method signature="void setFillPaint(java.awt.Paint)" class="org.jfree.chart.plot.dial.DialPointer$Pointer" />
	<method signature="void setOutlinePaint(java.awt.Paint)" class="org.jfree.chart.plot.dial.DialPointer$Pointer" />
	<method signature="double getWidthRadius()" class="org.jfree.chart.plot.dial.DialPointer$Pointer" />
	<method signature="void &lt;init&gt;(int)" class="org.jfree.chart.plot.dial.DialPointer$Pointer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.plot.dial.DialPointer$Pointer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.plot.dial.DialPointer$Pointer" />
	<method signature="java.awt.Paint getOutlinePaint()" class="org.jfree.chart.plot.dial.DialPointer$Pointer" />
	<method signature="java.awt.Paint getFillPaint()" class="org.jfree.chart.plot.dial.DialPointer$Pointer" />
	<method signature="void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)" class="org.jfree.chart.plot.dial.DialPointer$Pointer" />
	<class name="org.jfree.data.time.Second" />
	<method signature="int compareTo(java.lang.Object)" class="org.jfree.data.time.Second" />
	<method signature="int hashCode()" class="org.jfree.data.time.Second" />
	<method signature="void &lt;init&gt;(java.util.Date,java.util.TimeZone)" class="org.jfree.data.time.Second" />
	<method signature="org.jfree.data.time.RegularTimePeriod previous()" class="org.jfree.data.time.Second" />
	<method signature="void &lt;init&gt;(int,int,int,int,int,int)" class="org.jfree.data.time.Second" />
	<method signature="long getLastMillisecond()" class="org.jfree.data.time.Second" />
	<method signature="org.jfree.data.time.RegularTimePeriod next()" class="org.jfree.data.time.Second" />
	<method signature="long getLastMillisecond(java.util.Calendar)" class="org.jfree.data.time.Second" />
	<method signature="int getSecond()" class="org.jfree.data.time.Second" />
	<method signature="org.jfree.data.time.Second parseSecond(java.lang.String)" class="org.jfree.data.time.Second" />
	<method signature="void &lt;init&gt;(java.util.Date)" class="org.jfree.data.time.Second" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.time.Second" />
	<method signature="void &lt;init&gt;(int,org.jfree.data.time.Minute)" class="org.jfree.data.time.Second" />
	<method signature="org.jfree.data.time.Minute getMinute()" class="org.jfree.data.time.Second" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.time.Second" />
	<method signature="long getFirstMillisecond()" class="org.jfree.data.time.Second" />
	<method signature="void peg(java.util.Calendar)" class="org.jfree.data.time.Second" />
	<method signature="void &lt;init&gt;(java.util.Date,java.util.TimeZone,java.util.Locale)" class="org.jfree.data.time.Second" />
	<method signature="long getFirstMillisecond(java.util.Calendar)" class="org.jfree.data.time.Second" />
	<method signature="long getSerialIndex()" class="org.jfree.data.time.Second" />
	<class name="com.google.zxing.DecodeHintType" />
	<method signature="com.google.zxing.DecodeHintType valueOf(java.lang.String)" class="com.google.zxing.DecodeHintType" />
	<method signature="com.google.zxing.DecodeHintType[] values()" class="com.google.zxing.DecodeHintType" />
	<class name="javax.annotation.Tainted" />
	<class name="org.jfree.ui.NumberCellRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.ui.NumberCellRenderer" />
	<method signature="java.awt.Component getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)" class="org.jfree.ui.NumberCellRenderer" />
	<class name="org.jfree.chart.block.LengthConstraintType" />
	<method signature="int hashCode()" class="org.jfree.chart.block.LengthConstraintType" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.block.LengthConstraintType" />
	<method signature="java.lang.String toString()" class="org.jfree.chart.block.LengthConstraintType" />
	<class name="org.jfree.chart.renderer.xy.XYAreaRenderer2" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)" class="org.jfree.chart.renderer.xy.XYAreaRenderer2" />
	<method signature="boolean isOutline()" class="org.jfree.chart.renderer.xy.XYAreaRenderer2" />
	<method signature="void setLegendArea(java.awt.Shape)" class="org.jfree.chart.renderer.xy.XYAreaRenderer2" />
	<method signature="void &lt;init&gt;(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)" class="org.jfree.chart.renderer.xy.XYAreaRenderer2" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.renderer.xy.XYAreaRenderer2" />
	<method signature="org.jfree.chart.LegendItem getLegendItem(int,int)" class="org.jfree.chart.renderer.xy.XYAreaRenderer2" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.xy.XYAreaRenderer2" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.xy.XYAreaRenderer2" />
	<method signature="boolean getPlotLines()" class="org.jfree.chart.renderer.xy.XYAreaRenderer2" />
	<method signature="void setOutline(boolean)" class="org.jfree.chart.renderer.xy.XYAreaRenderer2" />
	<method signature="java.awt.Shape getLegendArea()" class="org.jfree.chart.renderer.xy.XYAreaRenderer2" />
	<class name="org.jfree.data.general.DefaultHeatMapDataset" />
	<method signature="int getXSampleCount()" class="org.jfree.data.general.DefaultHeatMapDataset" />
	<method signature="java.lang.Number getZ(int,int)" class="org.jfree.data.general.DefaultHeatMapDataset" />
	<method signature="double getMaximumXValue()" class="org.jfree.data.general.DefaultHeatMapDataset" />
	<method signature="double getMinimumYValue()" class="org.jfree.data.general.DefaultHeatMapDataset" />
	<method signature="void setZValue(int,int,double)" class="org.jfree.data.general.DefaultHeatMapDataset" />
	<method signature="double getXValue(int)" class="org.jfree.data.general.DefaultHeatMapDataset" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.general.DefaultHeatMapDataset" />
	<method signature="double getMinimumXValue()" class="org.jfree.data.general.DefaultHeatMapDataset" />
	<method signature="double getYValue(int)" class="org.jfree.data.general.DefaultHeatMapDataset" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.general.DefaultHeatMapDataset" />
	<method signature="double getZValue(int,int)" class="org.jfree.data.general.DefaultHeatMapDataset" />
	<method signature="double getMaximumYValue()" class="org.jfree.data.general.DefaultHeatMapDataset" />
	<method signature="void &lt;init&gt;(int,int,double,double,double,double)" class="org.jfree.data.general.DefaultHeatMapDataset" />
	<method signature="void setZValue(int,int,double,boolean)" class="org.jfree.data.general.DefaultHeatMapDataset" />
	<method signature="int getYSampleCount()" class="org.jfree.data.general.DefaultHeatMapDataset" />
	<class name="org.apache.xerces.xinclude.XIncludeMessageFormatter" />
	<method signature="java.lang.String formatMessage(java.util.Locale,java.lang.String,java.lang.Object[])" class="org.apache.xerces.xinclude.XIncludeMessageFormatter" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.xinclude.XIncludeMessageFormatter" />
	<class name="freemarker.ext.xml.Navigator$XPathEx" />
	<class name="org.apache.xerces.impl.XMLEntityManager$ExternalEntity" />
	<method signature="boolean isUnparsed()" class="org.apache.xerces.impl.XMLEntityManager$ExternalEntity" />
	<method signature="void clear()" class="org.apache.xerces.impl.XMLEntityManager$ExternalEntity" />
	<method signature="void setValues(org.apache.xerces.impl.XMLEntityManager$Entity)" class="org.apache.xerces.impl.XMLEntityManager$ExternalEntity" />
	<method signature="void setValues(org.apache.xerces.impl.XMLEntityManager$ExternalEntity)" class="org.apache.xerces.impl.XMLEntityManager$ExternalEntity" />
	<method signature="void &lt;init&gt;(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,java.lang.String,boolean)" class="org.apache.xerces.impl.XMLEntityManager$ExternalEntity" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.XMLEntityManager$ExternalEntity" />
	<method signature="boolean isExternal()" class="org.apache.xerces.impl.XMLEntityManager$ExternalEntity" />
	<class name="org.jdom2.output.XMLOutputter" />
	<method signature="java.lang.String outputString(org.jdom2.DocType)" class="org.jdom2.output.XMLOutputter" />
	<method signature="java.lang.String outputString(org.jdom2.Element)" class="org.jdom2.output.XMLOutputter" />
	<method signature="void output(org.jdom2.Document,java.io.OutputStream)" class="org.jdom2.output.XMLOutputter" />
	<method signature="java.lang.String outputString(org.jdom2.Comment)" class="org.jdom2.output.XMLOutputter" />
	<method signature="org.jdom2.output.XMLOutputter clone()" class="org.jdom2.output.XMLOutputter" />
	<method signature="void setXMLOutputProcessor(org.jdom2.output.support.XMLOutputProcessor)" class="org.jdom2.output.XMLOutputter" />
	<method signature="java.lang.String outputString(org.jdom2.ProcessingInstruction)" class="org.jdom2.output.XMLOutputter" />
	<method signature="java.lang.String outputString(org.jdom2.EntityRef)" class="org.jdom2.output.XMLOutputter" />
	<method signature="java.lang.Object clone()" class="org.jdom2.output.XMLOutputter" />
	<method signature="java.lang.String outputString(java.util.List)" class="org.jdom2.output.XMLOutputter" />
	<method signature="void setFormat(org.jdom2.output.Format)" class="org.jdom2.output.XMLOutputter" />
	<method signature="java.lang.String escapeElementEntities(java.lang.String)" class="org.jdom2.output.XMLOutputter" />
	<method signature="void &lt;init&gt;()" class="org.jdom2.output.XMLOutputter" />
	<method signature="java.lang.String outputString(org.jdom2.Document)" class="org.jdom2.output.XMLOutputter" />
	<method signature="void outputElementContent(org.jdom2.Element,java.io.OutputStream)" class="org.jdom2.output.XMLOutputter" />
	<method signature="void output(java.util.List,java.io.OutputStream)" class="org.jdom2.output.XMLOutputter" />
	<method signature="void output(org.jdom2.DocType,java.io.OutputStream)" class="org.jdom2.output.XMLOutputter" />
	<method signature="void output(org.jdom2.Element,java.io.OutputStream)" class="org.jdom2.output.XMLOutputter" />
	<method signature="void output(org.jdom2.Comment,java.io.Writer)" class="org.jdom2.output.XMLOutputter" />
	<method signature="void output(org.jdom2.Text,java.io.OutputStream)" class="org.jdom2.output.XMLOutputter" />
	<method signature="void &lt;init&gt;(org.jdom2.output.Format,org.jdom2.output.support.XMLOutputProcessor)" class="org.jdom2.output.XMLOutputter" />
	<method signature="void output(org.jdom2.Document,java.io.Writer)" class="org.jdom2.output.XMLOutputter" />
	<method signature="void &lt;init&gt;(org.jdom2.output.support.XMLOutputProcessor)" class="org.jdom2.output.XMLOutputter" />
	<method signature="org.jdom2.output.Format getFormat()" class="org.jdom2.output.XMLOutputter" />
	<method signature="void output(org.jdom2.Comment,java.io.OutputStream)" class="org.jdom2.output.XMLOutputter" />
	<method signature="void output(org.jdom2.EntityRef,java.io.OutputStream)" class="org.jdom2.output.XMLOutputter" />
	<method signature="void output(org.jdom2.EntityRef,java.io.Writer)" class="org.jdom2.output.XMLOutputter" />
	<method signature="org.jdom2.output.support.XMLOutputProcessor getXMLOutputProcessor()" class="org.jdom2.output.XMLOutputter" />
	<method signature="java.lang.String outputElementContentString(org.jdom2.Element)" class="org.jdom2.output.XMLOutputter" />
	<method signature="void output(org.jdom2.CDATA,java.io.OutputStream)" class="org.jdom2.output.XMLOutputter" />
	<method signature="void output(org.jdom2.ProcessingInstruction,java.io.OutputStream)" class="org.jdom2.output.XMLOutputter" />
	<method signature="void &lt;init&gt;(org.jdom2.output.Format)" class="org.jdom2.output.XMLOutputter" />
	<method signature="void output(org.jdom2.Element,java.io.Writer)" class="org.jdom2.output.XMLOutputter" />
	<method signature="void outputElementContent(org.jdom2.Element,java.io.Writer)" class="org.jdom2.output.XMLOutputter" />
	<method signature="java.lang.String escapeAttributeEntities(java.lang.String)" class="org.jdom2.output.XMLOutputter" />
	<method signature="void output(org.jdom2.Text,java.io.Writer)" class="org.jdom2.output.XMLOutputter" />
	<method signature="void &lt;init&gt;(org.jdom2.output.XMLOutputter)" class="org.jdom2.output.XMLOutputter" />
	<method signature="java.lang.String outputString(org.jdom2.Text)" class="org.jdom2.output.XMLOutputter" />
	<method signature="java.lang.String toString()" class="org.jdom2.output.XMLOutputter" />
	<method signature="void output(java.util.List,java.io.Writer)" class="org.jdom2.output.XMLOutputter" />
	<method signature="void output(org.jdom2.CDATA,java.io.Writer)" class="org.jdom2.output.XMLOutputter" />
	<method signature="void output(org.jdom2.DocType,java.io.Writer)" class="org.jdom2.output.XMLOutputter" />
	<method signature="java.lang.String outputString(org.jdom2.CDATA)" class="org.jdom2.output.XMLOutputter" />
	<method signature="void output(org.jdom2.ProcessingInstruction,java.io.Writer)" class="org.jdom2.output.XMLOutputter" />
	<class name="javax.xml.stream.XMLStreamConstants" />
	<class name="org.jfree.chart.renderer.category.StandardBarPainter" />
	<method signature="void paintBarShadow(java.awt.Graphics2D,org.jfree.chart.renderer.category.BarRenderer,int,int,java.awt.geom.RectangularShape,org.jfree.ui.RectangleEdge,boolean)" class="org.jfree.chart.renderer.category.StandardBarPainter" />
	<method signature="int hashCode()" class="org.jfree.chart.renderer.category.StandardBarPainter" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.category.StandardBarPainter" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.category.StandardBarPainter" />
	<method signature="void paintBar(java.awt.Graphics2D,org.jfree.chart.renderer.category.BarRenderer,int,int,java.awt.geom.RectangularShape,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.renderer.category.StandardBarPainter" />
	<class name="org.jfree.ui.FilesystemFilter" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,boolean)" class="org.jfree.ui.FilesystemFilter" />
	<method signature="void &lt;init&gt;(java.lang.String[],java.lang.String,boolean)" class="org.jfree.ui.FilesystemFilter" />
	<method signature="boolean accept(java.io.File,java.lang.String)" class="org.jfree.ui.FilesystemFilter" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="org.jfree.ui.FilesystemFilter" />
	<method signature="void acceptDirectories(boolean)" class="org.jfree.ui.FilesystemFilter" />
	<method signature="boolean acceptsDirectories()" class="org.jfree.ui.FilesystemFilter" />
	<method signature="boolean accept(java.io.File)" class="org.jfree.ui.FilesystemFilter" />
	<method signature="java.lang.String getDescription()" class="org.jfree.ui.FilesystemFilter" />
	<class name="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="int size()" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="org.apache.commons.lang3.text.StrTokenizer setIgnoredMatcher(org.apache.commons.lang3.text.StrMatcher)" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="void add(java.lang.Object)" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="void &lt;init&gt;(char[],org.apache.commons.lang3.text.StrMatcher)" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="void &lt;init&gt;(char[],org.apache.commons.lang3.text.StrMatcher,org.apache.commons.lang3.text.StrMatcher)" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="java.util.List getTokenList()" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="org.apache.commons.lang3.text.StrMatcher getTrimmerMatcher()" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="org.apache.commons.lang3.text.StrTokenizer setIgnoredChar(char)" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="org.apache.commons.lang3.text.StrTokenizer reset(char[])" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="void &lt;init&gt;(char[],java.lang.String)" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="org.apache.commons.lang3.text.StrTokenizer getTSVInstance()" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="void &lt;init&gt;(java.lang.String,org.apache.commons.lang3.text.StrMatcher)" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="org.apache.commons.lang3.text.StrTokenizer setQuoteMatcher(org.apache.commons.lang3.text.StrMatcher)" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="boolean hasNext()" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="org.apache.commons.lang3.text.StrTokenizer setDelimiterMatcher(org.apache.commons.lang3.text.StrMatcher)" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="org.apache.commons.lang3.text.StrTokenizer getTSVInstance(java.lang.String)" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="void &lt;init&gt;(java.lang.String,char,char)" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="org.apache.commons.lang3.text.StrTokenizer setTrimmerMatcher(org.apache.commons.lang3.text.StrMatcher)" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="void &lt;init&gt;(char[],char,char)" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="org.apache.commons.lang3.text.StrMatcher getIgnoredMatcher()" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="void &lt;init&gt;(char[],char)" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="org.apache.commons.lang3.text.StrTokenizer setDelimiterChar(char)" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="org.apache.commons.lang3.text.StrTokenizer getCSVInstance(char[])" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="java.lang.String nextToken()" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="void add(java.lang.String)" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="boolean isEmptyTokenAsNull()" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="org.apache.commons.lang3.text.StrTokenizer setEmptyTokenAsNull(boolean)" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="org.apache.commons.lang3.text.StrMatcher getDelimiterMatcher()" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="java.lang.String[] getTokenArray()" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="java.lang.String previousToken()" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="java.lang.String next()" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="void set(java.lang.Object)" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="java.lang.String getContent()" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="org.apache.commons.lang3.text.StrTokenizer reset(java.lang.String)" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="org.apache.commons.lang3.text.StrTokenizer reset()" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="int previousIndex()" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="org.apache.commons.lang3.text.StrTokenizer setQuoteChar(char)" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="java.lang.Object previous()" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="org.apache.commons.lang3.text.StrTokenizer getTSVInstance(char[])" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="java.lang.Object clone()" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="void &lt;init&gt;(java.lang.String,char)" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="void &lt;init&gt;(char[])" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="org.apache.commons.lang3.text.StrTokenizer setDelimiterString(java.lang.String)" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="boolean hasPrevious()" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="java.lang.String previous()" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="java.lang.Object next()" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="org.apache.commons.lang3.text.StrTokenizer getCSVInstance()" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="boolean isIgnoreEmptyTokens()" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="void &lt;init&gt;(java.lang.String,org.apache.commons.lang3.text.StrMatcher,org.apache.commons.lang3.text.StrMatcher)" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="void remove()" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="void set(java.lang.String)" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="java.lang.String toString()" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="org.apache.commons.lang3.text.StrMatcher getQuoteMatcher()" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="org.apache.commons.lang3.text.StrTokenizer getCSVInstance(java.lang.String)" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="int nextIndex()" class="org.apache.commons.lang3.text.StrTokenizer" />
	<method signature="org.apache.commons.lang3.text.StrTokenizer setIgnoreEmptyTokens(boolean)" class="org.apache.commons.lang3.text.StrTokenizer" />
	<class name="org.apache.wml.dom.WMLNoopElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.wml.dom.WMLDocumentImpl,java.lang.String)" class="org.apache.wml.dom.WMLNoopElementImpl" />
	<method signature="java.lang.String getId()" class="org.apache.wml.dom.WMLNoopElementImpl" />
	<method signature="java.lang.String getClassName()" class="org.apache.wml.dom.WMLNoopElementImpl" />
	<method signature="void setClassName(java.lang.String)" class="org.apache.wml.dom.WMLNoopElementImpl" />
	<method signature="void setId(java.lang.String)" class="org.apache.wml.dom.WMLNoopElementImpl" />
	<class name="org.w3c.dom.css.ElementCSSInlineStyle" />
	<method signature="org.w3c.dom.css.CSSStyleDeclaration getStyle()" class="org.w3c.dom.css.ElementCSSInlineStyle" />
	<class name="org.apache.xerces.util.SymbolHash" />
	<method signature="void &lt;init&gt;(int)" class="org.apache.xerces.util.SymbolHash" />
	<method signature="void clear()" class="org.apache.xerces.util.SymbolHash" />
	<method signature="java.lang.Object[] getEntries()" class="org.apache.xerces.util.SymbolHash" />
	<method signature="void put(java.lang.Object,java.lang.Object)" class="org.apache.xerces.util.SymbolHash" />
	<method signature="org.apache.xerces.util.SymbolHash makeClone()" class="org.apache.xerces.util.SymbolHash" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.util.SymbolHash" />
	<method signature="int getValues(java.lang.Object[],int)" class="org.apache.xerces.util.SymbolHash" />
	<method signature="int getLength()" class="org.apache.xerces.util.SymbolHash" />
	<method signature="java.lang.Object get(java.lang.Object)" class="org.apache.xerces.util.SymbolHash" />
	<class name="org.jfree.chart.labels.CategorySeriesLabelGenerator" />
	<method signature="java.lang.String generateLabel(org.jfree.data.category.CategoryDataset,int)" class="org.jfree.chart.labels.CategorySeriesLabelGenerator" />
	<class name="org.apache.xerces.xs.XSNamespaceItemList" />
	<method signature="org.apache.xerces.xs.XSNamespaceItem item(int)" class="org.apache.xerces.xs.XSNamespaceItemList" />
	<method signature="int getLength()" class="org.apache.xerces.xs.XSNamespaceItemList" />
	<class name="org.apache.xerces.dom.CharacterDataImpl" />
	<method signature="org.w3c.dom.NodeList getChildNodes()" class="org.apache.xerces.dom.CharacterDataImpl" />
	<method signature="void setNodeValue(java.lang.String)" class="org.apache.xerces.dom.CharacterDataImpl" />
	<method signature="void appendData(java.lang.String)" class="org.apache.xerces.dom.CharacterDataImpl" />
	<method signature="void insertData(int,java.lang.String)" class="org.apache.xerces.dom.CharacterDataImpl" />
	<method signature="int getLength()" class="org.apache.xerces.dom.CharacterDataImpl" />
	<method signature="java.lang.String getNodeValue()" class="org.apache.xerces.dom.CharacterDataImpl" />
	<method signature="void deleteData(int,int)" class="org.apache.xerces.dom.CharacterDataImpl" />
	<method signature="void setData(java.lang.String)" class="org.apache.xerces.dom.CharacterDataImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.dom.CharacterDataImpl" />
	<method signature="java.lang.String substringData(int,int)" class="org.apache.xerces.dom.CharacterDataImpl" />
	<method signature="void replaceData(int,int,java.lang.String)" class="org.apache.xerces.dom.CharacterDataImpl" />
	<method signature="java.lang.String getData()" class="org.apache.xerces.dom.CharacterDataImpl" />
	<class name="org.apache.xerces.parsers.SecurityConfiguration" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable)" class="org.apache.xerces.parsers.SecurityConfiguration" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable,org.apache.xerces.xni.grammars.XMLGrammarPool,org.apache.xerces.xni.parser.XMLComponentManager)" class="org.apache.xerces.parsers.SecurityConfiguration" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.parsers.SecurityConfiguration" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable,org.apache.xerces.xni.grammars.XMLGrammarPool)" class="org.apache.xerces.parsers.SecurityConfiguration" />
	<class name="org.apache.commons.lang3.text.CompositeFormat" />
	<method signature="java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)" class="org.apache.commons.lang3.text.CompositeFormat" />
	<method signature="java.text.Format getParser()" class="org.apache.commons.lang3.text.CompositeFormat" />
	<method signature="java.lang.String reformat(java.lang.String)" class="org.apache.commons.lang3.text.CompositeFormat" />
	<method signature="void &lt;init&gt;(java.text.Format,java.text.Format)" class="org.apache.commons.lang3.text.CompositeFormat" />
	<method signature="java.text.Format getFormatter()" class="org.apache.commons.lang3.text.CompositeFormat" />
	<method signature="java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)" class="org.apache.commons.lang3.text.CompositeFormat" />
	<class name="org.jfree.chart.axis.DateAxis" />
	<method signature="org.jfree.chart.axis.DateTickMarkPosition getTickMarkPosition()" class="org.jfree.chart.axis.DateAxis" />
	<method signature="boolean isHiddenValue(long)" class="org.jfree.chart.axis.DateAxis" />
	<method signature="org.jfree.chart.axis.Timeline getTimeline()" class="org.jfree.chart.axis.DateAxis" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.axis.DateAxis" />
	<method signature="void &lt;init&gt;(java.lang.String,java.util.TimeZone,java.util.Locale)" class="org.jfree.chart.axis.DateAxis" />
	<method signature="java.util.Date calculateHighestVisibleTickValue(org.jfree.chart.axis.DateTickUnit)" class="org.jfree.chart.axis.DateAxis" />
	<method signature="java.util.Date calculateLowestVisibleTickValue(org.jfree.chart.axis.DateTickUnit)" class="org.jfree.chart.axis.DateAxis" />
	<method signature="java.text.DateFormat getDateFormatOverride()" class="org.jfree.chart.axis.DateAxis" />
	<method signature="void &lt;init&gt;(java.lang.String,java.util.TimeZone)" class="org.jfree.chart.axis.DateAxis" />
	<method signature="double dateToJava2D(java.util.Date,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.axis.DateAxis" />
	<method signature="void setRange(double,double)" class="org.jfree.chart.axis.DateAxis" />
	<method signature="void setTimeZone(java.util.TimeZone)" class="org.jfree.chart.axis.DateAxis" />
	<method signature="org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.axis.DateAxis" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.chart.axis.DateAxis" />
	<method signature="org.jfree.chart.axis.TickUnitSource createStandardDateTickUnits(java.util.TimeZone)" class="org.jfree.chart.axis.DateAxis" />
	<method signature="double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.axis.DateAxis" />
	<method signature="void zoomRange(double,double)" class="org.jfree.chart.axis.DateAxis" />
	<method signature="void setTickUnit(org.jfree.chart.axis.DateTickUnit)" class="org.jfree.chart.axis.DateAxis" />
	<method signature="void setMaximumDate(java.util.Date)" class="org.jfree.chart.axis.DateAxis" />
	<method signature="org.jfree.chart.axis.DateTickUnit getTickUnit()" class="org.jfree.chart.axis.DateAxis" />
	<method signature="org.jfree.chart.axis.TickUnitSource createStandardDateTickUnits(java.util.TimeZone,java.util.Locale)" class="org.jfree.chart.axis.DateAxis" />
	<method signature="java.util.TimeZone getTimeZone()" class="org.jfree.chart.axis.DateAxis" />
	<method signature="void setTimeline(org.jfree.chart.axis.Timeline)" class="org.jfree.chart.axis.DateAxis" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.axis.DateAxis" />
	<method signature="void configure()" class="org.jfree.chart.axis.DateAxis" />
	<method signature="void setRange(org.jfree.data.Range,boolean,boolean)" class="org.jfree.chart.axis.DateAxis" />
	<method signature="void setTickUnit(org.jfree.chart.axis.DateTickUnit,boolean,boolean)" class="org.jfree.chart.axis.DateAxis" />
	<method signature="void setRange(org.jfree.data.Range)" class="org.jfree.chart.axis.DateAxis" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.axis.DateAxis" />
	<method signature="void setDateFormatOverride(java.text.DateFormat)" class="org.jfree.chart.axis.DateAxis" />
	<method signature="java.util.Date getMinimumDate()" class="org.jfree.chart.axis.DateAxis" />
	<method signature="int hashCode()" class="org.jfree.chart.axis.DateAxis" />
	<method signature="org.jfree.chart.axis.TickUnitSource createStandardDateTickUnits()" class="org.jfree.chart.axis.DateAxis" />
	<method signature="void setRange(java.util.Date,java.util.Date)" class="org.jfree.chart.axis.DateAxis" />
	<method signature="void setMinimumDate(java.util.Date)" class="org.jfree.chart.axis.DateAxis" />
	<method signature="java.util.Date getMaximumDate()" class="org.jfree.chart.axis.DateAxis" />
	<method signature="double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.axis.DateAxis" />
	<method signature="java.util.List refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.axis.DateAxis" />
	<method signature="void setTickMarkPosition(org.jfree.chart.axis.DateTickMarkPosition)" class="org.jfree.chart.axis.DateAxis" />
	<class name="org.jdom2.output.support.AbstractDOMOutputProcessor" />
	<method signature="java.util.List process(org.w3c.dom.Document,org.jdom2.output.Format,java.util.List)" class="org.jdom2.output.support.AbstractDOMOutputProcessor" />
	<method signature="org.w3c.dom.Element process(org.w3c.dom.Document,org.jdom2.output.Format,org.jdom2.Element)" class="org.jdom2.output.support.AbstractDOMOutputProcessor" />
	<method signature="org.w3c.dom.Attr process(org.w3c.dom.Document,org.jdom2.output.Format,org.jdom2.Attribute)" class="org.jdom2.output.support.AbstractDOMOutputProcessor" />
	<method signature="org.w3c.dom.CDATASection process(org.w3c.dom.Document,org.jdom2.output.Format,org.jdom2.CDATA)" class="org.jdom2.output.support.AbstractDOMOutputProcessor" />
	<method signature="org.w3c.dom.Document process(org.w3c.dom.Document,org.jdom2.output.Format,org.jdom2.Document)" class="org.jdom2.output.support.AbstractDOMOutputProcessor" />
	<method signature="org.w3c.dom.EntityReference process(org.w3c.dom.Document,org.jdom2.output.Format,org.jdom2.EntityRef)" class="org.jdom2.output.support.AbstractDOMOutputProcessor" />
	<method signature="org.w3c.dom.Text process(org.w3c.dom.Document,org.jdom2.output.Format,org.jdom2.Text)" class="org.jdom2.output.support.AbstractDOMOutputProcessor" />
	<method signature="void &lt;init&gt;()" class="org.jdom2.output.support.AbstractDOMOutputProcessor" />
	<method signature="org.w3c.dom.ProcessingInstruction process(org.w3c.dom.Document,org.jdom2.output.Format,org.jdom2.ProcessingInstruction)" class="org.jdom2.output.support.AbstractDOMOutputProcessor" />
	<method signature="org.w3c.dom.Comment process(org.w3c.dom.Document,org.jdom2.output.Format,org.jdom2.Comment)" class="org.jdom2.output.support.AbstractDOMOutputProcessor" />
	<class name="freemarker.template.TemplateHashModel" />
	<method signature="boolean isEmpty()" class="freemarker.template.TemplateHashModel" />
	<method signature="freemarker.template.TemplateModel get(java.lang.String)" class="freemarker.template.TemplateHashModel" />
	<class name="org.jfree.data.statistics.MeanAndStandardDeviation" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.statistics.MeanAndStandardDeviation" />
	<method signature="double getMeanValue()" class="org.jfree.data.statistics.MeanAndStandardDeviation" />
	<method signature="java.lang.Number getStandardDeviation()" class="org.jfree.data.statistics.MeanAndStandardDeviation" />
	<method signature="void &lt;init&gt;(java.lang.Number,java.lang.Number)" class="org.jfree.data.statistics.MeanAndStandardDeviation" />
	<method signature="java.lang.String toString()" class="org.jfree.data.statistics.MeanAndStandardDeviation" />
	<method signature="double getStandardDeviationValue()" class="org.jfree.data.statistics.MeanAndStandardDeviation" />
	<method signature="java.lang.Number getMean()" class="org.jfree.data.statistics.MeanAndStandardDeviation" />
	<method signature="void &lt;init&gt;(double,double)" class="org.jfree.data.statistics.MeanAndStandardDeviation" />
	<class name="tourma.tableModel.MjtPairs" />
	<method signature="boolean isCellEditable(int,int)" class="tourma.tableModel.MjtPairs" />
	<method signature="java.awt.Component getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)" class="tourma.tableModel.MjtPairs" />
	<method signature="int getRowCount()" class="tourma.tableModel.MjtPairs" />
	<method signature="java.lang.String getColumnName(int)" class="tourma.tableModel.MjtPairs" />
	<method signature="java.lang.Class getColumnClass(int)" class="tourma.tableModel.MjtPairs" />
	<method signature="void &lt;init&gt;(java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)" class="tourma.tableModel.MjtPairs" />
	<method signature="java.lang.Object getValueAt(int,int)" class="tourma.tableModel.MjtPairs" />
	<method signature="int getColumnCount()" class="tourma.tableModel.MjtPairs" />
	<class name="org.apache.xerces.dom.ElementDefinitionImpl" />
	<method signature="short getNodeType()" class="org.apache.xerces.dom.ElementDefinitionImpl" />
	<method signature="org.w3c.dom.NamedNodeMap getAttributes()" class="org.apache.xerces.dom.ElementDefinitionImpl" />
	<method signature="org.w3c.dom.Node cloneNode(boolean)" class="org.apache.xerces.dom.ElementDefinitionImpl" />
	<method signature="void &lt;init&gt;(org.apache.xerces.dom.CoreDocumentImpl,java.lang.String)" class="org.apache.xerces.dom.ElementDefinitionImpl" />
	<method signature="java.lang.String getNodeName()" class="org.apache.xerces.dom.ElementDefinitionImpl" />
	<class name="com.google.zxing.client.result.ExpandedProductParsedResult" />
	<method signature="int hashCode()" class="com.google.zxing.client.result.ExpandedProductParsedResult" />
	<method signature="java.lang.String getPackagingDate()" class="com.google.zxing.client.result.ExpandedProductParsedResult" />
	<method signature="java.lang.String getWeightIncrement()" class="com.google.zxing.client.result.ExpandedProductParsedResult" />
	<method signature="java.lang.String getWeight()" class="com.google.zxing.client.result.ExpandedProductParsedResult" />
	<method signature="java.lang.String getPriceIncrement()" class="com.google.zxing.client.result.ExpandedProductParsedResult" />
	<method signature="java.lang.String getExpirationDate()" class="com.google.zxing.client.result.ExpandedProductParsedResult" />
	<method signature="java.lang.String getPrice()" class="com.google.zxing.client.result.ExpandedProductParsedResult" />
	<method signature="java.lang.String getProductID()" class="com.google.zxing.client.result.ExpandedProductParsedResult" />
	<method signature="java.lang.String getWeightType()" class="com.google.zxing.client.result.ExpandedProductParsedResult" />
	<method signature="java.lang.String getPriceCurrency()" class="com.google.zxing.client.result.ExpandedProductParsedResult" />
	<method signature="java.lang.String getSscc()" class="com.google.zxing.client.result.ExpandedProductParsedResult" />
	<method signature="java.lang.String getProductionDate()" class="com.google.zxing.client.result.ExpandedProductParsedResult" />
	<method signature="boolean equals(java.lang.Object)" class="com.google.zxing.client.result.ExpandedProductParsedResult" />
	<method signature="java.lang.String getBestBeforeDate()" class="com.google.zxing.client.result.ExpandedProductParsedResult" />
	<method signature="java.lang.String getDisplayResult()" class="com.google.zxing.client.result.ExpandedProductParsedResult" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Map)" class="com.google.zxing.client.result.ExpandedProductParsedResult" />
	<method signature="java.lang.String getLotNumber()" class="com.google.zxing.client.result.ExpandedProductParsedResult" />
	<method signature="java.util.Map getUncommonAIs()" class="com.google.zxing.client.result.ExpandedProductParsedResult" />
	<class name="org.jfree.data.xml.ItemHandler" />
	<method signature="void &lt;init&gt;(org.jfree.data.xml.RootHandler,org.xml.sax.helpers.DefaultHandler)" class="org.jfree.data.xml.ItemHandler" />
	<method signature="void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" class="org.jfree.data.xml.ItemHandler" />
	<method signature="java.lang.Number getValue()" class="org.jfree.data.xml.ItemHandler" />
	<method signature="void endElement(java.lang.String,java.lang.String,java.lang.String)" class="org.jfree.data.xml.ItemHandler" />
	<method signature="void setKey(java.lang.Comparable)" class="org.jfree.data.xml.ItemHandler" />
	<method signature="void setValue(java.lang.Number)" class="org.jfree.data.xml.ItemHandler" />
	<method signature="java.lang.Comparable getKey()" class="org.jfree.data.xml.ItemHandler" />
	<class name="org.apache.html.dom.HTMLOListElementImpl" />
	<method signature="int getStart()" class="org.apache.html.dom.HTMLOListElementImpl" />
	<method signature="void setCompact(boolean)" class="org.apache.html.dom.HTMLOListElementImpl" />
	<method signature="boolean getCompact()" class="org.apache.html.dom.HTMLOListElementImpl" />
	<method signature="java.lang.String getType()" class="org.apache.html.dom.HTMLOListElementImpl" />
	<method signature="void setStart(int)" class="org.apache.html.dom.HTMLOListElementImpl" />
	<method signature="void setType(java.lang.String)" class="org.apache.html.dom.HTMLOListElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLOListElementImpl" />
	<class name="org.apache.commons.lang3.exception.ExceptionUtils" />
	<method signature="java.lang.Throwable getRootCause(java.lang.Throwable)" class="org.apache.commons.lang3.exception.ExceptionUtils" />
	<method signature="java.lang.Throwable[] getThrowables(java.lang.Throwable)" class="org.apache.commons.lang3.exception.ExceptionUtils" />
	<method signature="int indexOfType(java.lang.Throwable,java.lang.Class)" class="org.apache.commons.lang3.exception.ExceptionUtils" />
	<method signature="java.lang.String[] getRootCauseStackTrace(java.lang.Throwable)" class="org.apache.commons.lang3.exception.ExceptionUtils" />
	<method signature="java.lang.String[] getStackFrames(java.lang.Throwable)" class="org.apache.commons.lang3.exception.ExceptionUtils" />
	<method signature="java.lang.Throwable getCause(java.lang.Throwable,java.lang.String[])" class="org.apache.commons.lang3.exception.ExceptionUtils" />
	<method signature="void printRootCauseStackTrace(java.lang.Throwable,java.io.PrintWriter)" class="org.apache.commons.lang3.exception.ExceptionUtils" />
	<method signature="java.lang.String getStackTrace(java.lang.Throwable)" class="org.apache.commons.lang3.exception.ExceptionUtils" />
	<method signature="java.lang.Throwable getCause(java.lang.Throwable)" class="org.apache.commons.lang3.exception.ExceptionUtils" />
	<method signature="void printRootCauseStackTrace(java.lang.Throwable)" class="org.apache.commons.lang3.exception.ExceptionUtils" />
	<method signature="java.util.List getThrowableList(java.lang.Throwable)" class="org.apache.commons.lang3.exception.ExceptionUtils" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.exception.ExceptionUtils" />
	<method signature="int getThrowableCount(java.lang.Throwable)" class="org.apache.commons.lang3.exception.ExceptionUtils" />
	<method signature="int indexOfThrowable(java.lang.Throwable,java.lang.Class)" class="org.apache.commons.lang3.exception.ExceptionUtils" />
	<method signature="void removeCommonFrames(java.util.List,java.util.List)" class="org.apache.commons.lang3.exception.ExceptionUtils" />
	<method signature="int indexOfThrowable(java.lang.Throwable,java.lang.Class,int)" class="org.apache.commons.lang3.exception.ExceptionUtils" />
	<method signature="java.lang.String getMessage(java.lang.Throwable)" class="org.apache.commons.lang3.exception.ExceptionUtils" />
	<method signature="int indexOfType(java.lang.Throwable,java.lang.Class,int)" class="org.apache.commons.lang3.exception.ExceptionUtils" />
	<method signature="void printRootCauseStackTrace(java.lang.Throwable,java.io.PrintStream)" class="org.apache.commons.lang3.exception.ExceptionUtils" />
	<method signature="java.lang.String getRootCauseMessage(java.lang.Throwable)" class="org.apache.commons.lang3.exception.ExceptionUtils" />
	<method signature="java.lang.String[] getDefaultCauseMethodNames()" class="org.apache.commons.lang3.exception.ExceptionUtils" />
	<class name="org.apache.xerces.xs.XSWildcard" />
	<method signature="org.apache.xerces.xs.StringList getNsConstraintList()" class="org.apache.xerces.xs.XSWildcard" />
	<method signature="short getConstraintType()" class="org.apache.xerces.xs.XSWildcard" />
	<method signature="org.apache.xerces.xs.XSAnnotation getAnnotation()" class="org.apache.xerces.xs.XSWildcard" />
	<method signature="org.apache.xerces.xs.XSObjectList getAnnotations()" class="org.apache.xerces.xs.XSWildcard" />
	<method signature="short getProcessContents()" class="org.apache.xerces.xs.XSWildcard" />
	<class name="org.jfree.data.Value" />
	<method signature="java.lang.Number getValue()" class="org.jfree.data.Value" />
	<class name="org.jfree.data.xy.DefaultWindDataset" />
	<method signature="void &lt;init&gt;(java.util.List,java.lang.Object[][][])" class="org.jfree.data.xy.DefaultWindDataset" />
	<method signature="java.lang.Number getWindForce(int,int)" class="org.jfree.data.xy.DefaultWindDataset" />
	<method signature="java.lang.Number getX(int,int)" class="org.jfree.data.xy.DefaultWindDataset" />
	<method signature="java.lang.Number getY(int,int)" class="org.jfree.data.xy.DefaultWindDataset" />
	<method signature="void &lt;init&gt;(java.lang.Object[][][])" class="org.jfree.data.xy.DefaultWindDataset" />
	<method signature="void &lt;init&gt;(java.lang.String[],java.lang.Object[][][])" class="org.jfree.data.xy.DefaultWindDataset" />
	<method signature="int getSeriesCount()" class="org.jfree.data.xy.DefaultWindDataset" />
	<method signature="java.lang.Comparable getSeriesKey(int)" class="org.jfree.data.xy.DefaultWindDataset" />
	<method signature="java.util.List seriesNameListFromDataArray(java.lang.Object[][])" class="org.jfree.data.xy.DefaultWindDataset" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.xy.DefaultWindDataset" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.xy.DefaultWindDataset" />
	<method signature="int getItemCount(int)" class="org.jfree.data.xy.DefaultWindDataset" />
	<method signature="java.lang.Number getWindDirection(int,int)" class="org.jfree.data.xy.DefaultWindDataset" />
	<class name="com.hexidec.ekit.action.FormatAction" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="com.hexidec.ekit.action.FormatAction" />
	<method signature="void &lt;init&gt;(com.hexidec.ekit.EkitCore,java.lang.String,javax.swing.text.html.HTML$Tag)" class="com.hexidec.ekit.action.FormatAction" />
	<class name="org.apache.html.dom.HTMLStyleElementImpl" />
	<method signature="void setDisabled(boolean)" class="org.apache.html.dom.HTMLStyleElementImpl" />
	<method signature="java.lang.String getMedia()" class="org.apache.html.dom.HTMLStyleElementImpl" />
	<method signature="java.lang.String getType()" class="org.apache.html.dom.HTMLStyleElementImpl" />
	<method signature="void setType(java.lang.String)" class="org.apache.html.dom.HTMLStyleElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLStyleElementImpl" />
	<method signature="boolean getDisabled()" class="org.apache.html.dom.HTMLStyleElementImpl" />
	<method signature="void setMedia(java.lang.String)" class="org.apache.html.dom.HTMLStyleElementImpl" />
	<class name="freemarker.template.TemplateModelIterator" />
	<method signature="boolean hasNext()" class="freemarker.template.TemplateModelIterator" />
	<method signature="freemarker.template.TemplateModel next()" class="freemarker.template.TemplateModelIterator" />
	<class name="org.apache.xerces.impl.dv.dtd.IDREFDatatypeValidator" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.dtd.IDREFDatatypeValidator" />
	<method signature="void validate(java.lang.String,org.apache.xerces.impl.dv.ValidationContext)" class="org.apache.xerces.impl.dv.dtd.IDREFDatatypeValidator" />
	<class name="freemarker.ext.beans.BeansWrapper" />
	<method signature="void coerceBigDecimals(java.lang.reflect.AccessibleObject,java.lang.Object[])" class="freemarker.ext.beans.BeansWrapper" />
	<method signature="java.lang.Object unwrap(freemarker.template.TemplateModel,java.lang.Class)" class="freemarker.ext.beans.BeansWrapper" />
	<method signature="void setMethodsShadowItems(boolean)" class="freemarker.ext.beans.BeansWrapper" />
	<method signature="void setDefaultDateType(int)" class="freemarker.ext.beans.BeansWrapper" />
	<method signature="java.lang.Object coerceBigDecimal(java.math.BigDecimal,java.lang.Class)" class="freemarker.ext.beans.BeansWrapper" />
	<method signature="void &lt;init&gt;()" class="freemarker.ext.beans.BeansWrapper" />
	<method signature="void coerceBigDecimals(java.lang.Class[],java.lang.Object[])" class="freemarker.ext.beans.BeansWrapper" />
	<method signature="void setStrict(boolean)" class="freemarker.ext.beans.BeansWrapper" />
	<method signature="void setExposureLevel(int)" class="freemarker.ext.beans.BeansWrapper" />
	<method signature="java.lang.Object unwrap(freemarker.template.TemplateModel)" class="freemarker.ext.beans.BeansWrapper" />
	<method signature="boolean isStrict()" class="freemarker.ext.beans.BeansWrapper" />
	<method signature="boolean isSimpleMapWrapper()" class="freemarker.ext.beans.BeansWrapper" />
	<method signature="void setSimpleMapWrapper(boolean)" class="freemarker.ext.beans.BeansWrapper" />
	<method signature="void setOuterIdentity(freemarker.template.ObjectWrapper)" class="freemarker.ext.beans.BeansWrapper" />
	<method signature="boolean isExposeFields()" class="freemarker.ext.beans.BeansWrapper" />
	<method signature="freemarker.template.TemplateHashModel getStaticModels()" class="freemarker.ext.beans.BeansWrapper" />
	<method signature="freemarker.template.ObjectWrapper getOuterIdentity()" class="freemarker.ext.beans.BeansWrapper" />
	<method signature="void setExposeFields(boolean)" class="freemarker.ext.beans.BeansWrapper" />
	<method signature="void setUseCache(boolean)" class="freemarker.ext.beans.BeansWrapper" />
	<method signature="void setNullModel(freemarker.template.TemplateModel)" class="freemarker.ext.beans.BeansWrapper" />
	<method signature="freemarker.template.TemplateModel wrap(java.lang.Object)" class="freemarker.ext.beans.BeansWrapper" />
	<method signature="freemarker.ext.beans.BeansWrapper getDefaultInstance()" class="freemarker.ext.beans.BeansWrapper" />
	<method signature="java.lang.Object newInstance(java.lang.Class,java.util.List)" class="freemarker.ext.beans.BeansWrapper" />
	<method signature="freemarker.template.TemplateHashModel getEnumModels()" class="freemarker.ext.beans.BeansWrapper" />
	<class name="org.apache.wml.WMLIElement" />
	<method signature="java.lang.String getXmlLang()" class="org.apache.wml.WMLIElement" />
	<method signature="void setXmlLang(java.lang.String)" class="org.apache.wml.WMLIElement" />
	<class name="org.jfree.chart.block.GridArrangement" />
	<method signature="org.jfree.ui.Size2D arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" class="org.jfree.chart.block.GridArrangement" />
	<method signature="void &lt;init&gt;(int,int)" class="org.jfree.chart.block.GridArrangement" />
	<method signature="void add(org.jfree.chart.block.Block,java.lang.Object)" class="org.jfree.chart.block.GridArrangement" />
	<method signature="void clear()" class="org.jfree.chart.block.GridArrangement" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.block.GridArrangement" />
	<class name="com.google.zxing.client.result.ISBNResultParser" />
	<method signature="com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result)" class="com.google.zxing.client.result.ISBNResultParser" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.client.result.ISBNResultParser" />
	<method signature="com.google.zxing.client.result.ISBNParsedResult parse(com.google.zxing.Result)" class="com.google.zxing.client.result.ISBNResultParser" />
	<class name="javax.xml.bind.helpers.PrintConversionEventImpl" />
	<method signature="void &lt;init&gt;(int,java.lang.String,javax.xml.bind.ValidationEventLocator,java.lang.Throwable)" class="javax.xml.bind.helpers.PrintConversionEventImpl" />
	<method signature="void &lt;init&gt;(int,java.lang.String,javax.xml.bind.ValidationEventLocator)" class="javax.xml.bind.helpers.PrintConversionEventImpl" />
	<class name="org.apache.xerces.impl.xs.identity.Selector$Matcher" />
	<method signature="void startElement(org.apache.xerces.xni.QName,org.apache.xerces.xni.XMLAttributes)" class="org.apache.xerces.impl.xs.identity.Selector$Matcher" />
	<method signature="org.apache.xerces.impl.xs.identity.IdentityConstraint getIdentityConstraint()" class="org.apache.xerces.impl.xs.identity.Selector$Matcher" />
	<method signature="int getInitialDepth()" class="org.apache.xerces.impl.xs.identity.Selector$Matcher" />
	<method signature="void endElement(org.apache.xerces.xni.QName,org.apache.xerces.xs.XSTypeDefinition,boolean,java.lang.Object,short,org.apache.xerces.xs.ShortList)" class="org.apache.xerces.impl.xs.identity.Selector$Matcher" />
	<method signature="void startDocumentFragment()" class="org.apache.xerces.impl.xs.identity.Selector$Matcher" />
	<method signature="void &lt;init&gt;(org.apache.xerces.impl.xs.identity.Selector,org.apache.xerces.impl.xs.identity.Selector$XPath,org.apache.xerces.impl.xs.identity.FieldActivator,int)" class="org.apache.xerces.impl.xs.identity.Selector$Matcher" />
	<class name="edu.umd.cs.findbugs.annotations.DesireNoWarning" />
	<method signature="int num()" class="edu.umd.cs.findbugs.annotations.DesireNoWarning" />
	<method signature="edu.umd.cs.findbugs.annotations.Confidence confidence()" class="edu.umd.cs.findbugs.annotations.DesireNoWarning" />
	<method signature="edu.umd.cs.findbugs.annotations.Priority priority()" class="edu.umd.cs.findbugs.annotations.DesireNoWarning" />
	<method signature="java.lang.String value()" class="edu.umd.cs.findbugs.annotations.DesireNoWarning" />
	<class name="org.w3c.dom.Node" />
	<method signature="org.w3c.dom.NamedNodeMap getAttributes()" class="org.w3c.dom.Node" />
	<method signature="org.w3c.dom.Node appendChild(org.w3c.dom.Node)" class="org.w3c.dom.Node" />
	<method signature="org.w3c.dom.Node getPreviousSibling()" class="org.w3c.dom.Node" />
	<method signature="org.w3c.dom.NodeList getChildNodes()" class="org.w3c.dom.Node" />
	<method signature="org.w3c.dom.Node cloneNode(boolean)" class="org.w3c.dom.Node" />
	<method signature="org.w3c.dom.Node getParentNode()" class="org.w3c.dom.Node" />
	<method signature="boolean isDefaultNamespace(java.lang.String)" class="org.w3c.dom.Node" />
	<method signature="org.w3c.dom.Node getLastChild()" class="org.w3c.dom.Node" />
	<method signature="org.w3c.dom.Node insertBefore(org.w3c.dom.Node,org.w3c.dom.Node)" class="org.w3c.dom.Node" />
	<method signature="boolean isEqualNode(org.w3c.dom.Node)" class="org.w3c.dom.Node" />
	<method signature="java.lang.Object setUserData(java.lang.String,java.lang.Object,org.w3c.dom.UserDataHandler)" class="org.w3c.dom.Node" />
	<method signature="java.lang.String getBaseURI()" class="org.w3c.dom.Node" />
	<method signature="short getNodeType()" class="org.w3c.dom.Node" />
	<method signature="java.lang.String getPrefix()" class="org.w3c.dom.Node" />
	<method signature="org.w3c.dom.Node getNextSibling()" class="org.w3c.dom.Node" />
	<method signature="void setPrefix(java.lang.String)" class="org.w3c.dom.Node" />
	<method signature="void setNodeValue(java.lang.String)" class="org.w3c.dom.Node" />
	<method signature="java.lang.Object getUserData(java.lang.String)" class="org.w3c.dom.Node" />
	<method signature="java.lang.String getNodeName()" class="org.w3c.dom.Node" />
	<method signature="org.w3c.dom.Node removeChild(org.w3c.dom.Node)" class="org.w3c.dom.Node" />
	<method signature="java.lang.String getTextContent()" class="org.w3c.dom.Node" />
	<method signature="boolean hasAttributes()" class="org.w3c.dom.Node" />
	<method signature="void normalize()" class="org.w3c.dom.Node" />
	<method signature="java.lang.String lookupPrefix(java.lang.String)" class="org.w3c.dom.Node" />
	<method signature="java.lang.String lookupNamespaceURI(java.lang.String)" class="org.w3c.dom.Node" />
	<method signature="java.lang.String getNodeValue()" class="org.w3c.dom.Node" />
	<method signature="short compareDocumentPosition(org.w3c.dom.Node)" class="org.w3c.dom.Node" />
	<method signature="java.lang.String getLocalName()" class="org.w3c.dom.Node" />
	<method signature="java.lang.String getNamespaceURI()" class="org.w3c.dom.Node" />
	<method signature="org.w3c.dom.Node getFirstChild()" class="org.w3c.dom.Node" />
	<method signature="java.lang.Object getFeature(java.lang.String,java.lang.String)" class="org.w3c.dom.Node" />
	<method signature="org.w3c.dom.Document getOwnerDocument()" class="org.w3c.dom.Node" />
	<method signature="org.w3c.dom.Node replaceChild(org.w3c.dom.Node,org.w3c.dom.Node)" class="org.w3c.dom.Node" />
	<method signature="boolean isSameNode(org.w3c.dom.Node)" class="org.w3c.dom.Node" />
	<method signature="void setTextContent(java.lang.String)" class="org.w3c.dom.Node" />
	<method signature="boolean hasChildNodes()" class="org.w3c.dom.Node" />
	<method signature="boolean isSupported(java.lang.String,java.lang.String)" class="org.w3c.dom.Node" />
	<class name="freemarker.template.utility.HtmlEscape" />
	<method signature="void &lt;init&gt;()" class="freemarker.template.utility.HtmlEscape" />
	<method signature="java.io.Writer getWriter(java.io.Writer,java.util.Map)" class="freemarker.template.utility.HtmlEscape" />
	<class name="org.jfree.data.xml.PieDatasetHandler" />
	<method signature="void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" class="org.jfree.data.xml.PieDatasetHandler" />
	<method signature="void endElement(java.lang.String,java.lang.String,java.lang.String)" class="org.jfree.data.xml.PieDatasetHandler" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.xml.PieDatasetHandler" />
	<method signature="org.jfree.data.general.PieDataset getDataset()" class="org.jfree.data.xml.PieDatasetHandler" />
	<method signature="void addItem(java.lang.Comparable,java.lang.Number)" class="org.jfree.data.xml.PieDatasetHandler" />
	<class name="org.apache.xerces.util.SAXInputSource" />
	<method signature="org.xml.sax.XMLReader getXMLReader()" class="org.apache.xerces.util.SAXInputSource" />
	<method signature="void setSystemId(java.lang.String)" class="org.apache.xerces.util.SAXInputSource" />
	<method signature="org.xml.sax.InputSource getInputSource()" class="org.apache.xerces.util.SAXInputSource" />
	<method signature="void setCharacterStream(java.io.Reader)" class="org.apache.xerces.util.SAXInputSource" />
	<method signature="void &lt;init&gt;(org.xml.sax.InputSource)" class="org.apache.xerces.util.SAXInputSource" />
	<method signature="void &lt;init&gt;(org.xml.sax.XMLReader,org.xml.sax.InputSource)" class="org.apache.xerces.util.SAXInputSource" />
	<method signature="void setXMLReader(org.xml.sax.XMLReader)" class="org.apache.xerces.util.SAXInputSource" />
	<method signature="void setEncoding(java.lang.String)" class="org.apache.xerces.util.SAXInputSource" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.util.SAXInputSource" />
	<method signature="void setByteStream(java.io.InputStream)" class="org.apache.xerces.util.SAXInputSource" />
	<method signature="void setPublicId(java.lang.String)" class="org.apache.xerces.util.SAXInputSource" />
	<method signature="void setInputSource(org.xml.sax.InputSource)" class="org.apache.xerces.util.SAXInputSource" />
	<class name="freemarker.ext.beans.IteratorModel" />
	<method signature="void &lt;init&gt;(java.util.Iterator,freemarker.ext.beans.BeansWrapper)" class="freemarker.ext.beans.IteratorModel" />
	<method signature="boolean hasNext()" class="freemarker.ext.beans.IteratorModel" />
	<method signature="boolean getAsBoolean()" class="freemarker.ext.beans.IteratorModel" />
	<method signature="freemarker.template.TemplateModelIterator iterator()" class="freemarker.ext.beans.IteratorModel" />
	<method signature="freemarker.template.TemplateModel next()" class="freemarker.ext.beans.IteratorModel" />
	<class name="org.jfree.chart.renderer.xy.GradientXYBarPainter" />
	<method signature="int hashCode()" class="org.jfree.chart.renderer.xy.GradientXYBarPainter" />
	<method signature="void paintBar(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYBarRenderer,int,int,java.awt.geom.RectangularShape,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.renderer.xy.GradientXYBarPainter" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.xy.GradientXYBarPainter" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.xy.GradientXYBarPainter" />
	<method signature="void &lt;init&gt;(double,double,double)" class="org.jfree.chart.renderer.xy.GradientXYBarPainter" />
	<method signature="void paintBarShadow(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYBarRenderer,int,int,java.awt.geom.RectangularShape,org.jfree.ui.RectangleEdge,boolean)" class="org.jfree.chart.renderer.xy.GradientXYBarPainter" />
	<class name="javax.xml.stream.events.Characters" />
	<method signature="boolean isWhiteSpace()" class="javax.xml.stream.events.Characters" />
	<method signature="boolean isCData()" class="javax.xml.stream.events.Characters" />
	<method signature="boolean isIgnorableWhiteSpace()" class="javax.xml.stream.events.Characters" />
	<method signature="java.lang.String getData()" class="javax.xml.stream.events.Characters" />
	<class name="org.apache.xerces.impl.dtd.XMLDTDValidatorFilter" />
	<method signature="boolean validate()" class="org.apache.xerces.impl.dtd.XMLDTDValidatorFilter" />
	<method signature="boolean hasGrammar()" class="org.apache.xerces.impl.dtd.XMLDTDValidatorFilter" />
	<class name="org.apache.xerces.impl.xs.identity.KeyRef" />
	<method signature="org.apache.xerces.impl.xs.identity.UniqueOrKey getKey()" class="org.apache.xerces.impl.xs.identity.KeyRef" />
	<method signature="org.apache.xerces.xs.XSIDCDefinition getRefKey()" class="org.apache.xerces.impl.xs.identity.KeyRef" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,org.apache.xerces.impl.xs.identity.UniqueOrKey)" class="org.apache.xerces.impl.xs.identity.KeyRef" />
	<class name="org.apache.commons.lang3.mutable.MutableDouble" />
	<method signature="void setValue(double)" class="org.apache.commons.lang3.mutable.MutableDouble" />
	<method signature="java.lang.Double getValue()" class="org.apache.commons.lang3.mutable.MutableDouble" />
	<method signature="void decrement()" class="org.apache.commons.lang3.mutable.MutableDouble" />
	<method signature="void &lt;init&gt;(double)" class="org.apache.commons.lang3.mutable.MutableDouble" />
	<method signature="int intValue()" class="org.apache.commons.lang3.mutable.MutableDouble" />
	<method signature="boolean equals(java.lang.Object)" class="org.apache.commons.lang3.mutable.MutableDouble" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.mutable.MutableDouble" />
	<method signature="void setValue(java.lang.Object)" class="org.apache.commons.lang3.mutable.MutableDouble" />
	<method signature="java.lang.Object getValue()" class="org.apache.commons.lang3.mutable.MutableDouble" />
	<method signature="void subtract(double)" class="org.apache.commons.lang3.mutable.MutableDouble" />
	<method signature="double doubleValue()" class="org.apache.commons.lang3.mutable.MutableDouble" />
	<method signature="float floatValue()" class="org.apache.commons.lang3.mutable.MutableDouble" />
	<method signature="void add(double)" class="org.apache.commons.lang3.mutable.MutableDouble" />
	<method signature="int compareTo(java.lang.Object)" class="org.apache.commons.lang3.mutable.MutableDouble" />
	<method signature="int hashCode()" class="org.apache.commons.lang3.mutable.MutableDouble" />
	<method signature="int compareTo(org.apache.commons.lang3.mutable.MutableDouble)" class="org.apache.commons.lang3.mutable.MutableDouble" />
	<method signature="boolean isInfinite()" class="org.apache.commons.lang3.mutable.MutableDouble" />
	<method signature="java.lang.Double toDouble()" class="org.apache.commons.lang3.mutable.MutableDouble" />
	<method signature="void setValue(java.lang.Number)" class="org.apache.commons.lang3.mutable.MutableDouble" />
	<method signature="boolean isNaN()" class="org.apache.commons.lang3.mutable.MutableDouble" />
	<method signature="void increment()" class="org.apache.commons.lang3.mutable.MutableDouble" />
	<method signature="void &lt;init&gt;(java.lang.Number)" class="org.apache.commons.lang3.mutable.MutableDouble" />
	<method signature="java.lang.String toString()" class="org.apache.commons.lang3.mutable.MutableDouble" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.apache.commons.lang3.mutable.MutableDouble" />
	<method signature="void add(java.lang.Number)" class="org.apache.commons.lang3.mutable.MutableDouble" />
	<method signature="long longValue()" class="org.apache.commons.lang3.mutable.MutableDouble" />
	<method signature="void subtract(java.lang.Number)" class="org.apache.commons.lang3.mutable.MutableDouble" />
	<class name="org.apache.xerces.util.EntityResolverWrapper" />
	<method signature="org.xml.sax.EntityResolver getEntityResolver()" class="org.apache.xerces.util.EntityResolverWrapper" />
	<method signature="void &lt;init&gt;(org.xml.sax.EntityResolver)" class="org.apache.xerces.util.EntityResolverWrapper" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.util.EntityResolverWrapper" />
	<method signature="void setEntityResolver(org.xml.sax.EntityResolver)" class="org.apache.xerces.util.EntityResolverWrapper" />
	<method signature="org.apache.xerces.xni.parser.XMLInputSource resolveEntity(org.apache.xerces.xni.XMLResourceIdentifier)" class="org.apache.xerces.util.EntityResolverWrapper" />
	<class name="org.w3c.dom.xpath.XPathException" />
	<method signature="void &lt;init&gt;(short,java.lang.String)" class="org.w3c.dom.xpath.XPathException" />
	<class name="tourma.utils.display.TourmaProtocol$TKey" />
	<method signature="tourma.utils.display.TourmaProtocol$TKey valueOf(java.lang.String)" class="tourma.utils.display.TourmaProtocol$TKey" />
	<method signature="tourma.utils.display.TourmaProtocol$TKey[] values()" class="tourma.utils.display.TourmaProtocol$TKey" />
	<class name="org.xml.sax.InputSource" />
	<method signature="java.lang.String getSystemId()" class="org.xml.sax.InputSource" />
	<method signature="void setSystemId(java.lang.String)" class="org.xml.sax.InputSource" />
	<method signature="void &lt;init&gt;(java.io.InputStream)" class="org.xml.sax.InputSource" />
	<method signature="void setCharacterStream(java.io.Reader)" class="org.xml.sax.InputSource" />
	<method signature="java.lang.String getPublicId()" class="org.xml.sax.InputSource" />
	<method signature="void setEncoding(java.lang.String)" class="org.xml.sax.InputSource" />
	<method signature="java.lang.String getEncoding()" class="org.xml.sax.InputSource" />
	<method signature="java.io.Reader getCharacterStream()" class="org.xml.sax.InputSource" />
	<method signature="void &lt;init&gt;()" class="org.xml.sax.InputSource" />
	<method signature="void setByteStream(java.io.InputStream)" class="org.xml.sax.InputSource" />
	<method signature="void &lt;init&gt;(java.io.Reader)" class="org.xml.sax.InputSource" />
	<method signature="java.io.InputStream getByteStream()" class="org.xml.sax.InputSource" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.xml.sax.InputSource" />
	<method signature="void setPublicId(java.lang.String)" class="org.xml.sax.InputSource" />
	<class name="org.apache.wml.WMLDOMImplementation" />
	<class name="org.jfree.data.xy.XYDataItem" />
	<method signature="int compareTo(java.lang.Object)" class="org.jfree.data.xy.XYDataItem" />
	<method signature="int hashCode()" class="org.jfree.data.xy.XYDataItem" />
	<method signature="double getYValue()" class="org.jfree.data.xy.XYDataItem" />
	<method signature="java.lang.Number getX()" class="org.jfree.data.xy.XYDataItem" />
	<method signature="void &lt;init&gt;(java.lang.Number,java.lang.Number)" class="org.jfree.data.xy.XYDataItem" />
	<method signature="java.lang.Number getY()" class="org.jfree.data.xy.XYDataItem" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.xy.XYDataItem" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.xy.XYDataItem" />
	<method signature="double getXValue()" class="org.jfree.data.xy.XYDataItem" />
	<method signature="void setY(java.lang.Number)" class="org.jfree.data.xy.XYDataItem" />
	<method signature="java.lang.String toString()" class="org.jfree.data.xy.XYDataItem" />
	<method signature="void &lt;init&gt;(double,double)" class="org.jfree.data.xy.XYDataItem" />
	<method signature="void setY(double)" class="org.jfree.data.xy.XYDataItem" />
	<class name="org.jfree.chart.LegendItemSource" />
	<method signature="org.jfree.chart.LegendItemCollection getLegendItems()" class="org.jfree.chart.LegendItemSource" />
	<class name="org.jdom2.located.LocatedCDATA" />
	<method signature="void setLine(int)" class="org.jdom2.located.LocatedCDATA" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jdom2.located.LocatedCDATA" />
	<method signature="int getLine()" class="org.jdom2.located.LocatedCDATA" />
	<method signature="int getColumn()" class="org.jdom2.located.LocatedCDATA" />
	<method signature="void setColumn(int)" class="org.jdom2.located.LocatedCDATA" />
	<class name="javax.annotation.RegEx" />
	<method signature="javax.annotation.meta.When when()" class="javax.annotation.RegEx" />
	<class name="org.apache.xerces.xni.parser.XMLDTDScanner" />
	<method signature="boolean scanDTDInternalSubset(boolean,boolean,boolean)" class="org.apache.xerces.xni.parser.XMLDTDScanner" />
	<method signature="void setInputSource(org.apache.xerces.xni.parser.XMLInputSource)" class="org.apache.xerces.xni.parser.XMLDTDScanner" />
	<method signature="boolean scanDTDExternalSubset(boolean)" class="org.apache.xerces.xni.parser.XMLDTDScanner" />
	<class name="com.google.zxing.qrcode.detector.AlignmentPattern" />
	<class name="org.apache.xerces.impl.xs.XMLSchemaValidator$XPathMatcherStack" />
	<method signature="int size()" class="org.apache.xerces.impl.xs.XMLSchemaValidator$XPathMatcherStack" />
	<method signature="void clear()" class="org.apache.xerces.impl.xs.XMLSchemaValidator$XPathMatcherStack" />
	<method signature="org.apache.xerces.impl.xs.identity.XPathMatcher getMatcherAt(int)" class="org.apache.xerces.impl.xs.XMLSchemaValidator$XPathMatcherStack" />
	<method signature="void popContext()" class="org.apache.xerces.impl.xs.XMLSchemaValidator$XPathMatcherStack" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xs.XMLSchemaValidator$XPathMatcherStack" />
	<method signature="void addMatcher(org.apache.xerces.impl.xs.identity.XPathMatcher)" class="org.apache.xerces.impl.xs.XMLSchemaValidator$XPathMatcherStack" />
	<method signature="void pushContext()" class="org.apache.xerces.impl.xs.XMLSchemaValidator$XPathMatcherStack" />
	<method signature="int getMatcherCount()" class="org.apache.xerces.impl.xs.XMLSchemaValidator$XPathMatcherStack" />
	<class name="org.apache.xerces.xni.grammars.XMLGrammarDescription" />
	<method signature="java.lang.String getGrammarType()" class="org.apache.xerces.xni.grammars.XMLGrammarDescription" />
	<class name="org.xml.sax.SAXNotSupportedException" />
	<method signature="void &lt;init&gt;()" class="org.xml.sax.SAXNotSupportedException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.xml.sax.SAXNotSupportedException" />
	<class name="freemarker.ext.jython.JythonWrapper" />
	<method signature="void setUseCache(boolean)" class="freemarker.ext.jython.JythonWrapper" />
	<method signature="void &lt;init&gt;()" class="freemarker.ext.jython.JythonWrapper" />
	<method signature="freemarker.template.TemplateModel wrap(java.lang.Object)" class="freemarker.ext.jython.JythonWrapper" />
	<method signature="void setAttributesShadowItems(boolean)" class="freemarker.ext.jython.JythonWrapper" />
	<method signature="org.python.core.PyObject unwrap(freemarker.template.TemplateModel)" class="freemarker.ext.jython.JythonWrapper" />
	<class name="org.apache.xerces.parsers.StandardParserConfiguration" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable)" class="org.apache.xerces.parsers.StandardParserConfiguration" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable,org.apache.xerces.xni.grammars.XMLGrammarPool,org.apache.xerces.xni.parser.XMLComponentManager)" class="org.apache.xerces.parsers.StandardParserConfiguration" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.parsers.StandardParserConfiguration" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable,org.apache.xerces.xni.grammars.XMLGrammarPool)" class="org.apache.xerces.parsers.StandardParserConfiguration" />
	<class name="org.jfree.chart.entity.PlotEntity" />
	<method signature="void &lt;init&gt;(java.awt.Shape,org.jfree.chart.plot.Plot)" class="org.jfree.chart.entity.PlotEntity" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.entity.PlotEntity" />
	<method signature="org.jfree.chart.plot.Plot getPlot()" class="org.jfree.chart.entity.PlotEntity" />
	<method signature="int hashCode()" class="org.jfree.chart.entity.PlotEntity" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.entity.PlotEntity" />
	<method signature="java.lang.String toString()" class="org.jfree.chart.entity.PlotEntity" />
	<method signature="void &lt;init&gt;(java.awt.Shape,org.jfree.chart.plot.Plot,java.lang.String)" class="org.jfree.chart.entity.PlotEntity" />
	<method signature="void &lt;init&gt;(java.awt.Shape,org.jfree.chart.plot.Plot,java.lang.String,java.lang.String)" class="org.jfree.chart.entity.PlotEntity" />
	<class name="javax.xml.xpath.XPathExpression" />
	<method signature="java.lang.String evaluate(java.lang.Object)" class="javax.xml.xpath.XPathExpression" />
	<method signature="java.lang.Object evaluate(java.lang.Object,javax.xml.namespace.QName)" class="javax.xml.xpath.XPathExpression" />
	<method signature="java.lang.String evaluate(org.xml.sax.InputSource)" class="javax.xml.xpath.XPathExpression" />
	<method signature="java.lang.Object evaluate(org.xml.sax.InputSource,javax.xml.namespace.QName)" class="javax.xml.xpath.XPathExpression" />
	<class name="freemarker.ext.servlet.AllHttpScopesHashModel" />
	<method signature="void &lt;init&gt;(freemarker.template.ObjectWrapper,javax.servlet.ServletContext,javax.servlet.http.HttpServletRequest)" class="freemarker.ext.servlet.AllHttpScopesHashModel" />
	<method signature="void putUnlistedModel(java.lang.String,freemarker.template.TemplateModel)" class="freemarker.ext.servlet.AllHttpScopesHashModel" />
	<method signature="freemarker.template.TemplateModel get(java.lang.String)" class="freemarker.ext.servlet.AllHttpScopesHashModel" />
	<class name="org.jfree.chart.entity.PieSectionEntity" />
	<method signature="void setPieIndex(int)" class="org.jfree.chart.entity.PieSectionEntity" />
	<method signature="int hashCode()" class="org.jfree.chart.entity.PieSectionEntity" />
	<method signature="void &lt;init&gt;(java.awt.Shape,org.jfree.data.general.PieDataset,int,int,java.lang.Comparable,java.lang.String,java.lang.String)" class="org.jfree.chart.entity.PieSectionEntity" />
	<method signature="int getSectionIndex()" class="org.jfree.chart.entity.PieSectionEntity" />
	<method signature="void setDataset(org.jfree.data.general.PieDataset)" class="org.jfree.chart.entity.PieSectionEntity" />
	<method signature="void setSectionKey(java.lang.Comparable)" class="org.jfree.chart.entity.PieSectionEntity" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.entity.PieSectionEntity" />
	<method signature="int getPieIndex()" class="org.jfree.chart.entity.PieSectionEntity" />
	<method signature="java.lang.String toString()" class="org.jfree.chart.entity.PieSectionEntity" />
	<method signature="void setSectionIndex(int)" class="org.jfree.chart.entity.PieSectionEntity" />
	<method signature="org.jfree.data.general.PieDataset getDataset()" class="org.jfree.chart.entity.PieSectionEntity" />
	<method signature="java.lang.Comparable getSectionKey()" class="org.jfree.chart.entity.PieSectionEntity" />
	<class name="javax.xml.stream.Location" />
	<method signature="java.lang.String getSystemId()" class="javax.xml.stream.Location" />
	<method signature="int getCharacterOffset()" class="javax.xml.stream.Location" />
	<method signature="int getLineNumber()" class="javax.xml.stream.Location" />
	<method signature="int getColumnNumber()" class="javax.xml.stream.Location" />
	<method signature="java.lang.String getPublicId()" class="javax.xml.stream.Location" />
	<class name="com.toedter.components.JTitlePanel" />
	<method signature="void &lt;init&gt;(java.lang.String,javax.swing.Icon,javax.swing.JComponent,javax.swing.border.Border)" class="com.toedter.components.JTitlePanel" />
	<method signature="void setTitle(java.lang.String,javax.swing.Icon)" class="com.toedter.components.JTitlePanel" />
	<class name="org.jfree.chart.plot.RainbowPalette" />
	<method signature="void initialize()" class="org.jfree.chart.plot.RainbowPalette" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.plot.RainbowPalette" />
	<class name="org.jfree.util.StringUtils" />
	<method signature="java.lang.String getLineSeparator()" class="org.jfree.util.StringUtils" />
	<method signature="boolean endsWithIgnoreCase(java.lang.String,java.lang.String)" class="org.jfree.util.StringUtils" />
	<method signature="boolean startsWithIgnoreCase(java.lang.String,java.lang.String)" class="org.jfree.util.StringUtils" />
	<class name="javax.xml.bind.TypeConstraintException" />
	<method signature="java.lang.Throwable getLinkedException()" class="javax.xml.bind.TypeConstraintException" />
	<method signature="void setLinkedException(java.lang.Throwable)" class="javax.xml.bind.TypeConstraintException" />
	<method signature="void &lt;init&gt;(java.lang.Throwable)" class="javax.xml.bind.TypeConstraintException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Throwable)" class="javax.xml.bind.TypeConstraintException" />
	<method signature="java.lang.String getErrorCode()" class="javax.xml.bind.TypeConstraintException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.Throwable)" class="javax.xml.bind.TypeConstraintException" />
	<method signature="java.lang.String toString()" class="javax.xml.bind.TypeConstraintException" />
	<method signature="void printStackTrace(java.io.PrintStream)" class="javax.xml.bind.TypeConstraintException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="javax.xml.bind.TypeConstraintException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="javax.xml.bind.TypeConstraintException" />
	<method signature="void printStackTrace()" class="javax.xml.bind.TypeConstraintException" />
	<class name="org.apache.wml.WMLTrElement" />
	<class name="org.jfree.data.time.RegularTimePeriod" />
	<method signature="org.jfree.data.time.RegularTimePeriod previous()" class="org.jfree.data.time.RegularTimePeriod" />
	<method signature="long getMiddleMillisecond()" class="org.jfree.data.time.RegularTimePeriod" />
	<method signature="long getLastMillisecond()" class="org.jfree.data.time.RegularTimePeriod" />
	<method signature="org.jfree.data.time.RegularTimePeriod createInstance(java.lang.Class,java.util.Date,java.util.TimeZone)" class="org.jfree.data.time.RegularTimePeriod" />
	<method signature="org.jfree.data.time.RegularTimePeriod next()" class="org.jfree.data.time.RegularTimePeriod" />
	<method signature="long getLastMillisecond(java.util.Calendar)" class="org.jfree.data.time.RegularTimePeriod" />
	<method signature="long getLastMillisecond(java.util.TimeZone)" class="org.jfree.data.time.RegularTimePeriod" />
	<method signature="long getMiddleMillisecond(java.util.TimeZone)" class="org.jfree.data.time.RegularTimePeriod" />
	<method signature="long getMiddleMillisecond(java.util.Calendar)" class="org.jfree.data.time.RegularTimePeriod" />
	<method signature="java.util.Date getEnd()" class="org.jfree.data.time.RegularTimePeriod" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.time.RegularTimePeriod" />
	<method signature="void peg(java.util.Calendar)" class="org.jfree.data.time.RegularTimePeriod" />
	<method signature="long getFirstMillisecond()" class="org.jfree.data.time.RegularTimePeriod" />
	<method signature="long getFirstMillisecond(java.util.TimeZone)" class="org.jfree.data.time.RegularTimePeriod" />
	<method signature="java.lang.String toString()" class="org.jfree.data.time.RegularTimePeriod" />
	<method signature="java.lang.Class downsize(java.lang.Class)" class="org.jfree.data.time.RegularTimePeriod" />
	<method signature="long getFirstMillisecond(java.util.Calendar)" class="org.jfree.data.time.RegularTimePeriod" />
	<method signature="long getSerialIndex()" class="org.jfree.data.time.RegularTimePeriod" />
	<method signature="java.util.Date getStart()" class="org.jfree.data.time.RegularTimePeriod" />
	<class name="com.google.zxing.oned.rss.expanded.RSSExpandedReader" />
	<method signature="void reset()" class="com.google.zxing.oned.rss.expanded.RSSExpandedReader" />
	<method signature="com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map)" class="com.google.zxing.oned.rss.expanded.RSSExpandedReader" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.oned.rss.expanded.RSSExpandedReader" />
	<class name="tourma.JdgTeamPairing" />
	<method signature="void &lt;init&gt;(java.awt.Frame,boolean,java.util.ArrayList,java.util.ArrayList,tourma.data.Round)" class="tourma.JdgTeamPairing" />
	<class name="org.jfree.chart.demo.PieChartDemo1" />
	<method signature="javax.swing.JPanel createDemoPanel()" class="org.jfree.chart.demo.PieChartDemo1" />
	<method signature="void main(java.lang.String[])" class="org.jfree.chart.demo.PieChartDemo1" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.chart.demo.PieChartDemo1" />
	<class name="teamma.data.Skill" />
	<method signature="void setmColor(java.awt.Color)" class="teamma.data.Skill" />
	<method signature="void &lt;init&gt;(teamma.data.Skill)" class="teamma.data.Skill" />
	<method signature="void setmName(java.lang.String)" class="teamma.data.Skill" />
	<method signature="void setmCategory(teamma.data.SkillType)" class="teamma.data.Skill" />
	<method signature="java.awt.Color getmColor()" class="teamma.data.Skill" />
	<method signature="java.lang.String getmName()" class="teamma.data.Skill" />
	<method signature="teamma.data.SkillType getmCategory()" class="teamma.data.Skill" />
	<method signature="void &lt;init&gt;(java.lang.String,teamma.data.SkillType)" class="teamma.data.Skill" />
	<class name="org.xml.sax.ext.Attributes2" />
	<method signature="boolean isDeclared(java.lang.String,java.lang.String)" class="org.xml.sax.ext.Attributes2" />
	<method signature="boolean isSpecified(java.lang.String)" class="org.xml.sax.ext.Attributes2" />
	<method signature="boolean isDeclared(int)" class="org.xml.sax.ext.Attributes2" />
	<method signature="boolean isSpecified(java.lang.String,java.lang.String)" class="org.xml.sax.ext.Attributes2" />
	<method signature="boolean isSpecified(int)" class="org.xml.sax.ext.Attributes2" />
	<method signature="boolean isDeclared(java.lang.String)" class="org.xml.sax.ext.Attributes2" />
	<class name="org.jfree.chart.renderer.category.LineAndShapeRenderer" />
	<method signature="java.lang.Boolean getShapesVisible()" class="org.jfree.chart.renderer.category.LineAndShapeRenderer" />
	<method signature="int getPassCount()" class="org.jfree.chart.renderer.category.LineAndShapeRenderer" />
	<method signature="void setShapesVisible(java.lang.Boolean)" class="org.jfree.chart.renderer.category.LineAndShapeRenderer" />
	<method signature="void setDrawOutlines(boolean)" class="org.jfree.chart.renderer.category.LineAndShapeRenderer" />
	<method signature="void setItemMargin(double)" class="org.jfree.chart.renderer.category.LineAndShapeRenderer" />
	<method signature="void setBaseShapesFilled(boolean)" class="org.jfree.chart.renderer.category.LineAndShapeRenderer" />
	<method signature="void setSeriesShapesFilled(int,boolean)" class="org.jfree.chart.renderer.category.LineAndShapeRenderer" />
	<method signature="java.lang.Boolean getSeriesShapesVisible(int)" class="org.jfree.chart.renderer.category.LineAndShapeRenderer" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.renderer.category.LineAndShapeRenderer" />
	<method signature="org.jfree.chart.LegendItem getLegendItem(int,int)" class="org.jfree.chart.renderer.category.LineAndShapeRenderer" />
	<method signature="java.lang.Boolean getLinesVisible()" class="org.jfree.chart.renderer.category.LineAndShapeRenderer" />
	<method signature="boolean getUseSeriesOffset()" class="org.jfree.chart.renderer.category.LineAndShapeRenderer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.category.LineAndShapeRenderer" />
	<method signature="boolean getItemShapeVisible(int,int)" class="org.jfree.chart.renderer.category.LineAndShapeRenderer" />
	<method signature="void setUseFillPaint(boolean)" class="org.jfree.chart.renderer.category.LineAndShapeRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.category.LineAndShapeRenderer" />
	<method signature="boolean getBaseLinesVisible()" class="org.jfree.chart.renderer.category.LineAndShapeRenderer" />
	<method signature="void setSeriesShapesFilled(int,java.lang.Boolean)" class="org.jfree.chart.renderer.category.LineAndShapeRenderer" />
	<method signature="boolean getBaseShapesVisible()" class="org.jfree.chart.renderer.category.LineAndShapeRenderer" />
	<method signature="double getItemMargin()" class="org.jfree.chart.renderer.category.LineAndShapeRenderer" />
	<method signature="void &lt;init&gt;(boolean,boolean)" class="org.jfree.chart.renderer.category.LineAndShapeRenderer" />
	<method signature="boolean getItemShapeFilled(int,int)" class="org.jfree.chart.renderer.category.LineAndShapeRenderer" />
	<method signature="boolean getUseFillPaint()" class="org.jfree.chart.renderer.category.LineAndShapeRenderer" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)" class="org.jfree.chart.renderer.category.LineAndShapeRenderer" />
	<method signature="void setShapesVisible(boolean)" class="org.jfree.chart.renderer.category.LineAndShapeRenderer" />
	<method signature="void setUseOutlinePaint(boolean)" class="org.jfree.chart.renderer.category.LineAndShapeRenderer" />
	<method signature="boolean getUseOutlinePaint()" class="org.jfree.chart.renderer.category.LineAndShapeRenderer" />
	<method signature="void setLinesVisible(java.lang.Boolean)" class="org.jfree.chart.renderer.category.LineAndShapeRenderer" />
	<method signature="void setSeriesLinesVisible(int,java.lang.Boolean)" class="org.jfree.chart.renderer.category.LineAndShapeRenderer" />
	<method signature="void setSeriesShapesVisible(int,boolean)" class="org.jfree.chart.renderer.category.LineAndShapeRenderer" />
	<method signature="void setShapesFilled(boolean)" class="org.jfree.chart.renderer.category.LineAndShapeRenderer" />
	<method signature="boolean getDrawOutlines()" class="org.jfree.chart.renderer.category.LineAndShapeRenderer" />
	<method signature="boolean getItemLineVisible(int,int)" class="org.jfree.chart.renderer.category.LineAndShapeRenderer" />
	<method signature="void setUseSeriesOffset(boolean)" class="org.jfree.chart.renderer.category.LineAndShapeRenderer" />
	<method signature="void setBaseShapesVisible(boolean)" class="org.jfree.chart.renderer.category.LineAndShapeRenderer" />
	<method signature="java.lang.Boolean getSeriesLinesVisible(int)" class="org.jfree.chart.renderer.category.LineAndShapeRenderer" />
	<method signature="void setLinesVisible(boolean)" class="org.jfree.chart.renderer.category.LineAndShapeRenderer" />
	<method signature="void setSeriesLinesVisible(int,boolean)" class="org.jfree.chart.renderer.category.LineAndShapeRenderer" />
	<method signature="boolean getBaseShapesFilled()" class="org.jfree.chart.renderer.category.LineAndShapeRenderer" />
	<method signature="void setBaseLinesVisible(boolean)" class="org.jfree.chart.renderer.category.LineAndShapeRenderer" />
	<method signature="java.lang.Boolean getShapesFilled()" class="org.jfree.chart.renderer.category.LineAndShapeRenderer" />
	<method signature="void setShapesFilled(java.lang.Boolean)" class="org.jfree.chart.renderer.category.LineAndShapeRenderer" />
	<method signature="void setSeriesShapesVisible(int,java.lang.Boolean)" class="org.jfree.chart.renderer.category.LineAndShapeRenderer" />
	<method signature="boolean getSeriesShapesFilled(int)" class="org.jfree.chart.renderer.category.LineAndShapeRenderer" />
	<class name="org.jfree.layout.RadialLayout" />
	<method signature="void addLayoutComponent(java.awt.Component)" class="org.jfree.layout.RadialLayout" />
	<method signature="void addLayoutComponent(java.lang.String,java.awt.Component)" class="org.jfree.layout.RadialLayout" />
	<method signature="void &lt;init&gt;()" class="org.jfree.layout.RadialLayout" />
	<method signature="void layoutContainer(java.awt.Container)" class="org.jfree.layout.RadialLayout" />
	<method signature="void main(java.lang.String[])" class="org.jfree.layout.RadialLayout" />
	<method signature="java.lang.String toString()" class="org.jfree.layout.RadialLayout" />
	<method signature="void removeLayoutComponent(java.awt.Component)" class="org.jfree.layout.RadialLayout" />
	<method signature="java.awt.Dimension preferredLayoutSize(java.awt.Container)" class="org.jfree.layout.RadialLayout" />
	<method signature="java.awt.Dimension minimumLayoutSize(java.awt.Container)" class="org.jfree.layout.RadialLayout" />
	<method signature="void removeLayoutComponent(java.lang.String,java.awt.Component)" class="org.jfree.layout.RadialLayout" />
	<class name="org.apache.xerces.impl.xpath.regex.RegularExpression" />
	<method signature="boolean matches(char[],int,int,org.apache.xerces.impl.xpath.regex.Match)" class="org.apache.xerces.impl.xpath.regex.RegularExpression" />
	<method signature="boolean matches(java.lang.String)" class="org.apache.xerces.impl.xpath.regex.RegularExpression" />
	<method signature="boolean matches(java.lang.String,int,int,org.apache.xerces.impl.xpath.regex.Match)" class="org.apache.xerces.impl.xpath.regex.RegularExpression" />
	<method signature="boolean matches(java.lang.String,org.apache.xerces.impl.xpath.regex.Match)" class="org.apache.xerces.impl.xpath.regex.RegularExpression" />
	<method signature="void setPattern(java.lang.String,java.lang.String,java.util.Locale)" class="org.apache.xerces.impl.xpath.regex.RegularExpression" />
	<method signature="void setPattern(java.lang.String)" class="org.apache.xerces.impl.xpath.regex.RegularExpression" />
	<method signature="void setPattern(java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xpath.regex.RegularExpression" />
	<method signature="void setPattern(java.lang.String,java.util.Locale)" class="org.apache.xerces.impl.xpath.regex.RegularExpression" />
	<method signature="boolean equals(java.lang.Object)" class="org.apache.xerces.impl.xpath.regex.RegularExpression" />
	<method signature="boolean matches(char[],int,int)" class="org.apache.xerces.impl.xpath.regex.RegularExpression" />
	<method signature="boolean matches(char[],org.apache.xerces.impl.xpath.regex.Match)" class="org.apache.xerces.impl.xpath.regex.RegularExpression" />
	<method signature="int getNumberOfGroups()" class="org.apache.xerces.impl.xpath.regex.RegularExpression" />
	<method signature="boolean matches(char[])" class="org.apache.xerces.impl.xpath.regex.RegularExpression" />
	<method signature="boolean matches(java.lang.String,int,int)" class="org.apache.xerces.impl.xpath.regex.RegularExpression" />
	<method signature="int hashCode()" class="org.apache.xerces.impl.xpath.regex.RegularExpression" />
	<method signature="boolean matches(java.text.CharacterIterator)" class="org.apache.xerces.impl.xpath.regex.RegularExpression" />
	<method signature="boolean matches(java.text.CharacterIterator,org.apache.xerces.impl.xpath.regex.Match)" class="org.apache.xerces.impl.xpath.regex.RegularExpression" />
	<method signature="java.lang.String toString()" class="org.apache.xerces.impl.xpath.regex.RegularExpression" />
	<method signature="java.lang.String getOptions()" class="org.apache.xerces.impl.xpath.regex.RegularExpression" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.apache.xerces.impl.xpath.regex.RegularExpression" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xpath.regex.RegularExpression" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.util.Locale)" class="org.apache.xerces.impl.xpath.regex.RegularExpression" />
	<method signature="java.lang.String getPattern()" class="org.apache.xerces.impl.xpath.regex.RegularExpression" />
	<class name="org.apache.xerces.impl.xs.util.XSGrammarPool" />
	<method signature="org.apache.xerces.xs.XSModel toXSModel(short)" class="org.apache.xerces.impl.xs.util.XSGrammarPool" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xs.util.XSGrammarPool" />
	<method signature="org.apache.xerces.xs.XSModel toXSModel()" class="org.apache.xerces.impl.xs.util.XSGrammarPool" />
	<class name="edu.umd.cs.findbugs.annotations.Nullable" />
	<class name="org.apache.xerces.impl.xs.XMLSchemaValidator$XSIErrorReporter" />
	<method signature="void reset(org.apache.xerces.impl.XMLErrorReporter)" class="org.apache.xerces.impl.xs.XMLSchemaValidator$XSIErrorReporter" />
	<method signature="java.lang.String[] popContext()" class="org.apache.xerces.impl.xs.XMLSchemaValidator$XSIErrorReporter" />
	<method signature="void reportError(java.lang.String,java.lang.String,java.lang.Object[],short)" class="org.apache.xerces.impl.xs.XMLSchemaValidator$XSIErrorReporter" />
	<method signature="void pushContext()" class="org.apache.xerces.impl.xs.XMLSchemaValidator$XSIErrorReporter" />
	<method signature="void reportError(org.apache.xerces.xni.XMLLocator,java.lang.String,java.lang.String,java.lang.Object[],short)" class="org.apache.xerces.impl.xs.XMLSchemaValidator$XSIErrorReporter" />
	<method signature="java.lang.String[] mergeContext()" class="org.apache.xerces.impl.xs.XMLSchemaValidator$XSIErrorReporter" />
	<class name="org.apache.xerces.util.ParserConfigurationSettings" />
	<method signature="void addRecognizedProperties(java.lang.String[])" class="org.apache.xerces.util.ParserConfigurationSettings" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.util.ParserConfigurationSettings" />
	<method signature="boolean getFeature(java.lang.String)" class="org.apache.xerces.util.ParserConfigurationSettings" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="org.apache.xerces.util.ParserConfigurationSettings" />
	<method signature="void &lt;init&gt;(org.apache.xerces.xni.parser.XMLComponentManager)" class="org.apache.xerces.util.ParserConfigurationSettings" />
	<method signature="void addRecognizedFeatures(java.lang.String[])" class="org.apache.xerces.util.ParserConfigurationSettings" />
	<method signature="void setFeature(java.lang.String,boolean)" class="org.apache.xerces.util.ParserConfigurationSettings" />
	<method signature="java.lang.Object getProperty(java.lang.String)" class="org.apache.xerces.util.ParserConfigurationSettings" />
	<class name="org.jfree.chart.plot.JThermometer" />
	<method signature="void setValueFormat(java.text.DecimalFormat)" class="org.jfree.chart.plot.JThermometer" />
	<method signature="void setValueFont(java.awt.Font)" class="org.jfree.chart.plot.JThermometer" />
	<method signature="void changeTickFontSize(int)" class="org.jfree.chart.plot.JThermometer" />
	<method signature="void setTickFontStyle(int)" class="org.jfree.chart.plot.JThermometer" />
	<method signature="void setValue(double)" class="org.jfree.chart.plot.JThermometer" />
	<method signature="void setOutlinePaint(java.awt.Paint)" class="org.jfree.chart.plot.JThermometer" />
	<method signature="void setTickLabelFont(java.awt.Font)" class="org.jfree.chart.plot.JThermometer" />
	<method signature="java.awt.Font getTickLabelFont()" class="org.jfree.chart.plot.JThermometer" />
	<method signature="void addSubtitle(org.jfree.chart.title.Title)" class="org.jfree.chart.plot.JThermometer" />
	<method signature="void setFollowDataInSubranges(boolean)" class="org.jfree.chart.plot.JThermometer" />
	<method signature="void addSubtitle(java.lang.String)" class="org.jfree.chart.plot.JThermometer" />
	<method signature="void setSubrangeInfo(int,double,double)" class="org.jfree.chart.plot.JThermometer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.plot.JThermometer" />
	<method signature="void setShowValueLines(boolean)" class="org.jfree.chart.plot.JThermometer" />
	<method signature="int getShowAxisLocation()" class="org.jfree.chart.plot.JThermometer" />
	<method signature="void setSubrangeInfo(int,double,double,double,double)" class="org.jfree.chart.plot.JThermometer" />
	<method signature="void setBackground(java.awt.Color)" class="org.jfree.chart.plot.JThermometer" />
	<method signature="void setUnits(int)" class="org.jfree.chart.plot.JThermometer" />
	<method signature="java.lang.Number getValue()" class="org.jfree.chart.plot.JThermometer" />
	<method signature="void addSubtitle(java.lang.String,java.awt.Font)" class="org.jfree.chart.plot.JThermometer" />
	<method signature="void setValuePaint(java.awt.Paint)" class="org.jfree.chart.plot.JThermometer" />
	<method signature="void setShowAxisLocation(int)" class="org.jfree.chart.plot.JThermometer" />
	<method signature="void setValue(java.lang.Number)" class="org.jfree.chart.plot.JThermometer" />
	<method signature="void setRange(double,double)" class="org.jfree.chart.plot.JThermometer" />
	<method signature="void setValueLocation(int)" class="org.jfree.chart.plot.JThermometer" />
	<method signature="void setForeground(java.awt.Color)" class="org.jfree.chart.plot.JThermometer" />
	<class name="com.hexidec.ekit.component.JToggleButtonNoFocus" />
	<method signature="void &lt;init&gt;(javax.swing.Icon)" class="com.hexidec.ekit.component.JToggleButtonNoFocus" />
	<method signature="boolean isFocusable()" class="com.hexidec.ekit.component.JToggleButtonNoFocus" />
	<method signature="void &lt;init&gt;()" class="com.hexidec.ekit.component.JToggleButtonNoFocus" />
	<method signature="void &lt;init&gt;(javax.swing.Action)" class="com.hexidec.ekit.component.JToggleButtonNoFocus" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="com.hexidec.ekit.component.JToggleButtonNoFocus" />
	<method signature="void &lt;init&gt;(java.lang.String,javax.swing.Icon)" class="com.hexidec.ekit.component.JToggleButtonNoFocus" />
	<class name="org.jdom2.internal.ReflectionConstructor" />
	<method signature="java.lang.Object construct(java.lang.String,java.lang.Class)" class="org.jdom2.internal.ReflectionConstructor" />
	<method signature="void &lt;init&gt;()" class="org.jdom2.internal.ReflectionConstructor" />
	<class name="org.jfree.chart.event.PlotChangeEvent" />
	<method signature="org.jfree.chart.plot.Plot getPlot()" class="org.jfree.chart.event.PlotChangeEvent" />
	<method signature="void &lt;init&gt;(org.jfree.chart.plot.Plot)" class="org.jfree.chart.event.PlotChangeEvent" />
	<class name="javax.xml.stream.events.Attribute" />
	<method signature="boolean isSpecified()" class="javax.xml.stream.events.Attribute" />
	<method signature="java.lang.String getDTDType()" class="javax.xml.stream.events.Attribute" />
	<method signature="java.lang.String getValue()" class="javax.xml.stream.events.Attribute" />
	<method signature="javax.xml.namespace.QName getName()" class="javax.xml.stream.events.Attribute" />
	<class name="org.jfree.chart.urls.StandardCategoryURLGenerator" />
	<method signature="java.lang.String generateURL(org.jfree.data.category.CategoryDataset,int,int)" class="org.jfree.chart.urls.StandardCategoryURLGenerator" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.urls.StandardCategoryURLGenerator" />
	<method signature="int hashCode()" class="org.jfree.chart.urls.StandardCategoryURLGenerator" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.urls.StandardCategoryURLGenerator" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.urls.StandardCategoryURLGenerator" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.chart.urls.StandardCategoryURLGenerator" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String)" class="org.jfree.chart.urls.StandardCategoryURLGenerator" />
	<class name="org.jfree.data.xy.XYDomainInfo" />
	<method signature="org.jfree.data.Range getDomainBounds(java.util.List,boolean)" class="org.jfree.data.xy.XYDomainInfo" />
	<class name="org.jfree.chart.axis.ExtendedCategoryAxis" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.axis.ExtendedCategoryAxis" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.axis.ExtendedCategoryAxis" />
	<method signature="void setSubLabelFont(java.awt.Font)" class="org.jfree.chart.axis.ExtendedCategoryAxis" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.chart.axis.ExtendedCategoryAxis" />
	<method signature="void setSubLabelPaint(java.awt.Paint)" class="org.jfree.chart.axis.ExtendedCategoryAxis" />
	<method signature="java.awt.Font getSubLabelFont()" class="org.jfree.chart.axis.ExtendedCategoryAxis" />
	<method signature="java.awt.Paint getSubLabelPaint()" class="org.jfree.chart.axis.ExtendedCategoryAxis" />
	<method signature="void addSubLabel(java.lang.Comparable,java.lang.String)" class="org.jfree.chart.axis.ExtendedCategoryAxis" />
	<class name="org.apache.commons.lang3.CharSetUtils" />
	<method signature="java.lang.String squeeze(java.lang.String,java.lang.String[])" class="org.apache.commons.lang3.CharSetUtils" />
	<method signature="int count(java.lang.String,java.lang.String[])" class="org.apache.commons.lang3.CharSetUtils" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.CharSetUtils" />
	<method signature="java.lang.String keep(java.lang.String,java.lang.String[])" class="org.apache.commons.lang3.CharSetUtils" />
	<method signature="java.lang.String delete(java.lang.String,java.lang.String[])" class="org.apache.commons.lang3.CharSetUtils" />
	<method signature="boolean containsAny(java.lang.String,java.lang.String[])" class="org.apache.commons.lang3.CharSetUtils" />
	<class name="org.apache.xerces.util.XMLCatalogResolver" />
	<method signature="org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.util.XMLCatalogResolver" />
	<method signature="void setPreferPublic(boolean)" class="org.apache.xerces.util.XMLCatalogResolver" />
	<method signature="org.w3c.dom.ls.LSInput resolveResource(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.util.XMLCatalogResolver" />
	<method signature="java.lang.String[] getCatalogList()" class="org.apache.xerces.util.XMLCatalogResolver" />
	<method signature="void setCatalogList(java.lang.String[])" class="org.apache.xerces.util.XMLCatalogResolver" />
	<method signature="org.xml.sax.InputSource getExternalSubset(java.lang.String,java.lang.String)" class="org.apache.xerces.util.XMLCatalogResolver" />
	<method signature="void &lt;init&gt;(java.lang.String[],boolean)" class="org.apache.xerces.util.XMLCatalogResolver" />
	<method signature="org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)" class="org.apache.xerces.util.XMLCatalogResolver" />
	<method signature="java.lang.String resolveIdentifier(org.apache.xerces.xni.XMLResourceIdentifier)" class="org.apache.xerces.util.XMLCatalogResolver" />
	<method signature="void setUseLiteralSystemId(boolean)" class="org.apache.xerces.util.XMLCatalogResolver" />
	<method signature="java.lang.String resolveSystem(java.lang.String)" class="org.apache.xerces.util.XMLCatalogResolver" />
	<method signature="void &lt;init&gt;(java.lang.String[])" class="org.apache.xerces.util.XMLCatalogResolver" />
	<method signature="void clear()" class="org.apache.xerces.util.XMLCatalogResolver" />
	<method signature="boolean getPreferPublic()" class="org.apache.xerces.util.XMLCatalogResolver" />
	<method signature="boolean getUseLiteralSystemId()" class="org.apache.xerces.util.XMLCatalogResolver" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.util.XMLCatalogResolver" />
	<method signature="org.apache.xerces.xni.parser.XMLInputSource resolveEntity(org.apache.xerces.xni.XMLResourceIdentifier)" class="org.apache.xerces.util.XMLCatalogResolver" />
	<method signature="java.lang.String resolvePublic(java.lang.String,java.lang.String)" class="org.apache.xerces.util.XMLCatalogResolver" />
	<method signature="java.lang.String resolveURI(java.lang.String)" class="org.apache.xerces.util.XMLCatalogResolver" />
	<class name="javax.xml.bind.util.JAXBSource" />
	<method signature="void &lt;init&gt;(javax.xml.bind.Marshaller,java.lang.Object)" class="javax.xml.bind.util.JAXBSource" />
	<method signature="void &lt;init&gt;(javax.xml.bind.JAXBContext,java.lang.Object)" class="javax.xml.bind.util.JAXBSource" />
	<class name="org.apache.wml.WMLBigElement" />
	<method signature="java.lang.String getXmlLang()" class="org.apache.wml.WMLBigElement" />
	<method signature="void setXmlLang(java.lang.String)" class="org.apache.wml.WMLBigElement" />
	<class name="org.apache.commons.lang3.text.WordUtils" />
	<method signature="java.lang.String uncapitalize(java.lang.String,char[])" class="org.apache.commons.lang3.text.WordUtils" />
	<method signature="java.lang.String uncapitalize(java.lang.String)" class="org.apache.commons.lang3.text.WordUtils" />
	<method signature="java.lang.String swapCase(java.lang.String)" class="org.apache.commons.lang3.text.WordUtils" />
	<method signature="java.lang.String capitalizeFully(java.lang.String,char[])" class="org.apache.commons.lang3.text.WordUtils" />
	<method signature="java.lang.String capitalizeFully(java.lang.String)" class="org.apache.commons.lang3.text.WordUtils" />
	<method signature="java.lang.String wrap(java.lang.String,int)" class="org.apache.commons.lang3.text.WordUtils" />
	<method signature="java.lang.String initials(java.lang.String)" class="org.apache.commons.lang3.text.WordUtils" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.text.WordUtils" />
	<method signature="java.lang.String initials(java.lang.String,char[])" class="org.apache.commons.lang3.text.WordUtils" />
	<method signature="java.lang.String capitalize(java.lang.String)" class="org.apache.commons.lang3.text.WordUtils" />
	<method signature="java.lang.String wrap(java.lang.String,int,java.lang.String,boolean)" class="org.apache.commons.lang3.text.WordUtils" />
	<method signature="java.lang.String capitalize(java.lang.String,char[])" class="org.apache.commons.lang3.text.WordUtils" />
	<class name="org.jfree.chart.renderer.xy.XYShapeRenderer" />
	<method signature="void setGuideLinePaint(java.awt.Paint)" class="org.jfree.chart.renderer.xy.XYShapeRenderer" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)" class="org.jfree.chart.renderer.xy.XYShapeRenderer" />
	<method signature="int getPassCount()" class="org.jfree.chart.renderer.xy.XYShapeRenderer" />
	<method signature="void setDrawOutlines(boolean)" class="org.jfree.chart.renderer.xy.XYShapeRenderer" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.renderer.xy.XYShapeRenderer" />
	<method signature="void setGuideLinesVisible(boolean)" class="org.jfree.chart.renderer.xy.XYShapeRenderer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.xy.XYShapeRenderer" />
	<method signature="void setUseFillPaint(boolean)" class="org.jfree.chart.renderer.xy.XYShapeRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.xy.XYShapeRenderer" />
	<method signature="org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset)" class="org.jfree.chart.renderer.xy.XYShapeRenderer" />
	<method signature="boolean getUseFillPaint()" class="org.jfree.chart.renderer.xy.XYShapeRenderer" />
	<method signature="org.jfree.chart.renderer.PaintScale getPaintScale()" class="org.jfree.chart.renderer.xy.XYShapeRenderer" />
	<method signature="java.awt.Stroke getGuideLineStroke()" class="org.jfree.chart.renderer.xy.XYShapeRenderer" />
	<method signature="void setUseOutlinePaint(boolean)" class="org.jfree.chart.renderer.xy.XYShapeRenderer" />
	<method signature="boolean getUseOutlinePaint()" class="org.jfree.chart.renderer.xy.XYShapeRenderer" />
	<method signature="org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)" class="org.jfree.chart.renderer.xy.XYShapeRenderer" />
	<method signature="void setGuideLineStroke(java.awt.Stroke)" class="org.jfree.chart.renderer.xy.XYShapeRenderer" />
	<method signature="void setPaintScale(org.jfree.chart.renderer.PaintScale)" class="org.jfree.chart.renderer.xy.XYShapeRenderer" />
	<method signature="org.jfree.data.Range findZBounds(org.jfree.data.xy.XYZDataset)" class="org.jfree.chart.renderer.xy.XYShapeRenderer" />
	<method signature="boolean getDrawOutlines()" class="org.jfree.chart.renderer.xy.XYShapeRenderer" />
	<method signature="boolean isGuideLinesVisible()" class="org.jfree.chart.renderer.xy.XYShapeRenderer" />
	<method signature="java.awt.Paint getGuideLinePaint()" class="org.jfree.chart.renderer.xy.XYShapeRenderer" />
	<class name="tourma.JdgParameters" />
	<method signature="void &lt;init&gt;(java.awt.Frame,boolean)" class="tourma.JdgParameters" />
	<class name="freemarker.ext.ant.UnlinkedJythonOperationsImpl" />
	<method signature="void execute(java.io.File,java.util.Map)" class="freemarker.ext.ant.UnlinkedJythonOperationsImpl" />
	<method signature="void &lt;init&gt;()" class="freemarker.ext.ant.UnlinkedJythonOperationsImpl" />
	<method signature="void execute(java.lang.String,java.util.Map)" class="freemarker.ext.ant.UnlinkedJythonOperationsImpl" />
	<class name="tourma.views.parameters.JPNParamGroup" />
	<method signature="void &lt;init&gt;()" class="tourma.views.parameters.JPNParamGroup" />
	<method signature="void update()" class="tourma.views.parameters.JPNParamGroup" />
	<class name="org.apache.commons.lang3.mutable.MutableLong" />
	<method signature="int compareTo(org.apache.commons.lang3.mutable.MutableLong)" class="org.apache.commons.lang3.mutable.MutableLong" />
	<method signature="java.lang.Long toLong()" class="org.apache.commons.lang3.mutable.MutableLong" />
	<method signature="void setValue(long)" class="org.apache.commons.lang3.mutable.MutableLong" />
	<method signature="void decrement()" class="org.apache.commons.lang3.mutable.MutableLong" />
	<method signature="void &lt;init&gt;(long)" class="org.apache.commons.lang3.mutable.MutableLong" />
	<method signature="java.lang.Long getValue()" class="org.apache.commons.lang3.mutable.MutableLong" />
	<method signature="int intValue()" class="org.apache.commons.lang3.mutable.MutableLong" />
	<method signature="boolean equals(java.lang.Object)" class="org.apache.commons.lang3.mutable.MutableLong" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.mutable.MutableLong" />
	<method signature="void setValue(java.lang.Object)" class="org.apache.commons.lang3.mutable.MutableLong" />
	<method signature="void subtract(long)" class="org.apache.commons.lang3.mutable.MutableLong" />
	<method signature="java.lang.Object getValue()" class="org.apache.commons.lang3.mutable.MutableLong" />
	<method signature="double doubleValue()" class="org.apache.commons.lang3.mutable.MutableLong" />
	<method signature="float floatValue()" class="org.apache.commons.lang3.mutable.MutableLong" />
	<method signature="void add(long)" class="org.apache.commons.lang3.mutable.MutableLong" />
	<method signature="int compareTo(java.lang.Object)" class="org.apache.commons.lang3.mutable.MutableLong" />
	<method signature="int hashCode()" class="org.apache.commons.lang3.mutable.MutableLong" />
	<method signature="void setValue(java.lang.Number)" class="org.apache.commons.lang3.mutable.MutableLong" />
	<method signature="void increment()" class="org.apache.commons.lang3.mutable.MutableLong" />
	<method signature="void &lt;init&gt;(java.lang.Number)" class="org.apache.commons.lang3.mutable.MutableLong" />
	<method signature="java.lang.String toString()" class="org.apache.commons.lang3.mutable.MutableLong" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.apache.commons.lang3.mutable.MutableLong" />
	<method signature="void add(java.lang.Number)" class="org.apache.commons.lang3.mutable.MutableLong" />
	<method signature="long longValue()" class="org.apache.commons.lang3.mutable.MutableLong" />
	<method signature="void subtract(java.lang.Number)" class="org.apache.commons.lang3.mutable.MutableLong" />
	<class name="org.apache.xerces.dom3.as.ElementEditAS" />
	<method signature="boolean canRemoveAttributeNode(org.w3c.dom.Node)" class="org.apache.xerces.dom3.as.ElementEditAS" />
	<method signature="org.w3c.dom.NodeList getDefinedElementTypes()" class="org.apache.xerces.dom3.as.ElementEditAS" />
	<method signature="short contentType()" class="org.apache.xerces.dom3.as.ElementEditAS" />
	<method signature="boolean isElementDefinedNS(java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.dom3.as.ElementEditAS" />
	<method signature="org.w3c.dom.NodeList getAttributeList()" class="org.apache.xerces.dom3.as.ElementEditAS" />
	<method signature="boolean canRemoveAttribute(java.lang.String)" class="org.apache.xerces.dom3.as.ElementEditAS" />
	<method signature="boolean canSetAttributeNS(java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.dom3.as.ElementEditAS" />
	<method signature="org.w3c.dom.NodeList getParentElements()" class="org.apache.xerces.dom3.as.ElementEditAS" />
	<method signature="boolean canSetAttributeNode(org.w3c.dom.Attr)" class="org.apache.xerces.dom3.as.ElementEditAS" />
	<method signature="boolean canRemoveAttributeNS(java.lang.String,java.lang.String)" class="org.apache.xerces.dom3.as.ElementEditAS" />
	<method signature="org.w3c.dom.NodeList getChildElements()" class="org.apache.xerces.dom3.as.ElementEditAS" />
	<method signature="boolean canSetAttribute(java.lang.String,java.lang.String)" class="org.apache.xerces.dom3.as.ElementEditAS" />
	<method signature="boolean isElementDefined(java.lang.String)" class="org.apache.xerces.dom3.as.ElementEditAS" />
	<class name="com.google.zxing.oned.rss.expanded.decoders.AbstractExpandedDecoder" />
	<method signature="java.lang.String parseInformation()" class="com.google.zxing.oned.rss.expanded.decoders.AbstractExpandedDecoder" />
	<method signature="com.google.zxing.oned.rss.expanded.decoders.AbstractExpandedDecoder createDecoder(com.google.zxing.common.BitArray)" class="com.google.zxing.oned.rss.expanded.decoders.AbstractExpandedDecoder" />
	<class name="net.java.dev.colorchooser.Palette" />
	<method signature="java.lang.String getNameAt(int,int)" class="net.java.dev.colorchooser.Palette" />
	<method signature="net.java.dev.colorchooser.Palette[] getDefaultPalettes(boolean)" class="net.java.dev.colorchooser.Palette" />
	<method signature="java.awt.Color getColorAt(int,int)" class="net.java.dev.colorchooser.Palette" />
	<method signature="java.awt.Dimension getSize()" class="net.java.dev.colorchooser.Palette" />
	<method signature="net.java.dev.colorchooser.Palette createPredefinedPalette(java.lang.String,java.awt.Color[],java.lang.String[])" class="net.java.dev.colorchooser.Palette" />
	<method signature="void paintTo(java.awt.Graphics)" class="net.java.dev.colorchooser.Palette" />
	<method signature="void &lt;init&gt;()" class="net.java.dev.colorchooser.Palette" />
	<method signature="java.lang.String getDisplayName()" class="net.java.dev.colorchooser.Palette" />
	<method signature="net.java.dev.colorchooser.Palette createContinuousPalette(java.lang.String,java.awt.Dimension,float)" class="net.java.dev.colorchooser.Palette" />
	<class name="com.google.zxing.oned.MultiFormatUPCEANReader" />
	<method signature="void reset()" class="com.google.zxing.oned.MultiFormatUPCEANReader" />
	<method signature="void &lt;init&gt;(java.util.Map)" class="com.google.zxing.oned.MultiFormatUPCEANReader" />
	<method signature="com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map)" class="com.google.zxing.oned.MultiFormatUPCEANReader" />
	<class name="com.toedter.calendar.JMonthChooserBeanInfo" />
	<method signature="void &lt;init&gt;()" class="com.toedter.calendar.JMonthChooserBeanInfo" />
	<class name="org.apache.wml.dom.WMLTableElementImpl" />
	<method signature="void setAlign(java.lang.String)" class="org.apache.wml.dom.WMLTableElementImpl" />
	<method signature="java.lang.String getXmlLang()" class="org.apache.wml.dom.WMLTableElementImpl" />
	<method signature="java.lang.String getId()" class="org.apache.wml.dom.WMLTableElementImpl" />
	<method signature="java.lang.String getAlign()" class="org.apache.wml.dom.WMLTableElementImpl" />
	<method signature="void setId(java.lang.String)" class="org.apache.wml.dom.WMLTableElementImpl" />
	<method signature="java.lang.String getTitle()" class="org.apache.wml.dom.WMLTableElementImpl" />
	<method signature="void setXmlLang(java.lang.String)" class="org.apache.wml.dom.WMLTableElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.wml.dom.WMLDocumentImpl,java.lang.String)" class="org.apache.wml.dom.WMLTableElementImpl" />
	<method signature="java.lang.String getClassName()" class="org.apache.wml.dom.WMLTableElementImpl" />
	<method signature="int getColumns()" class="org.apache.wml.dom.WMLTableElementImpl" />
	<method signature="void setClassName(java.lang.String)" class="org.apache.wml.dom.WMLTableElementImpl" />
	<method signature="void setColumns(int)" class="org.apache.wml.dom.WMLTableElementImpl" />
	<method signature="void setTitle(java.lang.String)" class="org.apache.wml.dom.WMLTableElementImpl" />
	<class name="org.jfree.chart.entity.LegendItemEntity" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.entity.LegendItemEntity" />
	<method signature="void setDataset(org.jfree.data.general.Dataset)" class="org.jfree.chart.entity.LegendItemEntity" />
	<method signature="void setSeriesKey(java.lang.Comparable)" class="org.jfree.chart.entity.LegendItemEntity" />
	<method signature="java.lang.Comparable getSeriesKey()" class="org.jfree.chart.entity.LegendItemEntity" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.entity.LegendItemEntity" />
	<method signature="org.jfree.data.general.Dataset getDataset()" class="org.jfree.chart.entity.LegendItemEntity" />
	<method signature="void setSeriesIndex(int)" class="org.jfree.chart.entity.LegendItemEntity" />
	<method signature="java.lang.String toString()" class="org.jfree.chart.entity.LegendItemEntity" />
	<method signature="int getSeriesIndex()" class="org.jfree.chart.entity.LegendItemEntity" />
	<method signature="void &lt;init&gt;(java.awt.Shape)" class="org.jfree.chart.entity.LegendItemEntity" />
	<class name="org.apache.commons.lang3.builder.Builder" />
	<method signature="java.lang.Object build()" class="org.apache.commons.lang3.builder.Builder" />
	<class name="org.jdom2.input.sax.SAXEngine" />
	<method signature="boolean getIgnoringElementContentWhitespace()" class="org.jdom2.input.sax.SAXEngine" />
	<method signature="boolean getIgnoringBoundaryWhitespace()" class="org.jdom2.input.sax.SAXEngine" />
	<method signature="org.xml.sax.ErrorHandler getErrorHandler()" class="org.jdom2.input.sax.SAXEngine" />
	<method signature="org.jdom2.Document build(java.io.InputStream,java.lang.String)" class="org.jdom2.input.sax.SAXEngine" />
	<method signature="org.xml.sax.DTDHandler getDTDHandler()" class="org.jdom2.input.sax.SAXEngine" />
	<method signature="org.xml.sax.EntityResolver getEntityResolver()" class="org.jdom2.input.sax.SAXEngine" />
	<method signature="boolean getExpandEntities()" class="org.jdom2.input.sax.SAXEngine" />
	<method signature="org.jdom2.Document build(java.lang.String)" class="org.jdom2.input.sax.SAXEngine" />
	<method signature="boolean isValidating()" class="org.jdom2.input.sax.SAXEngine" />
	<method signature="org.jdom2.Document build(java.io.File)" class="org.jdom2.input.sax.SAXEngine" />
	<method signature="org.jdom2.Document build(java.io.Reader)" class="org.jdom2.input.sax.SAXEngine" />
	<method signature="org.jdom2.Document build(org.xml.sax.InputSource)" class="org.jdom2.input.sax.SAXEngine" />
	<method signature="org.jdom2.Document build(java.net.URL)" class="org.jdom2.input.sax.SAXEngine" />
	<method signature="org.jdom2.Document build(java.io.Reader,java.lang.String)" class="org.jdom2.input.sax.SAXEngine" />
	<method signature="org.jdom2.JDOMFactory getJDOMFactory()" class="org.jdom2.input.sax.SAXEngine" />
	<method signature="org.jdom2.Document build(java.io.InputStream)" class="org.jdom2.input.sax.SAXEngine" />
	<class name="org.jfree.data.time.SimpleTimePeriod" />
	<method signature="void &lt;init&gt;(java.util.Date,java.util.Date)" class="org.jfree.data.time.SimpleTimePeriod" />
	<method signature="int compareTo(java.lang.Object)" class="org.jfree.data.time.SimpleTimePeriod" />
	<method signature="long getEndMillis()" class="org.jfree.data.time.SimpleTimePeriod" />
	<method signature="int hashCode()" class="org.jfree.data.time.SimpleTimePeriod" />
	<method signature="java.util.Date getEnd()" class="org.jfree.data.time.SimpleTimePeriod" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.time.SimpleTimePeriod" />
	<method signature="long getStartMillis()" class="org.jfree.data.time.SimpleTimePeriod" />
	<method signature="void &lt;init&gt;(long,long)" class="org.jfree.data.time.SimpleTimePeriod" />
	<method signature="java.util.Date getStart()" class="org.jfree.data.time.SimpleTimePeriod" />
	<class name="org.jfree.data.general.WaferMapDataset" />
	<method signature="void setMaxChipY(int)" class="org.jfree.data.general.WaferMapDataset" />
	<method signature="void setChipSpace(double)" class="org.jfree.data.general.WaferMapDataset" />
	<method signature="void setMaxChipX(int)" class="org.jfree.data.general.WaferMapDataset" />
	<method signature="int getUniqueValueCount()" class="org.jfree.data.general.WaferMapDataset" />
	<method signature="double getChipSpace()" class="org.jfree.data.general.WaferMapDataset" />
	<method signature="java.lang.Number getMinValue()" class="org.jfree.data.general.WaferMapDataset" />
	<method signature="boolean isMaxValue(java.lang.Number)" class="org.jfree.data.general.WaferMapDataset" />
	<method signature="java.lang.Number getChipValue(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.general.WaferMapDataset" />
	<method signature="void &lt;init&gt;(int,int)" class="org.jfree.data.general.WaferMapDataset" />
	<method signature="void addValue(int,int,int)" class="org.jfree.data.general.WaferMapDataset" />
	<method signature="java.lang.Number getChipValue(int,int)" class="org.jfree.data.general.WaferMapDataset" />
	<method signature="void addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.general.WaferMapDataset" />
	<method signature="boolean isMinValue(java.lang.Number)" class="org.jfree.data.general.WaferMapDataset" />
	<method signature="java.lang.Number getMaxValue()" class="org.jfree.data.general.WaferMapDataset" />
	<method signature="java.util.Set getUniqueValues()" class="org.jfree.data.general.WaferMapDataset" />
	<method signature="int getMaxChipY()" class="org.jfree.data.general.WaferMapDataset" />
	<method signature="int getMaxChipX()" class="org.jfree.data.general.WaferMapDataset" />
	<method signature="void &lt;init&gt;(int,int,java.lang.Number)" class="org.jfree.data.general.WaferMapDataset" />
	<method signature="void setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.general.WaferMapDataset" />
	<class name="org.jfree.chart.renderer.xy.SamplingXYLineRenderer$State" />
	<method signature="void &lt;init&gt;(org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.renderer.xy.SamplingXYLineRenderer$State" />
	<method signature="void startSeriesPass(org.jfree.data.xy.XYDataset,int,int,int,int,int)" class="org.jfree.chart.renderer.xy.SamplingXYLineRenderer$State" />
	<class name="tourma.views.fullscreen.JFullScreenMatchs" />
	<method signature="javax.swing.JPanel createClashTeamPane(tourma.data.Team,tourma.data.TeamMatch,boolean)" class="tourma.views.fullscreen.JFullScreenMatchs" />
	<method signature="void &lt;init&gt;(tourma.data.Round,boolean)" class="tourma.views.fullscreen.JFullScreenMatchs" />
	<method signature="javax.swing.JPanel createClashCoachPane(tourma.data.Coach,int,boolean)" class="tourma.views.fullscreen.JFullScreenMatchs" />
	<method signature="void &lt;init&gt;(java.net.Socket,boolean)" class="tourma.views.fullscreen.JFullScreenMatchs" />
	<method signature="void &lt;init&gt;(tourma.data.Round)" class="tourma.views.fullscreen.JFullScreenMatchs" />
	<method signature="void &lt;init&gt;(java.net.Socket)" class="tourma.views.fullscreen.JFullScreenMatchs" />
	<class name="org.apache.xerces.impl.dv.xs.BooleanDV" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.xs.BooleanDV" />
	<method signature="java.lang.Object getActualValue(java.lang.String,org.apache.xerces.impl.dv.ValidationContext)" class="org.apache.xerces.impl.dv.xs.BooleanDV" />
	<method signature="short getAllowedFacets()" class="org.apache.xerces.impl.dv.xs.BooleanDV" />
	<class name="com.toedter.components.GenericBeanInfo" />
	<method signature="java.awt.Image getIcon(int)" class="com.toedter.components.GenericBeanInfo" />
	<method signature="void &lt;init&gt;(java.lang.String,boolean)" class="com.toedter.components.GenericBeanInfo" />
	<class name="org.jfree.data.resources.DataPackageResources" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.resources.DataPackageResources" />
	<method signature="java.lang.Object[][] getContents()" class="org.jfree.data.resources.DataPackageResources" />
	<class name="org.apache.xerces.impl.validation.EntityState" />
	<method signature="boolean isEntityDeclared(java.lang.String)" class="org.apache.xerces.impl.validation.EntityState" />
	<method signature="boolean isEntityUnparsed(java.lang.String)" class="org.apache.xerces.impl.validation.EntityState" />
	<class name="org.jdom2.output.support.AbstractFormattedWalker$MultiText" />
	<method signature="void appendRaw(org.jdom2.Content)" class="org.jdom2.output.support.AbstractFormattedWalker$MultiText" />
	<method signature="void appendCDATA(org.jdom2.output.support.AbstractFormattedWalker$Trim,java.lang.String)" class="org.jdom2.output.support.AbstractFormattedWalker$MultiText" />
	<method signature="void done()" class="org.jdom2.output.support.AbstractFormattedWalker$MultiText" />
	<method signature="void appendText(org.jdom2.output.support.AbstractFormattedWalker$Trim,java.lang.String)" class="org.jdom2.output.support.AbstractFormattedWalker$MultiText" />
	<class name="org.jdom2.output.support.AbstractStAXStreamProcessor" />
	<method signature="void process(javax.xml.stream.XMLStreamWriter,org.jdom2.output.Format,org.jdom2.EntityRef)" class="org.jdom2.output.support.AbstractStAXStreamProcessor" />
	<method signature="void process(javax.xml.stream.XMLStreamWriter,org.jdom2.output.Format,org.jdom2.Document)" class="org.jdom2.output.support.AbstractStAXStreamProcessor" />
	<method signature="void process(javax.xml.stream.XMLStreamWriter,org.jdom2.output.Format,org.jdom2.Text)" class="org.jdom2.output.support.AbstractStAXStreamProcessor" />
	<method signature="void process(javax.xml.stream.XMLStreamWriter,org.jdom2.output.Format,org.jdom2.DocType)" class="org.jdom2.output.support.AbstractStAXStreamProcessor" />
	<method signature="void process(javax.xml.stream.XMLStreamWriter,org.jdom2.output.Format,org.jdom2.Comment)" class="org.jdom2.output.support.AbstractStAXStreamProcessor" />
	<method signature="void process(javax.xml.stream.XMLStreamWriter,org.jdom2.output.Format,org.jdom2.Element)" class="org.jdom2.output.support.AbstractStAXStreamProcessor" />
	<method signature="void process(javax.xml.stream.XMLStreamWriter,org.jdom2.output.Format,org.jdom2.CDATA)" class="org.jdom2.output.support.AbstractStAXStreamProcessor" />
	<method signature="void process(javax.xml.stream.XMLStreamWriter,org.jdom2.output.Format,java.util.List)" class="org.jdom2.output.support.AbstractStAXStreamProcessor" />
	<method signature="void &lt;init&gt;()" class="org.jdom2.output.support.AbstractStAXStreamProcessor" />
	<method signature="void process(javax.xml.stream.XMLStreamWriter,org.jdom2.output.Format,org.jdom2.ProcessingInstruction)" class="org.jdom2.output.support.AbstractStAXStreamProcessor" />
	<class name="org.jfree.chart.entity.CategoryLabelEntity" />
	<method signature="int hashCode()" class="org.jfree.chart.entity.CategoryLabelEntity" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.entity.CategoryLabelEntity" />
	<method signature="java.lang.String toString()" class="org.jfree.chart.entity.CategoryLabelEntity" />
	<method signature="void &lt;init&gt;(java.lang.Comparable,java.awt.Shape,java.lang.String,java.lang.String)" class="org.jfree.chart.entity.CategoryLabelEntity" />
	<method signature="java.lang.Comparable getKey()" class="org.jfree.chart.entity.CategoryLabelEntity" />
	<class name="freemarker.ext.jython.JythonModel" />
	<method signature="java.lang.Object getAdaptedObject(java.lang.Class)" class="freemarker.ext.jython.JythonModel" />
	<method signature="void &lt;init&gt;(org.python.core.PyObject,freemarker.ext.jython.JythonWrapper)" class="freemarker.ext.jython.JythonModel" />
	<method signature="boolean isEmpty()" class="freemarker.ext.jython.JythonModel" />
	<method signature="java.lang.String getAsString()" class="freemarker.ext.jython.JythonModel" />
	<method signature="boolean getAsBoolean()" class="freemarker.ext.jython.JythonModel" />
	<method signature="java.lang.Object exec(java.util.List)" class="freemarker.ext.jython.JythonModel" />
	<method signature="java.lang.Object getWrappedObject()" class="freemarker.ext.jython.JythonModel" />
	<method signature="freemarker.template.TemplateModel get(java.lang.String)" class="freemarker.ext.jython.JythonModel" />
	<class name="freemarker.template.utility.StandardCompress" />
	<method signature="void &lt;init&gt;(int)" class="freemarker.template.utility.StandardCompress" />
	<method signature="void &lt;init&gt;()" class="freemarker.template.utility.StandardCompress" />
	<method signature="java.io.Writer getWriter(java.io.Writer,java.util.Map)" class="freemarker.template.utility.StandardCompress" />
	<class name="org.jfree.data.xy.XYCoordinate" />
	<method signature="int compareTo(java.lang.Object)" class="org.jfree.data.xy.XYCoordinate" />
	<method signature="double getY()" class="org.jfree.data.xy.XYCoordinate" />
	<method signature="int hashCode()" class="org.jfree.data.xy.XYCoordinate" />
	<method signature="double getX()" class="org.jfree.data.xy.XYCoordinate" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.xy.XYCoordinate" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.xy.XYCoordinate" />
	<method signature="java.lang.String toString()" class="org.jfree.data.xy.XYCoordinate" />
	<method signature="void &lt;init&gt;(double,double)" class="org.jfree.data.xy.XYCoordinate" />
	<class name="org.jdom2.DefaultJDOMFactory" />
	<method signature="org.jdom2.DocType docType(java.lang.String)" class="org.jdom2.DefaultJDOMFactory" />
	<method signature="org.jdom2.ProcessingInstruction processingInstruction(int,int,java.lang.String)" class="org.jdom2.DefaultJDOMFactory" />
	<method signature="org.jdom2.EntityRef entityRef(java.lang.String,java.lang.String,java.lang.String)" class="org.jdom2.DefaultJDOMFactory" />
	<method signature="org.jdom2.Element element(java.lang.String)" class="org.jdom2.DefaultJDOMFactory" />
	<method signature="org.jdom2.ProcessingInstruction processingInstruction(java.lang.String,java.util.Map)" class="org.jdom2.DefaultJDOMFactory" />
	<method signature="org.jdom2.Text text(int,int,java.lang.String)" class="org.jdom2.DefaultJDOMFactory" />
	<method signature="org.jdom2.Attribute attribute(java.lang.String,java.lang.String,int,org.jdom2.Namespace)" class="org.jdom2.DefaultJDOMFactory" />
	<method signature="org.jdom2.Document document(org.jdom2.Element,org.jdom2.DocType)" class="org.jdom2.DefaultJDOMFactory" />
	<method signature="org.jdom2.Attribute attribute(java.lang.String,java.lang.String,org.jdom2.AttributeType)" class="org.jdom2.DefaultJDOMFactory" />
	<method signature="org.jdom2.Attribute attribute(java.lang.String,java.lang.String,int)" class="org.jdom2.DefaultJDOMFactory" />
	<method signature="org.jdom2.DocType docType(java.lang.String,java.lang.String)" class="org.jdom2.DefaultJDOMFactory" />
	<method signature="void setAttribute(org.jdom2.Element,org.jdom2.Attribute)" class="org.jdom2.DefaultJDOMFactory" />
	<method signature="void &lt;init&gt;()" class="org.jdom2.DefaultJDOMFactory" />
	<method signature="org.jdom2.Element element(java.lang.String,java.lang.String,java.lang.String)" class="org.jdom2.DefaultJDOMFactory" />
	<method signature="org.jdom2.ProcessingInstruction processingInstruction(int,int,java.lang.String,java.util.Map)" class="org.jdom2.DefaultJDOMFactory" />
	<method signature="void addContent(org.jdom2.Parent,org.jdom2.Content)" class="org.jdom2.DefaultJDOMFactory" />
	<method signature="org.jdom2.EntityRef entityRef(int,int,java.lang.String)" class="org.jdom2.DefaultJDOMFactory" />
	<method signature="org.jdom2.EntityRef entityRef(int,int,java.lang.String,java.lang.String)" class="org.jdom2.DefaultJDOMFactory" />
	<method signature="org.jdom2.ProcessingInstruction processingInstruction(java.lang.String,java.lang.String)" class="org.jdom2.DefaultJDOMFactory" />
	<method signature="org.jdom2.EntityRef entityRef(java.lang.String,java.lang.String)" class="org.jdom2.DefaultJDOMFactory" />
	<method signature="org.jdom2.Attribute attribute(java.lang.String,java.lang.String,org.jdom2.AttributeType,org.jdom2.Namespace)" class="org.jdom2.DefaultJDOMFactory" />
	<method signature="org.jdom2.EntityRef entityRef(int,int,java.lang.String,java.lang.String,java.lang.String)" class="org.jdom2.DefaultJDOMFactory" />
	<method signature="void setRoot(org.jdom2.Document,org.jdom2.Element)" class="org.jdom2.DefaultJDOMFactory" />
	<method signature="org.jdom2.ProcessingInstruction processingInstruction(java.lang.String)" class="org.jdom2.DefaultJDOMFactory" />
	<method signature="org.jdom2.DocType docType(java.lang.String,java.lang.String,java.lang.String)" class="org.jdom2.DefaultJDOMFactory" />
	<method signature="org.jdom2.Comment comment(java.lang.String)" class="org.jdom2.DefaultJDOMFactory" />
	<method signature="org.jdom2.Element element(int,int,java.lang.String,org.jdom2.Namespace)" class="org.jdom2.DefaultJDOMFactory" />
	<method signature="org.jdom2.Text text(java.lang.String)" class="org.jdom2.DefaultJDOMFactory" />
	<method signature="org.jdom2.Element element(int,int,java.lang.String)" class="org.jdom2.DefaultJDOMFactory" />
	<method signature="org.jdom2.EntityRef entityRef(java.lang.String)" class="org.jdom2.DefaultJDOMFactory" />
	<method signature="org.jdom2.Attribute attribute(java.lang.String,java.lang.String)" class="org.jdom2.DefaultJDOMFactory" />
	<method signature="org.jdom2.DocType docType(int,int,java.lang.String,java.lang.String,java.lang.String)" class="org.jdom2.DefaultJDOMFactory" />
	<method signature="org.jdom2.DocType docType(int,int,java.lang.String,java.lang.String)" class="org.jdom2.DefaultJDOMFactory" />
	<method signature="org.jdom2.ProcessingInstruction processingInstruction(int,int,java.lang.String,java.lang.String)" class="org.jdom2.DefaultJDOMFactory" />
	<method signature="org.jdom2.Document document(org.jdom2.Element)" class="org.jdom2.DefaultJDOMFactory" />
	<method signature="org.jdom2.Comment comment(int,int,java.lang.String)" class="org.jdom2.DefaultJDOMFactory" />
	<method signature="org.jdom2.Element element(java.lang.String,org.jdom2.Namespace)" class="org.jdom2.DefaultJDOMFactory" />
	<method signature="org.jdom2.CDATA cdata(java.lang.String)" class="org.jdom2.DefaultJDOMFactory" />
	<method signature="org.jdom2.Document document(org.jdom2.Element,org.jdom2.DocType,java.lang.String)" class="org.jdom2.DefaultJDOMFactory" />
	<method signature="org.jdom2.Attribute attribute(java.lang.String,java.lang.String,org.jdom2.Namespace)" class="org.jdom2.DefaultJDOMFactory" />
	<method signature="org.jdom2.DocType docType(int,int,java.lang.String)" class="org.jdom2.DefaultJDOMFactory" />
	<method signature="org.jdom2.CDATA cdata(int,int,java.lang.String)" class="org.jdom2.DefaultJDOMFactory" />
	<method signature="org.jdom2.Element element(int,int,java.lang.String,java.lang.String)" class="org.jdom2.DefaultJDOMFactory" />
	<method signature="org.jdom2.Element element(int,int,java.lang.String,java.lang.String,java.lang.String)" class="org.jdom2.DefaultJDOMFactory" />
	<method signature="void addNamespaceDeclaration(org.jdom2.Element,org.jdom2.Namespace)" class="org.jdom2.DefaultJDOMFactory" />
	<method signature="org.jdom2.Element element(java.lang.String,java.lang.String)" class="org.jdom2.DefaultJDOMFactory" />
	<class name="org.apache.wml.dom.WMLDocumentImpl" />
	<method signature="org.w3c.dom.Element createElement(java.lang.String)" class="org.apache.wml.dom.WMLDocumentImpl" />
	<method signature="void &lt;init&gt;(org.w3c.dom.DocumentType)" class="org.apache.wml.dom.WMLDocumentImpl" />
	<class name="org.w3c.dom.DOMError" />
	<method signature="java.lang.Object getRelatedData()" class="org.w3c.dom.DOMError" />
	<method signature="java.lang.Object getRelatedException()" class="org.w3c.dom.DOMError" />
	<method signature="java.lang.String getType()" class="org.w3c.dom.DOMError" />
	<method signature="java.lang.String getMessage()" class="org.w3c.dom.DOMError" />
	<method signature="short getSeverity()" class="org.w3c.dom.DOMError" />
	<method signature="org.w3c.dom.DOMLocator getLocation()" class="org.w3c.dom.DOMError" />
	<class name="com.google.zxing.client.j2se.MatrixToImageWriter" />
	<method signature="java.awt.image.BufferedImage toBufferedImage(com.google.zxing.common.BitMatrix,com.google.zxing.client.j2se.MatrixToImageConfig)" class="com.google.zxing.client.j2se.MatrixToImageWriter" />
	<method signature="void writeToFile(com.google.zxing.common.BitMatrix,java.lang.String,java.io.File)" class="com.google.zxing.client.j2se.MatrixToImageWriter" />
	<method signature="void writeToStream(com.google.zxing.common.BitMatrix,java.lang.String,java.io.OutputStream)" class="com.google.zxing.client.j2se.MatrixToImageWriter" />
	<method signature="void writeToFile(com.google.zxing.common.BitMatrix,java.lang.String,java.io.File,com.google.zxing.client.j2se.MatrixToImageConfig)" class="com.google.zxing.client.j2se.MatrixToImageWriter" />
	<method signature="void writeToStream(com.google.zxing.common.BitMatrix,java.lang.String,java.io.OutputStream,com.google.zxing.client.j2se.MatrixToImageConfig)" class="com.google.zxing.client.j2se.MatrixToImageWriter" />
	<method signature="java.awt.image.BufferedImage toBufferedImage(com.google.zxing.common.BitMatrix)" class="com.google.zxing.client.j2se.MatrixToImageWriter" />
	<class name="org.jfree.chart.title.ImageTitle" />
	<method signature="java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)" class="org.jfree.chart.title.ImageTitle" />
	<method signature="void &lt;init&gt;(java.awt.Image)" class="org.jfree.chart.title.ImageTitle" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.title.ImageTitle" />
	<method signature="void &lt;init&gt;(java.awt.Image,org.jfree.ui.RectangleEdge,org.jfree.ui.HorizontalAlignment,org.jfree.ui.VerticalAlignment)" class="org.jfree.chart.title.ImageTitle" />
	<method signature="void setImage(java.awt.Image)" class="org.jfree.chart.title.ImageTitle" />
	<method signature="org.jfree.ui.Size2D arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" class="org.jfree.chart.title.ImageTitle" />
	<method signature="void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" class="org.jfree.chart.title.ImageTitle" />
	<method signature="void &lt;init&gt;(java.awt.Image,int,int,org.jfree.ui.RectangleEdge,org.jfree.ui.HorizontalAlignment,org.jfree.ui.VerticalAlignment,org.jfree.ui.RectangleInsets)" class="org.jfree.chart.title.ImageTitle" />
	<method signature="java.awt.Image getImage()" class="org.jfree.chart.title.ImageTitle" />
	<class name="org.apache.xerces.util.SynchronizedSymbolTable" />
	<method signature="boolean containsSymbol(char[],int,int)" class="org.apache.xerces.util.SynchronizedSymbolTable" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable)" class="org.apache.xerces.util.SynchronizedSymbolTable" />
	<method signature="void &lt;init&gt;(int)" class="org.apache.xerces.util.SynchronizedSymbolTable" />
	<method signature="boolean containsSymbol(java.lang.String)" class="org.apache.xerces.util.SynchronizedSymbolTable" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.util.SynchronizedSymbolTable" />
	<method signature="java.lang.String addSymbol(char[],int,int)" class="org.apache.xerces.util.SynchronizedSymbolTable" />
	<method signature="java.lang.String addSymbol(java.lang.String)" class="org.apache.xerces.util.SynchronizedSymbolTable" />
	<class name="org.apache.xml.serialize.Printer" />
	<method signature="void setThisIndent(int)" class="org.apache.xml.serialize.Printer" />
	<method signature="void printText(char)" class="org.apache.xml.serialize.Printer" />
	<method signature="void &lt;init&gt;(java.io.Writer,org.apache.xml.serialize.OutputFormat)" class="org.apache.xml.serialize.Printer" />
	<method signature="void printText(java.lang.String)" class="org.apache.xml.serialize.Printer" />
	<method signature="void flush()" class="org.apache.xml.serialize.Printer" />
	<method signature="void breakLine()" class="org.apache.xml.serialize.Printer" />
	<method signature="java.io.IOException getException()" class="org.apache.xml.serialize.Printer" />
	<method signature="void printText(java.lang.StringBuffer)" class="org.apache.xml.serialize.Printer" />
	<method signature="java.lang.String leaveDTD()" class="org.apache.xml.serialize.Printer" />
	<method signature="void printSpace()" class="org.apache.xml.serialize.Printer" />
	<method signature="void flushLine(boolean)" class="org.apache.xml.serialize.Printer" />
	<method signature="void printText(char[],int,int)" class="org.apache.xml.serialize.Printer" />
	<method signature="void enterDTD()" class="org.apache.xml.serialize.Printer" />
	<method signature="int getNextIndent()" class="org.apache.xml.serialize.Printer" />
	<method signature="void setNextIndent(int)" class="org.apache.xml.serialize.Printer" />
	<method signature="void breakLine(boolean)" class="org.apache.xml.serialize.Printer" />
	<method signature="void indent()" class="org.apache.xml.serialize.Printer" />
	<method signature="void unindent()" class="org.apache.xml.serialize.Printer" />
	<class name="com.toedter.calendar.demo.DemoTable" />
	<method signature="void &lt;init&gt;()" class="com.toedter.calendar.demo.DemoTable" />
	<class name="org.apache.xerces.util.AttributesProxy" />
	<method signature="java.lang.String getValue(int)" class="org.apache.xerces.util.AttributesProxy" />
	<method signature="java.lang.String getType(java.lang.String)" class="org.apache.xerces.util.AttributesProxy" />
	<method signature="boolean isDeclared(java.lang.String,java.lang.String)" class="org.apache.xerces.util.AttributesProxy" />
	<method signature="java.lang.String getLocalName(int)" class="org.apache.xerces.util.AttributesProxy" />
	<method signature="java.lang.String getType(int)" class="org.apache.xerces.util.AttributesProxy" />
	<method signature="java.lang.String getValue(java.lang.String)" class="org.apache.xerces.util.AttributesProxy" />
	<method signature="boolean isDeclared(int)" class="org.apache.xerces.util.AttributesProxy" />
	<method signature="int getIndex(java.lang.String,java.lang.String)" class="org.apache.xerces.util.AttributesProxy" />
	<method signature="boolean isSpecified(java.lang.String,java.lang.String)" class="org.apache.xerces.util.AttributesProxy" />
	<method signature="java.lang.String getQName(int)" class="org.apache.xerces.util.AttributesProxy" />
	<method signature="int getLength()" class="org.apache.xerces.util.AttributesProxy" />
	<method signature="boolean isSpecified(int)" class="org.apache.xerces.util.AttributesProxy" />
	<method signature="java.lang.String getURI(int)" class="org.apache.xerces.util.AttributesProxy" />
	<method signature="void &lt;init&gt;(org.apache.xerces.xni.XMLAttributes)" class="org.apache.xerces.util.AttributesProxy" />
	<method signature="java.lang.String getName(int)" class="org.apache.xerces.util.AttributesProxy" />
	<method signature="void setAttributes(org.apache.xerces.xni.XMLAttributes)" class="org.apache.xerces.util.AttributesProxy" />
	<method signature="int getIndex(java.lang.String)" class="org.apache.xerces.util.AttributesProxy" />
	<method signature="boolean isSpecified(java.lang.String)" class="org.apache.xerces.util.AttributesProxy" />
	<method signature="java.lang.String getType(java.lang.String,java.lang.String)" class="org.apache.xerces.util.AttributesProxy" />
	<method signature="java.lang.String getValue(java.lang.String,java.lang.String)" class="org.apache.xerces.util.AttributesProxy" />
	<method signature="boolean isDeclared(java.lang.String)" class="org.apache.xerces.util.AttributesProxy" />
	<method signature="org.apache.xerces.xni.XMLAttributes getAttributes()" class="org.apache.xerces.util.AttributesProxy" />
	<class name="org.w3c.dom.UserDataHandler" />
	<method signature="void handle(short,java.lang.String,java.lang.Object,org.w3c.dom.Node,org.w3c.dom.Node)" class="org.w3c.dom.UserDataHandler" />
	<class name="org.jfree.chart.axis.TickType" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.axis.TickType" />
	<method signature="java.lang.String toString()" class="org.jfree.chart.axis.TickType" />
	<class name="org.apache.xerces.impl.dv.DVFactoryException" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.DVFactoryException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.apache.xerces.impl.dv.DVFactoryException" />
	<class name="org.jdom2.output.LineSeparator" />
	<method signature="org.jdom2.output.LineSeparator valueOf(java.lang.String)" class="org.jdom2.output.LineSeparator" />
	<method signature="org.jdom2.output.LineSeparator[] values()" class="org.jdom2.output.LineSeparator" />
	<method signature="java.lang.String value()" class="org.jdom2.output.LineSeparator" />
	<class name="com.google.zxing.client.result.TelParsedResult" />
	<method signature="java.lang.String getTitle()" class="com.google.zxing.client.result.TelParsedResult" />
	<method signature="java.lang.String getNumber()" class="com.google.zxing.client.result.TelParsedResult" />
	<method signature="java.lang.String getDisplayResult()" class="com.google.zxing.client.result.TelParsedResult" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String)" class="com.google.zxing.client.result.TelParsedResult" />
	<method signature="java.lang.String getTelURI()" class="com.google.zxing.client.result.TelParsedResult" />
	<class name="org.jfree.ui.RectangleEdge" />
	<method signature="int hashCode()" class="org.jfree.ui.RectangleEdge" />
	<method signature="boolean isLeftOrRight(org.jfree.ui.RectangleEdge)" class="org.jfree.ui.RectangleEdge" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.ui.RectangleEdge" />
	<method signature="org.jfree.ui.RectangleEdge opposite(org.jfree.ui.RectangleEdge)" class="org.jfree.ui.RectangleEdge" />
	<method signature="java.lang.String toString()" class="org.jfree.ui.RectangleEdge" />
	<method signature="double coordinate(java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge)" class="org.jfree.ui.RectangleEdge" />
	<method signature="boolean isTopOrBottom(org.jfree.ui.RectangleEdge)" class="org.jfree.ui.RectangleEdge" />
	<class name="org.apache.xerces.util.EntityResolver2Wrapper" />
	<method signature="void &lt;init&gt;(org.xml.sax.ext.EntityResolver2)" class="org.apache.xerces.util.EntityResolver2Wrapper" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.util.EntityResolver2Wrapper" />
	<method signature="void setEntityResolver(org.xml.sax.ext.EntityResolver2)" class="org.apache.xerces.util.EntityResolver2Wrapper" />
	<method signature="org.apache.xerces.xni.parser.XMLInputSource getExternalSubset(org.apache.xerces.xni.grammars.XMLDTDDescription)" class="org.apache.xerces.util.EntityResolver2Wrapper" />
	<method signature="org.apache.xerces.xni.parser.XMLInputSource resolveEntity(org.apache.xerces.xni.XMLResourceIdentifier)" class="org.apache.xerces.util.EntityResolver2Wrapper" />
	<method signature="org.xml.sax.ext.EntityResolver2 getEntityResolver()" class="org.apache.xerces.util.EntityResolver2Wrapper" />
	<class name="tourma.utils.display.Ranked" />
	<method signature="int getSortedValue(int,int)" class="tourma.utils.display.Ranked" />
	<method signature="void setDetail(java.lang.String)" class="tourma.utils.display.Ranked" />
	<method signature="java.lang.String getDetail()" class="tourma.utils.display.Ranked" />
	<method signature="int getRowCount()" class="tourma.utils.display.Ranked" />
	<method signature="tourma.data.ObjectRanking getSortedObject(int)" class="tourma.utils.display.Ranked" />
	<class name="org.jfree.data.KeyedValueComparator" />
	<method signature="org.jfree.util.SortOrder getOrder()" class="org.jfree.data.KeyedValueComparator" />
	<method signature="void &lt;init&gt;(org.jfree.data.KeyedValueComparatorType,org.jfree.util.SortOrder)" class="org.jfree.data.KeyedValueComparator" />
	<method signature="org.jfree.data.KeyedValueComparatorType getType()" class="org.jfree.data.KeyedValueComparator" />
	<method signature="int compare(java.lang.Object,java.lang.Object)" class="org.jfree.data.KeyedValueComparator" />
	<class name="org.apache.wml.WMLStrongElement" />
	<method signature="java.lang.String getXmlLang()" class="org.apache.wml.WMLStrongElement" />
	<method signature="void setXmlLang(java.lang.String)" class="org.apache.wml.WMLStrongElement" />
	<class name="org.jfree.chart.plot.MeterInterval" />
	<method signature="java.lang.String getLabel()" class="org.jfree.chart.plot.MeterInterval" />
	<method signature="void &lt;init&gt;(java.lang.String,org.jfree.data.Range)" class="org.jfree.chart.plot.MeterInterval" />
	<method signature="org.jfree.data.Range getRange()" class="org.jfree.chart.plot.MeterInterval" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.plot.MeterInterval" />
	<method signature="java.awt.Paint getBackgroundPaint()" class="org.jfree.chart.plot.MeterInterval" />
	<method signature="java.awt.Stroke getOutlineStroke()" class="org.jfree.chart.plot.MeterInterval" />
	<method signature="void &lt;init&gt;(java.lang.String,org.jfree.data.Range,java.awt.Paint,java.awt.Stroke,java.awt.Paint)" class="org.jfree.chart.plot.MeterInterval" />
	<method signature="java.awt.Paint getOutlinePaint()" class="org.jfree.chart.plot.MeterInterval" />
	<class name="org.jfree.data.xml.RootHandler" />
	<method signature="java.util.Stack getSubHandlers()" class="org.jfree.data.xml.RootHandler" />
	<method signature="org.xml.sax.helpers.DefaultHandler popSubHandler()" class="org.jfree.data.xml.RootHandler" />
	<method signature="org.xml.sax.helpers.DefaultHandler getCurrentHandler()" class="org.jfree.data.xml.RootHandler" />
	<method signature="void characters(char[],int,int)" class="org.jfree.data.xml.RootHandler" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.xml.RootHandler" />
	<method signature="void pushSubHandler(org.xml.sax.helpers.DefaultHandler)" class="org.jfree.data.xml.RootHandler" />
	<class name="org.jfree.base.modules.PackageManager$PackageConfiguration" />
	<method signature="void &lt;init&gt;()" class="org.jfree.base.modules.PackageManager$PackageConfiguration" />
	<method signature="void insertConfiguration(org.jfree.base.config.HierarchicalConfiguration)" class="org.jfree.base.modules.PackageManager$PackageConfiguration" />
	<class name="org.jfree.ui.GradientPaintTransformer" />
	<method signature="java.awt.GradientPaint transform(java.awt.GradientPaint,java.awt.Shape)" class="org.jfree.ui.GradientPaintTransformer" />
	<class name="org.w3c.dom.html.HTMLFrameElement" />
	<method signature="void setMarginWidth(java.lang.String)" class="org.w3c.dom.html.HTMLFrameElement" />
	<method signature="java.lang.String getName()" class="org.w3c.dom.html.HTMLFrameElement" />
	<method signature="java.lang.String getSrc()" class="org.w3c.dom.html.HTMLFrameElement" />
	<method signature="void setFrameBorder(java.lang.String)" class="org.w3c.dom.html.HTMLFrameElement" />
	<method signature="java.lang.String getMarginHeight()" class="org.w3c.dom.html.HTMLFrameElement" />
	<method signature="java.lang.String getScrolling()" class="org.w3c.dom.html.HTMLFrameElement" />
	<method signature="void setMarginHeight(java.lang.String)" class="org.w3c.dom.html.HTMLFrameElement" />
	<method signature="java.lang.String getLongDesc()" class="org.w3c.dom.html.HTMLFrameElement" />
	<method signature="void setScrolling(java.lang.String)" class="org.w3c.dom.html.HTMLFrameElement" />
	<method signature="void setName(java.lang.String)" class="org.w3c.dom.html.HTMLFrameElement" />
	<method signature="boolean getNoResize()" class="org.w3c.dom.html.HTMLFrameElement" />
	<method signature="void setSrc(java.lang.String)" class="org.w3c.dom.html.HTMLFrameElement" />
	<method signature="java.lang.String getMarginWidth()" class="org.w3c.dom.html.HTMLFrameElement" />
	<method signature="void setNoResize(boolean)" class="org.w3c.dom.html.HTMLFrameElement" />
	<method signature="java.lang.String getFrameBorder()" class="org.w3c.dom.html.HTMLFrameElement" />
	<method signature="void setLongDesc(java.lang.String)" class="org.w3c.dom.html.HTMLFrameElement" />
	<class name="org.apache.html.dom.HTMLAreaElementImpl" />
	<method signature="void setAccessKey(java.lang.String)" class="org.apache.html.dom.HTMLAreaElementImpl" />
	<method signature="java.lang.String getCoords()" class="org.apache.html.dom.HTMLAreaElementImpl" />
	<method signature="java.lang.String getHref()" class="org.apache.html.dom.HTMLAreaElementImpl" />
	<method signature="java.lang.String getShape()" class="org.apache.html.dom.HTMLAreaElementImpl" />
	<method signature="void setTabIndex(int)" class="org.apache.html.dom.HTMLAreaElementImpl" />
	<method signature="void setTarget(java.lang.String)" class="org.apache.html.dom.HTMLAreaElementImpl" />
	<method signature="void setHref(java.lang.String)" class="org.apache.html.dom.HTMLAreaElementImpl" />
	<method signature="java.lang.String getTarget()" class="org.apache.html.dom.HTMLAreaElementImpl" />
	<method signature="void setAlt(java.lang.String)" class="org.apache.html.dom.HTMLAreaElementImpl" />
	<method signature="boolean getNoHref()" class="org.apache.html.dom.HTMLAreaElementImpl" />
	<method signature="int getTabIndex()" class="org.apache.html.dom.HTMLAreaElementImpl" />
	<method signature="void setNoHref(boolean)" class="org.apache.html.dom.HTMLAreaElementImpl" />
	<method signature="void setShape(java.lang.String)" class="org.apache.html.dom.HTMLAreaElementImpl" />
	<method signature="java.lang.String getAlt()" class="org.apache.html.dom.HTMLAreaElementImpl" />
	<method signature="void setCoords(java.lang.String)" class="org.apache.html.dom.HTMLAreaElementImpl" />
	<method signature="java.lang.String getAccessKey()" class="org.apache.html.dom.HTMLAreaElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLAreaElementImpl" />
	<class name="org.w3c.dom.traversal.NodeFilter" />
	<method signature="short acceptNode(org.w3c.dom.Node)" class="org.w3c.dom.traversal.NodeFilter" />
	<class name="org.apache.xerces.impl.dv.util.ByteListImpl" />
	<method signature="int size()" class="org.apache.xerces.impl.dv.util.ByteListImpl" />
	<method signature="java.lang.Object get(int)" class="org.apache.xerces.impl.dv.util.ByteListImpl" />
	<method signature="byte item(int)" class="org.apache.xerces.impl.dv.util.ByteListImpl" />
	<method signature="byte[] toByteArray()" class="org.apache.xerces.impl.dv.util.ByteListImpl" />
	<method signature="void &lt;init&gt;(byte[])" class="org.apache.xerces.impl.dv.util.ByteListImpl" />
	<method signature="int getLength()" class="org.apache.xerces.impl.dv.util.ByteListImpl" />
	<method signature="boolean contains(byte)" class="org.apache.xerces.impl.dv.util.ByteListImpl" />
	<class name="org.jfree.chart.annotations.XYLineAnnotation" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.annotations.XYLineAnnotation" />
	<method signature="int hashCode()" class="org.jfree.chart.annotations.XYLineAnnotation" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.annotations.XYLineAnnotation" />
	<method signature="void &lt;init&gt;(double,double,double,double,java.awt.Stroke,java.awt.Paint)" class="org.jfree.chart.annotations.XYLineAnnotation" />
	<method signature="void &lt;init&gt;(double,double,double,double)" class="org.jfree.chart.annotations.XYLineAnnotation" />
	<method signature="void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.annotations.XYLineAnnotation" />
	<class name="javax.xml.stream.FactoryConfigurationError" />
	<method signature="java.lang.Exception getException()" class="javax.xml.stream.FactoryConfigurationError" />
	<method signature="void &lt;init&gt;(java.lang.Exception)" class="javax.xml.stream.FactoryConfigurationError" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Exception)" class="javax.xml.stream.FactoryConfigurationError" />
	<method signature="void &lt;init&gt;(java.lang.Exception,java.lang.String)" class="javax.xml.stream.FactoryConfigurationError" />
	<method signature="void &lt;init&gt;()" class="javax.xml.stream.FactoryConfigurationError" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="javax.xml.stream.FactoryConfigurationError" />
	<method signature="java.lang.String getMessage()" class="javax.xml.stream.FactoryConfigurationError" />
	<class name="freemarker.template.EmptyMap" />
	<method signature="int size()" class="freemarker.template.EmptyMap" />
	<method signature="boolean containsKey(java.lang.Object)" class="freemarker.template.EmptyMap" />
	<method signature="void putAll(java.util.Map)" class="freemarker.template.EmptyMap" />
	<method signature="java.util.Set keySet()" class="freemarker.template.EmptyMap" />
	<method signature="java.lang.Object remove(java.lang.Object)" class="freemarker.template.EmptyMap" />
	<method signature="boolean containsValue(java.lang.Object)" class="freemarker.template.EmptyMap" />
	<method signature="java.util.Collection values()" class="freemarker.template.EmptyMap" />
	<method signature="java.lang.Object put(java.lang.Object,java.lang.Object)" class="freemarker.template.EmptyMap" />
	<method signature="void clear()" class="freemarker.template.EmptyMap" />
	<method signature="boolean isEmpty()" class="freemarker.template.EmptyMap" />
	<method signature="void &lt;init&gt;()" class="freemarker.template.EmptyMap" />
	<method signature="java.lang.Object get(java.lang.Object)" class="freemarker.template.EmptyMap" />
	<method signature="java.util.Set entrySet()" class="freemarker.template.EmptyMap" />
	<class name="org.apache.xerces.impl.dtd.XMLDTDValidator" />
	<method signature="java.lang.String[] getRecognizedProperties()" class="org.apache.xerces.impl.dtd.XMLDTDValidator" />
	<method signature="void processingInstruction(java.lang.String,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.XMLDTDValidator" />
	<method signature="void endElement(org.apache.xerces.xni.QName,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.XMLDTDValidator" />
	<method signature="java.lang.Boolean getFeatureDefault(java.lang.String)" class="org.apache.xerces.impl.dtd.XMLDTDValidator" />
	<method signature="void doctypeDecl(java.lang.String,java.lang.String,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.XMLDTDValidator" />
	<method signature="void reset(org.apache.xerces.xni.parser.XMLComponentManager)" class="org.apache.xerces.impl.dtd.XMLDTDValidator" />
	<method signature="void ignorableWhitespace(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.XMLDTDValidator" />
	<method signature="void textDecl(java.lang.String,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.XMLDTDValidator" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dtd.XMLDTDValidator" />
	<method signature="void emptyElement(org.apache.xerces.xni.QName,org.apache.xerces.xni.XMLAttributes,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.XMLDTDValidator" />
	<method signature="java.lang.String[] getRecognizedFeatures()" class="org.apache.xerces.impl.dtd.XMLDTDValidator" />
	<method signature="void endDocument(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.XMLDTDValidator" />
	<method signature="void startElement(org.apache.xerces.xni.QName,org.apache.xerces.xni.XMLAttributes,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.XMLDTDValidator" />
	<method signature="void startDocument(org.apache.xerces.xni.XMLLocator,java.lang.String,org.apache.xerces.xni.NamespaceContext,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.XMLDTDValidator" />
	<method signature="void startGeneralEntity(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.XMLDTDValidator" />
	<method signature="void endGeneralEntity(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.XMLDTDValidator" />
	<method signature="boolean hasGrammar()" class="org.apache.xerces.impl.dtd.XMLDTDValidator" />
	<method signature="void setDocumentSource(org.apache.xerces.xni.parser.XMLDocumentSource)" class="org.apache.xerces.impl.dtd.XMLDTDValidator" />
	<method signature="void setDocumentHandler(org.apache.xerces.xni.XMLDocumentHandler)" class="org.apache.xerces.impl.dtd.XMLDTDValidator" />
	<method signature="void startCDATA(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.XMLDTDValidator" />
	<method signature="void endCDATA(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.XMLDTDValidator" />
	<method signature="org.apache.xerces.xni.parser.XMLDocumentSource getDocumentSource()" class="org.apache.xerces.impl.dtd.XMLDTDValidator" />
	<method signature="void characters(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.XMLDTDValidator" />
	<method signature="void setFeature(java.lang.String,boolean)" class="org.apache.xerces.impl.dtd.XMLDTDValidator" />
	<method signature="void xmlDecl(java.lang.String,java.lang.String,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.XMLDTDValidator" />
	<method signature="boolean validate()" class="org.apache.xerces.impl.dtd.XMLDTDValidator" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="org.apache.xerces.impl.dtd.XMLDTDValidator" />
	<method signature="org.apache.xerces.xni.XMLDocumentHandler getDocumentHandler()" class="org.apache.xerces.impl.dtd.XMLDTDValidator" />
	<method signature="java.lang.Object getPropertyDefault(java.lang.String)" class="org.apache.xerces.impl.dtd.XMLDTDValidator" />
	<method signature="void comment(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.XMLDTDValidator" />
	<method signature="boolean characterData(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.dtd.XMLDTDValidator" />
	<class name="org.apache.xerces.impl.XML11EntityScanner" />
	<method signature="boolean scanData(java.lang.String,org.apache.xerces.util.XMLStringBuffer)" class="org.apache.xerces.impl.XML11EntityScanner" />
	<method signature="int scanChar()" class="org.apache.xerces.impl.XML11EntityScanner" />
	<method signature="java.lang.String scanName()" class="org.apache.xerces.impl.XML11EntityScanner" />
	<method signature="int scanContent(org.apache.xerces.xni.XMLString)" class="org.apache.xerces.impl.XML11EntityScanner" />
	<method signature="int scanLiteral(int,org.apache.xerces.xni.XMLString)" class="org.apache.xerces.impl.XML11EntityScanner" />
	<method signature="java.lang.String scanNmtoken()" class="org.apache.xerces.impl.XML11EntityScanner" />
	<method signature="int peekChar()" class="org.apache.xerces.impl.XML11EntityScanner" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.XML11EntityScanner" />
	<method signature="boolean skipSpaces()" class="org.apache.xerces.impl.XML11EntityScanner" />
	<method signature="java.lang.String scanNCName()" class="org.apache.xerces.impl.XML11EntityScanner" />
	<method signature="boolean skipChar(int)" class="org.apache.xerces.impl.XML11EntityScanner" />
	<method signature="boolean scanQName(org.apache.xerces.xni.QName)" class="org.apache.xerces.impl.XML11EntityScanner" />
	<method signature="boolean skipString(java.lang.String)" class="org.apache.xerces.impl.XML11EntityScanner" />
	<class name="org.jdom2.xpath.jaxen.JaxenXPathFactory" />
	<method signature="void &lt;init&gt;()" class="org.jdom2.xpath.jaxen.JaxenXPathFactory" />
	<method signature="org.jdom2.xpath.XPathExpression compile(java.lang.String,org.jdom2.filter.Filter,java.util.Map,org.jdom2.Namespace[])" class="org.jdom2.xpath.jaxen.JaxenXPathFactory" />
	<class name="org.apache.wml.dom.WMLInputElementImpl" />
	<method signature="int getMaxLength()" class="org.apache.wml.dom.WMLInputElementImpl" />
	<method signature="java.lang.String getName()" class="org.apache.wml.dom.WMLInputElementImpl" />
	<method signature="void setFormat(java.lang.String)" class="org.apache.wml.dom.WMLInputElementImpl" />
	<method signature="void setEmptyOk(boolean)" class="org.apache.wml.dom.WMLInputElementImpl" />
	<method signature="int getSize()" class="org.apache.wml.dom.WMLInputElementImpl" />
	<method signature="java.lang.String getId()" class="org.apache.wml.dom.WMLInputElementImpl" />
	<method signature="void setSize(int)" class="org.apache.wml.dom.WMLInputElementImpl" />
	<method signature="void setId(java.lang.String)" class="org.apache.wml.dom.WMLInputElementImpl" />
	<method signature="java.lang.String getTitle()" class="org.apache.wml.dom.WMLInputElementImpl" />
	<method signature="int getTabIndex()" class="org.apache.wml.dom.WMLInputElementImpl" />
	<method signature="void setName(java.lang.String)" class="org.apache.wml.dom.WMLInputElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.wml.dom.WMLDocumentImpl,java.lang.String)" class="org.apache.wml.dom.WMLInputElementImpl" />
	<method signature="java.lang.String getFormat()" class="org.apache.wml.dom.WMLInputElementImpl" />
	<method signature="void setClassName(java.lang.String)" class="org.apache.wml.dom.WMLInputElementImpl" />
	<method signature="void setValue(java.lang.String)" class="org.apache.wml.dom.WMLInputElementImpl" />
	<method signature="java.lang.String getXmlLang()" class="org.apache.wml.dom.WMLInputElementImpl" />
	<method signature="void setMaxLength(int)" class="org.apache.wml.dom.WMLInputElementImpl" />
	<method signature="void setTabIndex(int)" class="org.apache.wml.dom.WMLInputElementImpl" />
	<method signature="boolean getEmptyOk()" class="org.apache.wml.dom.WMLInputElementImpl" />
	<method signature="java.lang.String getValue()" class="org.apache.wml.dom.WMLInputElementImpl" />
	<method signature="void setXmlLang(java.lang.String)" class="org.apache.wml.dom.WMLInputElementImpl" />
	<method signature="java.lang.String getType()" class="org.apache.wml.dom.WMLInputElementImpl" />
	<method signature="java.lang.String getClassName()" class="org.apache.wml.dom.WMLInputElementImpl" />
	<method signature="void setType(java.lang.String)" class="org.apache.wml.dom.WMLInputElementImpl" />
	<method signature="void setTitle(java.lang.String)" class="org.apache.wml.dom.WMLInputElementImpl" />
	<class name="org.jfree.chart.plot.PlotOrientation" />
	<method signature="int hashCode()" class="org.jfree.chart.plot.PlotOrientation" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.plot.PlotOrientation" />
	<method signature="java.lang.String toString()" class="org.jfree.chart.plot.PlotOrientation" />
	<class name="tourma.data.Coach" />
	<method signature="tourma.data.RosterType getRoster()" class="tourma.data.Coach" />
	<method signature="void setActive(boolean)" class="tourma.data.Coach" />
	<method signature="void addMatch(tourma.data.Competitor,tourma.data.Round)" class="tourma.data.Coach" />
	<method signature="void setXMLElement(org.jdom2.Element)" class="tourma.data.Coach" />
	<method signature="void setNaf(int)" class="tourma.data.Coach" />
	<method signature="int getRank()" class="tourma.data.Coach" />
	<method signature="java.util.ArrayList getPossibleOpponents(java.util.ArrayList,tourma.data.Round)" class="tourma.data.Coach" />
	<method signature="boolean havePlayed(tourma.data.Competitor)" class="tourma.data.Coach" />
	<method signature="java.lang.String getTeam()" class="tourma.data.Coach" />
	<method signature="void setHandicap(int)" class="tourma.data.Coach" />
	<method signature="void &lt;init&gt;()" class="tourma.data.Coach" />
	<method signature="void setNafRank(double)" class="tourma.data.Coach" />
	<method signature="void setRoster(tourma.data.RosterType)" class="tourma.data.Coach" />
	<method signature="tourma.data.Coach getNullCoach()" class="tourma.data.Coach" />
	<method signature="void setTeamMates(tourma.data.Team)" class="tourma.data.Coach" />
	<method signature="void setTeam(java.lang.String)" class="tourma.data.Coach" />
	<method signature="tourma.data.Coach getCoach(java.lang.String)" class="tourma.data.Coach" />
	<method signature="int getCompositionCount()" class="tourma.data.Coach" />
	<method signature="tourma.data.CoachMatch createMatch(tourma.data.Competitor,tourma.data.Round)" class="tourma.data.Coach" />
	<method signature="double getNafRank()" class="tourma.data.Coach" />
	<method signature="tourma.data.Team getTeamMates()" class="tourma.data.Coach" />
	<method signature="teamma.data.Roster getComposition(int)" class="tourma.data.Coach" />
	<method signature="int compareTo(java.lang.Object)" class="tourma.data.Coach" />
	<method signature="int getNaf()" class="tourma.data.Coach" />
	<method signature="void newCoachMap()" class="tourma.data.Coach" />
	<method signature="int getHandicap()" class="tourma.data.Coach" />
	<method signature="java.util.HashMap getTeamOppositionCount(java.util.ArrayList,tourma.data.Round)" class="tourma.data.Coach" />
	<method signature="void putCoach(java.lang.String,tourma.data.Coach)" class="tourma.data.Coach" />
	<method signature="void roundCheck(tourma.data.Round)" class="tourma.data.Coach" />
	<method signature="java.lang.String getDecoratedName()" class="tourma.data.Coach" />
	<method signature="void addMatchRoundRobin(tourma.data.Competitor,tourma.data.Round,boolean)" class="tourma.data.Coach" />
	<method signature="void addComposition(teamma.data.Roster)" class="tourma.data.Coach" />
	<method signature="void setPinCode(int)" class="tourma.data.Coach" />
	<method signature="org.jdom2.Element getXMLElement()" class="tourma.data.Coach" />
	<method signature="boolean isActive()" class="tourma.data.Coach" />
	<method signature="void removeComposition(int)" class="tourma.data.Coach" />
	<method signature="java.lang.String getStringRoster()" class="tourma.data.Coach" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="tourma.data.Coach" />
	<method signature="int getPinCode()" class="tourma.data.Coach" />
	<method signature="void setRank(int)" class="tourma.data.Coach" />
	<class name="javax.xml.transform.sax.TemplatesHandler" />
	<method signature="java.lang.String getSystemId()" class="javax.xml.transform.sax.TemplatesHandler" />
	<method signature="void setSystemId(java.lang.String)" class="javax.xml.transform.sax.TemplatesHandler" />
	<method signature="javax.xml.transform.Templates getTemplates()" class="javax.xml.transform.sax.TemplatesHandler" />
	<class name="org.jfree.ui.about.AboutFrame" />
	<method signature="void &lt;init&gt;(java.lang.String,org.jfree.ui.about.ProjectInfo)" class="org.jfree.ui.about.AboutFrame" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Image,java.lang.String,java.lang.String,java.util.List,org.jfree.ui.about.ProjectInfo)" class="org.jfree.ui.about.AboutFrame" />
	<method signature="java.awt.Dimension getPreferredSize()" class="org.jfree.ui.about.AboutFrame" />
	<class name="org.apache.xerces.impl.xs.models.XSEmptyCM" />
	<method signature="int[] startContentModel()" class="org.apache.xerces.impl.xs.models.XSEmptyCM" />
	<method signature="boolean checkUniqueParticleAttribution(org.apache.xerces.impl.xs.SubstitutionGroupHandler)" class="org.apache.xerces.impl.xs.models.XSEmptyCM" />
	<method signature="int[] occurenceInfo(int[])" class="org.apache.xerces.impl.xs.models.XSEmptyCM" />
	<method signature="java.lang.Object oneTransition(org.apache.xerces.xni.QName,int[],org.apache.xerces.impl.xs.SubstitutionGroupHandler)" class="org.apache.xerces.impl.xs.models.XSEmptyCM" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xs.models.XSEmptyCM" />
	<method signature="java.util.Vector whatCanGoHere(int[])" class="org.apache.xerces.impl.xs.models.XSEmptyCM" />
	<method signature="java.lang.String getTermName(int)" class="org.apache.xerces.impl.xs.models.XSEmptyCM" />
	<method signature="boolean endContentModel(int[])" class="org.apache.xerces.impl.xs.models.XSEmptyCM" />
	<method signature="boolean isCompactedForUPA()" class="org.apache.xerces.impl.xs.models.XSEmptyCM" />
	<class name="org.apache.xerces.impl.xs.util.ShortListImpl" />
	<method signature="int size()" class="org.apache.xerces.impl.xs.util.ShortListImpl" />
	<method signature="void &lt;init&gt;(short[],int)" class="org.apache.xerces.impl.xs.util.ShortListImpl" />
	<method signature="java.lang.Object get(int)" class="org.apache.xerces.impl.xs.util.ShortListImpl" />
	<method signature="boolean equals(java.lang.Object)" class="org.apache.xerces.impl.xs.util.ShortListImpl" />
	<method signature="boolean contains(short)" class="org.apache.xerces.impl.xs.util.ShortListImpl" />
	<method signature="int getLength()" class="org.apache.xerces.impl.xs.util.ShortListImpl" />
	<method signature="short item(int)" class="org.apache.xerces.impl.xs.util.ShortListImpl" />
	<class name="com.google.zxing.oned.CodaBarReader" />
	<method signature="void &lt;init&gt;()" class="com.google.zxing.oned.CodaBarReader" />
	<method signature="com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map)" class="com.google.zxing.oned.CodaBarReader" />
	<class name="javax.xml.stream.XMLEventReader" />
	<method signature="java.lang.String getElementText()" class="javax.xml.stream.XMLEventReader" />
	<method signature="javax.xml.stream.events.XMLEvent peek()" class="javax.xml.stream.XMLEventReader" />
	<method signature="javax.xml.stream.events.XMLEvent nextEvent()" class="javax.xml.stream.XMLEventReader" />
	<method signature="boolean hasNext()" class="javax.xml.stream.XMLEventReader" />
	<method signature="void close()" class="javax.xml.stream.XMLEventReader" />
	<method signature="javax.xml.stream.events.XMLEvent nextTag()" class="javax.xml.stream.XMLEventReader" />
	<method signature="java.lang.Object getProperty(java.lang.String)" class="javax.xml.stream.XMLEventReader" />
	<class name="freemarker.core.Configurable$UnknownSettingException" />
	<class name="org.jdom2.Comment" />
	<method signature="java.lang.String getText()" class="org.jdom2.Comment" />
	<method signature="org.jdom2.Comment setText(java.lang.String)" class="org.jdom2.Comment" />
	<method signature="org.jdom2.Comment clone()" class="org.jdom2.Comment" />
	<method signature="org.jdom2.Content detach()" class="org.jdom2.Comment" />
	<method signature="org.jdom2.Comment detach()" class="org.jdom2.Comment" />
	<method signature="org.jdom2.Content clone()" class="org.jdom2.Comment" />
	<method signature="java.lang.Object clone()" class="org.jdom2.Comment" />
	<method signature="java.lang.String getValue()" class="org.jdom2.Comment" />
	<method signature="java.lang.String toString()" class="org.jdom2.Comment" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jdom2.Comment" />
	<method signature="org.jdom2.CloneBase clone()" class="org.jdom2.Comment" />
	<class name="org.jfree.chart.labels.XYItemLabelGenerator" />
	<method signature="java.lang.String generateLabel(org.jfree.data.xy.XYDataset,int,int)" class="org.jfree.chart.labels.XYItemLabelGenerator" />
	<class name="tourma.utils.display.TServerThread" />
	<method signature="void run()" class="tourma.utils.display.TServerThread" />
	<method signature="void &lt;init&gt;(java.net.Socket)" class="tourma.utils.display.TServerThread" />
	<class name="org.apache.xerces.impl.xs.opti.DefaultNode" />
	<method signature="org.w3c.dom.NamedNodeMap getAttributes()" class="org.apache.xerces.impl.xs.opti.DefaultNode" />
	<method signature="org.w3c.dom.Node appendChild(org.w3c.dom.Node)" class="org.apache.xerces.impl.xs.opti.DefaultNode" />
	<method signature="org.w3c.dom.Node getPreviousSibling()" class="org.apache.xerces.impl.xs.opti.DefaultNode" />
	<method signature="org.w3c.dom.NodeList getChildNodes()" class="org.apache.xerces.impl.xs.opti.DefaultNode" />
	<method signature="org.w3c.dom.Node cloneNode(boolean)" class="org.apache.xerces.impl.xs.opti.DefaultNode" />
	<method signature="org.w3c.dom.Node getParentNode()" class="org.apache.xerces.impl.xs.opti.DefaultNode" />
	<method signature="boolean isDefaultNamespace(java.lang.String)" class="org.apache.xerces.impl.xs.opti.DefaultNode" />
	<method signature="org.w3c.dom.Node getLastChild()" class="org.apache.xerces.impl.xs.opti.DefaultNode" />
	<method signature="org.w3c.dom.Node insertBefore(org.w3c.dom.Node,org.w3c.dom.Node)" class="org.apache.xerces.impl.xs.opti.DefaultNode" />
	<method signature="boolean isEqualNode(org.w3c.dom.Node)" class="org.apache.xerces.impl.xs.opti.DefaultNode" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xs.opti.DefaultNode" />
	<method signature="java.lang.Object setUserData(java.lang.String,java.lang.Object,org.w3c.dom.UserDataHandler)" class="org.apache.xerces.impl.xs.opti.DefaultNode" />
	<method signature="java.lang.String getBaseURI()" class="org.apache.xerces.impl.xs.opti.DefaultNode" />
	<method signature="short getNodeType()" class="org.apache.xerces.impl.xs.opti.DefaultNode" />
	<method signature="java.lang.String getPrefix()" class="org.apache.xerces.impl.xs.opti.DefaultNode" />
	<method signature="org.w3c.dom.Node getNextSibling()" class="org.apache.xerces.impl.xs.opti.DefaultNode" />
	<method signature="void setPrefix(java.lang.String)" class="org.apache.xerces.impl.xs.opti.DefaultNode" />
	<method signature="void setNodeValue(java.lang.String)" class="org.apache.xerces.impl.xs.opti.DefaultNode" />
	<method signature="java.lang.Object getUserData(java.lang.String)" class="org.apache.xerces.impl.xs.opti.DefaultNode" />
	<method signature="java.lang.String getNodeName()" class="org.apache.xerces.impl.xs.opti.DefaultNode" />
	<method signature="org.w3c.dom.Node removeChild(org.w3c.dom.Node)" class="org.apache.xerces.impl.xs.opti.DefaultNode" />
	<method signature="java.lang.String getTextContent()" class="org.apache.xerces.impl.xs.opti.DefaultNode" />
	<method signature="boolean hasAttributes()" class="org.apache.xerces.impl.xs.opti.DefaultNode" />
	<method signature="void normalize()" class="org.apache.xerces.impl.xs.opti.DefaultNode" />
	<method signature="java.lang.String lookupPrefix(java.lang.String)" class="org.apache.xerces.impl.xs.opti.DefaultNode" />
	<method signature="java.lang.String lookupNamespaceURI(java.lang.String)" class="org.apache.xerces.impl.xs.opti.DefaultNode" />
	<method signature="java.lang.String getNodeValue()" class="org.apache.xerces.impl.xs.opti.DefaultNode" />
	<method signature="short compareDocumentPosition(org.w3c.dom.Node)" class="org.apache.xerces.impl.xs.opti.DefaultNode" />
	<method signature="java.lang.String getLocalName()" class="org.apache.xerces.impl.xs.opti.DefaultNode" />
	<method signature="java.lang.String getNamespaceURI()" class="org.apache.xerces.impl.xs.opti.DefaultNode" />
	<method signature="org.w3c.dom.Node getFirstChild()" class="org.apache.xerces.impl.xs.opti.DefaultNode" />
	<method signature="java.lang.Object getFeature(java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.opti.DefaultNode" />
	<method signature="org.w3c.dom.Document getOwnerDocument()" class="org.apache.xerces.impl.xs.opti.DefaultNode" />
	<method signature="org.w3c.dom.Node replaceChild(org.w3c.dom.Node,org.w3c.dom.Node)" class="org.apache.xerces.impl.xs.opti.DefaultNode" />
	<method signature="boolean isSameNode(org.w3c.dom.Node)" class="org.apache.xerces.impl.xs.opti.DefaultNode" />
	<method signature="void setTextContent(java.lang.String)" class="org.apache.xerces.impl.xs.opti.DefaultNode" />
	<method signature="boolean hasChildNodes()" class="org.apache.xerces.impl.xs.opti.DefaultNode" />
	<method signature="boolean isSupported(java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.opti.DefaultNode" />
	<class name="org.jfree.data.general.SeriesChangeListener" />
	<method signature="void seriesChanged(org.jfree.data.general.SeriesChangeEvent)" class="org.jfree.data.general.SeriesChangeListener" />
	<class name="com.google.zxing.oned.rss.FinderPattern" />
	<method signature="void &lt;init&gt;(int,int[],int,int,int)" class="com.google.zxing.oned.rss.FinderPattern" />
	<method signature="com.google.zxing.ResultPoint[] getResultPoints()" class="com.google.zxing.oned.rss.FinderPattern" />
	<method signature="int getValue()" class="com.google.zxing.oned.rss.FinderPattern" />
	<method signature="int[] getStartEnd()" class="com.google.zxing.oned.rss.FinderPattern" />
	<class name="org.apache.xerces.impl.dtd.models.CMAny" />
	<method signature="java.lang.String toString()" class="org.apache.xerces.impl.dtd.models.CMAny" />
	<method signature="void &lt;init&gt;(int,java.lang.String,int)" class="org.apache.xerces.impl.dtd.models.CMAny" />
	<method signature="boolean isNullable()" class="org.apache.xerces.impl.dtd.models.CMAny" />
	<class name="org.w3c.dom.html.HTMLModElement" />
	<method signature="java.lang.String getCite()" class="org.w3c.dom.html.HTMLModElement" />
	<method signature="java.lang.String getDateTime()" class="org.w3c.dom.html.HTMLModElement" />
	<method signature="void setDateTime(java.lang.String)" class="org.w3c.dom.html.HTMLModElement" />
	<method signature="void setCite(java.lang.String)" class="org.w3c.dom.html.HTMLModElement" />
	<class name="com.hexidec.ekit.component.HTMLUtilities" />
	<method signature="void removeTag(javax.swing.text.Element,boolean)" class="com.hexidec.ekit.component.HTMLUtilities" />
	<method signature="int[] getPositions(javax.swing.text.Element,java.lang.String,boolean,java.lang.String)" class="com.hexidec.ekit.component.HTMLUtilities" />
	<method signature="javax.swing.text.Element getListItemParent()" class="com.hexidec.ekit.component.HTMLUtilities" />
	<method signature="java.lang.String[] getUniString(int)" class="com.hexidec.ekit.component.HTMLUtilities" />
	<method signature="void delete()" class="com.hexidec.ekit.component.HTMLUtilities" />
	<method signature="javax.swing.text.SimpleAttributeSet removeAttributeByKey(javax.swing.text.SimpleAttributeSet,java.lang.String)" class="com.hexidec.ekit.component.HTMLUtilities" />
	<method signature="javax.swing.text.SimpleAttributeSet removeAttribute(javax.swing.text.SimpleAttributeSet,javax.swing.text.SimpleAttributeSet)" class="com.hexidec.ekit.component.HTMLUtilities" />
	<method signature="void insertListElement(java.lang.String)" class="com.hexidec.ekit.component.HTMLUtilities" />
	<method signature="boolean checkParentsTag(javax.swing.text.html.HTML$Tag)" class="com.hexidec.ekit.component.HTMLUtilities" />
	<method signature="void &lt;init&gt;(com.hexidec.ekit.EkitCore)" class="com.hexidec.ekit.component.HTMLUtilities" />
	<method signature="javax.swing.text.Element getListItemContainer()" class="com.hexidec.ekit.component.HTMLUtilities" />
	<method signature="javax.swing.text.html.HTML$Tag getHTMLTag(javax.swing.text.Element)" class="com.hexidec.ekit.component.HTMLUtilities" />
	<class name="org.jfree.chart.axis.CyclicNumberAxis" />
	<method signature="void setAdvanceLinePaint(java.awt.Paint)" class="org.jfree.chart.axis.CyclicNumberAxis" />
	<method signature="void &lt;init&gt;(double)" class="org.jfree.chart.axis.CyclicNumberAxis" />
	<method signature="void setPeriod(double)" class="org.jfree.chart.axis.CyclicNumberAxis" />
	<method signature="java.awt.Paint getAdvanceLinePaint()" class="org.jfree.chart.axis.CyclicNumberAxis" />
	<method signature="void setRange(org.jfree.data.Range,boolean,boolean)" class="org.jfree.chart.axis.CyclicNumberAxis" />
	<method signature="void setFixedAutoRange(double)" class="org.jfree.chart.axis.CyclicNumberAxis" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.axis.CyclicNumberAxis" />
	<method signature="void setBoundMappedToLastCycle(boolean)" class="org.jfree.chart.axis.CyclicNumberAxis" />
	<method signature="void setAutoRangeMinimumSize(double,boolean)" class="org.jfree.chart.axis.CyclicNumberAxis" />
	<method signature="java.awt.Stroke getAdvanceLineStroke()" class="org.jfree.chart.axis.CyclicNumberAxis" />
	<method signature="double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.axis.CyclicNumberAxis" />
	<method signature="void setOffset(double)" class="org.jfree.chart.axis.CyclicNumberAxis" />
	<method signature="void &lt;init&gt;(double,java.lang.String)" class="org.jfree.chart.axis.CyclicNumberAxis" />
	<method signature="void setAdvanceLineVisible(boolean)" class="org.jfree.chart.axis.CyclicNumberAxis" />
	<method signature="org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge,org.jfree.chart.axis.AxisSpace)" class="org.jfree.chart.axis.CyclicNumberAxis" />
	<method signature="boolean isAdvanceLineVisible()" class="org.jfree.chart.axis.CyclicNumberAxis" />
	<method signature="double getOffset()" class="org.jfree.chart.axis.CyclicNumberAxis" />
	<method signature="void setAdvanceLineStroke(java.awt.Stroke)" class="org.jfree.chart.axis.CyclicNumberAxis" />
	<method signature="void &lt;init&gt;(double,double,java.lang.String)" class="org.jfree.chart.axis.CyclicNumberAxis" />
	<method signature="org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.axis.CyclicNumberAxis" />
	<method signature="boolean isBoundMappedToLastCycle()" class="org.jfree.chart.axis.CyclicNumberAxis" />
	<method signature="double getCycleBound()" class="org.jfree.chart.axis.CyclicNumberAxis" />
	<method signature="double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.axis.CyclicNumberAxis" />
	<method signature="void centerRange(double)" class="org.jfree.chart.axis.CyclicNumberAxis" />
	<method signature="double getPeriod()" class="org.jfree.chart.axis.CyclicNumberAxis" />
	<method signature="void &lt;init&gt;(double,double)" class="org.jfree.chart.axis.CyclicNumberAxis" />
	<class name="org.jfree.data.general.SeriesException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.data.general.SeriesException" />
	<class name="org.apache.xerces.xni.XMLDocumentHandler" />
	<method signature="void xmlDecl(java.lang.String,java.lang.String,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDocumentHandler" />
	<method signature="void processingInstruction(java.lang.String,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDocumentHandler" />
	<method signature="void endElement(org.apache.xerces.xni.QName,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDocumentHandler" />
	<method signature="void setDocumentSource(org.apache.xerces.xni.parser.XMLDocumentSource)" class="org.apache.xerces.xni.XMLDocumentHandler" />
	<method signature="void doctypeDecl(java.lang.String,java.lang.String,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDocumentHandler" />
	<method signature="void startCDATA(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDocumentHandler" />
	<method signature="void ignorableWhitespace(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDocumentHandler" />
	<method signature="void endDocument(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDocumentHandler" />
	<method signature="void startElement(org.apache.xerces.xni.QName,org.apache.xerces.xni.XMLAttributes,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDocumentHandler" />
	<method signature="void endCDATA(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDocumentHandler" />
	<method signature="void textDecl(java.lang.String,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDocumentHandler" />
	<method signature="void startDocument(org.apache.xerces.xni.XMLLocator,java.lang.String,org.apache.xerces.xni.NamespaceContext,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDocumentHandler" />
	<method signature="void comment(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDocumentHandler" />
	<method signature="void startGeneralEntity(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDocumentHandler" />
	<method signature="org.apache.xerces.xni.parser.XMLDocumentSource getDocumentSource()" class="org.apache.xerces.xni.XMLDocumentHandler" />
	<method signature="void emptyElement(org.apache.xerces.xni.QName,org.apache.xerces.xni.XMLAttributes,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDocumentHandler" />
	<method signature="void endGeneralEntity(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDocumentHandler" />
	<method signature="void characters(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.xni.XMLDocumentHandler" />
	<class name="org.jfree.chart.annotations.CategoryAnnotation" />
	<method signature="void draw(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis)" class="org.jfree.chart.annotations.CategoryAnnotation" />
	<class name="com.google.zxing.oned.rss.RSSUtils" />
	<method signature="int getRSSvalue(int[],int,boolean)" class="com.google.zxing.oned.rss.RSSUtils" />
	<class name="javax.xml.bind.ValidationEventHandler" />
	<method signature="boolean handleEvent(javax.xml.bind.ValidationEvent)" class="javax.xml.bind.ValidationEventHandler" />
	<class name="org.jfree.chart.renderer.xy.SamplingXYLineRenderer" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.renderer.xy.SamplingXYLineRenderer" />
	<method signature="void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)" class="org.jfree.chart.renderer.xy.SamplingXYLineRenderer" />
	<method signature="int getPassCount()" class="org.jfree.chart.renderer.xy.SamplingXYLineRenderer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.xy.SamplingXYLineRenderer" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.xy.SamplingXYLineRenderer" />
	<method signature="java.awt.Shape getLegendLine()" class="org.jfree.chart.renderer.xy.SamplingXYLineRenderer" />
	<method signature="void setLegendLine(java.awt.Shape)" class="org.jfree.chart.renderer.xy.SamplingXYLineRenderer" />
	<method signature="org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.renderer.xy.SamplingXYLineRenderer" />
	<class name="org.apache.xerces.dom.DOMXSImplementationSourceImpl" />
	<method signature="org.w3c.dom.DOMImplementation getDOMImplementation(java.lang.String)" class="org.apache.xerces.dom.DOMXSImplementationSourceImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.dom.DOMXSImplementationSourceImpl" />
	<method signature="org.w3c.dom.DOMImplementationList getDOMImplementationList(java.lang.String)" class="org.apache.xerces.dom.DOMXSImplementationSourceImpl" />
	<class name="javax.xml.transform.sax.SAXSource" />
	<method signature="java.lang.String getSystemId()" class="javax.xml.transform.sax.SAXSource" />
	<method signature="org.xml.sax.XMLReader getXMLReader()" class="javax.xml.transform.sax.SAXSource" />
	<method signature="void setSystemId(java.lang.String)" class="javax.xml.transform.sax.SAXSource" />
	<method signature="org.xml.sax.InputSource getInputSource()" class="javax.xml.transform.sax.SAXSource" />
	<method signature="org.xml.sax.InputSource sourceToInputSource(javax.xml.transform.Source)" class="javax.xml.transform.sax.SAXSource" />
	<method signature="void &lt;init&gt;()" class="javax.xml.transform.sax.SAXSource" />
	<method signature="void &lt;init&gt;(org.xml.sax.InputSource)" class="javax.xml.transform.sax.SAXSource" />
	<method signature="void &lt;init&gt;(org.xml.sax.XMLReader,org.xml.sax.InputSource)" class="javax.xml.transform.sax.SAXSource" />
	<method signature="void setInputSource(org.xml.sax.InputSource)" class="javax.xml.transform.sax.SAXSource" />
	<method signature="void setXMLReader(org.xml.sax.XMLReader)" class="javax.xml.transform.sax.SAXSource" />
	<class name="edu.umd.cs.findbugs.annotations.CheckReturnValue" />
	<method signature="edu.umd.cs.findbugs.annotations.Confidence confidence()" class="edu.umd.cs.findbugs.annotations.CheckReturnValue" />
	<method signature="edu.umd.cs.findbugs.annotations.Priority priority()" class="edu.umd.cs.findbugs.annotations.CheckReturnValue" />
	<method signature="java.lang.String explanation()" class="edu.umd.cs.findbugs.annotations.CheckReturnValue" />
	<class name="org.jfree.chart.axis.SegmentedTimeline$SegmentRange" />
	<method signature="void inc(long)" class="org.jfree.chart.axis.SegmentedTimeline$SegmentRange" />
	<method signature="long getSegmentCount()" class="org.jfree.chart.axis.SegmentedTimeline$SegmentRange" />
	<method signature="org.jfree.chart.axis.SegmentedTimeline$Segment intersect(long,long)" class="org.jfree.chart.axis.SegmentedTimeline$SegmentRange" />
	<method signature="void &lt;init&gt;(org.jfree.chart.axis.SegmentedTimeline,long,long)" class="org.jfree.chart.axis.SegmentedTimeline$SegmentRange" />
	<method signature="boolean inExcludeSegments()" class="org.jfree.chart.axis.SegmentedTimeline$SegmentRange" />
	<method signature="boolean inIncludeSegments()" class="org.jfree.chart.axis.SegmentedTimeline$SegmentRange" />
	<class name="org.apache.xerces.impl.dv.xs.DateDV" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.xs.DateDV" />
	<method signature="java.lang.Object getActualValue(java.lang.String,org.apache.xerces.impl.dv.ValidationContext)" class="org.apache.xerces.impl.dv.xs.DateDV" />
	<class name="org.apache.xerces.impl.xs.opti.NodeImpl" />
	<method signature="short getNodeType()" class="org.apache.xerces.impl.xs.opti.NodeImpl" />
	<method signature="java.lang.String getPrefix()" class="org.apache.xerces.impl.xs.opti.NodeImpl" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xs.opti.NodeImpl" />
	<method signature="java.lang.String getLocalName()" class="org.apache.xerces.impl.xs.opti.NodeImpl" />
	<method signature="boolean getReadOnly()" class="org.apache.xerces.impl.xs.opti.NodeImpl" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,java.lang.String,short)" class="org.apache.xerces.impl.xs.opti.NodeImpl" />
	<method signature="java.lang.String getNamespaceURI()" class="org.apache.xerces.impl.xs.opti.NodeImpl" />
	<method signature="java.lang.String toString()" class="org.apache.xerces.impl.xs.opti.NodeImpl" />
	<method signature="java.lang.String getNodeName()" class="org.apache.xerces.impl.xs.opti.NodeImpl" />
	<method signature="void setReadOnly(boolean,boolean)" class="org.apache.xerces.impl.xs.opti.NodeImpl" />
	<class name="org.jdom2.output.StAXEventOutputter" />
	<method signature="org.jdom2.output.support.StAXEventProcessor getStAXStream()" class="org.jdom2.output.StAXEventOutputter" />
	<method signature="void output(org.jdom2.DocType,javax.xml.stream.util.XMLEventConsumer)" class="org.jdom2.output.StAXEventOutputter" />
	<method signature="void output(org.jdom2.Element,javax.xml.stream.util.XMLEventConsumer)" class="org.jdom2.output.StAXEventOutputter" />
	<method signature="void outputElementContent(org.jdom2.Element,javax.xml.stream.util.XMLEventConsumer)" class="org.jdom2.output.StAXEventOutputter" />
	<method signature="org.jdom2.output.StAXEventOutputter clone()" class="org.jdom2.output.StAXEventOutputter" />
	<method signature="void output(java.util.List,javax.xml.stream.util.XMLEventConsumer)" class="org.jdom2.output.StAXEventOutputter" />
	<method signature="java.lang.Object clone()" class="org.jdom2.output.StAXEventOutputter" />
	<method signature="void &lt;init&gt;(javax.xml.stream.XMLEventFactory)" class="org.jdom2.output.StAXEventOutputter" />
	<method signature="void setFormat(org.jdom2.output.Format)" class="org.jdom2.output.StAXEventOutputter" />
	<method signature="void &lt;init&gt;()" class="org.jdom2.output.StAXEventOutputter" />
	<method signature="void output(org.jdom2.Document,javax.xml.stream.util.XMLEventConsumer)" class="org.jdom2.output.StAXEventOutputter" />
	<method signature="void output(org.jdom2.CDATA,javax.xml.stream.util.XMLEventConsumer)" class="org.jdom2.output.StAXEventOutputter" />
	<method signature="void output(org.jdom2.EntityRef,javax.xml.stream.util.XMLEventConsumer)" class="org.jdom2.output.StAXEventOutputter" />
	<method signature="org.jdom2.output.Format getFormat()" class="org.jdom2.output.StAXEventOutputter" />
	<method signature="javax.xml.stream.XMLEventFactory getEventFactory()" class="org.jdom2.output.StAXEventOutputter" />
	<method signature="void setEventFactory(javax.xml.stream.XMLEventFactory)" class="org.jdom2.output.StAXEventOutputter" />
	<method signature="void &lt;init&gt;(org.jdom2.output.Format,org.jdom2.output.support.StAXEventProcessor,javax.xml.stream.XMLEventFactory)" class="org.jdom2.output.StAXEventOutputter" />
	<method signature="void output(org.jdom2.ProcessingInstruction,javax.xml.stream.util.XMLEventConsumer)" class="org.jdom2.output.StAXEventOutputter" />
	<method signature="void &lt;init&gt;(org.jdom2.output.Format)" class="org.jdom2.output.StAXEventOutputter" />
	<method signature="void output(org.jdom2.Text,javax.xml.stream.util.XMLEventConsumer)" class="org.jdom2.output.StAXEventOutputter" />
	<method signature="void output(org.jdom2.Comment,javax.xml.stream.util.XMLEventConsumer)" class="org.jdom2.output.StAXEventOutputter" />
	<method signature="void &lt;init&gt;(org.jdom2.output.support.StAXEventProcessor)" class="org.jdom2.output.StAXEventOutputter" />
	<method signature="void setStAXEventProcessor(org.jdom2.output.support.StAXEventProcessor)" class="org.jdom2.output.StAXEventOutputter" />
	<method signature="java.lang.String toString()" class="org.jdom2.output.StAXEventOutputter" />
	<class name="org.jfree.data.statistics.SimpleHistogramDataset" />
	<method signature="double getEndXValue(int,int)" class="org.jfree.data.statistics.SimpleHistogramDataset" />
	<method signature="boolean getAdjustForBinSize()" class="org.jfree.data.statistics.SimpleHistogramDataset" />
	<method signature="java.lang.Number getX(int,int)" class="org.jfree.data.statistics.SimpleHistogramDataset" />
	<method signature="double getStartYValue(int,int)" class="org.jfree.data.statistics.SimpleHistogramDataset" />
	<method signature="void clearObservations()" class="org.jfree.data.statistics.SimpleHistogramDataset" />
	<method signature="java.lang.Number getY(int,int)" class="org.jfree.data.statistics.SimpleHistogramDataset" />
	<method signature="void addObservations(double[])" class="org.jfree.data.statistics.SimpleHistogramDataset" />
	<method signature="void removeAllBins()" class="org.jfree.data.statistics.SimpleHistogramDataset" />
	<method signature="int getSeriesCount()" class="org.jfree.data.statistics.SimpleHistogramDataset" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.statistics.SimpleHistogramDataset" />
	<method signature="java.lang.Comparable getSeriesKey(int)" class="org.jfree.data.statistics.SimpleHistogramDataset" />
	<method signature="void addBin(org.jfree.data.statistics.SimpleHistogramBin)" class="org.jfree.data.statistics.SimpleHistogramDataset" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.statistics.SimpleHistogramDataset" />
	<method signature="java.lang.Number getEndX(int,int)" class="org.jfree.data.statistics.SimpleHistogramDataset" />
	<method signature="org.jfree.data.DomainOrder getDomainOrder()" class="org.jfree.data.statistics.SimpleHistogramDataset" />
	<method signature="int getItemCount(int)" class="org.jfree.data.statistics.SimpleHistogramDataset" />
	<method signature="java.lang.Number getEndY(int,int)" class="org.jfree.data.statistics.SimpleHistogramDataset" />
	<method signature="void setAdjustForBinSize(boolean)" class="org.jfree.data.statistics.SimpleHistogramDataset" />
	<method signature="double getXValue(int,int)" class="org.jfree.data.statistics.SimpleHistogramDataset" />
	<method signature="void &lt;init&gt;(java.lang.Comparable)" class="org.jfree.data.statistics.SimpleHistogramDataset" />
	<method signature="void addObservation(double)" class="org.jfree.data.statistics.SimpleHistogramDataset" />
	<method signature="double getEndYValue(int,int)" class="org.jfree.data.statistics.SimpleHistogramDataset" />
	<method signature="void addObservation(double,boolean)" class="org.jfree.data.statistics.SimpleHistogramDataset" />
	<method signature="double getStartXValue(int,int)" class="org.jfree.data.statistics.SimpleHistogramDataset" />
	<method signature="java.lang.Number getStartX(int,int)" class="org.jfree.data.statistics.SimpleHistogramDataset" />
	<method signature="java.lang.Number getStartY(int,int)" class="org.jfree.data.statistics.SimpleHistogramDataset" />
	<method signature="double getYValue(int,int)" class="org.jfree.data.statistics.SimpleHistogramDataset" />
	<class name="org.apache.xerces.impl.xs.opti.SchemaParsingConfig" />
	<method signature="void setLocale(java.util.Locale)" class="org.apache.xerces.impl.xs.opti.SchemaParsingConfig" />
	<method signature="boolean parse(boolean)" class="org.apache.xerces.impl.xs.opti.SchemaParsingConfig" />
	<method signature="void reset()" class="org.apache.xerces.impl.xs.opti.SchemaParsingConfig" />
	<method signature="boolean getFeature(java.lang.String)" class="org.apache.xerces.impl.xs.opti.SchemaParsingConfig" />
	<method signature="void parse(org.apache.xerces.xni.parser.XMLInputSource)" class="org.apache.xerces.impl.xs.opti.SchemaParsingConfig" />
	<method signature="void resetNodePool()" class="org.apache.xerces.impl.xs.opti.SchemaParsingConfig" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="org.apache.xerces.impl.xs.opti.SchemaParsingConfig" />
	<method signature="void cleanup()" class="org.apache.xerces.impl.xs.opti.SchemaParsingConfig" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable)" class="org.apache.xerces.impl.xs.opti.SchemaParsingConfig" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable,org.apache.xerces.xni.grammars.XMLGrammarPool,org.apache.xerces.xni.parser.XMLComponentManager)" class="org.apache.xerces.impl.xs.opti.SchemaParsingConfig" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xs.opti.SchemaParsingConfig" />
	<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable,org.apache.xerces.xni.grammars.XMLGrammarPool)" class="org.apache.xerces.impl.xs.opti.SchemaParsingConfig" />
	<method signature="void setInputSource(org.apache.xerces.xni.parser.XMLInputSource)" class="org.apache.xerces.impl.xs.opti.SchemaParsingConfig" />
	<method signature="void setFeature(java.lang.String,boolean)" class="org.apache.xerces.impl.xs.opti.SchemaParsingConfig" />
	<method signature="java.lang.Object getProperty(java.lang.String)" class="org.apache.xerces.impl.xs.opti.SchemaParsingConfig" />
	<class name="org.jfree.chart.ChartUtilities" />
	<method signature="void writeChartAsJPEG(java.io.OutputStream,float,org.jfree.chart.JFreeChart,int,int)" class="org.jfree.chart.ChartUtilities" />
	<method signature="void writeChartAsPNG(java.io.OutputStream,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)" class="org.jfree.chart.ChartUtilities" />
	<method signature="void writeChartAsPNG(java.io.OutputStream,org.jfree.chart.JFreeChart,int,int)" class="org.jfree.chart.ChartUtilities" />
	<method signature="void saveChartAsJPEG(java.io.File,float,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)" class="org.jfree.chart.ChartUtilities" />
	<method signature="byte[] encodeAsPNG(java.awt.image.BufferedImage,boolean,int)" class="org.jfree.chart.ChartUtilities" />
	<method signature="void writeBufferedImageAsPNG(java.io.OutputStream,java.awt.image.BufferedImage)" class="org.jfree.chart.ChartUtilities" />
	<method signature="void writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)" class="org.jfree.chart.ChartUtilities" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.ChartUtilities" />
	<method signature="void saveChartAsJPEG(java.io.File,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)" class="org.jfree.chart.ChartUtilities" />
	<method signature="void saveChartAsJPEG(java.io.File,float,org.jfree.chart.JFreeChart,int,int)" class="org.jfree.chart.ChartUtilities" />
	<method signature="byte[] encodeAsPNG(java.awt.image.BufferedImage)" class="org.jfree.chart.ChartUtilities" />
	<method signature="void saveChartAsJPEG(java.io.File,org.jfree.chart.JFreeChart,int,int)" class="org.jfree.chart.ChartUtilities" />
	<method signature="void writeBufferedImageAsJPEG(java.io.OutputStream,java.awt.image.BufferedImage)" class="org.jfree.chart.ChartUtilities" />
	<method signature="void writeBufferedImageAsJPEG(java.io.OutputStream,float,java.awt.image.BufferedImage)" class="org.jfree.chart.ChartUtilities" />
	<method signature="void writeBufferedImageAsPNG(java.io.OutputStream,java.awt.image.BufferedImage,boolean,int)" class="org.jfree.chart.ChartUtilities" />
	<method signature="void saveChartAsPNG(java.io.File,org.jfree.chart.JFreeChart,int,int)" class="org.jfree.chart.ChartUtilities" />
	<method signature="void applyCurrentTheme(org.jfree.chart.JFreeChart)" class="org.jfree.chart.ChartUtilities" />
	<method signature="void writeChartAsPNG(java.io.OutputStream,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo,boolean,int)" class="org.jfree.chart.ChartUtilities" />
	<method signature="void saveChartAsPNG(java.io.File,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)" class="org.jfree.chart.ChartUtilities" />
	<method signature="java.lang.String getImageMap(java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)" class="org.jfree.chart.ChartUtilities" />
	<method signature="void writeChartAsPNG(java.io.OutputStream,org.jfree.chart.JFreeChart,int,int,boolean,int)" class="org.jfree.chart.ChartUtilities" />
	<method signature="void writeChartAsJPEG(java.io.OutputStream,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)" class="org.jfree.chart.ChartUtilities" />
	<method signature="void saveChartAsPNG(java.io.File,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo,boolean,int)" class="org.jfree.chart.ChartUtilities" />
	<method signature="void writeChartAsJPEG(java.io.OutputStream,org.jfree.chart.JFreeChart,int,int)" class="org.jfree.chart.ChartUtilities" />
	<method signature="void writeChartAsJPEG(java.io.OutputStream,float,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)" class="org.jfree.chart.ChartUtilities" />
	<method signature="void writeScaledChartAsPNG(java.io.OutputStream,org.jfree.chart.JFreeChart,int,int,int,int)" class="org.jfree.chart.ChartUtilities" />
	<method signature="java.lang.String getImageMap(java.lang.String,org.jfree.chart.ChartRenderingInfo)" class="org.jfree.chart.ChartUtilities" />
	<method signature="void writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo,boolean)" class="org.jfree.chart.ChartUtilities" />
	<class name="tourma.tableModel.MjtRanking" />
	<method signature="int getSortedValue(int,int)" class="tourma.tableModel.MjtRanking" />
	<method signature="int getELOByCoach(tourma.data.Coach,tourma.data.CoachMatch)" class="tourma.tableModel.MjtRanking" />
	<method signature="java.lang.String getDetail()" class="tourma.tableModel.MjtRanking" />
	<method signature="int getCoachTablePoints(tourma.data.Coach,tourma.data.CoachMatch)" class="tourma.tableModel.MjtRanking" />
	<method signature="int getTeamTable(tourma.data.Team,tourma.data.TeamMatch)" class="tourma.tableModel.MjtRanking" />
	<method signature="int getCoachNbMatchs(tourma.data.Coach,tourma.data.CoachMatch)" class="tourma.tableModel.MjtRanking" />
	<method signature="int getOppPointsByCoach(tourma.data.Coach,tourma.data.CoachMatch,boolean)" class="tourma.tableModel.MjtRanking" />
	<method signature="tourma.data.ObjectRanking getSortedObject(int)" class="tourma.tableModel.MjtRanking" />
	<method signature="int getPointsByCoach(tourma.data.Coach,tourma.data.CoachMatch,boolean,boolean)" class="tourma.tableModel.MjtRanking" />
	<method signature="int getValue(tourma.data.Coach,tourma.data.CoachMatch,tourma.data.Criteria,int)" class="tourma.tableModel.MjtRanking" />
	<method signature="int getRankingFromString(java.lang.String,java.util.ArrayList)" class="tourma.tableModel.MjtRanking" />
	<method signature="int getValue(tourma.data.Team,tourma.data.TeamMatch,int,boolean)" class="tourma.tableModel.MjtRanking" />
	<method signature="java.lang.String getRankingString(int)" class="tourma.tableModel.MjtRanking" />
	<method signature="boolean isCellEditable(int,int)" class="tourma.tableModel.MjtRanking" />
	<method signature="int getSubtypeByValue(int)" class="tourma.tableModel.MjtRanking" />
	<method signature="int getRowCount()" class="tourma.tableModel.MjtRanking" />
	<method signature="java.lang.String getColumnName(int)" class="tourma.tableModel.MjtRanking" />
	<method signature="int getColumnCount()" class="tourma.tableModel.MjtRanking" />
	<method signature="int getVNDByCoach(tourma.data.Coach,tourma.data.CoachMatch)" class="tourma.tableModel.MjtRanking" />
	<method signature="int getValue(tourma.data.Coach,tourma.data.CoachMatch,int)" class="tourma.tableModel.MjtRanking" />
	<method signature="tourma.data.Criteria getCriteriaByValue(int)" class="tourma.tableModel.MjtRanking" />
	<method signature="int getOppELOByCoach(tourma.data.Coach,tourma.data.CoachMatch)" class="tourma.tableModel.MjtRanking" />
	<method signature="int getPointsByTeam(tourma.data.Team,tourma.data.TeamMatch,boolean,boolean)" class="tourma.tableModel.MjtRanking" />
	<method signature="void setDetail(java.lang.String)" class="tourma.tableModel.MjtRanking" />
	<method signature="int getRound()" class="tourma.tableModel.MjtRanking" />
	<method signature="void &lt;init&gt;(int,int,int,int,int,int,java.util.ArrayList,boolean)" class="tourma.tableModel.MjtRanking" />
	<method signature="java.awt.Component getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)" class="tourma.tableModel.MjtRanking" />
	<method signature="java.lang.Class getColumnClass(int)" class="tourma.tableModel.MjtRanking" />
	<method signature="java.lang.Object getValueAt(int,int)" class="tourma.tableModel.MjtRanking" />
	<method signature="int getVNDByTeam(tourma.data.Team,tourma.data.TeamMatch,boolean)" class="tourma.tableModel.MjtRanking" />
	<class name="org.apache.commons.lang3.mutable.MutableInt" />
	<method signature="void decrement()" class="org.apache.commons.lang3.mutable.MutableInt" />
	<method signature="int intValue()" class="org.apache.commons.lang3.mutable.MutableInt" />
	<method signature="int compareTo(org.apache.commons.lang3.mutable.MutableInt)" class="org.apache.commons.lang3.mutable.MutableInt" />
	<method signature="boolean equals(java.lang.Object)" class="org.apache.commons.lang3.mutable.MutableInt" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.mutable.MutableInt" />
	<method signature="void setValue(java.lang.Object)" class="org.apache.commons.lang3.mutable.MutableInt" />
	<method signature="java.lang.Integer getValue()" class="org.apache.commons.lang3.mutable.MutableInt" />
	<method signature="java.lang.Object getValue()" class="org.apache.commons.lang3.mutable.MutableInt" />
	<method signature="double doubleValue()" class="org.apache.commons.lang3.mutable.MutableInt" />
	<method signature="float floatValue()" class="org.apache.commons.lang3.mutable.MutableInt" />
	<method signature="int compareTo(java.lang.Object)" class="org.apache.commons.lang3.mutable.MutableInt" />
	<method signature="int hashCode()" class="org.apache.commons.lang3.mutable.MutableInt" />
	<method signature="void setValue(int)" class="org.apache.commons.lang3.mutable.MutableInt" />
	<method signature="void setValue(java.lang.Number)" class="org.apache.commons.lang3.mutable.MutableInt" />
	<method signature="void &lt;init&gt;(int)" class="org.apache.commons.lang3.mutable.MutableInt" />
	<method signature="void increment()" class="org.apache.commons.lang3.mutable.MutableInt" />
	<method signature="void &lt;init&gt;(java.lang.Number)" class="org.apache.commons.lang3.mutable.MutableInt" />
	<method signature="java.lang.Integer toInteger()" class="org.apache.commons.lang3.mutable.MutableInt" />
	<method signature="java.lang.String toString()" class="org.apache.commons.lang3.mutable.MutableInt" />
	<method signature="void subtract(int)" class="org.apache.commons.lang3.mutable.MutableInt" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.apache.commons.lang3.mutable.MutableInt" />
	<method signature="void add(java.lang.Number)" class="org.apache.commons.lang3.mutable.MutableInt" />
	<method signature="long longValue()" class="org.apache.commons.lang3.mutable.MutableInt" />
	<method signature="void subtract(java.lang.Number)" class="org.apache.commons.lang3.mutable.MutableInt" />
	<method signature="void add(int)" class="org.apache.commons.lang3.mutable.MutableInt" />
	<class name="org.w3c.dom.html.HTMLTableCaptionElement" />
	<method signature="void setAlign(java.lang.String)" class="org.w3c.dom.html.HTMLTableCaptionElement" />
	<method signature="java.lang.String getAlign()" class="org.w3c.dom.html.HTMLTableCaptionElement" />
	<class name="javax.xml.bind.JAXBException" />
	<method signature="void printStackTrace(java.io.PrintWriter)" class="javax.xml.bind.JAXBException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Throwable)" class="javax.xml.bind.JAXBException" />
	<method signature="void printStackTrace(java.io.PrintStream)" class="javax.xml.bind.JAXBException" />
	<method signature="java.lang.Throwable getLinkedException()" class="javax.xml.bind.JAXBException" />
	<method signature="void setLinkedException(java.lang.Throwable)" class="javax.xml.bind.JAXBException" />
	<method signature="void &lt;init&gt;(java.lang.Throwable)" class="javax.xml.bind.JAXBException" />
	<method signature="java.lang.String getErrorCode()" class="javax.xml.bind.JAXBException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.Throwable)" class="javax.xml.bind.JAXBException" />
	<method signature="java.lang.String toString()" class="javax.xml.bind.JAXBException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="javax.xml.bind.JAXBException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="javax.xml.bind.JAXBException" />
	<method signature="void printStackTrace()" class="javax.xml.bind.JAXBException" />
	<class name="javax.xml.bind.ParseConversionEvent" />
	<class name="org.xml.sax.helpers.ParserFactory" />
	<method signature="org.xml.sax.Parser makeParser(java.lang.String)" class="org.xml.sax.helpers.ParserFactory" />
	<method signature="org.xml.sax.Parser makeParser()" class="org.xml.sax.helpers.ParserFactory" />
	<class name="javax.annotation.MatchesPattern" />
	<method signature="int flags()" class="javax.annotation.MatchesPattern" />
	<method signature="java.lang.String value()" class="javax.annotation.MatchesPattern" />
	<class name="com.google.zxing.client.j2se.CommandLineEncoder" />
	<method signature="void main(java.lang.String[])" class="com.google.zxing.client.j2se.CommandLineEncoder" />
	<class name="org.xml.sax.helpers.XMLReaderFactory" />
	<method signature="org.xml.sax.XMLReader createXMLReader(java.lang.String)" class="org.xml.sax.helpers.XMLReaderFactory" />
	<method signature="org.xml.sax.XMLReader createXMLReader()" class="org.xml.sax.helpers.XMLReaderFactory" />
	<class name="com.hexidec.ekit.component.UserInputAnchorDialog" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="com.hexidec.ekit.component.UserInputAnchorDialog" />
	<method signature="java.lang.String getInputText()" class="com.hexidec.ekit.component.UserInputAnchorDialog" />
	<method signature="void init()" class="com.hexidec.ekit.component.UserInputAnchorDialog" />
	<method signature="void &lt;init&gt;(com.hexidec.ekit.EkitCore,java.lang.String,boolean,java.lang.String)" class="com.hexidec.ekit.component.UserInputAnchorDialog" />
	<method signature="void setAnchor(java.lang.String)" class="com.hexidec.ekit.component.UserInputAnchorDialog" />
	<class name="org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults" />
	<method signature="boolean isException(java.lang.String)" class="org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults" />
	<method signature="java.util.Set initializerNames()" class="org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults" />
	<method signature="org.apache.commons.lang3.concurrent.BackgroundInitializer getInitializer(java.lang.String)" class="org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults" />
	<method signature="boolean isSuccessful()" class="org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults" />
	<method signature="java.lang.Object getResultObject(java.lang.String)" class="org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults" />
	<method signature="org.apache.commons.lang3.concurrent.ConcurrentException getException(java.lang.String)" class="org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults" />
	<class name="org.apache.xerces.impl.xs.opti.DefaultElement" />
	<method signature="boolean hasAttribute(java.lang.String)" class="org.apache.xerces.impl.xs.opti.DefaultElement" />
	<method signature="org.w3c.dom.TypeInfo getSchemaTypeInfo()" class="org.apache.xerces.impl.xs.opti.DefaultElement" />
	<method signature="org.w3c.dom.Attr removeAttributeNode(org.w3c.dom.Attr)" class="org.apache.xerces.impl.xs.opti.DefaultElement" />
	<method signature="java.lang.String getAttribute(java.lang.String)" class="org.apache.xerces.impl.xs.opti.DefaultElement" />
	<method signature="void setAttribute(java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.opti.DefaultElement" />
	<method signature="void setIdAttribute(java.lang.String,boolean)" class="org.apache.xerces.impl.xs.opti.DefaultElement" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,java.lang.String,short)" class="org.apache.xerces.impl.xs.opti.DefaultElement" />
	<method signature="void removeAttribute(java.lang.String)" class="org.apache.xerces.impl.xs.opti.DefaultElement" />
	<method signature="boolean hasAttributeNS(java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.opti.DefaultElement" />
	<method signature="org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.opti.DefaultElement" />
	<method signature="org.w3c.dom.Attr setAttributeNode(org.w3c.dom.Attr)" class="org.apache.xerces.impl.xs.opti.DefaultElement" />
	<method signature="org.w3c.dom.Attr setAttributeNodeNS(org.w3c.dom.Attr)" class="org.apache.xerces.impl.xs.opti.DefaultElement" />
	<method signature="org.w3c.dom.NodeList getElementsByTagName(java.lang.String)" class="org.apache.xerces.impl.xs.opti.DefaultElement" />
	<method signature="org.w3c.dom.Attr getAttributeNodeNS(java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.opti.DefaultElement" />
	<method signature="org.w3c.dom.Attr getAttributeNode(java.lang.String)" class="org.apache.xerces.impl.xs.opti.DefaultElement" />
	<method signature="void setIdAttributeNode(org.w3c.dom.Attr,boolean)" class="org.apache.xerces.impl.xs.opti.DefaultElement" />
	<method signature="void setIdAttributeNS(java.lang.String,java.lang.String,boolean)" class="org.apache.xerces.impl.xs.opti.DefaultElement" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xs.opti.DefaultElement" />
	<method signature="java.lang.String getAttributeNS(java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.opti.DefaultElement" />
	<method signature="void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.opti.DefaultElement" />
	<method signature="java.lang.String getTagName()" class="org.apache.xerces.impl.xs.opti.DefaultElement" />
	<method signature="void removeAttributeNS(java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.opti.DefaultElement" />
	<class name="org.jfree.chart.axis.CyclicNumberAxis$CycleBoundTick" />
	<method signature="void &lt;init&gt;(boolean,java.lang.Number,java.lang.String,org.jfree.ui.TextAnchor,org.jfree.ui.TextAnchor,double)" class="org.jfree.chart.axis.CyclicNumberAxis$CycleBoundTick" />
	<class name="tourma.views.JPNCup" />
	<method signature="void update()" class="tourma.views.JPNCup" />
	<method signature="void &lt;init&gt;()" class="tourma.views.JPNCup" />
	<class name="org.apache.xerces.impl.XMLDocumentFragmentScannerImpl$ElementStack" />
	<method signature="org.apache.xerces.xni.QName pushElement(org.apache.xerces.xni.QName)" class="org.apache.xerces.impl.XMLDocumentFragmentScannerImpl$ElementStack" />
	<method signature="void clear()" class="org.apache.xerces.impl.XMLDocumentFragmentScannerImpl$ElementStack" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.XMLDocumentFragmentScannerImpl$ElementStack" />
	<method signature="void popElement(org.apache.xerces.xni.QName)" class="org.apache.xerces.impl.XMLDocumentFragmentScannerImpl$ElementStack" />
	<class name="org.jfree.data.xy.VectorXYDataset" />
	<method signature="double getVectorYValue(int,int)" class="org.jfree.data.xy.VectorXYDataset" />
	<method signature="org.jfree.data.xy.Vector getVector(int,int)" class="org.jfree.data.xy.VectorXYDataset" />
	<method signature="double getVectorXValue(int,int)" class="org.jfree.data.xy.VectorXYDataset" />
	<class name="org.apache.commons.lang3.BitField" />
	<method signature="byte setByteBoolean(byte,boolean)" class="org.apache.commons.lang3.BitField" />
	<method signature="short getShortRawValue(short)" class="org.apache.commons.lang3.BitField" />
	<method signature="byte clearByte(byte)" class="org.apache.commons.lang3.BitField" />
	<method signature="byte setByte(byte)" class="org.apache.commons.lang3.BitField" />
	<method signature="short setShortValue(short,short)" class="org.apache.commons.lang3.BitField" />
	<method signature="int getValue(int)" class="org.apache.commons.lang3.BitField" />
	<method signature="short getShortValue(short)" class="org.apache.commons.lang3.BitField" />
	<method signature="boolean isAllSet(int)" class="org.apache.commons.lang3.BitField" />
	<method signature="int getRawValue(int)" class="org.apache.commons.lang3.BitField" />
	<method signature="short setShortBoolean(short,boolean)" class="org.apache.commons.lang3.BitField" />
	<method signature="int clear(int)" class="org.apache.commons.lang3.BitField" />
	<method signature="void &lt;init&gt;(int)" class="org.apache.commons.lang3.BitField" />
	<method signature="boolean isSet(int)" class="org.apache.commons.lang3.BitField" />
	<method signature="short setShort(short)" class="org.apache.commons.lang3.BitField" />
	<method signature="int setBoolean(int,boolean)" class="org.apache.commons.lang3.BitField" />
	<method signature="int setValue(int,int)" class="org.apache.commons.lang3.BitField" />
	<method signature="int set(int)" class="org.apache.commons.lang3.BitField" />
	<method signature="short clearShort(short)" class="org.apache.commons.lang3.BitField" />
	<class name="freemarker.template.utility.XmlEscape" />
	<method signature="void &lt;init&gt;()" class="freemarker.template.utility.XmlEscape" />
	<method signature="java.io.Writer getWriter(java.io.Writer,java.util.Map)" class="freemarker.template.utility.XmlEscape" />
	<class name="freemarker.cache.TemplateCache" />
	<method signature="freemarker.template.Template getTemplate(java.lang.String,java.util.Locale,java.lang.String,boolean)" class="freemarker.cache.TemplateCache" />
	<method signature="void &lt;init&gt;(freemarker.cache.TemplateLoader,freemarker.cache.CacheStorage)" class="freemarker.cache.TemplateCache" />
	<method signature="void setLocalizedLookup(boolean)" class="freemarker.cache.TemplateCache" />
	<method signature="freemarker.cache.TemplateLoader getTemplateLoader()" class="freemarker.cache.TemplateCache" />
	<method signature="void clear()" class="freemarker.cache.TemplateCache" />
	<method signature="void &lt;init&gt;()" class="freemarker.cache.TemplateCache" />
	<method signature="freemarker.cache.CacheStorage getCacheStorage()" class="freemarker.cache.TemplateCache" />
	<method signature="void setConfiguration(freemarker.template.Configuration)" class="freemarker.cache.TemplateCache" />
	<method signature="void setDelay(long)" class="freemarker.cache.TemplateCache" />
	<method signature="java.lang.String getFullTemplatePath(freemarker.core.Environment,java.lang.String,java.lang.String)" class="freemarker.cache.TemplateCache" />
	<method signature="boolean getLocalizedLookup()" class="freemarker.cache.TemplateCache" />
	<method signature="long getDelay()" class="freemarker.cache.TemplateCache" />
	<method signature="void &lt;init&gt;(freemarker.cache.TemplateLoader)" class="freemarker.cache.TemplateCache" />
	<method signature="void removeTemplate(java.lang.String,java.util.Locale,java.lang.String,boolean)" class="freemarker.cache.TemplateCache" />
	<class name="org.jfree.data.xy.XYRangeInfo" />
	<method signature="org.jfree.data.Range getRangeBounds(java.util.List,org.jfree.data.Range,boolean)" class="org.jfree.data.xy.XYRangeInfo" />
	<class name="org.xml.sax.SAXParseException" />
	<method signature="java.lang.String getSystemId()" class="org.xml.sax.SAXParseException" />
	<method signature="void &lt;init&gt;(java.lang.String,org.xml.sax.Locator,java.lang.Exception)" class="org.xml.sax.SAXParseException" />
	<method signature="int getLineNumber()" class="org.xml.sax.SAXParseException" />
	<method signature="void &lt;init&gt;(java.lang.String,org.xml.sax.Locator)" class="org.xml.sax.SAXParseException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,int,int,java.lang.Exception)" class="org.xml.sax.SAXParseException" />
	<method signature="java.lang.String getPublicId()" class="org.xml.sax.SAXParseException" />
	<method signature="int getColumnNumber()" class="org.xml.sax.SAXParseException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,int,int)" class="org.xml.sax.SAXParseException" />
	<class name="javax.xml.transform.SourceLocator" />
	<method signature="java.lang.String getSystemId()" class="javax.xml.transform.SourceLocator" />
	<method signature="int getLineNumber()" class="javax.xml.transform.SourceLocator" />
	<method signature="java.lang.String getPublicId()" class="javax.xml.transform.SourceLocator" />
	<method signature="int getColumnNumber()" class="javax.xml.transform.SourceLocator" />
	<class name="org.apache.xerces.parsers.BasicParserConfiguration" />
	<method signature="org.apache.xerces.xni.XMLDTDHandler getDTDHandler()" class="org.apache.xerces.parsers.BasicParserConfiguration" />
	<method signature="void setEntityResolver(org.apache.xerces.xni.parser.XMLEntityResolver)" class="org.apache.xerces.parsers.BasicParserConfiguration" />
	<method signature="void setLocale(java.util.Locale)" class="org.apache.xerces.parsers.BasicParserConfiguration" />
	<method signature="org.apache.xerces.xni.XMLDTDContentModelHandler getDTDContentModelHandler()" class="org.apache.xerces.parsers.BasicParserConfiguration" />
	<method signature="void parse(org.apache.xerces.xni.parser.XMLInputSource)" class="org.apache.xerces.parsers.BasicParserConfiguration" />
	<method signature="java.util.Locale getLocale()" class="org.apache.xerces.parsers.BasicParserConfiguration" />
	<method signature="org.apache.xerces.xni.XMLDocumentHandler getDocumentHandler()" class="org.apache.xerces.parsers.BasicParserConfiguration" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="org.apache.xerces.parsers.BasicParserConfiguration" />
	<method signature="void setDocumentHandler(org.apache.xerces.xni.XMLDocumentHandler)" class="org.apache.xerces.parsers.BasicParserConfiguration" />
	<method signature="org.apache.xerces.xni.parser.XMLErrorHandler getErrorHandler()" class="org.apache.xerces.parsers.BasicParserConfiguration" />
	<method signature="void setErrorHandler(org.apache.xerces.xni.parser.XMLErrorHandler)" class="org.apache.xerces.parsers.BasicParserConfiguration" />
	<method signature="void setDTDContentModelHandler(org.apache.xerces.xni.XMLDTDContentModelHandler)" class="org.apache.xerces.parsers.BasicParserConfiguration" />
	<method signature="org.apache.xerces.xni.parser.XMLEntityResolver getEntityResolver()" class="org.apache.xerces.parsers.BasicParserConfiguration" />
	<method signature="void setDTDHandler(org.apache.xerces.xni.XMLDTDHandler)" class="org.apache.xerces.parsers.BasicParserConfiguration" />
	<method signature="void setFeature(java.lang.String,boolean)" class="org.apache.xerces.parsers.BasicParserConfiguration" />
	<class name="org.apache.xerces.impl.xs.XMLSchemaValidator$UniqueValueStore" />
	<method signature="void &lt;init&gt;(org.apache.xerces.impl.xs.XMLSchemaValidator,org.apache.xerces.impl.xs.identity.UniqueOrKey)" class="org.apache.xerces.impl.xs.XMLSchemaValidator$UniqueValueStore" />
	<class name="com.bric.swing.ColorSwatch" />
	<method signature="void &lt;init&gt;(int)" class="com.bric.swing.ColorSwatch" />
	<method signature="void paint(java.awt.Graphics)" class="com.bric.swing.ColorSwatch" />
	<class name="org.jfree.ui.RectangleAnchor" />
	<method signature="int hashCode()" class="org.jfree.ui.RectangleAnchor" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.ui.RectangleAnchor" />
	<method signature="java.lang.String toString()" class="org.jfree.ui.RectangleAnchor" />
	<method signature="java.awt.geom.Point2D coordinates(java.awt.geom.Rectangle2D,org.jfree.ui.RectangleAnchor)" class="org.jfree.ui.RectangleAnchor" />
	<method signature="java.awt.geom.Rectangle2D createRectangle(org.jfree.ui.Size2D,double,double,org.jfree.ui.RectangleAnchor)" class="org.jfree.ui.RectangleAnchor" />
	<class name="org.apache.xerces.xs.XSComplexTypeDefinition" />
	<method signature="boolean getAbstract()" class="org.apache.xerces.xs.XSComplexTypeDefinition" />
	<method signature="short getContentType()" class="org.apache.xerces.xs.XSComplexTypeDefinition" />
	<method signature="short getDerivationMethod()" class="org.apache.xerces.xs.XSComplexTypeDefinition" />
	<method signature="org.apache.xerces.xs.XSObjectList getAttributeUses()" class="org.apache.xerces.xs.XSComplexTypeDefinition" />
	<method signature="org.apache.xerces.xs.XSSimpleTypeDefinition getSimpleType()" class="org.apache.xerces.xs.XSComplexTypeDefinition" />
	<method signature="org.apache.xerces.xs.XSWildcard getAttributeWildcard()" class="org.apache.xerces.xs.XSComplexTypeDefinition" />
	<method signature="org.apache.xerces.xs.XSObjectList getAnnotations()" class="org.apache.xerces.xs.XSComplexTypeDefinition" />
	<method signature="short getProhibitedSubstitutions()" class="org.apache.xerces.xs.XSComplexTypeDefinition" />
	<method signature="org.apache.xerces.xs.XSParticle getParticle()" class="org.apache.xerces.xs.XSComplexTypeDefinition" />
	<method signature="boolean isProhibitedSubstitution(short)" class="org.apache.xerces.xs.XSComplexTypeDefinition" />
	<class name="org.jfree.chart.plot.ContourPlot" />
	<method signature="boolean isCompatibleDomainAxis(org.jfree.chart.axis.ValueAxis)" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="org.jfree.chart.axis.ColorBar getColorBar()" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="org.jfree.data.Range visibleRange(org.jfree.data.contour.ContourDataset,org.jfree.data.Range,org.jfree.data.Range)" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="boolean isRangeCrosshairVisible()" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="void render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.CrosshairState)" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="void drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.ContourPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="org.jfree.chart.axis.ValueAxis getRangeAxis()" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="void setDataset(org.jfree.data.contour.ContourDataset)" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="void zoomRangeAxes(double,double,double)" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="org.jfree.data.contour.ContourDataset getDataset()" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="void setRangeCrosshairValue(double)" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="double getDataAreaRatio()" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="java.awt.Paint getDomainCrosshairPaint()" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="boolean isDomainCrosshairLockedOnData()" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="void setDomainCrosshairPaint(java.awt.Paint)" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="void setRenderAsPoints(boolean)" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="org.jfree.chart.urls.XYURLGenerator getURLGenerator()" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="void setRangeCrosshairVisible(boolean)" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="void setURLGenerator(org.jfree.chart.urls.XYURLGenerator)" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="void drawDomainMarker(java.awt.Graphics2D,org.jfree.chart.plot.ContourPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="void addAnnotation(org.jfree.chart.annotations.XYAnnotation)" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="void setDomainCrosshairValue(double)" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="void addRangeMarker(org.jfree.chart.plot.Marker)" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="org.jfree.chart.ClipPath getClipPath()" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="void setDomainCrosshairLockedOnData(boolean)" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="boolean isRenderAsPoints()" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="void setDomainAxis(org.jfree.chart.axis.ValueAxis)" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="java.awt.Stroke getRangeCrosshairStroke()" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="org.jfree.ui.RectangleEdge getColorBarLocation()" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="void zoomRangeAxes(double,double,double,double)" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="void handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="void setRangeCrosshairStroke(java.awt.Stroke)" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="void setColorBarLocation(org.jfree.ui.RectangleEdge)" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="void setRangeCrosshairLockedOnData(boolean)" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="java.awt.Paint getMissingPaint()" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="void axisChanged(org.jfree.chart.event.AxisChangeEvent)" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="void clearRangeMarkers()" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="boolean isRangeCrosshairLockedOnData()" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="org.jfree.chart.axis.ValueAxis getDomainAxis()" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="java.lang.String getPlotType()" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="boolean isDomainCrosshairVisible()" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="void setToolTipGenerator(org.jfree.chart.labels.ContourToolTipGenerator)" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="void setMissingPaint(java.awt.Paint)" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="void propertyChange(java.beans.PropertyChangeEvent)" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="void setRangeAxis(org.jfree.chart.axis.ValueAxis)" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="void setDomainCrosshairValue(double,boolean)" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="void setClipPath(org.jfree.chart.ClipPath)" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="void setRangeCrosshairPaint(java.awt.Paint)" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="java.awt.Paint getRangeCrosshairPaint()" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="void setDataAreaRatio(double)" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="void clearDomainMarkers()" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="void zoomDomainAxes(double,double,double)" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="void zoom(double)" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="org.jfree.data.Range getContourDataRange()" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="void setRangeCrosshairValue(double,boolean)" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="void &lt;init&gt;(org.jfree.data.contour.ContourDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ColorBar)" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="double getRangeCrosshairValue()" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="void setDomainCrosshairVisible(boolean)" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="boolean isDomainZoomable()" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="double getDomainCrosshairValue()" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="void datasetChanged(org.jfree.data.general.DatasetChangeEvent)" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="double getPtSizePct()" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="void pointRenderer(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.ContourPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ColorBar,org.jfree.data.contour.ContourDataset,org.jfree.chart.plot.CrosshairState)" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="java.awt.Stroke getDomainCrosshairStroke()" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="boolean isRangeZoomable()" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="void contourRenderer(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.ContourPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ColorBar,org.jfree.data.contour.ContourDataset,org.jfree.chart.plot.CrosshairState)" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="void setPtSizePct(double)" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="void addDomainMarker(org.jfree.chart.plot.Marker)" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="void setColorBarAxis(org.jfree.chart.axis.ColorBar)" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="void setDomainCrosshairStroke(java.awt.Stroke)" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="void zoomDomainAxes(double,double,double,double)" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="org.jfree.chart.labels.ContourToolTipGenerator getToolTipGenerator()" class="org.jfree.chart.plot.ContourPlot" />
	<method signature="void clearAnnotations()" class="org.jfree.chart.plot.ContourPlot" />
	<class name="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="boolean isWebFilled()" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="java.awt.Stroke getSeriesOutlineStroke()" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="void setBaseSeriesOutlineStroke(java.awt.Stroke)" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="void setSeriesPaint(int,java.awt.Paint)" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="void setMaxValue(double)" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="void setInteriorGap(double)" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="java.awt.Paint getSeriesPaint()" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="void setSeriesOutlineStroke(int,java.awt.Stroke)" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="java.awt.Stroke getSeriesOutlineStroke(int)" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="void &lt;init&gt;(org.jfree.data.category.CategoryDataset)" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="void setWebFilled(boolean)" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="void setAxisLabelGap(double)" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="java.awt.Paint getAxisLinePaint()" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="void setSeriesOutlineStroke(java.awt.Stroke)" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="void setSeriesOutlinePaint(java.awt.Paint)" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="org.jfree.chart.labels.CategoryItemLabelGenerator getLabelGenerator()" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="java.awt.Paint getLabelPaint()" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="java.awt.Stroke getAxisLineStroke()" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="java.awt.Paint getSeriesOutlinePaint(int)" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="void setLabelPaint(java.awt.Paint)" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="void setBaseSeriesOutlinePaint(java.awt.Paint)" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="double getAxisLabelGap()" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="java.awt.Font getLabelFont()" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="org.jfree.chart.urls.CategoryURLGenerator getURLGenerator()" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="java.awt.Paint getBaseSeriesOutlinePaint()" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="java.lang.String getPlotType()" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="org.jfree.chart.labels.CategoryToolTipGenerator getToolTipGenerator()" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="void setAxisLinePaint(java.awt.Paint)" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="void setSeriesOutlinePaint(int,java.awt.Paint)" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="void setDataExtractOrder(org.jfree.util.TableOrder)" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="void setURLGenerator(org.jfree.chart.urls.CategoryURLGenerator)" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="void setLabelGenerator(org.jfree.chart.labels.CategoryItemLabelGenerator)" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="void setBaseSeriesPaint(java.awt.Paint)" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="void setDataset(org.jfree.data.category.CategoryDataset)" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="org.jfree.util.Rotation getDirection()" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="java.awt.Paint getSeriesOutlinePaint()" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="void setDirection(org.jfree.util.Rotation)" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="void setStartAngle(double)" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="java.awt.Shape getLegendItemShape()" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="void setSeriesPaint(java.awt.Paint)" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="double getHeadPercent()" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="double getStartAngle()" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="void setToolTipGenerator(org.jfree.chart.labels.CategoryToolTipGenerator)" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="org.jfree.util.TableOrder getDataExtractOrder()" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="void setAxisLineStroke(java.awt.Stroke)" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="void setLabelFont(java.awt.Font)" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="double getInteriorGap()" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="java.awt.Stroke getBaseSeriesOutlineStroke()" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="java.awt.Paint getBaseSeriesPaint()" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="void &lt;init&gt;(org.jfree.data.category.CategoryDataset,org.jfree.util.TableOrder)" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="java.awt.Paint getSeriesPaint(int)" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="double getMaxValue()" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="org.jfree.chart.LegendItemCollection getLegendItems()" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="org.jfree.data.category.CategoryDataset getDataset()" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="void setHeadPercent(double)" class="org.jfree.chart.plot.SpiderWebPlot" />
	<method signature="void setLegendItemShape(java.awt.Shape)" class="org.jfree.chart.plot.SpiderWebPlot" />
	<class name="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
	<method signature="org.jfree.chart.labels.CategorySeriesLabelGenerator getLegendItemToolTipGenerator()" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
	<method signature="org.jfree.chart.labels.CategoryItemLabelGenerator getItemLabelGenerator(int,int)" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
	<method signature="void setSeriesToolTipGenerator(int,org.jfree.chart.labels.CategoryToolTipGenerator)" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
	<method signature="void drawBackground(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D)" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
	<method signature="org.jfree.chart.labels.CategorySeriesLabelGenerator getLegendItemLabelGenerator()" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
	<method signature="void drawDomainMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.plot.CategoryMarker,java.awt.geom.Rectangle2D)" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
	<method signature="void drawDomainGridline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,double)" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
	<method signature="org.jfree.chart.LegendItem getLegendItem(int,int)" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
	<method signature="org.jfree.chart.labels.CategoryToolTipGenerator getSeriesToolTipGenerator(int)" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
	<method signature="void setSeriesItemLabelGenerator(int,org.jfree.chart.labels.CategoryItemLabelGenerator)" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
	<method signature="void setBaseItemLabelGenerator(org.jfree.chart.labels.CategoryItemLabelGenerator)" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
	<method signature="int getRowCount()" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
	<method signature="org.jfree.chart.urls.CategoryURLGenerator getSeriesItemURLGenerator(int)" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
	<method signature="int getColumnCount()" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
	<method signature="void drawOutline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D)" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
	<method signature="void setItemLabelGenerator(org.jfree.chart.labels.CategoryItemLabelGenerator)" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
	<method signature="void setPlot(org.jfree.chart.plot.CategoryPlot)" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
	<method signature="org.jfree.chart.labels.CategoryToolTipGenerator getBaseToolTipGenerator()" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
	<method signature="org.jfree.chart.urls.CategoryURLGenerator getItemURLGenerator(int,int)" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
	<method signature="double getItemMiddle(java.lang.Comparable,java.lang.Comparable,org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
	<method signature="void setSeriesItemURLGenerator(int,org.jfree.chart.urls.CategoryURLGenerator)" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
	<method signature="void setBaseItemURLGenerator(org.jfree.chart.urls.CategoryURLGenerator)" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
	<method signature="org.jfree.chart.plot.CategoryPlot getPlot()" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
	<method signature="org.jfree.chart.labels.CategoryToolTipGenerator getToolTipGenerator()" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
	<method signature="int getPassCount()" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
	<method signature="void drawRangeLine(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double,java.awt.Paint,java.awt.Stroke)" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
	<method signature="org.jfree.chart.labels.CategoryItemLabelGenerator getSeriesItemLabelGenerator(int)" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
	<method signature="org.jfree.chart.plot.DrawingSupplier getDrawingSupplier()" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
	<method signature="void setItemURLGenerator(org.jfree.chart.urls.CategoryURLGenerator)" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
	<method signature="org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
	<method signature="void setBaseToolTipGenerator(org.jfree.chart.labels.CategoryToolTipGenerator)" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
	<method signature="void setLegendItemLabelGenerator(org.jfree.chart.labels.CategorySeriesLabelGenerator)" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
	<method signature="void drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
	<method signature="org.jfree.chart.urls.CategoryURLGenerator getBaseItemURLGenerator()" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
	<method signature="int hashCode()" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
	<method signature="org.jfree.chart.labels.CategoryToolTipGenerator getToolTipGenerator(int,int)" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
	<method signature="void setToolTipGenerator(org.jfree.chart.labels.CategoryToolTipGenerator)" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
	<method signature="void drawRangeGridline(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,double)" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
	<method signature="org.jfree.chart.labels.CategorySeriesLabelGenerator getLegendItemURLGenerator()" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
	<method signature="org.jfree.chart.labels.CategoryItemLabelGenerator getBaseItemLabelGenerator()" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
	<method signature="void setLegendItemToolTipGenerator(org.jfree.chart.labels.CategorySeriesLabelGenerator)" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
	<method signature="org.jfree.chart.renderer.category.CategoryItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
	<method signature="org.jfree.chart.LegendItemCollection getLegendItems()" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
	<method signature="void setLegendItemURLGenerator(org.jfree.chart.labels.CategorySeriesLabelGenerator)" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
	<class name="org.jfree.chart.title.PaintScaleLegend" />
	<method signature="void setStripOutlinePaint(java.awt.Paint)" class="org.jfree.chart.title.PaintScaleLegend" />
	<method signature="int getSubdivisionCount()" class="org.jfree.chart.title.PaintScaleLegend" />
	<method signature="void setAxisLocation(org.jfree.chart.axis.AxisLocation)" class="org.jfree.chart.title.PaintScaleLegend" />
	<method signature="java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)" class="org.jfree.chart.title.PaintScaleLegend" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.title.PaintScaleLegend" />
	<method signature="java.awt.Paint getStripOutlinePaint()" class="org.jfree.chart.title.PaintScaleLegend" />
	<method signature="void setAxisOffset(double)" class="org.jfree.chart.title.PaintScaleLegend" />
	<method signature="java.awt.Stroke getStripOutlineStroke()" class="org.jfree.chart.title.PaintScaleLegend" />
	<method signature="void setStripWidth(double)" class="org.jfree.chart.title.PaintScaleLegend" />
	<method signature="void setSubdivisionCount(int)" class="org.jfree.chart.title.PaintScaleLegend" />
	<method signature="org.jfree.chart.renderer.PaintScale getScale()" class="org.jfree.chart.title.PaintScaleLegend" />
	<method signature="void setScale(org.jfree.chart.renderer.PaintScale)" class="org.jfree.chart.title.PaintScaleLegend" />
	<method signature="void &lt;init&gt;(org.jfree.chart.renderer.PaintScale,org.jfree.chart.axis.ValueAxis)" class="org.jfree.chart.title.PaintScaleLegend" />
	<method signature="java.awt.Paint getBackgroundPaint()" class="org.jfree.chart.title.PaintScaleLegend" />
	<method signature="void setStripOutlineStroke(java.awt.Stroke)" class="org.jfree.chart.title.PaintScaleLegend" />
	<method signature="org.jfree.ui.Size2D arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" class="org.jfree.chart.title.PaintScaleLegend" />
	<method signature="void setStripOutlineVisible(boolean)" class="org.jfree.chart.title.PaintScaleLegend" />
	<method signature="void setAxis(org.jfree.chart.axis.ValueAxis)" class="org.jfree.chart.title.PaintScaleLegend" />
	<method signature="double getAxisOffset()" class="org.jfree.chart.title.PaintScaleLegend" />
	<method signature="boolean isStripOutlineVisible()" class="org.jfree.chart.title.PaintScaleLegend" />
	<method signature="org.jfree.chart.axis.AxisLocation getAxisLocation()" class="org.jfree.chart.title.PaintScaleLegend" />
	<method signature="double getStripWidth()" class="org.jfree.chart.title.PaintScaleLegend" />
	<method signature="void axisChanged(org.jfree.chart.event.AxisChangeEvent)" class="org.jfree.chart.title.PaintScaleLegend" />
	<method signature="void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" class="org.jfree.chart.title.PaintScaleLegend" />
	<method signature="org.jfree.chart.axis.ValueAxis getAxis()" class="org.jfree.chart.title.PaintScaleLegend" />
	<method signature="void setBackgroundPaint(java.awt.Paint)" class="org.jfree.chart.title.PaintScaleLegend" />
	<class name="com.bric.swing.ColorPickerPanel" />
	<method signature="void addChangeListener(javax.swing.event.ChangeListener)" class="com.bric.swing.ColorPickerPanel" />
	<method signature="float[] getHSB()" class="com.bric.swing.ColorPickerPanel" />
	<method signature="void paint(java.awt.Graphics)" class="com.bric.swing.ColorPickerPanel" />
	<method signature="int[] getRGB()" class="com.bric.swing.ColorPickerPanel" />
	<method signature="void &lt;init&gt;()" class="com.bric.swing.ColorPickerPanel" />
	<method signature="void setMode(int)" class="com.bric.swing.ColorPickerPanel" />
	<method signature="void setRGB(int,int,int)" class="com.bric.swing.ColorPickerPanel" />
	<method signature="void setHSB(float,float,float)" class="com.bric.swing.ColorPickerPanel" />
	<method signature="void removeChangeListener(javax.swing.event.ChangeListener)" class="com.bric.swing.ColorPickerPanel" />
	<class name="org.jdom2.filter.Filter" />
	<method signature="org.jdom2.filter.Filter refine(org.jdom2.filter.Filter)" class="org.jdom2.filter.Filter" />
	<method signature="java.lang.Object filter(java.lang.Object)" class="org.jdom2.filter.Filter" />
	<method signature="org.jdom2.filter.Filter and(org.jdom2.filter.Filter)" class="org.jdom2.filter.Filter" />
	<method signature="java.util.List filter(java.util.List)" class="org.jdom2.filter.Filter" />
	<method signature="org.jdom2.filter.Filter negate()" class="org.jdom2.filter.Filter" />
	<method signature="boolean matches(java.lang.Object)" class="org.jdom2.filter.Filter" />
	<method signature="org.jdom2.filter.Filter or(org.jdom2.filter.Filter)" class="org.jdom2.filter.Filter" />
	<class name="org.apache.xerces.impl.dv.xs.QNameDV" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.xs.QNameDV" />
	<method signature="java.lang.Object getActualValue(java.lang.String,org.apache.xerces.impl.dv.ValidationContext)" class="org.apache.xerces.impl.dv.xs.QNameDV" />
	<method signature="int getDataLength(java.lang.Object)" class="org.apache.xerces.impl.dv.xs.QNameDV" />
	<method signature="short getAllowedFacets()" class="org.apache.xerces.impl.dv.xs.QNameDV" />
	<class name="org.jfree.ui.OverlayLayout" />
	<method signature="void addLayoutComponent(java.lang.String,java.awt.Component)" class="org.jfree.ui.OverlayLayout" />
	<method signature="void &lt;init&gt;()" class="org.jfree.ui.OverlayLayout" />
	<method signature="void layoutContainer(java.awt.Container)" class="org.jfree.ui.OverlayLayout" />
	<method signature="void &lt;init&gt;(boolean)" class="org.jfree.ui.OverlayLayout" />
	<method signature="void removeLayoutComponent(java.awt.Component)" class="org.jfree.ui.OverlayLayout" />
	<method signature="java.awt.Dimension preferredLayoutSize(java.awt.Container)" class="org.jfree.ui.OverlayLayout" />
	<method signature="java.awt.Dimension minimumLayoutSize(java.awt.Container)" class="org.jfree.ui.OverlayLayout" />
	<class name="freemarker.core.NonStringException" />
	<method signature="void &lt;init&gt;(freemarker.core.Environment)" class="freemarker.core.NonStringException" />
	<method signature="void &lt;init&gt;(java.lang.String,freemarker.core.Environment)" class="freemarker.core.NonStringException" />
	<class name="org.apache.xerces.impl.XMLNamespaceBinder" />
	<method signature="java.lang.String[] getRecognizedProperties()" class="org.apache.xerces.impl.XMLNamespaceBinder" />
	<method signature="void processingInstruction(java.lang.String,org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.XMLNamespaceBinder" />
	<method signature="void endElement(org.apache.xerces.xni.QName,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.XMLNamespaceBinder" />
	<method signature="java.lang.Boolean getFeatureDefault(java.lang.String)" class="org.apache.xerces.impl.XMLNamespaceBinder" />
	<method signature="void setDocumentSource(org.apache.xerces.xni.parser.XMLDocumentSource)" class="org.apache.xerces.impl.XMLNamespaceBinder" />
	<method signature="void doctypeDecl(java.lang.String,java.lang.String,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.XMLNamespaceBinder" />
	<method signature="void reset(org.apache.xerces.xni.parser.XMLComponentManager)" class="org.apache.xerces.impl.XMLNamespaceBinder" />
	<method signature="void setDocumentHandler(org.apache.xerces.xni.XMLDocumentHandler)" class="org.apache.xerces.impl.XMLNamespaceBinder" />
	<method signature="void startCDATA(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.XMLNamespaceBinder" />
	<method signature="void ignorableWhitespace(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.XMLNamespaceBinder" />
	<method signature="void endCDATA(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.XMLNamespaceBinder" />
	<method signature="void textDecl(java.lang.String,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.XMLNamespaceBinder" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.XMLNamespaceBinder" />
	<method signature="org.apache.xerces.xni.parser.XMLDocumentSource getDocumentSource()" class="org.apache.xerces.impl.XMLNamespaceBinder" />
	<method signature="boolean getOnlyPassPrefixMappingEvents()" class="org.apache.xerces.impl.XMLNamespaceBinder" />
	<method signature="void emptyElement(org.apache.xerces.xni.QName,org.apache.xerces.xni.XMLAttributes,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.XMLNamespaceBinder" />
	<method signature="void characters(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.XMLNamespaceBinder" />
	<method signature="void setFeature(java.lang.String,boolean)" class="org.apache.xerces.impl.XMLNamespaceBinder" />
	<method signature="void xmlDecl(java.lang.String,java.lang.String,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.XMLNamespaceBinder" />
	<method signature="java.lang.String[] getRecognizedFeatures()" class="org.apache.xerces.impl.XMLNamespaceBinder" />
	<method signature="void setProperty(java.lang.String,java.lang.Object)" class="org.apache.xerces.impl.XMLNamespaceBinder" />
	<method signature="org.apache.xerces.xni.XMLDocumentHandler getDocumentHandler()" class="org.apache.xerces.impl.XMLNamespaceBinder" />
	<method signature="java.lang.Object getPropertyDefault(java.lang.String)" class="org.apache.xerces.impl.XMLNamespaceBinder" />
	<method signature="void endDocument(org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.XMLNamespaceBinder" />
	<method signature="void startElement(org.apache.xerces.xni.QName,org.apache.xerces.xni.XMLAttributes,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.XMLNamespaceBinder" />
	<method signature="void startGeneralEntity(java.lang.String,org.apache.xerces.xni.XMLResourceIdentifier,java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.XMLNamespaceBinder" />
	<method signature="void startDocument(org.apache.xerces.xni.XMLLocator,java.lang.String,org.apache.xerces.xni.NamespaceContext,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.XMLNamespaceBinder" />
	<method signature="void comment(org.apache.xerces.xni.XMLString,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.XMLNamespaceBinder" />
	<method signature="void setOnlyPassPrefixMappingEvents(boolean)" class="org.apache.xerces.impl.XMLNamespaceBinder" />
	<method signature="void endGeneralEntity(java.lang.String,org.apache.xerces.xni.Augmentations)" class="org.apache.xerces.impl.XMLNamespaceBinder" />
	<class name="org.apache.xerces.xinclude.XIncludeTextReader" />
	<method signature="void &lt;init&gt;(org.apache.xerces.xni.parser.XMLInputSource,org.apache.xerces.xinclude.XIncludeHandler,int)" class="org.apache.xerces.xinclude.XIncludeTextReader" />
	<method signature="void close()" class="org.apache.xerces.xinclude.XIncludeTextReader" />
	<method signature="void setErrorReporter(org.apache.xerces.impl.XMLErrorReporter)" class="org.apache.xerces.xinclude.XIncludeTextReader" />
	<method signature="void parse()" class="org.apache.xerces.xinclude.XIncludeTextReader" />
	<method signature="void setInputSource(org.apache.xerces.xni.parser.XMLInputSource)" class="org.apache.xerces.xinclude.XIncludeTextReader" />
	<class name="org.jfree.util.Log$SimpleMessage" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)" class="org.jfree.util.Log$SimpleMessage" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Object)" class="org.jfree.util.Log$SimpleMessage" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Object[])" class="org.jfree.util.Log$SimpleMessage" />
	<method signature="java.lang.String toString()" class="org.jfree.util.Log$SimpleMessage" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)" class="org.jfree.util.Log$SimpleMessage" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.Object,java.lang.Object)" class="org.jfree.util.Log$SimpleMessage" />
	<class name="org.jfree.chart.needle.WindNeedle" />
	<method signature="int hashCode()" class="org.jfree.chart.needle.WindNeedle" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.needle.WindNeedle" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.needle.WindNeedle" />
	<class name="tourma.JdgChangePairing" />
	<method signature="void &lt;init&gt;(java.awt.Frame,boolean,tourma.data.Round)" class="tourma.JdgChangePairing" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="tourma.JdgChangePairing" />
	<class name="org.apache.xerces.impl.dv.dtd.XML11NMTOKENDatatypeValidator" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.dtd.XML11NMTOKENDatatypeValidator" />
	<method signature="void validate(java.lang.String,org.apache.xerces.impl.dv.ValidationContext)" class="org.apache.xerces.impl.dv.dtd.XML11NMTOKENDatatypeValidator" />
	<class name="org.apache.xerces.impl.validation.ValidationManager" />
	<method signature="boolean isCachedDTD()" class="org.apache.xerces.impl.validation.ValidationManager" />
	<method signature="boolean isGrammarFound()" class="org.apache.xerces.impl.validation.ValidationManager" />
	<method signature="void reset()" class="org.apache.xerces.impl.validation.ValidationManager" />
	<method signature="void addValidationState(org.apache.xerces.impl.validation.ValidationState)" class="org.apache.xerces.impl.validation.ValidationManager" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.validation.ValidationManager" />
	<method signature="void setEntityState(org.apache.xerces.impl.validation.EntityState)" class="org.apache.xerces.impl.validation.ValidationManager" />
	<method signature="void setGrammarFound(boolean)" class="org.apache.xerces.impl.validation.ValidationManager" />
	<method signature="void setCachedDTD(boolean)" class="org.apache.xerces.impl.validation.ValidationManager" />
	<class name="org.unbescape.css.CssStringEscapeLevel" />
	<method signature="org.unbescape.css.CssStringEscapeLevel valueOf(java.lang.String)" class="org.unbescape.css.CssStringEscapeLevel" />
	<method signature="int getEscapeLevel()" class="org.unbescape.css.CssStringEscapeLevel" />
	<method signature="org.unbescape.css.CssStringEscapeLevel forLevel(int)" class="org.unbescape.css.CssStringEscapeLevel" />
	<method signature="org.unbescape.css.CssStringEscapeLevel[] values()" class="org.unbescape.css.CssStringEscapeLevel" />
	<class name="com.swabunga.spell.event.StringWordTokenizer" />
	<method signature="boolean hasMoreWords()" class="com.swabunga.spell.event.StringWordTokenizer" />
	<method signature="int getCurrentWordEnd()" class="com.swabunga.spell.event.StringWordTokenizer" />
	<method signature="int getCurrentWordCount()" class="com.swabunga.spell.event.StringWordTokenizer" />
	<method signature="void replaceWord(java.lang.String)" class="com.swabunga.spell.event.StringWordTokenizer" />
	<method signature="java.lang.String getFinalText()" class="com.swabunga.spell.event.StringWordTokenizer" />
	<method signature="java.lang.String nextWord()" class="com.swabunga.spell.event.StringWordTokenizer" />
	<method signature="void main(java.lang.String[])" class="com.swabunga.spell.event.StringWordTokenizer" />
	<method signature="int getCurrentWordPosition()" class="com.swabunga.spell.event.StringWordTokenizer" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="com.swabunga.spell.event.StringWordTokenizer" />
	<method signature="boolean isNewSentance()" class="com.swabunga.spell.event.StringWordTokenizer" />
	<method signature="java.lang.String getContext()" class="com.swabunga.spell.event.StringWordTokenizer" />
	<class name="org.apache.commons.lang3.builder.ToStringStyle" />
	<method signature="void append(java.lang.StringBuffer,java.lang.String,int[],java.lang.Boolean)" class="org.apache.commons.lang3.builder.ToStringStyle" />
	<method signature="void append(java.lang.StringBuffer,java.lang.String,java.lang.Object[],java.lang.Boolean)" class="org.apache.commons.lang3.builder.ToStringStyle" />
	<method signature="void append(java.lang.StringBuffer,java.lang.String,double)" class="org.apache.commons.lang3.builder.ToStringStyle" />
	<method signature="void append(java.lang.StringBuffer,java.lang.String,byte[],java.lang.Boolean)" class="org.apache.commons.lang3.builder.ToStringStyle" />
	<method signature="void append(java.lang.StringBuffer,java.lang.String,long[],java.lang.Boolean)" class="org.apache.commons.lang3.builder.ToStringStyle" />
	<method signature="void append(java.lang.StringBuffer,java.lang.String,double[],java.lang.Boolean)" class="org.apache.commons.lang3.builder.ToStringStyle" />
	<method signature="void append(java.lang.StringBuffer,java.lang.String,float[],java.lang.Boolean)" class="org.apache.commons.lang3.builder.ToStringStyle" />
	<method signature="void append(java.lang.StringBuffer,java.lang.String,float)" class="org.apache.commons.lang3.builder.ToStringStyle" />
	<method signature="void append(java.lang.StringBuffer,java.lang.String,boolean[],java.lang.Boolean)" class="org.apache.commons.lang3.builder.ToStringStyle" />
	<method signature="void append(java.lang.StringBuffer,java.lang.String,int)" class="org.apache.commons.lang3.builder.ToStringStyle" />
	<method signature="void appendStart(java.lang.StringBuffer,java.lang.Object)" class="org.apache.commons.lang3.builder.ToStringStyle" />
	<method signature="void append(java.lang.StringBuffer,java.lang.String,boolean)" class="org.apache.commons.lang3.builder.ToStringStyle" />
	<method signature="void append(java.lang.StringBuffer,java.lang.String,char[],java.lang.Boolean)" class="org.apache.commons.lang3.builder.ToStringStyle" />
	<method signature="void appendEnd(java.lang.StringBuffer,java.lang.Object)" class="org.apache.commons.lang3.builder.ToStringStyle" />
	<method signature="void appendSuper(java.lang.StringBuffer,java.lang.String)" class="org.apache.commons.lang3.builder.ToStringStyle" />
	<method signature="void append(java.lang.StringBuffer,java.lang.String,java.lang.Object,java.lang.Boolean)" class="org.apache.commons.lang3.builder.ToStringStyle" />
	<method signature="void append(java.lang.StringBuffer,java.lang.String,char)" class="org.apache.commons.lang3.builder.ToStringStyle" />
	<method signature="void append(java.lang.StringBuffer,java.lang.String,short[],java.lang.Boolean)" class="org.apache.commons.lang3.builder.ToStringStyle" />
	<method signature="void append(java.lang.StringBuffer,java.lang.String,byte)" class="org.apache.commons.lang3.builder.ToStringStyle" />
	<method signature="void append(java.lang.StringBuffer,java.lang.String,long)" class="org.apache.commons.lang3.builder.ToStringStyle" />
	<method signature="void append(java.lang.StringBuffer,java.lang.String,short)" class="org.apache.commons.lang3.builder.ToStringStyle" />
	<method signature="void appendToString(java.lang.StringBuffer,java.lang.String)" class="org.apache.commons.lang3.builder.ToStringStyle" />
	<class name="org.jfree.data.statistics.StatisticalCategoryDataset" />
	<method signature="java.lang.Number getMeanValue(int,int)" class="org.jfree.data.statistics.StatisticalCategoryDataset" />
	<method signature="java.lang.Number getStdDevValue(int,int)" class="org.jfree.data.statistics.StatisticalCategoryDataset" />
	<method signature="java.lang.Number getMeanValue(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.statistics.StatisticalCategoryDataset" />
	<method signature="java.lang.Number getStdDevValue(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.statistics.StatisticalCategoryDataset" />
	<class name="org.apache.commons.lang3.ArrayUtils" />
	<method signature="java.lang.Object[] removeElement(java.lang.Object[],java.lang.Object)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="double[] subarray(double[],int,int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="java.lang.Object[] subarray(java.lang.Object[],int,int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="short[] subarray(short[],int,int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="java.lang.Byte[] toObject(byte[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int[] nullToEmpty(int[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="java.lang.Short[] toObject(short[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="double[] toPrimitive(java.lang.Double[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean isNotEmpty(byte[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="float[] removeAll(float[],int[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean isSorted(float[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int[] remove(int[],int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="float[] toPrimitive(java.lang.Float[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean isSameLength(long[],long[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="long[] nullToEmpty(long[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean contains(byte[],byte)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="long[] removeAll(long[],int[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="java.lang.Object[] remove(java.lang.Object[],int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int indexOf(int[],int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="char[] add(char[],int,char)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="byte[] toPrimitive(java.lang.Byte[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean contains(char[],char)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean isNotEmpty(java.lang.Object[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="java.lang.Object[] toArray(java.lang.Object[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="java.lang.Object[] removeElements(java.lang.Object[],java.lang.Object[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int indexOf(long[],long)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="java.lang.Float[] nullToEmpty(java.lang.Float[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int lastIndexOf(double[],double,double)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="java.lang.Integer[] nullToEmpty(java.lang.Integer[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int lastIndexOf(java.lang.Object[],java.lang.Object,int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="long[] toPrimitive(java.lang.Long[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean[] removeElements(boolean[],boolean[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int indexOf(int[],int,int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean contains(double[],double)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean isEmpty(byte[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="long[] add(long[],long)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int[] clone(int[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int[] add(int[],int,int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="double[] addAll(double[],double[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int getLength(java.lang.Object)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="char[] toPrimitive(java.lang.Character[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean isSorted(double[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="byte[] remove(byte[],int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="long[] remove(long[],int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="float[] add(float[],int,float)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int lastIndexOf(boolean[],boolean)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean isEmpty(java.lang.Object[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int indexOf(double[],double,int,double)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean contains(float[],float)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean[] toPrimitive(java.lang.Boolean[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean isSorted(java.lang.Comparable[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="short[] toPrimitive(java.lang.Short[],short)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="long[] addAll(long[],long[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean isSorted(char[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int[] add(int[],int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="long[] clone(long[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean isSorted(short[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int hashCode(java.lang.Object)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int indexOf(long[],long,int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="float[] addAll(float[],float[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int indexOf(short[],short)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean isEmpty(double[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="java.lang.Double[] nullToEmpty(java.lang.Double[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int[] addAll(int[],int[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean isSorted(byte[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean isNotEmpty(float[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="char[] add(char[],char)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int indexOf(float[],float,int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int lastIndexOf(float[],float)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="double[] add(double[],double)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="byte[] nullToEmpty(byte[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int indexOf(java.lang.Object[],java.lang.Object)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean contains(boolean[],boolean)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean isEmpty(char[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="java.lang.Class[] nullToEmpty(java.lang.Class[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="java.lang.String[] nullToEmpty(java.lang.String[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="char[] clone(char[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="void reverse(int[],int,int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="float[] add(float[],float)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean isEmpty(short[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="short[] removeElements(short[],short[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="byte[] removeElements(byte[],byte[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int indexOf(double[],double,int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="char[] toPrimitive(java.lang.Character[],char)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean isSameLength(int[],int[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean isSorted(java.lang.Object[],java.util.Comparator)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="void reverse(long[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="void reverse(byte[],int,int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean contains(double[],double,double)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean[] removeAll(boolean[],int[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="java.lang.Character[] toObject(char[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean isEmpty(float[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="java.lang.String toString(java.lang.Object)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="short[] removeElement(short[],short)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int lastIndexOf(short[],short,int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int indexOf(byte[],byte,int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="void reverse(boolean[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean[] add(boolean[],boolean)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="float[] toPrimitive(java.lang.Float[],float)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="double[] toPrimitive(java.lang.Double[],double)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int[] subarray(int[],int,int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="java.lang.Boolean[] nullToEmpty(java.lang.Boolean[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean isNotEmpty(double[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="long[] toPrimitive(java.lang.Long[],long)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="byte[] subarray(byte[],int,int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int lastIndexOf(byte[],byte)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="byte[] toPrimitive(java.lang.Byte[],byte)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="java.lang.Short[] nullToEmpty(java.lang.Short[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean[] subarray(boolean[],int,int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int indexOf(char[],char,int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="void reverse(int[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="short[] add(short[],int,short)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="void reverse(long[],int,int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="java.util.Map toMap(java.lang.Object[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int[] toPrimitive(java.lang.Integer[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int lastIndexOf(char[],char)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean[] toPrimitive(java.lang.Boolean[],boolean)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="byte[] add(byte[],byte)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="byte[] add(byte[],int,byte)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="char[] nullToEmpty(char[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean isNotEmpty(char[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int[] removeAll(int[],int[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int indexOf(boolean[],boolean,int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="char[] addAll(char[],char[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="byte[] clone(byte[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean isSameLength(double[],double[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int lastIndexOf(double[],double)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="java.lang.Long[] nullToEmpty(java.lang.Long[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean isNotEmpty(short[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="byte[] removeAll(byte[],int[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="double[] nullToEmpty(double[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="long[] subarray(long[],int,int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean contains(java.lang.Object[],java.lang.Object)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="void reverse(char[],int,int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int[] removeElements(int[],int[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int lastIndexOf(double[],double,int,double)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int lastIndexOf(long[],long,int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean isNotEmpty(long[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="long[] removeElement(long[],long)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean isNotEmpty(boolean[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="float[] removeElements(float[],float[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean isSameType(java.lang.Object,java.lang.Object)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="java.lang.Object[] removeAll(java.lang.Object[],int[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="void reverse(char[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean isSameLength(short[],short[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="double[] removeAll(double[],int[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean[] nullToEmpty(boolean[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="void reverse(short[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="short[] addAll(short[],short[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int[] removeElement(int[],int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="byte[] addAll(byte[],byte[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean isSameLength(byte[],byte[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="short[] removeAll(short[],int[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int lastIndexOf(int[],int,int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="float[] subarray(float[],int,int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int indexOf(boolean[],boolean)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="java.lang.Byte[] nullToEmpty(java.lang.Byte[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean contains(short[],short)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean isNotEmpty(int[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="float[] clone(float[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="java.lang.Double[] toObject(double[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="void reverse(byte[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean isSameLength(char[],char[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="void reverse(float[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean isEmpty(long[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="java.lang.Long[] toObject(long[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="java.lang.Boolean[] toObject(boolean[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int lastIndexOf(int[],int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean isEmpty(boolean[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="float[] remove(float[],int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="void reverse(double[],int,int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int indexOf(java.lang.Object[],java.lang.Object,int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int indexOf(double[],double,double)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="double[] clone(double[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int lastIndexOf(long[],long)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="java.lang.Object[] add(java.lang.Object[],java.lang.Object)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="float[] nullToEmpty(float[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="void reverse(short[],int,int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean isEmpty(int[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean[] add(boolean[],int,boolean)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="short[] toPrimitive(java.lang.Short[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="char[] removeElements(char[],char[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="void reverse(java.lang.Object[],int,int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="void reverse(boolean[],int,int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="void reverse(double[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean[] clone(boolean[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean isSameLength(boolean[],boolean[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int indexOf(char[],char)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="double[] add(double[],int,double)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="java.lang.Object[] nullToEmpty(java.lang.Object[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean isSameLength(float[],float[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean isSameLength(java.lang.Object[],java.lang.Object[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean isSorted(long[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean contains(int[],int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int indexOf(double[],double)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean[] removeElement(boolean[],boolean)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="char[] remove(char[],int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean isSorted(boolean[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int lastIndexOf(boolean[],boolean,int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="short[] add(short[],short)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="java.lang.Integer[] toObject(int[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean contains(long[],long)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean[] addAll(boolean[],boolean[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="long[] add(long[],int,long)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int indexOf(short[],short,int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int lastIndexOf(byte[],byte,int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int[] toPrimitive(java.lang.Integer[],int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="short[] clone(short[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="char[] subarray(char[],int,int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="java.lang.Object[] addAll(java.lang.Object[],java.lang.Object[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int lastIndexOf(char[],char,int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="byte[] removeElement(byte[],byte)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int indexOf(byte[],byte)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean isSorted(int[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean isEquals(java.lang.Object,java.lang.Object)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="java.lang.Character[] nullToEmpty(java.lang.Character[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="double[] remove(double[],int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="void reverse(float[],int,int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="double[] removeElement(double[],double)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="double[] removeElements(double[],double[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="java.lang.Object[] add(java.lang.Object[],int,java.lang.Object)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="char[] removeElement(char[],char)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int lastIndexOf(java.lang.Object[],java.lang.Object)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="boolean[] remove(boolean[],int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="java.lang.Object[] clone(java.lang.Object[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="short[] remove(short[],int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int lastIndexOf(double[],double,int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="java.lang.Float[] toObject(float[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int lastIndexOf(short[],short)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="long[] removeElements(long[],long[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="java.lang.String toString(java.lang.Object,java.lang.String)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="float[] removeElement(float[],float)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int lastIndexOf(float[],float,int)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="char[] removeAll(char[],int[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="short[] nullToEmpty(short[])" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="int indexOf(float[],float)" class="org.apache.commons.lang3.ArrayUtils" />
	<method signature="void reverse(java.lang.Object[])" class="org.apache.commons.lang3.ArrayUtils" />
	<class name="org.apache.commons.lang3.mutable.Mutable" />
	<method signature="void setValue(java.lang.Object)" class="org.apache.commons.lang3.mutable.Mutable" />
	<method signature="java.lang.Object getValue()" class="org.apache.commons.lang3.mutable.Mutable" />
	<class name="org.apache.xerces.impl.dv.dtd.ListDatatypeValidator" />
	<method signature="void &lt;init&gt;(org.apache.xerces.impl.dv.DatatypeValidator)" class="org.apache.xerces.impl.dv.dtd.ListDatatypeValidator" />
	<method signature="void validate(java.lang.String,org.apache.xerces.impl.dv.ValidationContext)" class="org.apache.xerces.impl.dv.dtd.ListDatatypeValidator" />
	<class name="org.apache.xml.serialize.XML11Serializer" />
	<method signature="void &lt;init&gt;(java.io.Writer,org.apache.xml.serialize.OutputFormat)" class="org.apache.xml.serialize.XML11Serializer" />
	<method signature="boolean reset()" class="org.apache.xml.serialize.XML11Serializer" />
	<method signature="void &lt;init&gt;(org.apache.xml.serialize.OutputFormat)" class="org.apache.xml.serialize.XML11Serializer" />
	<method signature="void characters(char[],int,int)" class="org.apache.xml.serialize.XML11Serializer" />
	<method signature="void &lt;init&gt;()" class="org.apache.xml.serialize.XML11Serializer" />
	<method signature="void &lt;init&gt;(java.io.OutputStream,org.apache.xml.serialize.OutputFormat)" class="org.apache.xml.serialize.XML11Serializer" />
	<class name="edu.umd.cs.findbugs.annotations.When" />
	<method signature="edu.umd.cs.findbugs.annotations.When valueOf(java.lang.String)" class="edu.umd.cs.findbugs.annotations.When" />
	<method signature="edu.umd.cs.findbugs.annotations.When[] values()" class="edu.umd.cs.findbugs.annotations.When" />
	<class name="freemarker.template.utility.Constants" />
	<method signature="void &lt;init&gt;()" class="freemarker.template.utility.Constants" />
	<class name="org.jfree.chart.editor.PaletteSample" />
	<method signature="org.jfree.chart.plot.ColorPalette getPalette()" class="org.jfree.chart.editor.PaletteSample" />
	<method signature="java.awt.Component getListCellRendererComponent(javax.swing.JList,java.lang.Object,int,boolean,boolean)" class="org.jfree.chart.editor.PaletteSample" />
	<method signature="java.awt.Dimension getPreferredSize()" class="org.jfree.chart.editor.PaletteSample" />
	<method signature="void &lt;init&gt;(org.jfree.chart.plot.ColorPalette)" class="org.jfree.chart.editor.PaletteSample" />
	<method signature="void paintComponent(java.awt.Graphics)" class="org.jfree.chart.editor.PaletteSample" />
	<method signature="void setPalette(org.jfree.chart.plot.ColorPalette)" class="org.jfree.chart.editor.PaletteSample" />
	<class name="org.apache.xerces.xs.XSImplementation" />
	<method signature="org.apache.xerces.xs.XSLoader createXSLoader(org.apache.xerces.xs.StringList)" class="org.apache.xerces.xs.XSImplementation" />
	<method signature="org.apache.xerces.xs.StringList getRecognizedVersions()" class="org.apache.xerces.xs.XSImplementation" />
	<method signature="org.apache.xerces.xs.LSInputList createLSInputList(org.w3c.dom.ls.LSInput[])" class="org.apache.xerces.xs.XSImplementation" />
	<method signature="org.apache.xerces.xs.StringList createStringList(java.lang.String[])" class="org.apache.xerces.xs.XSImplementation" />
	<class name="org.jfree.chart.renderer.OutlierList" />
	<method signature="void updateAveragedOutlier()" class="org.jfree.chart.renderer.OutlierList" />
	<method signature="boolean add(org.jfree.chart.renderer.Outlier)" class="org.jfree.chart.renderer.OutlierList" />
	<method signature="int getItemCount()" class="org.jfree.chart.renderer.OutlierList" />
	<method signature="boolean isOverlapped(org.jfree.chart.renderer.Outlier)" class="org.jfree.chart.renderer.OutlierList" />
	<method signature="org.jfree.chart.renderer.Outlier getAveragedOutlier()" class="org.jfree.chart.renderer.OutlierList" />
	<method signature="boolean isMultiple()" class="org.jfree.chart.renderer.OutlierList" />
	<method signature="void setAveragedOutlier(org.jfree.chart.renderer.Outlier)" class="org.jfree.chart.renderer.OutlierList" />
	<method signature="void &lt;init&gt;(org.jfree.chart.renderer.Outlier)" class="org.jfree.chart.renderer.OutlierList" />
	<method signature="void setMultiple(boolean)" class="org.jfree.chart.renderer.OutlierList" />
	<class name="org.jfree.chart.event.TitleChangeListener" />
	<method signature="void titleChanged(org.jfree.chart.event.TitleChangeEvent)" class="org.jfree.chart.event.TitleChangeListener" />
	<class name="org.apache.xerces.util.SymbolHash$Entry" />
	<method signature="org.apache.xerces.util.SymbolHash$Entry makeClone()" class="org.apache.xerces.util.SymbolHash$Entry" />
	<method signature="void &lt;init&gt;()" class="org.apache.xerces.util.SymbolHash$Entry" />
	<method signature="void &lt;init&gt;(java.lang.Object,java.lang.Object,org.apache.xerces.util.SymbolHash$Entry)" class="org.apache.xerces.util.SymbolHash$Entry" />
	<class name="org.jfree.data.xml.CategorySeriesHandler" />
	<method signature="void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" class="org.jfree.data.xml.CategorySeriesHandler" />
	<method signature="void setSeriesKey(java.lang.Comparable)" class="org.jfree.data.xml.CategorySeriesHandler" />
	<method signature="void endElement(java.lang.String,java.lang.String,java.lang.String)" class="org.jfree.data.xml.CategorySeriesHandler" />
	<method signature="void addItem(java.lang.Comparable,java.lang.Number)" class="org.jfree.data.xml.CategorySeriesHandler" />
	<method signature="void &lt;init&gt;(org.jfree.data.xml.RootHandler)" class="org.jfree.data.xml.CategorySeriesHandler" />
	<class name="freemarker.core.NonDateException" />
	<method signature="void &lt;init&gt;(freemarker.core.Environment)" class="freemarker.core.NonDateException" />
	<method signature="void &lt;init&gt;(java.lang.String,freemarker.core.Environment)" class="freemarker.core.NonDateException" />
	<class name="org.jfree.util.BooleanUtilities" />
	<method signature="java.lang.Boolean valueOf(boolean)" class="org.jfree.util.BooleanUtilities" />
	<class name="org.apache.commons.lang3.exception.DefaultExceptionContext" />
	<method signature="java.util.Set getContextLabels()" class="org.apache.commons.lang3.exception.DefaultExceptionContext" />
	<method signature="java.lang.Object getFirstContextValue(java.lang.String)" class="org.apache.commons.lang3.exception.DefaultExceptionContext" />
	<method signature="java.lang.String getFormattedExceptionMessage(java.lang.String)" class="org.apache.commons.lang3.exception.DefaultExceptionContext" />
	<method signature="java.util.List getContextValues(java.lang.String)" class="org.apache.commons.lang3.exception.DefaultExceptionContext" />
	<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.exception.DefaultExceptionContext" />
	<method signature="org.apache.commons.lang3.exception.DefaultExceptionContext setContextValue(java.lang.String,java.lang.Object)" class="org.apache.commons.lang3.exception.DefaultExceptionContext" />
	<method signature="org.apache.commons.lang3.exception.ExceptionContext setContextValue(java.lang.String,java.lang.Object)" class="org.apache.commons.lang3.exception.DefaultExceptionContext" />
	<method signature="org.apache.commons.lang3.exception.ExceptionContext addContextValue(java.lang.String,java.lang.Object)" class="org.apache.commons.lang3.exception.DefaultExceptionContext" />
	<method signature="org.apache.commons.lang3.exception.DefaultExceptionContext addContextValue(java.lang.String,java.lang.Object)" class="org.apache.commons.lang3.exception.DefaultExceptionContext" />
	<method signature="java.util.List getContextEntries()" class="org.apache.commons.lang3.exception.DefaultExceptionContext" />
	<class name="freemarker.template.TemplateHashModelEx" />
	<method signature="int size()" class="freemarker.template.TemplateHashModelEx" />
	<method signature="freemarker.template.TemplateCollectionModel keys()" class="freemarker.template.TemplateHashModelEx" />
	<method signature="freemarker.template.TemplateCollectionModel values()" class="freemarker.template.TemplateHashModelEx" />
	<class name="org.jfree.data.KeyToGroupMap" />
	<method signature="java.lang.Comparable getGroup(java.lang.Comparable)" class="org.jfree.data.KeyToGroupMap" />
	<method signature="void mapKeyToGroup(java.lang.Comparable,java.lang.Comparable)" class="org.jfree.data.KeyToGroupMap" />
	<method signature="void &lt;init&gt;(java.lang.Comparable)" class="org.jfree.data.KeyToGroupMap" />
	<method signature="java.util.List getGroups()" class="org.jfree.data.KeyToGroupMap" />
	<method signature="int getKeyCount(java.lang.Comparable)" class="org.jfree.data.KeyToGroupMap" />
	<method signature="java.lang.Object clone()" class="org.jfree.data.KeyToGroupMap" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.data.KeyToGroupMap" />
	<method signature="void &lt;init&gt;()" class="org.jfree.data.KeyToGroupMap" />
	<method signature="int getGroupCount()" class="org.jfree.data.KeyToGroupMap" />
	<method signature="int getGroupIndex(java.lang.Comparable)" class="org.jfree.data.KeyToGroupMap" />
	<class name="org.jfree.util.ResourceBundleSupport" />
	<method signature="javax.swing.JMenu createMenu(java.lang.String)" class="org.jfree.util.ResourceBundleSupport" />
	<method signature="javax.swing.KeyStroke getKeyStroke(java.lang.String)" class="org.jfree.util.ResourceBundleSupport" />
	<method signature="void &lt;init&gt;(java.util.Locale,java.util.ResourceBundle)" class="org.jfree.util.ResourceBundleSupport" />
	<method signature="javax.swing.KeyStroke getKeyStroke(java.lang.String,int)" class="org.jfree.util.ResourceBundleSupport" />
	<method signature="java.util.Locale getLocale()" class="org.jfree.util.ResourceBundleSupport" />
	<method signature="java.lang.String formatMessage(java.lang.String,java.lang.Object,java.lang.Object)" class="org.jfree.util.ResourceBundleSupport" />
	<method signature="java.lang.Integer getMnemonic(java.lang.String)" class="org.jfree.util.ResourceBundleSupport" />
	<method signature="java.lang.String formatMessage(java.lang.String,java.lang.Object[])" class="org.jfree.util.ResourceBundleSupport" />
	<method signature="void &lt;init&gt;(java.util.Locale,java.lang.String)" class="org.jfree.util.ResourceBundleSupport" />
	<method signature="javax.swing.Icon createTransparentIcon(int,int)" class="org.jfree.util.ResourceBundleSupport" />
	<method signature="javax.swing.Icon getIcon(java.lang.String,boolean)" class="org.jfree.util.ResourceBundleSupport" />
	<method signature="java.lang.String formatMessage(java.lang.String,java.lang.Object)" class="org.jfree.util.ResourceBundleSupport" />
	<method signature="java.lang.String getString(java.lang.String)" class="org.jfree.util.ResourceBundleSupport" />
	<method signature="javax.swing.KeyStroke getOptionalKeyStroke(java.lang.String)" class="org.jfree.util.ResourceBundleSupport" />
	<method signature="javax.swing.KeyStroke getOptionalKeyStroke(java.lang.String,int)" class="org.jfree.util.ResourceBundleSupport" />
	<method signature="java.net.URL getResourceURL(java.lang.String)" class="org.jfree.util.ResourceBundleSupport" />
	<method signature="javax.swing.Icon getIcon(java.lang.String)" class="org.jfree.util.ResourceBundleSupport" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.util.ResourceBundleSupport" />
	<method signature="void &lt;init&gt;(java.util.ResourceBundle)" class="org.jfree.util.ResourceBundleSupport" />
	<method signature="java.lang.Integer getOptionalMnemonic(java.lang.String)" class="org.jfree.util.ResourceBundleSupport" />
	<class name="org.apache.html.dom.HTMLHeadingElementImpl" />
	<method signature="void setAlign(java.lang.String)" class="org.apache.html.dom.HTMLHeadingElementImpl" />
	<method signature="java.lang.String getAlign()" class="org.apache.html.dom.HTMLHeadingElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLHeadingElementImpl" />
	<class name="org.jfree.ui.ArrowPanel" />
	<method signature="void &lt;init&gt;(int)" class="org.jfree.ui.ArrowPanel" />
	<method signature="void paintComponent(java.awt.Graphics)" class="org.jfree.ui.ArrowPanel" />
	<class name="org.jfree.chart.plot.dial.DialCap" />
	<method signature="void setOutlineStroke(java.awt.Stroke)" class="org.jfree.chart.plot.dial.DialCap" />
	<method signature="int hashCode()" class="org.jfree.chart.plot.dial.DialCap" />
	<method signature="java.awt.Stroke getOutlineStroke()" class="org.jfree.chart.plot.dial.DialCap" />
	<method signature="void setFillPaint(java.awt.Paint)" class="org.jfree.chart.plot.dial.DialCap" />
	<method signature="void setOutlinePaint(java.awt.Paint)" class="org.jfree.chart.plot.dial.DialCap" />
	<method signature="boolean isClippedToWindow()" class="org.jfree.chart.plot.dial.DialCap" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.plot.dial.DialCap" />
	<method signature="void setRadius(double)" class="org.jfree.chart.plot.dial.DialCap" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.plot.dial.DialCap" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.plot.dial.DialCap" />
	<method signature="java.awt.Paint getOutlinePaint()" class="org.jfree.chart.plot.dial.DialCap" />
	<method signature="double getRadius()" class="org.jfree.chart.plot.dial.DialCap" />
	<method signature="java.awt.Paint getFillPaint()" class="org.jfree.chart.plot.dial.DialCap" />
	<method signature="void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)" class="org.jfree.chart.plot.dial.DialCap" />
	<class name="org.jfree.JCommonInfo" />
	<method signature="org.jfree.JCommonInfo getInstance()" class="org.jfree.JCommonInfo" />
	<class name="org.jfree.chart.imagemap.ImageMapUtilities" />
	<method signature="java.lang.String htmlEscape(java.lang.String)" class="org.jfree.chart.imagemap.ImageMapUtilities" />
	<method signature="void writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo)" class="org.jfree.chart.imagemap.ImageMapUtilities" />
	<method signature="void writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)" class="org.jfree.chart.imagemap.ImageMapUtilities" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.imagemap.ImageMapUtilities" />
	<method signature="java.lang.String getImageMap(java.lang.String,org.jfree.chart.ChartRenderingInfo)" class="org.jfree.chart.imagemap.ImageMapUtilities" />
	<method signature="void writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo,boolean)" class="org.jfree.chart.imagemap.ImageMapUtilities" />
	<method signature="java.lang.String getImageMap(java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)" class="org.jfree.chart.imagemap.ImageMapUtilities" />
	<method signature="java.lang.String javascriptEscape(java.lang.String)" class="org.jfree.chart.imagemap.ImageMapUtilities" />
	<class name="org.apache.html.dom.HTMLTableSectionElementImpl" />
	<method signature="void setAlign(java.lang.String)" class="org.apache.html.dom.HTMLTableSectionElementImpl" />
	<method signature="java.lang.String getCh()" class="org.apache.html.dom.HTMLTableSectionElementImpl" />
	<method signature="org.w3c.dom.html.HTMLElement insertRow(int)" class="org.apache.html.dom.HTMLTableSectionElementImpl" />
	<method signature="org.w3c.dom.html.HTMLCollection getRows()" class="org.apache.html.dom.HTMLTableSectionElementImpl" />
	<method signature="org.w3c.dom.Node cloneNode(boolean)" class="org.apache.html.dom.HTMLTableSectionElementImpl" />
	<method signature="void setVAlign(java.lang.String)" class="org.apache.html.dom.HTMLTableSectionElementImpl" />
	<method signature="java.lang.String getAlign()" class="org.apache.html.dom.HTMLTableSectionElementImpl" />
	<method signature="void deleteRow(int)" class="org.apache.html.dom.HTMLTableSectionElementImpl" />
	<method signature="void setChOff(java.lang.String)" class="org.apache.html.dom.HTMLTableSectionElementImpl" />
	<method signature="void setCh(java.lang.String)" class="org.apache.html.dom.HTMLTableSectionElementImpl" />
	<method signature="java.lang.String getChOff()" class="org.apache.html.dom.HTMLTableSectionElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLTableSectionElementImpl" />
	<method signature="java.lang.String getVAlign()" class="org.apache.html.dom.HTMLTableSectionElementImpl" />
	<class name="org.apache.xerces.xs.XSFacet" />
	<method signature="short getFacetKind()" class="org.apache.xerces.xs.XSFacet" />
	<method signature="java.lang.String getLexicalFacetValue()" class="org.apache.xerces.xs.XSFacet" />
	<method signature="java.lang.Object getActualFacetValue()" class="org.apache.xerces.xs.XSFacet" />
	<method signature="org.apache.xerces.xs.XSAnnotation getAnnotation()" class="org.apache.xerces.xs.XSFacet" />
	<method signature="org.apache.xerces.xs.XSObjectList getAnnotations()" class="org.apache.xerces.xs.XSFacet" />
	<method signature="int getIntFacetValue()" class="org.apache.xerces.xs.XSFacet" />
	<method signature="boolean getFixed()" class="org.apache.xerces.xs.XSFacet" />
	<class name="org.jfree.chart.renderer.category.GradientBarPainter" />
	<method signature="void paintBarShadow(java.awt.Graphics2D,org.jfree.chart.renderer.category.BarRenderer,int,int,java.awt.geom.RectangularShape,org.jfree.ui.RectangleEdge,boolean)" class="org.jfree.chart.renderer.category.GradientBarPainter" />
	<method signature="int hashCode()" class="org.jfree.chart.renderer.category.GradientBarPainter" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.renderer.category.GradientBarPainter" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.category.GradientBarPainter" />
	<method signature="void &lt;init&gt;(double,double,double)" class="org.jfree.chart.renderer.category.GradientBarPainter" />
	<method signature="void paintBar(java.awt.Graphics2D,org.jfree.chart.renderer.category.BarRenderer,int,int,java.awt.geom.RectangularShape,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.renderer.category.GradientBarPainter" />
	<class name="com.google.zxing.common.reedsolomon.ReedSolomonException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="com.google.zxing.common.reedsolomon.ReedSolomonException" />
	<class name="org.jfree.chart.labels.HighLowItemLabelGenerator" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.labels.HighLowItemLabelGenerator" />
	<method signature="int hashCode()" class="org.jfree.chart.labels.HighLowItemLabelGenerator" />
	<method signature="void &lt;init&gt;(java.text.DateFormat,java.text.NumberFormat)" class="org.jfree.chart.labels.HighLowItemLabelGenerator" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.labels.HighLowItemLabelGenerator" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.labels.HighLowItemLabelGenerator" />
	<method signature="java.lang.String generateToolTip(org.jfree.data.xy.XYDataset,int,int)" class="org.jfree.chart.labels.HighLowItemLabelGenerator" />
	<method signature="java.lang.String generateLabel(org.jfree.data.xy.XYDataset,int,int)" class="org.jfree.chart.labels.HighLowItemLabelGenerator" />
	<class name="org.jfree.chart.plot.PieLabelLinkStyle" />
	<method signature="int hashCode()" class="org.jfree.chart.plot.PieLabelLinkStyle" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.plot.PieLabelLinkStyle" />
	<method signature="java.lang.String toString()" class="org.jfree.chart.plot.PieLabelLinkStyle" />
	<class name="com.toedter.calendar.JTextFieldDateEditor" />
	<method signature="void setLocale(java.util.Locale)" class="com.toedter.calendar.JTextFieldDateEditor" />
	<method signature="java.util.Date getDate()" class="com.toedter.calendar.JTextFieldDateEditor" />
	<method signature="void setMaxSelectableDate(java.util.Date)" class="com.toedter.calendar.JTextFieldDateEditor" />
	<method signature="void setDate(java.util.Date)" class="com.toedter.calendar.JTextFieldDateEditor" />
	<method signature="void setMaskVisible(boolean)" class="com.toedter.calendar.JTextFieldDateEditor" />
	<method signature="void setEnabled(boolean)" class="com.toedter.calendar.JTextFieldDateEditor" />
	<method signature="void focusLost(java.awt.event.FocusEvent)" class="com.toedter.calendar.JTextFieldDateEditor" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="com.toedter.calendar.JTextFieldDateEditor" />
	<method signature="void &lt;init&gt;()" class="com.toedter.calendar.JTextFieldDateEditor" />
	<method signature="void main(java.lang.String[])" class="com.toedter.calendar.JTextFieldDateEditor" />
	<method signature="javax.swing.JComponent getUiComponent()" class="com.toedter.calendar.JTextFieldDateEditor" />
	<method signature="java.lang.String createMaskFromDatePattern(java.lang.String)" class="com.toedter.calendar.JTextFieldDateEditor" />
	<method signature="java.awt.Dimension getPreferredSize()" class="com.toedter.calendar.JTextFieldDateEditor" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,char)" class="com.toedter.calendar.JTextFieldDateEditor" />
	<method signature="boolean isMaskVisible()" class="com.toedter.calendar.JTextFieldDateEditor" />
	<method signature="java.util.Date getMaxSelectableDate()" class="com.toedter.calendar.JTextFieldDateEditor" />
	<method signature="void setSelectableDateRange(java.util.Date,java.util.Date)" class="com.toedter.calendar.JTextFieldDateEditor" />
	<method signature="void caretUpdate(javax.swing.event.CaretEvent)" class="com.toedter.calendar.JTextFieldDateEditor" />
	<method signature="void setMinSelectableDate(java.util.Date)" class="com.toedter.calendar.JTextFieldDateEditor" />
	<method signature="java.lang.String getDateFormatString()" class="com.toedter.calendar.JTextFieldDateEditor" />
	<method signature="void &lt;init&gt;(boolean,java.lang.String,java.lang.String,char)" class="com.toedter.calendar.JTextFieldDateEditor" />
	<method signature="void setDateFormatString(java.lang.String)" class="com.toedter.calendar.JTextFieldDateEditor" />
	<method signature="java.util.Date getMinSelectableDate()" class="com.toedter.calendar.JTextFieldDateEditor" />
	<method signature="void focusGained(java.awt.event.FocusEvent)" class="com.toedter.calendar.JTextFieldDateEditor" />
	<class name="org.w3c.dom.html.HTMLHeadingElement" />
	<method signature="void setAlign(java.lang.String)" class="org.w3c.dom.html.HTMLHeadingElement" />
	<method signature="java.lang.String getAlign()" class="org.w3c.dom.html.HTMLHeadingElement" />
	<class name="tourma.views.report.JdgRanking" />
	<method signature="void &lt;init&gt;(java.awt.Frame,boolean,java.lang.String,int,tourma.data.Tournament,tourma.tableModel.MjtRanking,int)" class="tourma.views.report.JdgRanking" />
	<class name="org.jfree.base.modules.AbstractModule" />
	<method signature="java.lang.String getName()" class="org.jfree.base.modules.AbstractModule" />
	<method signature="java.lang.String getProducer()" class="org.jfree.base.modules.AbstractModule" />
	<method signature="java.lang.String getDescription()" class="org.jfree.base.modules.AbstractModule" />
	<method signature="void configure(org.jfree.base.modules.SubSystem)" class="org.jfree.base.modules.AbstractModule" />
	<method signature="void &lt;init&gt;()" class="org.jfree.base.modules.AbstractModule" />
	<method signature="java.lang.String getSubSystem()" class="org.jfree.base.modules.AbstractModule" />
	<method signature="org.jfree.base.modules.ModuleInfo[] getOptionalModules()" class="org.jfree.base.modules.AbstractModule" />
	<method signature="org.jfree.base.modules.ModuleInfo[] getRequiredModules()" class="org.jfree.base.modules.AbstractModule" />
	<method signature="java.lang.String toString()" class="org.jfree.base.modules.AbstractModule" />
	<method signature="void setOptionalModules(org.jfree.base.modules.ModuleInfo[])" class="org.jfree.base.modules.AbstractModule" />
	<class name="org.unbescape.css.CssIdentifierEscapeLevel" />
	<method signature="int getEscapeLevel()" class="org.unbescape.css.CssIdentifierEscapeLevel" />
	<method signature="org.unbescape.css.CssIdentifierEscapeLevel forLevel(int)" class="org.unbescape.css.CssIdentifierEscapeLevel" />
	<method signature="org.unbescape.css.CssIdentifierEscapeLevel[] values()" class="org.unbescape.css.CssIdentifierEscapeLevel" />
	<method signature="org.unbescape.css.CssIdentifierEscapeLevel valueOf(java.lang.String)" class="org.unbescape.css.CssIdentifierEscapeLevel" />
	<class name="org.jfree.chart.renderer.RendererUtilities" />
	<method signature="int findLiveItemsLowerBound(org.jfree.data.xy.XYDataset,int,double,double)" class="org.jfree.chart.renderer.RendererUtilities" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.renderer.RendererUtilities" />
	<method signature="int[] findLiveItems(org.jfree.data.xy.XYDataset,int,double,double)" class="org.jfree.chart.renderer.RendererUtilities" />
	<method signature="int findLiveItemsUpperBound(org.jfree.data.xy.XYDataset,int,double,double)" class="org.jfree.chart.renderer.RendererUtilities" />
	<class name="org.jfree.chart.axis.ColorBar" />
	<method signature="void configure(org.jfree.chart.plot.ContourPlot)" class="org.jfree.chart.axis.ColorBar" />
	<method signature="void drawColorBar(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.axis.ColorBar" />
	<method signature="int hashCode()" class="org.jfree.chart.axis.ColorBar" />
	<method signature="org.jfree.chart.plot.ColorPalette getColorPalette()" class="org.jfree.chart.axis.ColorBar" />
	<method signature="double draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.axis.ColorBar" />
	<method signature="void setMaximumValue(double)" class="org.jfree.chart.axis.ColorBar" />
	<method signature="org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge,org.jfree.chart.axis.AxisSpace)" class="org.jfree.chart.axis.ColorBar" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.axis.ColorBar" />
	<method signature="void autoAdjustRange()" class="org.jfree.chart.axis.ColorBar" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.axis.ColorBar" />
	<method signature="void setAxis(org.jfree.chart.axis.ValueAxis)" class="org.jfree.chart.axis.ColorBar" />
	<method signature="void setMinimumValue(double)" class="org.jfree.chart.axis.ColorBar" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.chart.axis.ColorBar" />
	<method signature="java.awt.Paint getPaint(double)" class="org.jfree.chart.axis.ColorBar" />
	<method signature="org.jfree.chart.axis.ValueAxis getAxis()" class="org.jfree.chart.axis.ColorBar" />
	<method signature="void setColorPalette(org.jfree.chart.plot.ColorPalette)" class="org.jfree.chart.axis.ColorBar" />
	<class name="freemarker.cache.WebappTemplateLoader" />
	<method signature="void &lt;init&gt;(javax.servlet.ServletContext,java.lang.String)" class="freemarker.cache.WebappTemplateLoader" />
	<method signature="java.lang.Object findTemplateSource(java.lang.String)" class="freemarker.cache.WebappTemplateLoader" />
	<method signature="void &lt;init&gt;(javax.servlet.ServletContext)" class="freemarker.cache.WebappTemplateLoader" />
	<method signature="long getLastModified(java.lang.Object)" class="freemarker.cache.WebappTemplateLoader" />
	<method signature="void closeTemplateSource(java.lang.Object)" class="freemarker.cache.WebappTemplateLoader" />
	<method signature="java.io.Reader getReader(java.lang.Object,java.lang.String)" class="freemarker.cache.WebappTemplateLoader" />
	<class name="org.jfree.chart.title.TextTitle" />
	<method signature="void &lt;init&gt;(java.lang.String,java.awt.Font,java.awt.Paint,org.jfree.ui.RectangleEdge,org.jfree.ui.HorizontalAlignment,org.jfree.ui.VerticalAlignment,org.jfree.ui.RectangleInsets)" class="org.jfree.chart.title.TextTitle" />
	<method signature="void &lt;init&gt;(java.lang.String,java.awt.Font)" class="org.jfree.chart.title.TextTitle" />
	<method signature="java.awt.Font getFont()" class="org.jfree.chart.title.TextTitle" />
	<method signature="java.lang.String getURLText()" class="org.jfree.chart.title.TextTitle" />
	<method signature="void setPaint(java.awt.Paint)" class="org.jfree.chart.title.TextTitle" />
	<method signature="java.lang.Object clone()" class="org.jfree.chart.title.TextTitle" />
	<method signature="void setToolTipText(java.lang.String)" class="org.jfree.chart.title.TextTitle" />
	<method signature="java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)" class="org.jfree.chart.title.TextTitle" />
	<method signature="boolean equals(java.lang.Object)" class="org.jfree.chart.title.TextTitle" />
	<method signature="void &lt;init&gt;()" class="org.jfree.chart.title.TextTitle" />
	<method signature="void setFont(java.awt.Font)" class="org.jfree.chart.title.TextTitle" />
	<method signature="void setURLText(java.lang.String)" class="org.jfree.chart.title.TextTitle" />
	<method signature="void setTextAlignment(org.jfree.ui.HorizontalAlignment)" class="org.jfree.chart.title.TextTitle" />
	<method signature="int hashCode()" class="org.jfree.chart.title.TextTitle" />
	<method signature="java.lang.String getText()" class="org.jfree.chart.title.TextTitle" />
	<method signature="java.awt.Paint getBackgroundPaint()" class="org.jfree.chart.title.TextTitle" />
	<method signature="org.jfree.ui.HorizontalAlignment getTextAlignment()" class="org.jfree.chart.title.TextTitle" />
	<method signature="void setText(java.lang.String)" class="org.jfree.chart.title.TextTitle" />
	<method signature="boolean getExpandToFitSpace()" class="org.jfree.chart.title.TextTitle" />
	<method signature="java.awt.Paint getPaint()" class="org.jfree.chart.title.TextTitle" />
	<method signature="org.jfree.ui.Size2D arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)" class="org.jfree.chart.title.TextTitle" />
	<method signature="void setExpandToFitSpace(boolean)" class="org.jfree.chart.title.TextTitle" />
	<method signature="int getMaximumLinesToDisplay()" class="org.jfree.chart.title.TextTitle" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="org.jfree.chart.title.TextTitle" />
	<method signature="void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)" class="org.jfree.chart.title.TextTitle" />
	<method signature="java.lang.String getToolTipText()" class="org.jfree.chart.title.TextTitle" />
	<method signature="void setMaximumLinesToDisplay(int)" class="org.jfree.chart.title.TextTitle" />
	<method signature="void setBackgroundPaint(java.awt.Paint)" class="org.jfree.chart.title.TextTitle" />
	<class name="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="int nextTag()" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="java.lang.String getNamespacePrefix(int)" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="int getTextLength()" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="boolean standaloneSet()" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="boolean isEndElement()" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="java.lang.String getAttributeValue(java.lang.String,java.lang.String)" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="java.lang.String getElementText()" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="java.lang.String getAttributeType(int)" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="java.lang.String getEncoding()" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="javax.xml.namespace.NamespaceContext getNamespaceContext()" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="void &lt;init&gt;()" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="boolean hasNext()" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="java.lang.String getPrefix()" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="void &lt;init&gt;(javax.xml.stream.XMLStreamReader)" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="java.lang.String getText()" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="int getTextStart()" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="java.lang.String getPITarget()" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="javax.xml.namespace.QName getAttributeName(int)" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="int getTextCharacters(int,char[],int,int)" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="boolean isCharacters()" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="java.lang.String getAttributeNamespace(int)" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="int getNamespaceCount()" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="java.lang.String getCharacterEncodingScheme()" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="boolean isWhiteSpace()" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="java.lang.String getNamespaceURI()" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="boolean isAttributeSpecified(int)" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="javax.xml.namespace.QName getName()" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="java.lang.Object getProperty(java.lang.String)" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="java.lang.String getPIData()" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="boolean isStartElement()" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="int getEventType()" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="java.lang.String getNamespaceURI(java.lang.String)" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="java.lang.String getAttributePrefix(int)" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="boolean hasText()" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="java.lang.String getAttributeValue(int)" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="void setParent(javax.xml.stream.XMLStreamReader)" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="javax.xml.stream.XMLStreamReader getParent()" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="char[] getTextCharacters()" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="int getAttributeCount()" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="java.lang.String getVersion()" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="void close()" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="javax.xml.stream.Location getLocation()" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="java.lang.String getNamespaceURI(int)" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="boolean isStandalone()" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="java.lang.String getAttributeLocalName(int)" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="void require(int,java.lang.String,java.lang.String)" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="int next()" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="java.lang.String getLocalName()" class="javax.xml.stream.util.StreamReaderDelegate" />
	<method signature="boolean hasName()" class="javax.xml.stream.util.StreamReaderDelegate" />
	<class name="freemarker.template.ResourceBundleLocalizedString" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="freemarker.template.ResourceBundleLocalizedString" />
	<method signature="java.lang.String getLocalizedString(java.util.Locale)" class="freemarker.template.ResourceBundleLocalizedString" />
	<class name="org.apache.html.dom.HTMLParagraphElementImpl" />
	<method signature="void setAlign(java.lang.String)" class="org.apache.html.dom.HTMLParagraphElementImpl" />
	<method signature="java.lang.String getAlign()" class="org.apache.html.dom.HTMLParagraphElementImpl" />
	<method signature="void &lt;init&gt;(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)" class="org.apache.html.dom.HTMLParagraphElementImpl" />
	<class name="org.apache.xerces.dom.DeferredNode" />
	<method signature="int getNodeIndex()" class="org.apache.xerces.dom.DeferredNode" />
	<class name="com.swabunga.spell.engine.EditDistance" />
	<method signature="void &lt;init&gt;()" class="com.swabunga.spell.engine.EditDistance" />
	<method signature="void main(java.lang.String[])" class="com.swabunga.spell.engine.EditDistance" />
	<method signature="int getDistance(java.lang.String,java.lang.String)" class="com.swabunga.spell.engine.EditDistance" />
	<class name="org.jfree.ui.about.AboutPanel" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Image)" class="org.jfree.ui.about.AboutPanel" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String,java.lang.String)" class="org.jfree.ui.about.AboutPanel" />
</entrypoints>

<!-- WARNING:Unresolved external dependency: org.apache.xml.utils.PrefixResolver not found! -->
<!-- writing shrinked C:\Perso\Tourma\store\TourMa.jar to C:\Perso\Tourma\store\yguard_temp_8392037972537300468.jar. -->
<inOutPair in="C:\Perso\Tourma\store\TourMa.jar" out="C:\Perso\Tourma\store\yguard_temp_8392037972537300468.jar">
	<removed-code>
		<field name="serialVersionUID" class="com.bric.swing.ColorPicker" />
		<field name="SELECTED_COLOR_PROPERTY" class="com.bric.swing.ColorPicker" />
		<field name="MODE_CONTROLS_VISIBLE_PROPERTY" class="com.bric.swing.ColorPicker" />
		<field name="OPACITY_PROPERTY" class="com.bric.swing.ColorPicker" />
		<field name="MODE_PROPERTY" class="com.bric.swing.ColorPicker" />
		<field name="HUE" class="com.bric.swing.ColorPicker" />
		<field name="BRI" class="com.bric.swing.ColorPicker" />
		<field name="SAT" class="com.bric.swing.ColorPicker" />
		<field name="RED" class="com.bric.swing.ColorPicker" />
		<field name="GREEN" class="com.bric.swing.ColorPicker" />
		<field name="BLUE" class="com.bric.swing.ColorPicker" />
		<field name="serialVersionUID" class="com.bric.swing.ColorPickerDialog" />
		<field name="serialVersionUID" class="com.bric.swing.ColorPickerPanel" />
		<field name="serialVersionUID" class="com.bric.swing.ColorSwatch" />
		<method signature="void &lt;init&gt;()" class="com.google.zxing.HtmlAssetTranslator" />
		<field name="API_KEY" class="com.google.zxing.StringsResourceTranslator" />
		<field name="APACHE_2_LICENSE" class="com.google.zxing.StringsResourceTranslator" />
		<method signature="void &lt;init&gt;()" class="com.google.zxing.StringsResourceTranslator" />
		<field name="DEFAULT_IMAGE_FORMAT" class="com.google.zxing.client.j2se.CommandLineEncoder" />
		<field name="DEFAULT_OUTPUT_FILE" class="com.google.zxing.client.j2se.CommandLineEncoder" />
		<field name="DEFAULT_WIDTH" class="com.google.zxing.client.j2se.CommandLineEncoder" />
		<field name="DEFAULT_HEIGHT" class="com.google.zxing.client.j2se.CommandLineEncoder" />
		<method signature="void &lt;init&gt;()" class="com.google.zxing.client.j2se.CommandLineEncoder" />
		<method signature="void &lt;init&gt;()" class="com.google.zxing.client.j2se.CommandLineRunner" />
		<field name="BLACK" class="com.google.zxing.client.j2se.MatrixToImageConfig" />
		<field name="WHITE" class="com.google.zxing.client.j2se.MatrixToImageConfig" />
		<method signature="void &lt;init&gt;()" class="com.google.zxing.client.j2se.MatrixToImageWriter" />
		<field name="KILOGRAM" class="com.google.zxing.client.result.ExpandedProductParsedResult" />
		<field name="POUND" class="com.google.zxing.client.result.ExpandedProductParsedResult" />
		<method signature="void &lt;init&gt;(java.lang.String)" class="com.google.zxing.client.result.ProductParsedResult" />
		<field name="BYTE_ORDER_MARK" class="com.google.zxing.client.result.ResultParser" />
		<method signature="void maybeAppend(java.lang.String,java.lang.StringBuilder)" class="com.google.zxing.client.result.ResultParser" />
		<method signature="void maybeAppend(java.lang.String[],java.lang.StringBuilder)" class="com.google.zxing.client.result.ResultParser" />
		<method signature="boolean isSubstringOfDigits(java.lang.CharSequence,int,int)" class="com.google.zxing.client.result.ResultParser" />
		<method signature="boolean isSubstringOfAlphaNumeric(java.lang.CharSequence,int,int)" class="com.google.zxing.client.result.ResultParser" />
		<field name="ALPHANUM_PART" class="com.google.zxing.client.result.URIResultParser" />
		<field name="LUMINANCE_BITS" class="com.google.zxing.common.GlobalHistogramBinarizer" />
		<field name="LUMINANCE_SHIFT" class="com.google.zxing.common.GlobalHistogramBinarizer" />
		<field name="LUMINANCE_BUCKETS" class="com.google.zxing.common.GlobalHistogramBinarizer" />
		<field name="BLOCK_SIZE_POWER" class="com.google.zxing.common.HybridBinarizer" />
		<field name="BLOCK_SIZE" class="com.google.zxing.common.HybridBinarizer" />
		<field name="BLOCK_SIZE_MASK" class="com.google.zxing.common.HybridBinarizer" />
		<field name="MINIMUM_DIMENSION" class="com.google.zxing.common.HybridBinarizer" />
		<field name="MIN_DYNAMIC_RANGE" class="com.google.zxing.common.HybridBinarizer" />
		<field name="SHIFT_JIS" class="com.google.zxing.common.StringUtils" />
		<field name="GB2312" class="com.google.zxing.common.StringUtils" />
		<field name="EUC_JP" class="com.google.zxing.common.StringUtils" />
		<field name="UTF8" class="com.google.zxing.common.StringUtils" />
		<field name="ISO88591" class="com.google.zxing.common.StringUtils" />
		<method signature="void &lt;init&gt;()" class="com.google.zxing.common.StringUtils" />
		<method signature="void &lt;init&gt;()" class="com.google.zxing.common.detector.MathUtils" />
		<field name="MAX_MODULES" class="com.google.zxing.common.detector.MonochromeRectangleDetector" />
		<field name="INIT_SIZE" class="com.google.zxing.common.detector.WhiteRectangleDetector" />
		<field name="CORR" class="com.google.zxing.common.detector.WhiteRectangleDetector" />
		<field name="INITIALIZATION_THRESHOLD" class="com.google.zxing.common.reedsolomon.GenericGF" />
		<method signature="void &lt;init&gt;()" class="com.google.zxing.datamatrix.decoder.DecodedBitStreamParser" />
		<field name="MATRIX_WIDTH" class="com.google.zxing.maxicode.MaxiCodeReader" />
		<field name="MATRIX_HEIGHT" class="com.google.zxing.maxicode.MaxiCodeReader" />
		<method signature="com.google.zxing.maxicode.decoder.Decoder getDecoder()" class="com.google.zxing.maxicode.MaxiCodeReader" />
		<field name="SHIFTA" class="com.google.zxing.maxicode.decoder.DecodedBitStreamParser" />
		<field name="SHIFTB" class="com.google.zxing.maxicode.decoder.DecodedBitStreamParser" />
		<field name="SHIFTC" class="com.google.zxing.maxicode.decoder.DecodedBitStreamParser" />
		<field name="SHIFTD" class="com.google.zxing.maxicode.decoder.DecodedBitStreamParser" />
		<field name="SHIFTE" class="com.google.zxing.maxicode.decoder.DecodedBitStreamParser" />
		<field name="TWOSHIFTA" class="com.google.zxing.maxicode.decoder.DecodedBitStreamParser" />
		<field name="THREESHIFTA" class="com.google.zxing.maxicode.decoder.DecodedBitStreamParser" />
		<field name="LATCHA" class="com.google.zxing.maxicode.decoder.DecodedBitStreamParser" />
		<field name="LATCHB" class="com.google.zxing.maxicode.decoder.DecodedBitStreamParser" />
		<field name="LOCK" class="com.google.zxing.maxicode.decoder.DecodedBitStreamParser" />
		<field name="ECI" class="com.google.zxing.maxicode.decoder.DecodedBitStreamParser" />
		<field name="NS" class="com.google.zxing.maxicode.decoder.DecodedBitStreamParser" />
		<field name="PAD" class="com.google.zxing.maxicode.decoder.DecodedBitStreamParser" />
		<field name="FS" class="com.google.zxing.maxicode.decoder.DecodedBitStreamParser" />
		<field name="GS" class="com.google.zxing.maxicode.decoder.DecodedBitStreamParser" />
		<field name="RS" class="com.google.zxing.maxicode.decoder.DecodedBitStreamParser" />
		<method signature="void &lt;init&gt;()" class="com.google.zxing.maxicode.decoder.DecodedBitStreamParser" />
		<field name="ALL" class="com.google.zxing.maxicode.decoder.Decoder" />
		<field name="EVEN" class="com.google.zxing.maxicode.decoder.Decoder" />
		<field name="ODD" class="com.google.zxing.maxicode.decoder.Decoder" />
		<field name="MIN_DIMENSION_TO_RECUR" class="com.google.zxing.multi.GenericMultipleBarcodeReader" />
		<field name="MAX_MODULE_COUNT_PER_EDGE" class="com.google.zxing.multi.qrcode.detector.MultiFinderPatternFinder" />
		<field name="MIN_MODULE_COUNT_PER_EDGE" class="com.google.zxing.multi.qrcode.detector.MultiFinderPatternFinder" />
		<field name="DIFF_MODSIZE_CUTOFF_PERCENT" class="com.google.zxing.multi.qrcode.detector.MultiFinderPatternFinder" />
		<field name="DIFF_MODSIZE_CUTOFF" class="com.google.zxing.multi.qrcode.detector.MultiFinderPatternFinder" />
		<field name="MAX_ACCEPTABLE" class="com.google.zxing.oned.CodaBarReader" />
		<field name="PADDING" class="com.google.zxing.oned.CodaBarReader" />
		<field name="ALPHABET_STRING" class="com.google.zxing.oned.CodaBarReader" />
		<field name="MIN_CHARACTER_LENGTH" class="com.google.zxing.oned.CodaBarReader" />
		<field name="MAX_AVG_VARIANCE" class="com.google.zxing.oned.Code128Reader" />
		<field name="MAX_INDIVIDUAL_VARIANCE" class="com.google.zxing.oned.Code128Reader" />
		<field name="CODE_SHIFT" class="com.google.zxing.oned.Code128Reader" />
		<field name="CODE_CODE_C" class="com.google.zxing.oned.Code128Reader" />
		<field name="CODE_CODE_B" class="com.google.zxing.oned.Code128Reader" />
		<field name="CODE_CODE_A" class="com.google.zxing.oned.Code128Reader" />
		<field name="CODE_FNC_1" class="com.google.zxing.oned.Code128Reader" />
		<field name="CODE_FNC_2" class="com.google.zxing.oned.Code128Reader" />
		<field name="CODE_FNC_3" class="com.google.zxing.oned.Code128Reader" />
		<field name="CODE_FNC_4_A" class="com.google.zxing.oned.Code128Reader" />
		<field name="CODE_FNC_4_B" class="com.google.zxing.oned.Code128Reader" />
		<field name="CODE_START_A" class="com.google.zxing.oned.Code128Reader" />
		<field name="CODE_START_B" class="com.google.zxing.oned.Code128Reader" />
		<field name="CODE_START_C" class="com.google.zxing.oned.Code128Reader" />
		<field name="CODE_STOP" class="com.google.zxing.oned.Code128Reader" />
		<field name="CODE_START_B" class="com.google.zxing.oned.Code128Writer" />
		<field name="CODE_START_C" class="com.google.zxing.oned.Code128Writer" />
		<field name="CODE_CODE_B" class="com.google.zxing.oned.Code128Writer" />
		<field name="CODE_CODE_C" class="com.google.zxing.oned.Code128Writer" />
		<field name="CODE_STOP" class="com.google.zxing.oned.Code128Writer" />
		<field name="ESCAPE_FNC_1" class="com.google.zxing.oned.Code128Writer" />
		<field name="ESCAPE_FNC_2" class="com.google.zxing.oned.Code128Writer" />
		<field name="ESCAPE_FNC_3" class="com.google.zxing.oned.Code128Writer" />
		<field name="ESCAPE_FNC_4" class="com.google.zxing.oned.Code128Writer" />
		<field name="CODE_FNC_1" class="com.google.zxing.oned.Code128Writer" />
		<field name="CODE_FNC_2" class="com.google.zxing.oned.Code128Writer" />
		<field name="CODE_FNC_3" class="com.google.zxing.oned.Code128Writer" />
		<field name="CODE_FNC_4_B" class="com.google.zxing.oned.Code128Writer" />
		<field name="ALPHABET_STRING" class="com.google.zxing.oned.Code39Reader" />
		<field name="ALPHABET_STRING" class="com.google.zxing.oned.Code93Reader" />
		<field name="CODE_WIDTH" class="com.google.zxing.oned.EAN13Writer" />
		<field name="CODE_WIDTH" class="com.google.zxing.oned.EAN8Writer" />
		<field name="MAX_AVG_VARIANCE" class="com.google.zxing.oned.ITFReader" />
		<field name="MAX_INDIVIDUAL_VARIANCE" class="com.google.zxing.oned.ITFReader" />
		<field name="W" class="com.google.zxing.oned.ITFReader" />
		<field name="N" class="com.google.zxing.oned.ITFReader" />
		<field name="INTEGER_MATH_SHIFT" class="com.google.zxing.oned.OneDReader" />
		<field name="PATTERN_MATCH_RESULT_SCALE_FACTOR" class="com.google.zxing.oned.OneDReader" />
		<field name="MAX_AVG_VARIANCE" class="com.google.zxing.oned.UPCEANReader" />
		<field name="MAX_INDIVIDUAL_VARIANCE" class="com.google.zxing.oned.UPCEANReader" />
		<field name="MAX_AVG_VARIANCE" class="com.google.zxing.oned.rss.AbstractRSSReader" />
		<field name="MAX_INDIVIDUAL_VARIANCE" class="com.google.zxing.oned.rss.AbstractRSSReader" />
		<field name="MIN_FINDER_PATTERN_RATIO" class="com.google.zxing.oned.rss.AbstractRSSReader" />
		<field name="MAX_FINDER_PATTERN_RATIO" class="com.google.zxing.oned.rss.AbstractRSSReader" />
		<method signature="void &lt;init&gt;()" class="com.google.zxing.oned.rss.RSSUtils" />
		<method signature="int[] getRSSwidths(int,int,int,int,boolean)" class="com.google.zxing.oned.rss.RSSUtils" />
		<method signature="int[] elements(int[],int,int)" class="com.google.zxing.oned.rss.RSSUtils" />
		<method signature="void &lt;init&gt;()" class="com.google.zxing.oned.rss.expanded.BitArrayBuilder" />
		<field name="FINDER_PAT_A" class="com.google.zxing.oned.rss.expanded.RSSExpandedReader" />
		<field name="FINDER_PAT_B" class="com.google.zxing.oned.rss.expanded.RSSExpandedReader" />
		<field name="FINDER_PAT_C" class="com.google.zxing.oned.rss.expanded.RSSExpandedReader" />
		<field name="FINDER_PAT_D" class="com.google.zxing.oned.rss.expanded.RSSExpandedReader" />
		<field name="FINDER_PAT_E" class="com.google.zxing.oned.rss.expanded.RSSExpandedReader" />
		<field name="FINDER_PAT_F" class="com.google.zxing.oned.rss.expanded.RSSExpandedReader" />
		<field name="MAX_PAIRS" class="com.google.zxing.oned.rss.expanded.RSSExpandedReader" />
		<field name="HEADER_SIZE" class="com.google.zxing.oned.rss.expanded.decoders.AI01392xDecoder" />
		<field name="LAST_DIGIT_SIZE" class="com.google.zxing.oned.rss.expanded.decoders.AI01392xDecoder" />
		<field name="HEADER_SIZE" class="com.google.zxing.oned.rss.expanded.decoders.AI01393xDecoder" />
		<field name="LAST_DIGIT_SIZE" class="com.google.zxing.oned.rss.expanded.decoders.AI01393xDecoder" />
		<field name="FIRST_THREE_DIGITS_SIZE" class="com.google.zxing.oned.rss.expanded.decoders.AI01393xDecoder" />
		<field name="HEADER_SIZE" class="com.google.zxing.oned.rss.expanded.decoders.AI013x0x1xDecoder" />
		<field name="WEIGHT_SIZE" class="com.google.zxing.oned.rss.expanded.decoders.AI013x0x1xDecoder" />
		<field name="DATE_SIZE" class="com.google.zxing.oned.rss.expanded.decoders.AI013x0x1xDecoder" />
		<field name="HEADER_SIZE" class="com.google.zxing.oned.rss.expanded.decoders.AI013x0xDecoder" />
		<field name="WEIGHT_SIZE" class="com.google.zxing.oned.rss.expanded.decoders.AI013x0xDecoder" />
		<field name="HEADER_SIZE" class="com.google.zxing.oned.rss.expanded.decoders.AI01AndOtherAIs" />
		<field name="GTIN_SIZE" class="com.google.zxing.oned.rss.expanded.decoders.AI01decoder" />
		<field name="HEADER_SIZE" class="com.google.zxing.oned.rss.expanded.decoders.AnyAIDecoder" />
		<method signature="boolean isNumeric()" class="com.google.zxing.oned.rss.expanded.decoders.CurrentParsingState" />
		<field name="FNC1" class="com.google.zxing.oned.rss.expanded.decoders.DecodedChar" />
		<field name="FNC1" class="com.google.zxing.oned.rss.expanded.decoders.DecodedNumeric" />
		<method signature="int getValue()" class="com.google.zxing.oned.rss.expanded.decoders.DecodedNumeric" />
		<method signature="boolean isAnyFNC1()" class="com.google.zxing.oned.rss.expanded.decoders.DecodedNumeric" />
		<method signature="void &lt;init&gt;()" class="com.google.zxing.oned.rss.expanded.decoders.FieldParser" />
		<field name="MAX_ROW_DIFFERENCE" class="com.google.zxing.pdf417.decoder.BitMatrixParser" />
		<field name="MAX_ROWS" class="com.google.zxing.pdf417.decoder.BitMatrixParser" />
		<field name="MAX_CW_CAPACITY" class="com.google.zxing.pdf417.decoder.BitMatrixParser" />
		<field name="MODULES_IN_SYMBOL" class="com.google.zxing.pdf417.decoder.BitMatrixParser" />
		<field name="TEXT_COMPACTION_MODE_LATCH" class="com.google.zxing.pdf417.decoder.DecodedBitStreamParser" />
		<field name="BYTE_COMPACTION_MODE_LATCH" class="com.google.zxing.pdf417.decoder.DecodedBitStreamParser" />
		<field name="NUMERIC_COMPACTION_MODE_LATCH" class="com.google.zxing.pdf417.decoder.DecodedBitStreamParser" />
		<field name="BYTE_COMPACTION_MODE_LATCH_6" class="com.google.zxing.pdf417.decoder.DecodedBitStreamParser" />
		<field name="BEGIN_MACRO_PDF417_CONTROL_BLOCK" class="com.google.zxing.pdf417.decoder.DecodedBitStreamParser" />
		<field name="BEGIN_MACRO_PDF417_OPTIONAL_FIELD" class="com.google.zxing.pdf417.decoder.DecodedBitStreamParser" />
		<field name="MACRO_PDF417_TERMINATOR" class="com.google.zxing.pdf417.decoder.DecodedBitStreamParser" />
		<field name="MODE_SHIFT_TO_BYTE_COMPACTION_MODE" class="com.google.zxing.pdf417.decoder.DecodedBitStreamParser" />
		<field name="MAX_NUMERIC_CODEWORDS" class="com.google.zxing.pdf417.decoder.DecodedBitStreamParser" />
		<field name="PL" class="com.google.zxing.pdf417.decoder.DecodedBitStreamParser" />
		<field name="LL" class="com.google.zxing.pdf417.decoder.DecodedBitStreamParser" />
		<field name="AS" class="com.google.zxing.pdf417.decoder.DecodedBitStreamParser" />
		<field name="ML" class="com.google.zxing.pdf417.decoder.DecodedBitStreamParser" />
		<field name="AL" class="com.google.zxing.pdf417.decoder.DecodedBitStreamParser" />
		<field name="PS" class="com.google.zxing.pdf417.decoder.DecodedBitStreamParser" />
		<field name="PAL" class="com.google.zxing.pdf417.decoder.DecodedBitStreamParser" />
		<method signature="void &lt;init&gt;()" class="com.google.zxing.pdf417.decoder.DecodedBitStreamParser" />
		<field name="MAX_ERRORS" class="com.google.zxing.pdf417.decoder.Decoder" />
		<field name="MAX_EC_CODEWORDS" class="com.google.zxing.pdf417.decoder.Decoder" />
		<method signature="int[] getCoefficients()" class="com.google.zxing.pdf417.decoder.ec.ModulusPoly" />
		<method signature="com.google.zxing.pdf417.decoder.ec.ModulusPoly[] divide(com.google.zxing.pdf417.decoder.ec.ModulusPoly)" class="com.google.zxing.pdf417.decoder.ec.ModulusPoly" />
		<field name="INTEGER_MATH_SHIFT" class="com.google.zxing.pdf417.detector.Detector" />
		<field name="PATTERN_MATCH_RESULT_SCALE_FACTOR" class="com.google.zxing.pdf417.detector.Detector" />
		<field name="MAX_AVG_VARIANCE" class="com.google.zxing.pdf417.detector.Detector" />
		<field name="MAX_INDIVIDUAL_VARIANCE" class="com.google.zxing.pdf417.detector.Detector" />
		<field name="SKEW_THRESHOLD" class="com.google.zxing.pdf417.detector.Detector" />
		<method signature="void set(int,int,byte)" class="com.google.zxing.pdf417.encoder.BarcodeMatrix" />
		<method signature="void setMatrix(int,int,boolean)" class="com.google.zxing.pdf417.encoder.BarcodeMatrix" />
		<method signature="byte[][] getMatrix()" class="com.google.zxing.pdf417.encoder.BarcodeMatrix" />
		<method signature="byte[][] getScaledMatrix(int)" class="com.google.zxing.pdf417.encoder.BarcodeMatrix" />
		<method signature="void set(int,byte)" class="com.google.zxing.pdf417.encoder.BarcodeRow" />
		<method signature="byte[] getRow()" class="com.google.zxing.pdf417.encoder.BarcodeRow" />
		<field name="START_PATTERN" class="com.google.zxing.pdf417.encoder.PDF417" />
		<field name="STOP_PATTERN" class="com.google.zxing.pdf417.encoder.PDF417" />
		<field name="PREFERRED_RATIO" class="com.google.zxing.pdf417.encoder.PDF417" />
		<field name="DEFAULT_MODULE_WIDTH" class="com.google.zxing.pdf417.encoder.PDF417" />
		<field name="HEIGHT" class="com.google.zxing.pdf417.encoder.PDF417" />
		<method signature="int getNumberOfRows(int,int,int)" class="com.google.zxing.pdf417.encoder.PDF417" />
		<method signature="void &lt;init&gt;()" class="com.google.zxing.pdf417.encoder.PDF417ErrorCorrection" />
		<method signature="int getRecommendedMinimumErrorCorrectionLevel(int)" class="com.google.zxing.pdf417.encoder.PDF417ErrorCorrection" />
		<field name="TEXT_COMPACTION" class="com.google.zxing.pdf417.encoder.PDF417HighLevelEncoder" />
		<field name="BYTE_COMPACTION" class="com.google.zxing.pdf417.encoder.PDF417HighLevelEncoder" />
		<field name="NUMERIC_COMPACTION" class="com.google.zxing.pdf417.encoder.PDF417HighLevelEncoder" />
		<field name="SUBMODE_ALPHA" class="com.google.zxing.pdf417.encoder.PDF417HighLevelEncoder" />
		<field name="SUBMODE_LOWER" class="com.google.zxing.pdf417.encoder.PDF417HighLevelEncoder" />
		<field name="SUBMODE_MIXED" class="com.google.zxing.pdf417.encoder.PDF417HighLevelEncoder" />
		<field name="SUBMODE_PUNCTUATION" class="com.google.zxing.pdf417.encoder.PDF417HighLevelEncoder" />
		<field name="LATCH_TO_TEXT" class="com.google.zxing.pdf417.encoder.PDF417HighLevelEncoder" />
		<field name="LATCH_TO_BYTE_PADDED" class="com.google.zxing.pdf417.encoder.PDF417HighLevelEncoder" />
		<field name="LATCH_TO_NUMERIC" class="com.google.zxing.pdf417.encoder.PDF417HighLevelEncoder" />
		<field name="SHIFT_TO_BYTE" class="com.google.zxing.pdf417.encoder.PDF417HighLevelEncoder" />
		<field name="LATCH_TO_BYTE" class="com.google.zxing.pdf417.encoder.PDF417HighLevelEncoder" />
		<method signature="void &lt;init&gt;()" class="com.google.zxing.pdf417.encoder.PDF417HighLevelEncoder" />
		<field name="QUIET_ZONE_SIZE" class="com.google.zxing.qrcode.QRCodeWriter" />
		<field name="GB2312_SUBSET" class="com.google.zxing.qrcode.decoder.DecodedBitStreamParser" />
		<method signature="void &lt;init&gt;()" class="com.google.zxing.qrcode.decoder.DecodedBitStreamParser" />
		<field name="FORMAT_INFO_MASK_QR" class="com.google.zxing.qrcode.decoder.FormatInformation" />
		<method signature="com.google.zxing.ResultPointCallback getResultPointCallback()" class="com.google.zxing.qrcode.detector.Detector" />
		<method signature="void incrementCount()" class="com.google.zxing.qrcode.detector.FinderPattern" />
		<field name="CENTER_QUORUM" class="com.google.zxing.qrcode.detector.FinderPatternFinder" />
		<field name="MIN_SKIP" class="com.google.zxing.qrcode.detector.FinderPatternFinder" />
		<field name="MAX_MODULES" class="com.google.zxing.qrcode.detector.FinderPatternFinder" />
		<field name="INTEGER_MATH_SHIFT" class="com.google.zxing.qrcode.detector.FinderPatternFinder" />
		<field name="DEFAULT_BYTE_MODE_ENCODING" class="com.google.zxing.qrcode.encoder.Encoder" />
		<method signature="void &lt;init&gt;()" class="com.google.zxing.qrcode.encoder.Encoder" />
		<field name="N1" class="com.google.zxing.qrcode.encoder.MaskUtil" />
		<field name="N2" class="com.google.zxing.qrcode.encoder.MaskUtil" />
		<field name="N3" class="com.google.zxing.qrcode.encoder.MaskUtil" />
		<field name="N4" class="com.google.zxing.qrcode.encoder.MaskUtil" />
		<method signature="void &lt;init&gt;()" class="com.google.zxing.qrcode.encoder.MaskUtil" />
		<field name="VERSION_INFO_POLY" class="com.google.zxing.qrcode.encoder.MatrixUtil" />
		<field name="TYPE_INFO_POLY" class="com.google.zxing.qrcode.encoder.MatrixUtil" />
		<field name="TYPE_INFO_MASK_PATTERN" class="com.google.zxing.qrcode.encoder.MatrixUtil" />
		<method signature="void &lt;init&gt;()" class="com.google.zxing.qrcode.encoder.MatrixUtil" />
		<field name="NUM_MASK_PATTERNS" class="com.google.zxing.qrcode.encoder.QRCode" />
		<field name="jcmbColorSelector" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_MENU_FILE" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_MENU_EDIT" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_MENU_VIEW" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_MENU_FONT" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_MENU_FORMAT" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_MENU_INSERT" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_MENU_TABLE" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_MENU_FORMS" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_MENU_SEARCH" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_MENU_TOOLS" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_MENU_HELP" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_MENU_DEBUG" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_SEP" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_NEW" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_NEWSTYLED" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_OPEN" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_SAVE" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_PRINT" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_CUT" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_COPY" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_PASTE" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_PASTEX" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_UNDO" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_REDO" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_BOLD" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_ITALIC" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_UNDERLINE" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_STRIKE" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_SUPER" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_SUB" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_ULIST" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_OLIST" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_ALIGNL" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_ALIGNC" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_ALIGNR" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_ALIGNJ" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_UNICODE" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_UNIMATH" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_FIND" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_ANCHOR" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_SOURCE" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_STYLES" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_FONTS" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_INSTABLE" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_EDITTABLE" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_EDITCELL" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_INSERTROW" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_INSERTCOL" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_DELETEROW" class="com.hexidec.ekit.EkitCore" />
		<field name="KEY_TOOL_DELETECOL" class="com.hexidec.ekit.EkitCore" />
		<field name="TOOLBAR_DEFAULT_MULTI" class="com.hexidec.ekit.EkitCore" />
		<field name="TOOLBAR_DEFAULT_SINGLE" class="com.hexidec.ekit.EkitCore" />
		<field name="TOOLBAR_SINGLE" class="com.hexidec.ekit.EkitCore" />
		<field name="TOOLBAR_MAIN" class="com.hexidec.ekit.EkitCore" />
		<field name="TOOLBAR_FORMAT" class="com.hexidec.ekit.EkitCore" />
		<field name="TOOLBAR_STYLES" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_DOC_NEW" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_DOC_NEW_STYLED" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_DOC_OPEN_HTML" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_DOC_OPEN_CSS" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_DOC_OPEN_BASE64" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_DOC_SAVE" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_DOC_SAVE_AS" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_DOC_SAVE_BODY" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_DOC_SAVE_RTF" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_DOC_SAVE_BASE64" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_DOC_PRINT" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_DOC_SERIALIZE_OUT" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_DOC_SERIALIZE_IN" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_EXIT" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_SEARCH_FIND" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_SEARCH_FIND_AGAIN" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_SEARCH_REPLACE" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_CLIP_CUT" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_CLIP_COPY" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_CLIP_PASTE" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_CLIP_PASTE_PLAIN" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_TOGGLE_TOOLBAR_SINGLE" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_TOGGLE_TOOLBAR_MAIN" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_TOGGLE_TOOLBAR_FORMAT" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_TOGGLE_TOOLBAR_STYLES" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_TOGGLE_SOURCE_VIEW" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_TABLE_INSERT" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_TABLE_EDIT" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_TABLE_CELL_EDIT" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_TABLE_ROW_INSERT" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_TABLE_ROW_DELETE" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_TABLE_COLUMN_INSERT" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_TABLE_COLUMN_DELETE" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_INSERT_BREAK" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_INSERT_NBSP" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_INSERT_HR" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_INSERT_IMAGE_LOCAL" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_INSERT_IMAGE_URL" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_INSERT_UNICODE_CHAR" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_INSERT_UNICODE_MATH" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_INSERT_UNICODE_DRAW" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_INSERT_UNICODE_DING" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_INSERT_UNICODE_SIGS" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_INSERT_UNICODE_SPEC" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_FORM_INSERT" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_FORM_TEXTFIELD" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_FORM_TEXTAREA" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_FORM_CHECKBOX" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_FORM_RADIO" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_FORM_PASSWORD" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_FORM_BUTTON" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_FORM_SUBMIT" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_FORM_RESET" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_ENTER_PARAGRAPH" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_ENTER_BREAK" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_SPELLCHECK" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_HELP_ABOUT" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_DEBUG_DESCRIBE_DOC" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_DEBUG_DESCRIBE_CSS" class="com.hexidec.ekit.EkitCore" />
		<field name="CMD_DEBUG_CURRENT_TAGS" class="com.hexidec.ekit.EkitCore" />
		<method signature="void insertTableCell()" class="com.hexidec.ekit.EkitCore" />
		<method signature="void loadDocument(java.io.File,java.lang.String)" class="com.hexidec.ekit.EkitCore" />
		<field name="sListType" class="com.hexidec.ekit.action.ListAutomationAction" />
		<field name="previewWidth" class="com.hexidec.ekit.component.ImageFileChooserPreview" />
		<field name="previewHeight" class="com.hexidec.ekit.component.ImageFileChooserPreview" />
		<field name="TOP" class="com.hexidec.ekit.component.RelativeImageView" />
		<field name="TEXTTOP" class="com.hexidec.ekit.component.RelativeImageView" />
		<field name="MIDDLE" class="com.hexidec.ekit.component.RelativeImageView" />
		<field name="ABSMIDDLE" class="com.hexidec.ekit.component.RelativeImageView" />
		<field name="CENTER" class="com.hexidec.ekit.component.RelativeImageView" />
		<field name="BOTTOM" class="com.hexidec.ekit.component.RelativeImageView" />
		<field name="IMAGE_CACHE_PROPERTY" class="com.hexidec.ekit.component.RelativeImageView" />
		<field name="PENDING_IMAGE_SRC" class="com.hexidec.ekit.component.RelativeImageView" />
		<field name="MISSING_IMAGE_SRC" class="com.hexidec.ekit.component.RelativeImageView" />
		<field name="DEFAULT_WIDTH" class="com.hexidec.ekit.component.RelativeImageView" />
		<field name="DEFAULT_HEIGHT" class="com.hexidec.ekit.component.RelativeImageView" />
		<field name="DEFAULT_BORDER" class="com.hexidec.ekit.component.RelativeImageView" />
		<method signature="java.awt.Color getHighlightColor()" class="com.hexidec.ekit.component.RelativeImageView" />
		<field name="ERROR" class="com.hexidec.ekit.component.SimpleInfoDialog" />
		<field name="INFO" class="com.hexidec.ekit.component.SimpleInfoDialog" />
		<field name="WARNING" class="com.hexidec.ekit.component.SimpleInfoDialog" />
		<field name="QUESTION" class="com.hexidec.ekit.component.SimpleInfoDialog" />
		<field name="PLAIN" class="com.hexidec.ekit.component.SimpleInfoDialog" />
		<field name="UNICODE_BASE" class="com.hexidec.ekit.component.UnicodeDialog" />
		<field name="UNICODE_SIGS" class="com.hexidec.ekit.component.UnicodeDialog" />
		<field name="UNICODE_SPEC" class="com.hexidec.ekit.component.UnicodeDialog" />
		<field name="UNICODE_MATH" class="com.hexidec.ekit.component.UnicodeDialog" />
		<field name="UNICODE_DRAW" class="com.hexidec.ekit.component.UnicodeDialog" />
		<field name="UNICODE_DING" class="com.hexidec.ekit.component.UnicodeDialog" />
		<field name="UNICODEBLOCKSIZE" class="com.hexidec.ekit.component.UnicodeDialog" />
		<field name="CMDCHANGEBLOCK" class="com.hexidec.ekit.component.UnicodeDialog" />
		<field name="BASE64PAD" class="com.hexidec.util.Base64Codec" />
		<field name="LINEFEED" class="com.hexidec.util.Base64Codec" />
		<field name="CARRIAGE" class="com.hexidec.util.Base64Codec" />
		<field name="LINEMAX" class="com.hexidec.util.Base64Codec" />
		<field name="ENCODE_ALPHA" class="com.keypoint.PngEncoder" />
		<field name="NO_ALPHA" class="com.keypoint.PngEncoder" />
		<field name="FILTER_NONE" class="com.keypoint.PngEncoder" />
		<field name="FILTER_SUB" class="com.keypoint.PngEncoder" />
		<field name="FILTER_UP" class="com.keypoint.PngEncoder" />
		<field name="FILTER_LAST" class="com.keypoint.PngEncoder" />
		<method signature="int writeInt2(int,int)" class="com.keypoint.PngEncoder" />
		<field name="EDIT_DEL1" class="com.swabunga.spell.engine.Configuration" />
		<field name="EDIT_DEL2" class="com.swabunga.spell.engine.Configuration" />
		<field name="EDIT_SWAP" class="com.swabunga.spell.engine.Configuration" />
		<field name="EDIT_SUB" class="com.swabunga.spell.engine.Configuration" />
		<field name="EDIT_SIMILAR" class="com.swabunga.spell.engine.Configuration" />
		<field name="EDIT_MIN" class="com.swabunga.spell.engine.Configuration" />
		<field name="EDIT_MAX" class="com.swabunga.spell.engine.Configuration" />
		<field name="SPELL_THRESHOLD" class="com.swabunga.spell.engine.Configuration" />
		<field name="SPELL_IGNOREUPPERCASE" class="com.swabunga.spell.engine.Configuration" />
		<field name="SPELL_IGNOREMIXEDCASE" class="com.swabunga.spell.engine.Configuration" />
		<field name="SPELL_IGNOREINTERNETADDRESSES" class="com.swabunga.spell.engine.Configuration" />
		<field name="SPELL_IGNOREDIGITWORDS" class="com.swabunga.spell.engine.Configuration" />
		<field name="SPELL_IGNOREMULTIPLEWORDS" class="com.swabunga.spell.engine.Configuration" />
		<field name="SPELL_IGNORESENTANCECAPITALIZATION" class="com.swabunga.spell.engine.Configuration" />
		<field name="STARTMULTI" class="com.swabunga.spell.engine.GenericTransformator" />
		<field name="ENDMULTI" class="com.swabunga.spell.engine.GenericTransformator" />
		<field name="INITIAL_CAPACITY" class="com.swabunga.spell.engine.SpellDictionary" />
		<field name="IGNORE" class="com.swabunga.spell.event.SpellCheckEvent" />
		<field name="IGNOREALL" class="com.swabunga.spell.event.SpellCheckEvent" />
		<field name="REPLACE" class="com.swabunga.spell.event.SpellCheckEvent" />
		<field name="REPLACEALL" class="com.swabunga.spell.event.SpellCheckEvent" />
		<field name="ADDTODICT" class="com.swabunga.spell.event.SpellCheckEvent" />
		<field name="CANCEL" class="com.swabunga.spell.event.SpellCheckEvent" />
		<field name="INITIAL" class="com.swabunga.spell.event.SpellCheckEvent" />
		<field name="SPELLCHECK_OK" class="com.swabunga.spell.event.SpellChecker" />
		<field name="SPELLCHECK_CANCEL" class="com.swabunga.spell.event.SpellChecker" />
		<field name="IGNORE_CMD" class="com.swabunga.spell.swing.JSpellForm" />
		<field name="IGNOREALL_CMD" class="com.swabunga.spell.swing.JSpellForm" />
		<field name="ADD_CMD" class="com.swabunga.spell.swing.JSpellForm" />
		<field name="REPLACE_CMD" class="com.swabunga.spell.swing.JSpellForm" />
		<field name="REPLACEALL_CMD" class="com.swabunga.spell.swing.JSpellForm" />
		<field name="CANCEL_CMD" class="com.swabunga.spell.swing.JSpellForm" />
		<field name="SUGGESTIONS_RES" class="com.swabunga.spell.swing.JSpellForm" />
		<field name="INVALIDWORD_RES" class="com.swabunga.spell.swing.JSpellForm" />
		<field name="serialVersionUID" class="com.toedter.calendar.JCalendar" />
		<field name="serialVersionUID" class="com.toedter.calendar.JDateChooser$1" />
		<field name="serialVersionUID" class="com.toedter.calendar.JDateChooser$2" />
		<field name="serialVersionUID" class="com.toedter.calendar.JDateChooser" />
		<field name="serialVersionUID" class="com.toedter.calendar.JDateChooserCellEditor" />
		<field name="serialVersionUID" class="com.toedter.calendar.JDayChooser$1" />
		<field name="serialVersionUID" class="com.toedter.calendar.JDayChooser$DecoratorButton" />
		<field name="serialVersionUID" class="com.toedter.calendar.JDayChooser" />
		<field name="serialVersionUID" class="com.toedter.calendar.JMonthChooser$1" />
		<field name="serialVersionUID" class="com.toedter.calendar.JMonthChooser" />
		<field name="serialVersionUID" class="com.toedter.calendar.JSpinnerDateEditor" />
		<field name="serialVersionUID" class="com.toedter.calendar.JTextFieldDateEditor" />
		<field name="serialVersionUID" class="com.toedter.calendar.JYearChooser" />
		<field name="startYear" class="com.toedter.calendar.JYearChooser" />
		<field name="endYear" class="com.toedter.calendar.JYearChooser" />
		<field name="serialVersionUID" class="com.toedter.calendar.demo.DateChooserPanel$1" />
		<field name="serialVersionUID" class="com.toedter.calendar.demo.DateChooserPanel" />
		<field name="serialVersionUID" class="com.toedter.calendar.demo.DemoTable$DemoTableModel" />
		<field name="serialVersionUID" class="com.toedter.calendar.demo.DemoTable" />
		<field name="serialVersionUID" class="com.toedter.calendar.demo.JCalendarDemo$10" />
		<field name="serialVersionUID" class="com.toedter.calendar.demo.JCalendarDemo$AboutAction" />
		<field name="serialVersionUID" class="com.toedter.calendar.demo.JCalendarDemo" />
		<field name="serialVersionUID" class="com.toedter.components.JLocaleChooser" />
		<field name="serialVersionUID" class="com.toedter.components.JSpinField$1" />
		<field name="serialVersionUID" class="com.toedter.components.JSpinField" />
		<field name="serialVersionUID" class="com.toedter.components.JTitlePanel$GradientPanel" />
		<field name="serialVersionUID" class="com.toedter.components.JTitlePanel" />
		<field name="northPanel" class="com.toedter.components.JTitlePanel" />
		<method signature="java.awt.Font getFont()" class="com.toedter.plaf.JCalendarTheme" />
		<field name="BUFSIZE" class="fi.iki.elonen.NanoHTTPD$HTTPSession" />
		<field name="serialVersionUID" class="fi.iki.elonen.NanoHTTPD$ResponseException" />
		<field name="CONTENT_DISPOSITION_REGEX" class="fi.iki.elonen.NanoHTTPD" />
		<field name="CONTENT_TYPE_REGEX" class="fi.iki.elonen.NanoHTTPD" />
		<field name="CONTENT_DISPOSITION_ATTRIBUTE_REGEX" class="fi.iki.elonen.NanoHTTPD" />
		<field name="SOCKET_READ_TIMEOUT" class="fi.iki.elonen.NanoHTTPD" />
		<field name="MIME_PLAINTEXT" class="fi.iki.elonen.NanoHTTPD" />
		<field name="MIME_HTML" class="fi.iki.elonen.NanoHTTPD" />
		<field name="QUERY_STRING_PARAMETER" class="fi.iki.elonen.NanoHTTPD" />
		<method signature="java.util.Map decodeParameters(java.util.Map)" class="fi.iki.elonen.NanoHTTPD" />
		<method signature="java.util.Map decodeParameters(java.lang.String)" class="fi.iki.elonen.NanoHTTPD" />
		<method signature="void &lt;init&gt;()" class="freemarker.cache.ConcurrentMapFactory" />
		<field name="serialVersionUID" class="freemarker.cache.TemplateCache$CachedTemplate" />
		<field name="ASTERISKSTR" class="freemarker.cache.TemplateCache" />
		<field name="LOCALE_SEPARATOR" class="freemarker.cache.TemplateCache" />
		<field name="ASTERISK" class="freemarker.cache.TemplateCache" />
		<field name="CURRENT_DIR_PATH_PREFIX" class="freemarker.cache.TemplateCache" />
		<field name="CURRENT_DIR_PATH" class="freemarker.cache.TemplateCache" />
		<field name="PARENT_DIR_PATH_PREFIX" class="freemarker.cache.TemplateCache" />
		<field name="PARENT_DIR_PATH" class="freemarker.cache.TemplateCache" />
		<field name="SLASH" class="freemarker.cache.TemplateCache" />
		<field name="INTEGER" class="freemarker.core.ArithmeticEngine$ConservativeEngine" />
		<field name="LONG" class="freemarker.core.ArithmeticEngine$ConservativeEngine" />
		<field name="FLOAT" class="freemarker.core.ArithmeticEngine$ConservativeEngine" />
		<field name="DOUBLE" class="freemarker.core.ArithmeticEngine$ConservativeEngine" />
		<field name="BIGINTEGER" class="freemarker.core.ArithmeticEngine$ConservativeEngine" />
		<field name="BIGDECIMAL" class="freemarker.core.ArithmeticEngine$ConservativeEngine" />
		<field name="SUBSTRACTION" class="freemarker.core.ArithmeticExpression" />
		<field name="MULTIPLICATION" class="freemarker.core.ArithmeticExpression" />
		<field name="DIVISION" class="freemarker.core.ArithmeticExpression" />
		<field name="MODULUS" class="freemarker.core.ArithmeticExpression" />
		<field name="NAMESPACE" class="freemarker.core.Assignment" />
		<field name="LOCAL" class="freemarker.core.Assignment" />
		<field name="GLOBAL" class="freemarker.core.Assignment" />
		<method signature="java.util.List getBodyParameters()" class="freemarker.core.BodyInstruction" />
		<method signature="freemarker.template.TemplateBooleanModel getTemplateModel(boolean)" class="freemarker.core.BooleanLiteral" />
		<field name="TEMPLATE_NAME" class="freemarker.core.BuiltinVariable" />
		<field name="NAMESPACE" class="freemarker.core.BuiltinVariable" />
		<field name="MAIN" class="freemarker.core.BuiltinVariable" />
		<field name="GLOBALS" class="freemarker.core.BuiltinVariable" />
		<field name="LOCALS" class="freemarker.core.BuiltinVariable" />
		<field name="DATA_MODEL" class="freemarker.core.BuiltinVariable" />
		<field name="LANG" class="freemarker.core.BuiltinVariable" />
		<field name="LOCALE" class="freemarker.core.BuiltinVariable" />
		<field name="CURRENT_NODE" class="freemarker.core.BuiltinVariable" />
		<field name="NODE" class="freemarker.core.BuiltinVariable" />
		<field name="PASS" class="freemarker.core.BuiltinVariable" />
		<field name="VARS" class="freemarker.core.BuiltinVariable" />
		<field name="VERSION" class="freemarker.core.BuiltinVariable" />
		<field name="ERROR" class="freemarker.core.BuiltinVariable" />
		<field name="OUTPUT_ENCODING" class="freemarker.core.BuiltinVariable" />
		<field name="URL_ESCAPING_CHARSET" class="freemarker.core.BuiltinVariable" />
		<field name="NOW" class="freemarker.core.BuiltinVariable" />
		<field name="EQUALS" class="freemarker.core.ComparisonExpression" />
		<field name="NOT_EQUALS" class="freemarker.core.ComparisonExpression" />
		<field name="LESS_THAN" class="freemarker.core.ComparisonExpression" />
		<field name="GREATER_THAN" class="freemarker.core.ComparisonExpression" />
		<field name="LESS_THAN_EQUALS" class="freemarker.core.ComparisonExpression" />
		<field name="GREATER_THAN_EQUALS" class="freemarker.core.ComparisonExpression" />
		<field name="LOCALE_KEY" class="freemarker.core.Configurable" />
		<field name="NUMBER_FORMAT_KEY" class="freemarker.core.Configurable" />
		<field name="TIME_FORMAT_KEY" class="freemarker.core.Configurable" />
		<field name="DATE_FORMAT_KEY" class="freemarker.core.Configurable" />
		<field name="DATETIME_FORMAT_KEY" class="freemarker.core.Configurable" />
		<field name="TIME_ZONE_KEY" class="freemarker.core.Configurable" />
		<field name="CLASSIC_COMPATIBLE_KEY" class="freemarker.core.Configurable" />
		<field name="TEMPLATE_EXCEPTION_HANDLER_KEY" class="freemarker.core.Configurable" />
		<field name="ARITHMETIC_ENGINE_KEY" class="freemarker.core.Configurable" />
		<field name="OBJECT_WRAPPER_KEY" class="freemarker.core.Configurable" />
		<field name="BOOLEAN_FORMAT_KEY" class="freemarker.core.Configurable" />
		<field name="OUTPUT_ENCODING_KEY" class="freemarker.core.Configurable" />
		<field name="URL_ESCAPING_CHARSET_KEY" class="freemarker.core.Configurable" />
		<field name="STRICT_BEAN_MODELS" class="freemarker.core.Configurable" />
		<field name="AUTO_FLUSH_KEY" class="freemarker.core.Configurable" />
		<field name="NEW_BUILTIN_CLASS_RESOLVER_KEY" class="freemarker.core.Configurable" />
		<field name="COMMA" class="freemarker.core.Configurable" />
		<field name="ALLOWED_CLASSES" class="freemarker.core.Configurable" />
		<field name="TRUSTED_TEMPLATES" class="freemarker.core.Configurable" />
		<field name="SCOPE_ENVIRONMENT" class="freemarker.core.CustomAttribute" />
		<field name="SCOPE_TEMPLATE" class="freemarker.core.CustomAttribute" />
		<field name="SCOPE_CONFIGURATION" class="freemarker.core.CustomAttribute" />
		<method signature="void &lt;init&gt;()" class="freemarker.core.DateBuiltins" />
		<method signature="void clearLastReturnValue()" class="freemarker.core.Environment" />
		<method signature="void &lt;init&gt;()" class="freemarker.core.EvaluationUtil" />
		<field name="jj_semLA" class="freemarker.core.FMParser" />
		<field name="EOF" class="freemarker.core.FMParserConstants" />
		<field name="BLANK" class="freemarker.core.FMParserConstants" />
		<field name="START_TAG" class="freemarker.core.FMParserConstants" />
		<field name="END_TAG" class="freemarker.core.FMParserConstants" />
		<field name="CLOSE_TAG1" class="freemarker.core.FMParserConstants" />
		<field name="CLOSE_TAG2" class="freemarker.core.FMParserConstants" />
		<field name="ATTEMPT" class="freemarker.core.FMParserConstants" />
		<field name="RECOVER" class="freemarker.core.FMParserConstants" />
		<field name="IF" class="freemarker.core.FMParserConstants" />
		<field name="ELSE_IF" class="freemarker.core.FMParserConstants" />
		<field name="LIST" class="freemarker.core.FMParserConstants" />
		<field name="FOREACH" class="freemarker.core.FMParserConstants" />
		<field name="SWITCH" class="freemarker.core.FMParserConstants" />
		<field name="CASE" class="freemarker.core.FMParserConstants" />
		<field name="ASSIGN" class="freemarker.core.FMParserConstants" />
		<field name="GLOBALASSIGN" class="freemarker.core.FMParserConstants" />
		<field name="LOCALASSIGN" class="freemarker.core.FMParserConstants" />
		<field name="_INCLUDE" class="freemarker.core.FMParserConstants" />
		<field name="IMPORT" class="freemarker.core.FMParserConstants" />
		<field name="FUNCTION" class="freemarker.core.FMParserConstants" />
		<field name="MACRO" class="freemarker.core.FMParserConstants" />
		<field name="TRANSFORM" class="freemarker.core.FMParserConstants" />
		<field name="VISIT" class="freemarker.core.FMParserConstants" />
		<field name="STOP" class="freemarker.core.FMParserConstants" />
		<field name="RETURN" class="freemarker.core.FMParserConstants" />
		<field name="CALL" class="freemarker.core.FMParserConstants" />
		<field name="SETTING" class="freemarker.core.FMParserConstants" />
		<field name="COMPRESS" class="freemarker.core.FMParserConstants" />
		<field name="COMMENT" class="freemarker.core.FMParserConstants" />
		<field name="TERSE_COMMENT" class="freemarker.core.FMParserConstants" />
		<field name="NOPARSE" class="freemarker.core.FMParserConstants" />
		<field name="END_IF" class="freemarker.core.FMParserConstants" />
		<field name="END_LIST" class="freemarker.core.FMParserConstants" />
		<field name="END_RECOVER" class="freemarker.core.FMParserConstants" />
		<field name="END_ATTEMPT" class="freemarker.core.FMParserConstants" />
		<field name="END_FOREACH" class="freemarker.core.FMParserConstants" />
		<field name="END_LOCAL" class="freemarker.core.FMParserConstants" />
		<field name="END_GLOBAL" class="freemarker.core.FMParserConstants" />
		<field name="END_ASSIGN" class="freemarker.core.FMParserConstants" />
		<field name="END_FUNCTION" class="freemarker.core.FMParserConstants" />
		<field name="END_MACRO" class="freemarker.core.FMParserConstants" />
		<field name="END_COMPRESS" class="freemarker.core.FMParserConstants" />
		<field name="END_TRANSFORM" class="freemarker.core.FMParserConstants" />
		<field name="END_SWITCH" class="freemarker.core.FMParserConstants" />
		<field name="ELSE" class="freemarker.core.FMParserConstants" />
		<field name="BREAK" class="freemarker.core.FMParserConstants" />
		<field name="SIMPLE_RETURN" class="freemarker.core.FMParserConstants" />
		<field name="HALT" class="freemarker.core.FMParserConstants" />
		<field name="FLUSH" class="freemarker.core.FMParserConstants" />
		<field name="TRIM" class="freemarker.core.FMParserConstants" />
		<field name="LTRIM" class="freemarker.core.FMParserConstants" />
		<field name="RTRIM" class="freemarker.core.FMParserConstants" />
		<field name="NOTRIM" class="freemarker.core.FMParserConstants" />
		<field name="DEFAUL" class="freemarker.core.FMParserConstants" />
		<field name="SIMPLE_NESTED" class="freemarker.core.FMParserConstants" />
		<field name="NESTED" class="freemarker.core.FMParserConstants" />
		<field name="SIMPLE_RECURSE" class="freemarker.core.FMParserConstants" />
		<field name="RECURSE" class="freemarker.core.FMParserConstants" />
		<field name="FALLBACK" class="freemarker.core.FMParserConstants" />
		<field name="ESCAPE" class="freemarker.core.FMParserConstants" />
		<field name="END_ESCAPE" class="freemarker.core.FMParserConstants" />
		<field name="NOESCAPE" class="freemarker.core.FMParserConstants" />
		<field name="END_NOESCAPE" class="freemarker.core.FMParserConstants" />
		<field name="UNIFIED_CALL" class="freemarker.core.FMParserConstants" />
		<field name="UNIFIED_CALL_END" class="freemarker.core.FMParserConstants" />
		<field name="FTL_HEADER" class="freemarker.core.FMParserConstants" />
		<field name="TRIVIAL_FTL_HEADER" class="freemarker.core.FMParserConstants" />
		<field name="UNKNOWN_DIRECTIVE" class="freemarker.core.FMParserConstants" />
		<field name="WHITESPACE" class="freemarker.core.FMParserConstants" />
		<field name="PRINTABLE_CHARS" class="freemarker.core.FMParserConstants" />
		<field name="FALSE_ALERT" class="freemarker.core.FMParserConstants" />
		<field name="OUTPUT_ESCAPE" class="freemarker.core.FMParserConstants" />
		<field name="NUMERICAL_ESCAPE" class="freemarker.core.FMParserConstants" />
		<field name="ESCAPED_CHAR" class="freemarker.core.FMParserConstants" />
		<field name="STRING_LITERAL" class="freemarker.core.FMParserConstants" />
		<field name="RAW_STRING" class="freemarker.core.FMParserConstants" />
		<field name="FALSE" class="freemarker.core.FMParserConstants" />
		<field name="TRUE" class="freemarker.core.FMParserConstants" />
		<field name="INTEGER" class="freemarker.core.FMParserConstants" />
		<field name="DECIMAL" class="freemarker.core.FMParserConstants" />
		<field name="DOT" class="freemarker.core.FMParserConstants" />
		<field name="DOT_DOT" class="freemarker.core.FMParserConstants" />
		<field name="BUILT_IN" class="freemarker.core.FMParserConstants" />
		<field name="EXISTS" class="freemarker.core.FMParserConstants" />
		<field name="EQUALS" class="freemarker.core.FMParserConstants" />
		<field name="DOUBLE_EQUALS" class="freemarker.core.FMParserConstants" />
		<field name="NOT_EQUALS" class="freemarker.core.FMParserConstants" />
		<field name="LESS_THAN" class="freemarker.core.FMParserConstants" />
		<field name="LESS_THAN_EQUALS" class="freemarker.core.FMParserConstants" />
		<field name="ESCAPED_GT" class="freemarker.core.FMParserConstants" />
		<field name="ESCAPED_GTE" class="freemarker.core.FMParserConstants" />
		<field name="PLUS" class="freemarker.core.FMParserConstants" />
		<field name="MINUS" class="freemarker.core.FMParserConstants" />
		<field name="TIMES" class="freemarker.core.FMParserConstants" />
		<field name="DOUBLE_STAR" class="freemarker.core.FMParserConstants" />
		<field name="ELLIPSIS" class="freemarker.core.FMParserConstants" />
		<field name="DIVIDE" class="freemarker.core.FMParserConstants" />
		<field name="PERCENT" class="freemarker.core.FMParserConstants" />
		<field name="AND" class="freemarker.core.FMParserConstants" />
		<field name="OR" class="freemarker.core.FMParserConstants" />
		<field name="EXCLAM" class="freemarker.core.FMParserConstants" />
		<field name="COMMA" class="freemarker.core.FMParserConstants" />
		<field name="SEMICOLON" class="freemarker.core.FMParserConstants" />
		<field name="COLON" class="freemarker.core.FMParserConstants" />
		<field name="OPEN_BRACKET" class="freemarker.core.FMParserConstants" />
		<field name="CLOSE_BRACKET" class="freemarker.core.FMParserConstants" />
		<field name="OPEN_PAREN" class="freemarker.core.FMParserConstants" />
		<field name="CLOSE_PAREN" class="freemarker.core.FMParserConstants" />
		<field name="OPEN_BRACE" class="freemarker.core.FMParserConstants" />
		<field name="CLOSE_BRACE" class="freemarker.core.FMParserConstants" />
		<field name="IN" class="freemarker.core.FMParserConstants" />
		<field name="AS" class="freemarker.core.FMParserConstants" />
		<field name="USING" class="freemarker.core.FMParserConstants" />
		<field name="ID" class="freemarker.core.FMParserConstants" />
		<field name="LETTER" class="freemarker.core.FMParserConstants" />
		<field name="DIGIT" class="freemarker.core.FMParserConstants" />
		<field name="DIRECTIVE_END" class="freemarker.core.FMParserConstants" />
		<field name="EMPTY_DIRECTIVE_END" class="freemarker.core.FMParserConstants" />
		<field name="NATURAL_GT" class="freemarker.core.FMParserConstants" />
		<field name="NATURAL_GTE" class="freemarker.core.FMParserConstants" />
		<field name="TERMINATING_WHITESPACE" class="freemarker.core.FMParserConstants" />
		<field name="TERMINATING_EXCLAM" class="freemarker.core.FMParserConstants" />
		<field name="TERSE_COMMENT_END" class="freemarker.core.FMParserConstants" />
		<field name="MAYBE_END" class="freemarker.core.FMParserConstants" />
		<field name="KEEP_GOING" class="freemarker.core.FMParserConstants" />
		<field name="LONE_LESS_THAN_OR_DASH" class="freemarker.core.FMParserConstants" />
		<field name="DEFAULT" class="freemarker.core.FMParserConstants" />
		<field name="NODIRECTIVE" class="freemarker.core.FMParserConstants" />
		<field name="FM_EXPRESSION" class="freemarker.core.FMParserConstants" />
		<field name="IN_PAREN" class="freemarker.core.FMParserConstants" />
		<field name="NAMED_PARAMETER_EXPRESSION" class="freemarker.core.FMParserConstants" />
		<field name="EXPRESSION_COMMENT" class="freemarker.core.FMParserConstants" />
		<field name="NO_SPACE_EXPRESSION" class="freemarker.core.FMParserConstants" />
		<field name="NO_PARSE" class="freemarker.core.FMParserConstants" />
		<method signature="void setDebugStream(java.io.PrintStream)" class="freemarker.core.FMParserTokenManager" />
		<method signature="void jjCheckNAddStates(int)" class="freemarker.core.FMParserTokenManager" />
		<method signature="int jjStartNfaWithStates_1(int,int,int)" class="freemarker.core.FMParserTokenManager" />
		<method signature="int jjStartNfaWithStates_0(int,int,int)" class="freemarker.core.FMParserTokenManager" />
		<method signature="int jjStopStringLiteralDfa_5(int,long,long)" class="freemarker.core.FMParserTokenManager" />
		<method signature="int jjStartNfa_5(int,long,long)" class="freemarker.core.FMParserTokenManager" />
		<method signature="void &lt;init&gt;(freemarker.core.SimpleCharStream,int)" class="freemarker.core.FMParserTokenManager" />
		<method signature="void ReInit(freemarker.core.SimpleCharStream,int)" class="freemarker.core.FMParserTokenManager" />
		<method signature="freemarker.template.TemplateModel getConstantValue()" class="freemarker.core.MethodCall" />
		<class name="freemarker.core.NodeBuiltins" />
		<method signature="java.lang.String getName()" class="freemarker.core.NumberLiteral" />
		<method signature="void &lt;init&gt;()" class="freemarker.core.NumericalBuiltins" />
		<method signature="boolean hasRhs()" class="freemarker.core.NumericalRange" />
		<class name="freemarker.core.RegexBuiltins$MatcherBuilder" />
		<class name="freemarker.core.RegexBuiltins$PatternCacheKey" />
		<class name="freemarker.core.RegexBuiltins$RegexMatchModel$1" />
		<class name="freemarker.core.RegexBuiltins$RegexMatchModel$2" />
		<class name="freemarker.core.RegexBuiltins$RegexMatchModel$Match" />
		<class name="freemarker.core.RegexBuiltins$RegexMatchModel" />
		<class name="freemarker.core.RegexBuiltins$ReplaceMethod" />
		<class name="freemarker.core.RegexBuiltins$SplitMethod" />
		<class name="freemarker.core.RegexBuiltins$groupsBI" />
		<class name="freemarker.core.RegexBuiltins$matchesBI" />
		<class name="freemarker.core.RegexBuiltins$replace_reBI" />
		<class name="freemarker.core.RegexBuiltins$split_reBI" />
		<class name="freemarker.core.RegexBuiltins" />
		<field name="KEY_TYPE_NOT_YET_DETECTED" class="freemarker.core.SequenceBuiltins$sortBI" />
		<field name="KEY_TYPE_STRING" class="freemarker.core.SequenceBuiltins$sortBI" />
		<field name="KEY_TYPE_NUMBER" class="freemarker.core.SequenceBuiltins$sortBI" />
		<field name="KEY_TYPE_DATE" class="freemarker.core.SequenceBuiltins$sortBI" />
		<field name="KEY_TYPE_BOOLEAN" class="freemarker.core.SequenceBuiltins$sortBI" />
		<method signature="void &lt;init&gt;()" class="freemarker.core.SequenceBuiltins" />
		<field name="staticFlag" class="freemarker.core.SimpleCharStream" />
		<class name="freemarker.core.StringBuiltins" />
		<method signature="boolean heedsTrailingWhitespace()" class="freemarker.core.TextBlock" />
		<method signature="boolean heedsOpeningWhitespace()" class="freemarker.core.TextBlock" />
		<field name="specialToken" class="freemarker.core.Token" />
		<field name="LEXICAL_ERROR" class="freemarker.core.TokenMgrError" />
		<field name="STATIC_LEXER_ERROR" class="freemarker.core.TokenMgrError" />
		<field name="INVALID_LEXICAL_STATE" class="freemarker.core.TokenMgrError" />
		<field name="LOOP_DETECTED" class="freemarker.core.TokenMgrError" />
		<field name="serialVersionUID" class="freemarker.debug.Breakpoint" />
		<field name="TYPE_SCALAR" class="freemarker.debug.DebugModel" />
		<field name="TYPE_NUMBER" class="freemarker.debug.DebugModel" />
		<field name="TYPE_DATE" class="freemarker.debug.DebugModel" />
		<field name="TYPE_BOOLEAN" class="freemarker.debug.DebugModel" />
		<field name="TYPE_SEQUENCE" class="freemarker.debug.DebugModel" />
		<field name="TYPE_COLLECTION" class="freemarker.debug.DebugModel" />
		<field name="TYPE_HASH" class="freemarker.debug.DebugModel" />
		<field name="TYPE_HASH_EX" class="freemarker.debug.DebugModel" />
		<field name="TYPE_METHOD" class="freemarker.debug.DebugModel" />
		<field name="TYPE_METHOD_EX" class="freemarker.debug.DebugModel" />
		<field name="TYPE_TRANSFORM" class="freemarker.debug.DebugModel" />
		<field name="TYPE_ENVIRONMENT" class="freemarker.debug.DebugModel" />
		<field name="TYPE_TEMPLATE" class="freemarker.debug.DebugModel" />
		<field name="TYPE_CONFIGURATION" class="freemarker.debug.DebugModel" />
		<field name="DEFAULT_PORT" class="freemarker.debug.Debugger" />
		<method signature="void &lt;init&gt;()" class="freemarker.debug.DebuggerClient" />
		<field name="serialVersionUID" class="freemarker.debug.EnvironmentSuspendedEvent" />
		<field name="serialVersionUID" class="freemarker.debug.impl.RmiDebugModelImpl" />
		<field name="serialVersionUID" class="freemarker.debug.impl.RmiDebugModelImpl_Stub" />
		<method signature="java.util.Collection keySet()" class="freemarker.debug.impl.RmiDebuggedEnvironmentImpl$DebugConfigurableModel" />
		<field name="serialVersionUID" class="freemarker.debug.impl.RmiDebuggedEnvironmentImpl" />
		<field name="serialVersionUID" class="freemarker.debug.impl.RmiDebuggedEnvironmentImpl_Stub" />
		<field name="serialVersionUID" class="freemarker.debug.impl.RmiDebuggerImpl" />
		<field name="serialVersionUID" class="freemarker.debug.impl.RmiDebuggerImpl_Stub" />
		<field name="serialVersionUID" class="freemarker.debug.impl.RmiDebuggerListenerImpl" />
		<field name="serialVersionUID" class="freemarker.debug.impl.RmiDebuggerListenerImpl_Stub" />
		<method signature="boolean hasPlainGetMethod()" class="freemarker.ext.beans.BeanModel" />
		<field name="EXPOSE_ALL" class="freemarker.ext.beans.BeansWrapper" />
		<field name="EXPOSE_SAFE" class="freemarker.ext.beans.BeansWrapper" />
		<field name="EXPOSE_PROPERTIES_ONLY" class="freemarker.ext.beans.BeansWrapper" />
		<field name="EXPOSE_NOTHING" class="freemarker.ext.beans.BeansWrapper" />
		<method signature="freemarker.template.TemplateModel getInstance(java.lang.Object,freemarker.ext.util.ModelFactory)" class="freemarker.ext.beans.BeansWrapper" />
		<field name="MORE_SPECIFIC" class="freemarker.ext.beans.ClassString" />
		<field name="LESS_SPECIFIC" class="freemarker.ext.beans.ClassString" />
		<field name="INDETERMINATE" class="freemarker.ext.beans.ClassString" />
		<method signature="java.lang.Class[] getClasses()" class="freemarker.ext.beans.ClassString" />
		<class name="freemarker.ext.beans.EnumModels" />
		<method signature="void &lt;init&gt;()" class="freemarker.ext.beans.JavaRebelIntegration" />
		<method signature="void &lt;init&gt;()" class="freemarker.ext.beans.MethodUtilities" />
		<method signature="java.lang.String getAsString()" class="freemarker.ext.dom.DocumentTypeModel" />
		<method signature="freemarker.template.TemplateSequenceModel getChildren()" class="freemarker.ext.dom.DocumentTypeModel" />
		<class name="freemarker.ext.dom.JaxenXPathSupport$1" />
		<class name="freemarker.ext.dom.JaxenXPathSupport$2" />
		<class name="freemarker.ext.dom.JaxenXPathSupport$3" />
		<class name="freemarker.ext.dom.JaxenXPathSupport$4" />
		<class name="freemarker.ext.dom.JaxenXPathSupport$5" />
		<class name="freemarker.ext.dom.JaxenXPathSupport$FmEntityResolver" />
		<class name="freemarker.ext.dom.JaxenXPathSupport" />
		<method signature="void &lt;init&gt;(org.w3c.dom.Node)" class="freemarker.ext.dom.NodeListModel" />
		<method signature="void &lt;init&gt;(java.util.List,freemarker.ext.dom.NodeModel)" class="freemarker.ext.dom.NodeListModel" />
		<method signature="freemarker.ext.dom.NodeModel getDocumentNodeModel()" class="freemarker.ext.dom.NodeModel" />
		<class name="freemarker.ext.dom.SunInternalXalanXPathSupport$1" />
		<class name="freemarker.ext.dom.SunInternalXalanXPathSupport" />
		<class name="freemarker.ext.dom.XalanXPathSupport$1" />
		<class name="freemarker.ext.dom.XalanXPathSupport" />
		<method signature="boolean isEmpty()" class="freemarker.ext.jdom.NodeListModel$NameFilter" />
		<method signature="boolean isEmpty()" class="freemarker.ext.jdom.NodeListModel$RegisterNamespace" />
		<method signature="boolean isEmpty()" class="freemarker.ext.jdom.NodeListModel$TypeFilter" />
		<field name="SPECIAL_OPERATION_COPY" class="freemarker.ext.jdom.NodeListModel" />
		<field name="SPECIAL_OPERATION_UNIQUE" class="freemarker.ext.jdom.NodeListModel" />
		<field name="SPECIAL_OPERATION_FILTER_NAME" class="freemarker.ext.jdom.NodeListModel" />
		<field name="SPECIAL_OPERATION_FILTER_TYPE" class="freemarker.ext.jdom.NodeListModel" />
		<field name="SPECIAL_OPERATION_QUERY_TYPE" class="freemarker.ext.jdom.NodeListModel" />
		<field name="SPECIAL_OPERATION_REGISTER_NAMESPACE" class="freemarker.ext.jdom.NodeListModel" />
		<field name="SPECIAL_OPERATION_PLAINTEXT" class="freemarker.ext.jdom.NodeListModel" />
		<class name="freemarker.ext.jsp.FreeMarkerJspApplicationContext$FreeMarkerELContext$1" />
		<class name="freemarker.ext.jsp.FreeMarkerJspApplicationContext$FreeMarkerELContext" />
		<class name="freemarker.ext.jsp.FreeMarkerJspApplicationContext" />
		<class name="freemarker.ext.jsp.FreeMarkerJspFactory2" />
		<method signature="javax.servlet.jsp.JspApplicationContext getJspApplicationContext(javax.servlet.ServletContext)" class="freemarker.ext.jsp.FreeMarkerJspFactory21" />
		<class name="freemarker.ext.jsp.FreeMarkerPageContext$1" />
		<class name="freemarker.ext.jsp.FreeMarkerPageContext$TemplateHashModelExEnumeration" />
		<field name="environment" class="freemarker.ext.jsp.FreeMarkerPageContext" />
		<field name="tags" class="freemarker.ext.jsp.FreeMarkerPageContext" />
		<field name="outs" class="freemarker.ext.jsp.FreeMarkerPageContext" />
		<field name="servlet" class="freemarker.ext.jsp.FreeMarkerPageContext" />
		<field name="session" class="freemarker.ext.jsp.FreeMarkerPageContext" />
		<field name="request" class="freemarker.ext.jsp.FreeMarkerPageContext" />
		<field name="response" class="freemarker.ext.jsp.FreeMarkerPageContext" />
		<field name="wrapper" class="freemarker.ext.jsp.FreeMarkerPageContext" />
		<field name="jspOut" class="freemarker.ext.jsp.FreeMarkerPageContext" />
		<field name="class$freemarker$ext$servlet$ServletContextHashModel" class="freemarker.ext.jsp.FreeMarkerPageContext" />
		<field name="class$freemarker$ext$servlet$HttpRequestHashModel" class="freemarker.ext.jsp.FreeMarkerPageContext" />
		<method signature="void &lt;init&gt;()" class="freemarker.ext.jsp.FreeMarkerPageContext" />
		<method signature="void initialize(javax.servlet.Servlet,javax.servlet.ServletRequest,javax.servlet.ServletResponse,java.lang.String,boolean,int,boolean)" class="freemarker.ext.jsp.FreeMarkerPageContext" />
		<method signature="void release()" class="freemarker.ext.jsp.FreeMarkerPageContext" />
		<method signature="void setAttribute(java.lang.String,java.lang.Object)" class="freemarker.ext.jsp.FreeMarkerPageContext" />
		<method signature="void setAttribute(java.lang.String,java.lang.Object,int)" class="freemarker.ext.jsp.FreeMarkerPageContext" />
		<method signature="java.lang.Object getAttribute(java.lang.String)" class="freemarker.ext.jsp.FreeMarkerPageContext" />
		<method signature="java.lang.Object getAttribute(java.lang.String,int)" class="freemarker.ext.jsp.FreeMarkerPageContext" />
		<method signature="java.lang.Object findAttribute(java.lang.String)" class="freemarker.ext.jsp.FreeMarkerPageContext" />
		<method signature="void removeAttribute(java.lang.String)" class="freemarker.ext.jsp.FreeMarkerPageContext" />
		<method signature="void removeAttribute(java.lang.String,int)" class="freemarker.ext.jsp.FreeMarkerPageContext" />
		<method signature="int getAttributesScope(java.lang.String)" class="freemarker.ext.jsp.FreeMarkerPageContext" />
		<method signature="java.util.Enumeration getAttributeNamesInScope(int)" class="freemarker.ext.jsp.FreeMarkerPageContext" />
		<method signature="javax.servlet.http.HttpSession getSession(boolean)" class="freemarker.ext.jsp.FreeMarkerPageContext" />
		<method signature="javax.servlet.http.HttpSession getSession()" class="freemarker.ext.jsp.FreeMarkerPageContext" />
		<method signature="java.lang.Object getPage()" class="freemarker.ext.jsp.FreeMarkerPageContext" />
		<method signature="javax.servlet.ServletRequest getRequest()" class="freemarker.ext.jsp.FreeMarkerPageContext" />
		<method signature="javax.servlet.ServletResponse getResponse()" class="freemarker.ext.jsp.FreeMarkerPageContext" />
		<method signature="java.lang.Exception getException()" class="freemarker.ext.jsp.FreeMarkerPageContext" />
		<method signature="javax.servlet.ServletConfig getServletConfig()" class="freemarker.ext.jsp.FreeMarkerPageContext" />
		<method signature="javax.servlet.ServletContext getServletContext()" class="freemarker.ext.jsp.FreeMarkerPageContext" />
		<method signature="void forward(java.lang.String)" class="freemarker.ext.jsp.FreeMarkerPageContext" />
		<method signature="void include(java.lang.String)" class="freemarker.ext.jsp.FreeMarkerPageContext" />
		<method signature="void include(java.lang.String,boolean)" class="freemarker.ext.jsp.FreeMarkerPageContext" />
		<method signature="void handlePageException(java.lang.Exception)" class="freemarker.ext.jsp.FreeMarkerPageContext" />
		<method signature="void handlePageException(java.lang.Throwable)" class="freemarker.ext.jsp.FreeMarkerPageContext" />
		<method signature="javax.servlet.jsp.tagext.BodyContent pushBody()" class="freemarker.ext.jsp.FreeMarkerPageContext" />
		<method signature="javax.servlet.jsp.JspWriter pushBody(java.io.Writer)" class="freemarker.ext.jsp.FreeMarkerPageContext" />
		<method signature="javax.servlet.jsp.JspWriter popBody()" class="freemarker.ext.jsp.FreeMarkerPageContext" />
		<class name="freemarker.ext.jsp.FreeMarkerPageContext1" />
		<class name="freemarker.ext.jsp.FreeMarkerPageContext2$1" />
		<class name="freemarker.ext.jsp.FreeMarkerPageContext2" />
		<class name="freemarker.ext.jsp.FreeMarkerPageContext21$1" />
		<class name="freemarker.ext.jsp.FreeMarkerPageContext21$2" />
		<field name="elContext" class="freemarker.ext.jsp.FreeMarkerPageContext21" />
		<field name="class$javax$servlet$jsp$JspContext" class="freemarker.ext.jsp.FreeMarkerPageContext21" />
		<method signature="void &lt;init&gt;()" class="freemarker.ext.jsp.FreeMarkerPageContext21" />
		<method signature="freemarker.ext.jsp.FreeMarkerPageContext create()" class="freemarker.ext.jsp.FreeMarkerPageContext21" />
		<method signature="javax.servlet.jsp.el.ExpressionEvaluator getExpressionEvaluator()" class="freemarker.ext.jsp.FreeMarkerPageContext21" />
		<method signature="javax.servlet.jsp.el.VariableResolver getVariableResolver()" class="freemarker.ext.jsp.FreeMarkerPageContext21" />
		<method signature="javax.el.ELContext getELContext()" class="freemarker.ext.jsp.FreeMarkerPageContext21" />
		<field name="ANY_SCOPE" class="freemarker.ext.jsp.JspContextModel" />
		<field name="PAGE_SCOPE" class="freemarker.ext.jsp.JspContextModel" />
		<field name="REQUEST_SCOPE" class="freemarker.ext.jsp.JspContextModel" />
		<field name="SESSION_SCOPE" class="freemarker.ext.jsp.JspContextModel" />
		<field name="APPLICATION_SCOPE" class="freemarker.ext.jsp.JspContextModel" />
		<method signature="void &lt;init&gt;()" class="freemarker.ext.jsp.PageContextFactory" />
		<method signature="void close()" class="freemarker.ext.jsp.TagTransformModel$BodyContentImpl" />
		<method signature="javax.servlet.jsp.tagext.Tag getTag()" class="freemarker.ext.jsp.TagTransformModel$TagWriter" />
		<method signature="freemarker.ext.jsp.FreeMarkerPageContext getPageContext()" class="freemarker.ext.jsp.TagTransformModel$TagWriter" />
		<field name="DEFAULT_JAR_TLD" class="freemarker.ext.jsp.TaglibFactory" />
		<field name="LOOKUP_NONE" class="freemarker.ext.jsp.TaglibFactory" />
		<field name="LOOKUP_WEB_XML" class="freemarker.ext.jsp.TaglibFactory" />
		<field name="LOOKUP_WEB_APP" class="freemarker.ext.jsp.TaglibFactory" />
		<field name="ABS_URI" class="freemarker.ext.jsp.TaglibFactory" />
		<field name="ROOT_REL_URI" class="freemarker.ext.jsp.TaglibFactory" />
		<field name="NOROOT_REL_URI" class="freemarker.ext.jsp.TaglibFactory" />
		<field name="class$java$lang$Object" class="freemarker.ext.jython.Jython20And21VersionAdapter" />
		<method signature="void &lt;init&gt;()" class="freemarker.ext.jython.Jython20And21VersionAdapter" />
		<method signature="boolean isPyInstance(java.lang.Object)" class="freemarker.ext.jython.Jython20And21VersionAdapter" />
		<method signature="java.lang.Object pyInstanceToJava(java.lang.Object)" class="freemarker.ext.jython.Jython20And21VersionAdapter" />
		<method signature="java.lang.String getPythonClassName(org.python.core.PyObject)" class="freemarker.ext.jython.Jython20And21VersionAdapter" />
		<field name="class$java$lang$Object" class="freemarker.ext.jython.Jython22VersionAdapter" />
		<method signature="void &lt;init&gt;()" class="freemarker.ext.jython.Jython22VersionAdapter" />
		<method signature="boolean isPyInstance(java.lang.Object)" class="freemarker.ext.jython.Jython22VersionAdapter" />
		<method signature="java.lang.Object pyInstanceToJava(java.lang.Object)" class="freemarker.ext.jython.Jython22VersionAdapter" />
		<method signature="java.lang.String getPythonClassName(org.python.core.PyObject)" class="freemarker.ext.jython.Jython22VersionAdapter" />
		<field name="class$java$lang$Object" class="freemarker.ext.jython.Jython25VersionAdapter" />
		<method signature="void &lt;init&gt;()" class="freemarker.ext.jython.Jython25VersionAdapter" />
		<method signature="boolean isPyInstance(java.lang.Object)" class="freemarker.ext.jython.Jython25VersionAdapter" />
		<method signature="java.lang.Object pyInstanceToJava(java.lang.Object)" class="freemarker.ext.jython.Jython25VersionAdapter" />
		<method signature="java.lang.String getPythonClassName(org.python.core.PyObject)" class="freemarker.ext.jython.Jython25VersionAdapter" />
		<field name="KEYS" class="freemarker.ext.jython.JythonHashModel" />
		<field name="KEYSET" class="freemarker.ext.jython.JythonHashModel" />
		<field name="VALUES" class="freemarker.ext.jython.JythonHashModel" />
		<method signature="void &lt;init&gt;()" class="freemarker.ext.jython.JythonVersionAdapter" />
		<field name="serialVersionUID" class="freemarker.ext.servlet.FreemarkerServlet" />
		<field name="INITPARAM_TEMPLATE_PATH" class="freemarker.ext.servlet.FreemarkerServlet" />
		<field name="INITPARAM_NOCACHE" class="freemarker.ext.servlet.FreemarkerServlet" />
		<field name="INITPARAM_CONTENT_TYPE" class="freemarker.ext.servlet.FreemarkerServlet" />
		<field name="DEFAULT_CONTENT_TYPE" class="freemarker.ext.servlet.FreemarkerServlet" />
		<field name="INITPARAM_DEBUG" class="freemarker.ext.servlet.FreemarkerServlet" />
		<field name="DEPR_INITPARAM_TEMPLATE_DELAY" class="freemarker.ext.servlet.FreemarkerServlet" />
		<field name="DEPR_INITPARAM_ENCODING" class="freemarker.ext.servlet.FreemarkerServlet" />
		<field name="DEPR_INITPARAM_OBJECT_WRAPPER" class="freemarker.ext.servlet.FreemarkerServlet" />
		<field name="DEPR_INITPARAM_WRAPPER_SIMPLE" class="freemarker.ext.servlet.FreemarkerServlet" />
		<field name="DEPR_INITPARAM_WRAPPER_BEANS" class="freemarker.ext.servlet.FreemarkerServlet" />
		<field name="DEPR_INITPARAM_WRAPPER_JYTHON" class="freemarker.ext.servlet.FreemarkerServlet" />
		<field name="DEPR_INITPARAM_TEMPLATE_EXCEPTION_HANDLER" class="freemarker.ext.servlet.FreemarkerServlet" />
		<field name="DEPR_INITPARAM_TEMPLATE_EXCEPTION_HANDLER_RETHROW" class="freemarker.ext.servlet.FreemarkerServlet" />
		<field name="DEPR_INITPARAM_TEMPLATE_EXCEPTION_HANDLER_DEBUG" class="freemarker.ext.servlet.FreemarkerServlet" />
		<field name="DEPR_INITPARAM_TEMPLATE_EXCEPTION_HANDLER_HTML_DEBUG" class="freemarker.ext.servlet.FreemarkerServlet" />
		<field name="DEPR_INITPARAM_TEMPLATE_EXCEPTION_HANDLER_IGNORE" class="freemarker.ext.servlet.FreemarkerServlet" />
		<field name="DEPR_INITPARAM_DEBUG" class="freemarker.ext.servlet.FreemarkerServlet" />
		<field name="KEY_REQUEST" class="freemarker.ext.servlet.FreemarkerServlet" />
		<field name="KEY_INCLUDE" class="freemarker.ext.servlet.FreemarkerServlet" />
		<field name="KEY_REQUEST_PRIVATE" class="freemarker.ext.servlet.FreemarkerServlet" />
		<field name="KEY_REQUEST_PARAMETERS" class="freemarker.ext.servlet.FreemarkerServlet" />
		<field name="KEY_SESSION" class="freemarker.ext.servlet.FreemarkerServlet" />
		<field name="KEY_APPLICATION" class="freemarker.ext.servlet.FreemarkerServlet" />
		<field name="KEY_APPLICATION_PRIVATE" class="freemarker.ext.servlet.FreemarkerServlet" />
		<field name="KEY_JSP_TAGLIBS" class="freemarker.ext.servlet.FreemarkerServlet" />
		<field name="ATTR_REQUEST_MODEL" class="freemarker.ext.servlet.FreemarkerServlet" />
		<field name="ATTR_REQUEST_PARAMETERS_MODEL" class="freemarker.ext.servlet.FreemarkerServlet" />
		<field name="ATTR_SESSION_MODEL" class="freemarker.ext.servlet.FreemarkerServlet" />
		<field name="ATTR_APPLICATION_MODEL" class="freemarker.ext.servlet.FreemarkerServlet" />
		<field name="ATTR_JSP_TAGLIBS_MODEL" class="freemarker.ext.servlet.FreemarkerServlet" />
		<method signature="freemarker.template.ObjectWrapper getObjectWrapper()" class="freemarker.ext.servlet.FreemarkerServlet" />
		<method signature="java.lang.String getTemplatePath()" class="freemarker.ext.servlet.FreemarkerServlet" />
		<method signature="freemarker.template.Configuration getConfiguration()" class="freemarker.ext.servlet.FreemarkerServlet" />
		<method signature="java.lang.String transcode(java.lang.String)" class="freemarker.ext.servlet.HttpRequestParametersHashModel" />
		<field name="serialVersionUID" class="freemarker.ext.servlet.HttpSessionHashModel" />
		<field name="serialVersionUID" class="freemarker.ext.util.IdentityHashMap" />
		<field name="KEYS" class="freemarker.ext.util.IdentityHashMap" />
		<field name="VALUES" class="freemarker.ext.util.IdentityHashMap" />
		<field name="ENTRIES" class="freemarker.ext.util.IdentityHashMap" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="freemarker.ext.util.IdentityHashMap" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="freemarker.ext.util.IdentityHashMap" />
		<method signature="int capacity()" class="freemarker.ext.util.IdentityHashMap" />
		<method signature="float loadFactor()" class="freemarker.ext.util.IdentityHashMap" />
		<class name="freemarker.ext.xml.Dom4jNavigator$Dom4jXPathEx" />
		<class name="freemarker.ext.xml.Dom4jNavigator" />
		<class name="freemarker.ext.xml.DomNavigator$DomXPathEx" />
		<class name="freemarker.ext.xml.DomNavigator" />
		<class name="freemarker.ext.xml.JaxenNamespaces$1" />
		<class name="freemarker.ext.xml.JaxenNamespaces" />
		<class name="freemarker.ext.xml.JdomNavigator$JDOMXPathEx" />
		<class name="freemarker.ext.xml.JdomNavigator" />
		<class name="freemarker.ext.xml.Navigator$1" />
		<class name="freemarker.ext.xml.Navigator$AncestorOp" />
		<class name="freemarker.ext.xml.Navigator$AncestorOrSelfOp" />
		<class name="freemarker.ext.xml.Navigator$AttributesOp" />
		<class name="freemarker.ext.xml.Navigator$ChildrenOp" />
		<class name="freemarker.ext.xml.Navigator$ContentOp" />
		<class name="freemarker.ext.xml.Navigator$DescendantOp" />
		<class name="freemarker.ext.xml.Navigator$DescendantOrSelfOp" />
		<class name="freemarker.ext.xml.Navigator$DocumentOp" />
		<class name="freemarker.ext.xml.Navigator$DocumentTypeOp" />
		<class name="freemarker.ext.xml.Navigator$LocalNameOp" />
		<class name="freemarker.ext.xml.Navigator$NamespacePrefixOp" />
		<class name="freemarker.ext.xml.Navigator$NamespaceUriOp" />
		<class name="freemarker.ext.xml.Navigator$ParentOp" />
		<class name="freemarker.ext.xml.Navigator$QualifiedNameOp" />
		<class name="freemarker.ext.xml.Navigator$TextOp" />
		<class name="freemarker.ext.xml.Navigator$TypeOp" />
		<method signature="java.util.List selectNodes(java.lang.Object,org.jaxen.NamespaceContext)" class="freemarker.ext.xml.Navigator$XPathEx" />
		<field name="xpathCache" class="freemarker.ext.xml.Navigator" />
		<field name="operators" class="freemarker.ext.xml.Navigator" />
		<field name="attributeOperator" class="freemarker.ext.xml.Navigator" />
		<field name="childrenOperator" class="freemarker.ext.xml.Navigator" />
		<method signature="void &lt;init&gt;()" class="freemarker.ext.xml.Navigator" />
		<method signature="freemarker.ext.xml.Navigator$XPathEx createXPathEx(java.lang.String)" class="freemarker.ext.xml.Navigator" />
		<method signature="void getChildren(java.lang.Object,java.lang.String,java.lang.String,java.util.List)" class="freemarker.ext.xml.Navigator" />
		<method signature="void getAttributes(java.lang.Object,java.lang.String,java.lang.String,java.util.List)" class="freemarker.ext.xml.Navigator" />
		<method signature="void getDescendants(java.lang.Object,java.util.List)" class="freemarker.ext.xml.Navigator" />
		<method signature="java.lang.Object getParent(java.lang.Object)" class="freemarker.ext.xml.Navigator" />
		<method signature="java.lang.Object getDocument(java.lang.Object)" class="freemarker.ext.xml.Navigator" />
		<method signature="java.lang.Object getDocumentType(java.lang.Object)" class="freemarker.ext.xml.Navigator" />
		<method signature="void getAncestors(java.lang.Object,java.util.List)" class="freemarker.ext.xml.Navigator" />
		<method signature="void getContent(java.lang.Object,java.util.List)" class="freemarker.ext.xml.Navigator" />
		<method signature="java.lang.String getText(java.lang.Object)" class="freemarker.ext.xml.Navigator" />
		<method signature="java.lang.String getLocalName(java.lang.Object)" class="freemarker.ext.xml.Navigator" />
		<method signature="java.lang.String getNamespacePrefix(java.lang.Object)" class="freemarker.ext.xml.Navigator" />
		<method signature="java.lang.String getQualifiedName(java.lang.Object)" class="freemarker.ext.xml.Navigator" />
		<method signature="java.lang.String getNamespaceUri(java.lang.Object)" class="freemarker.ext.xml.Navigator" />
		<method signature="boolean equal(java.lang.String,java.lang.String)" class="freemarker.ext.xml.Navigator" />
		<method signature="java.util.Map createOperatorMap()" class="freemarker.ext.xml.Navigator" />
		<method signature="void access$1600(freemarker.ext.xml.Navigator,java.lang.Object,java.util.List)" class="freemarker.ext.xml.Navigator" />
		<class name="freemarker.log.AvalonLoggerFactory$AvalonLogger" />
		<class name="freemarker.log.AvalonLoggerFactory" />
		<class name="freemarker.log.JDK14LoggerFactory$JDK14Logger" />
		<class name="freemarker.log.JDK14LoggerFactory" />
		<class name="freemarker.log.Log4JLoggerFactory$Log4JLogger" />
		<class name="freemarker.log.Log4JLoggerFactory" />
		<field name="LIBRARY_AUTO" class="freemarker.log.Logger" />
		<field name="LIBRARY_NONE" class="freemarker.log.Logger" />
		<field name="LIBRARY_JAVA" class="freemarker.log.Logger" />
		<field name="LIBRARY_AVALON" class="freemarker.log.Logger" />
		<field name="LIBRARY_LOG4J" class="freemarker.log.Logger" />
		<field name="LIBRARY_COMMONS" class="freemarker.log.Logger" />
		<field name="LIBRARY_SLF4J" class="freemarker.log.Logger" />
		<field name="DEFAULT_ENCODING_KEY" class="freemarker.template.Configuration" />
		<field name="LOCALIZED_LOOKUP_KEY" class="freemarker.template.Configuration" />
		<field name="STRICT_SYNTAX_KEY" class="freemarker.template.Configuration" />
		<field name="WHITESPACE_STRIPPING_KEY" class="freemarker.template.Configuration" />
		<field name="CACHE_STORAGE_KEY" class="freemarker.template.Configuration" />
		<field name="TEMPLATE_UPDATE_DELAY_KEY" class="freemarker.template.Configuration" />
		<field name="AUTO_IMPORT_KEY" class="freemarker.template.Configuration" />
		<field name="AUTO_INCLUDE_KEY" class="freemarker.template.Configuration" />
		<field name="TAG_SYNTAX_KEY" class="freemarker.template.Configuration" />
		<field name="INCOMPATIBLE_ENHANCEMENTS" class="freemarker.template.Configuration" />
		<field name="AUTO_DETECT_TAG_SYNTAX" class="freemarker.template.Configuration" />
		<field name="ANGLE_BRACKET_TAG_SYNTAX" class="freemarker.template.Configuration" />
		<field name="SQUARE_BRACKET_TAG_SYNTAX" class="freemarker.template.Configuration" />
		<field name="DEFAULT_INCOMPATIBLE_ENHANCEMENTS" class="freemarker.template.Configuration" />
		<field name="DEFAULT_NAMESPACE_PREFIX" class="freemarker.template.Template" />
		<field name="NO_NS_PREFIX" class="freemarker.template.Template" />
		<method signature="void &lt;init&gt;(java.lang.String,freemarker.core.TemplateElement,freemarker.template.Configuration)" class="freemarker.template.Template" />
		<method signature="java.lang.Object readResolve()" class="freemarker.template.TemplateBooleanModel$1" />
		<method signature="java.lang.Object readResolve()" class="freemarker.template.TemplateBooleanModel$2" />
		<field name="UNKNOWN" class="freemarker.template.TemplateDateModel" />
		<field name="TIME" class="freemarker.template.TemplateDateModel" />
		<field name="DATE" class="freemarker.template.TemplateDateModel" />
		<field name="DATETIME" class="freemarker.template.TemplateDateModel" />
		<field name="REPEAT_EVALUATION" class="freemarker.template.TransformControl" />
		<field name="END_EVALUATION" class="freemarker.template.TransformControl" />
		<field name="SKIP_BODY" class="freemarker.template.TransformControl" />
		<field name="EVALUATE_BODY" class="freemarker.template.TransformControl" />
		<method signature="void &lt;init&gt;()" class="freemarker.template.utility.ClassUtil" />
		<method signature="void &lt;init&gt;()" class="freemarker.template.utility.Collections12" />
		<field name="ACCURACY_HOURS" class="freemarker.template.utility.DateUtil" />
		<field name="ACCURACY_MINUTES" class="freemarker.template.utility.DateUtil" />
		<field name="ACCURACY_SECONDS" class="freemarker.template.utility.DateUtil" />
		<field name="ACCURACY_MILLISECONDS" class="freemarker.template.utility.DateUtil" />
		<method signature="void &lt;init&gt;()" class="freemarker.template.utility.DateUtil" />
		<field name="OUTPUT_BUFFER_SIZE" class="freemarker.template.utility.Execute" />
		<class name="freemarker.template.utility.J2SE14TimeZoneOffsetCalculator" />
		<method signature="void &lt;init&gt;()" class="freemarker.template.utility.OptimizerUtil" />
		<method signature="void &lt;init&gt;()" class="freemarker.template.utility.SecurityUtilities" />
		<field name="MAX_EOL_LENGTH" class="freemarker.template.utility.StandardCompress$StandardCompressWriter" />
		<field name="AT_BEGINNING" class="freemarker.template.utility.StandardCompress$StandardCompressWriter" />
		<field name="SINGLE_LINE" class="freemarker.template.utility.StandardCompress$StandardCompressWriter" />
		<field name="INIT" class="freemarker.template.utility.StandardCompress$StandardCompressWriter" />
		<field name="SAW_CR" class="freemarker.template.utility.StandardCompress$StandardCompressWriter" />
		<field name="LINEBREAK_CR" class="freemarker.template.utility.StandardCompress$StandardCompressWriter" />
		<field name="LINEBREAK_CRLF" class="freemarker.template.utility.StandardCompress$StandardCompressWriter" />
		<field name="LINEBREAK_LF" class="freemarker.template.utility.StandardCompress$StandardCompressWriter" />
		<field name="BUFFER_SIZE_KEY" class="freemarker.template.utility.StandardCompress" />
		<field name="SINGLE_LINE_KEY" class="freemarker.template.utility.StandardCompress" />
		<field name="NULL_NS_URI" class="javax.xml.XMLConstants" />
		<field name="DEFAULT_NS_PREFIX" class="javax.xml.XMLConstants" />
		<field name="XML_NS_URI" class="javax.xml.XMLConstants" />
		<field name="XML_NS_PREFIX" class="javax.xml.XMLConstants" />
		<field name="XMLNS_ATTRIBUTE_NS_URI" class="javax.xml.XMLConstants" />
		<field name="XMLNS_ATTRIBUTE" class="javax.xml.XMLConstants" />
		<field name="W3C_XML_SCHEMA_NS_URI" class="javax.xml.XMLConstants" />
		<field name="W3C_XML_SCHEMA_INSTANCE_NS_URI" class="javax.xml.XMLConstants" />
		<field name="W3C_XPATH_DATATYPE_NS_URI" class="javax.xml.XMLConstants" />
		<field name="XML_DTD_NS_URI" class="javax.xml.XMLConstants" />
		<field name="RELAXNG_NS_URI" class="javax.xml.XMLConstants" />
		<field name="FEATURE_SECURE_PROCESSING" class="javax.xml.XMLConstants" />
		<method signature="void &lt;init&gt;()" class="javax.xml.XMLConstants" />
		<method signature="void &lt;init&gt;()" class="javax.xml.bind.ContextFinder" />
		<method signature="void &lt;init&gt;()" class="javax.xml.bind.DatatypeConverter" />
		<field name="JAXB_CONTEXT_FACTORY" class="javax.xml.bind.JAXBContext" />
		<method signature="void &lt;init&gt;()" class="javax.xml.bind.JAXBContext" />
		<field name="JAXB_ENCODING" class="javax.xml.bind.Marshaller" />
		<field name="JAXB_FORMATTED_OUTPUT" class="javax.xml.bind.Marshaller" />
		<field name="JAXB_SCHEMA_LOCATION" class="javax.xml.bind.Marshaller" />
		<field name="JAXB_NO_NAMESPACE_SCHEMA_LOCATION" class="javax.xml.bind.Marshaller" />
		<field name="PROVIDER_NOT_FOUND" class="javax.xml.bind.Messages" />
		<field name="COULD_NOT_INSTANTIATE" class="javax.xml.bind.Messages" />
		<field name="CANT_FIND_PROPERTIES_FILE" class="javax.xml.bind.Messages" />
		<field name="CANT_MIX_PROVIDERS" class="javax.xml.bind.Messages" />
		<field name="MISSING_PROPERTY" class="javax.xml.bind.Messages" />
		<field name="NAME_VALUE" class="javax.xml.bind.Messages" />
		<field name="CONVERTER_MUST_NOT_BE_NULL" class="javax.xml.bind.Messages" />
		<method signature="void &lt;init&gt;()" class="javax.xml.bind.Messages" />
		<method signature="java.lang.String format(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)" class="javax.xml.bind.Messages" />
		<field name="WARNING" class="javax.xml.bind.ValidationEvent" />
		<field name="ERROR" class="javax.xml.bind.ValidationEvent" />
		<field name="FATAL_ERROR" class="javax.xml.bind.ValidationEvent" />
		<method signature="java.lang.String getJavaEncoding(java.lang.String)" class="javax.xml.bind.helpers.AbstractMarshallerImpl" />
		<method signature="javax.xml.bind.UnmarshalException createUnmarshalException(org.xml.sax.SAXException)" class="javax.xml.bind.helpers.AbstractUnmarshallerImpl" />
		<field name="INPUTSTREAM_NOT_NULL" class="javax.xml.bind.helpers.Messages" />
		<field name="MUST_BE_BOOLEAN" class="javax.xml.bind.helpers.Messages" />
		<field name="MUST_BE_STRING" class="javax.xml.bind.helpers.Messages" />
		<field name="SEVERITY_MESSAGE" class="javax.xml.bind.helpers.Messages" />
		<field name="LOCATION_UNAVAILABLE" class="javax.xml.bind.helpers.Messages" />
		<field name="UNRECOGNIZED_SEVERITY" class="javax.xml.bind.helpers.Messages" />
		<field name="WARNING" class="javax.xml.bind.helpers.Messages" />
		<field name="ERROR" class="javax.xml.bind.helpers.Messages" />
		<field name="FATAL_ERROR" class="javax.xml.bind.helpers.Messages" />
		<field name="ILLEGAL_SEVERITY" class="javax.xml.bind.helpers.Messages" />
		<field name="MUST_NOT_BE_NULL" class="javax.xml.bind.helpers.Messages" />
		<method signature="void &lt;init&gt;()" class="javax.xml.bind.helpers.Messages" />
		<method signature="java.lang.String format(java.lang.String,java.lang.Object,java.lang.Object)" class="javax.xml.bind.helpers.Messages" />
		<field name="UNRECOGNIZED_SEVERITY" class="javax.xml.bind.util.Messages" />
		<field name="RESULT_NULL_CONTEXT" class="javax.xml.bind.util.Messages" />
		<field name="RESULT_NULL_UNMARSHALLER" class="javax.xml.bind.util.Messages" />
		<field name="SOURCE_NULL_CONTEXT" class="javax.xml.bind.util.Messages" />
		<field name="SOURCE_NULL_CONTENT" class="javax.xml.bind.util.Messages" />
		<field name="SOURCE_NULL_MARSHALLER" class="javax.xml.bind.util.Messages" />
		<method signature="void &lt;init&gt;()" class="javax.xml.bind.util.Messages" />
		<method signature="java.lang.String format(java.lang.String,java.lang.Object,java.lang.Object)" class="javax.xml.bind.util.Messages" />
		<method signature="java.lang.String format(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)" class="javax.xml.bind.util.Messages" />
		<field name="serialVersionUID" class="javax.xml.datatype.DatatypeConfigurationException" />
		<field name="JANUARY" class="javax.xml.datatype.DatatypeConstants" />
		<field name="FEBRUARY" class="javax.xml.datatype.DatatypeConstants" />
		<field name="MARCH" class="javax.xml.datatype.DatatypeConstants" />
		<field name="APRIL" class="javax.xml.datatype.DatatypeConstants" />
		<field name="MAY" class="javax.xml.datatype.DatatypeConstants" />
		<field name="JUNE" class="javax.xml.datatype.DatatypeConstants" />
		<field name="JULY" class="javax.xml.datatype.DatatypeConstants" />
		<field name="AUGUST" class="javax.xml.datatype.DatatypeConstants" />
		<field name="SEPTEMBER" class="javax.xml.datatype.DatatypeConstants" />
		<field name="OCTOBER" class="javax.xml.datatype.DatatypeConstants" />
		<field name="NOVEMBER" class="javax.xml.datatype.DatatypeConstants" />
		<field name="DECEMBER" class="javax.xml.datatype.DatatypeConstants" />
		<field name="LESSER" class="javax.xml.datatype.DatatypeConstants" />
		<field name="EQUAL" class="javax.xml.datatype.DatatypeConstants" />
		<field name="GREATER" class="javax.xml.datatype.DatatypeConstants" />
		<field name="INDETERMINATE" class="javax.xml.datatype.DatatypeConstants" />
		<field name="FIELD_UNDEFINED" class="javax.xml.datatype.DatatypeConstants" />
		<field name="MAX_TIMEZONE_OFFSET" class="javax.xml.datatype.DatatypeConstants" />
		<field name="MIN_TIMEZONE_OFFSET" class="javax.xml.datatype.DatatypeConstants" />
		<method signature="void &lt;init&gt;()" class="javax.xml.datatype.DatatypeConstants" />
		<field name="DATATYPEFACTORY_PROPERTY" class="javax.xml.datatype.DatatypeFactory" />
		<field name="serialVersionUID" class="javax.xml.datatype.FactoryFinder$ConfigurationError" />
		<field name="CLASS_NAME" class="javax.xml.datatype.FactoryFinder" />
		<field name="DEFAULT_LINE_LENGTH" class="javax.xml.datatype.FactoryFinder" />
		<method signature="void &lt;init&gt;()" class="javax.xml.datatype.FactoryFinder" />
		<method signature="void &lt;init&gt;()" class="javax.xml.datatype.SecuritySupport" />
		<field name="defaultSerialVersionUID" class="javax.xml.namespace.QName" />
		<field name="compatabilitySerialVersionUID" class="javax.xml.namespace.QName" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="javax.xml.namespace.QName" />
		<field name="DEBUG" class="javax.xml.parsers.DocumentBuilder" />
		<field name="DEFAULT_LINE_LENGTH" class="javax.xml.parsers.FactoryFinder" />
		<method signature="void &lt;init&gt;()" class="javax.xml.parsers.FactoryFinder" />
		<method signature="void &lt;init&gt;()" class="javax.xml.parsers.FilePathToURI" />
		<field name="DEBUG" class="javax.xml.parsers.SAXParser" />
		<method signature="void &lt;init&gt;()" class="javax.xml.parsers.SecuritySupport" />
		<field name="serialVersionUID" class="javax.xml.stream.FactoryConfigurationError" />
		<field name="serialVersionUID" class="javax.xml.stream.FactoryFinder$ConfigurationError" />
		<field name="DEFAULT_LINE_LENGTH" class="javax.xml.stream.FactoryFinder" />
		<method signature="void &lt;init&gt;()" class="javax.xml.stream.FactoryFinder" />
		<method signature="void &lt;init&gt;()" class="javax.xml.stream.SecuritySupport" />
		<field name="PROPERTY_NAME" class="javax.xml.stream.XMLEventFactory" />
		<field name="DEFAULT_FACTORY" class="javax.xml.stream.XMLEventFactory" />
		<field name="ALLOCATOR" class="javax.xml.stream.XMLInputFactory" />
		<field name="IS_COALESCING" class="javax.xml.stream.XMLInputFactory" />
		<field name="IS_NAMESPACE_AWARE" class="javax.xml.stream.XMLInputFactory" />
		<field name="IS_REPLACING_ENTITY_REFERENCES" class="javax.xml.stream.XMLInputFactory" />
		<field name="IS_SUPPORTING_EXTERNAL_ENTITIES" class="javax.xml.stream.XMLInputFactory" />
		<field name="IS_VALIDATING" class="javax.xml.stream.XMLInputFactory" />
		<field name="REPORTER" class="javax.xml.stream.XMLInputFactory" />
		<field name="RESOLVER" class="javax.xml.stream.XMLInputFactory" />
		<field name="SUPPORT_DTD" class="javax.xml.stream.XMLInputFactory" />
		<field name="PROPERTY_NAME" class="javax.xml.stream.XMLInputFactory" />
		<field name="DEFAULT_FACTORY" class="javax.xml.stream.XMLInputFactory" />
		<method signature="void &lt;init&gt;()" class="javax.xml.stream.XMLInputFactory" />
		<field name="IS_REPAIRING_NAMESPACES" class="javax.xml.stream.XMLOutputFactory" />
		<field name="PROPERTY_NAME" class="javax.xml.stream.XMLOutputFactory" />
		<field name="DEFAULT_FACTORY" class="javax.xml.stream.XMLOutputFactory" />
		<method signature="void &lt;init&gt;()" class="javax.xml.stream.XMLOutputFactory" />
		<field name="START_ELEMENT" class="javax.xml.stream.XMLStreamConstants" />
		<field name="END_ELEMENT" class="javax.xml.stream.XMLStreamConstants" />
		<field name="PROCESSING_INSTRUCTION" class="javax.xml.stream.XMLStreamConstants" />
		<field name="CHARACTERS" class="javax.xml.stream.XMLStreamConstants" />
		<field name="COMMENT" class="javax.xml.stream.XMLStreamConstants" />
		<field name="SPACE" class="javax.xml.stream.XMLStreamConstants" />
		<field name="START_DOCUMENT" class="javax.xml.stream.XMLStreamConstants" />
		<field name="END_DOCUMENT" class="javax.xml.stream.XMLStreamConstants" />
		<field name="ENTITY_REFERENCE" class="javax.xml.stream.XMLStreamConstants" />
		<field name="ATTRIBUTE" class="javax.xml.stream.XMLStreamConstants" />
		<field name="DTD" class="javax.xml.stream.XMLStreamConstants" />
		<field name="CDATA" class="javax.xml.stream.XMLStreamConstants" />
		<field name="NAMESPACE" class="javax.xml.stream.XMLStreamConstants" />
		<field name="NOTATION_DECLARATION" class="javax.xml.stream.XMLStreamConstants" />
		<field name="ENTITY_DECLARATION" class="javax.xml.stream.XMLStreamConstants" />
		<field name="serialVersionUID" class="javax.xml.stream.XMLStreamException" />
		<field name="DEFAULT_LINE_LENGTH" class="javax.xml.transform.FactoryFinder" />
		<method signature="void &lt;init&gt;()" class="javax.xml.transform.FactoryFinder" />
		<field name="METHOD" class="javax.xml.transform.OutputKeys" />
		<field name="VERSION" class="javax.xml.transform.OutputKeys" />
		<field name="ENCODING" class="javax.xml.transform.OutputKeys" />
		<field name="OMIT_XML_DECLARATION" class="javax.xml.transform.OutputKeys" />
		<field name="STANDALONE" class="javax.xml.transform.OutputKeys" />
		<field name="DOCTYPE_PUBLIC" class="javax.xml.transform.OutputKeys" />
		<field name="DOCTYPE_SYSTEM" class="javax.xml.transform.OutputKeys" />
		<field name="CDATA_SECTION_ELEMENTS" class="javax.xml.transform.OutputKeys" />
		<field name="INDENT" class="javax.xml.transform.OutputKeys" />
		<field name="MEDIA_TYPE" class="javax.xml.transform.OutputKeys" />
		<method signature="void &lt;init&gt;()" class="javax.xml.transform.OutputKeys" />
		<field name="PI_DISABLE_OUTPUT_ESCAPING" class="javax.xml.transform.Result" />
		<field name="PI_ENABLE_OUTPUT_ESCAPING" class="javax.xml.transform.Result" />
		<method signature="void &lt;init&gt;()" class="javax.xml.transform.SecuritySupport" />
		<method signature="void &lt;init&gt;()" class="javax.xml.transform.Transformer" />
		<field name="serialVersionUID" class="javax.xml.transform.TransformerException" />
		<method signature="void &lt;init&gt;()" class="javax.xml.transform.TransformerFactory" />
		<field name="FEATURE" class="javax.xml.transform.dom.DOMResult" />
		<field name="FEATURE" class="javax.xml.transform.dom.DOMSource" />
		<field name="FEATURE" class="javax.xml.transform.sax.SAXResult" />
		<field name="FEATURE" class="javax.xml.transform.sax.SAXSource" />
		<field name="FEATURE" class="javax.xml.transform.sax.SAXTransformerFactory" />
		<field name="FEATURE_XMLFILTER" class="javax.xml.transform.sax.SAXTransformerFactory" />
		<method signature="void &lt;init&gt;()" class="javax.xml.transform.sax.SAXTransformerFactory" />
		<field name="FEATURE" class="javax.xml.transform.stax.StAXResult" />
		<field name="FEATURE" class="javax.xml.transform.stax.StAXSource" />
		<method signature="void &lt;init&gt;()" class="javax.xml.transform.stream.FilePathToURI" />
		<field name="FEATURE" class="javax.xml.transform.stream.StreamResult" />
		<field name="FEATURE" class="javax.xml.transform.stream.StreamSource" />
		<field name="W3C_XML_SCHEMA10_NS_URI" class="javax.xml.validation.SchemaFactoryFinder" />
		<field name="W3C_XML_SCHEMA11_NS_URI" class="javax.xml.validation.SchemaFactoryFinder" />
		<field name="DEFAULT_LINE_LENGTH" class="javax.xml.validation.SchemaFactoryFinder" />
		<method signature="void &lt;init&gt;()" class="javax.xml.validation.SchemaFactoryLoader" />
		<class name="javax.xml.validation.SecuritySupport$7" />
		<method signature="void &lt;init&gt;()" class="javax.xml.validation.SecuritySupport" />
		<method signature="java.io.InputStream getResourceAsStream(java.lang.ClassLoader,java.lang.String)" class="javax.xml.validation.SecuritySupport" />
		<class name="javax.xml.xpath.SecuritySupport$7" />
		<method signature="void &lt;init&gt;()" class="javax.xml.xpath.SecuritySupport" />
		<method signature="java.io.InputStream getResourceAsStream(java.lang.ClassLoader,java.lang.String)" class="javax.xml.xpath.SecuritySupport" />
		<field name="DOM_OBJECT_MODEL" class="javax.xml.xpath.XPathConstants" />
		<method signature="void &lt;init&gt;()" class="javax.xml.xpath.XPathConstants" />
		<field name="serialVersionUID" class="javax.xml.xpath.XPathException" />
		<field name="serialVersionUID" class="javax.xml.xpath.XPathExpressionException" />
		<field name="DEFAULT_PROPERTY_NAME" class="javax.xml.xpath.XPathFactory" />
		<field name="DEFAULT_OBJECT_MODEL_URI" class="javax.xml.xpath.XPathFactory" />
		<method signature="void &lt;init&gt;()" class="javax.xml.xpath.XPathFactory" />
		<field name="serialVersionUID" class="javax.xml.xpath.XPathFactoryConfigurationException" />
		<field name="DEFAULT_LINE_LENGTH" class="javax.xml.xpath.XPathFactoryFinder" />
		<field name="serialVersionUID" class="javax.xml.xpath.XPathFunctionException" />
		<field name="UI_CLASS_ID" class="net.java.dev.colorchooser.ColorChooser" />
		<field name="PROP_COLOR" class="net.java.dev.colorchooser.ColorChooser" />
		<field name="PROP_TRANSIENT_COLOR" class="net.java.dev.colorchooser.ColorChooser" />
		<field name="PROP_CONTINUOUS_PALETTE" class="net.java.dev.colorchooser.ColorChooser" />
		<field name="PROP_PICKER_VISIBLE" class="net.java.dev.colorchooser.ColorChooser" />
		<field name="PROPERTY_color" class="net.java.dev.colorchooser.ColorChooserBeanInfo" />
		<field name="PROPERTY_continuousPalettePreferred" class="net.java.dev.colorchooser.ColorChooserBeanInfo" />
		<field name="PROPERTY_cursor" class="net.java.dev.colorchooser.ColorChooserBeanInfo" />
		<field name="PROPERTY_enabled" class="net.java.dev.colorchooser.ColorChooserBeanInfo" />
		<field name="PROPERTY_height" class="net.java.dev.colorchooser.ColorChooserBeanInfo" />
		<field name="PROPERTY_maximumSize" class="net.java.dev.colorchooser.ColorChooserBeanInfo" />
		<field name="PROPERTY_minimumSize" class="net.java.dev.colorchooser.ColorChooserBeanInfo" />
		<field name="PROPERTY_name" class="net.java.dev.colorchooser.ColorChooserBeanInfo" />
		<field name="PROPERTY_preferredSize" class="net.java.dev.colorchooser.ColorChooserBeanInfo" />
		<field name="PROPERTY_toolTipText" class="net.java.dev.colorchooser.ColorChooserBeanInfo" />
		<field name="PROPERTY_transientColor" class="net.java.dev.colorchooser.ColorChooserBeanInfo" />
		<field name="PROPERTY_visible" class="net.java.dev.colorchooser.ColorChooserBeanInfo" />
		<field name="PROPERTY_width" class="net.java.dev.colorchooser.ColorChooserBeanInfo" />
		<field name="PROPERTY_x" class="net.java.dev.colorchooser.ColorChooserBeanInfo" />
		<field name="PROPERTY_y" class="net.java.dev.colorchooser.ColorChooserBeanInfo" />
		<field name="EVENT_actionListener" class="net.java.dev.colorchooser.ColorChooserBeanInfo" />
		<field name="EVENT_componentListener" class="net.java.dev.colorchooser.ColorChooserBeanInfo" />
		<field name="EVENT_focusListener" class="net.java.dev.colorchooser.ColorChooserBeanInfo" />
		<field name="EVENT_hierarchyBoundsListener" class="net.java.dev.colorchooser.ColorChooserBeanInfo" />
		<field name="EVENT_inputMethodListener" class="net.java.dev.colorchooser.ColorChooserBeanInfo" />
		<field name="EVENT_keyListener" class="net.java.dev.colorchooser.ColorChooserBeanInfo" />
		<field name="EVENT_mouseListener" class="net.java.dev.colorchooser.ColorChooserBeanInfo" />
		<field name="EVENT_mouseMotionListener" class="net.java.dev.colorchooser.ColorChooserBeanInfo" />
		<field name="EVENT_propertyChangeListener" class="net.java.dev.colorchooser.ColorChooserBeanInfo" />
		<field name="defaultPropertyIndex" class="net.java.dev.colorchooser.ColorChooserBeanInfo" />
		<field name="defaultEventIndex" class="net.java.dev.colorchooser.ColorChooserBeanInfo" />
		<field name="SMALL_SPEC_WIDTH" class="net.java.dev.colorchooser.ContinuousPalette" />
		<field name="SMALL_SPEC_HEIGHT" class="net.java.dev.colorchooser.ContinuousPalette" />
		<field name="LARGE_SPEC_WIDTH" class="net.java.dev.colorchooser.ContinuousPalette" />
		<field name="LARGE_SPEC_HEIGHT" class="net.java.dev.colorchooser.ContinuousPalette" />
		<field name="SPEC_IMAGE_COUNT" class="net.java.dev.colorchooser.ContinuousPalette" />
		<method signature="void &lt;init&gt;(java.lang.String,int,int)" class="net.java.dev.colorchooser.ContinuousPalette" />
		<method signature="java.awt.Color colorFromPoint(java.awt.Point)" class="net.java.dev.colorchooser.ContinuousPalette" />
		<method signature="float getSaturation()" class="net.java.dev.colorchooser.ContinuousPalette" />
		<method signature="boolean isVerticalHue()" class="net.java.dev.colorchooser.ContinuousPalette" />
		<method signature="void setVerticalHue(boolean)" class="net.java.dev.colorchooser.ContinuousPalette" />
		<method signature="void setGrayStripSize(float)" class="net.java.dev.colorchooser.ContinuousPalette" />
		<method signature="float getGrayStripSize()" class="net.java.dev.colorchooser.ContinuousPalette" />
		<method signature="java.lang.String getName()" class="net.java.dev.colorchooser.NamedColor$DefaultNamedColor" />
		<method signature="java.lang.String getName()" class="net.java.dev.colorchooser.NamedColor" />
		<method signature="java.lang.String getInstantiationCode()" class="net.java.dev.colorchooser.NamedColor" />
		<method signature="int compareTo(java.lang.Object)" class="net.java.dev.colorchooser.NamedColor" />
		<method signature="java.lang.String getInstantiationCode()" class="net.java.dev.colorchooser.PredefinedPalette$BasicNamedColor" />
		<method signature="java.lang.String getInstantiationCode()" class="net.java.dev.colorchooser.PredefinedPalette$SwingColor" />
		<method signature="int getCount()" class="net.java.dev.colorchooser.PredefinedPalette" />
		<field name="INNER_DELIMITER" class="net.java.dev.colorchooser.RecentColors" />
		<field name="OUTER_DELIMITER" class="net.java.dev.colorchooser.RecentColors" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.AnnotationUtils$1" />
		<field name="INDEX_NOT_FOUND" class="org.apache.commons.lang3.ArrayUtils" />
		<field name="ISO_8859_1" class="org.apache.commons.lang3.CharEncoding" />
		<field name="US_ASCII" class="org.apache.commons.lang3.CharEncoding" />
		<field name="UTF_16" class="org.apache.commons.lang3.CharEncoding" />
		<field name="UTF_16BE" class="org.apache.commons.lang3.CharEncoding" />
		<field name="UTF_16LE" class="org.apache.commons.lang3.CharEncoding" />
		<field name="UTF_8" class="org.apache.commons.lang3.CharEncoding" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.CharRange" />
		<method signature="char getStart()" class="org.apache.commons.lang3.CharRange" />
		<method signature="char getEnd()" class="org.apache.commons.lang3.CharRange" />
		<method signature="boolean contains(org.apache.commons.lang3.CharRange)" class="org.apache.commons.lang3.CharRange" />
		<field name="NOT_FOUND" class="org.apache.commons.lang3.CharSequenceUtils" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.CharSet" />
		<method signature="org.apache.commons.lang3.CharRange[] getCharRanges()" class="org.apache.commons.lang3.CharSet" />
		<field name="LF" class="org.apache.commons.lang3.CharUtils" />
		<field name="CR" class="org.apache.commons.lang3.CharUtils" />
		<field name="PACKAGE_SEPARATOR_CHAR" class="org.apache.commons.lang3.ClassUtils" />
		<field name="INNER_CLASS_SEPARATOR_CHAR" class="org.apache.commons.lang3.ClassUtils" />
		<field name="NULL_ELEMENTS_NOT_PERMITTED" class="org.apache.commons.lang3.EnumUtils" />
		<field name="CANNOT_STORE_S_S_VALUES_IN_S_BITS" class="org.apache.commons.lang3.EnumUtils" />
		<field name="S_DOES_NOT_SEEM_TO_BE_AN_ENUM_TYPE" class="org.apache.commons.lang3.EnumUtils" />
		<field name="ENUM_CLASS_MUST_BE_DEFINED" class="org.apache.commons.lang3.EnumUtils" />
		<method signature="org.apache.commons.lang3.JavaVersion getJavaVersion(java.lang.String)" class="org.apache.commons.lang3.JavaVersion" />
		<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.LocaleUtils$SyncAvoid" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.NotImplementedException" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.ObjectUtils$Null" />
		<method signature="java.lang.Object readResolve()" class="org.apache.commons.lang3.ObjectUtils$Null" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.Range" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.SerializationException" />
		<field name="CSV_DELIMITER" class="org.apache.commons.lang3.StringEscapeUtils$CsvEscaper" />
		<field name="CSV_QUOTE" class="org.apache.commons.lang3.StringEscapeUtils$CsvEscaper" />
		<field name="CSV_DELIMITER" class="org.apache.commons.lang3.StringEscapeUtils$CsvUnescaper" />
		<field name="CSV_QUOTE" class="org.apache.commons.lang3.StringEscapeUtils$CsvUnescaper" />
		<field name="SPACE" class="org.apache.commons.lang3.StringUtils" />
		<field name="EMPTY" class="org.apache.commons.lang3.StringUtils" />
		<field name="LF" class="org.apache.commons.lang3.StringUtils" />
		<field name="CR" class="org.apache.commons.lang3.StringUtils" />
		<field name="INDEX_NOT_FOUND" class="org.apache.commons.lang3.StringUtils" />
		<field name="PAD_LIMIT" class="org.apache.commons.lang3.StringUtils" />
		<field name="OS_NAME_WINDOWS_PREFIX" class="org.apache.commons.lang3.SystemUtils" />
		<field name="USER_HOME_KEY" class="org.apache.commons.lang3.SystemUtils" />
		<field name="USER_DIR_KEY" class="org.apache.commons.lang3.SystemUtils" />
		<field name="JAVA_IO_TMPDIR_KEY" class="org.apache.commons.lang3.SystemUtils" />
		<field name="JAVA_HOME_KEY" class="org.apache.commons.lang3.SystemUtils" />
		<field name="DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE" class="org.apache.commons.lang3.Validate" />
		<field name="DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE" class="org.apache.commons.lang3.Validate" />
		<field name="DEFAULT_MATCHES_PATTERN_EX" class="org.apache.commons.lang3.Validate" />
		<field name="DEFAULT_IS_NULL_EX_MESSAGE" class="org.apache.commons.lang3.Validate" />
		<field name="DEFAULT_IS_TRUE_EX_MESSAGE" class="org.apache.commons.lang3.Validate" />
		<field name="DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE" class="org.apache.commons.lang3.Validate" />
		<field name="DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE" class="org.apache.commons.lang3.Validate" />
		<field name="DEFAULT_NOT_BLANK_EX_MESSAGE" class="org.apache.commons.lang3.Validate" />
		<field name="DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE" class="org.apache.commons.lang3.Validate" />
		<field name="DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE" class="org.apache.commons.lang3.Validate" />
		<field name="DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE" class="org.apache.commons.lang3.Validate" />
		<field name="DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE" class="org.apache.commons.lang3.Validate" />
		<field name="DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE" class="org.apache.commons.lang3.Validate" />
		<field name="DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE" class="org.apache.commons.lang3.Validate" />
		<field name="DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE" class="org.apache.commons.lang3.Validate" />
		<field name="DEFAULT_VALID_STATE_EX_MESSAGE" class="org.apache.commons.lang3.Validate" />
		<field name="DEFAULT_IS_ASSIGNABLE_EX_MESSAGE" class="org.apache.commons.lang3.Validate" />
		<field name="DEFAULT_IS_INSTANCE_OF_EX_MESSAGE" class="org.apache.commons.lang3.Validate" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.builder.Diff" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.builder.DiffBuilder$1" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.builder.DiffBuilder$10" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.builder.DiffBuilder$11" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.builder.DiffBuilder$12" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.builder.DiffBuilder$13" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.builder.DiffBuilder$14" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.builder.DiffBuilder$15" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.builder.DiffBuilder$16" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.builder.DiffBuilder$17" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.builder.DiffBuilder$18" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.builder.DiffBuilder$2" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.builder.DiffBuilder$3" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.builder.DiffBuilder$4" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.builder.DiffBuilder$5" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.builder.DiffBuilder$6" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.builder.DiffBuilder$7" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.builder.DiffBuilder$8" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.builder.DiffBuilder$9" />
		<field name="OBJECTS_SAME_STRING" class="org.apache.commons.lang3.builder.DiffResult" />
		<field name="DIFFERS_STRING" class="org.apache.commons.lang3.builder.DiffResult" />
		<field name="DEFAULT_INITIAL_VALUE" class="org.apache.commons.lang3.builder.HashCodeBuilder" />
		<field name="DEFAULT_MULTIPLIER_VALUE" class="org.apache.commons.lang3.builder.HashCodeBuilder" />
		<class name="org.apache.commons.lang3.builder.MultilineRecursiveToStringStyle" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.builder.RecursiveToStringStyle" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.builder.StandardToStringStyle" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.builder.ToStringStyle$DefaultToStringStyle" />
		<method signature="java.lang.Object readResolve()" class="org.apache.commons.lang3.builder.ToStringStyle$DefaultToStringStyle" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.builder.ToStringStyle$JsonToStringStyle" />
		<method signature="java.lang.Object readResolve()" class="org.apache.commons.lang3.builder.ToStringStyle$JsonToStringStyle" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.builder.ToStringStyle$MultiLineToStringStyle" />
		<method signature="java.lang.Object readResolve()" class="org.apache.commons.lang3.builder.ToStringStyle$MultiLineToStringStyle" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.builder.ToStringStyle$NoClassNameToStringStyle" />
		<method signature="java.lang.Object readResolve()" class="org.apache.commons.lang3.builder.ToStringStyle$NoClassNameToStringStyle" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.builder.ToStringStyle$NoFieldNameToStringStyle" />
		<method signature="java.lang.Object readResolve()" class="org.apache.commons.lang3.builder.ToStringStyle$NoFieldNameToStringStyle" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.builder.ToStringStyle$ShortPrefixToStringStyle" />
		<method signature="java.lang.Object readResolve()" class="org.apache.commons.lang3.builder.ToStringStyle$ShortPrefixToStringStyle" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.builder.ToStringStyle$SimpleToStringStyle" />
		<method signature="java.lang.Object readResolve()" class="org.apache.commons.lang3.builder.ToStringStyle$SimpleToStringStyle" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.builder.ToStringStyle" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.concurrent.ConcurrentException" />
		<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.concurrent.ConcurrentException" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.concurrent.ConcurrentRuntimeException" />
		<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.concurrent.ConcurrentRuntimeException" />
		<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.concurrent.ConcurrentUtils" />
		<field name="FMT_TO_STRING" class="org.apache.commons.lang3.concurrent.ConstantInitializer" />
		<field name="NO_LIMIT" class="org.apache.commons.lang3.concurrent.TimedSemaphore" />
		<field name="THREAD_POOL_SIZE" class="org.apache.commons.lang3.concurrent.TimedSemaphore" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.event.EventListenerSupport" />
		<method signature="int getListenerCount()" class="org.apache.commons.lang3.event.EventListenerSupport" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.apache.commons.lang3.event.EventListenerSupport" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.apache.commons.lang3.event.EventListenerSupport" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.exception.CloneFailedException" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.exception.ContextedException" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.exception.ContextedRuntimeException" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.exception.DefaultExceptionContext" />
		<field name="WRAPPED_MARKER" class="org.apache.commons.lang3.exception.ExceptionUtils" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.math.Fraction" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.mutable.MutableBoolean" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.mutable.MutableByte" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.mutable.MutableDouble" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.mutable.MutableFloat" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.mutable.MutableInt" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.mutable.MutableLong" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.mutable.MutableObject" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.mutable.MutableShort" />
		<field name="ACCESS_TEST" class="org.apache.commons.lang3.reflect.MemberUtils" />
		<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.reflect.MemberUtils" />
		<field name="value" class="org.apache.commons.lang3.reflect.TypeLiteral" />
		<field name="toString" class="org.apache.commons.lang3.reflect.TypeLiteral" />
		<method signature="void &lt;init&gt;()" class="org.apache.commons.lang3.reflect.TypeLiteral" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.text.CompositeFormat" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.text.ExtendedMessageFormat" />
		<field name="HASH_SEED" class="org.apache.commons.lang3.text.ExtendedMessageFormat" />
		<field name="DUMMY_PATTERN" class="org.apache.commons.lang3.text.ExtendedMessageFormat" />
		<field name="START_FMT" class="org.apache.commons.lang3.text.ExtendedMessageFormat" />
		<field name="END_FE" class="org.apache.commons.lang3.text.ExtendedMessageFormat" />
		<field name="START_FE" class="org.apache.commons.lang3.text.ExtendedMessageFormat" />
		<field name="QUOTE" class="org.apache.commons.lang3.text.ExtendedMessageFormat" />
		<field name="SIMPLEST_FORMAT" class="org.apache.commons.lang3.text.FormattableUtils" />
		<field name="CAPACITY" class="org.apache.commons.lang3.text.StrBuilder" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.text.StrBuilder" />
		<field name="DEFAULT_ESCAPE" class="org.apache.commons.lang3.text.StrSubstitutor" />
		<field name="MILLIS_PER_SECOND" class="org.apache.commons.lang3.time.DateUtils" />
		<field name="MILLIS_PER_MINUTE" class="org.apache.commons.lang3.time.DateUtils" />
		<field name="MILLIS_PER_HOUR" class="org.apache.commons.lang3.time.DateUtils" />
		<field name="MILLIS_PER_DAY" class="org.apache.commons.lang3.time.DateUtils" />
		<field name="SEMI_MONTH" class="org.apache.commons.lang3.time.DateUtils" />
		<field name="RANGE_WEEK_SUNDAY" class="org.apache.commons.lang3.time.DateUtils" />
		<field name="RANGE_WEEK_MONDAY" class="org.apache.commons.lang3.time.DateUtils" />
		<field name="RANGE_WEEK_RELATIVE" class="org.apache.commons.lang3.time.DateUtils" />
		<field name="RANGE_WEEK_CENTER" class="org.apache.commons.lang3.time.DateUtils" />
		<field name="RANGE_MONTH_SUNDAY" class="org.apache.commons.lang3.time.DateUtils" />
		<field name="RANGE_MONTH_MONDAY" class="org.apache.commons.lang3.time.DateUtils" />
		<method signature="void &lt;init&gt;(java.lang.Object,int)" class="org.apache.commons.lang3.time.DurationFormatUtils$Token" />
		<field name="ISO_EXTENDED_FORMAT_PATTERN" class="org.apache.commons.lang3.time.DurationFormatUtils" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.time.FastDateFormat" />
		<field name="FULL" class="org.apache.commons.lang3.time.FastDateFormat" />
		<field name="LONG" class="org.apache.commons.lang3.time.FastDateFormat" />
		<field name="MEDIUM" class="org.apache.commons.lang3.time.FastDateFormat" />
		<field name="SHORT" class="org.apache.commons.lang3.time.FastDateFormat" />
		<method signature="java.lang.StringBuffer applyRules(java.util.Calendar,java.lang.StringBuffer)" class="org.apache.commons.lang3.time.FastDateFormat" />
		<field name="ID" class="org.apache.commons.lang3.time.FastDateParser$TimeZoneStrategy" />
		<field name="LONG_STD" class="org.apache.commons.lang3.time.FastDateParser$TimeZoneStrategy" />
		<field name="SHORT_STD" class="org.apache.commons.lang3.time.FastDateParser$TimeZoneStrategy" />
		<field name="LONG_DST" class="org.apache.commons.lang3.time.FastDateParser$TimeZoneStrategy" />
		<field name="SHORT_DST" class="org.apache.commons.lang3.time.FastDateParser$TimeZoneStrategy" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.time.FastDateParser" />
		<method signature="void &lt;init&gt;(java.lang.String,java.util.TimeZone,java.util.Locale)" class="org.apache.commons.lang3.time.FastDateParser" />
		<method signature="java.util.regex.Pattern getParsePattern()" class="org.apache.commons.lang3.time.FastDateParser" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.apache.commons.lang3.time.FastDateParser" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.time.FastDatePrinter" />
		<field name="FULL" class="org.apache.commons.lang3.time.FastDatePrinter" />
		<field name="LONG" class="org.apache.commons.lang3.time.FastDatePrinter" />
		<field name="MEDIUM" class="org.apache.commons.lang3.time.FastDatePrinter" />
		<field name="SHORT" class="org.apache.commons.lang3.time.FastDatePrinter" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.apache.commons.lang3.time.FastDatePrinter" />
		<field name="NONE" class="org.apache.commons.lang3.time.FormatCache" />
		<field name="NANO_2_MILLIS" class="org.apache.commons.lang3.time.StopWatch" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.tuple.ImmutablePair" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.tuple.ImmutableTriple" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.tuple.MutablePair" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.tuple.MutableTriple" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.tuple.Pair" />
		<field name="serialVersionUID" class="org.apache.commons.lang3.tuple.Triple" />
		<method signature="int getIndex()" class="org.apache.html.dom.CollectionIndex" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLAnchorElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLAppletElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLAreaElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLBRElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLBaseElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLBaseFontElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLBodyElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLButtonElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLCollectionImpl" />
		<field name="ANCHOR" class="org.apache.html.dom.HTMLCollectionImpl" />
		<field name="FORM" class="org.apache.html.dom.HTMLCollectionImpl" />
		<field name="IMAGE" class="org.apache.html.dom.HTMLCollectionImpl" />
		<field name="APPLET" class="org.apache.html.dom.HTMLCollectionImpl" />
		<field name="LINK" class="org.apache.html.dom.HTMLCollectionImpl" />
		<field name="OPTION" class="org.apache.html.dom.HTMLCollectionImpl" />
		<field name="ROW" class="org.apache.html.dom.HTMLCollectionImpl" />
		<field name="ELEMENT" class="org.apache.html.dom.HTMLCollectionImpl" />
		<field name="AREA" class="org.apache.html.dom.HTMLCollectionImpl" />
		<field name="TBODY" class="org.apache.html.dom.HTMLCollectionImpl" />
		<field name="CELL" class="org.apache.html.dom.HTMLCollectionImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLDListElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLDirectoryElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLDivElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLDocumentImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLFieldSetElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLFontElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLFormElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLFrameElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLFrameSetElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLHRElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLHeadElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLHeadingElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLHtmlElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLIFrameElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLImageElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLInputElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLIsIndexElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLLIElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLLabelElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLLegendElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLLinkElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLMapElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLMenuElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLMetaElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLModElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLOListElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLObjectElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLOptGroupElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLOptionElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLParagraphElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLParamElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLPreElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLQuoteElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLScriptElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLSelectElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLStyleElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLTableCaptionElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLTableCellElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLTableColElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLTableElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLTableRowElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLTableSectionElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLTextAreaElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLTitleElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.HTMLUListElementImpl" />
		<field name="serialVersionUID" class="org.apache.html.dom.ObjectFactory$ConfigurationError" />
		<field name="exception" class="org.apache.html.dom.ObjectFactory$ConfigurationError" />
		<method signature="void &lt;init&gt;(java.lang.String,java.lang.Exception)" class="org.apache.html.dom.ObjectFactory$ConfigurationError" />
		<method signature="java.lang.Exception getException()" class="org.apache.html.dom.ObjectFactory$ConfigurationError" />
		<field name="DEFAULT_PROPERTIES_FILENAME" class="org.apache.html.dom.ObjectFactory" />
		<field name="DEFAULT_LINE_LENGTH" class="org.apache.html.dom.ObjectFactory" />
		<method signature="void &lt;init&gt;()" class="org.apache.html.dom.ObjectFactory" />
		<method signature="java.lang.Object createObject(java.lang.String,java.lang.String)" class="org.apache.html.dom.ObjectFactory" />
		<method signature="java.lang.Object createObject(java.lang.String,java.lang.String,java.lang.String)" class="org.apache.html.dom.ObjectFactory" />
		<method signature="void debugPrintln(java.lang.String)" class="org.apache.html.dom.ObjectFactory" />
		<method signature="java.lang.ClassLoader findClassLoader()" class="org.apache.html.dom.ObjectFactory" />
		<method signature="java.lang.Object newInstance(java.lang.String,java.lang.ClassLoader,boolean)" class="org.apache.html.dom.ObjectFactory" />
		<method signature="java.lang.Object findJarServiceProvider(java.lang.String)" class="org.apache.html.dom.ObjectFactory" />
		<class name="org.apache.html.dom.SecuritySupport$1" />
		<class name="org.apache.html.dom.SecuritySupport$2" />
		<class name="org.apache.html.dom.SecuritySupport$3" />
		<class name="org.apache.html.dom.SecuritySupport$5" />
		<class name="org.apache.html.dom.SecuritySupport$6" />
		<class name="org.apache.html.dom.SecuritySupport$7" />
		<class name="org.apache.html.dom.SecuritySupport$8" />
		<method signature="java.lang.ClassLoader getContextClassLoader()" class="org.apache.html.dom.SecuritySupport" />
		<method signature="java.lang.ClassLoader getSystemClassLoader()" class="org.apache.html.dom.SecuritySupport" />
		<method signature="java.lang.ClassLoader getParentClassLoader(java.lang.ClassLoader)" class="org.apache.html.dom.SecuritySupport" />
		<method signature="java.io.FileInputStream getFileInputStream(java.io.File)" class="org.apache.html.dom.SecuritySupport" />
		<method signature="java.io.InputStream getResourceAsStream(java.lang.ClassLoader,java.lang.String)" class="org.apache.html.dom.SecuritySupport" />
		<method signature="boolean getFileExists(java.io.File)" class="org.apache.html.dom.SecuritySupport" />
		<method signature="long getLastModified(java.io.File)" class="org.apache.html.dom.SecuritySupport" />
		<method signature="void &lt;init&gt;()" class="org.apache.html.dom.SecuritySupport" />
		<field name="serialVersionUID" class="org.apache.wml.dom.WMLAElementImpl" />
		<field name="serialVersionUID" class="org.apache.wml.dom.WMLAccessElementImpl" />
		<field name="serialVersionUID" class="org.apache.wml.dom.WMLAnchorElementImpl" />
		<field name="serialVersionUID" class="org.apache.wml.dom.WMLBElementImpl" />
		<field name="serialVersionUID" class="org.apache.wml.dom.WMLBigElementImpl" />
		<field name="serialVersionUID" class="org.apache.wml.dom.WMLBrElementImpl" />
		<field name="serialVersionUID" class="org.apache.wml.dom.WMLCardElementImpl" />
		<field name="serialVersionUID" class="org.apache.wml.dom.WMLDoElementImpl" />
		<field name="serialVersionUID" class="org.apache.wml.dom.WMLDocumentImpl" />
		<field name="serialVersionUID" class="org.apache.wml.dom.WMLElementImpl" />
		<field name="serialVersionUID" class="org.apache.wml.dom.WMLEmElementImpl" />
		<field name="serialVersionUID" class="org.apache.wml.dom.WMLFieldsetElementImpl" />
		<field name="serialVersionUID" class="org.apache.wml.dom.WMLGoElementImpl" />
		<field name="serialVersionUID" class="org.apache.wml.dom.WMLHeadElementImpl" />
		<field name="serialVersionUID" class="org.apache.wml.dom.WMLIElementImpl" />
		<field name="serialVersionUID" class="org.apache.wml.dom.WMLImgElementImpl" />
		<field name="serialVersionUID" class="org.apache.wml.dom.WMLInputElementImpl" />
		<field name="serialVersionUID" class="org.apache.wml.dom.WMLMetaElementImpl" />
		<field name="serialVersionUID" class="org.apache.wml.dom.WMLNoopElementImpl" />
		<field name="serialVersionUID" class="org.apache.wml.dom.WMLOneventElementImpl" />
		<field name="serialVersionUID" class="org.apache.wml.dom.WMLOptgroupElementImpl" />
		<field name="serialVersionUID" class="org.apache.wml.dom.WMLOptionElementImpl" />
		<field name="serialVersionUID" class="org.apache.wml.dom.WMLPElementImpl" />
		<field name="serialVersionUID" class="org.apache.wml.dom.WMLPostfieldElementImpl" />
		<field name="serialVersionUID" class="org.apache.wml.dom.WMLPrevElementImpl" />
		<field name="serialVersionUID" class="org.apache.wml.dom.WMLRefreshElementImpl" />
		<field name="serialVersionUID" class="org.apache.wml.dom.WMLSelectElementImpl" />
		<field name="serialVersionUID" class="org.apache.wml.dom.WMLSetvarElementImpl" />
		<field name="serialVersionUID" class="org.apache.wml.dom.WMLSmallElementImpl" />
		<field name="serialVersionUID" class="org.apache.wml.dom.WMLStrongElementImpl" />
		<field name="serialVersionUID" class="org.apache.wml.dom.WMLTableElementImpl" />
		<field name="serialVersionUID" class="org.apache.wml.dom.WMLTdElementImpl" />
		<field name="serialVersionUID" class="org.apache.wml.dom.WMLTemplateElementImpl" />
		<field name="serialVersionUID" class="org.apache.wml.dom.WMLTimerElementImpl" />
		<field name="serialVersionUID" class="org.apache.wml.dom.WMLTrElementImpl" />
		<field name="serialVersionUID" class="org.apache.wml.dom.WMLUElementImpl" />
		<field name="serialVersionUID" class="org.apache.wml.dom.WMLWmlElementImpl" />
		<field name="serialVersionUID" class="org.apache.xerces.dom.AttrImpl" />
		<field name="DTD_URI" class="org.apache.xerces.dom.AttrImpl" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.apache.xerces.dom.AttrImpl" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.apache.xerces.dom.AttrImpl" />
		<field name="serialVersionUID" class="org.apache.xerces.dom.AttrNSImpl" />
		<field name="xmlnsURI" class="org.apache.xerces.dom.AttrNSImpl" />
		<field name="xmlURI" class="org.apache.xerces.dom.AttrNSImpl" />
		<field name="serialVersionUID" class="org.apache.xerces.dom.AttributeMap" />
		<field name="serialVersionUID" class="org.apache.xerces.dom.CDATASectionImpl" />
		<field name="serialVersionUID" class="org.apache.xerces.dom.CharacterDataImpl" />
		<field name="serialVersionUID" class="org.apache.xerces.dom.ChildNode" />
		<field name="serialVersionUID" class="org.apache.xerces.dom.CommentImpl" />
		<field name="SIZE" class="org.apache.xerces.dom.CoreDOMImplementationImpl" />
		<field name="serialVersionUID" class="org.apache.xerces.dom.CoreDocumentImpl" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.apache.xerces.dom.CoreDocumentImpl" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.apache.xerces.dom.CoreDocumentImpl" />
		<field name="XML11_DATATYPE_VALIDATOR_FACTORY" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<field name="XERCES_VALIDATION" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<field name="XERCES_NAMESPACES" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<field name="SCHEMA" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<field name="SCHEMA_FULL_CHECKING" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<field name="DYNAMIC_VALIDATION" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<field name="NORMALIZE_DATA" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<field name="SCHEMA_ELEMENT_DEFAULT" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<field name="SEND_PSVI" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<field name="GENERATE_SYNTHETIC_ANNOTATIONS" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<field name="VALIDATE_ANNOTATIONS" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<field name="HONOUR_ALL_SCHEMALOCATIONS" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<field name="USE_GRAMMAR_POOL_ONLY" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<field name="DISALLOW_DOCTYPE_DECL_FEATURE" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<field name="BALANCE_SYNTAX_TREES" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<field name="WARN_ON_DUPLICATE_ATTDEF" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<field name="NAMESPACE_GROWTH" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<field name="TOLERATE_DUPLICATES" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<field name="ENTITY_MANAGER" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<field name="ERROR_REPORTER" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<field name="XML_STRING" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<field name="SYMBOL_TABLE" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<field name="GRAMMAR_POOL" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<field name="SECURITY_MANAGER" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<field name="ERROR_HANDLER" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<field name="ENTITY_RESOLVER" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<field name="JAXP_SCHEMA_LANGUAGE" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<field name="JAXP_SCHEMA_SOURCE" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<field name="DTD_VALIDATOR_PROPERTY" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<field name="DTD_VALIDATOR_FACTORY_PROPERTY" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<field name="VALIDATION_MANAGER" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<field name="SCHEMA_LOCATION" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<field name="SCHEMA_NONS_LOCATION" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<field name="SCHEMA_DV_FACTORY" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<field name="NAMESPACES" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<field name="DTNORMALIZATION" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<field name="ENTITIES" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<field name="CDATA" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<field name="SPLITCDATA" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<field name="COMMENTS" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<field name="VALIDATE" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<field name="PSVI" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<field name="WELLFORMED" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<field name="NSDECL" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<field name="INFOSET_TRUE_PARAMS" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<field name="INFOSET_FALSE_PARAMS" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<field name="INFOSET_MASK" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable)" class="org.apache.xerces.dom.DOMConfigurationImpl" />
		<field name="DOM_DOMAIN" class="org.apache.xerces.dom.DOMMessageFormatter" />
		<field name="XML_DOMAIN" class="org.apache.xerces.dom.DOMMessageFormatter" />
		<field name="SERIALIZER_DOMAIN" class="org.apache.xerces.dom.DOMMessageFormatter" />
		<method signature="void &lt;init&gt;()" class="org.apache.xerces.dom.DOMMessageFormatter" />
		<field name="DEBUG_ND" class="org.apache.xerces.dom.DOMNormalizer" />
		<field name="DEBUG" class="org.apache.xerces.dom.DOMNormalizer" />
		<field name="DEBUG_EVENTS" class="org.apache.xerces.dom.DOMNormalizer" />
		<field name="PREFIX" class="org.apache.xerces.dom.DOMNormalizer" />
		<method signature="java.lang.String normalizeAttributeValue(java.lang.String,org.w3c.dom.Attr)" class="org.apache.xerces.dom.DOMNormalizer" />
		<field name="serialVersionUID" class="org.apache.xerces.dom.DeferredAttrImpl" />
		<field name="serialVersionUID" class="org.apache.xerces.dom.DeferredAttrNSImpl" />
		<field name="serialVersionUID" class="org.apache.xerces.dom.DeferredCDATASectionImpl" />
		<field name="serialVersionUID" class="org.apache.xerces.dom.DeferredCommentImpl" />
		<field name="serialVersionUID" class="org.apache.xerces.dom.DeferredDocumentImpl" />
		<field name="DEBUG_PRINT_REF_COUNTS" class="org.apache.xerces.dom.DeferredDocumentImpl" />
		<field name="DEBUG_PRINT_TABLES" class="org.apache.xerces.dom.DeferredDocumentImpl" />
		<field name="DEBUG_IDS" class="org.apache.xerces.dom.DeferredDocumentImpl" />
		<field name="CHUNK_SHIFT" class="org.apache.xerces.dom.DeferredDocumentImpl" />
		<field name="CHUNK_SIZE" class="org.apache.xerces.dom.DeferredDocumentImpl" />
		<field name="CHUNK_MASK" class="org.apache.xerces.dom.DeferredDocumentImpl" />
		<field name="INITIAL_CHUNK_COUNT" class="org.apache.xerces.dom.DeferredDocumentImpl" />
		<method signature="boolean getNamespacesEnabled()" class="org.apache.xerces.dom.DeferredDocumentImpl" />
		<method signature="void setNamespacesEnabled(boolean)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
		<method signature="java.lang.String getNodeValue(int,int)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
		<method signature="void print(int[],int,int,int,int)" class="org.apache.xerces.dom.DeferredDocumentImpl" />
		<field name="serialVersionUID" class="org.apache.xerces.dom.DeferredDocumentTypeImpl" />
		<field name="serialVersionUID" class="org.apache.xerces.dom.DeferredElementDefinitionImpl" />
		<field name="serialVersionUID" class="org.apache.xerces.dom.DeferredElementImpl" />
		<field name="serialVersionUID" class="org.apache.xerces.dom.DeferredElementNSImpl" />
		<field name="serialVersionUID" class="org.apache.xerces.dom.DeferredEntityImpl" />
		<field name="serialVersionUID" class="org.apache.xerces.dom.DeferredEntityReferenceImpl" />
		<field name="TYPE_NODE" class="org.apache.xerces.dom.DeferredNode" />
		<field name="serialVersionUID" class="org.apache.xerces.dom.DeferredNotationImpl" />
		<field name="serialVersionUID" class="org.apache.xerces.dom.DeferredProcessingInstructionImpl" />
		<field name="serialVersionUID" class="org.apache.xerces.dom.DeferredTextImpl" />
		<field name="serialVersionUID" class="org.apache.xerces.dom.DocumentFragmentImpl" />
		<field name="serialVersionUID" class="org.apache.xerces.dom.DocumentImpl$EnclosingAttr" />
		<field name="serialVersionUID" class="org.apache.xerces.dom.DocumentImpl$LEntry" />
		<field name="serialVersionUID" class="org.apache.xerces.dom.DocumentImpl" />
		<field name="serialVersionUID" class="org.apache.xerces.dom.DocumentTypeImpl" />
		<field name="serialVersionUID" class="org.apache.xerces.dom.ElementDefinitionImpl" />
		<field name="serialVersionUID" class="org.apache.xerces.dom.ElementImpl" />
		<field name="serialVersionUID" class="org.apache.xerces.dom.ElementNSImpl" />
		<field name="xmlURI" class="org.apache.xerces.dom.ElementNSImpl" />
		<field name="serialVersionUID" class="org.apache.xerces.dom.EntityImpl" />
		<field name="serialVersionUID" class="org.apache.xerces.dom.EntityReferenceImpl" />
		<field name="serialVersionUID" class="org.apache.xerces.dom.NamedNodeMapImpl" />
		<field name="READONLY" class="org.apache.xerces.dom.NamedNodeMapImpl" />
		<field name="CHANGED" class="org.apache.xerces.dom.NamedNodeMapImpl" />
		<field name="HASDEFAULTS" class="org.apache.xerces.dom.NamedNodeMapImpl" />
		<method signature="boolean getReadOnly()" class="org.apache.xerces.dom.NamedNodeMapImpl" />
		<method signature="boolean changed()" class="org.apache.xerces.dom.NamedNodeMapImpl" />
		<method signature="void changed(boolean)" class="org.apache.xerces.dom.NamedNodeMapImpl" />
		<method signature="void removeItem(int)" class="org.apache.xerces.dom.NamedNodeMapImpl" />
		<method signature="int addItem(org.w3c.dom.Node)" class="org.apache.xerces.dom.NamedNodeMapImpl" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.apache.xerces.dom.NamedNodeMapImpl" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.apache.xerces.dom.NamedNodeMapImpl" />
		<field name="TREE_POSITION_PRECEDING" class="org.apache.xerces.dom.NodeImpl" />
		<field name="TREE_POSITION_FOLLOWING" class="org.apache.xerces.dom.NodeImpl" />
		<field name="TREE_POSITION_ANCESTOR" class="org.apache.xerces.dom.NodeImpl" />
		<field name="TREE_POSITION_DESCENDANT" class="org.apache.xerces.dom.NodeImpl" />
		<field name="TREE_POSITION_EQUIVALENT" class="org.apache.xerces.dom.NodeImpl" />
		<field name="TREE_POSITION_SAME_NODE" class="org.apache.xerces.dom.NodeImpl" />
		<field name="TREE_POSITION_DISCONNECTED" class="org.apache.xerces.dom.NodeImpl" />
		<field name="DOCUMENT_POSITION_DISCONNECTED" class="org.apache.xerces.dom.NodeImpl" />
		<field name="DOCUMENT_POSITION_PRECEDING" class="org.apache.xerces.dom.NodeImpl" />
		<field name="DOCUMENT_POSITION_FOLLOWING" class="org.apache.xerces.dom.NodeImpl" />
		<field name="DOCUMENT_POSITION_CONTAINS" class="org.apache.xerces.dom.NodeImpl" />
		<field name="DOCUMENT_POSITION_IS_CONTAINED" class="org.apache.xerces.dom.NodeImpl" />
		<field name="DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC" class="org.apache.xerces.dom.NodeImpl" />
		<field name="serialVersionUID" class="org.apache.xerces.dom.NodeImpl" />
		<field name="ELEMENT_DEFINITION_NODE" class="org.apache.xerces.dom.NodeImpl" />
		<field name="READONLY" class="org.apache.xerces.dom.NodeImpl" />
		<field name="SYNCDATA" class="org.apache.xerces.dom.NodeImpl" />
		<field name="SYNCCHILDREN" class="org.apache.xerces.dom.NodeImpl" />
		<field name="OWNED" class="org.apache.xerces.dom.NodeImpl" />
		<field name="FIRSTCHILD" class="org.apache.xerces.dom.NodeImpl" />
		<field name="SPECIFIED" class="org.apache.xerces.dom.NodeImpl" />
		<field name="IGNORABLEWS" class="org.apache.xerces.dom.NodeImpl" />
		<field name="HASSTRING" class="org.apache.xerces.dom.NodeImpl" />
		<field name="NORMALIZED" class="org.apache.xerces.dom.NodeImpl" />
		<field name="ID" class="org.apache.xerces.dom.NodeImpl" />
		<method signature="org.apache.xerces.dom.ChildNode previousSibling()" class="org.apache.xerces.dom.NodeImpl" />
		<method signature="org.w3c.dom.Node getContainer()" class="org.apache.xerces.dom.NodeImpl" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.apache.xerces.dom.NodeImpl" />
		<field name="serialVersionUID" class="org.apache.xerces.dom.NodeListCache" />
		<field name="serialVersionUID" class="org.apache.xerces.dom.NotationImpl" />
		<field name="serialVersionUID" class="org.apache.xerces.dom.ObjectFactory$ConfigurationError" />
		<method signature="java.lang.Exception getException()" class="org.apache.xerces.dom.ObjectFactory$ConfigurationError" />
		<field name="DEFAULT_PROPERTIES_FILENAME" class="org.apache.xerces.dom.ObjectFactory" />
		<field name="DEFAULT_LINE_LENGTH" class="org.apache.xerces.dom.ObjectFactory" />
		<method signature="void &lt;init&gt;()" class="org.apache.xerces.dom.ObjectFactory" />
		<method signature="java.lang.Object createObject(java.lang.String,java.lang.String)" class="org.apache.xerces.dom.ObjectFactory" />
		<method signature="java.lang.Object createObject(java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.dom.ObjectFactory" />
		<method signature="java.lang.Object findJarServiceProvider(java.lang.String)" class="org.apache.xerces.dom.ObjectFactory" />
		<field name="serialVersionUID" class="org.apache.xerces.dom.PSVIAttrNSImpl" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.apache.xerces.dom.PSVIAttrNSImpl" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.apache.xerces.dom.PSVIAttrNSImpl" />
		<field name="serialVersionUID" class="org.apache.xerces.dom.PSVIDocumentImpl" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.apache.xerces.dom.PSVIDocumentImpl" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.apache.xerces.dom.PSVIDocumentImpl" />
		<field name="serialVersionUID" class="org.apache.xerces.dom.PSVIElementNSImpl" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.apache.xerces.dom.PSVIElementNSImpl" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.apache.xerces.dom.PSVIElementNSImpl" />
		<field name="serialVersionUID" class="org.apache.xerces.dom.ParentNode$UserDataRecord" />
		<field name="serialVersionUID" class="org.apache.xerces.dom.ParentNode" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.apache.xerces.dom.ParentNode" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.apache.xerces.dom.ParentNode" />
		<field name="serialVersionUID" class="org.apache.xerces.dom.ProcessingInstructionImpl" />
		<field name="serialVersionUID" class="org.apache.xerces.dom.RangeExceptionImpl" />
		<field name="EXTRACT_CONTENTS" class="org.apache.xerces.dom.RangeImpl" />
		<field name="CLONE_CONTENTS" class="org.apache.xerces.dom.RangeImpl" />
		<field name="DELETE_CONTENTS" class="org.apache.xerces.dom.RangeImpl" />
		<method signature="void deleteData(org.w3c.dom.CharacterData,int,int)" class="org.apache.xerces.dom.RangeImpl" />
		<method signature="void insertData(org.w3c.dom.CharacterData,int,java.lang.String)" class="org.apache.xerces.dom.RangeImpl" />
		<method signature="org.w3c.dom.Node removeChild(org.w3c.dom.Node,org.w3c.dom.Node)" class="org.apache.xerces.dom.RangeImpl" />
		<class name="org.apache.xerces.dom.SecuritySupport$5" />
		<class name="org.apache.xerces.dom.SecuritySupport$6" />
		<class name="org.apache.xerces.dom.SecuritySupport$7" />
		<class name="org.apache.xerces.dom.SecuritySupport$8" />
		<method signature="java.io.FileInputStream getFileInputStream(java.io.File)" class="org.apache.xerces.dom.SecuritySupport" />
		<method signature="java.io.InputStream getResourceAsStream(java.lang.ClassLoader,java.lang.String)" class="org.apache.xerces.dom.SecuritySupport" />
		<method signature="boolean getFileExists(java.io.File)" class="org.apache.xerces.dom.SecuritySupport" />
		<method signature="long getLastModified(java.io.File)" class="org.apache.xerces.dom.SecuritySupport" />
		<method signature="void &lt;init&gt;()" class="org.apache.xerces.dom.SecuritySupport" />
		<field name="serialVersionUID" class="org.apache.xerces.dom.TextImpl" />
		<field name="DOM_SUBTREE_MODIFIED" class="org.apache.xerces.dom.events.MutationEventImpl" />
		<field name="DOM_NODE_INSERTED" class="org.apache.xerces.dom.events.MutationEventImpl" />
		<field name="DOM_NODE_REMOVED" class="org.apache.xerces.dom.events.MutationEventImpl" />
		<field name="DOM_NODE_REMOVED_FROM_DOCUMENT" class="org.apache.xerces.dom.events.MutationEventImpl" />
		<field name="DOM_NODE_INSERTED_INTO_DOCUMENT" class="org.apache.xerces.dom.events.MutationEventImpl" />
		<field name="DOM_ATTR_MODIFIED" class="org.apache.xerces.dom.events.MutationEventImpl" />
		<field name="DOM_CHARACTER_DATA_MODIFIED" class="org.apache.xerces.dom.events.MutationEventImpl" />
		<field name="VALUE_NONE" class="org.apache.xerces.dom3.as.ASAttributeDeclaration" />
		<field name="VALUE_DEFAULT" class="org.apache.xerces.dom3.as.ASAttributeDeclaration" />
		<field name="VALUE_FIXED" class="org.apache.xerces.dom3.as.ASAttributeDeclaration" />
		<field name="AS_UNBOUNDED" class="org.apache.xerces.dom3.as.ASContentModel" />
		<field name="AS_SEQUENCE" class="org.apache.xerces.dom3.as.ASContentModel" />
		<field name="AS_CHOICE" class="org.apache.xerces.dom3.as.ASContentModel" />
		<field name="AS_ALL" class="org.apache.xerces.dom3.as.ASContentModel" />
		<field name="AS_NONE" class="org.apache.xerces.dom3.as.ASContentModel" />
		<field name="STRING_DATATYPE" class="org.apache.xerces.dom3.as.ASDataType" />
		<field name="NOTATION_DATATYPE" class="org.apache.xerces.dom3.as.ASDataType" />
		<field name="ID_DATATYPE" class="org.apache.xerces.dom3.as.ASDataType" />
		<field name="IDREF_DATATYPE" class="org.apache.xerces.dom3.as.ASDataType" />
		<field name="IDREFS_DATATYPE" class="org.apache.xerces.dom3.as.ASDataType" />
		<field name="ENTITY_DATATYPE" class="org.apache.xerces.dom3.as.ASDataType" />
		<field name="ENTITIES_DATATYPE" class="org.apache.xerces.dom3.as.ASDataType" />
		<field name="NMTOKEN_DATATYPE" class="org.apache.xerces.dom3.as.ASDataType" />
		<field name="NMTOKENS_DATATYPE" class="org.apache.xerces.dom3.as.ASDataType" />
		<field name="BOOLEAN_DATATYPE" class="org.apache.xerces.dom3.as.ASDataType" />
		<field name="FLOAT_DATATYPE" class="org.apache.xerces.dom3.as.ASDataType" />
		<field name="DOUBLE_DATATYPE" class="org.apache.xerces.dom3.as.ASDataType" />
		<field name="DECIMAL_DATATYPE" class="org.apache.xerces.dom3.as.ASDataType" />
		<field name="HEXBINARY_DATATYPE" class="org.apache.xerces.dom3.as.ASDataType" />
		<field name="BASE64BINARY_DATATYPE" class="org.apache.xerces.dom3.as.ASDataType" />
		<field name="ANYURI_DATATYPE" class="org.apache.xerces.dom3.as.ASDataType" />
		<field name="QNAME_DATATYPE" class="org.apache.xerces.dom3.as.ASDataType" />
		<field name="DURATION_DATATYPE" class="org.apache.xerces.dom3.as.ASDataType" />
		<field name="DATETIME_DATATYPE" class="org.apache.xerces.dom3.as.ASDataType" />
		<field name="DATE_DATATYPE" class="org.apache.xerces.dom3.as.ASDataType" />
		<field name="TIME_DATATYPE" class="org.apache.xerces.dom3.as.ASDataType" />
		<field name="GYEARMONTH_DATATYPE" class="org.apache.xerces.dom3.as.ASDataType" />
		<field name="GYEAR_DATATYPE" class="org.apache.xerces.dom3.as.ASDataType" />
		<field name="GMONTHDAY_DATATYPE" class="org.apache.xerces.dom3.as.ASDataType" />
		<field name="GDAY_DATATYPE" class="org.apache.xerces.dom3.as.ASDataType" />
		<field name="GMONTH_DATATYPE" class="org.apache.xerces.dom3.as.ASDataType" />
		<field name="INTEGER" class="org.apache.xerces.dom3.as.ASDataType" />
		<field name="NAME_DATATYPE" class="org.apache.xerces.dom3.as.ASDataType" />
		<field name="NCNAME_DATATYPE" class="org.apache.xerces.dom3.as.ASDataType" />
		<field name="NORMALIZEDSTRING_DATATYPE" class="org.apache.xerces.dom3.as.ASDataType" />
		<field name="TOKEN_DATATYPE" class="org.apache.xerces.dom3.as.ASDataType" />
		<field name="LANGUAGE_DATATYPE" class="org.apache.xerces.dom3.as.ASDataType" />
		<field name="NONPOSITIVEINTEGER_DATATYPE" class="org.apache.xerces.dom3.as.ASDataType" />
		<field name="NEGATIVEINTEGER_DATATYPE" class="org.apache.xerces.dom3.as.ASDataType" />
		<field name="LONG_DATATYPE" class="org.apache.xerces.dom3.as.ASDataType" />
		<field name="INT_DATATYPE" class="org.apache.xerces.dom3.as.ASDataType" />
		<field name="SHORT_DATATYPE" class="org.apache.xerces.dom3.as.ASDataType" />
		<field name="BYTE_DATATYPE" class="org.apache.xerces.dom3.as.ASDataType" />
		<field name="NONNEGATIVEINTEGER_DATATYPE" class="org.apache.xerces.dom3.as.ASDataType" />
		<field name="UNSIGNEDLONG_DATATYPE" class="org.apache.xerces.dom3.as.ASDataType" />
		<field name="UNSIGNEDINT_DATATYPE" class="org.apache.xerces.dom3.as.ASDataType" />
		<field name="UNSIGNEDSHORT_DATATYPE" class="org.apache.xerces.dom3.as.ASDataType" />
		<field name="UNSIGNEDBYTE_DATATYPE" class="org.apache.xerces.dom3.as.ASDataType" />
		<field name="POSITIVEINTEGER_DATATYPE" class="org.apache.xerces.dom3.as.ASDataType" />
		<field name="OTHER_SIMPLE_DATATYPE" class="org.apache.xerces.dom3.as.ASDataType" />
		<field name="COMPLEX_DATATYPE" class="org.apache.xerces.dom3.as.ASDataType" />
		<field name="EMPTY_CONTENTTYPE" class="org.apache.xerces.dom3.as.ASElementDeclaration" />
		<field name="ANY_CONTENTTYPE" class="org.apache.xerces.dom3.as.ASElementDeclaration" />
		<field name="MIXED_CONTENTTYPE" class="org.apache.xerces.dom3.as.ASElementDeclaration" />
		<field name="ELEMENTS_CONTENTTYPE" class="org.apache.xerces.dom3.as.ASElementDeclaration" />
		<field name="INTERNAL_ENTITY" class="org.apache.xerces.dom3.as.ASEntityDeclaration" />
		<field name="EXTERNAL_ENTITY" class="org.apache.xerces.dom3.as.ASEntityDeclaration" />
		<field name="AS_ELEMENT_DECLARATION" class="org.apache.xerces.dom3.as.ASObject" />
		<field name="AS_ATTRIBUTE_DECLARATION" class="org.apache.xerces.dom3.as.ASObject" />
		<field name="AS_NOTATION_DECLARATION" class="org.apache.xerces.dom3.as.ASObject" />
		<field name="AS_ENTITY_DECLARATION" class="org.apache.xerces.dom3.as.ASObject" />
		<field name="AS_CONTENTMODEL" class="org.apache.xerces.dom3.as.ASObject" />
		<field name="AS_MODEL" class="org.apache.xerces.dom3.as.ASObject" />
		<field name="DUPLICATE_NAME_ERR" class="org.apache.xerces.dom3.as.DOMASException" />
		<field name="TYPE_ERR" class="org.apache.xerces.dom3.as.DOMASException" />
		<field name="NO_AS_AVAILABLE" class="org.apache.xerces.dom3.as.DOMASException" />
		<field name="WRONG_MIME_TYPE_ERR" class="org.apache.xerces.dom3.as.DOMASException" />
		<field name="WF_CHECK" class="org.apache.xerces.dom3.as.NodeEditAS" />
		<field name="NS_WF_CHECK" class="org.apache.xerces.dom3.as.NodeEditAS" />
		<field name="PARTIAL_VALIDITY_CHECK" class="org.apache.xerces.dom3.as.NodeEditAS" />
		<field name="STRICT_VALIDITY_CHECK" class="org.apache.xerces.dom3.as.NodeEditAS" />
		<field name="SAX_FEATURE_PREFIX" class="org.apache.xerces.impl.Constants" />
		<field name="NAMESPACES_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="NAMESPACE_PREFIXES_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="STRING_INTERNING_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="VALIDATION_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="EXTERNAL_GENERAL_ENTITIES_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="EXTERNAL_PARAMETER_ENTITIES_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="LEXICAL_HANDLER_PARAMETER_ENTITIES_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="IS_STANDALONE_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="RESOLVE_DTD_URIS_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="USE_ATTRIBUTES2_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="USE_LOCATOR2_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="USE_ENTITY_RESOLVER2_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="UNICODE_NORMALIZATION_CHECKING_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="XMLNS_URIS_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="XML_11_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="ALLOW_DTD_EVENTS_AFTER_ENDDTD_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="SAX_PROPERTY_PREFIX" class="org.apache.xerces.impl.Constants" />
		<field name="DECLARATION_HANDLER_PROPERTY" class="org.apache.xerces.impl.Constants" />
		<field name="LEXICAL_HANDLER_PROPERTY" class="org.apache.xerces.impl.Constants" />
		<field name="DOM_NODE_PROPERTY" class="org.apache.xerces.impl.Constants" />
		<field name="XML_STRING_PROPERTY" class="org.apache.xerces.impl.Constants" />
		<field name="DOCUMENT_XML_VERSION_PROPERTY" class="org.apache.xerces.impl.Constants" />
		<field name="JAXP_PROPERTY_PREFIX" class="org.apache.xerces.impl.Constants" />
		<field name="SCHEMA_SOURCE" class="org.apache.xerces.impl.Constants" />
		<field name="SCHEMA_LANGUAGE" class="org.apache.xerces.impl.Constants" />
		<field name="INCLUDE_COMMENTS_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="CREATE_CDATA_NODES_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="LOAD_AS_INFOSET" class="org.apache.xerces.impl.Constants" />
		<field name="DOM_CANONICAL_FORM" class="org.apache.xerces.impl.Constants" />
		<field name="DOM_CDATA_SECTIONS" class="org.apache.xerces.impl.Constants" />
		<field name="DOM_COMMENTS" class="org.apache.xerces.impl.Constants" />
		<field name="DOM_CHARSET_OVERRIDES_XML_ENCODING" class="org.apache.xerces.impl.Constants" />
		<field name="DOM_DATATYPE_NORMALIZATION" class="org.apache.xerces.impl.Constants" />
		<field name="DOM_ENTITIES" class="org.apache.xerces.impl.Constants" />
		<field name="DOM_INFOSET" class="org.apache.xerces.impl.Constants" />
		<field name="DOM_NAMESPACES" class="org.apache.xerces.impl.Constants" />
		<field name="DOM_NAMESPACE_DECLARATIONS" class="org.apache.xerces.impl.Constants" />
		<field name="DOM_SUPPORTED_MEDIATYPES_ONLY" class="org.apache.xerces.impl.Constants" />
		<field name="DOM_VALIDATE_IF_SCHEMA" class="org.apache.xerces.impl.Constants" />
		<field name="DOM_VALIDATE" class="org.apache.xerces.impl.Constants" />
		<field name="DOM_ELEMENT_CONTENT_WHITESPACE" class="org.apache.xerces.impl.Constants" />
		<field name="DOM_DISCARD_DEFAULT_CONTENT" class="org.apache.xerces.impl.Constants" />
		<field name="DOM_NORMALIZE_CHARACTERS" class="org.apache.xerces.impl.Constants" />
		<field name="DOM_CHECK_CHAR_NORMALIZATION" class="org.apache.xerces.impl.Constants" />
		<field name="DOM_WELLFORMED" class="org.apache.xerces.impl.Constants" />
		<field name="DOM_SPLIT_CDATA" class="org.apache.xerces.impl.Constants" />
		<field name="DOM_FORMAT_PRETTY_PRINT" class="org.apache.xerces.impl.Constants" />
		<field name="DOM_XMLDECL" class="org.apache.xerces.impl.Constants" />
		<field name="DOM_UNKNOWNCHARS" class="org.apache.xerces.impl.Constants" />
		<field name="DOM_CERTIFIED" class="org.apache.xerces.impl.Constants" />
		<field name="DOM_DISALLOW_DOCTYPE" class="org.apache.xerces.impl.Constants" />
		<field name="DOM_IGNORE_UNKNOWN_CHARACTER_DENORMALIZATIONS" class="org.apache.xerces.impl.Constants" />
		<field name="DOM_RESOURCE_RESOLVER" class="org.apache.xerces.impl.Constants" />
		<field name="DOM_ERROR_HANDLER" class="org.apache.xerces.impl.Constants" />
		<field name="DOM_SCHEMA_TYPE" class="org.apache.xerces.impl.Constants" />
		<field name="DOM_SCHEMA_LOCATION" class="org.apache.xerces.impl.Constants" />
		<field name="DOM_PSVI" class="org.apache.xerces.impl.Constants" />
		<field name="XERCES_FEATURE_PREFIX" class="org.apache.xerces.impl.Constants" />
		<field name="SCHEMA_VALIDATION_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="SCHEMA_NORMALIZED_VALUE" class="org.apache.xerces.impl.Constants" />
		<field name="SCHEMA_ELEMENT_DEFAULT" class="org.apache.xerces.impl.Constants" />
		<field name="SCHEMA_FULL_CHECKING" class="org.apache.xerces.impl.Constants" />
		<field name="SCHEMA_AUGMENT_PSVI" class="org.apache.xerces.impl.Constants" />
		<field name="DYNAMIC_VALIDATION_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="WARN_ON_DUPLICATE_ATTDEF_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="WARN_ON_UNDECLARED_ELEMDEF_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="WARN_ON_DUPLICATE_ENTITYDEF_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="ALLOW_JAVA_ENCODINGS_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="DISALLOW_DOCTYPE_DECL_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="CONTINUE_AFTER_FATAL_ERROR_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="LOAD_DTD_GRAMMAR_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="LOAD_EXTERNAL_DTD_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="DEFER_NODE_EXPANSION_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="CREATE_ENTITY_REF_NODES_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="INCLUDE_IGNORABLE_WHITESPACE" class="org.apache.xerces.impl.Constants" />
		<field name="DEFAULT_ATTRIBUTE_VALUES_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="VALIDATE_CONTENT_MODELS_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="VALIDATE_DATATYPES_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="BALANCE_SYNTAX_TREES" class="org.apache.xerces.impl.Constants" />
		<field name="NOTIFY_CHAR_REFS_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="NOTIFY_BUILTIN_REFS_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="STANDARD_URI_CONFORMANT_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="GENERATE_SYNTHETIC_ANNOTATIONS_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="VALIDATE_ANNOTATIONS_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="HONOUR_ALL_SCHEMALOCATIONS_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="NAMESPACE_GROWTH_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="TOLERATE_DUPLICATES_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="STRINGS_INTERNED_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="XINCLUDE_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="XINCLUDE_FIXUP_BASE_URIS_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="XINCLUDE_FIXUP_LANGUAGE_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="IGNORE_XSI_TYPE_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="ID_IDREF_CHECKING_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="IDC_CHECKING_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="UNPARSED_ENTITY_CHECKING_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="USE_GRAMMAR_POOL_ONLY_FEATURE" class="org.apache.xerces.impl.Constants" />
		<field name="PARSER_SETTINGS" class="org.apache.xerces.impl.Constants" />
		<field name="XERCES_PROPERTY_PREFIX" class="org.apache.xerces.impl.Constants" />
		<field name="CURRENT_ELEMENT_NODE_PROPERTY" class="org.apache.xerces.impl.Constants" />
		<field name="DOCUMENT_CLASS_NAME_PROPERTY" class="org.apache.xerces.impl.Constants" />
		<field name="SYMBOL_TABLE_PROPERTY" class="org.apache.xerces.impl.Constants" />
		<field name="ERROR_REPORTER_PROPERTY" class="org.apache.xerces.impl.Constants" />
		<field name="ERROR_HANDLER_PROPERTY" class="org.apache.xerces.impl.Constants" />
		<field name="XINCLUDE_HANDLER_PROPERTY" class="org.apache.xerces.impl.Constants" />
		<field name="XPOINTER_HANDLER_PROPERTY" class="org.apache.xerces.impl.Constants" />
		<field name="ENTITY_MANAGER_PROPERTY" class="org.apache.xerces.impl.Constants" />
		<field name="BUFFER_SIZE_PROPERTY" class="org.apache.xerces.impl.Constants" />
		<field name="SECURITY_MANAGER_PROPERTY" class="org.apache.xerces.impl.Constants" />
		<field name="LOCALE_PROPERTY" class="org.apache.xerces.impl.Constants" />
		<field name="ENTITY_RESOLVER_PROPERTY" class="org.apache.xerces.impl.Constants" />
		<field name="XMLGRAMMAR_POOL_PROPERTY" class="org.apache.xerces.impl.Constants" />
		<field name="DATATYPE_VALIDATOR_FACTORY_PROPERTY" class="org.apache.xerces.impl.Constants" />
		<field name="DOCUMENT_SCANNER_PROPERTY" class="org.apache.xerces.impl.Constants" />
		<field name="DTD_SCANNER_PROPERTY" class="org.apache.xerces.impl.Constants" />
		<field name="DTD_PROCESSOR_PROPERTY" class="org.apache.xerces.impl.Constants" />
		<field name="VALIDATOR_PROPERTY" class="org.apache.xerces.impl.Constants" />
		<field name="DTD_VALIDATOR_PROPERTY" class="org.apache.xerces.impl.Constants" />
		<field name="SCHEMA_VALIDATOR_PROPERTY" class="org.apache.xerces.impl.Constants" />
		<field name="SCHEMA_LOCATION" class="org.apache.xerces.impl.Constants" />
		<field name="SCHEMA_NONS_LOCATION" class="org.apache.xerces.impl.Constants" />
		<field name="NAMESPACE_BINDER_PROPERTY" class="org.apache.xerces.impl.Constants" />
		<field name="NAMESPACE_CONTEXT_PROPERTY" class="org.apache.xerces.impl.Constants" />
		<field name="VALIDATION_MANAGER_PROPERTY" class="org.apache.xerces.impl.Constants" />
		<field name="ROOT_TYPE_DEFINITION_PROPERTY" class="org.apache.xerces.impl.Constants" />
		<field name="ROOT_ELEMENT_DECLARATION_PROPERTY" class="org.apache.xerces.impl.Constants" />
		<field name="SCHEMA_DV_FACTORY_PROPERTY" class="org.apache.xerces.impl.Constants" />
		<field name="ELEMENT_PSVI" class="org.apache.xerces.impl.Constants" />
		<field name="ATTRIBUTE_PSVI" class="org.apache.xerces.impl.Constants" />
		<field name="ATTRIBUTE_DECLARED" class="org.apache.xerces.impl.Constants" />
		<field name="ENTITY_SKIPPED" class="org.apache.xerces.impl.Constants" />
		<field name="CHAR_REF_PROBABLE_WS" class="org.apache.xerces.impl.Constants" />
		<field name="XML_VERSION_ERROR" class="org.apache.xerces.impl.Constants" />
		<field name="XML_VERSION_1_0" class="org.apache.xerces.impl.Constants" />
		<field name="XML_VERSION_1_1" class="org.apache.xerces.impl.Constants" />
		<field name="SCHEMA_1_1_SUPPORT" class="org.apache.xerces.impl.Constants" />
		<field name="SCHEMA_VERSION_1_0" class="org.apache.xerces.impl.Constants" />
		<field name="SCHEMA_VERSION_1_0_EXTENDED" class="org.apache.xerces.impl.Constants" />
		<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.Constants" />
		<field name="fImmutableVersion" class="org.apache.xerces.impl.Version" />
		<method signature="boolean isValidNameStartChar(int)" class="org.apache.xerces.impl.XML11DTDScannerImpl" />
		<method signature="boolean isValidNameStartHighSurrogate(int)" class="org.apache.xerces.impl.XML11DTDScannerImpl" />
		<field name="SCANNER_STATE_END_OF_INPUT" class="org.apache.xerces.impl.XMLDTDScannerImpl" />
		<field name="SCANNER_STATE_TEXT_DECL" class="org.apache.xerces.impl.XMLDTDScannerImpl" />
		<field name="SCANNER_STATE_MARKUP_DECL" class="org.apache.xerces.impl.XMLDTDScannerImpl" />
		<field name="DEBUG_SCANNER_STATE" class="org.apache.xerces.impl.XMLDTDScannerImpl" />
		<method signature="java.lang.String getScannerStateName(int)" class="org.apache.xerces.impl.XMLDTDScannerImpl" />
		<field name="SCANNER_STATE_START_OF_MARKUP" class="org.apache.xerces.impl.XMLDocumentFragmentScannerImpl" />
		<field name="SCANNER_STATE_COMMENT" class="org.apache.xerces.impl.XMLDocumentFragmentScannerImpl" />
		<field name="SCANNER_STATE_PI" class="org.apache.xerces.impl.XMLDocumentFragmentScannerImpl" />
		<field name="SCANNER_STATE_DOCTYPE" class="org.apache.xerces.impl.XMLDocumentFragmentScannerImpl" />
		<field name="SCANNER_STATE_ROOT_ELEMENT" class="org.apache.xerces.impl.XMLDocumentFragmentScannerImpl" />
		<field name="SCANNER_STATE_CONTENT" class="org.apache.xerces.impl.XMLDocumentFragmentScannerImpl" />
		<field name="SCANNER_STATE_REFERENCE" class="org.apache.xerces.impl.XMLDocumentFragmentScannerImpl" />
		<field name="SCANNER_STATE_END_OF_INPUT" class="org.apache.xerces.impl.XMLDocumentFragmentScannerImpl" />
		<field name="SCANNER_STATE_TERMINATED" class="org.apache.xerces.impl.XMLDocumentFragmentScannerImpl" />
		<field name="SCANNER_STATE_CDATA" class="org.apache.xerces.impl.XMLDocumentFragmentScannerImpl" />
		<field name="SCANNER_STATE_TEXT_DECL" class="org.apache.xerces.impl.XMLDocumentFragmentScannerImpl" />
		<field name="NAMESPACES" class="org.apache.xerces.impl.XMLDocumentFragmentScannerImpl" />
		<field name="NOTIFY_BUILTIN_REFS" class="org.apache.xerces.impl.XMLDocumentFragmentScannerImpl" />
		<field name="ENTITY_RESOLVER" class="org.apache.xerces.impl.XMLDocumentFragmentScannerImpl" />
		<field name="DEBUG_SCANNER_STATE" class="org.apache.xerces.impl.XMLDocumentFragmentScannerImpl" />
		<field name="DEBUG_DISPATCHER" class="org.apache.xerces.impl.XMLDocumentFragmentScannerImpl" />
		<field name="DEBUG_CONTENT_SCANNING" class="org.apache.xerces.impl.XMLDocumentFragmentScannerImpl" />
		<method signature="int handleEndElement(org.apache.xerces.xni.QName,boolean)" class="org.apache.xerces.impl.XMLDocumentFragmentScannerImpl" />
		<field name="SCANNER_STATE_XML_DECL" class="org.apache.xerces.impl.XMLDocumentScannerImpl" />
		<field name="SCANNER_STATE_PROLOG" class="org.apache.xerces.impl.XMLDocumentScannerImpl" />
		<field name="SCANNER_STATE_TRAILING_MISC" class="org.apache.xerces.impl.XMLDocumentScannerImpl" />
		<field name="SCANNER_STATE_DTD_INTERNAL_DECLS" class="org.apache.xerces.impl.XMLDocumentScannerImpl" />
		<field name="SCANNER_STATE_DTD_EXTERNAL" class="org.apache.xerces.impl.XMLDocumentScannerImpl" />
		<field name="SCANNER_STATE_DTD_EXTERNAL_DECLS" class="org.apache.xerces.impl.XMLDocumentScannerImpl" />
		<field name="LOAD_EXTERNAL_DTD" class="org.apache.xerces.impl.XMLDocumentScannerImpl" />
		<field name="DISALLOW_DOCTYPE_DECL_FEATURE" class="org.apache.xerces.impl.XMLDocumentScannerImpl" />
		<field name="DTD_SCANNER" class="org.apache.xerces.impl.XMLDocumentScannerImpl" />
		<field name="VALIDATION_MANAGER" class="org.apache.xerces.impl.XMLDocumentScannerImpl" />
		<field name="NAMESPACE_CONTEXT" class="org.apache.xerces.impl.XMLDocumentScannerImpl" />
		<field name="DEFAULT_POOL_SIZE" class="org.apache.xerces.impl.XMLEntityManager$ByteBufferPool" />
		<field name="DEFAULT_POOL_SIZE" class="org.apache.xerces.impl.XMLEntityManager$CharacterBufferPool" />
		<field name="DEFAULT_BUFFER_SIZE" class="org.apache.xerces.impl.XMLEntityManager" />
		<field name="DEFAULT_XMLDECL_BUFFER_SIZE" class="org.apache.xerces.impl.XMLEntityManager" />
		<field name="DEFAULT_INTERNAL_BUFFER_SIZE" class="org.apache.xerces.impl.XMLEntityManager" />
		<field name="VALIDATION" class="org.apache.xerces.impl.XMLEntityManager" />
		<field name="EXTERNAL_GENERAL_ENTITIES" class="org.apache.xerces.impl.XMLEntityManager" />
		<field name="EXTERNAL_PARAMETER_ENTITIES" class="org.apache.xerces.impl.XMLEntityManager" />
		<field name="ALLOW_JAVA_ENCODINGS" class="org.apache.xerces.impl.XMLEntityManager" />
		<field name="WARN_ON_DUPLICATE_ENTITYDEF" class="org.apache.xerces.impl.XMLEntityManager" />
		<field name="STANDARD_URI_CONFORMANT" class="org.apache.xerces.impl.XMLEntityManager" />
		<field name="PARSER_SETTINGS" class="org.apache.xerces.impl.XMLEntityManager" />
		<field name="SYMBOL_TABLE" class="org.apache.xerces.impl.XMLEntityManager" />
		<field name="ERROR_REPORTER" class="org.apache.xerces.impl.XMLEntityManager" />
		<field name="ENTITY_RESOLVER" class="org.apache.xerces.impl.XMLEntityManager" />
		<field name="VALIDATION_MANAGER" class="org.apache.xerces.impl.XMLEntityManager" />
		<field name="BUFFER_SIZE" class="org.apache.xerces.impl.XMLEntityManager" />
		<field name="SECURITY_MANAGER" class="org.apache.xerces.impl.XMLEntityManager" />
		<field name="DEBUG_BUFFER" class="org.apache.xerces.impl.XMLEntityManager" />
		<field name="DEBUG_ENTITIES" class="org.apache.xerces.impl.XMLEntityManager" />
		<field name="DEBUG_ENCODINGS" class="org.apache.xerces.impl.XMLEntityManager" />
		<field name="DEBUG_RESOLVER" class="org.apache.xerces.impl.XMLEntityManager" />
		<field name="serialVersionUID" class="org.apache.xerces.impl.XMLEntityScanner$1" />
		<field name="DEBUG_ENCODINGS" class="org.apache.xerces.impl.XMLEntityScanner" />
		<field name="DEBUG_BUFFER" class="org.apache.xerces.impl.XMLEntityScanner" />
		<field name="SEVERITY_WARNING" class="org.apache.xerces.impl.XMLErrorReporter" />
		<field name="SEVERITY_ERROR" class="org.apache.xerces.impl.XMLErrorReporter" />
		<field name="SEVERITY_FATAL_ERROR" class="org.apache.xerces.impl.XMLErrorReporter" />
		<field name="CONTINUE_AFTER_FATAL_ERROR" class="org.apache.xerces.impl.XMLErrorReporter" />
		<field name="ERROR_HANDLER" class="org.apache.xerces.impl.XMLErrorReporter" />
		<field name="NAMESPACES" class="org.apache.xerces.impl.XMLNamespaceBinder" />
		<field name="SYMBOL_TABLE" class="org.apache.xerces.impl.XMLNamespaceBinder" />
		<field name="ERROR_REPORTER" class="org.apache.xerces.impl.XMLNamespaceBinder" />
		<field name="VALIDATION" class="org.apache.xerces.impl.XMLScanner" />
		<field name="NAMESPACES" class="org.apache.xerces.impl.XMLScanner" />
		<field name="NOTIFY_CHAR_REFS" class="org.apache.xerces.impl.XMLScanner" />
		<field name="PARSER_SETTINGS" class="org.apache.xerces.impl.XMLScanner" />
		<field name="SYMBOL_TABLE" class="org.apache.xerces.impl.XMLScanner" />
		<field name="ERROR_REPORTER" class="org.apache.xerces.impl.XMLScanner" />
		<field name="ENTITY_MANAGER" class="org.apache.xerces.impl.XMLScanner" />
		<field name="DEBUG_ATTR_NORMALIZATION" class="org.apache.xerces.impl.XMLScanner" />
		<field name="SYMBOL_TABLE" class="org.apache.xerces.impl.XMLVersionDetector" />
		<field name="ERROR_REPORTER" class="org.apache.xerces.impl.XMLVersionDetector" />
		<field name="ENTITY_MANAGER" class="org.apache.xerces.impl.XMLVersionDetector" />
		<field name="INITIAL_BUCKET_SIZE" class="org.apache.xerces.impl.dtd.DTDGrammar$QNameHashtable" />
		<field name="HASHTABLE_SIZE" class="org.apache.xerces.impl.dtd.DTDGrammar$QNameHashtable" />
		<field name="TOP_LEVEL_SCOPE" class="org.apache.xerces.impl.dtd.DTDGrammar" />
		<field name="CHUNK_SHIFT" class="org.apache.xerces.impl.dtd.DTDGrammar" />
		<field name="CHUNK_SIZE" class="org.apache.xerces.impl.dtd.DTDGrammar" />
		<field name="CHUNK_MASK" class="org.apache.xerces.impl.dtd.DTDGrammar" />
		<field name="INITIAL_CHUNK_COUNT" class="org.apache.xerces.impl.dtd.DTDGrammar" />
		<field name="LIST_FLAG" class="org.apache.xerces.impl.dtd.DTDGrammar" />
		<field name="LIST_MASK" class="org.apache.xerces.impl.dtd.DTDGrammar" />
		<field name="DEBUG" class="org.apache.xerces.impl.dtd.DTDGrammar" />
		<method signature="void putElementNameMapping(org.apache.xerces.xni.QName,int,int)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
		<method signature="void setFirstAttributeDeclIndex(int,int)" class="org.apache.xerces.impl.dtd.DTDGrammar" />
		<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable,org.apache.xerces.xni.grammars.XMLGrammarPool,org.apache.xerces.impl.XMLErrorReporter,org.apache.xerces.xni.parser.XMLEntityResolver)" class="org.apache.xerces.impl.dtd.XML11DTDProcessor" />
		<field name="DTD_VALIDATOR_PROPERTY" class="org.apache.xerces.impl.dtd.XML11DTDValidator" />
		<field name="CONTENTSPECNODE_LEAF" class="org.apache.xerces.impl.dtd.XMLContentSpec" />
		<field name="CONTENTSPECNODE_ZERO_OR_ONE" class="org.apache.xerces.impl.dtd.XMLContentSpec" />
		<field name="CONTENTSPECNODE_ZERO_OR_MORE" class="org.apache.xerces.impl.dtd.XMLContentSpec" />
		<field name="CONTENTSPECNODE_ONE_OR_MORE" class="org.apache.xerces.impl.dtd.XMLContentSpec" />
		<field name="CONTENTSPECNODE_CHOICE" class="org.apache.xerces.impl.dtd.XMLContentSpec" />
		<field name="CONTENTSPECNODE_SEQ" class="org.apache.xerces.impl.dtd.XMLContentSpec" />
		<field name="CONTENTSPECNODE_ANY" class="org.apache.xerces.impl.dtd.XMLContentSpec" />
		<field name="CONTENTSPECNODE_ANY_OTHER" class="org.apache.xerces.impl.dtd.XMLContentSpec" />
		<field name="CONTENTSPECNODE_ANY_LOCAL" class="org.apache.xerces.impl.dtd.XMLContentSpec" />
		<field name="CONTENTSPECNODE_ANY_LAX" class="org.apache.xerces.impl.dtd.XMLContentSpec" />
		<field name="CONTENTSPECNODE_ANY_OTHER_LAX" class="org.apache.xerces.impl.dtd.XMLContentSpec" />
		<field name="CONTENTSPECNODE_ANY_LOCAL_LAX" class="org.apache.xerces.impl.dtd.XMLContentSpec" />
		<field name="CONTENTSPECNODE_ANY_SKIP" class="org.apache.xerces.impl.dtd.XMLContentSpec" />
		<field name="CONTENTSPECNODE_ANY_OTHER_SKIP" class="org.apache.xerces.impl.dtd.XMLContentSpec" />
		<field name="CONTENTSPECNODE_ANY_LOCAL_SKIP" class="org.apache.xerces.impl.dtd.XMLContentSpec" />
		<field name="STANDARD_URI_CONFORMANT_FEATURE" class="org.apache.xerces.impl.dtd.XMLDTDLoader" />
		<field name="BALANCE_SYNTAX_TREES" class="org.apache.xerces.impl.dtd.XMLDTDLoader" />
		<field name="ERROR_HANDLER" class="org.apache.xerces.impl.dtd.XMLDTDLoader" />
		<field name="ENTITY_RESOLVER" class="org.apache.xerces.impl.dtd.XMLDTDLoader" />
		<field name="LOCALE" class="org.apache.xerces.impl.dtd.XMLDTDLoader" />
		<field name="TOP_LEVEL_SCOPE" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
		<field name="VALIDATION" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
		<field name="NOTIFY_CHAR_REFS" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
		<field name="WARN_ON_DUPLICATE_ATTDEF" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
		<field name="WARN_ON_UNDECLARED_ELEMDEF" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
		<field name="PARSER_SETTINGS" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
		<field name="SYMBOL_TABLE" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
		<field name="ERROR_REPORTER" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
		<field name="GRAMMAR_POOL" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
		<field name="DTD_VALIDATOR" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
		<field name="fLocale" class="org.apache.xerces.impl.dtd.XMLDTDProcessor" />
		<field name="TOP_LEVEL_SCOPE" class="org.apache.xerces.impl.dtd.XMLDTDValidator" />
		<field name="NAMESPACES" class="org.apache.xerces.impl.dtd.XMLDTDValidator" />
		<field name="VALIDATION" class="org.apache.xerces.impl.dtd.XMLDTDValidator" />
		<field name="DYNAMIC_VALIDATION" class="org.apache.xerces.impl.dtd.XMLDTDValidator" />
		<field name="BALANCE_SYNTAX_TREES" class="org.apache.xerces.impl.dtd.XMLDTDValidator" />
		<field name="WARN_ON_DUPLICATE_ATTDEF" class="org.apache.xerces.impl.dtd.XMLDTDValidator" />
		<field name="PARSER_SETTINGS" class="org.apache.xerces.impl.dtd.XMLDTDValidator" />
		<field name="SYMBOL_TABLE" class="org.apache.xerces.impl.dtd.XMLDTDValidator" />
		<field name="ERROR_REPORTER" class="org.apache.xerces.impl.dtd.XMLDTDValidator" />
		<field name="GRAMMAR_POOL" class="org.apache.xerces.impl.dtd.XMLDTDValidator" />
		<field name="DATATYPE_VALIDATOR_FACTORY" class="org.apache.xerces.impl.dtd.XMLDTDValidator" />
		<field name="VALIDATION_MANAGER" class="org.apache.xerces.impl.dtd.XMLDTDValidator" />
		<field name="DEBUG_ATTRIBUTES" class="org.apache.xerces.impl.dtd.XMLDTDValidator" />
		<field name="DEBUG_ELEMENT_CHILDREN" class="org.apache.xerces.impl.dtd.XMLDTDValidator" />
		<method signature="boolean invalidStandaloneAttDef(org.apache.xerces.xni.QName,org.apache.xerces.xni.QName)" class="org.apache.xerces.impl.dtd.XMLDTDValidator" />
		<method signature="int getContentSpecType(int)" class="org.apache.xerces.impl.dtd.XMLDTDValidator" />
		<field name="TYPE_ANY" class="org.apache.xerces.impl.dtd.XMLElementDecl" />
		<field name="TYPE_EMPTY" class="org.apache.xerces.impl.dtd.XMLElementDecl" />
		<field name="TYPE_MIXED" class="org.apache.xerces.impl.dtd.XMLElementDecl" />
		<field name="TYPE_CHILDREN" class="org.apache.xerces.impl.dtd.XMLElementDecl" />
		<field name="TYPE_SIMPLE" class="org.apache.xerces.impl.dtd.XMLElementDecl" />
		<field name="TYPE_CDATA" class="org.apache.xerces.impl.dtd.XMLSimpleType" />
		<field name="TYPE_ENTITY" class="org.apache.xerces.impl.dtd.XMLSimpleType" />
		<field name="TYPE_ENUMERATION" class="org.apache.xerces.impl.dtd.XMLSimpleType" />
		<field name="TYPE_ID" class="org.apache.xerces.impl.dtd.XMLSimpleType" />
		<field name="TYPE_IDREF" class="org.apache.xerces.impl.dtd.XMLSimpleType" />
		<field name="TYPE_NMTOKEN" class="org.apache.xerces.impl.dtd.XMLSimpleType" />
		<field name="TYPE_NOTATION" class="org.apache.xerces.impl.dtd.XMLSimpleType" />
		<field name="TYPE_NAMED" class="org.apache.xerces.impl.dtd.XMLSimpleType" />
		<field name="DEFAULT_TYPE_DEFAULT" class="org.apache.xerces.impl.dtd.XMLSimpleType" />
		<field name="DEFAULT_TYPE_FIXED" class="org.apache.xerces.impl.dtd.XMLSimpleType" />
		<field name="DEFAULT_TYPE_IMPLIED" class="org.apache.xerces.impl.dtd.XMLSimpleType" />
		<field name="DEFAULT_TYPE_REQUIRED" class="org.apache.xerces.impl.dtd.XMLSimpleType" />
		<method signature="int getType()" class="org.apache.xerces.impl.dtd.models.CMAny" />
		<method signature="void setPosition(int)" class="org.apache.xerces.impl.dtd.models.CMAny" />
		<method signature="int getPosition()" class="org.apache.xerces.impl.dtd.models.CMLeaf" />
		<method signature="void setFollowPos(org.apache.xerces.impl.dtd.models.CMStateSet)" class="org.apache.xerces.impl.dtd.models.CMNode" />
		<field name="DEBUG_VALIDATE_CONTENT" class="org.apache.xerces.impl.dtd.models.DFAContentModel" />
		<method signature="void dumpTree(org.apache.xerces.impl.dtd.models.CMNode,int)" class="org.apache.xerces.impl.dtd.models.DFAContentModel" />
		<field name="CHOICE" class="org.apache.xerces.impl.dtd.models.SimpleContentModel" />
		<field name="SEQUENCE" class="org.apache.xerces.impl.dtd.models.SimpleContentModel" />
		<field name="DEFAULT_FACTORY_CLASS" class="org.apache.xerces.impl.dv.DTDDVFactory" />
		<field name="serialVersionUID" class="org.apache.xerces.impl.dv.DVFactoryException" />
		<field name="serialVersionUID" class="org.apache.xerces.impl.dv.DatatypeException" />
		<field name="serialVersionUID" class="org.apache.xerces.impl.dv.InvalidDatatypeFacetException" />
		<field name="serialVersionUID" class="org.apache.xerces.impl.dv.InvalidDatatypeValueException" />
		<field name="serialVersionUID" class="org.apache.xerces.impl.dv.ObjectFactory$ConfigurationError" />
		<method signature="java.lang.Exception getException()" class="org.apache.xerces.impl.dv.ObjectFactory$ConfigurationError" />
		<field name="DEFAULT_PROPERTIES_FILENAME" class="org.apache.xerces.impl.dv.ObjectFactory" />
		<field name="DEFAULT_LINE_LENGTH" class="org.apache.xerces.impl.dv.ObjectFactory" />
		<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.ObjectFactory" />
		<method signature="java.lang.Object createObject(java.lang.String,java.lang.String)" class="org.apache.xerces.impl.dv.ObjectFactory" />
		<method signature="java.lang.Object createObject(java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.impl.dv.ObjectFactory" />
		<method signature="java.lang.Object findJarServiceProvider(java.lang.String)" class="org.apache.xerces.impl.dv.ObjectFactory" />
		<field name="DEFAULT_FACTORY_CLASS" class="org.apache.xerces.impl.dv.SchemaDVFactory" />
		<class name="org.apache.xerces.impl.dv.SecuritySupport$5" />
		<class name="org.apache.xerces.impl.dv.SecuritySupport$6" />
		<class name="org.apache.xerces.impl.dv.SecuritySupport$7" />
		<class name="org.apache.xerces.impl.dv.SecuritySupport$8" />
		<method signature="java.io.FileInputStream getFileInputStream(java.io.File)" class="org.apache.xerces.impl.dv.SecuritySupport" />
		<method signature="java.io.InputStream getResourceAsStream(java.lang.ClassLoader,java.lang.String)" class="org.apache.xerces.impl.dv.SecuritySupport" />
		<method signature="boolean getFileExists(java.io.File)" class="org.apache.xerces.impl.dv.SecuritySupport" />
		<method signature="long getLastModified(java.io.File)" class="org.apache.xerces.impl.dv.SecuritySupport" />
		<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.dv.SecuritySupport" />
		<field name="WS_PRESERVE" class="org.apache.xerces.impl.dv.XSSimpleType" />
		<field name="WS_REPLACE" class="org.apache.xerces.impl.dv.XSSimpleType" />
		<field name="WS_COLLAPSE" class="org.apache.xerces.impl.dv.XSSimpleType" />
		<field name="PRIMITIVE_STRING" class="org.apache.xerces.impl.dv.XSSimpleType" />
		<field name="PRIMITIVE_BOOLEAN" class="org.apache.xerces.impl.dv.XSSimpleType" />
		<field name="PRIMITIVE_DECIMAL" class="org.apache.xerces.impl.dv.XSSimpleType" />
		<field name="PRIMITIVE_FLOAT" class="org.apache.xerces.impl.dv.XSSimpleType" />
		<field name="PRIMITIVE_DOUBLE" class="org.apache.xerces.impl.dv.XSSimpleType" />
		<field name="PRIMITIVE_DURATION" class="org.apache.xerces.impl.dv.XSSimpleType" />
		<field name="PRIMITIVE_DATETIME" class="org.apache.xerces.impl.dv.XSSimpleType" />
		<field name="PRIMITIVE_TIME" class="org.apache.xerces.impl.dv.XSSimpleType" />
		<field name="PRIMITIVE_DATE" class="org.apache.xerces.impl.dv.XSSimpleType" />
		<field name="PRIMITIVE_GYEARMONTH" class="org.apache.xerces.impl.dv.XSSimpleType" />
		<field name="PRIMITIVE_GYEAR" class="org.apache.xerces.impl.dv.XSSimpleType" />
		<field name="PRIMITIVE_GMONTHDAY" class="org.apache.xerces.impl.dv.XSSimpleType" />
		<field name="PRIMITIVE_GDAY" class="org.apache.xerces.impl.dv.XSSimpleType" />
		<field name="PRIMITIVE_GMONTH" class="org.apache.xerces.impl.dv.XSSimpleType" />
		<field name="PRIMITIVE_HEXBINARY" class="org.apache.xerces.impl.dv.XSSimpleType" />
		<field name="PRIMITIVE_BASE64BINARY" class="org.apache.xerces.impl.dv.XSSimpleType" />
		<field name="PRIMITIVE_ANYURI" class="org.apache.xerces.impl.dv.XSSimpleType" />
		<field name="PRIMITIVE_QNAME" class="org.apache.xerces.impl.dv.XSSimpleType" />
		<field name="PRIMITIVE_PRECISIONDECIMAL" class="org.apache.xerces.impl.dv.XSSimpleType" />
		<field name="PRIMITIVE_NOTATION" class="org.apache.xerces.impl.dv.XSSimpleType" />
		<field name="BASELENGTH" class="org.apache.xerces.impl.dv.util.Base64" />
		<field name="LOOKUPLENGTH" class="org.apache.xerces.impl.dv.util.Base64" />
		<field name="TWENTYFOURBITGROUP" class="org.apache.xerces.impl.dv.util.Base64" />
		<field name="EIGHTBIT" class="org.apache.xerces.impl.dv.util.Base64" />
		<field name="SIXTEENBIT" class="org.apache.xerces.impl.dv.util.Base64" />
		<field name="SIXBIT" class="org.apache.xerces.impl.dv.util.Base64" />
		<field name="FOURBYTE" class="org.apache.xerces.impl.dv.util.Base64" />
		<field name="SIGN" class="org.apache.xerces.impl.dv.util.Base64" />
		<field name="PAD" class="org.apache.xerces.impl.dv.util.Base64" />
		<field name="fDebug" class="org.apache.xerces.impl.dv.util.Base64" />
		<method signature="boolean isBase64(char)" class="org.apache.xerces.impl.dv.util.Base64" />
		<field name="BASELENGTH" class="org.apache.xerces.impl.dv.util.HexBin" />
		<field name="LOOKUPLENGTH" class="org.apache.xerces.impl.dv.util.HexBin" />
		<field name="DEBUG" class="org.apache.xerces.impl.dv.xs.AbstractDateTimeDV" />
		<field name="YEAR" class="org.apache.xerces.impl.dv.xs.AbstractDateTimeDV" />
		<field name="MONTH" class="org.apache.xerces.impl.dv.xs.AbstractDateTimeDV" />
		<field name="DAY" class="org.apache.xerces.impl.dv.xs.AbstractDateTimeDV" />
		<field name="URI_SCHEMAFORSCHEMA" class="org.apache.xerces.impl.dv.xs.BaseDVFactory" />
		<field name="URI_SCHEMAFORSCHEMA" class="org.apache.xerces.impl.dv.xs.BaseSchemaDVFactory" />
		<field name="DAY_SIZE" class="org.apache.xerces.impl.dv.xs.DayDV" />
		<field name="DURATION_TYPE" class="org.apache.xerces.impl.dv.xs.DurationDV" />
		<field name="YEARMONTHDURATION_TYPE" class="org.apache.xerces.impl.dv.xs.DurationDV" />
		<field name="DAYTIMEDURATION_TYPE" class="org.apache.xerces.impl.dv.xs.DurationDV" />
		<field name="URI_SCHEMAFORSCHEMA" class="org.apache.xerces.impl.dv.xs.FullDVFactory" />
		<field name="MONTHDAY_SIZE" class="org.apache.xerces.impl.dv.xs.MonthDayDV" />
		<method signature="int compareFractionalPart(org.apache.xerces.impl.dv.xs.PrecisionDecimalDV$XPrecisionDecimal)" class="org.apache.xerces.impl.dv.xs.PrecisionDecimalDV$XPrecisionDecimal" />
		<field name="serialVersionUID" class="org.apache.xerces.impl.dv.xs.SchemaDateTimeException" />
		<field name="LESS_THAN" class="org.apache.xerces.impl.dv.xs.TypeValidator" />
		<field name="EQUAL" class="org.apache.xerces.impl.dv.xs.TypeValidator" />
		<field name="GREATER_THAN" class="org.apache.xerces.impl.dv.xs.TypeValidator" />
		<field name="INDETERMINATE" class="org.apache.xerces.impl.dv.xs.TypeValidator" />
		<field name="DV_STRING" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="DV_BOOLEAN" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="DV_DECIMAL" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="DV_FLOAT" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="DV_DOUBLE" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="DV_DURATION" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="DV_DATETIME" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="DV_TIME" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="DV_DATE" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="DV_GYEARMONTH" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="DV_GYEAR" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="DV_GMONTHDAY" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="DV_GDAY" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="DV_GMONTH" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="DV_HEXBINARY" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="DV_BASE64BINARY" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="DV_ANYURI" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="DV_QNAME" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="DV_PRECISIONDECIMAL" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="DV_NOTATION" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="DV_ANYSIMPLETYPE" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="DV_ID" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="DV_IDREF" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="DV_ENTITY" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="DV_INTEGER" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="DV_LIST" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="DV_UNION" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="DV_YEARMONTHDURATION" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="DV_DAYTIMEDURATION" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="DV_ANYATOMICTYPE" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="NORMALIZE_NONE" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="NORMALIZE_TRIM" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="NORMALIZE_FULL" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="SPECIAL_PATTERN_NONE" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="SPECIAL_PATTERN_NMTOKEN" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="SPECIAL_PATTERN_NAME" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="SPECIAL_PATTERN_NCNAME" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="URI_SCHEMAFORSCHEMA" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="ANY_TYPE" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="YEARMONTHDURATION_DT" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="DAYTIMEDURATION_DT" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="PRECISIONDECIMAL_DT" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="ANYATOMICTYPE_DT" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="DERIVATION_ANY" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="DERIVATION_RESTRICTION" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="DERIVATION_EXTENSION" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="DERIVATION_UNION" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="DERIVATION_LIST" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<method signature="org.apache.xerces.impl.dv.xs.TypeValidator[] getGDVs()" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<method signature="void setDVs(org.apache.xerces.impl.dv.xs.TypeValidator[])" class="org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl" />
		<field name="DEFAULT_BUFFER_SIZE" class="org.apache.xerces.impl.io.ASCIIReader" />
		<field name="DEFAULT_BUFFER_SIZE" class="org.apache.xerces.impl.io.Latin1Reader" />
		<field name="serialVersionUID" class="org.apache.xerces.impl.io.MalformedByteSequenceException" />
		<field name="DEFAULT_BUFFER_SIZE" class="org.apache.xerces.impl.io.UCSReader" />
		<field name="UCS2LE" class="org.apache.xerces.impl.io.UCSReader" />
		<field name="UCS2BE" class="org.apache.xerces.impl.io.UCSReader" />
		<field name="UCS4LE" class="org.apache.xerces.impl.io.UCSReader" />
		<field name="UCS4BE" class="org.apache.xerces.impl.io.UCSReader" />
		<field name="DEFAULT_BUFFER_SIZE" class="org.apache.xerces.impl.io.UTF16Reader" />
		<field name="DEFAULT_BUFFER_SIZE" class="org.apache.xerces.impl.io.UTF8Reader" />
		<field name="DEBUG_READ" class="org.apache.xerces.impl.io.UTF8Reader" />
		<field name="XML_DOMAIN" class="org.apache.xerces.impl.msg.XMLMessageFormatter" />
		<field name="XMLNS_DOMAIN" class="org.apache.xerces.impl.msg.XMLMessageFormatter" />
		<field name="CHILD" class="org.apache.xerces.impl.xpath.XPath$Axis" />
		<field name="ATTRIBUTE" class="org.apache.xerces.impl.xpath.XPath$Axis" />
		<field name="SELF" class="org.apache.xerces.impl.xpath.XPath$Axis" />
		<field name="DESCENDANT" class="org.apache.xerces.impl.xpath.XPath$Axis" />
		<field name="QNAME" class="org.apache.xerces.impl.xpath.XPath$NodeTest" />
		<field name="WILDCARD" class="org.apache.xerces.impl.xpath.XPath$NodeTest" />
		<field name="NODE" class="org.apache.xerces.impl.xpath.XPath$NodeTest" />
		<field name="NAMESPACE" class="org.apache.xerces.impl.xpath.XPath$NodeTest" />
		<field name="CHARTYPE_INVALID" class="org.apache.xerces.impl.xpath.XPath$Scanner" />
		<field name="CHARTYPE_OTHER" class="org.apache.xerces.impl.xpath.XPath$Scanner" />
		<field name="CHARTYPE_WHITESPACE" class="org.apache.xerces.impl.xpath.XPath$Scanner" />
		<field name="CHARTYPE_EXCLAMATION" class="org.apache.xerces.impl.xpath.XPath$Scanner" />
		<field name="CHARTYPE_QUOTE" class="org.apache.xerces.impl.xpath.XPath$Scanner" />
		<field name="CHARTYPE_DOLLAR" class="org.apache.xerces.impl.xpath.XPath$Scanner" />
		<field name="CHARTYPE_OPEN_PAREN" class="org.apache.xerces.impl.xpath.XPath$Scanner" />
		<field name="CHARTYPE_CLOSE_PAREN" class="org.apache.xerces.impl.xpath.XPath$Scanner" />
		<field name="CHARTYPE_STAR" class="org.apache.xerces.impl.xpath.XPath$Scanner" />
		<field name="CHARTYPE_PLUS" class="org.apache.xerces.impl.xpath.XPath$Scanner" />
		<field name="CHARTYPE_COMMA" class="org.apache.xerces.impl.xpath.XPath$Scanner" />
		<field name="CHARTYPE_MINUS" class="org.apache.xerces.impl.xpath.XPath$Scanner" />
		<field name="CHARTYPE_PERIOD" class="org.apache.xerces.impl.xpath.XPath$Scanner" />
		<field name="CHARTYPE_SLASH" class="org.apache.xerces.impl.xpath.XPath$Scanner" />
		<field name="CHARTYPE_DIGIT" class="org.apache.xerces.impl.xpath.XPath$Scanner" />
		<field name="CHARTYPE_COLON" class="org.apache.xerces.impl.xpath.XPath$Scanner" />
		<field name="CHARTYPE_LESS" class="org.apache.xerces.impl.xpath.XPath$Scanner" />
		<field name="CHARTYPE_EQUAL" class="org.apache.xerces.impl.xpath.XPath$Scanner" />
		<field name="CHARTYPE_GREATER" class="org.apache.xerces.impl.xpath.XPath$Scanner" />
		<field name="CHARTYPE_ATSIGN" class="org.apache.xerces.impl.xpath.XPath$Scanner" />
		<field name="CHARTYPE_LETTER" class="org.apache.xerces.impl.xpath.XPath$Scanner" />
		<field name="CHARTYPE_OPEN_BRACKET" class="org.apache.xerces.impl.xpath.XPath$Scanner" />
		<field name="CHARTYPE_CLOSE_BRACKET" class="org.apache.xerces.impl.xpath.XPath$Scanner" />
		<field name="CHARTYPE_UNDERSCORE" class="org.apache.xerces.impl.xpath.XPath$Scanner" />
		<field name="CHARTYPE_UNION" class="org.apache.xerces.impl.xpath.XPath$Scanner" />
		<field name="CHARTYPE_NONASCII" class="org.apache.xerces.impl.xpath.XPath$Scanner" />
		<field name="DUMP_TOKENS" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_OPEN_PAREN" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_CLOSE_PAREN" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_OPEN_BRACKET" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_CLOSE_BRACKET" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_PERIOD" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_DOUBLE_PERIOD" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_ATSIGN" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_COMMA" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_DOUBLE_COLON" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_NAMETEST_ANY" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_NAMETEST_NAMESPACE" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_NAMETEST_QNAME" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_NODETYPE_COMMENT" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_NODETYPE_TEXT" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_NODETYPE_PI" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_NODETYPE_NODE" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_OPERATOR_AND" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_OPERATOR_OR" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_OPERATOR_MOD" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_OPERATOR_DIV" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_OPERATOR_MULT" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_OPERATOR_SLASH" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_OPERATOR_DOUBLE_SLASH" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_OPERATOR_UNION" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_OPERATOR_PLUS" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_OPERATOR_MINUS" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_OPERATOR_EQUAL" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_OPERATOR_NOT_EQUAL" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_OPERATOR_LESS" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_OPERATOR_LESS_EQUAL" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_OPERATOR_GREATER" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_OPERATOR_GREATER_EQUAL" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_FUNCTION_NAME" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_AXISNAME_ANCESTOR" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_AXISNAME_ANCESTOR_OR_SELF" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_AXISNAME_ATTRIBUTE" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_AXISNAME_CHILD" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_AXISNAME_DESCENDANT" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_AXISNAME_DESCENDANT_OR_SELF" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_AXISNAME_FOLLOWING" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_AXISNAME_FOLLOWING_SIBLING" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_AXISNAME_NAMESPACE" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_AXISNAME_PARENT" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_AXISNAME_PRECEDING" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_AXISNAME_PRECEDING_SIBLING" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_AXISNAME_SELF" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_LITERAL" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_NUMBER" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="EXPRTOKEN_VARIABLE_REFERENCE" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="INITIAL_TOKEN_COUNT" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<method signature="void rewind()" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<method signature="void dumpTokens()" class="org.apache.xerces.impl.xpath.XPath$Tokens" />
		<field name="DEBUG_ALL" class="org.apache.xerces.impl.xpath.XPath" />
		<field name="DEBUG_XPATH_PARSE" class="org.apache.xerces.impl.xpath.XPath" />
		<field name="DEBUG_ANY" class="org.apache.xerces.impl.xpath.XPath" />
		<field name="serialVersionUID" class="org.apache.xerces.impl.xpath.XPathException" />
		<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xpath.regex.CaseInsensitiveMap" />
		<field name="DOT" class="org.apache.xerces.impl.xpath.regex.Op" />
		<field name="CHAR" class="org.apache.xerces.impl.xpath.regex.Op" />
		<field name="RANGE" class="org.apache.xerces.impl.xpath.regex.Op" />
		<field name="NRANGE" class="org.apache.xerces.impl.xpath.regex.Op" />
		<field name="ANCHOR" class="org.apache.xerces.impl.xpath.regex.Op" />
		<field name="STRING" class="org.apache.xerces.impl.xpath.regex.Op" />
		<field name="CLOSURE" class="org.apache.xerces.impl.xpath.regex.Op" />
		<field name="NONGREEDYCLOSURE" class="org.apache.xerces.impl.xpath.regex.Op" />
		<field name="QUESTION" class="org.apache.xerces.impl.xpath.regex.Op" />
		<field name="NONGREEDYQUESTION" class="org.apache.xerces.impl.xpath.regex.Op" />
		<field name="UNION" class="org.apache.xerces.impl.xpath.regex.Op" />
		<field name="CAPTURE" class="org.apache.xerces.impl.xpath.regex.Op" />
		<field name="BACKREFERENCE" class="org.apache.xerces.impl.xpath.regex.Op" />
		<field name="LOOKAHEAD" class="org.apache.xerces.impl.xpath.regex.Op" />
		<field name="NEGATIVELOOKAHEAD" class="org.apache.xerces.impl.xpath.regex.Op" />
		<field name="LOOKBEHIND" class="org.apache.xerces.impl.xpath.regex.Op" />
		<field name="NEGATIVELOOKBEHIND" class="org.apache.xerces.impl.xpath.regex.Op" />
		<field name="INDEPENDENT" class="org.apache.xerces.impl.xpath.regex.Op" />
		<field name="MODIFIER" class="org.apache.xerces.impl.xpath.regex.Op" />
		<field name="CONDITION" class="org.apache.xerces.impl.xpath.regex.Op" />
		<field name="COUNT" class="org.apache.xerces.impl.xpath.regex.Op" />
		<field name="serialVersionUID" class="org.apache.xerces.impl.xpath.regex.ParseException" />
		<field name="SPACES" class="org.apache.xerces.impl.xpath.regex.ParserForXMLSchema" />
		<field name="NAMECHARS" class="org.apache.xerces.impl.xpath.regex.ParserForXMLSchema" />
		<field name="LETTERS" class="org.apache.xerces.impl.xpath.regex.ParserForXMLSchema" />
		<field name="DIGITS" class="org.apache.xerces.impl.xpath.regex.ParserForXMLSchema" />
		<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xpath.regex.ParserForXMLSchema" />
		<field name="CACHESIZE" class="org.apache.xerces.impl.xpath.regex.REUtil" />
		<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xpath.regex.REUtil" />
		<method signature="void dumpString(java.lang.String)" class="org.apache.xerces.impl.xpath.regex.REUtil" />
		<field name="serialVersionUID" class="org.apache.xerces.impl.xpath.regex.RangeToken" />
		<field name="MAPSIZE" class="org.apache.xerces.impl.xpath.regex.RangeToken" />
		<method signature="org.apache.xerces.impl.xpath.regex.RangeToken getCaseInsensitiveToken()" class="org.apache.xerces.impl.xpath.regex.RangeToken" />
		<method signature="void dumpRanges()" class="org.apache.xerces.impl.xpath.regex.RangeToken" />
		<field name="T_CHAR" class="org.apache.xerces.impl.xpath.regex.RegexParser" />
		<field name="T_EOF" class="org.apache.xerces.impl.xpath.regex.RegexParser" />
		<field name="T_OR" class="org.apache.xerces.impl.xpath.regex.RegexParser" />
		<field name="T_STAR" class="org.apache.xerces.impl.xpath.regex.RegexParser" />
		<field name="T_PLUS" class="org.apache.xerces.impl.xpath.regex.RegexParser" />
		<field name="T_QUESTION" class="org.apache.xerces.impl.xpath.regex.RegexParser" />
		<field name="T_LPAREN" class="org.apache.xerces.impl.xpath.regex.RegexParser" />
		<field name="T_RPAREN" class="org.apache.xerces.impl.xpath.regex.RegexParser" />
		<field name="T_DOT" class="org.apache.xerces.impl.xpath.regex.RegexParser" />
		<field name="T_LBRACKET" class="org.apache.xerces.impl.xpath.regex.RegexParser" />
		<field name="T_BACKSOLIDUS" class="org.apache.xerces.impl.xpath.regex.RegexParser" />
		<field name="T_CARET" class="org.apache.xerces.impl.xpath.regex.RegexParser" />
		<field name="T_DOLLAR" class="org.apache.xerces.impl.xpath.regex.RegexParser" />
		<field name="T_LPAREN2" class="org.apache.xerces.impl.xpath.regex.RegexParser" />
		<field name="T_LOOKAHEAD" class="org.apache.xerces.impl.xpath.regex.RegexParser" />
		<field name="T_NEGATIVELOOKAHEAD" class="org.apache.xerces.impl.xpath.regex.RegexParser" />
		<field name="T_LOOKBEHIND" class="org.apache.xerces.impl.xpath.regex.RegexParser" />
		<field name="T_NEGATIVELOOKBEHIND" class="org.apache.xerces.impl.xpath.regex.RegexParser" />
		<field name="T_INDEPENDENT" class="org.apache.xerces.impl.xpath.regex.RegexParser" />
		<field name="T_SET_OPERATIONS" class="org.apache.xerces.impl.xpath.regex.RegexParser" />
		<field name="T_POSIX_CHARCLASS_START" class="org.apache.xerces.impl.xpath.regex.RegexParser" />
		<field name="T_COMMENT" class="org.apache.xerces.impl.xpath.regex.RegexParser" />
		<field name="T_MODIFIERS" class="org.apache.xerces.impl.xpath.regex.RegexParser" />
		<field name="T_CONDITION" class="org.apache.xerces.impl.xpath.regex.RegexParser" />
		<field name="T_XMLSCHEMA_CC_SUBTRACTION" class="org.apache.xerces.impl.xpath.regex.RegexParser" />
		<field name="S_NORMAL" class="org.apache.xerces.impl.xpath.regex.RegexParser" />
		<field name="S_INBRACKETS" class="org.apache.xerces.impl.xpath.regex.RegexParser" />
		<field name="S_INXBRACKETS" class="org.apache.xerces.impl.xpath.regex.RegexParser" />
		<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xpath.regex.RegexParser" />
		<field name="serialVersionUID" class="org.apache.xerces.impl.xpath.regex.RegularExpression" />
		<field name="DEBUG" class="org.apache.xerces.impl.xpath.regex.RegularExpression" />
		<field name="IGNORE_CASE" class="org.apache.xerces.impl.xpath.regex.RegularExpression" />
		<field name="SINGLE_LINE" class="org.apache.xerces.impl.xpath.regex.RegularExpression" />
		<field name="MULTIPLE_LINES" class="org.apache.xerces.impl.xpath.regex.RegularExpression" />
		<field name="EXTENDED_COMMENT" class="org.apache.xerces.impl.xpath.regex.RegularExpression" />
		<field name="USE_UNICODE_CATEGORY" class="org.apache.xerces.impl.xpath.regex.RegularExpression" />
		<field name="UNICODE_WORD_BOUNDARY" class="org.apache.xerces.impl.xpath.regex.RegularExpression" />
		<field name="PROHIBIT_HEAD_CHARACTER_OPTIMIZATION" class="org.apache.xerces.impl.xpath.regex.RegularExpression" />
		<field name="PROHIBIT_FIXED_STRING_OPTIMIZATION" class="org.apache.xerces.impl.xpath.regex.RegularExpression" />
		<field name="XMLSCHEMA_MODE" class="org.apache.xerces.impl.xpath.regex.RegularExpression" />
		<field name="SPECIAL_COMMA" class="org.apache.xerces.impl.xpath.regex.RegularExpression" />
		<field name="WT_IGNORE" class="org.apache.xerces.impl.xpath.regex.RegularExpression" />
		<field name="WT_LETTER" class="org.apache.xerces.impl.xpath.regex.RegularExpression" />
		<field name="WT_OTHER" class="org.apache.xerces.impl.xpath.regex.RegularExpression" />
		<field name="LINE_FEED" class="org.apache.xerces.impl.xpath.regex.RegularExpression" />
		<field name="CARRIAGE_RETURN" class="org.apache.xerces.impl.xpath.regex.RegularExpression" />
		<field name="LINE_SEPARATOR" class="org.apache.xerces.impl.xpath.regex.RegularExpression" />
		<field name="PARAGRAPH_SEPARATOR" class="org.apache.xerces.impl.xpath.regex.RegularExpression" />
		<method signature="void &lt;init&gt;(java.lang.String,org.apache.xerces.impl.xpath.regex.Token,int,boolean,int)" class="org.apache.xerces.impl.xpath.regex.RegularExpression" />
		<field name="serialVersionUID" class="org.apache.xerces.impl.xpath.regex.Token$CharToken" />
		<method signature="boolean match(int)" class="org.apache.xerces.impl.xpath.regex.Token$CharToken" />
		<field name="serialVersionUID" class="org.apache.xerces.impl.xpath.regex.Token$ClosureToken" />
		<field name="serialVersionUID" class="org.apache.xerces.impl.xpath.regex.Token$ConcatToken" />
		<field name="serialVersionUID" class="org.apache.xerces.impl.xpath.regex.Token$ConditionToken" />
		<field name="serialVersionUID" class="org.apache.xerces.impl.xpath.regex.Token$ModifierToken" />
		<field name="serialVersionUID" class="org.apache.xerces.impl.xpath.regex.Token$ParenToken" />
		<field name="serialVersionUID" class="org.apache.xerces.impl.xpath.regex.Token$StringToken" />
		<field name="serialVersionUID" class="org.apache.xerces.impl.xpath.regex.Token$UnionToken" />
		<field name="serialVersionUID" class="org.apache.xerces.impl.xpath.regex.Token" />
		<field name="COUNTTOKENS" class="org.apache.xerces.impl.xpath.regex.Token" />
		<field name="CHAR" class="org.apache.xerces.impl.xpath.regex.Token" />
		<field name="DOT" class="org.apache.xerces.impl.xpath.regex.Token" />
		<field name="CONCAT" class="org.apache.xerces.impl.xpath.regex.Token" />
		<field name="UNION" class="org.apache.xerces.impl.xpath.regex.Token" />
		<field name="CLOSURE" class="org.apache.xerces.impl.xpath.regex.Token" />
		<field name="RANGE" class="org.apache.xerces.impl.xpath.regex.Token" />
		<field name="NRANGE" class="org.apache.xerces.impl.xpath.regex.Token" />
		<field name="PAREN" class="org.apache.xerces.impl.xpath.regex.Token" />
		<field name="EMPTY" class="org.apache.xerces.impl.xpath.regex.Token" />
		<field name="ANCHOR" class="org.apache.xerces.impl.xpath.regex.Token" />
		<field name="NONGREEDYCLOSURE" class="org.apache.xerces.impl.xpath.regex.Token" />
		<field name="STRING" class="org.apache.xerces.impl.xpath.regex.Token" />
		<field name="BACKREFERENCE" class="org.apache.xerces.impl.xpath.regex.Token" />
		<field name="LOOKAHEAD" class="org.apache.xerces.impl.xpath.regex.Token" />
		<field name="NEGATIVELOOKAHEAD" class="org.apache.xerces.impl.xpath.regex.Token" />
		<field name="LOOKBEHIND" class="org.apache.xerces.impl.xpath.regex.Token" />
		<field name="NEGATIVELOOKBEHIND" class="org.apache.xerces.impl.xpath.regex.Token" />
		<field name="INDEPENDENT" class="org.apache.xerces.impl.xpath.regex.Token" />
		<field name="MODIFIERGROUP" class="org.apache.xerces.impl.xpath.regex.Token" />
		<field name="CONDITION" class="org.apache.xerces.impl.xpath.regex.Token" />
		<field name="UTF16_MAX" class="org.apache.xerces.impl.xpath.regex.Token" />
		<field name="FC_CONTINUE" class="org.apache.xerces.impl.xpath.regex.Token" />
		<field name="FC_TERMINAL" class="org.apache.xerces.impl.xpath.regex.Token" />
		<field name="FC_ANY" class="org.apache.xerces.impl.xpath.regex.Token" />
		<field name="CHAR_INIT_QUOTE" class="org.apache.xerces.impl.xpath.regex.Token" />
		<field name="CHAR_FINAL_QUOTE" class="org.apache.xerces.impl.xpath.regex.Token" />
		<field name="CHAR_LETTER" class="org.apache.xerces.impl.xpath.regex.Token" />
		<field name="CHAR_MARK" class="org.apache.xerces.impl.xpath.regex.Token" />
		<field name="CHAR_NUMBER" class="org.apache.xerces.impl.xpath.regex.Token" />
		<field name="CHAR_SEPARATOR" class="org.apache.xerces.impl.xpath.regex.Token" />
		<field name="CHAR_OTHER" class="org.apache.xerces.impl.xpath.regex.Token" />
		<field name="CHAR_PUNCTUATION" class="org.apache.xerces.impl.xpath.regex.Token" />
		<field name="CHAR_SYMBOL" class="org.apache.xerces.impl.xpath.regex.Token" />
		<field name="blockRanges" class="org.apache.xerces.impl.xpath.regex.Token" />
		<field name="NONBMP_BLOCK_START" class="org.apache.xerces.impl.xpath.regex.Token" />
		<field name="viramaString" class="org.apache.xerces.impl.xpath.regex.Token" />
		<method signature="void sortRanges()" class="org.apache.xerces.impl.xpath.regex.Token" />
		<method signature="void compactRanges()" class="org.apache.xerces.impl.xpath.regex.Token" />
		<method signature="void intersectRanges(org.apache.xerces.impl.xpath.regex.Token)" class="org.apache.xerces.impl.xpath.regex.Token" />
		<method signature="int getMaxLength()" class="org.apache.xerces.impl.xpath.regex.Token" />
		<method signature="boolean match(int)" class="org.apache.xerces.impl.xpath.regex.Token" />
		<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xs.FilePathToURI" />
		<method signature="void setValues(java.lang.String,java.lang.String,org.apache.xerces.impl.dv.XSSimpleType,short,short,org.apache.xerces.impl.dv.ValidatedInfo,org.apache.xerces.impl.xs.XSComplexTypeDecl)" class="org.apache.xerces.impl.xs.SchemaGrammar$BuiltinAttrDecl" />
		<field name="EXTENDED_SCHEMA_FACTORY_CLASS" class="org.apache.xerces.impl.xs.SchemaGrammar$BuiltinSchemaGrammar" />
		<method signature="void setValues(java.lang.String,java.lang.String,org.apache.xerces.xs.XSTypeDefinition,short,short,short,short,boolean,org.apache.xerces.impl.xs.XSAttributeGroupDecl,org.apache.xerces.impl.dv.XSSimpleType,org.apache.xerces.impl.xs.XSParticleDecl)" class="org.apache.xerces.impl.xs.SchemaGrammar$XSAnyType" />
		<field name="BASICSET_COUNT" class="org.apache.xerces.impl.xs.SchemaGrammar" />
		<field name="FULLSET_COUNT" class="org.apache.xerces.impl.xs.SchemaGrammar" />
		<field name="GRAMMAR_XS" class="org.apache.xerces.impl.xs.SchemaGrammar" />
		<field name="GRAMMAR_XSI" class="org.apache.xerces.impl.xs.SchemaGrammar" />
		<field name="INITIAL_SIZE" class="org.apache.xerces.impl.xs.SchemaGrammar" />
		<field name="INC_SIZE" class="org.apache.xerces.impl.xs.SchemaGrammar" />
		<field name="REDEFINED_GROUP_INIT_SIZE" class="org.apache.xerces.impl.xs.SchemaGrammar" />
		<field name="MAX_COMP_IDX" class="org.apache.xerces.impl.xs.SchemaGrammar" />
		<field name="ATTVAL_TWOPOUNDANY" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_TWOPOUNDLOCAL" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_TWOPOUNDOTHER" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_TWOPOUNDTARGETNS" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_POUNDALL" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_FALSE_0" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_TRUE_1" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_ANYSIMPLETYPE" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_ANYTYPE" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_ANYURI" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_BASE64BINARY" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_BOOLEAN" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_BYTE" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_COLLAPSE" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_DATE" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_DATETIME" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_DAY" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_DECIMAL" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_DOUBLE" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_DURATION" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_ENTITY" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_ENTITIES" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_EXTENSION" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_FALSE" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_FLOAT" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_HEXBINARY" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_ID" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_IDREF" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_IDREFS" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_INT" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_INTEGER" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_LANGUAGE" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_LAX" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_LIST" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_LONG" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_NAME" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_NEGATIVEINTEGER" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_MONTH" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_MONTHDAY" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_NCNAME" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_NMTOKEN" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_NMTOKENS" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_NONNEGATIVEINTEGER" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_NONPOSITIVEINTEGER" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_NORMALIZEDSTRING" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_NOTATION" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_OPTIONAL" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_POSITIVEINTEGER" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_PRESERVE" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_PROHIBITED" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_QNAME" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_QUALIFIED" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_REPLACE" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_REQUIRED" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_RESTRICTION" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_SHORT" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_SKIP" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_STRICT" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_STRING" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_SUBSTITUTION" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_TIME" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_TOKEN" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_TRUE" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_UNBOUNDED" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_UNION" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_UNQUALIFIED" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_UNSIGNEDBYTE" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_UNSIGNEDINT" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_UNSIGNEDLONG" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_UNSIGNEDSHORT" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_YEAR" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="ATTVAL_YEARMONTH" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="FORM_UNQUALIFIED" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="FORM_QUALIFIED" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="USE_OPTIONAL" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="USE_REQUIRED" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="USE_PROHIBITED" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="OCCURRENCE_UNBOUNDED" class="org.apache.xerces.impl.xs.SchemaSymbols" />
		<field name="serialVersionUID" class="org.apache.xerces.impl.xs.XMLSchemaException" />
		<method signature="int getLength()" class="org.apache.xerces.impl.xs.XMLSchemaLoader$LocationArray" />
		<field name="SCHEMA_FULL_CHECKING" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
		<field name="CONTINUE_AFTER_FATAL_ERROR" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
		<field name="ALLOW_JAVA_ENCODINGS" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
		<field name="STANDARD_URI_CONFORMANT_FEATURE" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
		<field name="VALIDATE_ANNOTATIONS" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
		<field name="DISALLOW_DOCTYPE" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
		<field name="GENERATE_SYNTHETIC_ANNOTATIONS" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
		<field name="HONOUR_ALL_SCHEMALOCATIONS" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
		<field name="AUGMENT_PSVI" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
		<field name="PARSER_SETTINGS" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
		<field name="NAMESPACE_GROWTH" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
		<field name="TOLERATE_DUPLICATES" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
		<field name="SCHEMA_DV_FACTORY" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
		<field name="SYMBOL_TABLE" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
		<field name="ERROR_REPORTER" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
		<field name="ERROR_HANDLER" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
		<field name="ENTITY_RESOLVER" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
		<field name="XMLGRAMMAR_POOL" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
		<field name="SCHEMA_LOCATION" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
		<field name="SCHEMA_NONS_LOCATION" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
		<field name="JAXP_SCHEMA_SOURCE" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
		<field name="SECURITY_MANAGER" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
		<field name="LOCALE" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
		<field name="ENTITY_MANAGER" class="org.apache.xerces.impl.xs.XMLSchemaLoader" />
		<field name="DEBUG" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
		<field name="VALIDATION" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
		<field name="SCHEMA_VALIDATION" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
		<field name="SCHEMA_FULL_CHECKING" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
		<field name="DYNAMIC_VALIDATION" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
		<field name="NORMALIZE_DATA" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
		<field name="SCHEMA_ELEMENT_DEFAULT" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
		<field name="SCHEMA_AUGMENT_PSVI" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
		<field name="ALLOW_JAVA_ENCODINGS" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
		<field name="STANDARD_URI_CONFORMANT_FEATURE" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
		<field name="GENERATE_SYNTHETIC_ANNOTATIONS" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
		<field name="VALIDATE_ANNOTATIONS" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
		<field name="HONOUR_ALL_SCHEMALOCATIONS" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
		<field name="USE_GRAMMAR_POOL_ONLY" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
		<field name="CONTINUE_AFTER_FATAL_ERROR" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
		<field name="PARSER_SETTINGS" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
		<field name="NAMESPACE_GROWTH" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
		<field name="TOLERATE_DUPLICATES" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
		<field name="IGNORE_XSI_TYPE" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
		<field name="ID_IDREF_CHECKING" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
		<field name="UNPARSED_ENTITY_CHECKING" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
		<field name="IDENTITY_CONSTRAINT_CHECKING" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
		<field name="SYMBOL_TABLE" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
		<field name="ERROR_REPORTER" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
		<field name="ENTITY_RESOLVER" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
		<field name="XMLGRAMMAR_POOL" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
		<field name="VALIDATION_MANAGER" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
		<field name="ENTITY_MANAGER" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
		<field name="SCHEMA_LOCATION" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
		<field name="SCHEMA_NONS_LOCATION" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
		<field name="JAXP_SCHEMA_SOURCE" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
		<field name="JAXP_SCHEMA_LANGUAGE" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
		<field name="ROOT_TYPE_DEF" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
		<field name="ROOT_ELEMENT_DECL" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
		<field name="SCHEMA_DV_FACTORY" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
		<field name="ID_CONSTRAINT_NUM" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
		<field name="INITIAL_STACK_SIZE" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
		<field name="INC_STACK_SIZE" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
		<field name="DEBUG_NORMALIZATION" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
		<field name="BUFFER_SIZE" class="org.apache.xerces.impl.xs.XMLSchemaValidator" />
		<field name="SCOPE_ABSENT" class="org.apache.xerces.impl.xs.XSAttributeDecl" />
		<field name="SCOPE_GLOBAL" class="org.apache.xerces.impl.xs.XSAttributeDecl" />
		<field name="SCOPE_LOCAL" class="org.apache.xerces.impl.xs.XSAttributeDecl" />
		<field name="INITIAL_SIZE" class="org.apache.xerces.impl.xs.XSAttributeGroupDecl" />
		<field name="DERIVATION_ANY" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
		<field name="DERIVATION_RESTRICTION" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
		<field name="DERIVATION_EXTENSION" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
		<field name="DERIVATION_UNION" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
		<field name="DERIVATION_LIST" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
		<field name="CT_IS_ABSTRACT" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
		<field name="CT_HAS_TYPE_ID" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
		<field name="CT_IS_ANONYMOUS" class="org.apache.xerces.impl.xs.XSComplexTypeDecl" />
		<field name="OCCURRENCE_UNKNOWN" class="org.apache.xerces.impl.xs.XSConstraints" />
		<field name="CONTEXT_INITIALIZE" class="org.apache.xerces.impl.xs.XSDDescription" />
		<field name="CONTEXT_INCLUDE" class="org.apache.xerces.impl.xs.XSDDescription" />
		<field name="CONTEXT_REDEFINE" class="org.apache.xerces.impl.xs.XSDDescription" />
		<field name="CONTEXT_IMPORT" class="org.apache.xerces.impl.xs.XSDDescription" />
		<field name="CONTEXT_PREPARSE" class="org.apache.xerces.impl.xs.XSDDescription" />
		<field name="CONTEXT_INSTANCE" class="org.apache.xerces.impl.xs.XSDDescription" />
		<field name="CONTEXT_ELEMENT" class="org.apache.xerces.impl.xs.XSDDescription" />
		<field name="CONTEXT_ATTRIBUTE" class="org.apache.xerces.impl.xs.XSDDescription" />
		<field name="CONTEXT_XSITYPE" class="org.apache.xerces.impl.xs.XSDDescription" />
		<field name="CHUNK_SHIFT" class="org.apache.xerces.impl.xs.XSDeclarationPool" />
		<field name="CHUNK_SIZE" class="org.apache.xerces.impl.xs.XSDeclarationPool" />
		<field name="CHUNK_MASK" class="org.apache.xerces.impl.xs.XSDeclarationPool" />
		<field name="INITIAL_CHUNK_COUNT" class="org.apache.xerces.impl.xs.XSDeclarationPool" />
		<field name="SCOPE_ABSENT" class="org.apache.xerces.impl.xs.XSElementDecl" />
		<field name="SCOPE_GLOBAL" class="org.apache.xerces.impl.xs.XSElementDecl" />
		<field name="SCOPE_LOCAL" class="org.apache.xerces.impl.xs.XSElementDecl" />
		<field name="INITIAL_SIZE" class="org.apache.xerces.impl.xs.XSElementDecl" />
		<field name="CONSTRAINT_MASK" class="org.apache.xerces.impl.xs.XSElementDecl" />
		<field name="NILLABLE" class="org.apache.xerces.impl.xs.XSElementDecl" />
		<field name="ABSTRACT" class="org.apache.xerces.impl.xs.XSElementDecl" />
		<field name="SCHEMA_DOMAIN" class="org.apache.xerces.impl.xs.XSMessageFormatter" />
		<field name="MODELGROUP_CHOICE" class="org.apache.xerces.impl.xs.XSModelGroupImpl" />
		<field name="MODELGROUP_SEQUENCE" class="org.apache.xerces.impl.xs.XSModelGroupImpl" />
		<field name="MODELGROUP_ALL" class="org.apache.xerces.impl.xs.XSModelGroupImpl" />
		<field name="MAX_COMP_IDX" class="org.apache.xerces.impl.xs.XSModelImpl" />
		<method signature="org.apache.xerces.util.SymbolHash buildSubGroups_Org()" class="org.apache.xerces.impl.xs.XSModelImpl" />
		<field name="PARTICLE_EMPTY" class="org.apache.xerces.impl.xs.XSParticleDecl" />
		<field name="PARTICLE_ELEMENT" class="org.apache.xerces.impl.xs.XSParticleDecl" />
		<field name="PARTICLE_WILDCARD" class="org.apache.xerces.impl.xs.XSParticleDecl" />
		<field name="PARTICLE_MODELGROUP" class="org.apache.xerces.impl.xs.XSParticleDecl" />
		<field name="PARTICLE_ZERO_OR_MORE" class="org.apache.xerces.impl.xs.XSParticleDecl" />
		<field name="PARTICLE_ZERO_OR_ONE" class="org.apache.xerces.impl.xs.XSParticleDecl" />
		<field name="PARTICLE_ONE_OR_MORE" class="org.apache.xerces.impl.xs.XSParticleDecl" />
		<field name="fIDConstraint" class="org.apache.xerces.impl.xs.identity.Selector" />
		<field name="DEBUG_ALL" class="org.apache.xerces.impl.xs.identity.XPathMatcher" />
		<field name="DEBUG_METHODS" class="org.apache.xerces.impl.xs.identity.XPathMatcher" />
		<field name="DEBUG_METHODS2" class="org.apache.xerces.impl.xs.identity.XPathMatcher" />
		<field name="DEBUG_METHODS3" class="org.apache.xerces.impl.xs.identity.XPathMatcher" />
		<field name="DEBUG_MATCH" class="org.apache.xerces.impl.xs.identity.XPathMatcher" />
		<field name="DEBUG_STACK" class="org.apache.xerces.impl.xs.identity.XPathMatcher" />
		<field name="DEBUG_ANY" class="org.apache.xerces.impl.xs.identity.XPathMatcher" />
		<field name="MATCHED" class="org.apache.xerces.impl.xs.identity.XPathMatcher" />
		<field name="MATCHED_ATTRIBUTE" class="org.apache.xerces.impl.xs.identity.XPathMatcher" />
		<field name="MATCHED_DESCENDANT" class="org.apache.xerces.impl.xs.identity.XPathMatcher" />
		<field name="MATCHED_DESCENDANT_PREVIOUS" class="org.apache.xerces.impl.xs.identity.XPathMatcher" />
		<method signature="java.lang.String normalize(java.lang.String)" class="org.apache.xerces.impl.xs.identity.XPathMatcher" />
		<field name="ERROR_REPORTER" class="org.apache.xerces.impl.xs.models.CMNodeFactory" />
		<field name="SECURITY_MANAGER" class="org.apache.xerces.impl.xs.models.CMNodeFactory" />
		<field name="DEBUG" class="org.apache.xerces.impl.xs.models.CMNodeFactory" />
		<field name="MULTIPLICITY" class="org.apache.xerces.impl.xs.models.CMNodeFactory" />
		<field name="STATE_START" class="org.apache.xerces.impl.xs.models.XSAllCM" />
		<field name="STATE_VALID" class="org.apache.xerces.impl.xs.models.XSAllCM" />
		<field name="STATE_CHILD" class="org.apache.xerces.impl.xs.models.XSAllCM" />
		<method signature="void setPosition(int)" class="org.apache.xerces.impl.xs.models.XSCMLeaf" />
		<field name="FIRST_ERROR" class="org.apache.xerces.impl.xs.models.XSCMValidator" />
		<field name="SUBSEQUENT_ERROR" class="org.apache.xerces.impl.xs.models.XSCMValidator" />
		<field name="DEBUG" class="org.apache.xerces.impl.xs.models.XSDFACM" />
		<field name="DEBUG_VALIDATE_CONTENT" class="org.apache.xerces.impl.xs.models.XSDFACM" />
		<method signature="void dumpTree(org.apache.xerces.impl.dtd.models.CMNode,int)" class="org.apache.xerces.impl.xs.models.XSDFACM" />
		<field name="STATE_START" class="org.apache.xerces.impl.xs.models.XSEmptyCM" />
		<field name="relationsRowResizeFactor" class="org.apache.xerces.impl.xs.opti.SchemaDOM" />
		<field name="relationsColResizeFactor" class="org.apache.xerces.impl.xs.opti.SchemaDOM" />
		<field name="hidden" class="org.apache.xerces.impl.xs.opti.SchemaDOM" />
		<method signature="void endSyntheticAnnotationElement(org.apache.xerces.xni.QName,boolean)" class="org.apache.xerces.impl.xs.opti.SchemaDOM" />
		<field name="ERROR_REPORTER" class="org.apache.xerces.impl.xs.opti.SchemaDOMParser" />
		<field name="GENERATE_SYNTHETIC_ANNOTATION" class="org.apache.xerces.impl.xs.opti.SchemaDOMParser" />
		<field name="XML11_DATATYPE_VALIDATOR_FACTORY" class="org.apache.xerces.impl.xs.opti.SchemaParsingConfig" />
		<field name="WARN_ON_DUPLICATE_ATTDEF" class="org.apache.xerces.impl.xs.opti.SchemaParsingConfig" />
		<field name="WARN_ON_UNDECLARED_ELEMDEF" class="org.apache.xerces.impl.xs.opti.SchemaParsingConfig" />
		<field name="ALLOW_JAVA_ENCODINGS" class="org.apache.xerces.impl.xs.opti.SchemaParsingConfig" />
		<field name="CONTINUE_AFTER_FATAL_ERROR" class="org.apache.xerces.impl.xs.opti.SchemaParsingConfig" />
		<field name="LOAD_EXTERNAL_DTD" class="org.apache.xerces.impl.xs.opti.SchemaParsingConfig" />
		<field name="NOTIFY_BUILTIN_REFS" class="org.apache.xerces.impl.xs.opti.SchemaParsingConfig" />
		<field name="NOTIFY_CHAR_REFS" class="org.apache.xerces.impl.xs.opti.SchemaParsingConfig" />
		<field name="NORMALIZE_DATA" class="org.apache.xerces.impl.xs.opti.SchemaParsingConfig" />
		<field name="SCHEMA_ELEMENT_DEFAULT" class="org.apache.xerces.impl.xs.opti.SchemaParsingConfig" />
		<field name="GENERATE_SYNTHETIC_ANNOTATIONS" class="org.apache.xerces.impl.xs.opti.SchemaParsingConfig" />
		<field name="ERROR_REPORTER" class="org.apache.xerces.impl.xs.opti.SchemaParsingConfig" />
		<field name="ENTITY_MANAGER" class="org.apache.xerces.impl.xs.opti.SchemaParsingConfig" />
		<field name="DOCUMENT_SCANNER" class="org.apache.xerces.impl.xs.opti.SchemaParsingConfig" />
		<field name="DTD_SCANNER" class="org.apache.xerces.impl.xs.opti.SchemaParsingConfig" />
		<field name="XMLGRAMMAR_POOL" class="org.apache.xerces.impl.xs.opti.SchemaParsingConfig" />
		<field name="DTD_VALIDATOR" class="org.apache.xerces.impl.xs.opti.SchemaParsingConfig" />
		<field name="NAMESPACE_BINDER" class="org.apache.xerces.impl.xs.opti.SchemaParsingConfig" />
		<field name="DATATYPE_VALIDATOR_FACTORY" class="org.apache.xerces.impl.xs.opti.SchemaParsingConfig" />
		<field name="VALIDATION_MANAGER" class="org.apache.xerces.impl.xs.opti.SchemaParsingConfig" />
		<field name="SCHEMA_VALIDATOR" class="org.apache.xerces.impl.xs.opti.SchemaParsingConfig" />
		<field name="LOCALE" class="org.apache.xerces.impl.xs.opti.SchemaParsingConfig" />
		<field name="PRINT_EXCEPTION_STACK_TRACE" class="org.apache.xerces.impl.xs.opti.SchemaParsingConfig" />
		<field name="fLocator" class="org.apache.xerces.impl.xs.opti.SchemaParsingConfig" />
		<field name="THRESHOLD" class="org.apache.xerces.impl.xs.traversers.Container" />
		<field name="CHUNK_SIZE" class="org.apache.xerces.impl.xs.traversers.StAXSchemaParser" />
		<field name="CHUNK_MASK" class="org.apache.xerces.impl.xs.traversers.StAXSchemaParser" />
		<method signature="void &lt;init&gt;(java.lang.String,int,int,int)" class="org.apache.xerces.impl.xs.traversers.XSAnnotationInfo" />
		<field name="ELEMENT_N" class="org.apache.xerces.impl.xs.traversers.XSAttributeChecker" />
		<field name="ELEMENT_R" class="org.apache.xerces.impl.xs.traversers.XSAttributeChecker" />
		<field name="ATTRIBUTE_N" class="org.apache.xerces.impl.xs.traversers.XSAttributeChecker" />
		<field name="ATTRIBUTE_R" class="org.apache.xerces.impl.xs.traversers.XSAttributeChecker" />
		<field name="DT_ANYURI" class="org.apache.xerces.impl.xs.traversers.XSAttributeChecker" />
		<field name="DT_ID" class="org.apache.xerces.impl.xs.traversers.XSAttributeChecker" />
		<field name="DT_QNAME" class="org.apache.xerces.impl.xs.traversers.XSAttributeChecker" />
		<field name="DT_STRING" class="org.apache.xerces.impl.xs.traversers.XSAttributeChecker" />
		<field name="DT_TOKEN" class="org.apache.xerces.impl.xs.traversers.XSAttributeChecker" />
		<field name="DT_NCNAME" class="org.apache.xerces.impl.xs.traversers.XSAttributeChecker" />
		<field name="DT_XPATH" class="org.apache.xerces.impl.xs.traversers.XSAttributeChecker" />
		<field name="DT_XPATH1" class="org.apache.xerces.impl.xs.traversers.XSAttributeChecker" />
		<field name="DT_LANGUAGE" class="org.apache.xerces.impl.xs.traversers.XSAttributeChecker" />
		<field name="DT_COUNT" class="org.apache.xerces.impl.xs.traversers.XSAttributeChecker" />
		<field name="DT_BLOCK" class="org.apache.xerces.impl.xs.traversers.XSAttributeChecker" />
		<field name="DT_BLOCK1" class="org.apache.xerces.impl.xs.traversers.XSAttributeChecker" />
		<field name="DT_FINAL" class="org.apache.xerces.impl.xs.traversers.XSAttributeChecker" />
		<field name="DT_FINAL1" class="org.apache.xerces.impl.xs.traversers.XSAttributeChecker" />
		<field name="DT_FINAL2" class="org.apache.xerces.impl.xs.traversers.XSAttributeChecker" />
		<field name="DT_FORM" class="org.apache.xerces.impl.xs.traversers.XSAttributeChecker" />
		<field name="DT_MAXOCCURS" class="org.apache.xerces.impl.xs.traversers.XSAttributeChecker" />
		<field name="DT_MAXOCCURS1" class="org.apache.xerces.impl.xs.traversers.XSAttributeChecker" />
		<field name="DT_MEMBERTYPES" class="org.apache.xerces.impl.xs.traversers.XSAttributeChecker" />
		<field name="DT_MINOCCURS1" class="org.apache.xerces.impl.xs.traversers.XSAttributeChecker" />
		<field name="DT_NAMESPACE" class="org.apache.xerces.impl.xs.traversers.XSAttributeChecker" />
		<field name="DT_PROCESSCONTENTS" class="org.apache.xerces.impl.xs.traversers.XSAttributeChecker" />
		<field name="DT_USE" class="org.apache.xerces.impl.xs.traversers.XSAttributeChecker" />
		<field name="DT_WHITESPACE" class="org.apache.xerces.impl.xs.traversers.XSAttributeChecker" />
		<field name="DT_BOOLEAN" class="org.apache.xerces.impl.xs.traversers.XSAttributeChecker" />
		<field name="DT_NONNEGINT" class="org.apache.xerces.impl.xs.traversers.XSAttributeChecker" />
		<field name="DT_POSINT" class="org.apache.xerces.impl.xs.traversers.XSAttributeChecker" />
		<field name="INIT_POOL_SIZE" class="org.apache.xerces.impl.xs.traversers.XSAttributeChecker" />
		<field name="INC_POOL_SIZE" class="org.apache.xerces.impl.xs.traversers.XSAttributeChecker" />
		<field name="NO_NAME" class="org.apache.xerces.impl.xs.traversers.XSDAbstractTraverser" />
		<field name="NOT_ALL_CONTEXT" class="org.apache.xerces.impl.xs.traversers.XSDAbstractTraverser" />
		<field name="PROCESSING_ALL_EL" class="org.apache.xerces.impl.xs.traversers.XSDAbstractTraverser" />
		<field name="GROUP_REF_WITH_ALL" class="org.apache.xerces.impl.xs.traversers.XSDAbstractTraverser" />
		<field name="CHILD_OF_GROUP" class="org.apache.xerces.impl.xs.traversers.XSDAbstractTraverser" />
		<field name="PROCESSING_ALL_GP" class="org.apache.xerces.impl.xs.traversers.XSDAbstractTraverser" />
		<field name="serialVersionUID" class="org.apache.xerces.impl.xs.traversers.XSDComplexTypeTraverser$ComplexTypeRecoverableError" />
		<field name="GLOBAL_NUM" class="org.apache.xerces.impl.xs.traversers.XSDComplexTypeTraverser" />
		<field name="DEBUG" class="org.apache.xerces.impl.xs.traversers.XSDComplexTypeTraverser" />
		<method signature="void traverseSimpleContentDecl(org.w3c.dom.Element)" class="org.apache.xerces.impl.xs.traversers.XSDComplexTypeTraverser" />
		<method signature="void traverseComplexContentDecl(org.w3c.dom.Element,boolean)" class="org.apache.xerces.impl.xs.traversers.XSDComplexTypeTraverser" />
		<method signature="void &lt;init&gt;()" class="org.apache.xerces.impl.xs.traversers.XSDHandler$SAX2XNIUtil" />
		<field name="VALIDATION" class="org.apache.xerces.impl.xs.traversers.XSDHandler" />
		<field name="XMLSCHEMA_VALIDATION" class="org.apache.xerces.impl.xs.traversers.XSDHandler" />
		<field name="ALLOW_JAVA_ENCODINGS" class="org.apache.xerces.impl.xs.traversers.XSDHandler" />
		<field name="CONTINUE_AFTER_FATAL_ERROR" class="org.apache.xerces.impl.xs.traversers.XSDHandler" />
		<field name="STANDARD_URI_CONFORMANT_FEATURE" class="org.apache.xerces.impl.xs.traversers.XSDHandler" />
		<field name="DISALLOW_DOCTYPE" class="org.apache.xerces.impl.xs.traversers.XSDHandler" />
		<field name="GENERATE_SYNTHETIC_ANNOTATIONS" class="org.apache.xerces.impl.xs.traversers.XSDHandler" />
		<field name="VALIDATE_ANNOTATIONS" class="org.apache.xerces.impl.xs.traversers.XSDHandler" />
		<field name="HONOUR_ALL_SCHEMALOCATIONS" class="org.apache.xerces.impl.xs.traversers.XSDHandler" />
		<field name="NAMESPACE_GROWTH" class="org.apache.xerces.impl.xs.traversers.XSDHandler" />
		<field name="TOLERATE_DUPLICATES" class="org.apache.xerces.impl.xs.traversers.XSDHandler" />
		<field name="NAMESPACE_PREFIXES" class="org.apache.xerces.impl.xs.traversers.XSDHandler" />
		<field name="STRING_INTERNING" class="org.apache.xerces.impl.xs.traversers.XSDHandler" />
		<field name="ERROR_HANDLER" class="org.apache.xerces.impl.xs.traversers.XSDHandler" />
		<field name="JAXP_SCHEMA_SOURCE" class="org.apache.xerces.impl.xs.traversers.XSDHandler" />
		<field name="ENTITY_RESOLVER" class="org.apache.xerces.impl.xs.traversers.XSDHandler" />
		<field name="ENTITY_MANAGER" class="org.apache.xerces.impl.xs.traversers.XSDHandler" />
		<field name="ERROR_REPORTER" class="org.apache.xerces.impl.xs.traversers.XSDHandler" />
		<field name="XMLGRAMMAR_POOL" class="org.apache.xerces.impl.xs.traversers.XSDHandler" />
		<field name="SYMBOL_TABLE" class="org.apache.xerces.impl.xs.traversers.XSDHandler" />
		<field name="SECURITY_MANAGER" class="org.apache.xerces.impl.xs.traversers.XSDHandler" />
		<field name="LOCALE" class="org.apache.xerces.impl.xs.traversers.XSDHandler" />
		<field name="DEBUG_NODE_POOL" class="org.apache.xerces.impl.xs.traversers.XSDHandler" />
		<field name="ATTRIBUTE_TYPE" class="org.apache.xerces.impl.xs.traversers.XSDHandler" />
		<field name="ATTRIBUTEGROUP_TYPE" class="org.apache.xerces.impl.xs.traversers.XSDHandler" />
		<field name="ELEMENT_TYPE" class="org.apache.xerces.impl.xs.traversers.XSDHandler" />
		<field name="GROUP_TYPE" class="org.apache.xerces.impl.xs.traversers.XSDHandler" />
		<field name="IDENTITYCONSTRAINT_TYPE" class="org.apache.xerces.impl.xs.traversers.XSDHandler" />
		<field name="NOTATION_TYPE" class="org.apache.xerces.impl.xs.traversers.XSDHandler" />
		<field name="TYPEDECL_TYPE" class="org.apache.xerces.impl.xs.traversers.XSDHandler" />
		<field name="REDEF_IDENTIFIER" class="org.apache.xerces.impl.xs.traversers.XSDHandler" />
		<field name="INIT_STACK_SIZE" class="org.apache.xerces.impl.xs.traversers.XSDHandler" />
		<field name="INC_STACK_SIZE" class="org.apache.xerces.impl.xs.traversers.XSDHandler" />
		<field name="INIT_KEYREF_STACK" class="org.apache.xerces.impl.xs.traversers.XSDHandler" />
		<field name="INC_KEYREF_STACK_AMOUNT" class="org.apache.xerces.impl.xs.traversers.XSDHandler" />
		<method signature="java.lang.Object getGlobalDeclFromGrammar(org.apache.xerces.impl.xs.SchemaGrammar,int,java.lang.String,java.lang.String)" class="org.apache.xerces.impl.xs.traversers.XSDHandler" />
		<method signature="void removeAnnotations()" class="org.apache.xerces.impl.xs.traversers.XSDocumentInfo" />
		<field name="POOL_SIZE" class="org.apache.xerces.impl.xs.util.XIntPool" />
		<field name="DEFAULT_SIZE" class="org.apache.xerces.impl.xs.util.XSObjectListImpl" />
		<field name="NAMESPACES_FEATURE" class="org.apache.xerces.jaxp.DocumentBuilderFactoryImpl" />
		<field name="VALIDATION_FEATURE" class="org.apache.xerces.jaxp.DocumentBuilderFactoryImpl" />
		<field name="XINCLUDE_FEATURE" class="org.apache.xerces.jaxp.DocumentBuilderFactoryImpl" />
		<field name="INCLUDE_IGNORABLE_WHITESPACE" class="org.apache.xerces.jaxp.DocumentBuilderFactoryImpl" />
		<field name="CREATE_ENTITY_REF_NODES_FEATURE" class="org.apache.xerces.jaxp.DocumentBuilderFactoryImpl" />
		<field name="INCLUDE_COMMENTS_FEATURE" class="org.apache.xerces.jaxp.DocumentBuilderFactoryImpl" />
		<field name="CREATE_CDATA_NODES_FEATURE" class="org.apache.xerces.jaxp.DocumentBuilderFactoryImpl" />
		<field name="NAMESPACES_FEATURE" class="org.apache.xerces.jaxp.DocumentBuilderImpl" />
		<field name="INCLUDE_IGNORABLE_WHITESPACE" class="org.apache.xerces.jaxp.DocumentBuilderImpl" />
		<field name="CREATE_ENTITY_REF_NODES_FEATURE" class="org.apache.xerces.jaxp.DocumentBuilderImpl" />
		<field name="INCLUDE_COMMENTS_FEATURE" class="org.apache.xerces.jaxp.DocumentBuilderImpl" />
		<field name="CREATE_CDATA_NODES_FEATURE" class="org.apache.xerces.jaxp.DocumentBuilderImpl" />
		<field name="XINCLUDE_FEATURE" class="org.apache.xerces.jaxp.DocumentBuilderImpl" />
		<field name="XMLSCHEMA_VALIDATION_FEATURE" class="org.apache.xerces.jaxp.DocumentBuilderImpl" />
		<field name="VALIDATION_FEATURE" class="org.apache.xerces.jaxp.DocumentBuilderImpl" />
		<field name="SECURITY_MANAGER" class="org.apache.xerces.jaxp.DocumentBuilderImpl" />
		<field name="JAXP_SCHEMA_LANGUAGE" class="org.apache.xerces.jaxp.JAXPConstants" />
		<field name="W3C_XML_SCHEMA" class="org.apache.xerces.jaxp.JAXPConstants" />
		<field name="JAXP_SCHEMA_SOURCE" class="org.apache.xerces.jaxp.JAXPConstants" />
		<method signature="org.w3c.dom.TypeInfo getAttributeTypeInfo(java.lang.String)" class="org.apache.xerces.jaxp.JAXPValidatorComponent$1" />
		<method signature="org.w3c.dom.TypeInfo getAttributeTypeInfo(java.lang.String,java.lang.String)" class="org.apache.xerces.jaxp.JAXPValidatorComponent$1" />
		<method signature="org.xml.sax.ContentHandler getContentHandler()" class="org.apache.xerces.jaxp.JAXPValidatorComponent$XNI2SAX" />
		<field name="ENTITY_MANAGER" class="org.apache.xerces.jaxp.JAXPValidatorComponent" />
		<field name="ERROR_REPORTER" class="org.apache.xerces.jaxp.JAXPValidatorComponent" />
		<field name="SYMBOL_TABLE" class="org.apache.xerces.jaxp.JAXPValidatorComponent" />
		<field name="NAMESPACES_FEATURE" class="org.apache.xerces.jaxp.SAXParserFactoryImpl" />
		<field name="VALIDATION_FEATURE" class="org.apache.xerces.jaxp.SAXParserFactoryImpl" />
		<field name="XINCLUDE_FEATURE" class="org.apache.xerces.jaxp.SAXParserFactoryImpl" />
		<method signature="boolean getFeature0(java.lang.String)" class="org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser" />
		<method signature="java.lang.Object getProperty0(java.lang.String)" class="org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser" />
		<field name="NAMESPACES_FEATURE" class="org.apache.xerces.jaxp.SAXParserImpl" />
		<field name="NAMESPACE_PREFIXES_FEATURE" class="org.apache.xerces.jaxp.SAXParserImpl" />
		<field name="VALIDATION_FEATURE" class="org.apache.xerces.jaxp.SAXParserImpl" />
		<field name="XMLSCHEMA_VALIDATION_FEATURE" class="org.apache.xerces.jaxp.SAXParserImpl" />
		<field name="XINCLUDE_FEATURE" class="org.apache.xerces.jaxp.SAXParserImpl" />
		<field name="SECURITY_MANAGER" class="org.apache.xerces.jaxp.SAXParserImpl" />
		<field name="SCHEMA_VALIDATION" class="org.apache.xerces.jaxp.SchemaValidatorConfiguration" />
		<field name="VALIDATION" class="org.apache.xerces.jaxp.SchemaValidatorConfiguration" />
		<field name="USE_GRAMMAR_POOL_ONLY" class="org.apache.xerces.jaxp.SchemaValidatorConfiguration" />
		<field name="PARSER_SETTINGS" class="org.apache.xerces.jaxp.SchemaValidatorConfiguration" />
		<field name="ERROR_REPORTER" class="org.apache.xerces.jaxp.SchemaValidatorConfiguration" />
		<field name="VALIDATION_MANAGER" class="org.apache.xerces.jaxp.SchemaValidatorConfiguration" />
		<field name="XMLGRAMMAR_POOL" class="org.apache.xerces.jaxp.SchemaValidatorConfiguration" />
		<method signature="org.apache.xerces.xni.XMLDocumentHandler getSide()" class="org.apache.xerces.jaxp.TeeXMLDocumentFilterImpl" />
		<field name="serialVersionUID" class="org.apache.xerces.jaxp.datatype.DurationImpl" />
		<method signature="int signum()" class="org.apache.xerces.jaxp.datatype.DurationImpl" />
		<method signature="java.lang.Object writeReplace()" class="org.apache.xerces.jaxp.datatype.DurationImpl" />
		<class name="org.apache.xerces.jaxp.datatype.SerializedDuration" />
		<class name="org.apache.xerces.jaxp.datatype.SerializedXMLGregorianCalendar" />
		<method signature="void &lt;init&gt;()" class="org.apache.xerces.jaxp.datatype.XMLGregorianCalendarImpl$DaysInMonth" />
		<field name="serialVersionUID" class="org.apache.xerces.jaxp.datatype.XMLGregorianCalendarImpl" />
		<field name="BILLION_I" class="org.apache.xerces.jaxp.datatype.XMLGregorianCalendarImpl" />
		<field name="YEAR" class="org.apache.xerces.jaxp.datatype.XMLGregorianCalendarImpl" />
		<field name="MONTH" class="org.apache.xerces.jaxp.datatype.XMLGregorianCalendarImpl" />
		<field name="DAY" class="org.apache.xerces.jaxp.datatype.XMLGregorianCalendarImpl" />
		<field name="HOUR" class="org.apache.xerces.jaxp.datatype.XMLGregorianCalendarImpl" />
		<field name="MINUTE" class="org.apache.xerces.jaxp.datatype.XMLGregorianCalendarImpl" />
		<field name="SECOND" class="org.apache.xerces.jaxp.datatype.XMLGregorianCalendarImpl" />
		<field name="MILLISECOND" class="org.apache.xerces.jaxp.datatype.XMLGregorianCalendarImpl" />
		<field name="TIMEZONE" class="org.apache.xerces.jaxp.datatype.XMLGregorianCalendarImpl" />
		<method signature="javax.xml.datatype.XMLGregorianCalendar createDateTime(java.math.BigInteger,int,int,int,int,int,java.math.BigDecimal,int)" class="org.apache.xerces.jaxp.datatype.XMLGregorianCalendarImpl" />
		<method signature="javax.xml.datatype.XMLGregorianCalendar createDateTime(int,int,int,int,int,int)" class="org.apache.xerces.jaxp.datatype.XMLGregorianCalendarImpl" />
		<method signature="javax.xml.datatype.XMLGregorianCalendar createDate(int,int,int,int)" class="org.apache.xerces.jaxp.datatype.XMLGregorianCalendarImpl" />
		<method signature="javax.xml.datatype.XMLGregorianCalendar createTime(int,int,int,int)" class="org.apache.xerces.jaxp.datatype.XMLGregorianCalendarImpl" />
		<method signature="javax.xml.datatype.XMLGregorianCalendar createTime(int,int,int,java.math.BigDecimal,int)" class="org.apache.xerces.jaxp.datatype.XMLGregorianCalendarImpl" />
		<method signature="javax.xml.datatype.XMLGregorianCalendar createTime(int,int,int,int,int)" class="org.apache.xerces.jaxp.datatype.XMLGregorianCalendarImpl" />
		<method signature="java.lang.Object writeReplace()" class="org.apache.xerces.jaxp.datatype.XMLGregorianCalendarImpl" />
		<field name="CHUNK_SIZE" class="org.apache.xerces.jaxp.validation.DOMValidatorHelper" />
		<field name="CHUNK_MASK" class="org.apache.xerces.jaxp.validation.DOMValidatorHelper" />
		<field name="ERROR_REPORTER" class="org.apache.xerces.jaxp.validation.DOMValidatorHelper" />
		<field name="NAMESPACE_CONTEXT" class="org.apache.xerces.jaxp.validation.DOMValidatorHelper" />
		<field name="SCHEMA_VALIDATOR" class="org.apache.xerces.jaxp.validation.DOMValidatorHelper" />
		<field name="SYMBOL_TABLE" class="org.apache.xerces.jaxp.validation.DOMValidatorHelper" />
		<field name="VALIDATION_MANAGER" class="org.apache.xerces.jaxp.validation.DOMValidatorHelper" />
		<method signature="void &lt;init&gt;()" class="org.apache.xerces.jaxp.validation.JAXPValidationMessageFormatter" />
		<field name="TABLE_SIZE" class="org.apache.xerces.jaxp.validation.SoftReferenceGrammarPool" />
		<method signature="void &lt;init&gt;(int)" class="org.apache.xerces.jaxp.validation.SoftReferenceGrammarPool" />
		<method signature="org.apache.xerces.xni.grammars.Grammar removeGrammar(org.apache.xerces.xni.grammars.XMLGrammarDescription)" class="org.apache.xerces.jaxp.validation.SoftReferenceGrammarPool" />
		<method signature="boolean containsGrammar(org.apache.xerces.xni.grammars.XMLGrammarDescription)" class="org.apache.xerces.jaxp.validation.SoftReferenceGrammarPool" />
		<field name="CHUNK_SIZE" class="org.apache.xerces.jaxp.validation.StAXValidatorHelper$EventHelper" />
		<field name="CHUNK_MASK" class="org.apache.xerces.jaxp.validation.StAXValidatorHelper$EventHelper" />
		<field name="STRING_INTERNING" class="org.apache.xerces.jaxp.validation.StAXValidatorHelper" />
		<field name="ERROR_REPORTER" class="org.apache.xerces.jaxp.validation.StAXValidatorHelper" />
		<field name="SCHEMA_VALIDATOR" class="org.apache.xerces.jaxp.validation.StAXValidatorHelper" />
		<field name="SYMBOL_TABLE" class="org.apache.xerces.jaxp.validation.StAXValidatorHelper" />
		<field name="VALIDATION_MANAGER" class="org.apache.xerces.jaxp.validation.StAXValidatorHelper" />
		<field name="PARSER_SETTINGS" class="org.apache.xerces.jaxp.validation.StreamValidatorHelper" />
		<field name="ENTITY_RESOLVER" class="org.apache.xerces.jaxp.validation.StreamValidatorHelper" />
		<field name="ERROR_HANDLER" class="org.apache.xerces.jaxp.validation.StreamValidatorHelper" />
		<field name="ERROR_REPORTER" class="org.apache.xerces.jaxp.validation.StreamValidatorHelper" />
		<field name="SCHEMA_VALIDATOR" class="org.apache.xerces.jaxp.validation.StreamValidatorHelper" />
		<field name="SYMBOL_TABLE" class="org.apache.xerces.jaxp.validation.StreamValidatorHelper" />
		<field name="VALIDATION_MANAGER" class="org.apache.xerces.jaxp.validation.StreamValidatorHelper" />
		<field name="SECURITY_MANAGER" class="org.apache.xerces.jaxp.validation.StreamValidatorHelper" />
		<method signature="void &lt;init&gt;()" class="org.apache.xerces.jaxp.validation.Util" />
		<method signature="org.apache.xerces.xni.parser.XMLInputSource toXMLInputSource(javax.xml.transform.stream.StreamSource)" class="org.apache.xerces.jaxp.validation.Util" />
		<field name="XML_TYPE" class="org.apache.xerces.jaxp.validation.ValidatorHandlerImpl$ResolutionForwarder" />
		<method signature="void &lt;init&gt;()" class="org.apache.xerces.jaxp.validation.ValidatorHandlerImpl$ResolutionForwarder" />
		<method signature="org.w3c.dom.ls.LSResourceResolver getEntityResolver()" class="org.apache.xerces.jaxp.validation.ValidatorHandlerImpl$ResolutionForwarder" />
		<method signature="org.w3c.dom.TypeInfo getAttributeTypeInfo(java.lang.String,java.lang.String)" class="org.apache.xerces.jaxp.validation.ValidatorHandlerImpl$XMLSchemaTypeInfoProvider" />
		<method signature="org.w3c.dom.TypeInfo getAttributeTypeInfo(java.lang.String)" class="org.apache.xerces.jaxp.validation.ValidatorHandlerImpl$XMLSchemaTypeInfoProvider" />
		<field name="NAMESPACE_PREFIXES" class="org.apache.xerces.jaxp.validation.ValidatorHandlerImpl" />
		<field name="STRING_INTERNING" class="org.apache.xerces.jaxp.validation.ValidatorHandlerImpl" />
		<field name="STRINGS_INTERNED" class="org.apache.xerces.jaxp.validation.ValidatorHandlerImpl" />
		<field name="ERROR_REPORTER" class="org.apache.xerces.jaxp.validation.ValidatorHandlerImpl" />
		<field name="LEXICAL_HANDLER" class="org.apache.xerces.jaxp.validation.ValidatorHandlerImpl" />
		<field name="NAMESPACE_CONTEXT" class="org.apache.xerces.jaxp.validation.ValidatorHandlerImpl" />
		<field name="SCHEMA_VALIDATOR" class="org.apache.xerces.jaxp.validation.ValidatorHandlerImpl" />
		<field name="SECURITY_MANAGER" class="org.apache.xerces.jaxp.validation.ValidatorHandlerImpl" />
		<field name="SYMBOL_TABLE" class="org.apache.xerces.jaxp.validation.ValidatorHandlerImpl" />
		<field name="VALIDATION_MANAGER" class="org.apache.xerces.jaxp.validation.ValidatorHandlerImpl" />
		<method signature="void validate(javax.xml.transform.Source,javax.xml.transform.Result)" class="org.apache.xerces.jaxp.validation.ValidatorHelper" />
		<field name="JAXP_SOURCE_RESULT_FEATURE_PREFIX" class="org.apache.xerces.jaxp.validation.ValidatorImpl" />
		<field name="CURRENT_ELEMENT_NODE" class="org.apache.xerces.jaxp.validation.ValidatorImpl" />
		<method signature="org.apache.xerces.xni.grammars.XMLGrammarPool getGrammarPool()" class="org.apache.xerces.jaxp.validation.XMLSchemaFactory$XMLGrammarPoolWrapper" />
		<field name="JAXP_SOURCE_FEATURE_PREFIX" class="org.apache.xerces.jaxp.validation.XMLSchemaFactory" />
		<field name="SCHEMA_FULL_CHECKING" class="org.apache.xerces.jaxp.validation.XMLSchemaFactory" />
		<field name="USE_GRAMMAR_POOL_ONLY" class="org.apache.xerces.jaxp.validation.XMLSchemaFactory" />
		<field name="XMLGRAMMAR_POOL" class="org.apache.xerces.jaxp.validation.XMLSchemaFactory" />
		<field name="SECURITY_MANAGER" class="org.apache.xerces.jaxp.validation.XMLSchemaFactory" />
		<field name="SCHEMA_VALIDATION" class="org.apache.xerces.jaxp.validation.XMLSchemaValidatorComponentManager" />
		<field name="VALIDATION" class="org.apache.xerces.jaxp.validation.XMLSchemaValidatorComponentManager" />
		<field name="USE_GRAMMAR_POOL_ONLY" class="org.apache.xerces.jaxp.validation.XMLSchemaValidatorComponentManager" />
		<field name="IGNORE_XSI_TYPE" class="org.apache.xerces.jaxp.validation.XMLSchemaValidatorComponentManager" />
		<field name="ID_IDREF_CHECKING" class="org.apache.xerces.jaxp.validation.XMLSchemaValidatorComponentManager" />
		<field name="UNPARSED_ENTITY_CHECKING" class="org.apache.xerces.jaxp.validation.XMLSchemaValidatorComponentManager" />
		<field name="IDENTITY_CONSTRAINT_CHECKING" class="org.apache.xerces.jaxp.validation.XMLSchemaValidatorComponentManager" />
		<field name="DISALLOW_DOCTYPE_DECL_FEATURE" class="org.apache.xerces.jaxp.validation.XMLSchemaValidatorComponentManager" />
		<field name="NORMALIZE_DATA" class="org.apache.xerces.jaxp.validation.XMLSchemaValidatorComponentManager" />
		<field name="SCHEMA_ELEMENT_DEFAULT" class="org.apache.xerces.jaxp.validation.XMLSchemaValidatorComponentManager" />
		<field name="SCHEMA_AUGMENT_PSVI" class="org.apache.xerces.jaxp.validation.XMLSchemaValidatorComponentManager" />
		<field name="ENTITY_MANAGER" class="org.apache.xerces.jaxp.validation.XMLSchemaValidatorComponentManager" />
		<field name="ENTITY_RESOLVER" class="org.apache.xerces.jaxp.validation.XMLSchemaValidatorComponentManager" />
		<field name="ERROR_HANDLER" class="org.apache.xerces.jaxp.validation.XMLSchemaValidatorComponentManager" />
		<field name="ERROR_REPORTER" class="org.apache.xerces.jaxp.validation.XMLSchemaValidatorComponentManager" />
		<field name="NAMESPACE_CONTEXT" class="org.apache.xerces.jaxp.validation.XMLSchemaValidatorComponentManager" />
		<field name="SCHEMA_VALIDATOR" class="org.apache.xerces.jaxp.validation.XMLSchemaValidatorComponentManager" />
		<field name="SECURITY_MANAGER" class="org.apache.xerces.jaxp.validation.XMLSchemaValidatorComponentManager" />
		<field name="SYMBOL_TABLE" class="org.apache.xerces.jaxp.validation.XMLSchemaValidatorComponentManager" />
		<field name="VALIDATION_MANAGER" class="org.apache.xerces.jaxp.validation.XMLSchemaValidatorComponentManager" />
		<field name="XMLGRAMMAR_POOL" class="org.apache.xerces.jaxp.validation.XMLSchemaValidatorComponentManager" />
		<field name="LOCALE" class="org.apache.xerces.jaxp.validation.XMLSchemaValidatorComponentManager" />
		<field name="serialVersionUID" class="org.apache.xerces.parsers.AbstractDOMParser$Abort" />
		<field name="NAMESPACES" class="org.apache.xerces.parsers.AbstractDOMParser" />
		<field name="CREATE_ENTITY_REF_NODES" class="org.apache.xerces.parsers.AbstractDOMParser" />
		<field name="INCLUDE_COMMENTS_FEATURE" class="org.apache.xerces.parsers.AbstractDOMParser" />
		<field name="CREATE_CDATA_NODES_FEATURE" class="org.apache.xerces.parsers.AbstractDOMParser" />
		<field name="INCLUDE_IGNORABLE_WHITESPACE" class="org.apache.xerces.parsers.AbstractDOMParser" />
		<field name="DEFER_NODE_EXPANSION" class="org.apache.xerces.parsers.AbstractDOMParser" />
		<field name="DOCUMENT_CLASS_NAME" class="org.apache.xerces.parsers.AbstractDOMParser" />
		<field name="CURRENT_ELEMENT_NODE" class="org.apache.xerces.parsers.AbstractDOMParser" />
		<field name="DEFAULT_DOCUMENT_CLASS_NAME" class="org.apache.xerces.parsers.AbstractDOMParser" />
		<field name="CORE_DOCUMENT_CLASS_NAME" class="org.apache.xerces.parsers.AbstractDOMParser" />
		<field name="PSVI_DOCUMENT_CLASS_NAME" class="org.apache.xerces.parsers.AbstractDOMParser" />
		<field name="DEBUG_EVENTS" class="org.apache.xerces.parsers.AbstractDOMParser" />
		<field name="DEBUG_BASEURI" class="org.apache.xerces.parsers.AbstractDOMParser" />
		<method signature="java.lang.String getDocumentClassName()" class="org.apache.xerces.parsers.AbstractDOMParser" />
		<field name="NAMESPACES" class="org.apache.xerces.parsers.AbstractSAXParser" />
		<field name="STRING_INTERNING" class="org.apache.xerces.parsers.AbstractSAXParser" />
		<field name="ALLOW_UE_AND_NOTATION_EVENTS" class="org.apache.xerces.parsers.AbstractSAXParser" />
		<field name="LEXICAL_HANDLER" class="org.apache.xerces.parsers.AbstractSAXParser" />
		<field name="DECLARATION_HANDLER" class="org.apache.xerces.parsers.AbstractSAXParser" />
		<field name="DOM_NODE" class="org.apache.xerces.parsers.AbstractSAXParser" />
		<field name="VALIDATION" class="org.apache.xerces.parsers.BasicParserConfiguration" />
		<field name="NAMESPACES" class="org.apache.xerces.parsers.BasicParserConfiguration" />
		<field name="EXTERNAL_GENERAL_ENTITIES" class="org.apache.xerces.parsers.BasicParserConfiguration" />
		<field name="EXTERNAL_PARAMETER_ENTITIES" class="org.apache.xerces.parsers.BasicParserConfiguration" />
		<field name="XML_STRING" class="org.apache.xerces.parsers.BasicParserConfiguration" />
		<field name="SYMBOL_TABLE" class="org.apache.xerces.parsers.BasicParserConfiguration" />
		<field name="ERROR_HANDLER" class="org.apache.xerces.parsers.BasicParserConfiguration" />
		<field name="ENTITY_RESOLVER" class="org.apache.xerces.parsers.BasicParserConfiguration" />
		<method signature="void &lt;init&gt;()" class="org.apache.xerces.parsers.BasicParserConfiguration" />
		<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable)" class="org.apache.xerces.parsers.BasicParserConfiguration" />
		<field name="DEFAULT_SHADOW_SYMBOL_TABLE" class="org.apache.xerces.parsers.CachingParserPool" />
		<field name="DEFAULT_SHADOW_GRAMMAR_POOL" class="org.apache.xerces.parsers.CachingParserPool" />
		<field name="SCHEMA_FULL_CHECKING" class="org.apache.xerces.parsers.DOMASBuilderImpl" />
		<field name="ERROR_REPORTER" class="org.apache.xerces.parsers.DOMASBuilderImpl" />
		<field name="SYMBOL_TABLE" class="org.apache.xerces.parsers.DOMASBuilderImpl" />
		<field name="ENTITY_MANAGER" class="org.apache.xerces.parsers.DOMASBuilderImpl" />
		<field name="USE_ENTITY_RESOLVER2" class="org.apache.xerces.parsers.DOMParser" />
		<field name="SYMBOL_TABLE" class="org.apache.xerces.parsers.DOMParser" />
		<field name="XMLGRAMMAR_POOL" class="org.apache.xerces.parsers.DOMParser" />
		<field name="NAMESPACES" class="org.apache.xerces.parsers.DOMParserImpl" />
		<field name="VALIDATION_FEATURE" class="org.apache.xerces.parsers.DOMParserImpl" />
		<field name="XMLSCHEMA" class="org.apache.xerces.parsers.DOMParserImpl" />
		<field name="XMLSCHEMA_FULL_CHECKING" class="org.apache.xerces.parsers.DOMParserImpl" />
		<field name="DYNAMIC_VALIDATION" class="org.apache.xerces.parsers.DOMParserImpl" />
		<field name="NORMALIZE_DATA" class="org.apache.xerces.parsers.DOMParserImpl" />
		<field name="DISALLOW_DOCTYPE_DECL_FEATURE" class="org.apache.xerces.parsers.DOMParserImpl" />
		<field name="HONOUR_ALL_SCHEMALOCATIONS" class="org.apache.xerces.parsers.DOMParserImpl" />
		<field name="NAMESPACE_GROWTH" class="org.apache.xerces.parsers.DOMParserImpl" />
		<field name="TOLERATE_DUPLICATES" class="org.apache.xerces.parsers.DOMParserImpl" />
		<field name="SYMBOL_TABLE" class="org.apache.xerces.parsers.DOMParserImpl" />
		<field name="PSVI_AUGMENT" class="org.apache.xerces.parsers.DOMParserImpl" />
		<field name="DEBUG" class="org.apache.xerces.parsers.DOMParserImpl" />
		<field name="WARN_ON_DUPLICATE_ATTDEF" class="org.apache.xerces.parsers.DTDConfiguration" />
		<field name="WARN_ON_DUPLICATE_ENTITYDEF" class="org.apache.xerces.parsers.DTDConfiguration" />
		<field name="WARN_ON_UNDECLARED_ELEMDEF" class="org.apache.xerces.parsers.DTDConfiguration" />
		<field name="ALLOW_JAVA_ENCODINGS" class="org.apache.xerces.parsers.DTDConfiguration" />
		<field name="CONTINUE_AFTER_FATAL_ERROR" class="org.apache.xerces.parsers.DTDConfiguration" />
		<field name="LOAD_EXTERNAL_DTD" class="org.apache.xerces.parsers.DTDConfiguration" />
		<field name="NOTIFY_BUILTIN_REFS" class="org.apache.xerces.parsers.DTDConfiguration" />
		<field name="NOTIFY_CHAR_REFS" class="org.apache.xerces.parsers.DTDConfiguration" />
		<field name="ERROR_REPORTER" class="org.apache.xerces.parsers.DTDConfiguration" />
		<field name="ENTITY_MANAGER" class="org.apache.xerces.parsers.DTDConfiguration" />
		<field name="DOCUMENT_SCANNER" class="org.apache.xerces.parsers.DTDConfiguration" />
		<field name="DTD_SCANNER" class="org.apache.xerces.parsers.DTDConfiguration" />
		<field name="XMLGRAMMAR_POOL" class="org.apache.xerces.parsers.DTDConfiguration" />
		<field name="DTD_PROCESSOR" class="org.apache.xerces.parsers.DTDConfiguration" />
		<field name="DTD_VALIDATOR" class="org.apache.xerces.parsers.DTDConfiguration" />
		<field name="NAMESPACE_BINDER" class="org.apache.xerces.parsers.DTDConfiguration" />
		<field name="DATATYPE_VALIDATOR_FACTORY" class="org.apache.xerces.parsers.DTDConfiguration" />
		<field name="VALIDATION_MANAGER" class="org.apache.xerces.parsers.DTDConfiguration" />
		<field name="JAXP_SCHEMA_LANGUAGE" class="org.apache.xerces.parsers.DTDConfiguration" />
		<field name="JAXP_SCHEMA_SOURCE" class="org.apache.xerces.parsers.DTDConfiguration" />
		<field name="LOCALE" class="org.apache.xerces.parsers.DTDConfiguration" />
		<field name="PRINT_EXCEPTION_STACK_TRACE" class="org.apache.xerces.parsers.DTDConfiguration" />
		<field name="fLocator" class="org.apache.xerces.parsers.DTDConfiguration" />
		<field name="fDTDScanner" class="org.apache.xerces.parsers.DTDParser" />
		<field name="WARN_ON_DUPLICATE_ATTDEF" class="org.apache.xerces.parsers.NonValidatingConfiguration" />
		<field name="WARN_ON_DUPLICATE_ENTITYDEF" class="org.apache.xerces.parsers.NonValidatingConfiguration" />
		<field name="WARN_ON_UNDECLARED_ELEMDEF" class="org.apache.xerces.parsers.NonValidatingConfiguration" />
		<field name="ALLOW_JAVA_ENCODINGS" class="org.apache.xerces.parsers.NonValidatingConfiguration" />
		<field name="CONTINUE_AFTER_FATAL_ERROR" class="org.apache.xerces.parsers.NonValidatingConfiguration" />
		<field name="LOAD_EXTERNAL_DTD" class="org.apache.xerces.parsers.NonValidatingConfiguration" />
		<field name="NOTIFY_BUILTIN_REFS" class="org.apache.xerces.parsers.NonValidatingConfiguration" />
		<field name="NOTIFY_CHAR_REFS" class="org.apache.xerces.parsers.NonValidatingConfiguration" />
		<field name="NORMALIZE_DATA" class="org.apache.xerces.parsers.NonValidatingConfiguration" />
		<field name="SCHEMA_ELEMENT_DEFAULT" class="org.apache.xerces.parsers.NonValidatingConfiguration" />
		<field name="ERROR_REPORTER" class="org.apache.xerces.parsers.NonValidatingConfiguration" />
		<field name="ENTITY_MANAGER" class="org.apache.xerces.parsers.NonValidatingConfiguration" />
		<field name="DOCUMENT_SCANNER" class="org.apache.xerces.parsers.NonValidatingConfiguration" />
		<field name="DTD_SCANNER" class="org.apache.xerces.parsers.NonValidatingConfiguration" />
		<field name="XMLGRAMMAR_POOL" class="org.apache.xerces.parsers.NonValidatingConfiguration" />
		<field name="DTD_VALIDATOR" class="org.apache.xerces.parsers.NonValidatingConfiguration" />
		<field name="NAMESPACE_BINDER" class="org.apache.xerces.parsers.NonValidatingConfiguration" />
		<field name="DATATYPE_VALIDATOR_FACTORY" class="org.apache.xerces.parsers.NonValidatingConfiguration" />
		<field name="VALIDATION_MANAGER" class="org.apache.xerces.parsers.NonValidatingConfiguration" />
		<field name="SCHEMA_VALIDATOR" class="org.apache.xerces.parsers.NonValidatingConfiguration" />
		<field name="LOCALE" class="org.apache.xerces.parsers.NonValidatingConfiguration" />
		<field name="PRINT_EXCEPTION_STACK_TRACE" class="org.apache.xerces.parsers.NonValidatingConfiguration" />
		<field name="fLocator" class="org.apache.xerces.parsers.NonValidatingConfiguration" />
		<method signature="org.apache.xerces.xni.parser.XMLDocumentScanner createDocumentScanner()" class="org.apache.xerces.parsers.NonValidatingConfiguration" />
		<field name="serialVersionUID" class="org.apache.xerces.parsers.ObjectFactory$ConfigurationError" />
		<method signature="java.lang.Exception getException()" class="org.apache.xerces.parsers.ObjectFactory$ConfigurationError" />
		<field name="DEFAULT_PROPERTIES_FILENAME" class="org.apache.xerces.parsers.ObjectFactory" />
		<field name="DEFAULT_LINE_LENGTH" class="org.apache.xerces.parsers.ObjectFactory" />
		<method signature="void &lt;init&gt;()" class="org.apache.xerces.parsers.ObjectFactory" />
		<field name="NOTIFY_BUILTIN_REFS" class="org.apache.xerces.parsers.SAXParser" />
		<field name="SYMBOL_TABLE" class="org.apache.xerces.parsers.SAXParser" />
		<field name="XMLGRAMMAR_POOL" class="org.apache.xerces.parsers.SAXParser" />
		<field name="SECURITY_MANAGER_PROPERTY" class="org.apache.xerces.parsers.SecurityConfiguration" />
		<method signature="void &lt;init&gt;()" class="org.apache.xerces.parsers.SecuritySupport" />
		<field name="NORMALIZE_DATA" class="org.apache.xerces.parsers.StandardParserConfiguration" />
		<field name="SCHEMA_ELEMENT_DEFAULT" class="org.apache.xerces.parsers.StandardParserConfiguration" />
		<field name="SCHEMA_AUGMENT_PSVI" class="org.apache.xerces.parsers.StandardParserConfiguration" />
		<field name="XMLSCHEMA_VALIDATION" class="org.apache.xerces.parsers.StandardParserConfiguration" />
		<field name="XMLSCHEMA_FULL_CHECKING" class="org.apache.xerces.parsers.StandardParserConfiguration" />
		<field name="GENERATE_SYNTHETIC_ANNOTATIONS" class="org.apache.xerces.parsers.StandardParserConfiguration" />
		<field name="VALIDATE_ANNOTATIONS" class="org.apache.xerces.parsers.StandardParserConfiguration" />
		<field name="HONOUR_ALL_SCHEMALOCATIONS" class="org.apache.xerces.parsers.StandardParserConfiguration" />
		<field name="NAMESPACE_GROWTH" class="org.apache.xerces.parsers.StandardParserConfiguration" />
		<field name="TOLERATE_DUPLICATES" class="org.apache.xerces.parsers.StandardParserConfiguration" />
		<field name="IGNORE_XSI_TYPE" class="org.apache.xerces.parsers.StandardParserConfiguration" />
		<field name="ID_IDREF_CHECKING" class="org.apache.xerces.parsers.StandardParserConfiguration" />
		<field name="UNPARSED_ENTITY_CHECKING" class="org.apache.xerces.parsers.StandardParserConfiguration" />
		<field name="IDENTITY_CONSTRAINT_CHECKING" class="org.apache.xerces.parsers.StandardParserConfiguration" />
		<field name="SCHEMA_VALIDATOR" class="org.apache.xerces.parsers.StandardParserConfiguration" />
		<field name="SCHEMA_LOCATION" class="org.apache.xerces.parsers.StandardParserConfiguration" />
		<field name="SCHEMA_NONS_LOCATION" class="org.apache.xerces.parsers.StandardParserConfiguration" />
		<field name="ROOT_TYPE_DEF" class="org.apache.xerces.parsers.StandardParserConfiguration" />
		<field name="ROOT_ELEMENT_DECL" class="org.apache.xerces.parsers.StandardParserConfiguration" />
		<field name="SCHEMA_DV_FACTORY" class="org.apache.xerces.parsers.StandardParserConfiguration" />
		<field name="ALLOW_UE_AND_NOTATION_EVENTS" class="org.apache.xerces.parsers.XIncludeAwareParserConfiguration" />
		<field name="XINCLUDE_FIXUP_BASE_URIS" class="org.apache.xerces.parsers.XIncludeAwareParserConfiguration" />
		<field name="XINCLUDE_FIXUP_LANGUAGE" class="org.apache.xerces.parsers.XIncludeAwareParserConfiguration" />
		<field name="XINCLUDE_FEATURE" class="org.apache.xerces.parsers.XIncludeAwareParserConfiguration" />
		<field name="XINCLUDE_HANDLER" class="org.apache.xerces.parsers.XIncludeAwareParserConfiguration" />
		<field name="NAMESPACE_CONTEXT" class="org.apache.xerces.parsers.XIncludeAwareParserConfiguration" />
		<field name="ALLOW_UE_AND_NOTATION_EVENTS" class="org.apache.xerces.parsers.XIncludeParserConfiguration" />
		<field name="XINCLUDE_FIXUP_BASE_URIS" class="org.apache.xerces.parsers.XIncludeParserConfiguration" />
		<field name="XINCLUDE_FIXUP_LANGUAGE" class="org.apache.xerces.parsers.XIncludeParserConfiguration" />
		<field name="XINCLUDE_HANDLER" class="org.apache.xerces.parsers.XIncludeParserConfiguration" />
		<field name="NAMESPACE_CONTEXT" class="org.apache.xerces.parsers.XIncludeParserConfiguration" />
		<field name="XML11_DATATYPE_VALIDATOR_FACTORY" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="WARN_ON_DUPLICATE_ATTDEF" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="WARN_ON_DUPLICATE_ENTITYDEF" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="WARN_ON_UNDECLARED_ELEMDEF" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="ALLOW_JAVA_ENCODINGS" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="CONTINUE_AFTER_FATAL_ERROR" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="LOAD_EXTERNAL_DTD" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="NOTIFY_BUILTIN_REFS" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="NOTIFY_CHAR_REFS" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="NORMALIZE_DATA" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="SCHEMA_ELEMENT_DEFAULT" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="SCHEMA_AUGMENT_PSVI" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="XMLSCHEMA_VALIDATION" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="XMLSCHEMA_FULL_CHECKING" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="GENERATE_SYNTHETIC_ANNOTATIONS" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="VALIDATE_ANNOTATIONS" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="HONOUR_ALL_SCHEMALOCATIONS" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="NAMESPACE_GROWTH" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="TOLERATE_DUPLICATES" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="USE_GRAMMAR_POOL_ONLY" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="VALIDATION" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="NAMESPACES" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="EXTERNAL_GENERAL_ENTITIES" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="EXTERNAL_PARAMETER_ENTITIES" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="IGNORE_XSI_TYPE" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="ID_IDREF_CHECKING" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="UNPARSED_ENTITY_CHECKING" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="IDENTITY_CONSTRAINT_CHECKING" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="XML_STRING" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="SYMBOL_TABLE" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="ERROR_HANDLER" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="ENTITY_RESOLVER" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="SCHEMA_VALIDATOR" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="SCHEMA_LOCATION" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="SCHEMA_NONS_LOCATION" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="ERROR_REPORTER" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="ENTITY_MANAGER" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="DOCUMENT_SCANNER" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="DTD_SCANNER" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="XMLGRAMMAR_POOL" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="DTD_PROCESSOR" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="DTD_VALIDATOR" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="NAMESPACE_BINDER" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="DATATYPE_VALIDATOR_FACTORY" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="VALIDATION_MANAGER" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="JAXP_SCHEMA_LANGUAGE" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="JAXP_SCHEMA_SOURCE" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="LOCALE" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="ROOT_TYPE_DEF" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="ROOT_ELEMENT_DECL" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="SCHEMA_DV_FACTORY" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="PRINT_EXCEPTION_STACK_TRACE" class="org.apache.xerces.parsers.XML11Configuration" />
		<field name="XML11_DATATYPE_VALIDATOR_FACTORY" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
		<field name="VALIDATION" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
		<field name="NAMESPACES" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
		<field name="EXTERNAL_GENERAL_ENTITIES" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
		<field name="EXTERNAL_PARAMETER_ENTITIES" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
		<field name="CONTINUE_AFTER_FATAL_ERROR" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
		<field name="LOAD_EXTERNAL_DTD" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
		<field name="XML_STRING" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
		<field name="SYMBOL_TABLE" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
		<field name="ERROR_HANDLER" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
		<field name="ENTITY_RESOLVER" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
		<field name="ERROR_REPORTER" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
		<field name="ENTITY_MANAGER" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
		<field name="DOCUMENT_SCANNER" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
		<field name="DTD_SCANNER" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
		<field name="XMLGRAMMAR_POOL" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
		<field name="DTD_PROCESSOR" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
		<field name="DTD_VALIDATOR" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
		<field name="NAMESPACE_BINDER" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
		<field name="DATATYPE_VALIDATOR_FACTORY" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
		<field name="VALIDATION_MANAGER" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
		<field name="JAXP_SCHEMA_LANGUAGE" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
		<field name="JAXP_SCHEMA_SOURCE" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
		<field name="PRINT_EXCEPTION_STACK_TRACE" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
		<field name="fLocator" class="org.apache.xerces.parsers.XML11DTDConfiguration" />
		<field name="XML11_DATATYPE_VALIDATOR_FACTORY" class="org.apache.xerces.parsers.XML11NonValidatingConfiguration" />
		<field name="VALIDATION" class="org.apache.xerces.parsers.XML11NonValidatingConfiguration" />
		<field name="NAMESPACES" class="org.apache.xerces.parsers.XML11NonValidatingConfiguration" />
		<field name="EXTERNAL_GENERAL_ENTITIES" class="org.apache.xerces.parsers.XML11NonValidatingConfiguration" />
		<field name="EXTERNAL_PARAMETER_ENTITIES" class="org.apache.xerces.parsers.XML11NonValidatingConfiguration" />
		<field name="CONTINUE_AFTER_FATAL_ERROR" class="org.apache.xerces.parsers.XML11NonValidatingConfiguration" />
		<field name="XML_STRING" class="org.apache.xerces.parsers.XML11NonValidatingConfiguration" />
		<field name="SYMBOL_TABLE" class="org.apache.xerces.parsers.XML11NonValidatingConfiguration" />
		<field name="ERROR_HANDLER" class="org.apache.xerces.parsers.XML11NonValidatingConfiguration" />
		<field name="ENTITY_RESOLVER" class="org.apache.xerces.parsers.XML11NonValidatingConfiguration" />
		<field name="ERROR_REPORTER" class="org.apache.xerces.parsers.XML11NonValidatingConfiguration" />
		<field name="ENTITY_MANAGER" class="org.apache.xerces.parsers.XML11NonValidatingConfiguration" />
		<field name="DOCUMENT_SCANNER" class="org.apache.xerces.parsers.XML11NonValidatingConfiguration" />
		<field name="DTD_SCANNER" class="org.apache.xerces.parsers.XML11NonValidatingConfiguration" />
		<field name="XMLGRAMMAR_POOL" class="org.apache.xerces.parsers.XML11NonValidatingConfiguration" />
		<field name="DTD_VALIDATOR" class="org.apache.xerces.parsers.XML11NonValidatingConfiguration" />
		<field name="NAMESPACE_BINDER" class="org.apache.xerces.parsers.XML11NonValidatingConfiguration" />
		<field name="DATATYPE_VALIDATOR_FACTORY" class="org.apache.xerces.parsers.XML11NonValidatingConfiguration" />
		<field name="VALIDATION_MANAGER" class="org.apache.xerces.parsers.XML11NonValidatingConfiguration" />
		<field name="PRINT_EXCEPTION_STACK_TRACE" class="org.apache.xerces.parsers.XML11NonValidatingConfiguration" />
		<field name="fLocator" class="org.apache.xerces.parsers.XML11NonValidatingConfiguration" />
		<field name="BIG_PRIME" class="org.apache.xerces.parsers.XMLGrammarCachingConfiguration" />
		<field name="SCHEMA_FULL_CHECKING" class="org.apache.xerces.parsers.XMLGrammarCachingConfiguration" />
		<field name="fDatatypeValidatorFactory" class="org.apache.xerces.parsers.XMLGrammarParser" />
		<field name="CONTINUE_AFTER_FATAL_ERROR" class="org.apache.xerces.parsers.XMLGrammarPreparser" />
		<field name="SYMBOL_TABLE" class="org.apache.xerces.parsers.XMLGrammarPreparser" />
		<field name="ERROR_REPORTER" class="org.apache.xerces.parsers.XMLGrammarPreparser" />
		<field name="ERROR_HANDLER" class="org.apache.xerces.parsers.XMLGrammarPreparser" />
		<field name="ENTITY_RESOLVER" class="org.apache.xerces.parsers.XMLGrammarPreparser" />
		<field name="GRAMMAR_POOL" class="org.apache.xerces.parsers.XMLGrammarPreparser" />
		<field name="ENTITY_RESOLVER" class="org.apache.xerces.parsers.XMLParser" />
		<field name="ERROR_HANDLER" class="org.apache.xerces.parsers.XMLParser" />
		<field name="ALLOW_UE_AND_NOTATION_EVENTS" class="org.apache.xerces.parsers.XPointerParserConfiguration" />
		<field name="XINCLUDE_FIXUP_BASE_URIS" class="org.apache.xerces.parsers.XPointerParserConfiguration" />
		<field name="XINCLUDE_FIXUP_LANGUAGE" class="org.apache.xerces.parsers.XPointerParserConfiguration" />
		<field name="XPOINTER_HANDLER" class="org.apache.xerces.parsers.XPointerParserConfiguration" />
		<field name="XINCLUDE_HANDLER" class="org.apache.xerces.parsers.XPointerParserConfiguration" />
		<field name="NAMESPACE_CONTEXT" class="org.apache.xerces.parsers.XPointerParserConfiguration" />
		<field name="SIZE_LIMIT" class="org.apache.xerces.util.AugmentationsImpl$SmallContainer" />
		<field name="XML_TYPE" class="org.apache.xerces.util.DOMEntityResolverWrapper" />
		<field name="XSD_TYPE" class="org.apache.xerces.util.DOMEntityResolverWrapper" />
		<method signature="void &lt;init&gt;()" class="org.apache.xerces.util.DOMErrorHandlerWrapper$DOMErrorTypeMap" />
		<method signature="void &lt;init&gt;()" class="org.apache.xerces.util.DOMUtil$ThrowableMethods" />
		<method signature="void &lt;init&gt;()" class="org.apache.xerces.util.DOMUtil" />
		<field name="BASE_NAME" class="org.apache.xerces.util.DatatypeMessageFormatter" />
		<field name="PARSER_SETTINGS" class="org.apache.xerces.util.ParserConfigurationSettings" />
		<field name="DEFAULT_ENTITY_EXPANSION_LIMIT" class="org.apache.xerces.util.SecurityManager" />
		<field name="DEFAULT_MAX_OCCUR_NODE_LIMIT" class="org.apache.xerces.util.SecurityManager" />
		<field name="TABLE_SIZE" class="org.apache.xerces.util.SymbolTable" />
		<field name="serialVersionUID" class="org.apache.xerces.util.URI$MalformedURIException" />
		<field name="serialVersionUID" class="org.apache.xerces.util.URI" />
		<field name="RESERVED_CHARACTERS" class="org.apache.xerces.util.URI" />
		<field name="MARK_CHARACTERS" class="org.apache.xerces.util.URI" />
		<field name="SCHEME_CHARACTERS" class="org.apache.xerces.util.URI" />
		<field name="USERINFO_CHARACTERS" class="org.apache.xerces.util.URI" />
		<field name="ASCII_ALPHA_CHARACTERS" class="org.apache.xerces.util.URI" />
		<field name="ASCII_DIGIT_CHARACTERS" class="org.apache.xerces.util.URI" />
		<field name="ASCII_HEX_CHARACTERS" class="org.apache.xerces.util.URI" />
		<field name="PATH_CHARACTERS" class="org.apache.xerces.util.URI" />
		<field name="MASK_ALPHA_NUMERIC" class="org.apache.xerces.util.URI" />
		<field name="MASK_UNRESERVED_MASK" class="org.apache.xerces.util.URI" />
		<field name="MASK_URI_CHARACTER" class="org.apache.xerces.util.URI" />
		<field name="MASK_SCHEME_CHARACTER" class="org.apache.xerces.util.URI" />
		<field name="MASK_USERINFO_CHARACTER" class="org.apache.xerces.util.URI" />
		<field name="MASK_PATH_CHARACTER" class="org.apache.xerces.util.URI" />
		<method signature="boolean isReservedCharacter(char)" class="org.apache.xerces.util.URI" />
		<method signature="boolean isUnreservedCharacter(char)" class="org.apache.xerces.util.URI" />
		<field name="MASK_XML11_VALID" class="org.apache.xerces.util.XML11Char" />
		<field name="MASK_XML11_SPACE" class="org.apache.xerces.util.XML11Char" />
		<field name="MASK_XML11_NAME_START" class="org.apache.xerces.util.XML11Char" />
		<field name="MASK_XML11_NAME" class="org.apache.xerces.util.XML11Char" />
		<field name="MASK_XML11_CONTROL" class="org.apache.xerces.util.XML11Char" />
		<field name="MASK_XML11_CONTENT" class="org.apache.xerces.util.XML11Char" />
		<field name="MASK_XML11_NCNAME_START" class="org.apache.xerces.util.XML11Char" />
		<field name="MASK_XML11_NCNAME" class="org.apache.xerces.util.XML11Char" />
		<field name="MASK_XML11_CONTENT_INTERNAL" class="org.apache.xerces.util.XML11Char" />
		<field name="TABLE_SIZE" class="org.apache.xerces.util.XMLAttributesImpl" />
		<field name="SIZE_LIMIT" class="org.apache.xerces.util.XMLAttributesImpl" />
		<field name="MASK_VALID" class="org.apache.xerces.util.XMLChar" />
		<field name="MASK_SPACE" class="org.apache.xerces.util.XMLChar" />
		<field name="MASK_NAME_START" class="org.apache.xerces.util.XMLChar" />
		<field name="MASK_NAME" class="org.apache.xerces.util.XMLChar" />
		<field name="MASK_PUBID" class="org.apache.xerces.util.XMLChar" />
		<field name="MASK_CONTENT" class="org.apache.xerces.util.XMLChar" />
		<field name="MASK_NCNAME_START" class="org.apache.xerces.util.XMLChar" />
		<field name="MASK_NCNAME" class="org.apache.xerces.util.XMLChar" />
		<field name="TABLE_SIZE" class="org.apache.xerces.util.XMLGrammarPoolImpl" />
		<field name="DEBUG" class="org.apache.xerces.util.XMLGrammarPoolImpl" />
		<field name="DEFAULT_SIZE" class="org.apache.xerces.util.XMLStringBuffer" />
		<field name="serialVersionUID" class="org.apache.xerces.xinclude.ObjectFactory$ConfigurationError" />
		<method signature="java.lang.Exception getException()" class="org.apache.xerces.xinclude.ObjectFactory$ConfigurationError" />
		<field name="DEFAULT_PROPERTIES_FILENAME" class="org.apache.xerces.xinclude.ObjectFactory" />
		<field name="DEFAULT_LINE_LENGTH" class="org.apache.xerces.xinclude.ObjectFactory" />
		<method signature="void &lt;init&gt;()" class="org.apache.xerces.xinclude.ObjectFactory" />
		<method signature="java.lang.Object createObject(java.lang.String,java.lang.String)" class="org.apache.xerces.xinclude.ObjectFactory" />
		<method signature="java.lang.Object createObject(java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xerces.xinclude.ObjectFactory" />
		<method signature="java.lang.Object findJarServiceProvider(java.lang.String)" class="org.apache.xerces.xinclude.ObjectFactory" />
		<class name="org.apache.xerces.xinclude.SecuritySupport$5" />
		<class name="org.apache.xerces.xinclude.SecuritySupport$6" />
		<class name="org.apache.xerces.xinclude.SecuritySupport$7" />
		<class name="org.apache.xerces.xinclude.SecuritySupport$8" />
		<method signature="java.io.FileInputStream getFileInputStream(java.io.File)" class="org.apache.xerces.xinclude.SecuritySupport" />
		<method signature="java.io.InputStream getResourceAsStream(java.lang.ClassLoader,java.lang.String)" class="org.apache.xerces.xinclude.SecuritySupport" />
		<method signature="boolean getFileExists(java.io.File)" class="org.apache.xerces.xinclude.SecuritySupport" />
		<method signature="long getLastModified(java.io.File)" class="org.apache.xerces.xinclude.SecuritySupport" />
		<method signature="void &lt;init&gt;()" class="org.apache.xerces.xinclude.SecuritySupport" />
		<field name="XINCLUDE_DEFAULT_CONFIGURATION" class="org.apache.xerces.xinclude.XIncludeHandler" />
		<field name="HTTP_ACCEPT" class="org.apache.xerces.xinclude.XIncludeHandler" />
		<field name="HTTP_ACCEPT_LANGUAGE" class="org.apache.xerces.xinclude.XIncludeHandler" />
		<field name="XPOINTER" class="org.apache.xerces.xinclude.XIncludeHandler" />
		<field name="CURRENT_BASE_URI" class="org.apache.xerces.xinclude.XIncludeHandler" />
		<field name="STATE_NORMAL_PROCESSING" class="org.apache.xerces.xinclude.XIncludeHandler" />
		<field name="STATE_IGNORE" class="org.apache.xerces.xinclude.XIncludeHandler" />
		<field name="STATE_EXPECT_FALLBACK" class="org.apache.xerces.xinclude.XIncludeHandler" />
		<field name="VALIDATION" class="org.apache.xerces.xinclude.XIncludeHandler" />
		<field name="SCHEMA_VALIDATION" class="org.apache.xerces.xinclude.XIncludeHandler" />
		<field name="DYNAMIC_VALIDATION" class="org.apache.xerces.xinclude.XIncludeHandler" />
		<field name="ALLOW_UE_AND_NOTATION_EVENTS" class="org.apache.xerces.xinclude.XIncludeHandler" />
		<field name="XINCLUDE_FIXUP_BASE_URIS" class="org.apache.xerces.xinclude.XIncludeHandler" />
		<field name="XINCLUDE_FIXUP_LANGUAGE" class="org.apache.xerces.xinclude.XIncludeHandler" />
		<field name="JAXP_SCHEMA_LANGUAGE" class="org.apache.xerces.xinclude.XIncludeHandler" />
		<field name="SYMBOL_TABLE" class="org.apache.xerces.xinclude.XIncludeHandler" />
		<field name="ERROR_REPORTER" class="org.apache.xerces.xinclude.XIncludeHandler" />
		<field name="ENTITY_RESOLVER" class="org.apache.xerces.xinclude.XIncludeHandler" />
		<field name="SECURITY_MANAGER" class="org.apache.xerces.xinclude.XIncludeHandler" />
		<field name="BUFFER_SIZE" class="org.apache.xerces.xinclude.XIncludeHandler" />
		<field name="PARSER_SETTINGS" class="org.apache.xerces.xinclude.XIncludeHandler" />
		<field name="INITIAL_SIZE" class="org.apache.xerces.xinclude.XIncludeHandler" />
		<method signature="void reportResourceError(java.lang.String)" class="org.apache.xerces.xinclude.XIncludeHandler" />
		<field name="XINCLUDE_DOMAIN" class="org.apache.xerces.xinclude.XIncludeMessageFormatter" />
		<field name="SEPARATOR_CHOICE" class="org.apache.xerces.xni.XMLDTDContentModelHandler" />
		<field name="SEPARATOR_SEQUENCE" class="org.apache.xerces.xni.XMLDTDContentModelHandler" />
		<field name="OCCURS_ZERO_OR_ONE" class="org.apache.xerces.xni.XMLDTDContentModelHandler" />
		<field name="OCCURS_ZERO_OR_MORE" class="org.apache.xerces.xni.XMLDTDContentModelHandler" />
		<field name="OCCURS_ONE_OR_MORE" class="org.apache.xerces.xni.XMLDTDContentModelHandler" />
		<field name="CONDITIONAL_INCLUDE" class="org.apache.xerces.xni.XMLDTDHandler" />
		<field name="CONDITIONAL_IGNORE" class="org.apache.xerces.xni.XMLDTDHandler" />
		<field name="serialVersionUID" class="org.apache.xerces.xni.XNIException" />
		<field name="XML_SCHEMA" class="org.apache.xerces.xni.grammars.XMLGrammarDescription" />
		<field name="XML_DTD" class="org.apache.xerces.xni.grammars.XMLGrammarDescription" />
		<field name="CONTEXT_INCLUDE" class="org.apache.xerces.xni.grammars.XMLSchemaDescription" />
		<field name="CONTEXT_REDEFINE" class="org.apache.xerces.xni.grammars.XMLSchemaDescription" />
		<field name="CONTEXT_IMPORT" class="org.apache.xerces.xni.grammars.XMLSchemaDescription" />
		<field name="CONTEXT_PREPARSE" class="org.apache.xerces.xni.grammars.XMLSchemaDescription" />
		<field name="CONTEXT_INSTANCE" class="org.apache.xerces.xni.grammars.XMLSchemaDescription" />
		<field name="CONTEXT_ELEMENT" class="org.apache.xerces.xni.grammars.XMLSchemaDescription" />
		<field name="CONTEXT_ATTRIBUTE" class="org.apache.xerces.xni.grammars.XMLSchemaDescription" />
		<field name="CONTEXT_XSITYPE" class="org.apache.xerces.xni.grammars.XMLSchemaDescription" />
		<field name="serialVersionUID" class="org.apache.xerces.xni.parser.XMLConfigurationException" />
		<field name="NOT_RECOGNIZED" class="org.apache.xerces.xni.parser.XMLConfigurationException" />
		<field name="NOT_SUPPORTED" class="org.apache.xerces.xni.parser.XMLConfigurationException" />
		<field name="serialVersionUID" class="org.apache.xerces.xni.parser.XMLParseException" />
		<field name="CHARTYPE_INVALID" class="org.apache.xerces.xpointer.ElementSchemePointer$Scanner" />
		<field name="CHARTYPE_OTHER" class="org.apache.xerces.xpointer.ElementSchemePointer$Scanner" />
		<field name="CHARTYPE_MINUS" class="org.apache.xerces.xpointer.ElementSchemePointer$Scanner" />
		<field name="CHARTYPE_PERIOD" class="org.apache.xerces.xpointer.ElementSchemePointer$Scanner" />
		<field name="CHARTYPE_SLASH" class="org.apache.xerces.xpointer.ElementSchemePointer$Scanner" />
		<field name="CHARTYPE_DIGIT" class="org.apache.xerces.xpointer.ElementSchemePointer$Scanner" />
		<field name="CHARTYPE_LETTER" class="org.apache.xerces.xpointer.ElementSchemePointer$Scanner" />
		<field name="CHARTYPE_UNDERSCORE" class="org.apache.xerces.xpointer.ElementSchemePointer$Scanner" />
		<field name="CHARTYPE_NONASCII" class="org.apache.xerces.xpointer.ElementSchemePointer$Scanner" />
		<field name="XPTRTOKEN_ELEM_NCNAME" class="org.apache.xerces.xpointer.ElementSchemePointer$Tokens" />
		<field name="XPTRTOKEN_ELEM_CHILD" class="org.apache.xerces.xpointer.ElementSchemePointer$Tokens" />
		<field name="INITIAL_TOKEN_COUNT" class="org.apache.xerces.xpointer.ElementSchemePointer$Tokens" />
		<method signature="java.lang.Integer getToken(int)" class="org.apache.xerces.xpointer.ElementSchemePointer$Tokens" />
		<method signature="void rewind()" class="org.apache.xerces.xpointer.ElementSchemePointer$Tokens" />
		<method signature="int peekToken()" class="org.apache.xerces.xpointer.ElementSchemePointer$Tokens" />
		<method signature="java.lang.String nextTokenAsString()" class="org.apache.xerces.xpointer.ElementSchemePointer$Tokens" />
		<method signature="void &lt;init&gt;()" class="org.apache.xerces.xpointer.ElementSchemePointer" />
		<method signature="void &lt;init&gt;(org.apache.xerces.util.SymbolTable)" class="org.apache.xerces.xpointer.ElementSchemePointer" />
		<method signature="void &lt;init&gt;()" class="org.apache.xerces.xpointer.ShortHandPointer" />
		<field name="CHARTYPE_INVALID" class="org.apache.xerces.xpointer.XPointerHandler$Scanner" />
		<field name="CHARTYPE_OTHER" class="org.apache.xerces.xpointer.XPointerHandler$Scanner" />
		<field name="CHARTYPE_WHITESPACE" class="org.apache.xerces.xpointer.XPointerHandler$Scanner" />
		<field name="CHARTYPE_CARRET" class="org.apache.xerces.xpointer.XPointerHandler$Scanner" />
		<field name="CHARTYPE_OPEN_PAREN" class="org.apache.xerces.xpointer.XPointerHandler$Scanner" />
		<field name="CHARTYPE_CLOSE_PAREN" class="org.apache.xerces.xpointer.XPointerHandler$Scanner" />
		<field name="CHARTYPE_MINUS" class="org.apache.xerces.xpointer.XPointerHandler$Scanner" />
		<field name="CHARTYPE_PERIOD" class="org.apache.xerces.xpointer.XPointerHandler$Scanner" />
		<field name="CHARTYPE_SLASH" class="org.apache.xerces.xpointer.XPointerHandler$Scanner" />
		<field name="CHARTYPE_DIGIT" class="org.apache.xerces.xpointer.XPointerHandler$Scanner" />
		<field name="CHARTYPE_COLON" class="org.apache.xerces.xpointer.XPointerHandler$Scanner" />
		<field name="CHARTYPE_EQUAL" class="org.apache.xerces.xpointer.XPointerHandler$Scanner" />
		<field name="CHARTYPE_LETTER" class="org.apache.xerces.xpointer.XPointerHandler$Scanner" />
		<field name="CHARTYPE_UNDERSCORE" class="org.apache.xerces.xpointer.XPointerHandler$Scanner" />
		<field name="CHARTYPE_NONASCII" class="org.apache.xerces.xpointer.XPointerHandler$Scanner" />
		<field name="XPTRTOKEN_OPEN_PAREN" class="org.apache.xerces.xpointer.XPointerHandler$Tokens" />
		<field name="XPTRTOKEN_CLOSE_PAREN" class="org.apache.xerces.xpointer.XPointerHandler$Tokens" />
		<field name="XPTRTOKEN_SHORTHAND" class="org.apache.xerces.xpointer.XPointerHandler$Tokens" />
		<field name="XPTRTOKEN_SCHEMENAME" class="org.apache.xerces.xpointer.XPointerHandler$Tokens" />
		<field name="XPTRTOKEN_SCHEMEDATA" class="org.apache.xerces.xpointer.XPointerHandler$Tokens" />
		<field name="INITIAL_TOKEN_COUNT" class="org.apache.xerces.xpointer.XPointerHandler$Tokens" />
		<method signature="void rewind()" class="org.apache.xerces.xpointer.XPointerHandler$Tokens" />
		<method signature="java.lang.String nextTokenAsString()" class="org.apache.xerces.xpointer.XPointerHandler$Tokens" />
		<field name="XPOINTER_DOMAIN" class="org.apache.xerces.xpointer.XPointerMessageFormatter" />
		<field name="EVENT_ELEMENT_START" class="org.apache.xerces.xpointer.XPointerPart" />
		<field name="EVENT_ELEMENT_END" class="org.apache.xerces.xpointer.XPointerPart" />
		<field name="EVENT_ELEMENT_EMPTY" class="org.apache.xerces.xpointer.XPointerPart" />
		<field name="EVENT_ELEMENT_START" class="org.apache.xerces.xpointer.XPointerProcessor" />
		<field name="EVENT_ELEMENT_END" class="org.apache.xerces.xpointer.XPointerProcessor" />
		<field name="EVENT_ELEMENT_EMPTY" class="org.apache.xerces.xpointer.XPointerProcessor" />
		<field name="VALIDITY_NOTKNOWN" class="org.apache.xerces.xs.ItemPSVI" />
		<field name="VALIDITY_INVALID" class="org.apache.xerces.xs.ItemPSVI" />
		<field name="VALIDITY_VALID" class="org.apache.xerces.xs.ItemPSVI" />
		<field name="VALIDATION_NONE" class="org.apache.xerces.xs.ItemPSVI" />
		<field name="VALIDATION_PARTIAL" class="org.apache.xerces.xs.ItemPSVI" />
		<field name="VALIDATION_FULL" class="org.apache.xerces.xs.ItemPSVI" />
		<field name="W3C_DOM_ELEMENT" class="org.apache.xerces.xs.XSAnnotation" />
		<field name="SAX_CONTENTHANDLER" class="org.apache.xerces.xs.XSAnnotation" />
		<field name="W3C_DOM_DOCUMENT" class="org.apache.xerces.xs.XSAnnotation" />
		<field name="CONTENTTYPE_EMPTY" class="org.apache.xerces.xs.XSComplexTypeDefinition" />
		<field name="CONTENTTYPE_SIMPLE" class="org.apache.xerces.xs.XSComplexTypeDefinition" />
		<field name="CONTENTTYPE_ELEMENT" class="org.apache.xerces.xs.XSComplexTypeDefinition" />
		<field name="CONTENTTYPE_MIXED" class="org.apache.xerces.xs.XSComplexTypeDefinition" />
		<field name="ATTRIBUTE_DECLARATION" class="org.apache.xerces.xs.XSConstants" />
		<field name="ELEMENT_DECLARATION" class="org.apache.xerces.xs.XSConstants" />
		<field name="TYPE_DEFINITION" class="org.apache.xerces.xs.XSConstants" />
		<field name="ATTRIBUTE_USE" class="org.apache.xerces.xs.XSConstants" />
		<field name="ATTRIBUTE_GROUP" class="org.apache.xerces.xs.XSConstants" />
		<field name="MODEL_GROUP_DEFINITION" class="org.apache.xerces.xs.XSConstants" />
		<field name="MODEL_GROUP" class="org.apache.xerces.xs.XSConstants" />
		<field name="PARTICLE" class="org.apache.xerces.xs.XSConstants" />
		<field name="WILDCARD" class="org.apache.xerces.xs.XSConstants" />
		<field name="IDENTITY_CONSTRAINT" class="org.apache.xerces.xs.XSConstants" />
		<field name="NOTATION_DECLARATION" class="org.apache.xerces.xs.XSConstants" />
		<field name="ANNOTATION" class="org.apache.xerces.xs.XSConstants" />
		<field name="FACET" class="org.apache.xerces.xs.XSConstants" />
		<field name="MULTIVALUE_FACET" class="org.apache.xerces.xs.XSConstants" />
		<field name="DERIVATION_NONE" class="org.apache.xerces.xs.XSConstants" />
		<field name="DERIVATION_EXTENSION" class="org.apache.xerces.xs.XSConstants" />
		<field name="DERIVATION_RESTRICTION" class="org.apache.xerces.xs.XSConstants" />
		<field name="DERIVATION_SUBSTITUTION" class="org.apache.xerces.xs.XSConstants" />
		<field name="DERIVATION_UNION" class="org.apache.xerces.xs.XSConstants" />
		<field name="DERIVATION_LIST" class="org.apache.xerces.xs.XSConstants" />
		<field name="SCOPE_ABSENT" class="org.apache.xerces.xs.XSConstants" />
		<field name="SCOPE_GLOBAL" class="org.apache.xerces.xs.XSConstants" />
		<field name="SCOPE_LOCAL" class="org.apache.xerces.xs.XSConstants" />
		<field name="VC_NONE" class="org.apache.xerces.xs.XSConstants" />
		<field name="VC_DEFAULT" class="org.apache.xerces.xs.XSConstants" />
		<field name="VC_FIXED" class="org.apache.xerces.xs.XSConstants" />
		<field name="ANYSIMPLETYPE_DT" class="org.apache.xerces.xs.XSConstants" />
		<field name="STRING_DT" class="org.apache.xerces.xs.XSConstants" />
		<field name="BOOLEAN_DT" class="org.apache.xerces.xs.XSConstants" />
		<field name="DECIMAL_DT" class="org.apache.xerces.xs.XSConstants" />
		<field name="FLOAT_DT" class="org.apache.xerces.xs.XSConstants" />
		<field name="DOUBLE_DT" class="org.apache.xerces.xs.XSConstants" />
		<field name="DURATION_DT" class="org.apache.xerces.xs.XSConstants" />
		<field name="DATETIME_DT" class="org.apache.xerces.xs.XSConstants" />
		<field name="TIME_DT" class="org.apache.xerces.xs.XSConstants" />
		<field name="DATE_DT" class="org.apache.xerces.xs.XSConstants" />
		<field name="GYEARMONTH_DT" class="org.apache.xerces.xs.XSConstants" />
		<field name="GYEAR_DT" class="org.apache.xerces.xs.XSConstants" />
		<field name="GMONTHDAY_DT" class="org.apache.xerces.xs.XSConstants" />
		<field name="GDAY_DT" class="org.apache.xerces.xs.XSConstants" />
		<field name="GMONTH_DT" class="org.apache.xerces.xs.XSConstants" />
		<field name="HEXBINARY_DT" class="org.apache.xerces.xs.XSConstants" />
		<field name="BASE64BINARY_DT" class="org.apache.xerces.xs.XSConstants" />
		<field name="ANYURI_DT" class="org.apache.xerces.xs.XSConstants" />
		<field name="QNAME_DT" class="org.apache.xerces.xs.XSConstants" />
		<field name="NOTATION_DT" class="org.apache.xerces.xs.XSConstants" />
		<field name="NORMALIZEDSTRING_DT" class="org.apache.xerces.xs.XSConstants" />
		<field name="TOKEN_DT" class="org.apache.xerces.xs.XSConstants" />
		<field name="LANGUAGE_DT" class="org.apache.xerces.xs.XSConstants" />
		<field name="NMTOKEN_DT" class="org.apache.xerces.xs.XSConstants" />
		<field name="NAME_DT" class="org.apache.xerces.xs.XSConstants" />
		<field name="NCNAME_DT" class="org.apache.xerces.xs.XSConstants" />
		<field name="ID_DT" class="org.apache.xerces.xs.XSConstants" />
		<field name="IDREF_DT" class="org.apache.xerces.xs.XSConstants" />
		<field name="ENTITY_DT" class="org.apache.xerces.xs.XSConstants" />
		<field name="INTEGER_DT" class="org.apache.xerces.xs.XSConstants" />
		<field name="NONPOSITIVEINTEGER_DT" class="org.apache.xerces.xs.XSConstants" />
		<field name="NEGATIVEINTEGER_DT" class="org.apache.xerces.xs.XSConstants" />
		<field name="LONG_DT" class="org.apache.xerces.xs.XSConstants" />
		<field name="INT_DT" class="org.apache.xerces.xs.XSConstants" />
		<field name="SHORT_DT" class="org.apache.xerces.xs.XSConstants" />
		<field name="BYTE_DT" class="org.apache.xerces.xs.XSConstants" />
		<field name="NONNEGATIVEINTEGER_DT" class="org.apache.xerces.xs.XSConstants" />
		<field name="UNSIGNEDLONG_DT" class="org.apache.xerces.xs.XSConstants" />
		<field name="UNSIGNEDINT_DT" class="org.apache.xerces.xs.XSConstants" />
		<field name="UNSIGNEDSHORT_DT" class="org.apache.xerces.xs.XSConstants" />
		<field name="UNSIGNEDBYTE_DT" class="org.apache.xerces.xs.XSConstants" />
		<field name="POSITIVEINTEGER_DT" class="org.apache.xerces.xs.XSConstants" />
		<field name="LISTOFUNION_DT" class="org.apache.xerces.xs.XSConstants" />
		<field name="LIST_DT" class="org.apache.xerces.xs.XSConstants" />
		<field name="UNAVAILABLE_DT" class="org.apache.xerces.xs.XSConstants" />
		<field name="serialVersionUID" class="org.apache.xerces.xs.XSException" />
		<field name="NOT_SUPPORTED_ERR" class="org.apache.xerces.xs.XSException" />
		<field name="INDEX_SIZE_ERR" class="org.apache.xerces.xs.XSException" />
		<field name="IC_KEY" class="org.apache.xerces.xs.XSIDCDefinition" />
		<field name="IC_KEYREF" class="org.apache.xerces.xs.XSIDCDefinition" />
		<field name="IC_UNIQUE" class="org.apache.xerces.xs.XSIDCDefinition" />
		<field name="COMPOSITOR_SEQUENCE" class="org.apache.xerces.xs.XSModelGroup" />
		<field name="COMPOSITOR_CHOICE" class="org.apache.xerces.xs.XSModelGroup" />
		<field name="COMPOSITOR_ALL" class="org.apache.xerces.xs.XSModelGroup" />
		<field name="VARIETY_ABSENT" class="org.apache.xerces.xs.XSSimpleTypeDefinition" />
		<field name="VARIETY_ATOMIC" class="org.apache.xerces.xs.XSSimpleTypeDefinition" />
		<field name="VARIETY_LIST" class="org.apache.xerces.xs.XSSimpleTypeDefinition" />
		<field name="VARIETY_UNION" class="org.apache.xerces.xs.XSSimpleTypeDefinition" />
		<field name="FACET_NONE" class="org.apache.xerces.xs.XSSimpleTypeDefinition" />
		<field name="FACET_LENGTH" class="org.apache.xerces.xs.XSSimpleTypeDefinition" />
		<field name="FACET_MINLENGTH" class="org.apache.xerces.xs.XSSimpleTypeDefinition" />
		<field name="FACET_MAXLENGTH" class="org.apache.xerces.xs.XSSimpleTypeDefinition" />
		<field name="FACET_PATTERN" class="org.apache.xerces.xs.XSSimpleTypeDefinition" />
		<field name="FACET_WHITESPACE" class="org.apache.xerces.xs.XSSimpleTypeDefinition" />
		<field name="FACET_MAXINCLUSIVE" class="org.apache.xerces.xs.XSSimpleTypeDefinition" />
		<field name="FACET_MAXEXCLUSIVE" class="org.apache.xerces.xs.XSSimpleTypeDefinition" />
		<field name="FACET_MINEXCLUSIVE" class="org.apache.xerces.xs.XSSimpleTypeDefinition" />
		<field name="FACET_MININCLUSIVE" class="org.apache.xerces.xs.XSSimpleTypeDefinition" />
		<field name="FACET_TOTALDIGITS" class="org.apache.xerces.xs.XSSimpleTypeDefinition" />
		<field name="FACET_FRACTIONDIGITS" class="org.apache.xerces.xs.XSSimpleTypeDefinition" />
		<field name="FACET_ENUMERATION" class="org.apache.xerces.xs.XSSimpleTypeDefinition" />
		<field name="ORDERED_FALSE" class="org.apache.xerces.xs.XSSimpleTypeDefinition" />
		<field name="ORDERED_PARTIAL" class="org.apache.xerces.xs.XSSimpleTypeDefinition" />
		<field name="ORDERED_TOTAL" class="org.apache.xerces.xs.XSSimpleTypeDefinition" />
		<field name="COMPLEX_TYPE" class="org.apache.xerces.xs.XSTypeDefinition" />
		<field name="SIMPLE_TYPE" class="org.apache.xerces.xs.XSTypeDefinition" />
		<field name="NSCONSTRAINT_ANY" class="org.apache.xerces.xs.XSWildcard" />
		<field name="NSCONSTRAINT_NOT" class="org.apache.xerces.xs.XSWildcard" />
		<field name="NSCONSTRAINT_LIST" class="org.apache.xerces.xs.XSWildcard" />
		<field name="PC_STRICT" class="org.apache.xerces.xs.XSWildcard" />
		<field name="PC_SKIP" class="org.apache.xerces.xs.XSWildcard" />
		<field name="PC_LAX" class="org.apache.xerces.xs.XSWildcard" />
		<method signature="void &lt;init&gt;()" class="org.apache.xml.serialize.DOMSerializerImpl$DocumentMethods" />
		<field name="NAMESPACES" class="org.apache.xml.serialize.DOMSerializerImpl" />
		<field name="WELLFORMED" class="org.apache.xml.serialize.DOMSerializerImpl" />
		<field name="ENTITIES" class="org.apache.xml.serialize.DOMSerializerImpl" />
		<field name="CDATA" class="org.apache.xml.serialize.DOMSerializerImpl" />
		<field name="SPLITCDATA" class="org.apache.xml.serialize.DOMSerializerImpl" />
		<field name="COMMENTS" class="org.apache.xml.serialize.DOMSerializerImpl" />
		<field name="DISCARDDEFAULT" class="org.apache.xml.serialize.DOMSerializerImpl" />
		<field name="INFOSET" class="org.apache.xml.serialize.DOMSerializerImpl" />
		<field name="XMLDECL" class="org.apache.xml.serialize.DOMSerializerImpl" />
		<field name="NSDECL" class="org.apache.xml.serialize.DOMSerializerImpl" />
		<field name="DOM_ELEMENT_CONTENT_WHITESPACE" class="org.apache.xml.serialize.DOMSerializerImpl" />
		<field name="PRETTY_PRINT" class="org.apache.xml.serialize.DOMSerializerImpl" />
		<method signature="void &lt;init&gt;()" class="org.apache.xml.serialize.EncodingInfo$CharToByteConverterMethods" />
		<method signature="void &lt;init&gt;()" class="org.apache.xml.serialize.EncodingInfo$CharsetMethods" />
		<field name="DEFAULT_LAST_PRINTABLE" class="org.apache.xml.serialize.Encodings" />
		<field name="LAST_PRINTABLE_UNICODE" class="org.apache.xml.serialize.Encodings" />
		<field name="DEFAULT_ENCODING" class="org.apache.xml.serialize.Encodings" />
		<field name="JIS_DANGER_CHARS" class="org.apache.xml.serialize.Encodings" />
		<field name="XHTMLNamespace" class="org.apache.xml.serialize.HTMLSerializer" />
		<field name="HTMLPublicId" class="org.apache.xml.serialize.HTMLdtd" />
		<field name="HTMLSystemId" class="org.apache.xml.serialize.HTMLdtd" />
		<field name="XHTMLPublicId" class="org.apache.xml.serialize.HTMLdtd" />
		<field name="XHTMLSystemId" class="org.apache.xml.serialize.HTMLdtd" />
		<field name="ENTITIES_RESOURCE" class="org.apache.xml.serialize.HTMLdtd" />
		<field name="ONLY_OPENING" class="org.apache.xml.serialize.HTMLdtd" />
		<field name="ELEM_CONTENT" class="org.apache.xml.serialize.HTMLdtd" />
		<field name="PRESERVE" class="org.apache.xml.serialize.HTMLdtd" />
		<field name="OPT_CLOSING" class="org.apache.xml.serialize.HTMLdtd" />
		<field name="EMPTY" class="org.apache.xml.serialize.HTMLdtd" />
		<field name="ALLOWED_HEAD" class="org.apache.xml.serialize.HTMLdtd" />
		<field name="CLOSE_P" class="org.apache.xml.serialize.HTMLdtd" />
		<field name="CLOSE_DD_DT" class="org.apache.xml.serialize.HTMLdtd" />
		<field name="CLOSE_SELF" class="org.apache.xml.serialize.HTMLdtd" />
		<field name="CLOSE_TABLE" class="org.apache.xml.serialize.HTMLdtd" />
		<field name="CLOSE_TH_TD" class="org.apache.xml.serialize.HTMLdtd" />
		<field name="Unix" class="org.apache.xml.serialize.LineSeparator" />
		<field name="Windows" class="org.apache.xml.serialize.LineSeparator" />
		<field name="Macintosh" class="org.apache.xml.serialize.LineSeparator" />
		<field name="Web" class="org.apache.xml.serialize.LineSeparator" />
		<field name="XML" class="org.apache.xml.serialize.Method" />
		<field name="HTML" class="org.apache.xml.serialize.Method" />
		<field name="XHTML" class="org.apache.xml.serialize.Method" />
		<field name="TEXT" class="org.apache.xml.serialize.Method" />
		<field name="FOP" class="org.apache.xml.serialize.Method" />
		<field name="serialVersionUID" class="org.apache.xml.serialize.ObjectFactory$ConfigurationError" />
		<method signature="java.lang.Exception getException()" class="org.apache.xml.serialize.ObjectFactory$ConfigurationError" />
		<field name="DEFAULT_PROPERTIES_FILENAME" class="org.apache.xml.serialize.ObjectFactory" />
		<field name="DEFAULT_LINE_LENGTH" class="org.apache.xml.serialize.ObjectFactory" />
		<method signature="void &lt;init&gt;()" class="org.apache.xml.serialize.ObjectFactory" />
		<method signature="java.lang.Object createObject(java.lang.String,java.lang.String)" class="org.apache.xml.serialize.ObjectFactory" />
		<method signature="java.lang.Object createObject(java.lang.String,java.lang.String,java.lang.String)" class="org.apache.xml.serialize.ObjectFactory" />
		<method signature="java.lang.ClassLoader findClassLoader()" class="org.apache.xml.serialize.ObjectFactory" />
		<method signature="java.lang.Object findJarServiceProvider(java.lang.String)" class="org.apache.xml.serialize.ObjectFactory" />
		<field name="HTMLPublicId" class="org.apache.xml.serialize.OutputFormat$DTD" />
		<field name="HTMLSystemId" class="org.apache.xml.serialize.OutputFormat$DTD" />
		<field name="XHTMLPublicId" class="org.apache.xml.serialize.OutputFormat$DTD" />
		<field name="XHTMLSystemId" class="org.apache.xml.serialize.OutputFormat$DTD" />
		<field name="Indent" class="org.apache.xml.serialize.OutputFormat$Defaults" />
		<field name="Encoding" class="org.apache.xml.serialize.OutputFormat$Defaults" />
		<field name="LineWidth" class="org.apache.xml.serialize.OutputFormat$Defaults" />
		<field name="BufferSize" class="org.apache.xml.serialize.Printer" />
		<class name="org.apache.xml.serialize.SecuritySupport$1" />
		<class name="org.apache.xml.serialize.SecuritySupport$2" />
		<class name="org.apache.xml.serialize.SecuritySupport$3" />
		<class name="org.apache.xml.serialize.SecuritySupport$5" />
		<class name="org.apache.xml.serialize.SecuritySupport$6" />
		<class name="org.apache.xml.serialize.SecuritySupport$7" />
		<class name="org.apache.xml.serialize.SecuritySupport$8" />
		<method signature="java.lang.ClassLoader getContextClassLoader()" class="org.apache.xml.serialize.SecuritySupport" />
		<method signature="java.lang.ClassLoader getSystemClassLoader()" class="org.apache.xml.serialize.SecuritySupport" />
		<method signature="java.lang.ClassLoader getParentClassLoader(java.lang.ClassLoader)" class="org.apache.xml.serialize.SecuritySupport" />
		<method signature="java.io.FileInputStream getFileInputStream(java.io.File)" class="org.apache.xml.serialize.SecuritySupport" />
		<method signature="java.io.InputStream getResourceAsStream(java.lang.ClassLoader,java.lang.String)" class="org.apache.xml.serialize.SecuritySupport" />
		<method signature="boolean getFileExists(java.io.File)" class="org.apache.xml.serialize.SecuritySupport" />
		<method signature="long getLastModified(java.io.File)" class="org.apache.xml.serialize.SecuritySupport" />
		<method signature="void &lt;init&gt;()" class="org.apache.xml.serialize.SecuritySupport" />
		<field name="FactoriesProperty" class="org.apache.xml.serialize.SerializerFactory" />
		<field name="DEBUG" class="org.apache.xml.serialize.XML11Serializer" />
		<field name="fNSBinder" class="org.apache.xml.serialize.XML11Serializer" />
		<field name="fLocalNSBinder" class="org.apache.xml.serialize.XML11Serializer" />
		<field name="fSymbolTable" class="org.apache.xml.serialize.XML11Serializer" />
		<field name="PREFIX" class="org.apache.xml.serialize.XML11Serializer" />
		<field name="DEBUG" class="org.apache.xml.serialize.XMLSerializer" />
		<field name="PREFIX" class="org.apache.xml.serialize.XMLSerializer" />
		<field name="serialVersionUID" class="org.jdom2.Attribute" />
		<field name="INITIAL_ARRAY_SIZE" class="org.jdom2.AttributeList" />
		<field name="serialVersionUID" class="org.jdom2.CDATA" />
		<method signature="java.lang.Object clone()" class="org.jdom2.CloneBase" />
		<field name="serialVersionUID" class="org.jdom2.Comment" />
		<field name="serialVersionUID" class="org.jdom2.Content" />
		<field name="INITIAL_ARRAY_SIZE" class="org.jdom2.ContentList" />
		<field name="serialVersionUID" class="org.jdom2.DataConversionException" />
		<field name="serialVersionUID" class="org.jdom2.DocType" />
		<field name="serialVersionUID" class="org.jdom2.Document" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jdom2.Document" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jdom2.Document" />
		<field name="INITIAL_ARRAY_SIZE" class="org.jdom2.Element" />
		<field name="serialVersionUID" class="org.jdom2.Element" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jdom2.Element" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jdom2.Element" />
		<field name="serialVersionUID" class="org.jdom2.EntityRef" />
		<field name="serialVersionUID" class="org.jdom2.IllegalAddException" />
		<method signature="void &lt;init&gt;(org.jdom2.Element,org.jdom2.Element,java.lang.String)" class="org.jdom2.IllegalAddException" />
		<method signature="void &lt;init&gt;(org.jdom2.Element,org.jdom2.ProcessingInstruction,java.lang.String)" class="org.jdom2.IllegalAddException" />
		<method signature="void &lt;init&gt;(org.jdom2.ProcessingInstruction,java.lang.String)" class="org.jdom2.IllegalAddException" />
		<method signature="void &lt;init&gt;(org.jdom2.Element,org.jdom2.Comment,java.lang.String)" class="org.jdom2.IllegalAddException" />
		<method signature="void &lt;init&gt;(org.jdom2.Element,org.jdom2.CDATA,java.lang.String)" class="org.jdom2.IllegalAddException" />
		<method signature="void &lt;init&gt;(org.jdom2.Element,org.jdom2.Text,java.lang.String)" class="org.jdom2.IllegalAddException" />
		<method signature="void &lt;init&gt;(org.jdom2.Comment,java.lang.String)" class="org.jdom2.IllegalAddException" />
		<method signature="void &lt;init&gt;(org.jdom2.Element,org.jdom2.EntityRef,java.lang.String)" class="org.jdom2.IllegalAddException" />
		<field name="serialVersionUID" class="org.jdom2.IllegalDataException" />
		<field name="serialVersionUID" class="org.jdom2.IllegalNameException" />
		<method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="org.jdom2.IllegalNameException" />
		<field name="serialVersionUID" class="org.jdom2.IllegalTargetException" />
		<field name="NS_PREFIX_DEFAULT" class="org.jdom2.JDOMConstants" />
		<field name="NS_URI_DEFAULT" class="org.jdom2.JDOMConstants" />
		<field name="NS_PREFIX_XML" class="org.jdom2.JDOMConstants" />
		<field name="NS_URI_XML" class="org.jdom2.JDOMConstants" />
		<field name="NS_PREFIX_XMLNS" class="org.jdom2.JDOMConstants" />
		<field name="NS_URI_XMLNS" class="org.jdom2.JDOMConstants" />
		<field name="SAX_PROPERTY_DECLARATION_HANDLER" class="org.jdom2.JDOMConstants" />
		<field name="SAX_PROPERTY_DECLARATION_HANDLER_ALT" class="org.jdom2.JDOMConstants" />
		<field name="SAX_PROPERTY_LEXICAL_HANDLER" class="org.jdom2.JDOMConstants" />
		<field name="SAX_PROPERTY_LEXICAL_HANDLER_ALT" class="org.jdom2.JDOMConstants" />
		<field name="SAX_FEATURE_EXTERNAL_ENT" class="org.jdom2.JDOMConstants" />
		<field name="SAX_FEATURE_VALIDATION" class="org.jdom2.JDOMConstants" />
		<field name="SAX_FEATURE_NAMESPACES" class="org.jdom2.JDOMConstants" />
		<field name="SAX_FEATURE_NAMESPACE_PREFIXES" class="org.jdom2.JDOMConstants" />
		<field name="JDOM2_FEATURE_JDOMSOURCE" class="org.jdom2.JDOMConstants" />
		<field name="JDOM2_FEATURE_JDOMRESULT" class="org.jdom2.JDOMConstants" />
		<field name="JDOM2_PROPERTY_XPATH_FACTORY" class="org.jdom2.JDOMConstants" />
		<field name="JDOM2_PROPERTY_LINE_SEPARATOR" class="org.jdom2.JDOMConstants" />
		<method signature="void &lt;init&gt;()" class="org.jdom2.JDOMConstants" />
		<field name="serialVersionUID" class="org.jdom2.JDOMException" />
		<class name="org.jdom2.Namespace$NamespaceSerializationProxy" />
		<field name="serialVersionUID" class="org.jdom2.Namespace" />
		<method signature="java.lang.Object writeReplace()" class="org.jdom2.Namespace" />
		<method signature="java.lang.Object readResolve()" class="org.jdom2.Namespace" />
		<field name="serialVersionUID" class="org.jdom2.ProcessingInstruction" />
		<field name="GROW" class="org.jdom2.StringBin" />
		<field name="DEFAULTCAP" class="org.jdom2.StringBin" />
		<field name="MAXBUCKET" class="org.jdom2.StringBin" />
		<method signature="int size()" class="org.jdom2.StringBin" />
		<field name="serialVersionUID" class="org.jdom2.Text" />
		<field name="EMPTY_STRING" class="org.jdom2.Text" />
		<field name="CHARCNT" class="org.jdom2.Verifier" />
		<field name="MASKXMLCHARACTER" class="org.jdom2.Verifier" />
		<field name="MASKXMLLETTER" class="org.jdom2.Verifier" />
		<field name="MASKXMLSTARTCHAR" class="org.jdom2.Verifier" />
		<field name="MASKXMLNAMECHAR" class="org.jdom2.Verifier" />
		<field name="MASKXMLDIGIT" class="org.jdom2.Verifier" />
		<field name="MASKXMLCOMBINING" class="org.jdom2.Verifier" />
		<field name="MASKURICHAR" class="org.jdom2.Verifier" />
		<field name="MASKXMLLETTERORDIGIT" class="org.jdom2.Verifier" />
		<method signature="void &lt;init&gt;()" class="org.jdom2.Verifier" />
		<field name="serialVersionUID" class="org.jdom2.filter.AbstractFilter" />
		<field name="serialVersionUID" class="org.jdom2.filter.AndFilter" />
		<field name="serialVersionUID" class="org.jdom2.filter.AttributeFilter" />
		<field name="serialVersionUID" class="org.jdom2.filter.ClassFilter" />
		<field name="serialVersionUID" class="org.jdom2.filter.ContentFilter" />
		<field name="ELEMENT" class="org.jdom2.filter.ContentFilter" />
		<field name="CDATA" class="org.jdom2.filter.ContentFilter" />
		<field name="TEXT" class="org.jdom2.filter.ContentFilter" />
		<field name="COMMENT" class="org.jdom2.filter.ContentFilter" />
		<field name="PI" class="org.jdom2.filter.ContentFilter" />
		<field name="ENTITYREF" class="org.jdom2.filter.ContentFilter" />
		<field name="DOCUMENT" class="org.jdom2.filter.ContentFilter" />
		<field name="DOCTYPE" class="org.jdom2.filter.ContentFilter" />
		<field name="serialVersionUID" class="org.jdom2.filter.ElementFilter" />
		<method signature="void &lt;init&gt;()" class="org.jdom2.filter.Filters" />
		<field name="serialVersionUID" class="org.jdom2.filter.NegateFilter" />
		<field name="serialVersionUID" class="org.jdom2.filter.OrFilter" />
		<field name="serialVersionUID" class="org.jdom2.filter.PassThroughFilter" />
		<field name="serialVersionUID" class="org.jdom2.filter.TextOnlyFilter" />
		<field name="serialVersionUID" class="org.jdom2.input.JDOMParseException" />
		<field name="metapattern" class="org.jdom2.input.stax.DTDParser" />
		<method signature="void &lt;init&gt;()" class="org.jdom2.input.stax.DTDParser" />
		<method signature="void &lt;init&gt;()" class="org.jdom2.internal.ArrayCopy" />
		<field name="serialVersionUID" class="org.jdom2.located.LocatedCDATA" />
		<field name="serialVersionUID" class="org.jdom2.located.LocatedComment" />
		<field name="serialVersionUID" class="org.jdom2.located.LocatedDocType" />
		<field name="serialVersionUID" class="org.jdom2.located.LocatedElement" />
		<field name="serialVersionUID" class="org.jdom2.located.LocatedEntityRef" />
		<field name="serialVersionUID" class="org.jdom2.located.LocatedProcessingInstruction" />
		<field name="serialVersionUID" class="org.jdom2.located.LocatedText" />
		<field name="STANDARD_INDENT" class="org.jdom2.output.Format" />
		<field name="STANDARD_ENCODING" class="org.jdom2.output.Format" />
		<field name="CDATAPRE" class="org.jdom2.output.support.AbstractXMLOutputProcessor" />
		<field name="CDATAPOST" class="org.jdom2.output.support.AbstractXMLOutputProcessor" />
		<field name="JDOM_FEATURE" class="org.jdom2.transform.JDOMResult" />
		<field name="JDOM_FEATURE" class="org.jdom2.transform.JDOMSource" />
		<field name="serialVersionUID" class="org.jdom2.transform.XSLTransformException" />
		<class name="org.jdom2.xpath.XPath$XPathString" />
		<field name="serialVersionUID" class="org.jdom2.xpath.XPath" />
		<field name="XPATH_CLASS_PROPERTY" class="org.jdom2.xpath.XPath" />
		<field name="DEFAULT_XPATH_CLASS" class="org.jdom2.xpath.XPath" />
		<field name="JDOM_OBJECT_MODEL_URI" class="org.jdom2.xpath.XPath" />
		<method signature="java.lang.Object writeReplace()" class="org.jdom2.xpath.XPath" />
		<method signature="void &lt;init&gt;()" class="org.jdom2.xpath.XPathHelper" />
		<field name="serialVersionUID" class="org.jdom2.xpath.jaxen.JDOM2Navigator" />
		<field name="serialVersionUID" class="org.jdom2.xpath.jaxen.JDOMCoreNavigator" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jdom2.xpath.jaxen.JDOMCoreNavigator" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jdom2.xpath.jaxen.JDOMCoreNavigator" />
		<field name="serialVersionUID" class="org.jdom2.xpath.jaxen.JDOMNavigator" />
		<field name="serialVersionUID" class="org.jdom2.xpath.jaxen.JDOMXPath" />
		<method signature="void &lt;init&gt;()" class="org.jfree.JCommon" />
		<field name="class$org$jfree$base$config$PropertyFileConfiguration" class="org.jfree.base.AbstractBoot" />
		<method signature="org.jfree.util.Configuration createDefaultHierarchicalConfiguration(java.lang.String,java.lang.String,boolean)" class="org.jfree.base.AbstractBoot" />
		<method signature="java.lang.Class class$(java.lang.String)" class="org.jfree.base.AbstractBoot" />
		<method signature="java.lang.String getLibraryClass()" class="org.jfree.base.BasicProjectInfo$OptionalLibraryHolder" />
		<method signature="boolean isParentSaved()" class="org.jfree.base.config.HierarchicalConfiguration" />
		<method signature="void configurationLoaded()" class="org.jfree.base.config.HierarchicalConfiguration" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.base.config.HierarchicalConfiguration" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.base.config.HierarchicalConfiguration" />
		<field name="DISABLE_LOGGING_DEFAULT" class="org.jfree.base.log.LogConfiguration" />
		<field name="LOGLEVEL" class="org.jfree.base.log.LogConfiguration" />
		<field name="LOGLEVEL_DEFAULT" class="org.jfree.base.log.LogConfiguration" />
		<field name="LOGTARGET" class="org.jfree.base.log.LogConfiguration" />
		<field name="DISABLE_LOGGING" class="org.jfree.base.log.LogConfiguration" />
		<method signature="void &lt;init&gt;()" class="org.jfree.base.log.LogConfiguration" />
		<field name="class$org$jfree$base$modules$AbstractModule" class="org.jfree.base.modules.AbstractModule" />
		<field name="class$org$jfree$base$modules$ModuleInitializer" class="org.jfree.base.modules.AbstractModule" />
		<method signature="void setRequiredModules(org.jfree.base.modules.ModuleInfo[])" class="org.jfree.base.modules.AbstractModule" />
		<method signature="boolean isClassLoadable(java.lang.String)" class="org.jfree.base.modules.AbstractModule" />
		<method signature="boolean isClassLoadable(java.lang.String,java.lang.Class)" class="org.jfree.base.modules.AbstractModule" />
		<method signature="void performExternalInitialize(java.lang.String)" class="org.jfree.base.modules.AbstractModule" />
		<method signature="void performExternalInitialize(java.lang.String,java.lang.Class)" class="org.jfree.base.modules.AbstractModule" />
		<method signature="java.lang.Class class$(java.lang.String)" class="org.jfree.base.modules.AbstractModule" />
		<field name="RETURN_MODULE_LOADED" class="org.jfree.base.modules.PackageManager" />
		<field name="RETURN_MODULE_UNKNOWN" class="org.jfree.base.modules.PackageManager" />
		<field name="RETURN_MODULE_ERROR" class="org.jfree.base.modules.PackageManager" />
		<method signature="void &lt;init&gt;()" class="org.jfree.base.modules.PackageSorter" />
		<field name="STATE_NEW" class="org.jfree.base.modules.PackageState" />
		<field name="STATE_CONFIGURED" class="org.jfree.base.modules.PackageState" />
		<field name="STATE_INITIALIZED" class="org.jfree.base.modules.PackageState" />
		<field name="STATE_ERROR" class="org.jfree.base.modules.PackageState" />
		<field name="serialVersionUID" class="org.jfree.chart.ChartMouseEvent" />
		<field name="serialVersionUID" class="org.jfree.chart.ChartPanel" />
		<field name="DEFAULT_BUFFER_USED" class="org.jfree.chart.ChartPanel" />
		<field name="DEFAULT_WIDTH" class="org.jfree.chart.ChartPanel" />
		<field name="DEFAULT_HEIGHT" class="org.jfree.chart.ChartPanel" />
		<field name="DEFAULT_MINIMUM_DRAW_WIDTH" class="org.jfree.chart.ChartPanel" />
		<field name="DEFAULT_MINIMUM_DRAW_HEIGHT" class="org.jfree.chart.ChartPanel" />
		<field name="DEFAULT_MAXIMUM_DRAW_WIDTH" class="org.jfree.chart.ChartPanel" />
		<field name="DEFAULT_MAXIMUM_DRAW_HEIGHT" class="org.jfree.chart.ChartPanel" />
		<field name="DEFAULT_ZOOM_TRIGGER_DISTANCE" class="org.jfree.chart.ChartPanel" />
		<field name="PROPERTIES_COMMAND" class="org.jfree.chart.ChartPanel" />
		<field name="COPY_COMMAND" class="org.jfree.chart.ChartPanel" />
		<field name="SAVE_COMMAND" class="org.jfree.chart.ChartPanel" />
		<field name="PRINT_COMMAND" class="org.jfree.chart.ChartPanel" />
		<field name="ZOOM_IN_BOTH_COMMAND" class="org.jfree.chart.ChartPanel" />
		<field name="ZOOM_IN_DOMAIN_COMMAND" class="org.jfree.chart.ChartPanel" />
		<field name="ZOOM_IN_RANGE_COMMAND" class="org.jfree.chart.ChartPanel" />
		<field name="ZOOM_OUT_BOTH_COMMAND" class="org.jfree.chart.ChartPanel" />
		<field name="ZOOM_OUT_DOMAIN_COMMAND" class="org.jfree.chart.ChartPanel" />
		<field name="ZOOM_OUT_RANGE_COMMAND" class="org.jfree.chart.ChartPanel" />
		<field name="ZOOM_RESET_BOTH_COMMAND" class="org.jfree.chart.ChartPanel" />
		<field name="ZOOM_RESET_DOMAIN_COMMAND" class="org.jfree.chart.ChartPanel" />
		<field name="ZOOM_RESET_RANGE_COMMAND" class="org.jfree.chart.ChartPanel" />
		<method signature="void setAnchor(java.awt.geom.Point2D)" class="org.jfree.chart.ChartPanel" />
		<method signature="java.awt.geom.Line2D getHorizontalTraceLine()" class="org.jfree.chart.ChartPanel" />
		<method signature="void setHorizontalTraceLine(java.awt.geom.Line2D)" class="org.jfree.chart.ChartPanel" />
		<method signature="java.awt.geom.Line2D getVerticalTraceLine()" class="org.jfree.chart.ChartPanel" />
		<method signature="void setVerticalTraceLine(java.awt.geom.Line2D)" class="org.jfree.chart.ChartPanel" />
		<method signature="javax.swing.JPopupMenu createPopupMenu(boolean,boolean,boolean,boolean)" class="org.jfree.chart.ChartPanel" />
		<field name="serialVersionUID" class="org.jfree.chart.ChartRenderingInfo" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.ChartRenderingInfo" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.ChartRenderingInfo" />
		<field name="serialVersionUID" class="org.jfree.chart.JFreeChart" />
		<field name="DEFAULT_BACKGROUND_IMAGE_ALIGNMENT" class="org.jfree.chart.JFreeChart" />
		<field name="DEFAULT_BACKGROUND_IMAGE_ALPHA" class="org.jfree.chart.JFreeChart" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.JFreeChart" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.JFreeChart" />
		<field name="serialVersionUID" class="org.jfree.chart.LegendItem" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.LegendItem" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.LegendItem" />
		<field name="serialVersionUID" class="org.jfree.chart.LegendItemCollection" />
		<field name="serialVersionUID" class="org.jfree.chart.LegendRenderingOrder" />
		<method signature="java.lang.Object readResolve()" class="org.jfree.chart.LegendRenderingOrder" />
		<method signature="double getZoomFactor()" class="org.jfree.chart.MouseWheelHandler" />
		<method signature="void setZoomFactor(double)" class="org.jfree.chart.MouseWheelHandler" />
		<field name="serialVersionUID" class="org.jfree.chart.PaintMap" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.PaintMap" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.PaintMap" />
		<field name="POLAR_ZOOM_IN_ACTION_COMMAND" class="org.jfree.chart.PolarChartPanel" />
		<field name="POLAR_ZOOM_OUT_ACTION_COMMAND" class="org.jfree.chart.PolarChartPanel" />
		<field name="POLAR_AUTO_RANGE_ACTION_COMMAND" class="org.jfree.chart.PolarChartPanel" />
		<method signature="javax.swing.JPopupMenu createPopupMenu(boolean,boolean,boolean,boolean)" class="org.jfree.chart.PolarChartPanel" />
		<method signature="int getPopupMenuItem(javax.swing.JPopupMenu,java.lang.String)" class="org.jfree.chart.PolarChartPanel" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.StandardChartTheme" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.StandardChartTheme" />
		<field name="serialVersionUID" class="org.jfree.chart.StrokeMap" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.StrokeMap" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.StrokeMap" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.annotations.AbstractAnnotation" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.annotations.AbstractAnnotation" />
		<field name="serialVersionUID" class="org.jfree.chart.annotations.CategoryLineAnnotation" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.annotations.CategoryLineAnnotation" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.annotations.CategoryLineAnnotation" />
		<field name="serialVersionUID" class="org.jfree.chart.annotations.CategoryPointerAnnotation" />
		<field name="DEFAULT_TIP_RADIUS" class="org.jfree.chart.annotations.CategoryPointerAnnotation" />
		<field name="DEFAULT_BASE_RADIUS" class="org.jfree.chart.annotations.CategoryPointerAnnotation" />
		<field name="DEFAULT_LABEL_OFFSET" class="org.jfree.chart.annotations.CategoryPointerAnnotation" />
		<field name="DEFAULT_ARROW_LENGTH" class="org.jfree.chart.annotations.CategoryPointerAnnotation" />
		<field name="DEFAULT_ARROW_WIDTH" class="org.jfree.chart.annotations.CategoryPointerAnnotation" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.annotations.CategoryPointerAnnotation" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.annotations.CategoryPointerAnnotation" />
		<field name="serialVersionUID" class="org.jfree.chart.annotations.CategoryTextAnnotation" />
		<field name="serialVersionUID" class="org.jfree.chart.annotations.TextAnnotation" />
		<field name="DEFAULT_ROTATION_ANGLE" class="org.jfree.chart.annotations.TextAnnotation" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.annotations.TextAnnotation" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.annotations.TextAnnotation" />
		<field name="serialVersionUID" class="org.jfree.chart.annotations.XYBoxAnnotation" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.annotations.XYBoxAnnotation" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.annotations.XYBoxAnnotation" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.annotations.XYDataImageAnnotation" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.annotations.XYDataImageAnnotation" />
		<field name="serialVersionUID" class="org.jfree.chart.annotations.XYDrawableAnnotation" />
		<field name="serialVersionUID" class="org.jfree.chart.annotations.XYImageAnnotation" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.annotations.XYImageAnnotation" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.annotations.XYImageAnnotation" />
		<field name="serialVersionUID" class="org.jfree.chart.annotations.XYLineAnnotation" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.annotations.XYLineAnnotation" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.annotations.XYLineAnnotation" />
		<field name="serialVersionUID" class="org.jfree.chart.annotations.XYPointerAnnotation" />
		<field name="DEFAULT_TIP_RADIUS" class="org.jfree.chart.annotations.XYPointerAnnotation" />
		<field name="DEFAULT_BASE_RADIUS" class="org.jfree.chart.annotations.XYPointerAnnotation" />
		<field name="DEFAULT_LABEL_OFFSET" class="org.jfree.chart.annotations.XYPointerAnnotation" />
		<field name="DEFAULT_ARROW_LENGTH" class="org.jfree.chart.annotations.XYPointerAnnotation" />
		<field name="DEFAULT_ARROW_WIDTH" class="org.jfree.chart.annotations.XYPointerAnnotation" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.annotations.XYPointerAnnotation" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.annotations.XYPointerAnnotation" />
		<field name="serialVersionUID" class="org.jfree.chart.annotations.XYPolygonAnnotation" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.annotations.XYPolygonAnnotation" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.annotations.XYPolygonAnnotation" />
		<field name="serialVersionUID" class="org.jfree.chart.annotations.XYShapeAnnotation" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.annotations.XYShapeAnnotation" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.annotations.XYShapeAnnotation" />
		<field name="serialVersionUID" class="org.jfree.chart.annotations.XYTextAnnotation" />
		<field name="DEFAULT_ROTATION_ANGLE" class="org.jfree.chart.annotations.XYTextAnnotation" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.annotations.XYTextAnnotation" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.annotations.XYTextAnnotation" />
		<field name="serialVersionUID" class="org.jfree.chart.annotations.XYTitleAnnotation" />
		<field name="serialVersionUID" class="org.jfree.chart.axis.Axis" />
		<field name="DEFAULT_AXIS_VISIBLE" class="org.jfree.chart.axis.Axis" />
		<field name="DEFAULT_TICK_LABELS_VISIBLE" class="org.jfree.chart.axis.Axis" />
		<field name="DEFAULT_TICK_MARKS_VISIBLE" class="org.jfree.chart.axis.Axis" />
		<field name="DEFAULT_TICK_MARK_INSIDE_LENGTH" class="org.jfree.chart.axis.Axis" />
		<field name="DEFAULT_TICK_MARK_OUTSIDE_LENGTH" class="org.jfree.chart.axis.Axis" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.axis.Axis" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.axis.Axis" />
		<field name="serialVersionUID" class="org.jfree.chart.axis.AxisLocation" />
		<method signature="java.lang.Object readResolve()" class="org.jfree.chart.axis.AxisLocation" />
		<field name="serialVersionUID" class="org.jfree.chart.axis.AxisSpace" />
		<field name="serialVersionUID" class="org.jfree.chart.axis.CategoryAnchor" />
		<method signature="java.lang.Object readResolve()" class="org.jfree.chart.axis.CategoryAnchor" />
		<field name="serialVersionUID" class="org.jfree.chart.axis.CategoryAxis" />
		<field name="DEFAULT_AXIS_MARGIN" class="org.jfree.chart.axis.CategoryAxis" />
		<field name="DEFAULT_CATEGORY_MARGIN" class="org.jfree.chart.axis.CategoryAxis" />
		<method signature="org.jfree.chart.axis.AxisState drawCategoryLabels(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)" class="org.jfree.chart.axis.CategoryAxis" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.axis.CategoryAxis" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.axis.CategoryAxis" />
		<method signature="java.util.Map readPaintMap(java.io.ObjectInputStream)" class="org.jfree.chart.axis.CategoryAxis" />
		<method signature="void writePaintMap(java.util.Map,java.io.ObjectOutputStream)" class="org.jfree.chart.axis.CategoryAxis" />
		<field name="serialVersionUID" class="org.jfree.chart.axis.CategoryAxis3D" />
		<field name="serialVersionUID" class="org.jfree.chart.axis.CategoryLabelPosition" />
		<field name="serialVersionUID" class="org.jfree.chart.axis.CategoryLabelPositions" />
		<field name="serialVersionUID" class="org.jfree.chart.axis.CategoryLabelWidthType" />
		<method signature="java.lang.Object readResolve()" class="org.jfree.chart.axis.CategoryLabelWidthType" />
		<field name="serialVersionUID" class="org.jfree.chart.axis.ColorBar" />
		<field name="DEFAULT_COLORBAR_THICKNESS" class="org.jfree.chart.axis.ColorBar" />
		<field name="DEFAULT_COLORBAR_THICKNESS_PERCENT" class="org.jfree.chart.axis.ColorBar" />
		<field name="DEFAULT_OUTERGAP" class="org.jfree.chart.axis.ColorBar" />
		<field name="N" class="org.jfree.chart.axis.CompassFormat" />
		<field name="E" class="org.jfree.chart.axis.CompassFormat" />
		<field name="S" class="org.jfree.chart.axis.CompassFormat" />
		<field name="W" class="org.jfree.chart.axis.CompassFormat" />
		<field name="serialVersionUID" class="org.jfree.chart.axis.CyclicNumberAxis" />
		<method signature="void selectHorizontalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.axis.CyclicNumberAxis" />
		<method signature="void selectVerticalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.axis.CyclicNumberAxis" />
		<method signature="java.util.List refreshVerticalTicks(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.axis.CyclicNumberAxis" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.axis.CyclicNumberAxis" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.axis.CyclicNumberAxis" />
		<field name="serialVersionUID" class="org.jfree.chart.axis.DateAxis" />
		<field name="DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS" class="org.jfree.chart.axis.DateAxis" />
		<field name="serialVersionUID" class="org.jfree.chart.axis.DateTickMarkPosition" />
		<method signature="java.lang.Object readResolve()" class="org.jfree.chart.axis.DateTickMarkPosition" />
		<field name="serialVersionUID" class="org.jfree.chart.axis.DateTickUnit" />
		<field name="YEAR" class="org.jfree.chart.axis.DateTickUnit" />
		<field name="MONTH" class="org.jfree.chart.axis.DateTickUnit" />
		<field name="DAY" class="org.jfree.chart.axis.DateTickUnit" />
		<field name="HOUR" class="org.jfree.chart.axis.DateTickUnit" />
		<field name="MINUTE" class="org.jfree.chart.axis.DateTickUnit" />
		<field name="SECOND" class="org.jfree.chart.axis.DateTickUnit" />
		<field name="MILLISECOND" class="org.jfree.chart.axis.DateTickUnit" />
		<method signature="java.lang.Object readResolve()" class="org.jfree.chart.axis.DateTickUnitType" />
		<field name="serialVersionUID" class="org.jfree.chart.axis.ExtendedCategoryAxis" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.axis.ExtendedCategoryAxis" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.axis.ExtendedCategoryAxis" />
		<field name="serialVersionUID" class="org.jfree.chart.axis.LogarithmicAxis" />
		<field name="SMALL_LOG_VALUE" class="org.jfree.chart.axis.LogarithmicAxis" />
		<field name="serialVersionUID" class="org.jfree.chart.axis.MarkerAxisBand" />
		<field name="serialVersionUID" class="org.jfree.chart.axis.NumberAxis" />
		<field name="DEFAULT_AUTO_RANGE_INCLUDES_ZERO" class="org.jfree.chart.axis.NumberAxis" />
		<field name="DEFAULT_AUTO_RANGE_STICKY_ZERO" class="org.jfree.chart.axis.NumberAxis" />
		<field name="DEFAULT_VERTICAL_TICK_LABELS" class="org.jfree.chart.axis.NumberAxis" />
		<method signature="double calculateHighestVisibleTickValue()" class="org.jfree.chart.axis.NumberAxis" />
		<field name="serialVersionUID" class="org.jfree.chart.axis.NumberAxis3D" />
		<field name="serialVersionUID" class="org.jfree.chart.axis.NumberTickUnit" />
		<field name="serialVersionUID" class="org.jfree.chart.axis.PeriodAxis" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.axis.PeriodAxis" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.axis.PeriodAxis" />
		<field name="serialVersionUID" class="org.jfree.chart.axis.PeriodAxisLabelInfo" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.axis.PeriodAxisLabelInfo" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.axis.PeriodAxisLabelInfo" />
		<field name="serialVersionUID" class="org.jfree.chart.axis.QuarterDateFormat" />
		<field name="serialVersionUID" class="org.jfree.chart.axis.SegmentedTimeline" />
		<field name="DAY_SEGMENT_SIZE" class="org.jfree.chart.axis.SegmentedTimeline" />
		<field name="HOUR_SEGMENT_SIZE" class="org.jfree.chart.axis.SegmentedTimeline" />
		<field name="FIFTEEN_MINUTE_SEGMENT_SIZE" class="org.jfree.chart.axis.SegmentedTimeline" />
		<field name="MINUTE_SEGMENT_SIZE" class="org.jfree.chart.axis.SegmentedTimeline" />
		<field name="serialVersionUID" class="org.jfree.chart.axis.SubCategoryAxis" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.axis.SubCategoryAxis" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.axis.SubCategoryAxis" />
		<field name="serialVersionUID" class="org.jfree.chart.axis.SymbolAxis" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.axis.SymbolAxis" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.axis.SymbolAxis" />
		<field name="serialVersionUID" class="org.jfree.chart.axis.Tick" />
		<method signature="java.lang.Object readResolve()" class="org.jfree.chart.axis.TickType" />
		<field name="serialVersionUID" class="org.jfree.chart.axis.TickUnit" />
		<field name="serialVersionUID" class="org.jfree.chart.axis.TickUnits" />
		<field name="serialVersionUID" class="org.jfree.chart.axis.ValueAxis" />
		<field name="DEFAULT_AUTO_RANGE" class="org.jfree.chart.axis.ValueAxis" />
		<field name="DEFAULT_INVERTED" class="org.jfree.chart.axis.ValueAxis" />
		<field name="DEFAULT_AUTO_RANGE_MINIMUM_SIZE" class="org.jfree.chart.axis.ValueAxis" />
		<field name="DEFAULT_LOWER_MARGIN" class="org.jfree.chart.axis.ValueAxis" />
		<field name="DEFAULT_UPPER_MARGIN" class="org.jfree.chart.axis.ValueAxis" />
		<field name="DEFAULT_LOWER_BOUND" class="org.jfree.chart.axis.ValueAxis" />
		<field name="DEFAULT_UPPER_BOUND" class="org.jfree.chart.axis.ValueAxis" />
		<field name="DEFAULT_AUTO_TICK_UNIT_SELECTION" class="org.jfree.chart.axis.ValueAxis" />
		<field name="MAXIMUM_TICK_COUNT" class="org.jfree.chart.axis.ValueAxis" />
		<field name="autoTickIndex" class="org.jfree.chart.axis.ValueAxis" />
		<method signature="int getAutoTickIndex()" class="org.jfree.chart.axis.ValueAxis" />
		<method signature="void setAutoTickIndex(int)" class="org.jfree.chart.axis.ValueAxis" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.axis.ValueAxis" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.axis.ValueAxis" />
		<field name="serialVersionUID" class="org.jfree.chart.block.AbstractBlock" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.block.AbstractBlock" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.block.AbstractBlock" />
		<field name="serialVersionUID" class="org.jfree.chart.block.BlockBorder" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.block.BlockBorder" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.block.BlockBorder" />
		<field name="serialVersionUID" class="org.jfree.chart.block.BlockContainer" />
		<field name="serialVersionUID" class="org.jfree.chart.block.BorderArrangement" />
		<field name="serialVersionUID" class="org.jfree.chart.block.CenterArrangement" />
		<field name="serialVersionUID" class="org.jfree.chart.block.ColorBlock" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.block.ColorBlock" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.block.ColorBlock" />
		<field name="serialVersionUID" class="org.jfree.chart.block.ColumnArrangement" />
		<field name="serialVersionUID" class="org.jfree.chart.block.EmptyBlock" />
		<field name="serialVersionUID" class="org.jfree.chart.block.FlowArrangement" />
		<field name="serialVersionUID" class="org.jfree.chart.block.GridArrangement" />
		<field name="serialVersionUID" class="org.jfree.chart.block.LabelBlock" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.block.LabelBlock" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.block.LabelBlock" />
		<field name="serialVersionUID" class="org.jfree.chart.block.LengthConstraintType" />
		<method signature="java.lang.Object readResolve()" class="org.jfree.chart.block.LengthConstraintType" />
		<field name="serialVersionUID" class="org.jfree.chart.block.LineBorder" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.block.LineBorder" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.block.LineBorder" />
		<field name="serialVersionUID" class="org.jfree.chart.demo.BarChartDemo1" />
		<field name="serialVersionUID" class="org.jfree.chart.demo.PieChartDemo1" />
		<field name="serialVersionUID" class="org.jfree.chart.demo.TimeSeriesChartDemo1" />
		<method signature="void &lt;init&gt;()" class="org.jfree.chart.editor.ChartEditorManager" />
		<method signature="org.jfree.chart.editor.DefaultTitleEditor getTitleEditor()" class="org.jfree.chart.editor.DefaultChartEditor" />
		<method signature="org.jfree.chart.editor.DefaultPlotEditor getPlotEditor()" class="org.jfree.chart.editor.DefaultChartEditor" />
		<field name="ORIENTATION_VERTICAL" class="org.jfree.chart.editor.DefaultPlotEditor" />
		<field name="ORIENTATION_HORIZONTAL" class="org.jfree.chart.editor.DefaultPlotEditor" />
		<method signature="org.jfree.chart.editor.DefaultAxisEditor getDomainAxisPropertyEditPanel()" class="org.jfree.chart.editor.DefaultPlotEditor" />
		<method signature="org.jfree.chart.editor.DefaultAxisEditor getRangeAxisPropertyEditPanel()" class="org.jfree.chart.editor.DefaultPlotEditor" />
		<method signature="void setAutoTickUnitSelection(boolean)" class="org.jfree.chart.editor.DefaultValueAxisEditor" />
		<method signature="boolean isAutoRange()" class="org.jfree.chart.editor.DefaultValueAxisEditor" />
		<method signature="double getMinimumValue()" class="org.jfree.chart.editor.DefaultValueAxisEditor" />
		<method signature="double getMaximumValue()" class="org.jfree.chart.editor.DefaultValueAxisEditor" />
		<field name="PNG" class="org.jfree.chart.encoders.ImageFormat" />
		<field name="JPEG" class="org.jfree.chart.encoders.ImageFormat" />
		<field name="GIF" class="org.jfree.chart.encoders.ImageFormat" />
		<field name="serialVersionUID" class="org.jfree.chart.entity.AxisEntity" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.entity.AxisEntity" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.entity.AxisEntity" />
		<field name="serialVersionUID" class="org.jfree.chart.entity.CategoryItemEntity" />
		<field name="serialVersionUID" class="org.jfree.chart.entity.ChartEntity" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.entity.ChartEntity" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.entity.ChartEntity" />
		<field name="serialVersionUID" class="org.jfree.chart.entity.ContourEntity" />
		<field name="serialVersionUID" class="org.jfree.chart.entity.JFreeChartEntity" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.entity.JFreeChartEntity" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.entity.JFreeChartEntity" />
		<field name="serialVersionUID" class="org.jfree.chart.entity.LegendItemEntity" />
		<field name="serialVersionUID" class="org.jfree.chart.entity.PieSectionEntity" />
		<field name="serialVersionUID" class="org.jfree.chart.entity.PlotEntity" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.entity.PlotEntity" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.entity.PlotEntity" />
		<field name="serialVersionUID" class="org.jfree.chart.entity.StandardEntityCollection" />
		<field name="serialVersionUID" class="org.jfree.chart.entity.TickLabelEntity" />
		<field name="serialVersionUID" class="org.jfree.chart.entity.TitleEntity" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.entity.TitleEntity" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.entity.TitleEntity" />
		<field name="serialVersionUID" class="org.jfree.chart.entity.XYAnnotationEntity" />
		<field name="serialVersionUID" class="org.jfree.chart.entity.XYItemEntity" />
		<field name="serialVersionUID" class="org.jfree.chart.event.ChartChangeEventType" />
		<method signature="java.lang.Object readResolve()" class="org.jfree.chart.event.ChartChangeEventType" />
		<field name="DRAWING_STARTED" class="org.jfree.chart.event.ChartProgressEvent" />
		<field name="DRAWING_FINISHED" class="org.jfree.chart.event.ChartProgressEvent" />
		<field name="serialVersionUID" class="org.jfree.chart.labels.AbstractCategoryItemLabelGenerator" />
		<field name="serialVersionUID" class="org.jfree.chart.labels.AbstractPieItemLabelGenerator" />
		<field name="serialVersionUID" class="org.jfree.chart.labels.AbstractXYItemLabelGenerator" />
		<method signature="void &lt;init&gt;()" class="org.jfree.chart.labels.AbstractXYItemLabelGenerator" />
		<field name="serialVersionUID" class="org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator" />
		<field name="DEFAULT_TOOL_TIP_FORMAT" class="org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator" />
		<field name="serialVersionUID" class="org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator" />
		<field name="DEFAULT_TOOL_TIP_FORMAT" class="org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator" />
		<field name="serialVersionUID" class="org.jfree.chart.labels.BubbleXYItemLabelGenerator" />
		<field name="DEFAULT_FORMAT_STRING" class="org.jfree.chart.labels.BubbleXYItemLabelGenerator" />
		<field name="serialVersionUID" class="org.jfree.chart.labels.CustomXYToolTipGenerator" />
		<field name="serialVersionUID" class="org.jfree.chart.labels.HighLowItemLabelGenerator" />
		<field name="serialVersionUID" class="org.jfree.chart.labels.IntervalCategoryItemLabelGenerator" />
		<field name="DEFAULT_LABEL_FORMAT_STRING" class="org.jfree.chart.labels.IntervalCategoryItemLabelGenerator" />
		<field name="serialVersionUID" class="org.jfree.chart.labels.IntervalCategoryToolTipGenerator" />
		<field name="DEFAULT_TOOL_TIP_FORMAT_STRING" class="org.jfree.chart.labels.IntervalCategoryToolTipGenerator" />
		<field name="DEFAULT_ITEM_LABEL_FORMAT" class="org.jfree.chart.labels.IntervalXYItemLabelGenerator" />
		<field name="serialVersionUID" class="org.jfree.chart.labels.ItemLabelAnchor" />
		<method signature="java.lang.Object readResolve()" class="org.jfree.chart.labels.ItemLabelAnchor" />
		<field name="serialVersionUID" class="org.jfree.chart.labels.ItemLabelPosition" />
		<field name="serialVersionUID" class="org.jfree.chart.labels.MultipleXYSeriesLabelGenerator" />
		<field name="DEFAULT_LABEL_FORMAT" class="org.jfree.chart.labels.MultipleXYSeriesLabelGenerator" />
		<field name="serialVersionUID" class="org.jfree.chart.labels.StandardCategoryItemLabelGenerator" />
		<field name="DEFAULT_LABEL_FORMAT_STRING" class="org.jfree.chart.labels.StandardCategoryItemLabelGenerator" />
		<field name="serialVersionUID" class="org.jfree.chart.labels.StandardCategorySeriesLabelGenerator" />
		<field name="DEFAULT_LABEL_FORMAT" class="org.jfree.chart.labels.StandardCategorySeriesLabelGenerator" />
		<field name="serialVersionUID" class="org.jfree.chart.labels.StandardCategoryToolTipGenerator" />
		<field name="DEFAULT_TOOL_TIP_FORMAT_STRING" class="org.jfree.chart.labels.StandardCategoryToolTipGenerator" />
		<field name="serialVersionUID" class="org.jfree.chart.labels.StandardContourToolTipGenerator" />
		<field name="serialVersionUID" class="org.jfree.chart.labels.StandardPieSectionLabelGenerator" />
		<field name="DEFAULT_SECTION_LABEL_FORMAT" class="org.jfree.chart.labels.StandardPieSectionLabelGenerator" />
		<field name="serialVersionUID" class="org.jfree.chart.labels.StandardPieToolTipGenerator" />
		<field name="DEFAULT_TOOLTIP_FORMAT" class="org.jfree.chart.labels.StandardPieToolTipGenerator" />
		<field name="DEFAULT_SECTION_LABEL_FORMAT" class="org.jfree.chart.labels.StandardPieToolTipGenerator" />
		<field name="serialVersionUID" class="org.jfree.chart.labels.StandardXYItemLabelGenerator" />
		<field name="DEFAULT_ITEM_LABEL_FORMAT" class="org.jfree.chart.labels.StandardXYItemLabelGenerator" />
		<field name="serialVersionUID" class="org.jfree.chart.labels.StandardXYSeriesLabelGenerator" />
		<field name="DEFAULT_LABEL_FORMAT" class="org.jfree.chart.labels.StandardXYSeriesLabelGenerator" />
		<field name="serialVersionUID" class="org.jfree.chart.labels.StandardXYToolTipGenerator" />
		<field name="DEFAULT_TOOL_TIP_FORMAT" class="org.jfree.chart.labels.StandardXYToolTipGenerator" />
		<field name="serialVersionUID" class="org.jfree.chart.labels.StandardXYZToolTipGenerator" />
		<field name="DEFAULT_TOOL_TIP_FORMAT" class="org.jfree.chart.labels.StandardXYZToolTipGenerator" />
		<field name="serialVersionUID" class="org.jfree.chart.labels.SymbolicXYItemLabelGenerator" />
		<field name="serialVersionUID" class="org.jfree.chart.needle.ArrowNeedle" />
		<field name="serialVersionUID" class="org.jfree.chart.needle.LineNeedle" />
		<field name="serialVersionUID" class="org.jfree.chart.needle.LongNeedle" />
		<field name="serialVersionUID" class="org.jfree.chart.needle.MeterNeedle" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.needle.MeterNeedle" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.needle.MeterNeedle" />
		<field name="serialVersionUID" class="org.jfree.chart.needle.MiddlePinNeedle" />
		<field name="serialVersionUID" class="org.jfree.chart.needle.PinNeedle" />
		<field name="serialVersionUID" class="org.jfree.chart.needle.PlumNeedle" />
		<field name="serialVersionUID" class="org.jfree.chart.needle.PointerNeedle" />
		<field name="serialVersionUID" class="org.jfree.chart.needle.ShipNeedle" />
		<field name="serialVersionUID" class="org.jfree.chart.needle.WindNeedle" />
		<field name="serialVersionUID" class="org.jfree.chart.plot.CategoryPlot" />
		<field name="DEFAULT_DOMAIN_GRIDLINES_VISIBLE" class="org.jfree.chart.plot.CategoryPlot" />
		<field name="DEFAULT_RANGE_GRIDLINES_VISIBLE" class="org.jfree.chart.plot.CategoryPlot" />
		<field name="DEFAULT_CROSSHAIR_VISIBLE" class="org.jfree.chart.plot.CategoryPlot" />
		<method signature="void drawRangeLine(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,java.awt.Stroke,java.awt.Paint)" class="org.jfree.chart.plot.CategoryPlot" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.plot.CategoryPlot" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.plot.CategoryPlot" />
		<field name="serialVersionUID" class="org.jfree.chart.plot.ColorPalette" />
		<field name="serialVersionUID" class="org.jfree.chart.plot.CombinedDomainCategoryPlot" />
		<field name="serialVersionUID" class="org.jfree.chart.plot.CombinedDomainXYPlot" />
		<field name="serialVersionUID" class="org.jfree.chart.plot.CombinedRangeCategoryPlot" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.plot.CombinedRangeCategoryPlot" />
		<field name="serialVersionUID" class="org.jfree.chart.plot.CombinedRangeXYPlot" />
		<field name="serialVersionUID" class="org.jfree.chart.plot.CompassPlot" />
		<field name="NO_LABELS" class="org.jfree.chart.plot.CompassPlot" />
		<field name="VALUE_LABELS" class="org.jfree.chart.plot.CompassPlot" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.plot.CompassPlot" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.plot.CompassPlot" />
		<field name="serialVersionUID" class="org.jfree.chart.plot.ContourPlot" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.plot.Crosshair" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.plot.Crosshair" />
		<field name="serialVersionUID" class="org.jfree.chart.plot.DatasetRenderingOrder" />
		<method signature="java.lang.Object readResolve()" class="org.jfree.chart.plot.DatasetRenderingOrder" />
		<field name="serialVersionUID" class="org.jfree.chart.plot.DefaultDrawingSupplier" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.plot.DefaultDrawingSupplier" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.plot.DefaultDrawingSupplier" />
		<field name="serialVersionUID" class="org.jfree.chart.plot.DialShape" />
		<method signature="java.lang.Object readResolve()" class="org.jfree.chart.plot.DialShape" />
		<field name="serialVersionUID" class="org.jfree.chart.plot.FastScatterPlot" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.plot.FastScatterPlot" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.plot.FastScatterPlot" />
		<field name="serialVersionUID" class="org.jfree.chart.plot.GreyPalette" />
		<field name="serialVersionUID" class="org.jfree.chart.plot.IntervalMarker" />
		<field name="serialVersionUID" class="org.jfree.chart.plot.JThermometer" />
		<field name="serialVersionUID" class="org.jfree.chart.plot.Marker" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.plot.Marker" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.plot.Marker" />
		<field name="serialVersionUID" class="org.jfree.chart.plot.MeterInterval" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.plot.MeterInterval" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.plot.MeterInterval" />
		<field name="serialVersionUID" class="org.jfree.chart.plot.MeterPlot" />
		<field name="DEFAULT_METER_ANGLE" class="org.jfree.chart.plot.MeterPlot" />
		<field name="DEFAULT_BORDER_SIZE" class="org.jfree.chart.plot.MeterPlot" />
		<field name="DEFAULT_CIRCLE_SIZE" class="org.jfree.chart.plot.MeterPlot" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.plot.MeterPlot" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.plot.MeterPlot" />
		<field name="serialVersionUID" class="org.jfree.chart.plot.MultiplePiePlot" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.plot.MultiplePiePlot" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.plot.MultiplePiePlot" />
		<method signature="void adjustInwards()" class="org.jfree.chart.plot.PieLabelDistributor" />
		<method signature="java.lang.Object readResolve()" class="org.jfree.chart.plot.PieLabelLinkStyle" />
		<field name="serialVersionUID" class="org.jfree.chart.plot.PiePlot" />
		<field name="DEFAULT_INTERIOR_GAP" class="org.jfree.chart.plot.PiePlot" />
		<field name="MAX_INTERIOR_GAP" class="org.jfree.chart.plot.PiePlot" />
		<field name="DEFAULT_START_ANGLE" class="org.jfree.chart.plot.PiePlot" />
		<field name="DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW" class="org.jfree.chart.plot.PiePlot" />
		<field name="DEBUG_DRAW_INTERIOR" class="org.jfree.chart.plot.PiePlot" />
		<field name="DEBUG_DRAW_LINK_AREA" class="org.jfree.chart.plot.PiePlot" />
		<field name="DEBUG_DRAW_PIE_AREA" class="org.jfree.chart.plot.PiePlot" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.plot.PiePlot" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.plot.PiePlot" />
		<field name="serialVersionUID" class="org.jfree.chart.plot.PiePlot3D" />
		<field name="serialVersionUID" class="org.jfree.chart.plot.Plot" />
		<field name="DEFAULT_FOREGROUND_ALPHA" class="org.jfree.chart.plot.Plot" />
		<field name="DEFAULT_BACKGROUND_ALPHA" class="org.jfree.chart.plot.Plot" />
		<field name="MINIMUM_WIDTH_TO_DRAW" class="org.jfree.chart.plot.Plot" />
		<field name="MINIMUM_HEIGHT_TO_DRAW" class="org.jfree.chart.plot.Plot" />
		<method signature="double getRectX(double,double,double,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.plot.Plot" />
		<method signature="double getRectY(double,double,double,org.jfree.ui.RectangleEdge)" class="org.jfree.chart.plot.Plot" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.plot.Plot" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.plot.Plot" />
		<field name="serialVersionUID" class="org.jfree.chart.plot.PlotOrientation" />
		<method signature="java.lang.Object readResolve()" class="org.jfree.chart.plot.PlotOrientation" />
		<field name="serialVersionUID" class="org.jfree.chart.plot.PlotRenderingInfo" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.plot.PlotRenderingInfo" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.plot.PlotRenderingInfo" />
		<field name="serialVersionUID" class="org.jfree.chart.plot.PolarAxisLocation" />
		<method signature="java.lang.Object readResolve()" class="org.jfree.chart.plot.PolarAxisLocation" />
		<field name="serialVersionUID" class="org.jfree.chart.plot.PolarPlot" />
		<field name="DEFAULT_MARGIN" class="org.jfree.chart.plot.PolarPlot" />
		<field name="ANNOTATION_MARGIN" class="org.jfree.chart.plot.PolarPlot" />
		<field name="DEFAULT_ANGLE_TICK_UNIT_SIZE" class="org.jfree.chart.plot.PolarPlot" />
		<field name="DEFAULT_ANGLE_OFFSET" class="org.jfree.chart.plot.PolarPlot" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.plot.PolarPlot" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.plot.PolarPlot" />
		<method signature="org.jfree.chart.axis.AxisState drawAxis(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)" class="org.jfree.chart.plot.PolarPlot" />
		<field name="serialVersionUID" class="org.jfree.chart.plot.RainbowPalette" />
		<field name="serialVersionUID" class="org.jfree.chart.plot.RingPlot" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.plot.RingPlot" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.plot.RingPlot" />
		<field name="serialVersionUID" class="org.jfree.chart.plot.SeriesRenderingOrder" />
		<method signature="java.lang.Object readResolve()" class="org.jfree.chart.plot.SeriesRenderingOrder" />
		<field name="serialVersionUID" class="org.jfree.chart.plot.SpiderWebPlot" />
		<field name="DEFAULT_HEAD" class="org.jfree.chart.plot.SpiderWebPlot" />
		<field name="DEFAULT_AXIS_LABEL_GAP" class="org.jfree.chart.plot.SpiderWebPlot" />
		<field name="DEFAULT_INTERIOR_GAP" class="org.jfree.chart.plot.SpiderWebPlot" />
		<field name="MAX_INTERIOR_GAP" class="org.jfree.chart.plot.SpiderWebPlot" />
		<field name="DEFAULT_START_ANGLE" class="org.jfree.chart.plot.SpiderWebPlot" />
		<field name="DEFAULT_MAX_VALUE" class="org.jfree.chart.plot.SpiderWebPlot" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.plot.SpiderWebPlot" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.plot.SpiderWebPlot" />
		<field name="serialVersionUID" class="org.jfree.chart.plot.ThermometerPlot" />
		<field name="UNITS_NONE" class="org.jfree.chart.plot.ThermometerPlot" />
		<field name="UNITS_FAHRENHEIT" class="org.jfree.chart.plot.ThermometerPlot" />
		<field name="UNITS_CELCIUS" class="org.jfree.chart.plot.ThermometerPlot" />
		<field name="UNITS_KELVIN" class="org.jfree.chart.plot.ThermometerPlot" />
		<field name="NONE" class="org.jfree.chart.plot.ThermometerPlot" />
		<field name="RIGHT" class="org.jfree.chart.plot.ThermometerPlot" />
		<field name="LEFT" class="org.jfree.chart.plot.ThermometerPlot" />
		<field name="BULB" class="org.jfree.chart.plot.ThermometerPlot" />
		<field name="NORMAL" class="org.jfree.chart.plot.ThermometerPlot" />
		<field name="WARNING" class="org.jfree.chart.plot.ThermometerPlot" />
		<field name="CRITICAL" class="org.jfree.chart.plot.ThermometerPlot" />
		<field name="BULB_RADIUS" class="org.jfree.chart.plot.ThermometerPlot" />
		<field name="BULB_DIAMETER" class="org.jfree.chart.plot.ThermometerPlot" />
		<field name="COLUMN_RADIUS" class="org.jfree.chart.plot.ThermometerPlot" />
		<field name="COLUMN_DIAMETER" class="org.jfree.chart.plot.ThermometerPlot" />
		<field name="GAP_RADIUS" class="org.jfree.chart.plot.ThermometerPlot" />
		<field name="GAP_DIAMETER" class="org.jfree.chart.plot.ThermometerPlot" />
		<field name="AXIS_GAP" class="org.jfree.chart.plot.ThermometerPlot" />
		<field name="RANGE_LOW" class="org.jfree.chart.plot.ThermometerPlot" />
		<field name="RANGE_HIGH" class="org.jfree.chart.plot.ThermometerPlot" />
		<field name="DISPLAY_LOW" class="org.jfree.chart.plot.ThermometerPlot" />
		<field name="DISPLAY_HIGH" class="org.jfree.chart.plot.ThermometerPlot" />
		<field name="DEFAULT_LOWER_BOUND" class="org.jfree.chart.plot.ThermometerPlot" />
		<field name="DEFAULT_UPPER_BOUND" class="org.jfree.chart.plot.ThermometerPlot" />
		<field name="DEFAULT_BULB_RADIUS" class="org.jfree.chart.plot.ThermometerPlot" />
		<field name="DEFAULT_COLUMN_RADIUS" class="org.jfree.chart.plot.ThermometerPlot" />
		<field name="DEFAULT_GAP" class="org.jfree.chart.plot.ThermometerPlot" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.plot.ThermometerPlot" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.plot.ThermometerPlot" />
		<field name="serialVersionUID" class="org.jfree.chart.plot.WaferMapPlot" />
		<field name="DEFAULT_CROSSHAIR_VISIBLE" class="org.jfree.chart.plot.WaferMapPlot" />
		<field name="serialVersionUID" class="org.jfree.chart.plot.XYPlot" />
		<field name="DEFAULT_CROSSHAIR_VISIBLE" class="org.jfree.chart.plot.XYPlot" />
		<method signature="void drawHorizontalLine(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,java.awt.Stroke,java.awt.Paint)" class="org.jfree.chart.plot.XYPlot" />
		<method signature="void drawVerticalLine(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,java.awt.Stroke,java.awt.Paint)" class="org.jfree.chart.plot.XYPlot" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.plot.XYPlot" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.plot.XYPlot" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.plot.dial.AbstractDialLayer" />
		<field name="serialVersionUID" class="org.jfree.chart.plot.dial.ArcDialFrame" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.plot.dial.ArcDialFrame" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.plot.dial.ArcDialFrame" />
		<field name="serialVersionUID" class="org.jfree.chart.plot.dial.DialBackground" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.plot.dial.DialBackground" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.plot.dial.DialBackground" />
		<field name="serialVersionUID" class="org.jfree.chart.plot.dial.DialCap" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.plot.dial.DialCap" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.plot.dial.DialCap" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.plot.dial.DialPlot" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.plot.dial.DialPlot" />
		<field name="serialVersionUID" class="org.jfree.chart.plot.dial.DialPointer$Pin" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.plot.dial.DialPointer$Pin" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.plot.dial.DialPointer$Pin" />
		<field name="serialVersionUID" class="org.jfree.chart.plot.dial.DialPointer$Pointer" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.plot.dial.DialPointer$Pointer" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.plot.dial.DialPointer$Pointer" />
		<method signature="void &lt;init&gt;()" class="org.jfree.chart.plot.dial.DialPointer" />
		<field name="serialVersionUID" class="org.jfree.chart.plot.dial.DialTextAnnotation" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.plot.dial.DialTextAnnotation" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.plot.dial.DialTextAnnotation" />
		<field name="serialVersionUID" class="org.jfree.chart.plot.dial.DialValueIndicator" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.plot.dial.DialValueIndicator" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.plot.dial.DialValueIndicator" />
		<field name="serialVersionUID" class="org.jfree.chart.plot.dial.StandardDialFrame" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.plot.dial.StandardDialFrame" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.plot.dial.StandardDialFrame" />
		<field name="serialVersionUID" class="org.jfree.chart.plot.dial.StandardDialRange" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.plot.dial.StandardDialRange" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.plot.dial.StandardDialRange" />
		<field name="serialVersionUID" class="org.jfree.chart.plot.dial.StandardDialScale" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.plot.dial.StandardDialScale" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.plot.dial.StandardDialScale" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.AbstractRenderer" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.renderer.AbstractRenderer" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.renderer.AbstractRenderer" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.AreaRendererEndType" />
		<method signature="java.lang.Object readResolve()" class="org.jfree.chart.renderer.AreaRendererEndType" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.renderer.DefaultPolarItemRenderer" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.renderer.DefaultPolarItemRenderer" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.LookupPaintScale$PaintItem" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.renderer.LookupPaintScale$PaintItem" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.renderer.LookupPaintScale$PaintItem" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.LookupPaintScale" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.renderer.LookupPaintScale" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.renderer.LookupPaintScale" />
		<field name="DEFAULT_PAINT_LIMIT" class="org.jfree.chart.renderer.WaferMapRenderer" />
		<field name="POSITION_INDEX" class="org.jfree.chart.renderer.WaferMapRenderer" />
		<field name="VALUE_INDEX" class="org.jfree.chart.renderer.WaferMapRenderer" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
		<method signature="org.jfree.chart.axis.ValueAxis getRangeAxis(org.jfree.chart.plot.CategoryPlot,int)" class="org.jfree.chart.renderer.category.AbstractCategoryItemRenderer" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.category.AreaRenderer" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.category.BarRenderer" />
		<field name="DEFAULT_ITEM_MARGIN" class="org.jfree.chart.renderer.category.BarRenderer" />
		<field name="BAR_OUTLINE_WIDTH_THRESHOLD" class="org.jfree.chart.renderer.category.BarRenderer" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.renderer.category.BarRenderer" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.renderer.category.BarRenderer" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.category.BarRenderer3D" />
		<field name="DEFAULT_X_OFFSET" class="org.jfree.chart.renderer.category.BarRenderer3D" />
		<field name="DEFAULT_Y_OFFSET" class="org.jfree.chart.renderer.category.BarRenderer3D" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.renderer.category.BarRenderer3D" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.renderer.category.BarRenderer3D" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.category.BoxAndWhiskerRenderer" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.renderer.category.BoxAndWhiskerRenderer" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.renderer.category.BoxAndWhiskerRenderer" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.category.CategoryStepRenderer" />
		<field name="STAGGER_WIDTH" class="org.jfree.chart.renderer.category.CategoryStepRenderer" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.category.DefaultCategoryItemRenderer" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.category.GanttRenderer" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.renderer.category.GanttRenderer" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.renderer.category.GanttRenderer" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.category.GroupedStackedBarRenderer" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.category.IntervalBarRenderer" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.category.LayeredBarRenderer" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.category.LevelRenderer" />
		<field name="DEFAULT_ITEM_MARGIN" class="org.jfree.chart.renderer.category.LevelRenderer" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.category.LineAndShapeRenderer" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.category.LineRenderer3D" />
		<field name="DEFAULT_X_OFFSET" class="org.jfree.chart.renderer.category.LineRenderer3D" />
		<field name="DEFAULT_Y_OFFSET" class="org.jfree.chart.renderer.category.LineRenderer3D" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.renderer.category.LineRenderer3D" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.renderer.category.LineRenderer3D" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.category.MinMaxCategoryRenderer" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.renderer.category.MinMaxCategoryRenderer" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.renderer.category.MinMaxCategoryRenderer" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.renderer.category.ScatterRenderer" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.renderer.category.ScatterRenderer" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.category.StackedAreaRenderer" />
		<method signature="double getPreviousHeight(org.jfree.data.category.CategoryDataset,int,int)" class="org.jfree.chart.renderer.category.StackedAreaRenderer" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.category.StackedBarRenderer" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.category.StackedBarRenderer3D" />
		<method signature="java.util.List createStackedValueList(org.jfree.data.category.CategoryDataset,java.lang.Comparable,double,boolean)" class="org.jfree.chart.renderer.category.StackedBarRenderer3D" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.category.StatisticalBarRenderer" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.renderer.category.StatisticalBarRenderer" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.renderer.category.StatisticalBarRenderer" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.category.WaterfallBarRenderer" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.renderer.category.WaterfallBarRenderer" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.renderer.category.WaterfallBarRenderer" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
		<method signature="void updateCrosshairValues(org.jfree.chart.plot.CrosshairState,double,double,double,double,org.jfree.chart.plot.PlotOrientation)" class="org.jfree.chart.renderer.xy.AbstractXYItemRenderer" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.xy.CandlestickRenderer" />
		<field name="WIDTHMETHOD_AVERAGE" class="org.jfree.chart.renderer.xy.CandlestickRenderer" />
		<field name="WIDTHMETHOD_SMALLEST" class="org.jfree.chart.renderer.xy.CandlestickRenderer" />
		<field name="WIDTHMETHOD_INTERVALDATA" class="org.jfree.chart.renderer.xy.CandlestickRenderer" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.renderer.xy.CandlestickRenderer" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.renderer.xy.CandlestickRenderer" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.xy.ClusteredXYBarRenderer" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.xy.CyclicXYItemRenderer" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.xy.DefaultXYItemRenderer" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.xy.HighLowRenderer" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.renderer.xy.HighLowRenderer" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.renderer.xy.HighLowRenderer" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.renderer.xy.SamplingXYLineRenderer" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.renderer.xy.SamplingXYLineRenderer" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.xy.StackedXYAreaRenderer" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.renderer.xy.StackedXYAreaRenderer" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.renderer.xy.StackedXYAreaRenderer" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.xy.StackedXYAreaRenderer2" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.xy.StackedXYBarRenderer" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.xy.StandardXYItemRenderer" />
		<field name="SHAPES" class="org.jfree.chart.renderer.xy.StandardXYItemRenderer" />
		<field name="LINES" class="org.jfree.chart.renderer.xy.StandardXYItemRenderer" />
		<field name="SHAPES_AND_LINES" class="org.jfree.chart.renderer.xy.StandardXYItemRenderer" />
		<field name="IMAGES" class="org.jfree.chart.renderer.xy.StandardXYItemRenderer" />
		<field name="DISCONTINUOUS" class="org.jfree.chart.renderer.xy.StandardXYItemRenderer" />
		<field name="DISCONTINUOUS_LINES" class="org.jfree.chart.renderer.xy.StandardXYItemRenderer" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.renderer.xy.StandardXYItemRenderer" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.renderer.xy.StandardXYItemRenderer" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.xy.WindItemRenderer" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.xy.XYAreaRenderer" />
		<field name="SHAPES" class="org.jfree.chart.renderer.xy.XYAreaRenderer" />
		<field name="LINES" class="org.jfree.chart.renderer.xy.XYAreaRenderer" />
		<field name="SHAPES_AND_LINES" class="org.jfree.chart.renderer.xy.XYAreaRenderer" />
		<field name="AREA" class="org.jfree.chart.renderer.xy.XYAreaRenderer" />
		<field name="AREA_AND_SHAPES" class="org.jfree.chart.renderer.xy.XYAreaRenderer" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.renderer.xy.XYAreaRenderer" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.renderer.xy.XYAreaRenderer" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.xy.XYAreaRenderer2" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.renderer.xy.XYAreaRenderer2" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.renderer.xy.XYAreaRenderer2" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.xy.XYBarRenderer" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.renderer.xy.XYBarRenderer" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.renderer.xy.XYBarRenderer" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.xy.XYBubbleRenderer" />
		<field name="SCALE_ON_BOTH_AXES" class="org.jfree.chart.renderer.xy.XYBubbleRenderer" />
		<field name="SCALE_ON_DOMAIN_AXIS" class="org.jfree.chart.renderer.xy.XYBubbleRenderer" />
		<field name="SCALE_ON_RANGE_AXIS" class="org.jfree.chart.renderer.xy.XYBubbleRenderer" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.xy.XYDifferenceRenderer" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.renderer.xy.XYDifferenceRenderer" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.renderer.xy.XYDifferenceRenderer" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.xy.XYDotRenderer" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.renderer.xy.XYDotRenderer" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.renderer.xy.XYDotRenderer" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.xy.XYErrorRenderer" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.renderer.xy.XYErrorRenderer" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.renderer.xy.XYErrorRenderer" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.xy.XYLine3DRenderer" />
		<field name="DEFAULT_X_OFFSET" class="org.jfree.chart.renderer.xy.XYLine3DRenderer" />
		<field name="DEFAULT_Y_OFFSET" class="org.jfree.chart.renderer.xy.XYLine3DRenderer" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.renderer.xy.XYLine3DRenderer" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.renderer.xy.XYLine3DRenderer" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.renderer.xy.XYLineAndShapeRenderer" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.xy.XYShapeRenderer" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.renderer.xy.XYShapeRenderer" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.renderer.xy.XYShapeRenderer" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.xy.XYStepAreaRenderer" />
		<field name="SHAPES" class="org.jfree.chart.renderer.xy.XYStepAreaRenderer" />
		<field name="AREA" class="org.jfree.chart.renderer.xy.XYStepAreaRenderer" />
		<field name="AREA_AND_SHAPES" class="org.jfree.chart.renderer.xy.XYStepAreaRenderer" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.xy.XYStepRenderer" />
		<field name="serialVersionUID" class="org.jfree.chart.renderer.xy.YIntervalRenderer" />
		<field name="serialVersionUID" class="org.jfree.chart.title.CompositeTitle" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.title.CompositeTitle" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.title.CompositeTitle" />
		<field name="serialVersionUID" class="org.jfree.chart.title.DateTitle" />
		<field name="serialVersionUID" class="org.jfree.chart.title.LegendGraphic" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.title.LegendGraphic" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.title.LegendGraphic" />
		<field name="serialVersionUID" class="org.jfree.chart.title.LegendTitle" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.title.LegendTitle" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.title.LegendTitle" />
		<field name="serialVersionUID" class="org.jfree.chart.title.PaintScaleLegend" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.title.PaintScaleLegend" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.title.PaintScaleLegend" />
		<field name="serialVersionUID" class="org.jfree.chart.title.TextTitle" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.title.TextTitle" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.title.TextTitle" />
		<field name="serialVersionUID" class="org.jfree.chart.title.Title" />
		<method signature="void &lt;init&gt;(org.jfree.ui.RectangleEdge,org.jfree.ui.HorizontalAlignment,org.jfree.ui.VerticalAlignment)" class="org.jfree.chart.title.Title" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.chart.title.Title" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.chart.title.Title" />
		<field name="serialVersionUID" class="org.jfree.chart.urls.CustomPieURLGenerator" />
		<field name="serialVersionUID" class="org.jfree.chart.urls.CustomXYURLGenerator" />
		<field name="serialVersionUID" class="org.jfree.chart.urls.StandardCategoryURLGenerator" />
		<field name="serialVersionUID" class="org.jfree.chart.urls.StandardPieURLGenerator" />
		<field name="serialVersionUID" class="org.jfree.chart.urls.StandardXYURLGenerator" />
		<field name="DEFAULT_PREFIX" class="org.jfree.chart.urls.StandardXYURLGenerator" />
		<field name="DEFAULT_SERIES_PARAMETER" class="org.jfree.chart.urls.StandardXYURLGenerator" />
		<field name="DEFAULT_ITEM_PARAMETER" class="org.jfree.chart.urls.StandardXYURLGenerator" />
		<field name="serialVersionUID" class="org.jfree.chart.urls.TimeSeriesURLGenerator" />
		<field name="serialVersionUID" class="org.jfree.chart.util.DefaultShadowGenerator" />
		<field name="BYTE" class="org.jfree.chart.util.HexNumberFormat" />
		<field name="WORD" class="org.jfree.chart.util.HexNumberFormat" />
		<field name="DWORD" class="org.jfree.chart.util.HexNumberFormat" />
		<field name="QWORD" class="org.jfree.chart.util.HexNumberFormat" />
		<field name="FACTOR" class="org.jfree.chart.util.PaintAlpha" />
		<method signature="void &lt;init&gt;()" class="org.jfree.chart.util.ResourceBundleWrapper" />
		<method signature="java.lang.Object readResolve()" class="org.jfree.chart.util.XYCoordinateType" />
		<field name="serialVersionUID" class="org.jfree.data.ComparableObjectItem" />
		<method signature="void setObject(java.lang.Object)" class="org.jfree.data.ComparableObjectItem" />
		<method signature="void add(java.lang.Comparable,java.lang.Object)" class="org.jfree.data.ComparableObjectSeries" />
		<method signature="void add(java.lang.Comparable,java.lang.Object,boolean)" class="org.jfree.data.ComparableObjectSeries" />
		<method signature="void update(java.lang.Comparable,java.lang.Object)" class="org.jfree.data.ComparableObjectSeries" />
		<method signature="void updateByIndex(int,java.lang.Object)" class="org.jfree.data.ComparableObjectSeries" />
		<method signature="void delete(int,int)" class="org.jfree.data.ComparableObjectSeries" />
		<field name="serialVersionUID" class="org.jfree.data.DefaultKeyedValue" />
		<field name="serialVersionUID" class="org.jfree.data.DefaultKeyedValues" />
		<field name="serialVersionUID" class="org.jfree.data.DefaultKeyedValues2D" />
		<field name="serialVersionUID" class="org.jfree.data.DomainOrder" />
		<method signature="java.lang.Object readResolve()" class="org.jfree.data.DomainOrder" />
		<field name="serialVersionUID" class="org.jfree.data.KeyToGroupMap" />
		<field name="serialVersionUID" class="org.jfree.data.KeyedObject" />
		<field name="serialVersionUID" class="org.jfree.data.KeyedObjects" />
		<field name="serialVersionUID" class="org.jfree.data.KeyedObjects2D" />
		<field name="serialVersionUID" class="org.jfree.data.Range" />
		<field name="serialVersionUID" class="org.jfree.data.RangeType" />
		<method signature="java.lang.Object readResolve()" class="org.jfree.data.RangeType" />
		<field name="serialVersionUID" class="org.jfree.data.category.CategoryToPieDataset" />
		<field name="serialVersionUID" class="org.jfree.data.category.DefaultCategoryDataset" />
		<field name="DEFAULT_NUM_X" class="org.jfree.data.contour.NonGridContourDataset" />
		<field name="DEFAULT_NUM_Y" class="org.jfree.data.contour.NonGridContourDataset" />
		<field name="DEFAULT_POWER" class="org.jfree.data.contour.NonGridContourDataset" />
		<field name="serialVersionUID" class="org.jfree.data.gantt.Task" />
		<field name="serialVersionUID" class="org.jfree.data.gantt.TaskSeriesCollection" />
		<field name="serialVersionUID" class="org.jfree.data.general.AbstractDataset" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.data.general.AbstractDataset" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.data.general.AbstractDataset" />
		<field name="serialVersionUID" class="org.jfree.data.general.AbstractSeriesDataset" />
		<field name="serialVersionUID" class="org.jfree.data.general.DatasetGroup" />
		<method signature="void &lt;init&gt;()" class="org.jfree.data.general.DatasetUtilities" />
		<field name="serialVersionUID" class="org.jfree.data.general.DefaultKeyedValueDataset" />
		<field name="serialVersionUID" class="org.jfree.data.general.DefaultKeyedValues2DDataset" />
		<field name="serialVersionUID" class="org.jfree.data.general.DefaultKeyedValuesDataset" />
		<field name="serialVersionUID" class="org.jfree.data.general.DefaultPieDataset" />
		<field name="serialVersionUID" class="org.jfree.data.general.DefaultValueDataset" />
		<field name="serialVersionUID" class="org.jfree.data.general.Series" />
		<method signature="void fireVetoableChange(java.lang.String,java.lang.Object,java.lang.Object)" class="org.jfree.data.general.Series" />
		<field name="serialVersionUID" class="org.jfree.data.general.SeriesChangeEvent" />
		<field name="serialVersionUID" class="org.jfree.data.general.SeriesException" />
		<field name="DEFAULT_CHIP_SPACE" class="org.jfree.data.general.WaferMapDataset" />
		<field name="serialVersionUID" class="org.jfree.data.jdbc.JDBCCategoryDataset" />
		<field name="serialVersionUID" class="org.jfree.data.jdbc.JDBCPieDataset" />
		<field name="serialVersionUID" class="org.jfree.data.statistics.BoxAndWhiskerItem" />
		<field name="serialVersionUID" class="org.jfree.data.statistics.HistogramBin" />
		<field name="serialVersionUID" class="org.jfree.data.statistics.HistogramDataset" />
		<field name="serialVersionUID" class="org.jfree.data.statistics.HistogramType" />
		<method signature="java.lang.Object readResolve()" class="org.jfree.data.statistics.HistogramType" />
		<field name="serialVersionUID" class="org.jfree.data.statistics.MeanAndStandardDeviation" />
		<field name="serialVersionUID" class="org.jfree.data.statistics.SimpleHistogramBin" />
		<field name="serialVersionUID" class="org.jfree.data.statistics.SimpleHistogramDataset" />
		<field name="serialVersionUID" class="org.jfree.data.time.DateRange" />
		<field name="serialVersionUID" class="org.jfree.data.time.Day" />
		<field name="START" class="org.jfree.data.time.DynamicTimeSeriesCollection" />
		<field name="MIDDLE" class="org.jfree.data.time.DynamicTimeSeriesCollection" />
		<field name="END" class="org.jfree.data.time.DynamicTimeSeriesCollection" />
		<method signature="double findMaxValue()" class="org.jfree.data.time.DynamicTimeSeriesCollection" />
		<field name="serialVersionUID" class="org.jfree.data.time.FixedMillisecond" />
		<field name="serialVersionUID" class="org.jfree.data.time.Hour" />
		<field name="FIRST_HOUR_IN_DAY" class="org.jfree.data.time.Hour" />
		<field name="LAST_HOUR_IN_DAY" class="org.jfree.data.time.Hour" />
		<field name="serialVersionUID" class="org.jfree.data.time.Millisecond" />
		<field name="FIRST_MILLISECOND_IN_SECOND" class="org.jfree.data.time.Millisecond" />
		<field name="LAST_MILLISECOND_IN_SECOND" class="org.jfree.data.time.Millisecond" />
		<field name="serialVersionUID" class="org.jfree.data.time.Minute" />
		<field name="FIRST_MINUTE_IN_HOUR" class="org.jfree.data.time.Minute" />
		<field name="LAST_MINUTE_IN_HOUR" class="org.jfree.data.time.Minute" />
		<field name="serialVersionUID" class="org.jfree.data.time.Month" />
		<field name="serialVersionUID" class="org.jfree.data.time.Quarter" />
		<field name="FIRST_QUARTER" class="org.jfree.data.time.Quarter" />
		<field name="LAST_QUARTER" class="org.jfree.data.time.Quarter" />
		<field name="serialVersionUID" class="org.jfree.data.time.Second" />
		<field name="FIRST_SECOND_IN_MINUTE" class="org.jfree.data.time.Second" />
		<field name="LAST_SECOND_IN_MINUTE" class="org.jfree.data.time.Second" />
		<field name="serialVersionUID" class="org.jfree.data.time.SimpleTimePeriod" />
		<field name="serialVersionUID" class="org.jfree.data.time.TimePeriodAnchor" />
		<method signature="java.lang.Object readResolve()" class="org.jfree.data.time.TimePeriodAnchor" />
		<field name="serialVersionUID" class="org.jfree.data.time.TimePeriodValue" />
		<field name="serialVersionUID" class="org.jfree.data.time.TimePeriodValues" />
		<field name="DEFAULT_DOMAIN_DESCRIPTION" class="org.jfree.data.time.TimePeriodValues" />
		<field name="DEFAULT_RANGE_DESCRIPTION" class="org.jfree.data.time.TimePeriodValues" />
		<field name="serialVersionUID" class="org.jfree.data.time.TimePeriodValuesCollection" />
		<field name="serialVersionUID" class="org.jfree.data.time.TimeSeries" />
		<field name="DEFAULT_DOMAIN_DESCRIPTION" class="org.jfree.data.time.TimeSeries" />
		<field name="DEFAULT_RANGE_DESCRIPTION" class="org.jfree.data.time.TimeSeries" />
		<method signature="org.jfree.data.time.TimeSeriesDataItem getRawDataItem(org.jfree.data.time.RegularTimePeriod)" class="org.jfree.data.time.TimeSeries" />
		<field name="serialVersionUID" class="org.jfree.data.time.TimeSeriesCollection" />
		<field name="serialVersionUID" class="org.jfree.data.time.TimeSeriesDataItem" />
		<field name="serialVersionUID" class="org.jfree.data.time.Week" />
		<field name="FIRST_WEEK_IN_YEAR" class="org.jfree.data.time.Week" />
		<field name="LAST_WEEK_IN_YEAR" class="org.jfree.data.time.Week" />
		<field name="MINIMUM_YEAR" class="org.jfree.data.time.Year" />
		<field name="MAXIMUM_YEAR" class="org.jfree.data.time.Year" />
		<field name="serialVersionUID" class="org.jfree.data.time.Year" />
		<field name="PIEDATASET_TAG" class="org.jfree.data.xml.DatasetTags" />
		<field name="CATEGORYDATASET_TAG" class="org.jfree.data.xml.DatasetTags" />
		<field name="SERIES_TAG" class="org.jfree.data.xml.DatasetTags" />
		<field name="ITEM_TAG" class="org.jfree.data.xml.DatasetTags" />
		<field name="KEY_TAG" class="org.jfree.data.xml.DatasetTags" />
		<field name="VALUE_TAG" class="org.jfree.data.xml.DatasetTags" />
		<method signature="java.lang.String getCurrentText()" class="org.jfree.data.xml.ValueHandler" />
		<field name="serialVersionUID" class="org.jfree.data.xy.IntervalXYDelegate" />
		<field name="serialVersionUID" class="org.jfree.data.xy.MatrixSeries" />
		<field name="serialVersionUID" class="org.jfree.data.xy.MatrixSeriesCollection" />
		<field name="DEFAULT_SCALE_FACTOR" class="org.jfree.data.xy.NormalizedMatrixSeries" />
		<field name="serialVersionUID" class="org.jfree.data.xy.OHLCDataItem" />
		<field name="serialVersionUID" class="org.jfree.data.xy.XYDataItem" />
		<field name="serialVersionUID" class="org.jfree.data.xy.XYSeries" />
		<field name="serialVersionUID" class="org.jfree.data.xy.XYSeriesCollection" />
		<method signature="void &lt;init&gt;()" class="org.jfree.date.DateUtilities" />
		<field name="JANUARY" class="org.jfree.date.MonthConstants" />
		<field name="FEBRUARY" class="org.jfree.date.MonthConstants" />
		<field name="MARCH" class="org.jfree.date.MonthConstants" />
		<field name="APRIL" class="org.jfree.date.MonthConstants" />
		<field name="MAY" class="org.jfree.date.MonthConstants" />
		<field name="JUNE" class="org.jfree.date.MonthConstants" />
		<field name="JULY" class="org.jfree.date.MonthConstants" />
		<field name="AUGUST" class="org.jfree.date.MonthConstants" />
		<field name="SEPTEMBER" class="org.jfree.date.MonthConstants" />
		<field name="OCTOBER" class="org.jfree.date.MonthConstants" />
		<field name="NOVEMBER" class="org.jfree.date.MonthConstants" />
		<field name="DECEMBER" class="org.jfree.date.MonthConstants" />
		<field name="serialVersionUID" class="org.jfree.date.SerialDate" />
		<field name="SERIAL_LOWER_BOUND" class="org.jfree.date.SerialDate" />
		<field name="SERIAL_UPPER_BOUND" class="org.jfree.date.SerialDate" />
		<field name="MINIMUM_YEAR_SUPPORTED" class="org.jfree.date.SerialDate" />
		<field name="MAXIMUM_YEAR_SUPPORTED" class="org.jfree.date.SerialDate" />
		<field name="MONDAY" class="org.jfree.date.SerialDate" />
		<field name="TUESDAY" class="org.jfree.date.SerialDate" />
		<field name="WEDNESDAY" class="org.jfree.date.SerialDate" />
		<field name="THURSDAY" class="org.jfree.date.SerialDate" />
		<field name="FRIDAY" class="org.jfree.date.SerialDate" />
		<field name="SATURDAY" class="org.jfree.date.SerialDate" />
		<field name="SUNDAY" class="org.jfree.date.SerialDate" />
		<field name="FIRST_WEEK_IN_MONTH" class="org.jfree.date.SerialDate" />
		<field name="SECOND_WEEK_IN_MONTH" class="org.jfree.date.SerialDate" />
		<field name="THIRD_WEEK_IN_MONTH" class="org.jfree.date.SerialDate" />
		<field name="FOURTH_WEEK_IN_MONTH" class="org.jfree.date.SerialDate" />
		<field name="LAST_WEEK_IN_MONTH" class="org.jfree.date.SerialDate" />
		<field name="INCLUDE_NONE" class="org.jfree.date.SerialDate" />
		<field name="INCLUDE_FIRST" class="org.jfree.date.SerialDate" />
		<field name="INCLUDE_SECOND" class="org.jfree.date.SerialDate" />
		<field name="INCLUDE_BOTH" class="org.jfree.date.SerialDate" />
		<field name="PRECEDING" class="org.jfree.date.SerialDate" />
		<field name="NEAREST" class="org.jfree.date.SerialDate" />
		<field name="FOLLOWING" class="org.jfree.date.SerialDate" />
		<field name="serialVersionUID" class="org.jfree.date.SpreadsheetDate" />
		<method signature="void &lt;init&gt;()" class="org.jfree.io.FileUtilities" />
		<method signature="void &lt;init&gt;()" class="org.jfree.io.SerialUtilities" />
		<field name="serialVersionUID" class="org.jfree.layout.CenterLayout" />
		<field name="serialVersionUID" class="org.jfree.layout.FormatLayout" />
		<field name="C" class="org.jfree.layout.FormatLayout" />
		<field name="LC" class="org.jfree.layout.FormatLayout" />
		<field name="LCB" class="org.jfree.layout.FormatLayout" />
		<field name="LCLC" class="org.jfree.layout.FormatLayout" />
		<field name="LCLCB" class="org.jfree.layout.FormatLayout" />
		<field name="LCBLC" class="org.jfree.layout.FormatLayout" />
		<field name="LCBLCB" class="org.jfree.layout.FormatLayout" />
		<field name="serialVersionUID" class="org.jfree.layout.LCBLayout" />
		<field name="COLUMNS" class="org.jfree.layout.LCBLayout" />
		<field name="serialVersionUID" class="org.jfree.layout.RadialLayout" />
		<field name="serialVersionUID" class="org.jfree.text.TextBlock" />
		<field name="serialVersionUID" class="org.jfree.text.TextBlockAnchor" />
		<method signature="java.lang.Object readResolve()" class="org.jfree.text.TextBlockAnchor" />
		<field name="serialVersionUID" class="org.jfree.text.TextBox" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.text.TextBox" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.text.TextBox" />
		<field name="serialVersionUID" class="org.jfree.text.TextFragment" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.text.TextFragment" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.text.TextFragment" />
		<field name="serialVersionUID" class="org.jfree.text.TextLine" />
		<method signature="void &lt;init&gt;()" class="org.jfree.text.TextUtilities" />
		<field name="READER" class="org.jfree.threads.ReaderWriterLock$ReaderWriterNode" />
		<field name="WRITER" class="org.jfree.threads.ReaderWriterLock$ReaderWriterNode" />
		<field name="CENTER" class="org.jfree.ui.Align" />
		<field name="TOP" class="org.jfree.ui.Align" />
		<field name="BOTTOM" class="org.jfree.ui.Align" />
		<field name="LEFT" class="org.jfree.ui.Align" />
		<field name="RIGHT" class="org.jfree.ui.Align" />
		<field name="TOP_LEFT" class="org.jfree.ui.Align" />
		<field name="TOP_RIGHT" class="org.jfree.ui.Align" />
		<field name="BOTTOM_LEFT" class="org.jfree.ui.Align" />
		<field name="BOTTOM_RIGHT" class="org.jfree.ui.Align" />
		<field name="FIT_HORIZONTAL" class="org.jfree.ui.Align" />
		<field name="FIT_VERTICAL" class="org.jfree.ui.Align" />
		<field name="FIT" class="org.jfree.ui.Align" />
		<field name="NORTH" class="org.jfree.ui.Align" />
		<field name="SOUTH" class="org.jfree.ui.Align" />
		<field name="WEST" class="org.jfree.ui.Align" />
		<field name="EAST" class="org.jfree.ui.Align" />
		<field name="NORTH_WEST" class="org.jfree.ui.Align" />
		<field name="NORTH_EAST" class="org.jfree.ui.Align" />
		<field name="SOUTH_WEST" class="org.jfree.ui.Align" />
		<field name="SOUTH_EAST" class="org.jfree.ui.Align" />
		<method signature="void &lt;init&gt;()" class="org.jfree.ui.Align" />
		<field name="UP" class="org.jfree.ui.ArrowPanel" />
		<field name="DOWN" class="org.jfree.ui.ArrowPanel" />
		<field name="UP" class="org.jfree.ui.BevelArrowIcon" />
		<field name="DOWN" class="org.jfree.ui.BevelArrowIcon" />
		<field name="DEFAULT_SIZE" class="org.jfree.ui.BevelArrowIcon" />
		<field name="serialVersionUID" class="org.jfree.ui.FloatDimension" />
		<field name="serialVersionUID" class="org.jfree.ui.GradientPaintTransformType" />
		<method signature="java.lang.Object readResolve()" class="org.jfree.ui.GradientPaintTransformType" />
		<field name="serialVersionUID" class="org.jfree.ui.HorizontalAlignment" />
		<method signature="java.lang.Object readResolve()" class="org.jfree.ui.HorizontalAlignment" />
		<method signature="void setValue(java.lang.Object)" class="org.jfree.ui.KeyedComboBoxModel$ComboBoxItemPair" />
		<field name="serialVersionUID" class="org.jfree.ui.Layer" />
		<method signature="java.lang.Object readResolve()" class="org.jfree.ui.Layer" />
		<field name="serialVersionUID" class="org.jfree.ui.LengthAdjustmentType" />
		<method signature="java.lang.Object readResolve()" class="org.jfree.ui.LengthAdjustmentType" />
		<field name="serialVersionUID" class="org.jfree.ui.RectangleAnchor" />
		<method signature="java.lang.Object readResolve()" class="org.jfree.ui.RectangleAnchor" />
		<field name="serialVersionUID" class="org.jfree.ui.RectangleEdge" />
		<method signature="java.lang.Object readResolve()" class="org.jfree.ui.RectangleEdge" />
		<field name="serialVersionUID" class="org.jfree.ui.RectangleInsets" />
		<method signature="void &lt;init&gt;()" class="org.jfree.ui.RefineryUtilities" />
		<field name="serialVersionUID" class="org.jfree.ui.Size2D" />
		<field name="NONE" class="org.jfree.ui.SortButtonRenderer" />
		<field name="DOWN" class="org.jfree.ui.SortButtonRenderer" />
		<field name="UP" class="org.jfree.ui.SortButtonRenderer" />
		<field name="serialVersionUID" class="org.jfree.ui.StandardGradientPaintTransformer" />
		<field name="serialVersionUID" class="org.jfree.ui.TextAnchor" />
		<method signature="java.lang.Object readResolve()" class="org.jfree.ui.TextAnchor" />
		<method signature="void &lt;init&gt;()" class="org.jfree.ui.UIUtilities" />
		<field name="serialVersionUID" class="org.jfree.ui.VerticalAlignment" />
		<method signature="java.lang.Object readResolve()" class="org.jfree.ui.VerticalAlignment" />
		<field name="owner" class="org.jfree.ui.WizardPanel" />
		<method signature="void &lt;init&gt;(java.awt.LayoutManager)" class="org.jfree.ui.WizardPanel" />
		<method signature="javax.swing.JTable getTable()" class="org.jfree.ui.about.LibraryPanel" />
		<field name="GPL" class="org.jfree.ui.about.Licences" />
		<field name="LGPL" class="org.jfree.ui.about.Licences" />
		<method signature="void &lt;init&gt;()" class="org.jfree.ui.about.SystemProperties" />
		<field name="COPY_COMMAND" class="org.jfree.ui.about.SystemPropertiesFrame" />
		<field name="CLOSE_COMMAND" class="org.jfree.ui.about.SystemPropertiesFrame" />
		<field name="ACCELERATOR_KEY" class="org.jfree.ui.action.AbstractActionDowngrade" />
		<field name="MNEMONIC_KEY" class="org.jfree.ui.action.AbstractActionDowngrade" />
		<field name="fileChooser" class="org.jfree.ui.action.AbstractFileSelectionAction" />
		<method signature="java.lang.String getFileExtension()" class="org.jfree.ui.action.AbstractFileSelectionAction" />
		<method signature="java.lang.String getFileDescription()" class="org.jfree.ui.action.AbstractFileSelectionAction" />
		<method signature="java.io.File getCurrentDirectory()" class="org.jfree.ui.action.AbstractFileSelectionAction" />
		<method signature="java.io.File performSelectFile(java.io.File,int,boolean)" class="org.jfree.ui.action.AbstractFileSelectionAction" />
		<method signature="javax.swing.JFileChooser createFileChooser()" class="org.jfree.ui.action.AbstractFileSelectionAction" />
		<field name="ACCELERATOR_KEY" class="org.jfree.ui.action.ActionDowngrade" />
		<field name="MNEMONIC_KEY" class="org.jfree.ui.action.ActionDowngrade" />
		<field name="JMENUBAR_PROPERTY" class="org.jfree.ui.tabbedui.AbstractTabbedUI" />
		<field name="GLOBAL_MENU_PROPERTY" class="org.jfree.ui.tabbedui.AbstractTabbedUI" />
		<method signature="javax.swing.JTabbedPane getTabbedPane()" class="org.jfree.ui.tabbedui.AbstractTabbedUI" />
		<method signature="int parseInt(java.lang.String,int)" class="org.jfree.ui.tabbedui.DetailEditor" />
		<field name="serialVersionUID" class="org.jfree.util.AbstractObjectList" />
		<field name="DEFAULT_INITIAL_CAPACITY" class="org.jfree.util.AbstractObjectList" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.util.AbstractObjectList" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.util.AbstractObjectList" />
		<method signature="void &lt;init&gt;()" class="org.jfree.util.ArrayUtilities" />
		<method signature="void &lt;init&gt;()" class="org.jfree.util.AttributedStringUtilities" />
		<field name="serialVersionUID" class="org.jfree.util.BooleanList" />
		<method signature="void &lt;init&gt;()" class="org.jfree.util.BooleanUtilities" />
		<field name="serialVersionUID" class="org.jfree.util.ClassComparator" />
		<field name="serialVersionUID" class="org.jfree.util.HashNMap" />
		<field name="DONE" class="org.jfree.util.LineBreakIterator" />
		<field name="ERROR" class="org.jfree.util.LogTarget" />
		<field name="WARN" class="org.jfree.util.LogTarget" />
		<field name="INFO" class="org.jfree.util.LogTarget" />
		<field name="DEBUG" class="org.jfree.util.LogTarget" />
		<field name="serialVersionUID" class="org.jfree.util.ObjectTable" />
		<method signature="void setObject(int,int,java.lang.Object)" class="org.jfree.util.ObjectTable" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.util.ObjectTable" />
		<method signature="void writeSerializedData(java.io.ObjectOutputStream,java.lang.Object)" class="org.jfree.util.ObjectTable" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.util.ObjectTable" />
		<method signature="java.lang.Object readSerializedData(java.io.ObjectInputStream)" class="org.jfree.util.ObjectTable" />
		<method signature="void copyColumn(int,int)" class="org.jfree.util.ObjectTable" />
		<method signature="void copyRow(int,int)" class="org.jfree.util.ObjectTable" />
		<method signature="void setData(java.lang.Object[][],int)" class="org.jfree.util.ObjectTable" />
		<method signature="java.lang.Object[][] getData()" class="org.jfree.util.ObjectTable" />
		<field name="THREAD_CONTEXT" class="org.jfree.util.ObjectUtilities" />
		<field name="CLASS_CONTEXT" class="org.jfree.util.ObjectUtilities" />
		<method signature="void &lt;init&gt;()" class="org.jfree.util.ObjectUtilities" />
		<field name="serialVersionUID" class="org.jfree.util.PaintList" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.util.PaintList" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.util.PaintList" />
		<method signature="void &lt;init&gt;()" class="org.jfree.util.PaintUtilities" />
		<field name="serialVersionUID" class="org.jfree.util.PrintStreamLogTarget" />
		<method signature="void &lt;init&gt;(java.util.ResourceBundle,java.lang.String)" class="org.jfree.util.ResourceBundleSupport" />
		<method signature="void &lt;init&gt;()" class="org.jfree.util.ResourceBundleWrapper" />
		<field name="serialVersionUID" class="org.jfree.util.Rotation" />
		<method signature="java.lang.Object readResolve()" class="org.jfree.util.Rotation" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.util.ShapeList" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.util.ShapeList" />
		<method signature="void &lt;init&gt;()" class="org.jfree.util.ShapeUtilities" />
		<field name="serialVersionUID" class="org.jfree.util.SortOrder" />
		<method signature="java.lang.Object readResolve()" class="org.jfree.util.SortOrder" />
		<field name="ESCAPE_KEY" class="org.jfree.util.SortedConfigurationWriter" />
		<field name="ESCAPE_VALUE" class="org.jfree.util.SortedConfigurationWriter" />
		<field name="ESCAPE_COMMENT" class="org.jfree.util.SortedConfigurationWriter" />
		<method signature="void &lt;init&gt;()" class="org.jfree.util.StringUtils" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="org.jfree.util.StrokeList" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="org.jfree.util.StrokeList" />
		<field name="serialVersionUID" class="org.jfree.util.TableOrder" />
		<method signature="java.lang.Object readResolve()" class="org.jfree.util.TableOrder" />
		<field name="serialVersionUID" class="org.jfree.util.UnitType" />
		<method signature="java.lang.Object readResolve()" class="org.jfree.util.UnitType" />
		<field name="serialVersionUID" class="org.jfree.util.WaitingImageObserver" />
		<field name="serialVersionUID" class="org.netbeans.lib.awtextra.AbsoluteConstraints" />
		<field name="serialVersionUID" class="org.netbeans.lib.awtextra.AbsoluteLayout" />
		<method signature="void &lt;init&gt;()" class="org.unbescape.css.CssEscape" />
		<field name="ESCAPE_PREFIX" class="org.unbescape.css.CssIdentifierEscapeUtil" />
		<field name="ESCAPE_LEVELS_LEN" class="org.unbescape.css.CssIdentifierEscapeUtil" />
		<method signature="void &lt;init&gt;()" class="org.unbescape.css.CssIdentifierEscapeUtil" />
		<field name="ESCAPE_PREFIX" class="org.unbescape.css.CssStringEscapeUtil" />
		<field name="ESCAPE_LEVELS_LEN" class="org.unbescape.css.CssStringEscapeUtil" />
		<method signature="void &lt;init&gt;()" class="org.unbescape.css.CssStringEscapeUtil" />
		<field name="ESCAPE_PREFIX" class="org.unbescape.css.CssUnescapeUtil" />
		<method signature="void &lt;init&gt;()" class="org.unbescape.css.CssUnescapeUtil" />
		<method signature="void &lt;init&gt;()" class="org.unbescape.csv.CsvEscape" />
		<field name="DOUBLE_QUOTE" class="org.unbescape.csv.CsvEscapeUtil" />
		<method signature="void &lt;init&gt;()" class="org.unbescape.csv.CsvEscapeUtil" />
		<method signature="void &lt;init&gt;()" class="org.unbescape.html.Html4EscapeSymbolsInitializer" />
		<method signature="void &lt;init&gt;()" class="org.unbescape.html.Html5EscapeSymbolsInitializer" />
		<method signature="void &lt;init&gt;()" class="org.unbescape.html.HtmlEscape" />
		<field name="NCRS_BY_CODEPOINT_LEN" class="org.unbescape.html.HtmlEscapeSymbols" />
		<field name="MAX_ASCII_CHAR" class="org.unbescape.html.HtmlEscapeSymbols" />
		<field name="NO_NCR" class="org.unbescape.html.HtmlEscapeSymbols" />
		<field name="REFERENCE_PREFIX" class="org.unbescape.html.HtmlEscapeUtil" />
		<field name="REFERENCE_NUMERIC_PREFIX2" class="org.unbescape.html.HtmlEscapeUtil" />
		<field name="REFERENCE_HEXA_PREFIX3_UPPER" class="org.unbescape.html.HtmlEscapeUtil" />
		<field name="REFERENCE_HEXA_PREFIX3_LOWER" class="org.unbescape.html.HtmlEscapeUtil" />
		<field name="REFERENCE_SUFFIX" class="org.unbescape.html.HtmlEscapeUtil" />
		<method signature="void &lt;init&gt;()" class="org.unbescape.html.HtmlEscapeUtil" />
		<method signature="void &lt;init&gt;()" class="org.unbescape.java.JavaEscape" />
		<field name="ESCAPE_PREFIX" class="org.unbescape.java.JavaEscapeUtil" />
		<field name="ESCAPE_UHEXA_PREFIX2" class="org.unbescape.java.JavaEscapeUtil" />
		<field name="ESCAPE_LEVELS_LEN" class="org.unbescape.java.JavaEscapeUtil" />
		<method signature="void &lt;init&gt;()" class="org.unbescape.java.JavaEscapeUtil" />
		<method signature="void &lt;init&gt;()" class="org.unbescape.javascript.JavaScriptEscape" />
		<field name="ESCAPE_PREFIX" class="org.unbescape.javascript.JavaScriptEscapeUtil" />
		<field name="ESCAPE_XHEXA_PREFIX2" class="org.unbescape.javascript.JavaScriptEscapeUtil" />
		<field name="ESCAPE_UHEXA_PREFIX2" class="org.unbescape.javascript.JavaScriptEscapeUtil" />
		<field name="ESCAPE_LEVELS_LEN" class="org.unbescape.javascript.JavaScriptEscapeUtil" />
		<method signature="void &lt;init&gt;()" class="org.unbescape.javascript.JavaScriptEscapeUtil" />
		<method signature="void &lt;init&gt;()" class="org.unbescape.json.JsonEscape" />
		<field name="ESCAPE_PREFIX" class="org.unbescape.json.JsonEscapeUtil" />
		<field name="ESCAPE_UHEXA_PREFIX2" class="org.unbescape.json.JsonEscapeUtil" />
		<field name="ESCAPE_LEVELS_LEN" class="org.unbescape.json.JsonEscapeUtil" />
		<method signature="void &lt;init&gt;()" class="org.unbescape.json.JsonEscapeUtil" />
		<method signature="void &lt;init&gt;()" class="org.unbescape.properties.PropertiesEscape" />
		<field name="ESCAPE_PREFIX" class="org.unbescape.properties.PropertiesKeyEscapeUtil" />
		<field name="ESCAPE_LEVELS_LEN" class="org.unbescape.properties.PropertiesKeyEscapeUtil" />
		<method signature="void &lt;init&gt;()" class="org.unbescape.properties.PropertiesKeyEscapeUtil" />
		<field name="ESCAPE_PREFIX" class="org.unbescape.properties.PropertiesUnescapeUtil" />
		<field name="ESCAPE_UHEXA_PREFIX2" class="org.unbescape.properties.PropertiesUnescapeUtil" />
		<method signature="void &lt;init&gt;()" class="org.unbescape.properties.PropertiesUnescapeUtil" />
		<field name="ESCAPE_PREFIX" class="org.unbescape.properties.PropertiesValueEscapeUtil" />
		<field name="ESCAPE_LEVELS_LEN" class="org.unbescape.properties.PropertiesValueEscapeUtil" />
		<method signature="void &lt;init&gt;()" class="org.unbescape.properties.PropertiesValueEscapeUtil" />
		<field name="DEFAULT_ENCODING" class="org.unbescape.uri.UriEscape" />
		<method signature="void &lt;init&gt;()" class="org.unbescape.uri.UriEscape" />
		<method signature="boolean isReserved(int)" class="org.unbescape.uri.UriEscapeUtil$UriEscapeType" />
		<method signature="boolean isGenDelim(int)" class="org.unbescape.uri.UriEscapeUtil$UriEscapeType" />
		<field name="ESCAPE_PREFIX" class="org.unbescape.uri.UriEscapeUtil" />
		<method signature="void &lt;init&gt;()" class="org.unbescape.uri.UriEscapeUtil" />
		<method signature="void &lt;init&gt;()" class="org.unbescape.xml.Xml10EscapeSymbolsInitializer" />
		<method signature="void &lt;init&gt;()" class="org.unbescape.xml.Xml11EscapeSymbolsInitializer" />
		<method signature="void &lt;init&gt;()" class="org.unbescape.xml.XmlEscape" />
		<field name="LEVELS_LEN" class="org.unbescape.xml.XmlEscapeSymbols" />
		<field name="REFERENCE_PREFIX" class="org.unbescape.xml.XmlEscapeUtil" />
		<field name="REFERENCE_NUMERIC_PREFIX2" class="org.unbescape.xml.XmlEscapeUtil" />
		<field name="REFERENCE_HEXA_PREFIX3" class="org.unbescape.xml.XmlEscapeUtil" />
		<field name="REFERENCE_SUFFIX" class="org.unbescape.xml.XmlEscapeUtil" />
		<method signature="void &lt;init&gt;()" class="org.unbescape.xml.XmlEscapeUtil" />
		<field name="SEVERITY_WARNING" class="org.w3c.dom.DOMError" />
		<field name="SEVERITY_ERROR" class="org.w3c.dom.DOMError" />
		<field name="SEVERITY_FATAL_ERROR" class="org.w3c.dom.DOMError" />
		<field name="INDEX_SIZE_ERR" class="org.w3c.dom.DOMException" />
		<field name="DOMSTRING_SIZE_ERR" class="org.w3c.dom.DOMException" />
		<field name="HIERARCHY_REQUEST_ERR" class="org.w3c.dom.DOMException" />
		<field name="WRONG_DOCUMENT_ERR" class="org.w3c.dom.DOMException" />
		<field name="INVALID_CHARACTER_ERR" class="org.w3c.dom.DOMException" />
		<field name="NO_DATA_ALLOWED_ERR" class="org.w3c.dom.DOMException" />
		<field name="NO_MODIFICATION_ALLOWED_ERR" class="org.w3c.dom.DOMException" />
		<field name="NOT_FOUND_ERR" class="org.w3c.dom.DOMException" />
		<field name="NOT_SUPPORTED_ERR" class="org.w3c.dom.DOMException" />
		<field name="INUSE_ATTRIBUTE_ERR" class="org.w3c.dom.DOMException" />
		<field name="INVALID_STATE_ERR" class="org.w3c.dom.DOMException" />
		<field name="SYNTAX_ERR" class="org.w3c.dom.DOMException" />
		<field name="INVALID_MODIFICATION_ERR" class="org.w3c.dom.DOMException" />
		<field name="NAMESPACE_ERR" class="org.w3c.dom.DOMException" />
		<field name="INVALID_ACCESS_ERR" class="org.w3c.dom.DOMException" />
		<field name="VALIDATION_ERR" class="org.w3c.dom.DOMException" />
		<field name="TYPE_MISMATCH_ERR" class="org.w3c.dom.DOMException" />
		<field name="serialVersionUID" class="org.w3c.dom.DOMException" />
		<field name="ELEMENT_NODE" class="org.w3c.dom.Node" />
		<field name="ATTRIBUTE_NODE" class="org.w3c.dom.Node" />
		<field name="TEXT_NODE" class="org.w3c.dom.Node" />
		<field name="CDATA_SECTION_NODE" class="org.w3c.dom.Node" />
		<field name="ENTITY_REFERENCE_NODE" class="org.w3c.dom.Node" />
		<field name="ENTITY_NODE" class="org.w3c.dom.Node" />
		<field name="PROCESSING_INSTRUCTION_NODE" class="org.w3c.dom.Node" />
		<field name="COMMENT_NODE" class="org.w3c.dom.Node" />
		<field name="DOCUMENT_NODE" class="org.w3c.dom.Node" />
		<field name="DOCUMENT_TYPE_NODE" class="org.w3c.dom.Node" />
		<field name="DOCUMENT_FRAGMENT_NODE" class="org.w3c.dom.Node" />
		<field name="NOTATION_NODE" class="org.w3c.dom.Node" />
		<field name="DOCUMENT_POSITION_DISCONNECTED" class="org.w3c.dom.Node" />
		<field name="DOCUMENT_POSITION_PRECEDING" class="org.w3c.dom.Node" />
		<field name="DOCUMENT_POSITION_FOLLOWING" class="org.w3c.dom.Node" />
		<field name="DOCUMENT_POSITION_CONTAINS" class="org.w3c.dom.Node" />
		<field name="DOCUMENT_POSITION_CONTAINED_BY" class="org.w3c.dom.Node" />
		<field name="DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC" class="org.w3c.dom.Node" />
		<field name="DERIVATION_RESTRICTION" class="org.w3c.dom.TypeInfo" />
		<field name="DERIVATION_EXTENSION" class="org.w3c.dom.TypeInfo" />
		<field name="DERIVATION_UNION" class="org.w3c.dom.TypeInfo" />
		<field name="DERIVATION_LIST" class="org.w3c.dom.TypeInfo" />
		<field name="NODE_CLONED" class="org.w3c.dom.UserDataHandler" />
		<field name="NODE_IMPORTED" class="org.w3c.dom.UserDataHandler" />
		<field name="NODE_DELETED" class="org.w3c.dom.UserDataHandler" />
		<field name="NODE_RENAMED" class="org.w3c.dom.UserDataHandler" />
		<field name="NODE_ADOPTED" class="org.w3c.dom.UserDataHandler" />
		<field name="PROPERTY" class="org.w3c.dom.bootstrap.DOMImplementationRegistry" />
		<field name="DEFAULT_LINE_LENGTH" class="org.w3c.dom.bootstrap.DOMImplementationRegistry" />
		<field name="DEFAULT_DOM_IMPLEMENTATION_SOURCE" class="org.w3c.dom.bootstrap.DOMImplementationRegistry" />
		<field name="CSS_UNKNOWN" class="org.w3c.dom.css.CSSPrimitiveValue" />
		<field name="CSS_NUMBER" class="org.w3c.dom.css.CSSPrimitiveValue" />
		<field name="CSS_PERCENTAGE" class="org.w3c.dom.css.CSSPrimitiveValue" />
		<field name="CSS_EMS" class="org.w3c.dom.css.CSSPrimitiveValue" />
		<field name="CSS_EXS" class="org.w3c.dom.css.CSSPrimitiveValue" />
		<field name="CSS_PX" class="org.w3c.dom.css.CSSPrimitiveValue" />
		<field name="CSS_CM" class="org.w3c.dom.css.CSSPrimitiveValue" />
		<field name="CSS_MM" class="org.w3c.dom.css.CSSPrimitiveValue" />
		<field name="CSS_IN" class="org.w3c.dom.css.CSSPrimitiveValue" />
		<field name="CSS_PT" class="org.w3c.dom.css.CSSPrimitiveValue" />
		<field name="CSS_PC" class="org.w3c.dom.css.CSSPrimitiveValue" />
		<field name="CSS_DEG" class="org.w3c.dom.css.CSSPrimitiveValue" />
		<field name="CSS_RAD" class="org.w3c.dom.css.CSSPrimitiveValue" />
		<field name="CSS_GRAD" class="org.w3c.dom.css.CSSPrimitiveValue" />
		<field name="CSS_MS" class="org.w3c.dom.css.CSSPrimitiveValue" />
		<field name="CSS_S" class="org.w3c.dom.css.CSSPrimitiveValue" />
		<field name="CSS_HZ" class="org.w3c.dom.css.CSSPrimitiveValue" />
		<field name="CSS_KHZ" class="org.w3c.dom.css.CSSPrimitiveValue" />
		<field name="CSS_DIMENSION" class="org.w3c.dom.css.CSSPrimitiveValue" />
		<field name="CSS_STRING" class="org.w3c.dom.css.CSSPrimitiveValue" />
		<field name="CSS_URI" class="org.w3c.dom.css.CSSPrimitiveValue" />
		<field name="CSS_IDENT" class="org.w3c.dom.css.CSSPrimitiveValue" />
		<field name="CSS_ATTR" class="org.w3c.dom.css.CSSPrimitiveValue" />
		<field name="CSS_COUNTER" class="org.w3c.dom.css.CSSPrimitiveValue" />
		<field name="CSS_RECT" class="org.w3c.dom.css.CSSPrimitiveValue" />
		<field name="CSS_RGBCOLOR" class="org.w3c.dom.css.CSSPrimitiveValue" />
		<field name="UNKNOWN_RULE" class="org.w3c.dom.css.CSSRule" />
		<field name="STYLE_RULE" class="org.w3c.dom.css.CSSRule" />
		<field name="CHARSET_RULE" class="org.w3c.dom.css.CSSRule" />
		<field name="IMPORT_RULE" class="org.w3c.dom.css.CSSRule" />
		<field name="MEDIA_RULE" class="org.w3c.dom.css.CSSRule" />
		<field name="FONT_FACE_RULE" class="org.w3c.dom.css.CSSRule" />
		<field name="PAGE_RULE" class="org.w3c.dom.css.CSSRule" />
		<field name="CSS_INHERIT" class="org.w3c.dom.css.CSSValue" />
		<field name="CSS_PRIMITIVE_VALUE" class="org.w3c.dom.css.CSSValue" />
		<field name="CSS_VALUE_LIST" class="org.w3c.dom.css.CSSValue" />
		<field name="CSS_CUSTOM" class="org.w3c.dom.css.CSSValue" />
		<field name="CAPTURING_PHASE" class="org.w3c.dom.events.Event" />
		<field name="AT_TARGET" class="org.w3c.dom.events.Event" />
		<field name="BUBBLING_PHASE" class="org.w3c.dom.events.Event" />
		<field name="UNSPECIFIED_EVENT_TYPE_ERR" class="org.w3c.dom.events.EventException" />
		<field name="MODIFICATION" class="org.w3c.dom.events.MutationEvent" />
		<field name="ADDITION" class="org.w3c.dom.events.MutationEvent" />
		<field name="REMOVAL" class="org.w3c.dom.events.MutationEvent" />
		<field name="MODE_SYNCHRONOUS" class="org.w3c.dom.ls.DOMImplementationLS" />
		<field name="MODE_ASYNCHRONOUS" class="org.w3c.dom.ls.DOMImplementationLS" />
		<field name="PARSE_ERR" class="org.w3c.dom.ls.LSException" />
		<field name="SERIALIZE_ERR" class="org.w3c.dom.ls.LSException" />
		<field name="ACTION_APPEND_AS_CHILDREN" class="org.w3c.dom.ls.LSParser" />
		<field name="ACTION_REPLACE_CHILDREN" class="org.w3c.dom.ls.LSParser" />
		<field name="ACTION_INSERT_BEFORE" class="org.w3c.dom.ls.LSParser" />
		<field name="ACTION_INSERT_AFTER" class="org.w3c.dom.ls.LSParser" />
		<field name="ACTION_REPLACE" class="org.w3c.dom.ls.LSParser" />
		<field name="FILTER_ACCEPT" class="org.w3c.dom.ls.LSParserFilter" />
		<field name="FILTER_REJECT" class="org.w3c.dom.ls.LSParserFilter" />
		<field name="FILTER_SKIP" class="org.w3c.dom.ls.LSParserFilter" />
		<field name="FILTER_INTERRUPT" class="org.w3c.dom.ls.LSParserFilter" />
		<field name="START_TO_START" class="org.w3c.dom.ranges.Range" />
		<field name="START_TO_END" class="org.w3c.dom.ranges.Range" />
		<field name="END_TO_END" class="org.w3c.dom.ranges.Range" />
		<field name="END_TO_START" class="org.w3c.dom.ranges.Range" />
		<field name="BAD_BOUNDARYPOINTS_ERR" class="org.w3c.dom.ranges.RangeException" />
		<field name="INVALID_NODE_TYPE_ERR" class="org.w3c.dom.ranges.RangeException" />
		<field name="FILTER_ACCEPT" class="org.w3c.dom.traversal.NodeFilter" />
		<field name="FILTER_REJECT" class="org.w3c.dom.traversal.NodeFilter" />
		<field name="FILTER_SKIP" class="org.w3c.dom.traversal.NodeFilter" />
		<field name="SHOW_ALL" class="org.w3c.dom.traversal.NodeFilter" />
		<field name="SHOW_ELEMENT" class="org.w3c.dom.traversal.NodeFilter" />
		<field name="SHOW_ATTRIBUTE" class="org.w3c.dom.traversal.NodeFilter" />
		<field name="SHOW_TEXT" class="org.w3c.dom.traversal.NodeFilter" />
		<field name="SHOW_CDATA_SECTION" class="org.w3c.dom.traversal.NodeFilter" />
		<field name="SHOW_ENTITY_REFERENCE" class="org.w3c.dom.traversal.NodeFilter" />
		<field name="SHOW_ENTITY" class="org.w3c.dom.traversal.NodeFilter" />
		<field name="SHOW_PROCESSING_INSTRUCTION" class="org.w3c.dom.traversal.NodeFilter" />
		<field name="SHOW_COMMENT" class="org.w3c.dom.traversal.NodeFilter" />
		<field name="SHOW_DOCUMENT" class="org.w3c.dom.traversal.NodeFilter" />
		<field name="SHOW_DOCUMENT_TYPE" class="org.w3c.dom.traversal.NodeFilter" />
		<field name="SHOW_DOCUMENT_FRAGMENT" class="org.w3c.dom.traversal.NodeFilter" />
		<field name="SHOW_NOTATION" class="org.w3c.dom.traversal.NodeFilter" />
		<field name="INVALID_EXPRESSION_ERR" class="org.w3c.dom.xpath.XPathException" />
		<field name="TYPE_ERR" class="org.w3c.dom.xpath.XPathException" />
		<field name="XPATH_NAMESPACE_NODE" class="org.w3c.dom.xpath.XPathNamespace" />
		<field name="ANY_TYPE" class="org.w3c.dom.xpath.XPathResult" />
		<field name="NUMBER_TYPE" class="org.w3c.dom.xpath.XPathResult" />
		<field name="STRING_TYPE" class="org.w3c.dom.xpath.XPathResult" />
		<field name="BOOLEAN_TYPE" class="org.w3c.dom.xpath.XPathResult" />
		<field name="UNORDERED_NODE_ITERATOR_TYPE" class="org.w3c.dom.xpath.XPathResult" />
		<field name="ORDERED_NODE_ITERATOR_TYPE" class="org.w3c.dom.xpath.XPathResult" />
		<field name="UNORDERED_NODE_SNAPSHOT_TYPE" class="org.w3c.dom.xpath.XPathResult" />
		<field name="ORDERED_NODE_SNAPSHOT_TYPE" class="org.w3c.dom.xpath.XPathResult" />
		<field name="ANY_UNORDERED_NODE_TYPE" class="org.w3c.dom.xpath.XPathResult" />
		<field name="FIRST_ORDERED_NODE_TYPE" class="org.w3c.dom.xpath.XPathResult" />
		<field name="serialVersionUID" class="org.xml.sax.SAXException" />
		<field name="serialVersionUID" class="org.xml.sax.SAXNotRecognizedException" />
		<field name="serialVersionUID" class="org.xml.sax.SAXNotSupportedException" />
		<field name="serialVersionUID" class="org.xml.sax.SAXParseException" />
		<field name="XMLNS" class="org.xml.sax.helpers.NamespaceSupport" />
		<field name="NSDECL" class="org.xml.sax.helpers.NamespaceSupport" />
		<field name="DO_FALLBACK" class="org.xml.sax.helpers.NewInstance" />
		<method signature="void &lt;init&gt;()" class="org.xml.sax.helpers.NewInstance" />
		<field name="FEATURES" class="org.xml.sax.helpers.ParserAdapter" />
		<field name="NAMESPACES" class="org.xml.sax.helpers.ParserAdapter" />
		<field name="NAMESPACE_PREFIXES" class="org.xml.sax.helpers.ParserAdapter" />
		<field name="XMLNS_URIs" class="org.xml.sax.helpers.ParserAdapter" />
		<method signature="void &lt;init&gt;()" class="org.xml.sax.helpers.ParserFactory" />
		<class name="org.xml.sax.helpers.SecuritySupport$3" />
		<method signature="void &lt;init&gt;()" class="org.xml.sax.helpers.SecuritySupport" />
		<method signature="java.io.FileInputStream getFileInputStream(java.io.File)" class="org.xml.sax.helpers.SecuritySupport" />
		<field name="property" class="org.xml.sax.helpers.XMLReaderFactory" />
		<field name="DEFAULT_LINE_LENGTH" class="org.xml.sax.helpers.XMLReaderFactory" />
		<method signature="void &lt;init&gt;()" class="org.xml.sax.helpers.XMLReaderFactory" />
		<field name="CS_Name" class="teamma.data.LRB" />
		<field name="CS_Skills" class="teamma.data.LRB" />
		<field name="CS_Teams" class="teamma.data.LRB" />
		<field name="CS_Team" class="teamma.data.LRB" />
		<field name="CS_Picture" class="teamma.data.LRB" />
		<field name="CS_Starplayers" class="teamma.data.LRB" />
		<field name="CS_Category" class="teamma.data.LRB" />
		<field name="CS_Accronym" class="teamma.data.LRB" />
		<field name="CS_Special" class="teamma.data.LRB" />
		<field name="CS_Skill" class="teamma.data.LRB" />
		<field name="CS_Reroll" class="teamma.data.LRB" />
		<field name="CS_Apothecary" class="teamma.data.LRB" />
		<field name="CS_Chef" class="teamma.data.LRB" />
		<field name="CS_Igor" class="teamma.data.LRB" />
		<field name="CS_Bribe" class="teamma.data.LRB" />
		<field name="CS_PlayerTypes" class="teamma.data.LRB" />
		<field name="CS_PlayerType" class="teamma.data.LRB" />
		<field name="CS_Position" class="teamma.data.LRB" />
		<field name="CS_Limit" class="teamma.data.LRB" />
		<field name="CS_Movement" class="teamma.data.LRB" />
		<field name="CS_Strength" class="teamma.data.LRB" />
		<field name="CS_Agility" class="teamma.data.LRB" />
		<field name="CS_Armor" class="teamma.data.LRB" />
		<field name="CS_Cost" class="teamma.data.LRB" />
		<field name="CS_Single" class="teamma.data.LRB" />
		<field name="CS_SkillType" class="teamma.data.LRB" />
		<field name="CS_Double" class="teamma.data.LRB" />
		<field name="CS_SkillNotFound" class="teamma.data.LRB" />
		<field name="CS_SkillTypeNotFound" class="teamma.data.LRB" />
		<field name="CS_RosterTypeNotFound" class="teamma.data.LRB" />
		<field name="CS_forThePlayer" class="teamma.data.LRB" />
		<field name="CS_Starplayer" class="teamma.data.LRB" />
		<field name="CS_Plus1Movement" class="teamma.data.Player" />
		<field name="CS_Minus1Movement" class="teamma.data.Player" />
		<field name="CS_Plus1Strength" class="teamma.data.Player" />
		<field name="CS_Minus1Strength" class="teamma.data.Player" />
		<field name="CS_Plus1Agility" class="teamma.data.Player" />
		<field name="CS_Minus1Agility" class="teamma.data.Player" />
		<field name="CS_Plus1Armor" class="teamma.data.Player" />
		<field name="CS_Minus1Armor" class="teamma.data.Player" />
		<field name="CS_Roster" class="teamma.data.Roster" />
		<field name="CS_Composition" class="teamma.data.Roster" />
		<field name="CS_Apothecary" class="teamma.data.Roster" />
		<field name="CS_Assistants" class="teamma.data.Roster" />
		<field name="CS_Cheerleaders" class="teamma.data.Roster" />
		<field name="CS_FanFactor" class="teamma.data.Roster" />
		<field name="CS_Rerolls" class="teamma.data.Roster" />
		<field name="CS_Inducements" class="teamma.data.Roster" />
		<field name="CS_Chef" class="teamma.data.Roster" />
		<field name="CS_Igor" class="teamma.data.Roster" />
		<field name="CS_Wizard" class="teamma.data.Roster" />
		<field name="CS_Babes" class="teamma.data.Roster" />
		<field name="CS_Cards" class="teamma.data.Roster" />
		<field name="CS_Bribe" class="teamma.data.Roster" />
		<field name="CS_ExtraRerolls" class="teamma.data.Roster" />
		<field name="CS_LocalApothecary" class="teamma.data.Roster" />
		<field name="CS_StarPlayer" class="teamma.data.Roster" />
		<field name="CS_Name" class="teamma.data.Roster" />
		<field name="CS_Player" class="teamma.data.Roster" />
		<field name="CS_Position" class="teamma.data.Roster" />
		<field name="CS_Skill" class="teamma.data.Roster" />
		<field name="CS_Color" class="teamma.data.Roster" />
		<field name="_C_SINGLE_COST" class="teamma.data.Skill" />
		<field name="_C_DOUBLE_COST" class="teamma.data.Skill" />
		<field name="_C_STRENGHT_COST" class="teamma.data.Skill" />
		<field name="_C_AGILITY_COST" class="teamma.data.Skill" />
		<field name="_C_ARMOR_COST" class="teamma.data.Skill" />
		<field name="_C_MOVEMENT_COST" class="teamma.data.Skill" />
		<field name="CS_Name" class="teamma.tableModel.MjtTeamPlayers" />
		<field name="CS_Position" class="teamma.tableModel.MjtTeamPlayers" />
		<field name="CS_M" class="teamma.tableModel.MjtTeamPlayers" />
		<field name="CS_S" class="teamma.tableModel.MjtTeamPlayers" />
		<field name="CS_Ag" class="teamma.tableModel.MjtTeamPlayers" />
		<field name="CS_Ar" class="teamma.tableModel.MjtTeamPlayers" />
		<field name="CS_Skills" class="teamma.tableModel.MjtTeamPlayers" />
		<field name="CS_SR" class="teamma.tableModel.MjtTeamPlayers" />
		<field name="CS_DR" class="teamma.tableModel.MjtTeamPlayers" />
		<field name="CS_BaseCost" class="teamma.tableModel.MjtTeamPlayers" />
		<field name="CS_Cost" class="teamma.tableModel.MjtTeamPlayers" />
		<field name="CS_Characteristics" class="teamma.tableModel.MjtTeamPlayers" />
		<field name="CS_Name" class="teamma.tableModel.MjtTeamStars" />
		<field name="CS_Position" class="teamma.tableModel.MjtTeamStars" />
		<field name="CS_M" class="teamma.tableModel.MjtTeamStars" />
		<field name="CS_S" class="teamma.tableModel.MjtTeamStars" />
		<field name="CS_Ag" class="teamma.tableModel.MjtTeamStars" />
		<field name="CS_Ar" class="teamma.tableModel.MjtTeamStars" />
		<field name="CS_Skills" class="teamma.tableModel.MjtTeamStars" />
		<field name="CS_Cost" class="teamma.tableModel.MjtTeamStars" />
		<field name="CS_ChooseRoster" class="teamma.views.JdgRoster" />
		<field name="CS_RosterChoice" class="teamma.views.JdgRoster" />
		<field name="CS_RosterChoiceError" class="teamma.views.JdgRoster" />
		<field name="CS_ChooseCoach" class="teamma.views.JdgRoster" />
		<field name="CS_CoachChoice" class="teamma.views.JdgRoster" />
		<field name="CS_SelectSkillToRemove" class="teamma.views.JdgRoster" />
		<field name="CS_Skill" class="teamma.views.JdgRoster" />
		<field name="CS_RosterTypeNotSelectedClieckOnRoster" class="teamma.views.JdgRoster" />
		<field name="CS_ChooseKindOfplayer" class="teamma.views.JdgRoster" />
		<field name="CS_PlayerChoice" class="teamma.views.JdgRoster" />
		<field name="CS_Roster" class="teamma.views.JdgRoster" />
		<field name="CS_Coach" class="teamma.views.JdgRoster" />
		<field name="CS_RosterUnknown" class="teamma.views.JdgRoster" />
		<field name="CS_AssociateACoach" class="teamma.views.JdgRoster" />
		<field name="CS_SingleRoll" class="teamma.views.JdgSelectSkill" />
		<field name="CS_DoubleRoll" class="teamma.views.JdgSelectSkill" />
		<field name="CS_Error" class="teamma.views.JdgSelectSkill" />
		<field name="CS_NoSkillSelected" class="teamma.views.JdgSelectSkill" />
		<method signature="void setPlayer(teamma.data.Player)" class="teamma.views.JdgSelectSkill" />
		<field name="CS_title" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_numero" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_name" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_position" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_movement" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_strength" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_agility" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_armor" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_skills" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_cost" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_single" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_double" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_NBSP" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_players" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_teamname" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_apothecary" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_apo_price" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_apo_cost" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_coachname" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_assists" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_ass_price" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_ass_cost" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_race" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_cheer" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_cheer_price" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_cheer_cost" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_rank" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_reroll" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_reroll_price" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_reroll_cost" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_pop" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_pop_price" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_pop_cost" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_extra" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_extra_price" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_extra_cost" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_local" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_local_price" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_local_cost" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_igor" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_igor_price" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_igor_cost" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_bribe" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_bribe_price" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_bribe_cost" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_wizard" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_wizard_price" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_wizard_cost" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_babes" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_babes_price" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_babes_cost" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_chef" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_chef_price" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_chef_cost" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_cards" class="teamma.views.report.JdgPrintableRoster" />
		<field name="CS_total" class="teamma.views.report.JdgPrintableRoster" />
		<field name="serialVersionUID" class="tourma.JdgChangePairing" />
		<field name="CS_Matchs" class="tourma.JdgChangePairing" />
		<field name="CS_Confirm" class="tourma.JdgChangePairing" />
		<field name="CS_DoYouConfirmNewpairing" class="tourma.JdgChangePairing" />
		<field name="CS_AnotherCoachHasTheSameName" class="tourma.JdgCoach" />
		<field name="CS_NameIsEmpty" class="tourma.JdgCoach" />
		<field name="CS_TeamIsEmpty" class="tourma.JdgCoach" />
		<field name="CS_RosterIsEmpty" class="tourma.JdgCoach" />
		<field name="CS_RostersChoice" class="tourma.JdgCoach" />
		<field name="CS_ChooseRoster" class="tourma.JdgCoach" />
		<field name="CS_RostersChoiceError0" class="tourma.JdgCoach" />
		<field name="CS_SelectPicture" class="tourma.JdgCoach" />
		<field name="CS_Picture" class="tourma.JdgCoach" />
		<field name="CS_PleaseSelectCategory" class="tourma.JdgCoach" />
		<field name="CS_ACCR_Versus" class="tourma.JdgPairing" />
		<field name="CS_NewRoster" class="tourma.JdgRosters" />
		<field name="CS_NewRosterName" class="tourma.JdgRosters" />
		<field name="mTeamTournament" class="tourma.JdgTeam" />
		<field name="CS_EmptyTeamName" class="tourma.JdgTeam" />
		<field name="CS_SelectPicture" class="tourma.JdgTeam" />
		<field name="CS_Picture" class="tourma.JdgTeam" />
		<field name="CS_PleaseSelectCategory" class="tourma.JdgTeam" />
		<field name="CS_TourMaXMLFile" class="tourma.MainFrame" />
		<field name="CS_None" class="tourma.MainFrame" />
		<field name="CS_NAFXMLFile" class="tourma.MainFrame" />
		<field name="CS_DoYouWantToSave" class="tourma.MainFrame" />
		<field name="CS_Exit" class="tourma.MainFrame" />
		<field name="CS_FBBCSVFile" class="tourma.MainFrame" />
		<field name="CS_FBBXMLFile" class="tourma.MainFrame" />
		<field name="CS_Check" class="tourma.MainFrame" />
		<field name="CS_LargeVictoryPointsAreNotSuperiorToVictoryPoints" class="tourma.MainFrame" />
		<field name="CS_LittleLossPointsAreNotSuperiorToLossPoints" class="tourma.MainFrame" />
		<field name="CS_LargeVictoryGapIsNotMoreThanOneTouchdown" class="tourma.MainFrame" />
		<field name="CS_LittleLostGapIsNotSuperiorTo0" class="tourma.MainFrame" />
		<field name="CS_2DrawsAreMoreThan1Victory" class="tourma.MainFrame" />
		<field name="CS_2LostAreMoreThan1Draw" class="tourma.MainFrame" />
		<field name="CS_2LittleLostAreMoreThanOneDraw" class="tourma.MainFrame" />
		<field name="CS_2TeamDrawsAreMoreThan1TeamVictory" class="tourma.MainFrame" />
		<field name="CS_2TeamLostAreMoreThan1TeamVictory" class="tourma.MainFrame" />
		<field name="CS_2TeamDrawBonusAreMoreThan1TeamVictoryBonus" class="tourma.MainFrame" />
		<field name="CS_Random" class="tourma.MainFrame" />
		<field name="CS_Cup" class="tourma.MainFrame" />
		<field name="CS_RegisteringOrder" class="tourma.MainFrame" />
		<field name="CS_RoundRobin" class="tourma.MainFrame" />
		<field name="CS_OddTeamNumber" class="tourma.MainFrame" />
		<field name="CS_ManualChoice" class="tourma.MainFrame" />
		<field name="CS_Pools" class="tourma.MainFrame" />
		<field name="CS_FreeRound" class="tourma.MainFrame" />
		<field name="CS_NafRanking" class="tourma.MainFrame" />
		<field name="CS_RandomAndBalancing" class="tourma.MainFrame" />
		<field name="CS_Generation" class="tourma.MainFrame" />
		<field name="CS_ChooseGenerationMethod" class="tourma.MainFrame" />
		<field name="CS_DownloadFromNAF" class="tourma.MainFrame" />
		<field name="CS_Downloading" class="tourma.MainFrame" />
		<field name="CS_WhichCoachIsSubstituted" class="tourma.MainFrame" />
		<field name="CS_Substitution" class="tourma.MainFrame" />
		<field name="CS_Round" class="tourma.MainFrame" />
		<field name="CS_ACCR_Versus" class="tourma.MainFrame" />
		<field name="CS_WhichMatch" class="tourma.MainFrame" />
		<field name="CS_ChooseASubstitute" class="tourma.MainFrame" />
		<field name="CS_NewDOTDOTDOT" class="tourma.MainFrame" />
		<field name="CS_FirstTableCoef" class="tourma.MainFrame" />
		<field name="CS_LastTableCoef" class="tourma.MainFrame" />
		<field name="CS_RoundCoefficient" class="tourma.MainFrame" />
		<field name="CS_SwissRound" class="tourma.MainFrame" />
		<field name="CS_AcceleratedSwissRound" class="tourma.MainFrame" />
		<field name="CS_Animation" class="tourma.MainFrame" />
		<field name="CS_FreeMatch" class="tourma.MainFrame" />
		<field name="CS_Error" class="tourma.MainFrame" />
		<field name="CS_ImpossibleMatch" class="tourma.MainFrame" />
		<field name="CS_MatchAlreadyConceededOrRefused" class="tourma.MainFrame" />
		<field name="CS_Cancel" class="tourma.MainFrame" />
		<field name="CS_ConceedAMatch" class="tourma.MainFrame" />
		<field name="CS_WhoConceedTheMatch" class="tourma.MainFrame" />
		<field name="CS_RefuseAMatch" class="tourma.MainFrame" />
		<field name="CS_WhoRefuseMatch" class="tourma.MainFrame" />
		<field name="CS_Download" class="tourma.MainFrame" />
		<field name="CS_NewGame" class="tourma.MainFrame" />
		<field name="CS_Open" class="tourma.MainFrame" />
		<field name="CS_UseRosterEditor" class="tourma.MainFrame" />
		<field name="CS_ClientViewer" class="tourma.MainFrame" />
		<field name="CS_NewGameOrOpen" class="tourma.MainFrame" />
		<field name="CS_EnterRemoteTourmaServer" class="tourma.MainFrame" />
		<field name="CS_Exiting" class="tourma.MainFrame" />
		<field name="CS_ConnectionImpossibleTo" class="tourma.MainFrame" />
		<field name="CS_ChooseFullScreen" class="tourma.MainFrame" />
		<field name="CS_IndividualRanking" class="tourma.MainFrame" />
		<field name="CS_IndividualAnnexRanking" class="tourma.MainFrame" />
		<field name="CS_TeamRanking" class="tourma.MainFrame" />
		<field name="CS_TeamAnnexRanking" class="tourma.MainFrame" />
		<field name="CS_ClanRanking" class="tourma.MainFrame" />
		<field name="CS_ClanAnnexRanking" class="tourma.MainFrame" />
		<field name="CS_MatchsClash" class="tourma.MainFrame" />
		<field name="CS_CategoryRanking" class="tourma.MainFrame" />
		<field name="CS_CategoryAnnexRanking" class="tourma.MainFrame" />
		<field name="CS_GroupeRanking" class="tourma.MainFrame" />
		<field name="CS_GroupeAnnexRanking" class="tourma.MainFrame" />
		<field name="CS_IndividualPoolRanking" class="tourma.MainFrame" />
		<field name="CS_IndividualPoolAnnexRanking" class="tourma.MainFrame" />
		<field name="CS_TeamPoolRanking" class="tourma.MainFrame" />
		<field name="CS_TeamPoolAnnexRanking" class="tourma.MainFrame" />
		<field name="CS_Matchs" class="tourma.MainFrame" />
		<field name="CS_Tournament" class="tourma.MainTreeModel" />
		<field name="CS_Statistics" class="tourma.MainTreeModel" />
		<field name="CS_Parameters" class="tourma.MainTreeModel" />
		<field name="CS_Round" class="tourma.MainTreeModel" />
		<field name="CS_Cup" class="tourma.MainTreeModel" />
		<field name="CS_MESSAGE1" class="tourma.data.Coach" />
		<field name="CS_MESSAGE2" class="tourma.data.Coach" />
		<method signature="java.util.ArrayList getMinimumTeamsBalanced(tourma.data.Round)" class="tourma.data.Coach" />
		<field name="C_RANKING_SUBTYPE_POSITIVE" class="tourma.data.Parameters" />
		<field name="C_RANKING_SUBTYPE_NEGATIVE" class="tourma.data.Parameters" />
		<field name="C_RANKING_SUBTYPE_DIFFERENCE" class="tourma.data.Parameters" />
		<field name="C_RANKING_NONE" class="tourma.data.Parameters" />
		<field name="C_RANKING_POINTS" class="tourma.data.Parameters" />
		<field name="C_RANKING_OPP_POINTS" class="tourma.data.Parameters" />
		<field name="C_RANKING_VND" class="tourma.data.Parameters" />
		<field name="C_RANKING_ELO" class="tourma.data.Parameters" />
		<field name="C_RANKING_ELO_OPP" class="tourma.data.Parameters" />
		<field name="C_RANKING_NB_MATCHS" class="tourma.data.Parameters" />
		<field name="C_RANKING_OPP_POINTS_OTHER_MATCHS" class="tourma.data.Parameters" />
		<field name="C_RANKING_TABLES" class="tourma.data.Parameters" />
		<field name="C_RANKING_POINTS_WITHOUT_BONUS" class="tourma.data.Parameters" />
		<field name="C_RANKING_BONUS_POINTS" class="tourma.data.Parameters" />
		<field name="C_MAX_RANKING" class="tourma.data.Parameters" />
		<field name="CS_Individual_Annex" class="tourma.data.Ranking" />
		<field name="CS_Team_Annex" class="tourma.data.Ranking" />
		<field name="CS_Clan_Annex" class="tourma.data.Ranking" />
		<field name="CS_Individual" class="tourma.data.Ranking" />
		<field name="CS_General" class="tourma.data.Ranking" />
		<field name="CS_Clan" class="tourma.data.Ranking" />
		<field name="CS_Group" class="tourma.data.Ranking" />
		<field name="CS_Positive" class="tourma.data.Ranking" />
		<field name="CS_Negative" class="tourma.data.Ranking" />
		<field name="CS_Team" class="tourma.data.Ranking" />
		<field name="CS_array" class="tourma.data.Ranking" />
		<field name="CS_Matchs" class="tourma.data.Ranking" />
		<field name="C_BLOOD_BOWL" class="tourma.data.RosterType" />
		<field name="C_DREAD_BALL" class="tourma.data.RosterType" />
		<field name="CS_Touchdowns" class="tourma.languages.Translate" />
		<field name="CS_Injuries" class="tourma.languages.Translate" />
		<field name="CS_None" class="tourma.languages.Translate" />
		<field name="CS_Pool" class="tourma.languages.Translate" />
		<field name="CS_Cup" class="tourma.languages.Translate" />
		<field name="CS_Parameters" class="tourma.languages.Translate" />
		<field name="CS_Round_" class="tourma.languages.Translate" />
		<field name="CS_Clan" class="tourma.languages.Translate" />
		<field name="CS_Team" class="tourma.languages.Translate" />
		<field name="CS_Round" class="tourma.languages.Translate" />
		<field name="CS_Coach" class="tourma.languages.Translate" />
		<field name="CS_Opponent" class="tourma.languages.Translate" />
		<field name="CS_Roster" class="tourma.languages.Translate" />
		<field name="CS_RosterName" class="tourma.languages.Translate" />
		<field name="CS_Difference" class="tourma.languages.Translate" />
		<field name="CS_NAF" class="tourma.languages.Translate" />
		<field name="CS_Ranking" class="tourma.languages.Translate" />
		<field name="CS_Unknown" class="tourma.languages.Translate" />
		<field name="CS_Active" class="tourma.languages.Translate" />
		<field name="CS_Inactive" class="tourma.languages.Translate" />
		<field name="CS_Critera_Name" class="tourma.languages.Translate" />
		<field name="CS_Error" class="tourma.languages.Translate" />
		<field name="CS_Points_Plus" class="tourma.languages.Translate" />
		<field name="CS_Points_Minus" class="tourma.languages.Translate" />
		<field name="CS_Points_Team_Plus" class="tourma.languages.Translate" />
		<field name="CS_Points_Team_Minus" class="tourma.languages.Translate" />
		<field name="CS_Table" class="tourma.languages.Translate" />
		<field name="CS_Score" class="tourma.languages.Translate" />
		<field name="CS_Refused" class="tourma.languages.Translate" />
		<field name="CS_Conceeded" class="tourma.languages.Translate" />
		<field name="CS_Points" class="tourma.languages.Translate" />
		<field name="CS_Points_Without_Bonus" class="tourma.languages.Translate" />
		<field name="CS_Bonus_Points" class="tourma.languages.Translate" />
		<field name="CS_Nothing" class="tourma.languages.Translate" />
		<field name="CS_ELO" class="tourma.languages.Translate" />
		<field name="CS_OpponentsElo" class="tourma.languages.Translate" />
		<field name="CS_MatchCount" class="tourma.languages.Translate" />
		<field name="CS_TablesPoints" class="tourma.languages.Translate" />
		<field name="CS_Name" class="tourma.languages.Translate" />
		<field name="CS_ACCR_Victory1" class="tourma.languages.Translate" />
		<field name="CS_ACCR_Victory2" class="tourma.languages.Translate" />
		<field name="CS_ACCR_Drawn" class="tourma.languages.Translate" />
		<field name="CS_ACCR_Versus" class="tourma.languages.Translate" />
		<field name="CS_ACCR_Opponent_Points" class="tourma.languages.Translate" />
		<field name="CS_ACCR_Opponent_Points_Without_Bonus" class="tourma.languages.Translate" />
		<field name="CS_ACCR_Victory_Drawn_Lost" class="tourma.languages.Translate" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="tourma.tableModel.MjtAnnexRank" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="tourma.tableModel.MjtAnnexRank" />
		<field name="CS_CriteriaAlreadyExists" class="tourma.tableModel.MjtCriterias" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="tourma.tableModel.MjtCriterias" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="tourma.tableModel.MjtCriterias" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="tourma.tableModel.MjtMatchTeams" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="tourma.tableModel.MjtMatchTeams" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="tourma.tableModel.MjtMatches" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="tourma.tableModel.MjtMatches" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="tourma.tableModel.MjtPairs" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="tourma.tableModel.MjtPairs" />
		<field name="C_STARTING_RANK" class="tourma.tableModel.MjtRanking" />
		<field name="C_ELO_K" class="tourma.tableModel.MjtRanking" />
		<method signature="void sortDatas()" class="tourma.tableModel.MjtRanking" />
		<method signature="void delData(tourma.data.Competitor)" class="tourma.tableModel.MjtRankingManual" />
		<method signature="int getTeamVND(tourma.data.Team,java.util.ArrayList)" class="tourma.tableModel.MjtRankingTeam" />
		<method signature="int getTeamPoints(tourma.data.Team,java.util.ArrayList)" class="tourma.tableModel.MjtRankingTeam" />
		<method signature="void writeObject(java.io.ObjectOutputStream)" class="tourma.tableModel.MjtTeams" />
		<method signature="void readObject(java.io.ObjectInputStream)" class="tourma.tableModel.MjtTeams" />
		<field name="CS_ROSTER" class="tourma.utility.StringConstants" />
		<field name="CS_NAME" class="tourma.utility.StringConstants" />
		<field name="CS_NULL" class="tourma.utility.StringConstants" />
		<field name="CS_HASH" class="tourma.utility.StringConstants" />
		<field name="CS_COACH" class="tourma.utility.StringConstants" />
		<field name="CS_TEAM" class="tourma.utility.StringConstants" />
		<field name="CS_CLAN" class="tourma.utility.StringConstants" />
		<field name="CS_POOL" class="tourma.utility.StringConstants" />
		<field name="CS_ROUND" class="tourma.utility.StringConstants" />
		<field name="CS_RESULT" class="tourma.utility.StringConstants" />
		<field name="CS_CUP" class="tourma.utility.StringConstants" />
		<field name="CS_CATEGORY" class="tourma.utility.StringConstants" />
		<field name="CS_THICK" class="tourma.utility.StringConstants" />
		<field name="CS_HTML_EMPTY" class="tourma.utility.StringConstants" />
		<field name="CS_XML" class="tourma.utility.StringConstants" />
		<field name="CS_MINXML" class="tourma.utility.StringConstants" />
		<field name="CS_NONE" class="tourma.utility.StringConstants" />
		<field name="CS_POINTS" class="tourma.utility.StringConstants" />
		<field name="CS_LANGUAGE_RESOURCE" class="tourma.utility.StringConstants" />
		<field name="CS_PINCODE" class="tourma.utility.StringConstants" />
		<field name="CS_GROUP" class="tourma.utility.StringConstants" />
		<field name="CS_PICTURE" class="tourma.utility.StringConstants" />
		<field name="CS_NAF" class="tourma.utility.StringConstants" />
		<field name="CS_RANK" class="tourma.utility.StringConstants" />
		<field name="CS_ACTIVE" class="tourma.utility.StringConstants" />
		<field name="CS_HANDICAP" class="tourma.utility.StringConstants" />
		<field name="CS_COMPOSITION" class="tourma.utility.StringConstants" />
		<field name="CS_MATCH" class="tourma.utility.StringConstants" />
		<field name="CS_REFUSED_BY" class="tourma.utility.StringConstants" />
		<field name="CS_CONCEEDED_BY" class="tourma.utility.StringConstants" />
		<field name="CS_REFUSED" class="tourma.utility.StringConstants" />
		<field name="CS_CONCEEDED" class="tourma.utility.StringConstants" />
		<field name="CS_VALUE" class="tourma.utility.StringConstants" />
		<field name="CS_SUBSTITUTION" class="tourma.utility.StringConstants" />
		<field name="CS_CRITERIA" class="tourma.utility.StringConstants" />
		<field name="CS_POINTS_FOR" class="tourma.utility.StringConstants" />
		<field name="CS_POINTS_AGAINST" class="tourma.utility.StringConstants" />
		<field name="CS_TEAM_POINTS_FOR" class="tourma.utility.StringConstants" />
		<field name="CS_TEAM_POINTS_AGAINST" class="tourma.utility.StringConstants" />
		<field name="CS_GROUP_MODIFIER_POINTS" class="tourma.utility.StringConstants" />
		<field name="CS_VICTORY" class="tourma.utility.StringConstants" />
		<field name="CS_LARGE_VICTORY" class="tourma.utility.StringConstants" />
		<field name="CS_LITTLE_LOST" class="tourma.utility.StringConstants" />
		<field name="CS_DRAW" class="tourma.utility.StringConstants" />
		<field name="CS_LOST" class="tourma.utility.StringConstants" />
		<field name="CS_POSITION" class="tourma.utility.StringConstants" />
		<field name="CS_MEMBER" class="tourma.utility.StringConstants" />
		<field name="CS_TEAMMATES" class="tourma.utility.StringConstants" />
		<field name="CS_PARAMETERS" class="tourma.utility.StringConstants" />
		<field name="CS_ORGANIZER" class="tourma.utility.StringConstants" />
		<field name="CS_DATE" class="tourma.utility.StringConstants" />
		<field name="CS_PLACE" class="tourma.utility.StringConstants" />
		<field name="CS_PORTUGAL" class="tourma.utility.StringConstants" />
		<field name="CS_VICTORY_TEAM" class="tourma.utility.StringConstants" />
		<field name="CS_DRAW_TEAM" class="tourma.utility.StringConstants" />
		<field name="CS_LOST_TEAM" class="tourma.utility.StringConstants" />
		<field name="CS_LARGE_VICTORY_GAP" class="tourma.utility.StringConstants" />
		<field name="CS_LITTLE_LOST_GAP" class="tourma.utility.StringConstants" />
		<field name="CS_BYTEAM" class="tourma.utility.StringConstants" />
		<field name="CS_TEAMPAIRING" class="tourma.utility.StringConstants" />
		<field name="CS_TEAMINDIVPAIRING" class="tourma.utility.StringConstants" />
		<field name="CS_TEAMVICTORYPOINTS" class="tourma.utility.StringConstants" />
		<field name="CS_TEAMDRAWPOINTS" class="tourma.utility.StringConstants" />
		<field name="CS_TEAMVICTORYONLY" class="tourma.utility.StringConstants" />
		<field name="CS_GROUPENABLE" class="tourma.utility.StringConstants" />
		<field name="CS_WEBEDIT" class="tourma.utility.StringConstants" />
		<field name="CS_SUBSTITUTES" class="tourma.utility.StringConstants" />
		<field name="CS_GAMETYPE" class="tourma.utility.StringConstants" />
		<field name="CS_ACTVATECLANS" class="tourma.utility.StringConstants" />
		<field name="CS_AVOIDFIRSTMATCH" class="tourma.utility.StringConstants" />
		<field name="CS_AVOIDMATCH" class="tourma.utility.StringConstants" />
		<field name="CS_CLANTEAMMATESNUMBER" class="tourma.utility.StringConstants" />
		<field name="CS_MULTIROSTER" class="tourma.utility.StringConstants" />
		<field name="CS_INDIVBALANCED" class="tourma.utility.StringConstants" />
		<field name="CS_TEAMBALANCED" class="tourma.utility.StringConstants" />
		<field name="CS_COLOR" class="tourma.utility.StringConstants" />
		<field name="CS_USE_IMAGE" class="tourma.utility.StringConstants" />
		<field name="CS_USE_LARGE_VICTORY" class="tourma.utility.StringConstants" />
		<field name="CS_USE_LITTLE_LOST" class="tourma.utility.StringConstants" />
		<field name="CS_TABLEBONUS" class="tourma.utility.StringConstants" />
		<field name="CS_TABLEBONUSPERROUND" class="tourma.utility.StringConstants" />
		<field name="CS_TABLEBONUSCOEF" class="tourma.utility.StringConstants" />
		<field name="CS_USE_BEST_RESULT_INDIV" class="tourma.utility.StringConstants" />
		<field name="CS_USE_BEST_RESULT_TEAM" class="tourma.utility.StringConstants" />
		<field name="CS_BEST_RESULT_INDIV" class="tourma.utility.StringConstants" />
		<field name="CS_BEST_RESULT_TEAM" class="tourma.utility.StringConstants" />
		<field name="CS_APPLY_TO_ANNEX_TEAM" class="tourma.utility.StringConstants" />
		<field name="CS_APPLY_TO_ANNEX_INDIV" class="tourma.utility.StringConstants" />
		<field name="CS_EXCEPT_BEST_AND_WORST_INDIV" class="tourma.utility.StringConstants" />
		<field name="CS_EXCEPT_BEST_AND_WORST_TEAM" class="tourma.utility.StringConstants" />
		<field name="CS_RANKING" class="tourma.utility.StringConstants" />
		<field name="CS_TYPE" class="tourma.utility.StringConstants" />
		<field name="CS_ORDER" class="tourma.utility.StringConstants" />
		<field name="CS_POS" class="tourma.utility.StringConstants" />
		<field name="CS_LOOSERCUP" class="tourma.utility.StringConstants" />
		<field name="CS_TOUR" class="tourma.utility.StringConstants" />
		<field name="CS_MAXTOUR" class="tourma.utility.StringConstants" />
		<field name="CS_MINCOEF" class="tourma.utility.StringConstants" />
		<field name="CS_MAXCOEF" class="tourma.utility.StringConstants" />
		<field name="CS_INDEX" class="tourma.utility.StringConstants" />
		<field name="CS_TITULAR" class="tourma.utility.StringConstants" />
		<field name="CS_SUBSTITUTE" class="tourma.utility.StringConstants" />
		<field name="CS_TOURNAMENT" class="tourma.utility.StringConstants" />
		<field name="CS_VERSION" class="tourma.utility.StringConstants" />
		<field name="CS_ROUNDROBIN" class="tourma.utility.StringConstants" />
		<field name="CS_DESCRIPTION" class="tourma.utility.StringConstants" />
		<field name="CS_WEB_PORT" class="tourma.utility.StringConstants" />
		<field name="CS_VERSION_RESOURCES" class="tourma.utility.Version" />
		<field name="CS_VERSION_KEY" class="tourma.utility.Version" />
		<method signature="void &lt;init&gt;()" class="tourma.utils.Balancing" />
		<field name="GEN_ORDER" class="tourma.utils.Generation" />
		<field name="GEN_RANDOM" class="tourma.utils.Generation" />
		<field name="GEN_SWISS" class="tourma.utils.Generation" />
		<field name="GEN_QSWISS" class="tourma.utils.Generation" />
		<field name="GEN_CUP" class="tourma.utils.Generation" />
		<field name="GEN_RROBIN" class="tourma.utils.Generation" />
		<field name="GEN_MANUAL" class="tourma.utils.Generation" />
		<field name="GEN_POOL" class="tourma.utils.Generation" />
		<field name="GEN_NAF" class="tourma.utils.Generation" />
		<field name="GEN_FREE" class="tourma.utils.Generation" />
		<field name="GEN_BALANCED" class="tourma.utils.Generation" />
		<field name="CS_GenerationError" class="tourma.utils.Generation" />
		<field name="CS_BadNumberOfActivePlayersForTeam" class="tourma.utils.Generation" />
		<field name="CS_OddNumberOfActiveCoachs" class="tourma.utils.Generation" />
		<field name="CS_DoYouWantATeamFirstPairing" class="tourma.utils.Generation" />
		<field name="CS_FirstRound" class="tourma.utils.Generation" />
		<field name="CS_NumberByPool" class="tourma.utils.Generation" />
		<field name="CS_TheNumberOfTeamsIsNotAMultipleOfYourChoice" class="tourma.utils.Generation" />
		<field name="CS_DoYouWantToChooseRankTeam" class="tourma.utils.Generation" />
		<field name="CS_ChooseCompetitor" class="tourma.utils.Generation" />
		<field name="CS_ChooseOpponentFor" class="tourma.utils.Generation" />
		<field name="CS_ChoosOpponent" class="tourma.utils.Generation" />
		<field name="CS_IsItDoubleKickTournament" class="tourma.utils.Generation" />
		<field name="CS_NotEnoughRoundToAvoidSameMatch" class="tourma.utils.Generation" />
		<field name="CS_AccleratedSwissMethodIsNotApplicable" class="tourma.utils.Generation" />
		<field name="CS_DoYouWantToMixDraw" class="tourma.utils.Generation" />
		<field name="CS_FinalRoundReached" class="tourma.utils.Generation" />
		<field name="CS_DoYouWantToGenerateThirdPlaceMatch" class="tourma.utils.Generation" />
		<field name="CS_NumberOfTurns" class="tourma.utils.Generation" />
		<field name="CS_DoYouWantToUseCategoriesForTheCup" class="tourma.utils.Generation" />
		<field name="CS_PleaseSelectCategoriesToUseForTheCup" class="tourma.utils.Generation" />
		<field name="CS_MixAll" class="tourma.utils.Generation" />
		<field name="CS_MixByAbsoluteRanking" class="tourma.utils.Generation" />
		<field name="CS_MixByCategoryRanking" class="tourma.utils.Generation" />
		<field name="CS_KeepGroup" class="tourma.utils.Generation" />
		<field name="CS_AffectRoundsToRemainingCoachs" class="tourma.utils.Generation" />
		<field name="CS_UseSwissRoundOrRandom" class="tourma.utils.Generation" />
		<method signature="int factorielle(int)" class="tourma.utils.Generation" />
		<method signature="void &lt;init&gt;()" class="tourma.utils.Generation" />
		<method signature="void &lt;init&gt;()" class="tourma.utils.Icons" />
		<method signature="void &lt;init&gt;()" class="tourma.utils.ImageTreatment" />
		<method signature="void &lt;init&gt;()" class="tourma.utils.NAF" />
		<method signature="void &lt;init&gt;()" class="tourma.utils.display.TableFormat" />
		<field name="CS_ENTER_YOUR_PIN_CODE" class="tourma.utils.web.WebMatchResult" />
		<field name="CS_SelectYourName" class="tourma.utils.web.WebMatchResult" />
		<field name="CS_PIN_CODE" class="tourma.utils.web.WebMatchResult" />
		<field name="CS_COACH_NOT_FOUND" class="tourma.utils.web.WebMatchResult" />
		<field name="CS_MATCH_NOT_FOUND_FOR" class="tourma.utils.web.WebMatchResult" />
		<field name="CS_ENTER_OPPONENT_PIN_CODE" class="tourma.utils.web.WebMatchResult" />
		<field name="CS_Criterias" class="tourma.utils.web.WebRules" />
		<field name="CS_Individual_Points" class="tourma.utils.web.WebRules" />
		<field name="CS_LargeVictory" class="tourma.utils.web.WebRules" />
		<field name="CS_LargeVictoryGap" class="tourma.utils.web.WebRules" />
		<field name="CS_Victory" class="tourma.utils.web.WebRules" />
		<field name="CS_TeamVictoryBonus" class="tourma.utils.web.WebRules" />
		<field name="CS_TeamDrawBonus" class="tourma.utils.web.WebRules" />
		<field name="CS_Draw" class="tourma.utils.web.WebRules" />
		<field name="CS_Lost" class="tourma.utils.web.WebRules" />
		<field name="CS_LittleLost" class="tourma.utils.web.WebRules" />
		<field name="CS_LittleLostGap" class="tourma.utils.web.WebRules" />
		<field name="CS_Order" class="tourma.utils.web.WebRules" />
		<field name="CS_Options" class="tourma.utils.web.WebRules" />
		<field name="CS_ExceptBestAndWorst" class="tourma.utils.web.WebRules" />
		<field name="CS_UseBestResults" class="tourma.utils.web.WebRules" />
		<field name="CS_ExceptBestAndWorstForAnnex" class="tourma.utils.web.WebRules" />
		<field name="CS_NumberOfPlayersForClan" class="tourma.utils.web.WebRules" />
		<field name="CS_AvoidFirstRoundMatchClan" class="tourma.utils.web.WebRules" />
		<field name="CS_AvoidRoundMatchClan" class="tourma.utils.web.WebRules" />
		<field name="CS_Categories" class="tourma.utils.web.WebRules" />
		<field name="CS_Groups" class="tourma.utils.web.WebRules" />
		<field name="serialVersionUID" class="tourma.views.GraphicalMatch" />
		<field name="CS_OpponentByTeam" class="tourma.views.JPNStatistics" />
		<field name="CS_OpponentByCoach" class="tourma.views.JPNStatistics" />
		<field name="CS_Done" class="tourma.views.JPNStatistics" />
		<field name="CS_DoneAgainst" class="tourma.views.JPNStatistics" />
		<field name="CS_ValueByRoster" class="tourma.views.JPNStatistics" />
		<field name="CS_Roster" class="tourma.views.JPNStatistics" />
		<field name="CS_Number" class="tourma.views.JPNStatistics" />
		<field name="CS_Victories" class="tourma.views.JPNStatistics" />
		<field name="CS_Drawns" class="tourma.views.JPNStatistics" />
		<field name="CS_Losts" class="tourma.views.JPNStatistics" />
		<field name="CS_ResultsByRoster" class="tourma.views.JPNStatistics" />
		<field name="CS_Results" class="tourma.views.JPNStatistics" />
		<field name="CS_Groups" class="tourma.views.JPNStatistics" />
		<field name="CS_Points" class="tourma.views.JPNStatistics" />
		<field name="CS_OpponentsPoints" class="tourma.views.JPNStatistics" />
		<field name="CS_Rankings" class="tourma.views.JPNStatistics" />
		<field name="CS_TeamRankings" class="tourma.views.JPNStatistics" />
		<field name="CS_Ranking" class="tourma.views.JPNStatistics" />
		<field name="CS_Round" class="tourma.views.JPNStatistics" />
		<field name="CS_OpponentsByTeam" class="tourma.views.JPNStatistics" />
		<field name="CS_OpponentsByCoach" class="tourma.views.JPNStatistics" />
		<field name="CS_Opponents" class="tourma.views.JPNStatistics" />
		<field name="CS_MatchsCount" class="tourma.views.JPNStatistics" />
		<field name="serialVersionUID" class="tourma.views.fullscreen.JFullScreenClanRank" />
		<field name="CS_Clan" class="tourma.views.fullscreen.JFullScreenClanRank" />
		<field name="CS_Members" class="tourma.views.fullscreen.JFullScreenClanRank" />
		<field name="CS_Clan" class="tourma.views.fullscreen.JFullScreenClanTeamAnnex" />
		<field name="CS_Team" class="tourma.views.fullscreen.JFullScreenClanTeamAnnex" />
		<field name="CS_Pool" class="tourma.views.fullscreen.JFullScreenClanTeamAnnex" />
		<field name="CS_Pool" class="tourma.views.fullscreen.JFullScreenIndivAnnex" />
		<field name="CS_Team" class="tourma.views.fullscreen.JFullScreenIndivAnnex" />
		<field name="CS_Clan" class="tourma.views.fullscreen.JFullScreenIndivAnnex" />
		<field name="CS_Coach" class="tourma.views.fullscreen.JFullScreenIndivAnnex" />
		<field name="serialVersionUID" class="tourma.views.fullscreen.JFullScreenIndivRank" />
		<field name="C_GENERAL" class="tourma.views.fullscreen.JFullScreenIndivRank" />
		<field name="C_CATEGORY" class="tourma.views.fullscreen.JFullScreenIndivRank" />
		<field name="C_GROUP" class="tourma.views.fullscreen.JFullScreenIndivRank" />
		<field name="C_POOL" class="tourma.views.fullscreen.JFullScreenIndivRank" />
		<field name="CS_Pool" class="tourma.views.fullscreen.JFullScreenIndivRank" />
		<field name="CS_Team" class="tourma.views.fullscreen.JFullScreenIndivRank" />
		<field name="CS_Clan" class="tourma.views.fullscreen.JFullScreenIndivRank" />
		<field name="CS_Coach" class="tourma.views.fullscreen.JFullScreenIndivRank" />
		<field name="CS_Roster" class="tourma.views.fullscreen.JFullScreenIndivRank" />
		<field name="CS_RosterName" class="tourma.views.fullscreen.JFullScreenIndivRank" />
		<field name="CS_Round" class="tourma.views.fullscreen.JFullScreenMatchs$Animation" />
		<field name="CS_Table" class="tourma.views.fullscreen.JFullScreenMatchs$Animation" />
		<field name="CS_Pool" class="tourma.views.fullscreen.JFullScreenTeamRank" />
		<field name="CS_Team" class="tourma.views.fullscreen.JFullScreenTeamRank" />
		<field name="CS_EnterCategoryNameKey" class="tourma.views.parameters.JPNParamCategories" />
		<field name="CS_EnterClanNameKey" class="tourma.views.parameters.JPNParamClan" />
		<field name="CS_SelectAnPicture" class="tourma.views.parameters.JPNParamClan" />
		<field name="CS_Picture" class="tourma.views.parameters.JPNParamClan" />
		<field name="CS_Criteria" class="tourma.views.parameters.JPNParamCriterias" />
		<field name="CS_EnterNewGroupName" class="tourma.views.parameters.JPNParamGroup" />
		<field name="CS_EnterGroupNewName" class="tourma.views.parameters.JPNParamGroup" />
		<field name="CS_None" class="tourma.views.parameters.JPNParamIndiv" />
		<field name="CS_Points" class="tourma.views.parameters.JPNParamIndiv" />
		<field name="CS_OpponentPoints" class="tourma.views.parameters.JPNParamIndiv" />
		<field name="CS_ACCR_VictoryDrawLost" class="tourma.views.parameters.JPNParamIndiv" />
		<field name="CS_ELO" class="tourma.views.parameters.JPNParamIndiv" />
		<field name="CS_OpponentsElo" class="tourma.views.parameters.JPNParamIndiv" />
		<field name="CS_MatchCount" class="tourma.views.parameters.JPNParamIndiv" />
		<field name="CS_OpponentsPointsExceptOwnMatch" class="tourma.views.parameters.JPNParamIndiv" />
		<field name="CS_TablesPoints" class="tourma.views.parameters.JPNParamIndiv" />
		<field name="CS_PointsWithoutBonus" class="tourma.views.parameters.JPNParamIndiv" />
		<field name="CS_BonusPoints" class="tourma.views.parameters.JPNParamIndiv" />
		<field name="CS_Player" class="tourma.views.parameters.JPNParamIndiv" />
		<field name="CS_Opponent" class="tourma.views.parameters.JPNParamIndiv" />
		<field name="CS_Difference" class="tourma.views.parameters.JPNParamIndiv" />
		<field name="CS_None" class="tourma.views.parameters.JPNParamTeam" />
		<field name="CS_Points" class="tourma.views.parameters.JPNParamTeam" />
		<field name="CS_OpponentPoints" class="tourma.views.parameters.JPNParamTeam" />
		<field name="CS_ACCR_VictoryDrawLost" class="tourma.views.parameters.JPNParamTeam" />
		<field name="CS_ELO" class="tourma.views.parameters.JPNParamTeam" />
		<field name="CS_OpponentsElo" class="tourma.views.parameters.JPNParamTeam" />
		<field name="CS_MatchCount" class="tourma.views.parameters.JPNParamTeam" />
		<field name="CS_OpponentsPointsExceptOwnMatch" class="tourma.views.parameters.JPNParamTeam" />
		<field name="CS_TablesPoints" class="tourma.views.parameters.JPNParamTeam" />
		<field name="CS_PointsWithoutBonus" class="tourma.views.parameters.JPNParamTeam" />
		<field name="CS_BonusPoints" class="tourma.views.parameters.JPNParamTeam" />
		<field name="CS_Player" class="tourma.views.parameters.JPNParamTeam" />
		<field name="CS_Opponent" class="tourma.views.parameters.JPNParamTeam" />
		<field name="CS_Difference" class="tourma.views.parameters.JPNParamTeam" />
		<field name="CS_Individual" class="tourma.views.parameters.JPNParameters" />
		<field name="CS_Criterias" class="tourma.views.parameters.JPNParameters" />
		<field name="CS_ByTeam" class="tourma.views.parameters.JPNParameters" />
		<field name="CS_Clan" class="tourma.views.parameters.JPNParameters" />
		<field name="CS_Group" class="tourma.views.parameters.JPNParameters" />
		<field name="CS_Category" class="tourma.views.parameters.JPNParameters" />
		<field name="CS_ByTeam" class="tourma.views.parameters.JPNTeams" />
		<field name="CS_Single" class="tourma.views.parameters.JPNTeams" />
		<field name="CS_Membersnumber" class="tourma.views.parameters.JPNTeams" />
		<field name="serialVersionUID" class="tourma.views.report.JdgGlobal" />
		<field name="CS_Round" class="tourma.views.report.JdgGlobal" />
		<field name="CS_ByClan" class="tourma.views.report.JdgGlobal" />
		<field name="CS_ByTeam" class="tourma.views.report.JdgGlobal" />
		<field name="CS_ByCoach" class="tourma.views.report.JdgGlobal" />
		<field name="CS_TheMostFor" class="tourma.views.report.JdgGlobal" />
		<field name="CS_TheLessFor" class="tourma.views.report.JdgGlobal" />
		<field name="CS_TheMoreAgainst" class="tourma.views.report.JdgGlobal" />
		<field name="CS_TheLessAgainst" class="tourma.views.report.JdgGlobal" />
		<field name="CS_Round" class="tourma.views.report.JdgRanking" />
		<field name="CS_Round" class="tourma.views.report.JdgRound" />
		<field name="CS_Nom" class="tourma.views.report.ReportKeys" />
		<field name="CS_Table" class="tourma.views.report.ReportKeys" />
		<field name="CS_Tables" class="tourma.views.report.ReportKeys" />
		<field name="CS_Result" class="tourma.views.report.ReportKeys" />
		<field name="CS_Criterias" class="tourma.views.report.ReportKeys" />
		<field name="CS_Matches" class="tourma.views.report.ReportKeys" />
		<field name="CS_Numero" class="tourma.views.report.ReportKeys" />
		<field name="CS_Roster1" class="tourma.views.report.ReportKeys" />
		<field name="CS_Roster2" class="tourma.views.report.ReportKeys" />
		<field name="CS_Coach1" class="tourma.views.report.ReportKeys" />
		<field name="CS_Score1" class="tourma.views.report.ReportKeys" />
		<field name="CS_Value1" class="tourma.views.report.ReportKeys" />
		<field name="CS_Coach2" class="tourma.views.report.ReportKeys" />
		<field name="CS_Score2" class="tourma.views.report.ReportKeys" />
		<field name="CS_Value2" class="tourma.views.report.ReportKeys" />
		<field name="CS_Values" class="tourma.views.report.ReportKeys" />
		<field name="CS_DateGeneration" class="tourma.views.report.ReportKeys" />
		<field name="CS_Team1" class="tourma.views.report.ReportKeys" />
		<field name="CS_V1" class="tourma.views.report.ReportKeys" />
		<field name="CS_N" class="tourma.views.report.ReportKeys" />
		<field name="CS_V2" class="tourma.views.report.ReportKeys" />
		<field name="CS_Team2" class="tourma.views.report.ReportKeys" />
		<field name="CS_Title" class="tourma.views.report.ReportKeys" />
		<field name="CS_Titles" class="tourma.views.report.ReportKeys" />
		<field name="CS_Cols" class="tourma.views.report.ReportKeys" />
		<field name="CS_Lines" class="tourma.views.report.ReportKeys" />
		<field name="CS_Name" class="tourma.views.report.ReportKeys" />
		<field name="CS_TitreMoreFor" class="tourma.views.report.ReportKeys" />
		<field name="CS_TitreLessFor" class="tourma.views.report.ReportKeys" />
		<field name="CS_TitreLessAgainst" class="tourma.views.report.ReportKeys" />
		<field name="CS_TitreMoreAgainst" class="tourma.views.report.ReportKeys" />
		<field name="CS_MoreFor" class="tourma.views.report.ReportKeys" />
		<field name="CS_LessFor" class="tourma.views.report.ReportKeys" />
		<field name="CS_LessAgainst" class="tourma.views.report.ReportKeys" />
		<field name="CS_MoreAgainst" class="tourma.views.report.ReportKeys" />
		<field name="CS_Clan" class="tourma.views.round.JPNAnnexRanking" />
		<field name="CS_Opponents" class="tourma.views.round.JPNAnnexRanking" />
		<field name="CS_Team" class="tourma.views.round.JPNAnnexRanking" />
		<field name="CS_Coach" class="tourma.views.round.JPNAnnexRanking" />
		<field name="CS_ByTheClan" class="tourma.views.round.JPNAnnexRanking" />
		<field name="CS_ByTheCoach" class="tourma.views.round.JPNAnnexRanking" />
		<field name="CS_ByTheTeam" class="tourma.views.round.JPNAnnexRanking" />
		<field name="CS_AgainstTheClan" class="tourma.views.round.JPNAnnexRanking" />
		<field name="CS_AgainstTheCoach" class="tourma.views.round.JPNAnnexRanking" />
		<field name="CS_AgainstTheTeam" class="tourma.views.round.JPNAnnexRanking" />
		<field name="CS_GeneralByCategory" class="tourma.views.round.JPNCategory" />
		<field name="CS_GeneralByClan" class="tourma.views.round.JPNClan" />
		<field name="CS_Group" class="tourma.views.round.JPNGroup" />
		<field name="serialVersionUID" class="tourma.views.round.JPNPool" />
		<field name="CS_GeneralByPool" class="tourma.views.round.JPNPool" />
		<field name="serialVersionUID" class="tourma.views.round.JPNRound" />
		<field name="CS_ByTeam" class="tourma.views.round.JPNRound" />
		<field name="CS_ByClan" class="tourma.views.round.JPNRound" />
		<field name="CS_None" class="tourma.views.round.JPNRound" />
		<field name="CS_Group" class="tourma.views.round.JPNRound" />
		<field name="CS_Category" class="tourma.views.round.JPNRound" />
		<field name="CS_Pool" class="tourma.views.round.JPNRound" />
		<field name="CS_GeneralByCoach" class="tourma.views.round.JPNRound" />
		<field name="CS_ChooseARosterFor" class="tourma.views.round.JPNRound" />
		<field name="CS_Roster" class="tourma.views.round.JPNRound" />
		<field name="CS_Matchs" class="tourma.views.round.JPNTeamRound" />
		<field name="CS_generalByTeam" class="tourma.views.round.JPNTeamRound" />
		<field name="CS_Name" class="tourma.views.system.JdgAbout" />
		<field name="CS_Date" class="tourma.views.system.JdgAbout" />
		<field name="CS_Version" class="tourma.views.system.JdgAbout" />
		<field name="CS_Version" class="tourma.views.system.MtRevisions" />
		<field name="CS_Description" class="tourma.views.system.MtRevisions" />
	</removed-code>
	<removed-resources>
	</removed-resources>
<!-- 	shrinked C:\Perso\Tourma\store\TourMa.jar BY 10,88 %. -->
<!-- 	size before: 11335 KB, size after: 10101 KB. -->
<!-- 	removed 104 classes, 891 methods, 4745 fields, 0 resources. -->
<!-- 	4122 classes remaining of 4226 total. -->
</inOutPair>
<!-- WARNING:Not all dependencies could be resolved. Please see the logfile for details. -->
</yshrink>

