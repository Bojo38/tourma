package net.sourceforge.lept4j;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.ptr.DoubleByReference;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : array.h:34</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class L_DnaHash extends Structure {
	/** C type : l_int32 */
	public int nbuckets;
	/**
	 * initial size of each dna that is made<br>
	 * C type : l_int32
	 */
	public int initsize;
	/** C type : L_Dna** */
	public DoubleByReference dna;
	public L_DnaHash() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("nbuckets", "initsize", "dna");
	}
	/**
	 * @param nbuckets C type : l_int32<br>
	 * @param initsize initial size of each dna that is made<br>
	 * C type : l_int32<br>
	 * @param dna C type : L_Dna**
	 */
	public L_DnaHash(int nbuckets, int initsize, DoubleByReference dna) {
		super();
		this.nbuckets = nbuckets;
		this.initsize = initsize;
//		if ((dna.length != this.dna.length)) 
//			throw new IllegalArgumentException("Wrong array size !");
		this.dna = dna;
	}
	public L_DnaHash(Pointer peer) {
		super(peer);
                read();
	}
	public static class ByReference extends L_DnaHash implements Structure.ByReference {
		
	};
	public static class ByValue extends L_DnaHash implements Structure.ByValue {
		
	};
}
