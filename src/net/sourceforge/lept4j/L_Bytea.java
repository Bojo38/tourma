package net.sourceforge.lept4j;
import com.ochafik.lang.jnaerator.runtime.NativeSize;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : array.h:48</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class L_Bytea extends Structure {
	/** number of bytes allocated in data array */
	public NativeSize nalloc;
	/** number of bytes presently used */
	public NativeSize size;
	/**
	 * reference count (1 if no clones)<br>
	 * C type : l_int32
	 */
	public int refcount;
	/**
	 * data array<br>
	 * C type : l_uint8*
	 */
	public Pointer data;
	public L_Bytea() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("nalloc", "size", "refcount", "data");
	}
	/**
	 * @param nalloc number of bytes allocated in data array<br>
	 * @param size number of bytes presently used<br>
	 * @param refcount reference count (1 if no clones)<br>
	 * C type : l_int32<br>
	 * @param data data array<br>
	 * C type : l_uint8*
	 */
	public L_Bytea(NativeSize nalloc, NativeSize size, int refcount, Pointer data) {
		super();
		this.nalloc = nalloc;
		this.size = size;
		this.refcount = refcount;
		this.data = data;
	}
	public L_Bytea(Pointer peer) {
		super(peer);
		read();
	}
	public static class ByReference extends L_Bytea implements Structure.ByReference {
		
	};
	public static class ByValue extends L_Bytea implements Structure.ByValue {
		
	};
}
