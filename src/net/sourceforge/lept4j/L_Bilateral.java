package net.sourceforge.lept4j;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.ptr.FloatByReference;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.PointerByReference;
import java.util.Arrays;
import java.util.List;
/**
 * ------------------------------------------------------------------------*<br>
 *                          Bilateral filter                              *<br>
 * ------------------------------------------------------------------------<br>
 * <i>native declaration : bilateral.h:21</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class L_Bilateral extends Structure {
	/**
	 * clone of source pix<br>
	 * C type : Pix*
	 */
	public net.sourceforge.lept4j.Pix.ByReference pixs;
	/**
	 * downscaled pix with mirrored border<br>
	 * C type : Pix*
	 */
	public net.sourceforge.lept4j.Pix.ByReference pixsc;
	/**
	 * 1, 2 or 4x for intermediates<br>
	 * C type : l_int32
	 */
	public int reduction;
	/**
	 * stdev of spatial gaussian<br>
	 * C type : l_float32
	 */
	public float spatial_stdev;
	/**
	 * stdev of range gaussian<br>
	 * C type : l_float32
	 */
	public float range_stdev;
	/**
	 * 1D gaussian spatial kernel<br>
	 * C type : l_float32*
	 */
	public FloatByReference spatial;
	/**
	 * one-sided gaussian range kernel<br>
	 * C type : l_float32*
	 */
	public FloatByReference range;
	/**
	 * min value in 8 bpp pix<br>
	 * C type : l_int32
	 */
	public int minval;
	/**
	 * max value in 8 bpp pix<br>
	 * C type : l_int32
	 */
	public int maxval;
	/**
	 * number of intermediate results<br>
	 * C type : l_int32
	 */
	public int ncomps;
	/**
	 * set of k values (size ncomps)<br>
	 * C type : l_int32*
	 */
	public IntByReference nc;
	/**
	 * mapping from intensity to lower k<br>
	 * C type : l_int32*
	 */
	public IntByReference kindex;
	/**
	 * mapping from intensity to fract k<br>
	 * C type : l_float32*
	 */
	public FloatByReference kfract;
	/**
	 * intermediate result images (PBC)<br>
	 * C type : Pixa*
	 */
	public net.sourceforge.lept4j.Pixa.ByReference pixac;
	/**
	 * lineptrs for pixac<br>
	 * C type : l_uint32***
	 */
	public PointerByReference lineset;
	public L_Bilateral() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("pixs", "pixsc", "reduction", "spatial_stdev", "range_stdev", "spatial", "range", "minval", "maxval", "ncomps", "nc", "kindex", "kfract", "pixac", "lineset");
	}
	public L_Bilateral(Pointer peer) {
		super(peer);
		read();
	}
	public static class ByReference extends L_Bilateral implements Structure.ByReference {
		
	};
	public static class ByValue extends L_Bilateral implements Structure.ByValue {
		
	};
}
