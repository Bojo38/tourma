package net.sourceforge.lept4j;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * -------------------------------------------------------------------------*<br>
 *                    Basic rectangle and rectangle arrays                 *<br>
 * -------------------------------------------------------------------------<br>
 * <i>native declaration : pix.h:103</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class Box extends Structure {
	/** C type : l_int32 */
	public int x;
	/** C type : l_int32 */
	public int y;
	/** C type : l_int32 */
	public int w;
	/** C type : l_int32 */
	public int h;
	/**
	 * reference count (1 if no clones)<br>
	 * C type : l_uint32
	 */
	public int refcount;
	public Box() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("x", "y", "w", "h", "refcount");
	}
	/**
	 * @param x C type : l_int32<br>
	 * @param y C type : l_int32<br>
	 * @param w C type : l_int32<br>
	 * @param h C type : l_int32<br>
	 * @param refcount reference count (1 if no clones)<br>
	 * C type : l_uint32
	 */
	public Box(int x, int y, int w, int h, int refcount) {
		super();
		this.x = x;
		this.y = y;
		this.w = w;
		this.h = h;
		this.refcount = refcount;
	}
	public Box(Pointer peer) {
		super(peer);
		read();
	}
	public static class ByReference extends Box implements Structure.ByReference {
		
	};
	public static class ByValue extends Box implements Structure.ByValue {
		
	};
}
