package net.sourceforge.lept4j;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : pix.h:21</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class PixColormap extends Structure {
	/**
	 * colormap table (array of RGBA_QUAD)<br>
	 * C type : void*
	 */
	public Pointer array;
	/**
	 * of pix (1, 2, 4 or 8 bpp)<br>
	 * C type : l_int32
	 */
	public int depth;
	/**
	 * number of color entries allocated<br>
	 * C type : l_int32
	 */
	public int nalloc;
	/**
	 * number of color entries used<br>
	 * C type : l_int32
	 */
	public int n;
	public PixColormap() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("array", "depth", "nalloc", "n");
	}
	/**
	 * @param array colormap table (array of RGBA_QUAD)<br>
	 * C type : void*<br>
	 * @param depth of pix (1, 2, 4 or 8 bpp)<br>
	 * C type : l_int32<br>
	 * @param nalloc number of color entries allocated<br>
	 * C type : l_int32<br>
	 * @param n number of color entries used<br>
	 * C type : l_int32
	 */
	public PixColormap(Pointer array, int depth, int nalloc, int n) {
		super();
		this.array = array;
		this.depth = depth;
		this.nalloc = nalloc;
		this.n = n;
	}
	public PixColormap(Pointer peer) {
		super(peer);
		read();
	}
	public static class ByReference extends PixColormap implements Structure.ByReference {
		
	};
	public static class ByValue extends PixColormap implements Structure.ByValue {
		
	};
}
