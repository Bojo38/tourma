package net.sourceforge.lept4j;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : rbtree.h:26</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class L_Rbtree_Node extends Structure {
	/** C type : Rb_Type */
	public Rb_Type key;
	/** C type : Rb_Type */
	public Rb_Type value;
	/** C type : L_Rbtree_Node* */
	public L_Rbtree_Node.ByReference left;
	/** C type : L_Rbtree_Node* */
	public L_Rbtree_Node.ByReference right;
	/** C type : L_Rbtree_Node* */
	public L_Rbtree_Node.ByReference parent;
	/** C type : l_int32 */
	public int color;
	public L_Rbtree_Node() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("key", "value", "left", "right", "parent", "color");
	}
	/**
	 * @param key C type : Rb_Type<br>
	 * @param value C type : Rb_Type<br>
	 * @param left C type : L_Rbtree_Node*<br>
	 * @param right C type : L_Rbtree_Node*<br>
	 * @param parent C type : L_Rbtree_Node*<br>
	 * @param color C type : l_int32
	 */
	public L_Rbtree_Node(Rb_Type key, Rb_Type value, L_Rbtree_Node.ByReference left, L_Rbtree_Node.ByReference right, L_Rbtree_Node.ByReference parent, int color) {
		super();
		this.key = key;
		this.value = value;
		this.left = left;
		this.right = right;
		this.parent = parent;
		this.color = color;
	}
	public L_Rbtree_Node(Pointer peer) {
		super(peer);
                read();
	}
	public static class ByReference extends L_Rbtree_Node implements Structure.ByReference {
		
	};
	public static class ByValue extends L_Rbtree_Node implements Structure.ByValue {
		
	};
}
