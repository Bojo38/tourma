package net.sourceforge.lept4j;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * -------------------------------------------------------------------------*<br>
 *                       Pix accumulator container                         *<br>
 * -------------------------------------------------------------------------<br>
 * <i>native declaration : pix.h:152</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class Pixacc extends Structure {
	/**
	 * array width<br>
	 * C type : l_int32
	 */
	public int w;
	/**
	 * array height<br>
	 * C type : l_int32
	 */
	public int h;
	/**
	 * used to allow negative<br>
	 * C type : l_int32
	 */
	public int offset;
	/**
	 * the 32 bit accumulator pix<br>
	 * C type : Pix*
	 */
	public net.sourceforge.lept4j.Pix.ByReference pix;
	public Pixacc() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("w", "h", "offset", "pix");
	}
	/**
	 * @param w array width<br>
	 * C type : l_int32<br>
	 * @param h array height<br>
	 * C type : l_int32<br>
	 * @param offset used to allow negative<br>
	 * C type : l_int32<br>
	 * @param pix the 32 bit accumulator pix<br>
	 * C type : Pix*
	 */
	public Pixacc(int w, int h, int offset, net.sourceforge.lept4j.Pix.ByReference pix) {
		super();
		this.w = w;
		this.h = h;
		this.offset = offset;
		this.pix = pix;
	}
	public Pixacc(Pointer peer) {
		super(peer);
		read();
	}
	public static class ByReference extends Pixacc implements Structure.ByReference {
		
	};
	public static class ByValue extends Pixacc implements Structure.ByValue {
		
	};
}
