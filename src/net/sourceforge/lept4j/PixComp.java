package net.sourceforge.lept4j;
import com.ochafik.lang.jnaerator.runtime.NativeSize;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * -------------------------------------------------------------------------*<br>
 *                        PixComp: compressed pix                          *<br>
 * -------------------------------------------------------------------------<br>
 * <i>native declaration : pix.h:223</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class PixComp extends Structure {
	/**
	 * width in pixels<br>
	 * C type : l_int32
	 */
	public int w;
	/**
	 * height in pixels<br>
	 * C type : l_int32
	 */
	public int h;
	/**
	 * depth in bits<br>
	 * C type : l_int32
	 */
	public int d;
	/**
	 * image res (ppi) in x direction<br>
	 * C type : l_int32
	 */
	public int xres;
	/**
	 * image res (ppi) in y direction<br>
	 * C type : l_int32
	 */
	public int yres;
	/**
	 * compressed format (IFF_TIFF_G4,<br>
	 * C type : l_int32
	 */
	public int comptype;
	/**
	 * text string associated with pix<br>
	 * C type : char*
	 */
	public Pointer text;
	/**
	 * flag (1 for cmap, 0 otherwise)<br>
	 * C type : l_int32
	 */
	public int cmapflag;
	/**
	 * the compressed image data<br>
	 * C type : l_uint8*
	 */
	public Pointer data;
	/** size of the data array */
	public NativeSize size;
	public PixComp() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("w", "h", "d", "xres", "yres", "comptype", "text", "cmapflag", "data", "size");
	}
	public PixComp(Pointer peer) {
		super(peer);
		read();
	}
	public static class ByReference extends PixComp implements Structure.ByReference {
		
	};
	public static class ByValue extends PixComp implements Structure.ByValue {
		
	};
}
