package net.sourceforge.lept4j;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * Data returned from correlation matching on an array of characters<br>
 * <i>native declaration : recog.h:139</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class L_Rcha extends Structure {
	/**
	 * indices of best templates<br>
	 * C type : Numa*
	 */
	public net.sourceforge.lept4j.Numa.ByReference naindex;
	/**
	 * correlation scores of best templates<br>
	 * C type : Numa*
	 */
	public net.sourceforge.lept4j.Numa.ByReference nascore;
	/**
	 * character strings of best templates<br>
	 * C type : Sarray*
	 */
	public net.sourceforge.lept4j.Sarray.ByReference satext;
	/**
	 * indices of best samples<br>
	 * C type : Numa*
	 */
	public net.sourceforge.lept4j.Numa.ByReference nasample;
	/**
	 * x-locations of templates (delx + shiftx)<br>
	 * C type : Numa*
	 */
	public net.sourceforge.lept4j.Numa.ByReference naxloc;
	/**
	 * y-locations of templates (dely + shifty)<br>
	 * C type : Numa*
	 */
	public net.sourceforge.lept4j.Numa.ByReference nayloc;
	/**
	 * widths of best templates<br>
	 * C type : Numa*
	 */
	public net.sourceforge.lept4j.Numa.ByReference nawidth;
	public L_Rcha() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("naindex", "nascore", "satext", "nasample", "naxloc", "nayloc", "nawidth");
	}
	/**
	 * @param naindex indices of best templates<br>
	 * C type : Numa*<br>
	 * @param nascore correlation scores of best templates<br>
	 * C type : Numa*<br>
	 * @param satext character strings of best templates<br>
	 * C type : Sarray*<br>
	 * @param nasample indices of best samples<br>
	 * C type : Numa*<br>
	 * @param naxloc x-locations of templates (delx + shiftx)<br>
	 * C type : Numa*<br>
	 * @param nayloc y-locations of templates (dely + shifty)<br>
	 * C type : Numa*<br>
	 * @param nawidth widths of best templates<br>
	 * C type : Numa*
	 */
	public L_Rcha(net.sourceforge.lept4j.Numa.ByReference naindex, net.sourceforge.lept4j.Numa.ByReference nascore, net.sourceforge.lept4j.Sarray.ByReference satext, net.sourceforge.lept4j.Numa.ByReference nasample, net.sourceforge.lept4j.Numa.ByReference naxloc, net.sourceforge.lept4j.Numa.ByReference nayloc, net.sourceforge.lept4j.Numa.ByReference nawidth) {
		super();
		this.naindex = naindex;
		this.nascore = nascore;
		this.satext = satext;
		this.nasample = nasample;
		this.naxloc = naxloc;
		this.nayloc = nayloc;
		this.nawidth = nawidth;
	}
	public L_Rcha(Pointer peer) {
		super(peer);
		read();
	}
	public static class ByReference extends L_Rcha implements Structure.ByReference {
		
	};
	public static class ByValue extends L_Rcha implements Structure.ByValue {
		
	};
}
