/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package bb.teamma.views;

import java.awt.Dimension;
import java.awt.DisplayMode;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.GridBagLayout;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.JSpinner;
import javax.swing.filechooser.FileFilter;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.jdom.output.Format;
import org.jdom.output.XMLOutputter;
import bb.teamma.data.InducementType;
import bb.teamma.data.LRB;
import bb.teamma.data.Player;
import bb.teamma.data.PlayerType;
import bb.teamma.data.Roster;
import bb.teamma.data.RosterType;
import bb.teamma.data.Skill;
import bb.teamma.data.StarPlayer;
import bb.teamma.languages.Translate;
import bb.teamma.tableModel.MjtTeamPlayers;
import bb.teamma.tableModel.MjtTeamStars;
import bb.teamma.views.report.JdgPrintableRoster;
import bb.tourma.data.Coach;
import bb.tourma.data.Tournament;
import bb.tourma.utility.ExtensionFileFilter;
import bb.tourma.utility.StringConstants;
import java.util.ResourceBundle;

/**
 *
 * @author WFMJ7631
 */
public final class JdgRoster extends javax.swing.JDialog {

    private Roster _data = null;
    private Coach _coach = null;
    private LRB.E_Version lrbversion = LRB.E_Version.BB2020;
    private LRB _lrb = LRB.getLRB(LRB.E_Version.BB2020);
    private int _max_champions = 2;

    /**
     * Creates new form JdgRoster
     *
     * @param parent
     * @param modal
     */
    public JdgRoster(java.awt.Frame parent, boolean modal) {
        this(parent, null, null, modal);
    }

    /**
     *
     * @param parent
     * @param coach
     * @param roster
     * @param modal
     */
    public JdgRoster(java.awt.Frame parent, Coach coach, Roster roster, boolean modal) {
        super(parent, modal);
        _coach = coach;
        if (_coach != null) {
            if (roster != null) {
                _data = roster;
            } else {
                _data = new Roster();
            }
        } else {
            _coach = new Coach();
            _data = new Roster();
        }
        initComponents();

        this.setPreferredSize(new Dimension(1024, 768));
        pack();

        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        GraphicsDevice gs = ge.getDefaultScreenDevice();
        DisplayMode dmode = gs.getDisplayMode();

        this.setSize(1024, 768);

        int screenWidth = dmode.getWidth();
        int screenHeight = dmode.getHeight();
        this.setLocation((screenWidth - this.getWidth()) / 2, (screenHeight - this.getHeight()) / 2);

        String[] lrbs = {"LRB1", "LRB2", "LRB3", "LRB4", "LRB5", "LRB6", "CRP1", "BB2016", "BB2020"};

        DefaultComboBoxModel jcbModel = new DefaultComboBoxModel(lrbs);
        jcbLRB.setModel(jcbModel);

        if (roster != null) {
            lrbversion = roster.getVersion();
        } else {
            lrbversion = LRB.E_Version.BB2020;
        }

        update();
        jbtAddSkill.setEnabled(false);
        jbtRemoveSkill.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings({"unchecked", "PMD"})
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jtpGoods = new javax.swing.JTabbedPane();
        jPanel14 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jslAssists = new javax.swing.JSlider();
        jlbNbAssists = new javax.swing.JLabel();
        jlbNbAssists1 = new javax.swing.JLabel();
        jlbPriceAssists = new javax.swing.JLabel();
        jlbNbAssists3 = new javax.swing.JLabel();
        jlbCostAssists = new javax.swing.JLabel();
        jPanel15 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jslCheerleaders = new javax.swing.JSlider();
        jlbNbCherrleaders = new javax.swing.JLabel();
        jlbNbAssists2 = new javax.swing.JLabel();
        jlbPriceCheerleaders = new javax.swing.JLabel();
        jlbNbAssists4 = new javax.swing.JLabel();
        jlbCostCheerleaders = new javax.swing.JLabel();
        jPanel16 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jslFanFactor = new javax.swing.JSlider();
        jlbNbFanFactor = new javax.swing.JLabel();
        jlbNbAssists5 = new javax.swing.JLabel();
        jlbPriceFanFactor = new javax.swing.JLabel();
        jlbNbAssists6 = new javax.swing.JLabel();
        jlbCostFanFactor = new javax.swing.JLabel();
        jPanel17 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jslReroll = new javax.swing.JSlider();
        jlbNbReroll = new javax.swing.JLabel();
        jlbNbAssists8 = new javax.swing.JLabel();
        jlbPriceReroll = new javax.swing.JLabel();
        jlbNbAssists9 = new javax.swing.JLabel();
        jlbCostReroll = new javax.swing.JLabel();
        jPanel18 = new javax.swing.JPanel();
        jlbApothecary = new javax.swing.JLabel();
        jslApothecary = new javax.swing.JSlider();
        jlbNbApothecary = new javax.swing.JLabel();
        jlbX10 = new javax.swing.JLabel();
        jlbPriceApothecary = new javax.swing.JLabel();
        jlbX20 = new javax.swing.JLabel();
        jlbCostApothecary = new javax.swing.JLabel();
        jPanel19 = new javax.swing.JPanel();
        jpnInducements = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtbStars = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jbtAddStar = new javax.swing.JButton();
        jbtRemoveStar = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();
        jlbIcon = new javax.swing.JButton();
        jbtSelectCoach = new javax.swing.JButton();
        jPanel20 = new javax.swing.JPanel();
        jcbWithSkills = new javax.swing.JCheckBox();
        jLabel17 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jlbTotalCost = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jlbRanking = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jpnCenter = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jbtAdd = new javax.swing.JButton();
        jbtRemove = new javax.swing.JButton();
        jbtAddSkill = new javax.swing.JButton();
        jbtRemoveSkill = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtbPlayers = new javax.swing.JTable();
        jpnTitle = new javax.swing.JPanel();
        jcbLRB = new javax.swing.JComboBox<>();
        jlbTeamName = new javax.swing.JLabel();
        jlbRosterType = new javax.swing.JLabel();
        jlbCoachName = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jbtOK = new javax.swing.JButton();
        jbtHTML = new javax.swing.JButton();
        jbtExport = new javax.swing.JButton();
        jbtImport = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jtpGoods.setName("jtpGoods"); // NOI18N

        jPanel14.setMinimumSize(new java.awt.Dimension(400, 260));
        jPanel14.setPreferredSize(new java.awt.Dimension(300, 150));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("bb/teamma/languages/language"); // NOI18N
        jLabel1.setText(bundle.getString("Assistants")); // NOI18N
        jLabel1.setPreferredSize(new java.awt.Dimension(100, 30));
        jPanel3.add(jLabel1);

        jslAssists.setMajorTickSpacing(5);
        jslAssists.setMaximum(10);
        jslAssists.setMinorTickSpacing(1);
        jslAssists.setPaintTicks(true);
        jslAssists.setSnapToTicks(true);
        jslAssists.setValue(0);
        jslAssists.setName("jslAssists"); // NOI18N
        jslAssists.setPreferredSize(new java.awt.Dimension(80, 30));
        jslAssists.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jslAssistsStateChanged(evt);
            }
        });
        jPanel3.add(jslAssists);

        jlbNbAssists.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlbNbAssists.setText("0");
        jlbNbAssists.setName("jlbNbAssists"); // NOI18N
        jlbNbAssists.setPreferredSize(new java.awt.Dimension(20, 30));
        jPanel3.add(jlbNbAssists);

        jlbNbAssists1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlbNbAssists1.setText("X");
        jlbNbAssists1.setPreferredSize(new java.awt.Dimension(20, 30));
        jPanel3.add(jlbNbAssists1);

        jlbPriceAssists.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlbPriceAssists.setText("10 000");
        jlbPriceAssists.setName("jlbPriceAssists"); // NOI18N
        jlbPriceAssists.setPreferredSize(new java.awt.Dimension(60, 30));
        jPanel3.add(jlbPriceAssists);

        jlbNbAssists3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlbNbAssists3.setText("=");
        jlbNbAssists3.setPreferredSize(new java.awt.Dimension(20, 30));
        jPanel3.add(jlbNbAssists3);

        jlbCostAssists.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlbCostAssists.setText("0");
        jlbCostAssists.setName("jlbCostAssists"); // NOI18N
        jlbCostAssists.setPreferredSize(new java.awt.Dimension(60, 30));
        jPanel3.add(jlbCostAssists);

        jPanel14.add(jPanel3);

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel8.setText(bundle.getString("Cheerleaders")); // NOI18N
        jLabel8.setPreferredSize(new java.awt.Dimension(100, 30));
        jPanel15.add(jLabel8);

        jslCheerleaders.setMajorTickSpacing(5);
        jslCheerleaders.setMaximum(10);
        jslCheerleaders.setMinorTickSpacing(1);
        jslCheerleaders.setPaintTicks(true);
        jslCheerleaders.setSnapToTicks(true);
        jslCheerleaders.setValue(0);
        jslCheerleaders.setName("jslCheerleaders"); // NOI18N
        jslCheerleaders.setPreferredSize(new java.awt.Dimension(80, 30));
        jslCheerleaders.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jslCheerleadersStateChanged(evt);
            }
        });
        jPanel15.add(jslCheerleaders);

        jlbNbCherrleaders.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlbNbCherrleaders.setText("0");
        jlbNbCherrleaders.setName("jlbNbCheerleaders"); // NOI18N
        jlbNbCherrleaders.setPreferredSize(new java.awt.Dimension(20, 30));
        jPanel15.add(jlbNbCherrleaders);

        jlbNbAssists2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlbNbAssists2.setText("X");
        jlbNbAssists2.setPreferredSize(new java.awt.Dimension(20, 30));
        jPanel15.add(jlbNbAssists2);

        jlbPriceCheerleaders.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlbPriceCheerleaders.setText("10 000");
        jlbPriceCheerleaders.setName("jlbPriceCheerleaders"); // NOI18N
        jlbPriceCheerleaders.setPreferredSize(new java.awt.Dimension(60, 30));
        jPanel15.add(jlbPriceCheerleaders);

        jlbNbAssists4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlbNbAssists4.setText("=");
        jlbNbAssists4.setPreferredSize(new java.awt.Dimension(20, 30));
        jPanel15.add(jlbNbAssists4);

        jlbCostCheerleaders.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlbCostCheerleaders.setText("0");
        jlbCostCheerleaders.setName("jlbCostCheerleaders"); // NOI18N
        jlbCostCheerleaders.setPreferredSize(new java.awt.Dimension(60, 30));
        jPanel15.add(jlbCostCheerleaders);

        jPanel14.add(jPanel15);

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel9.setText(bundle.getString("FanFactor")); // NOI18N
        jLabel9.setPreferredSize(new java.awt.Dimension(100, 30));
        jPanel16.add(jLabel9);

        jslFanFactor.setMajorTickSpacing(5);
        jslFanFactor.setMaximum(18);
        jslFanFactor.setMinorTickSpacing(1);
        jslFanFactor.setPaintTicks(true);
        jslFanFactor.setSnapToTicks(true);
        jslFanFactor.setValue(0);
        jslFanFactor.setName("jslFanFactor"); // NOI18N
        jslFanFactor.setPreferredSize(new java.awt.Dimension(80, 30));
        jslFanFactor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jslFanFactorStateChanged(evt);
            }
        });
        jPanel16.add(jslFanFactor);

        jlbNbFanFactor.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlbNbFanFactor.setText("0");
        jlbNbFanFactor.setName("jlbNbFanFactor"); // NOI18N
        jlbNbFanFactor.setPreferredSize(new java.awt.Dimension(20, 30));
        jPanel16.add(jlbNbFanFactor);

        jlbNbAssists5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlbNbAssists5.setText("X");
        jlbNbAssists5.setPreferredSize(new java.awt.Dimension(20, 30));
        jPanel16.add(jlbNbAssists5);

        jlbPriceFanFactor.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlbPriceFanFactor.setText("10 000");
        jlbPriceFanFactor.setName("jlbPriceFanFactor"); // NOI18N
        jlbPriceFanFactor.setPreferredSize(new java.awt.Dimension(60, 30));
        jPanel16.add(jlbPriceFanFactor);

        jlbNbAssists6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlbNbAssists6.setText("=");
        jlbNbAssists6.setPreferredSize(new java.awt.Dimension(20, 30));
        jPanel16.add(jlbNbAssists6);

        jlbCostFanFactor.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlbCostFanFactor.setText("0");
        jlbCostFanFactor.setName("jlbCostFanFactor"); // NOI18N
        jlbCostFanFactor.setPreferredSize(new java.awt.Dimension(60, 30));
        jPanel16.add(jlbCostFanFactor);

        jPanel14.add(jPanel16);

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel10.setText(bundle.getString("Rerolls")); // NOI18N
        jLabel10.setPreferredSize(new java.awt.Dimension(100, 30));
        jPanel17.add(jLabel10);

        jslReroll.setMajorTickSpacing(5);
        jslReroll.setMaximum(8);
        jslReroll.setMinorTickSpacing(1);
        jslReroll.setPaintTicks(true);
        jslReroll.setSnapToTicks(true);
        jslReroll.setValue(0);
        jslReroll.setName("jslReroll"); // NOI18N
        jslReroll.setPreferredSize(new java.awt.Dimension(80, 30));
        jslReroll.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jslRerollStateChanged(evt);
            }
        });
        jPanel17.add(jslReroll);

        jlbNbReroll.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlbNbReroll.setText("0");
        jlbNbReroll.setName("jlbNbReroll"); // NOI18N
        jlbNbReroll.setPreferredSize(new java.awt.Dimension(20, 30));
        jPanel17.add(jlbNbReroll);

        jlbNbAssists8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlbNbAssists8.setText("X");
        jlbNbAssists8.setPreferredSize(new java.awt.Dimension(20, 30));
        jPanel17.add(jlbNbAssists8);

        jlbPriceReroll.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlbPriceReroll.setText("10 000");
        jlbPriceReroll.setName("jlbPriceReroll"); // NOI18N
        jlbPriceReroll.setPreferredSize(new java.awt.Dimension(60, 30));
        jPanel17.add(jlbPriceReroll);

        jlbNbAssists9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlbNbAssists9.setText("=");
        jlbNbAssists9.setPreferredSize(new java.awt.Dimension(20, 30));
        jPanel17.add(jlbNbAssists9);

        jlbCostReroll.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlbCostReroll.setText("0");
        jlbCostReroll.setName("jlbCostReroll"); // NOI18N
        jlbCostReroll.setPreferredSize(new java.awt.Dimension(60, 30));
        jPanel17.add(jlbCostReroll);

        jPanel14.add(jPanel17);

        jlbApothecary.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jlbApothecary.setText(bundle.getString("Apothecary")); // NOI18N
        jlbApothecary.setPreferredSize(new java.awt.Dimension(100, 30));
        jPanel18.add(jlbApothecary);

        jslApothecary.setMajorTickSpacing(1);
        jslApothecary.setMaximum(1);
        jslApothecary.setMinorTickSpacing(1);
        jslApothecary.setPaintTicks(true);
        jslApothecary.setSnapToTicks(true);
        jslApothecary.setValue(0);
        jslApothecary.setName("jslApothecary"); // NOI18N
        jslApothecary.setPreferredSize(new java.awt.Dimension(80, 30));
        jslApothecary.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jslApothecaryStateChanged(evt);
            }
        });
        jPanel18.add(jslApothecary);

        jlbNbApothecary.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlbNbApothecary.setText("0");
        jlbNbApothecary.setName("jlbNbApothecary"); // NOI18N
        jlbNbApothecary.setPreferredSize(new java.awt.Dimension(20, 30));
        jPanel18.add(jlbNbApothecary);

        jlbX10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlbX10.setText("X");
        jlbX10.setPreferredSize(new java.awt.Dimension(20, 30));
        jPanel18.add(jlbX10);

        jlbPriceApothecary.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlbPriceApothecary.setText("50 000");
        jlbPriceApothecary.setName("jlbPriceApothecary"); // NOI18N
        jlbPriceApothecary.setPreferredSize(new java.awt.Dimension(60, 30));
        jPanel18.add(jlbPriceApothecary);

        jlbX20.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlbX20.setText("=");
        jlbX20.setPreferredSize(new java.awt.Dimension(20, 30));
        jPanel18.add(jlbX20);

        jlbCostApothecary.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlbCostApothecary.setText("0");
        jlbCostApothecary.setName("jlbCostApothecary"); // NOI18N
        jlbCostApothecary.setPreferredSize(new java.awt.Dimension(60, 30));
        jPanel18.add(jlbCostApothecary);

        jPanel14.add(jPanel18);
        jPanel14.add(jPanel19);

        jtpGoods.addTab(bundle.getString("TeamGoods"), jPanel14); // NOI18N

        java.util.ResourceBundle bundle1 = java.util.ResourceBundle.getBundle("bb/tourma/languages/language"); // NOI18N
        jpnInducements.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle1.getString("Mercenaires et Champions"))); // NOI18N
        jpnInducements.setPreferredSize(new java.awt.Dimension(200, 250));
        jpnInducements.setLayout(new java.awt.GridLayout(0, 3));
        jtpGoods.addTab(bundle.getString("Inducements"), jpnInducements); // NOI18N

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("Mercenaires et Champions"))); // NOI18N
        jPanel4.setPreferredSize(new java.awt.Dimension(160, 150));
        jPanel4.setLayout(new java.awt.BorderLayout());

        jtbStars.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtbStars.setName("jtbStars"); // NOI18N
        jtbStars.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtbStarsMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jtbStars);

        jPanel4.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel5.setMinimumSize(new java.awt.Dimension(120, 100));
        jPanel5.setPreferredSize(new java.awt.Dimension(100, 160));

        jbtAddStar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bb/tourma/images/Add.png"))); // NOI18N
        jbtAddStar.setActionCommand(bundle.getString("Straplayer")); // NOI18N
        jbtAddStar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbtAddStar.setLabel(bundle1.getString("Star")); // NOI18N
        jbtAddStar.setName("jbtAddChampion"); // NOI18N
        jbtAddStar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbtAddStar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtAddStarActionPerformed(evt);
            }
        });
        jPanel5.add(jbtAddStar);

        jbtRemoveStar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bb/tourma/images/Close.png"))); // NOI18N
        jbtRemoveStar.setActionCommand(bundle.getString("Straplayer")); // NOI18N
        jbtRemoveStar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbtRemoveStar.setLabel(bundle1.getString("Star")); // NOI18N
        jbtRemoveStar.setName("jbtDelChampion"); // NOI18N
        jbtRemoveStar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbtRemoveStar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtRemoveStarActionPerformed(evt);
            }
        });
        jPanel5.add(jbtRemoveStar);

        jPanel4.add(jPanel5, java.awt.BorderLayout.WEST);

        jtpGoods.addTab(bundle.getString("Mercenaires et Champions"), jPanel4); // NOI18N

        jPanel7.setLayout(new java.awt.BorderLayout());

        jlbIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bb/teamma/images/what.png"))); // NOI18N
        jlbIcon.setName("jlbIcon"); // NOI18N
        jlbIcon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jlbIconActionPerformed(evt);
            }
        });
        jPanel22.add(jlbIcon);

        jbtSelectCoach.setText(bundle.getString("Associate a coach")); // NOI18N
        jbtSelectCoach.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtSelectCoachActionPerformed(evt);
            }
        });
        jPanel22.add(jbtSelectCoach);

        jPanel7.add(jPanel22, java.awt.BorderLayout.CENTER);

        jcbWithSkills.setText(bundle.getString("Include skills")); // NOI18N
        jcbWithSkills.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbWithSkillsActionPerformed(evt);
            }
        });
        jPanel20.add(jcbWithSkills);

        jLabel17.setText(" ");
        jPanel20.add(jLabel17);

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText(bundle.getString("Total Cost")); // NOI18N
        jPanel20.add(jLabel12);

        jlbTotalCost.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jlbTotalCost.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlbTotalCost.setText("0");
        jPanel20.add(jlbTotalCost);

        jLabel16.setText(" ");
        jPanel20.add(jLabel16);

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText(bundle.getString("Ranking")); // NOI18N
        jPanel20.add(jLabel15);

        jlbRanking.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jlbRanking.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlbRanking.setText("0");
        jPanel20.add(jlbRanking);

        jLabel18.setText(" ");
        jPanel20.add(jLabel18);

        jPanel7.add(jPanel20, java.awt.BorderLayout.SOUTH);

        jtpGoods.addTab(bundle.getString("Coach"), jPanel7); // NOI18N

        getContentPane().add(jtpGoods, java.awt.BorderLayout.CENTER);

        jpnCenter.setMinimumSize(new java.awt.Dimension(640, 200));
        jpnCenter.setPreferredSize(new java.awt.Dimension(320, 430));
        jpnCenter.setLayout(new java.awt.BorderLayout());

        jPanel2.setPreferredSize(new java.awt.Dimension(100, 100));

        jbtAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bb/tourma/images/Add.png"))); // NOI18N
        jbtAdd.setText(bundle.getString("Player")); // NOI18N
        jbtAdd.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbtAdd.setName("jbtAdd"); // NOI18N
        jbtAdd.setPreferredSize(new java.awt.Dimension(100, 60));
        jbtAdd.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jbtAdd.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbtAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtAddActionPerformed(evt);
            }
        });
        jPanel2.add(jbtAdd);

        jbtRemove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bb/tourma/images/Close.png"))); // NOI18N
        jbtRemove.setText(bundle.getString("Player")); // NOI18N
        jbtRemove.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbtRemove.setName("jbtRemove"); // NOI18N
        jbtRemove.setPreferredSize(new java.awt.Dimension(100, 60));
        jbtRemove.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbtRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtRemoveActionPerformed(evt);
            }
        });
        jPanel2.add(jbtRemove);

        jbtAddSkill.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bb/tourma/images/Add.png"))); // NOI18N
        jbtAddSkill.setText(bundle.getString("Skill")); // NOI18N
        jbtAddSkill.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbtAddSkill.setName("jbtAddSkill"); // NOI18N
        jbtAddSkill.setPreferredSize(new java.awt.Dimension(100, 60));
        jbtAddSkill.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jbtAddSkill.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbtAddSkill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtAddSkillActionPerformed(evt);
            }
        });
        jPanel2.add(jbtAddSkill);

        jbtRemoveSkill.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bb/tourma/images/Close.png"))); // NOI18N
        jbtRemoveSkill.setText(bundle.getString("Skill")); // NOI18N
        jbtRemoveSkill.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbtRemoveSkill.setName("jbtRemoveSkill"); // NOI18N
        jbtRemoveSkill.setPreferredSize(new java.awt.Dimension(100, 60));
        jbtRemoveSkill.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbtRemoveSkill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtRemoveSkillActionPerformed(evt);
            }
        });
        jPanel2.add(jbtRemoveSkill);

        jpnCenter.add(jPanel2, java.awt.BorderLayout.WEST);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(520, 100));

        jtbPlayers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtbPlayers.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jtbPlayers.setName("jtbPlayers"); // NOI18N
        jtbPlayers.setPreferredSize(null);
        jtbPlayers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtbPlayersMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtbPlayers);

        jpnCenter.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jpnTitle.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jpnTitle.setLayout(new java.awt.GridLayout(1, 4, 5, 5));

        jcbLRB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbLRB.setName("jcbLRB"); // NOI18N
        jcbLRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbLRBActionPerformed(evt);
            }
        });
        jpnTitle.add(jcbLRB);
        jcbLRB.getAccessibleContext().setAccessibleName("jcbLRB");

        jlbTeamName.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jlbTeamName.setText(bundle.getString("TeamName")); // NOI18N
        jlbTeamName.setName("jlbTeamName"); // NOI18N
        jpnTitle.add(jlbTeamName);

        jlbRosterType.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jlbRosterType.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlbRosterType.setText(bundle.getString("Roster: Unknown")); // NOI18N
        jlbRosterType.setName("jlbRosterType"); // NOI18N
        jlbRosterType.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jlbRosterTypeMouseClicked(evt);
            }
        });
        jpnTitle.add(jlbRosterType);

        jlbCoachName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jlbCoachName.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jlbCoachName.setText(bundle.getString("Coach: Unknown")); // NOI18N
        jpnTitle.add(jlbCoachName);

        jpnCenter.add(jpnTitle, java.awt.BorderLayout.NORTH);

        getContentPane().add(jpnCenter, java.awt.BorderLayout.NORTH);

        jPanel6.setPreferredSize(new java.awt.Dimension(640, 50));

        jbtOK.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bb/tourma/images/Select.png"))); // NOI18N
        jbtOK.setText(bundle.getString("OK")); // NOI18N
        jbtOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtOKActionPerformed(evt);
            }
        });
        jPanel6.add(jbtOK);

        jbtHTML.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bb/tourma/images/Document.png"))); // NOI18N
        jbtHTML.setText(bundle.getString("HTML")); // NOI18N
        jbtHTML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtHTMLActionPerformed(evt);
            }
        });
        jPanel6.add(jbtHTML);

        jbtExport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bb/tourma/images/Forward.png"))); // NOI18N
        jbtExport.setText(bundle.getString("Export")); // NOI18N
        jbtExport.setName("jbtExport"); // NOI18N
        jbtExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtExportActionPerformed(evt);
            }
        });
        jPanel6.add(jbtExport);

        jbtImport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bb/tourma/images/Backward.png"))); // NOI18N
        jbtImport.setText(bundle.getString("Import")); // NOI18N
        jbtImport.setName("jbtImport"); // NOI18N
        jbtImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtImportActionPerformed(evt);
            }
        });
        jPanel6.add(jbtImport);

        getContentPane().add(jPanel6, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private static final String CS_ChooseRoster = "Choisissez le roster";
    private static final String CS_RosterChoice = "Choix du roster";
    private static final String CS_RosterChoiceError = "Erreur de choix du roster";

    private void jlbRosterTypeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlbRosterTypeMouseClicked

        ArrayList<String> rosterlist = _lrb.getRosterTypeListAsString(false);
        String input = (String) JOptionPane.showInputDialog(this,
                Translate.translate(CS_ChooseRoster),
                Translate.translate(CS_RosterChoice), JOptionPane.INFORMATION_MESSAGE,
                null, rosterlist.toArray(), rosterlist.get(0));
        LOG.log(Level.INFO, "Roster chosen: " + input);
        if (input != null) {
            RosterType rt = _lrb.getRosterType(input, false);
            if (_coach != null) {
                _coach.setRoster(bb.tourma.data.RosterType.getRosterType(input));
            }
            if (rt != null) {
                if (_data.getRoster() != rt) {
                    _data.setRoster(rt);
                    _data.clearPlayers();
                }
                if (rt.getImage() != null) {
                    ImageIcon image = new javax.swing.ImageIcon(getClass().getResource("/bb/teamma/images/" + rt.getImage()));
                    jlbIcon.setIcon(image); // NOI18N
                }
            } else {
                JOptionPane.showMessageDialog(this, Translate.translate(CS_RosterChoiceError) + ": " + input);
            }

            update();
        }

    }//GEN-LAST:event_jlbRosterTypeMouseClicked

    private void jslAssistsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jslAssistsStateChanged
        _data.setAssistants(jslAssists.getValue());
        update();
    }//GEN-LAST:event_jslAssistsStateChanged

    private void jslCheerleadersStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jslCheerleadersStateChanged
        _data.setCheerleaders(jslCheerleaders.getValue());
        update();
    }//GEN-LAST:event_jslCheerleadersStateChanged

    private void jslFanFactorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jslFanFactorStateChanged
        _data.setFanfactor(jslFanFactor.getValue());
        update();
    }//GEN-LAST:event_jslFanFactorStateChanged

    private void jslRerollStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jslRerollStateChanged
        _data.setRerolls(jslReroll.getValue());
        update();
    }//GEN-LAST:event_jslRerollStateChanged

    private void jslApothecaryStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jslApothecaryStateChanged
        _data.setApothecary(jslApothecary.getValue() == 1);
        update();
    }//GEN-LAST:event_jslApothecaryStateChanged

    private void jcbWithSkillsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbWithSkillsActionPerformed
        update();
    }//GEN-LAST:event_jcbWithSkillsActionPerformed

    private final static String CS_ChooseCoach = "Choisissez le coach";
    private final static String CS_CoachChoice = "Choix du coach";

    private void jbtSelectCoachActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtSelectCoachActionPerformed
        int i;
        /**
         * Build Avilable Positions
         */
        ArrayList<String> coachs_name = new ArrayList<>();
        for (i = 0; i < Tournament.getTournament().getCoachsCount(); i++) {
            Coach c = Tournament.getTournament().getCoach(i);
            coachs_name.add(c.getName());
        }

        String input = (String) JOptionPane.showInputDialog(this,
                Translate.translate(CS_ChooseCoach), Translate.translate(CS_CoachChoice), JOptionPane.INFORMATION_MESSAGE,
                null, coachs_name.toArray(), coachs_name.get(0));
        if (!input.isEmpty()) {
            Coach c = Tournament.getTournament().getCoach(input);
            c.addComposition(_data);
            _coach = c;
            _coach.setRank(_data.getValue(false) / 10000);
        }

    }//GEN-LAST:event_jbtSelectCoachActionPerformed

    private void jlbIconActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jlbIconActionPerformed
        jlbRosterTypeMouseClicked(null);
    }//GEN-LAST:event_jlbIconActionPerformed

    private void jbtOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtOKActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_jbtOKActionPerformed

    private void jtbPlayersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtbPlayersMouseClicked
        jbtAddSkill.setEnabled(jtbPlayers.getSelectedRow() > -1);
        boolean removable = false;
        //int i = jtbPlayers.getSelectedRow();
        if (jtbPlayers.getSelectedRow() > -1) {
            if (_data.getPlayer(jtbPlayers.getSelectedRow()).getSkillCount() > 0) {
                removable = true;
            }
        }
        jbtRemoveSkill.setEnabled(removable);
    }//GEN-LAST:event_jtbPlayersMouseClicked

    private final static String CS_SelectSkillToRemove = "Select skill to remove";
    private final static String CS_Skill = "Skill";
    private final static String CS_Big_Guy = "Big Guy";

    private void jbtRemoveSkillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtRemoveSkillActionPerformed
        int index = jtbPlayers.getSelectedRow();
        if (index > -1) {
            ArrayList<String> skills = new ArrayList<>();
            Player p = _data.getPlayer(index);
            if (p.getSkillCount() > 0) {
                int i;
                for (i = 0; i < p.getSkillCount(); i++) {
                    Skill s = p.getSkill(i);
                    skills.add(Translate.translate(s.getmName()));
                }

                Object choice = JOptionPane.showInputDialog(null, Translate.translate(CS_SelectSkillToRemove), Translate.translate(CS_Skill), JOptionPane.INFORMATION_MESSAGE, null, skills.toArray(), null);
                if (choice != null) {

                    for (i = 0; i < p.getSkillCount(); i++) {
                        if (Translate.translate(p.getSkill(i).getmName()).equals(choice)) {
                            p.removeSkill(i);
                            break;
                        }
                    }
                }
            }
        }
        update();
    }//GEN-LAST:event_jbtRemoveSkillActionPerformed

    private void jbtAddSkillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtAddSkillActionPerformed
        int index = jtbPlayers.getSelectedRow();
        if (index > -1) {
            JdgSelectSkill jdg = new JdgSelectSkill(null, true, _data.getPlayer(index), _lrb);
            jdg.setName("JdgSelectSkill");
            jdg.setVisible(true);
        }
        update();
    }//GEN-LAST:event_jbtAddSkillActionPerformed

    private void jbtRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtRemoveActionPerformed
        /* Get Selected line */
        int selectedLine = jtbPlayers.getSelectedRow();
        if (selectedLine > -1) {
            _data.removePlayer(selectedLine);
            update();
        }

    }//GEN-LAST:event_jbtRemoveActionPerformed

    private final static String CS_RosterTypeNotSelectedClieckOnRoster = "Roster type not selected, please click on roster";
    private final static String CS_ChooseKindOfplayer = "Choisissez le type de joueur";
    private final static String CS_PlayerChoice = "Choix du joueur";

    private void jbtAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtAddActionPerformed
        if (_data.getRoster() == null) {
            JOptionPane.showMessageDialog(this, Translate.translate(CS_RosterTypeNotSelectedClieckOnRoster));
        } else {
            int i;
            /**
             * Build Avilable Positions
             */

            ArrayList<PlayerType> positions = new ArrayList<>();
            for (i = 0; i < _data.getRoster().getPlayerTypeCount(); i++) {
                PlayerType pt = _data.getRoster().getPlayerType(i);
                /*
                 * Count the number of player possible
                 */
                int limit = pt.getLimit();
                int j;
                for (j = 0; j < _data.getPlayerCount(); j++) {
                    if (_data.getPlayer(j).getPlayertype() == pt) {
                        limit--;
                    }
                }

                /**
                 * Check the number of big guys
                 */
                if (_lrb.isCheckNbBigGuys()) {

                    boolean isABigGuy = false;
                    for (j = 0; j < pt.getSkillCount(); j++) {
                        Skill s = pt.getSkill(j);
                        if (s.getmName().equals(CS_Big_Guy)) {
                            isABigGuy = true;
                            break;
                        }
                    }
                    if (isABigGuy) {
                        int nbBigGuys = 0;

                        for (j = 0; j < _data.getPlayerCount(); j++) {
                            Player p = _data.getPlayer(j);
                            for (int k = 0; k < p.getPlayertype().getSkillCount(); k++) {
                                Skill s = p.getPlayertype().getSkill(k);
                                if (s.getmName().equals(CS_Big_Guy)) {
                                    nbBigGuys++;
                                    break;
                                }
                            }
                            if (nbBigGuys >= _data.getRoster().getMaxBigGuys()) {
                                limit = 0;
                            }
                        }
                    }
                }

                if (limit > 0) {
                    positions.add(pt);
                }
            }

            PlayerType pt = positions.get(0);
            JdgSelectPosition jdg = new JdgSelectPosition(null, true, positions, pt, lrbversion);
            jdg.setVisible(true);
            pt = jdg.getPosition();

            if (pt != null) {
                //  PlayerType pt = _data.getRoster().getPlayerType(input, true);
                Player p = new Player(pt, lrbversion);
                _data.addPlayer(p);
            }
        }

        update();
    }//GEN-LAST:event_jbtAddActionPerformed

    private void jbtRemoveStarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtRemoveStarActionPerformed
        int i = jtbStars.getSelectedRow();
        if (i > -1) {
            StarPlayer sp = _data.getChampion(i);
            if (sp.getPair() != null) {
                _data.removeChampion(sp.getPair());
                _max_champions = _max_champions - 1;
            }
            _data.removeChampion(sp);
        }
        update();
    }//GEN-LAST:event_jbtRemoveStarActionPerformed

    private void jbtAddStarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtAddStarActionPerformed
        if (_data.getRoster() == null) {
            JOptionPane.showMessageDialog(this, Translate.translate(CS_RosterTypeNotSelectedClieckOnRoster));
        } else {
            int i, j;
            /**
             * Build Avilable Positions
             */
            ArrayList<StarPlayer> names = new ArrayList<>();
            for (i = 0; i < _data.getRoster().getAvailableStarplayerCount(); i++) {
                StarPlayer sp = _data.getRoster().getAvailableStarplayer(i);
                boolean found = false;
                for (j = 0; j < _data.getChampionCount(); j++) {
                    if (_data.getChampion(j).getName().equals(sp.getName())) {
                        found = true;
                    }
                }
                if (!found) {
                    names.add(sp);
                }
            }

            StarPlayer sp = names.get(0);
            JdgSelectPosition jdg = new JdgSelectPosition(null, true, names, sp, lrbversion);
            jdg.setVisible(true);

            sp = jdg.getStarPlayer();

            _data.addChampion(sp);

            if (sp.getPair() != null) {
                _data.addChampion(sp.getPair());
                _max_champions = _max_champions + 1;
            }

        }
        update();
    }//GEN-LAST:event_jbtAddStarActionPerformed

    private void jtbStarsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtbStarsMouseClicked
        jbtRemoveStar.setEnabled(jtbStars.getSelectedRow() > -1);
    }//GEN-LAST:event_jtbStarsMouseClicked

    private void jbtHTMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtHTMLActionPerformed
        JdgPrintableRoster jdg = new JdgPrintableRoster(null, true, this._data, this._coach, jcbWithSkills.isSelected());
        jdg.setVisible(true);
    }//GEN-LAST:event_jbtHTMLActionPerformed

    private void jbtExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtExportActionPerformed
        final JFileChooser jfc = new JFileChooser();
        final FileFilter filter1 = new ExtensionFileFilter(java.util.ResourceBundle.getBundle(StringConstants.CS_LANGUAGE_RESOURCE).getString("TourMaXMLFile"), new String[]{StringConstants.CS_XML, StringConstants.CS_MINXML});
        jfc.setFileFilter(filter1);
        if (jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            StringBuffer url2 = new StringBuffer(jfc.getSelectedFile().getAbsolutePath());
            String ext = java.util.ResourceBundle.getBundle("bb/tourma/languages/language").getString("");
            int i = url2.toString().lastIndexOf('.');
            if (i > 0 && i < url2.length() - 1) {
                ext = url2.substring(i + 1).toLowerCase(Locale.getDefault());
            }

            if (!ext.equals(StringConstants.CS_MINXML)) {
                url2 = url2.append(".xml");
            }

            Element document = _data.getXMLElement();

            FileOutputStream os = null;
            try {
                final XMLOutputter sortie = new XMLOutputter(Format.getPrettyFormat());

                os = new FileOutputStream(new File(url2.toString()));
                sortie.output(document, os);
                os.close();

            } catch (FileNotFoundException e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            } finally {
                if (os != null) {
                    try {
                        os.close();
                    } catch (IOException e) {
                        LOG.log(Level.FINE, e.getLocalizedMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_jbtExportActionPerformed

    private void jbtImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtImportActionPerformed
        final JFileChooser jfc = new JFileChooser();
        ResourceBundle rb = java.util.ResourceBundle.getBundle(StringConstants.CS_LANGUAGE_RESOURCE);
        String extf = rb.getString("TourMaXMLFile");
        final FileFilter filter1 = new ExtensionFileFilter(extf, new String[]{StringConstants.CS_XML, StringConstants.CS_MINXML});
        jfc.setFileFilter(filter1);
        if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            final SAXBuilder sxb = new SAXBuilder();

            try {
                final org.jdom.Document document = sxb.build(jfc.getSelectedFile());
                final Element racine = document.getRootElement();
                _data = new Roster();
                _data.setXMLElement(racine);

                if (_data.getRoster() != null) {
                    if (_data.getRoster().getImage() != null) {
                        ImageIcon image = new javax.swing.ImageIcon(getClass().getResource("/bb/teamma/images/" + _data.getRoster().getImage()));
                        jlbIcon.setIcon(image); // NOI18N
                    }
                }

            } catch (JDOMException e) {
                JOptionPane.showMessageDialog(null, e.getLocalizedMessage());

            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
        }
        update();
    }//GEN-LAST:event_jbtImportActionPerformed

    private void jcbLRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbLRBActionPerformed
        int index = jcbLRB.getSelectedIndex();
        LRB.E_Version newversion = LRB.E_Version.BB2020;
        switch (index) {
            case 0:
                newversion = LRB.E_Version.LRB1;
                break;
            case 1:
                newversion = LRB.E_Version.LRB2;
                break;
            case 2:
                newversion = LRB.E_Version.LRB3;
                break;
            case 3:
                newversion = LRB.E_Version.LRB4;
                break;
            case 4:
                newversion = LRB.E_Version.LRB5;
                break;
            case 5:
                newversion = LRB.E_Version.LRB6;
                break;
            case 6:
                newversion = LRB.E_Version.CRP1;
                break;
            case 7:
                newversion = LRB.E_Version.BB2016;
                break;
            case 8:
                newversion = LRB.E_Version.BB2020;
                break;
        }
        if (newversion != lrbversion) {
            clearRoster();
        }
        _lrb = LRB.getLRB(newversion);
        lrbversion = newversion;
        update();
    }//GEN-LAST:event_jcbLRBActionPerformed

    private static final String CS_Roster = "Roster";
    private static final String CS_Coach = "Coach";
    private static final String CS_RosterUnknown = "Roster: Unknown";
    private static final String CS_AssociateACoach = "Associer un coach";

    private void clearRoster() {
        this._data = new Roster();
        _data.setVersion(lrbversion);
    }

    private void update() {

        int count_paired_stars = 0;
        for (int i = 0; i < _data.getChampionCount(); i++) {
            if (_data.getChampion(i).getPair() != null) {
                count_paired_stars++;
            }
        }
        count_paired_stars = count_paired_stars / 2;
        _max_champions = 2 + count_paired_stars;

        if (lrbversion == null) {
            lrbversion = LRB.E_Version.BB2016;
        }
        switch (lrbversion) {
            case LRB1:
                jcbLRB.setSelectedIndex(0);
                break;
            case LRB2:
                jcbLRB.setSelectedIndex(1);
                break;
            case LRB3:
                jcbLRB.setSelectedIndex(2);
                break;
            case LRB4:
                jcbLRB.setSelectedIndex(3);
                break;
            case LRB5:
                jcbLRB.setSelectedIndex(4);
                break;
            case LRB6:
                jcbLRB.setSelectedIndex(5);
                break;
            case CRP1:
                jcbLRB.setSelectedIndex(6);
                break;
            case BB2016:
                jcbLRB.setSelectedIndex(7);
                break;
        }

        if (_data.getRoster() != null) {
            jlbRosterType.setText(Translate.translate(CS_Roster) + ": " + _data.getRoster().getName());
        } else {
            jlbRosterType.setText(Translate.translate(CS_RosterUnknown));
        }

        if (_coach == null) {
            jbtSelectCoach.setText(CS_AssociateACoach);
        } else {
            jbtSelectCoach.setText(_coach.getName());

            jlbCoachName.setText(Translate.translate(CS_Coach) + ": " + _coach.getName());
            if (_coach.getRoster() != null) {
                if (_data.getRoster() == null) {
                    _data.setRoster(_lrb.getRosterType(_coach.getRoster().getName(), true));
                }
                if (_data.getRoster() != null) {
                    jlbIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bb/teamma/images/" + _data.getRoster().getImage())));
                }
                jlbTeamName.setText(_coach.getTeam());
                jlbRosterType.setText(Translate.translate(CS_Roster) + ": " + _data.getRoster().getName());
            }
            //_coach.mCompositions.add(_data);
            _coach.setRank(_data.getValue(false) / 10000);
        }

        jbtSelectCoach.setEnabled(Tournament.getTournament().getActiveCoachNumber() > 0);
        jbtAdd.setEnabled(_data.getChampionCount() + _data.getPlayerCount() < 16);
        jbtRemove.setEnabled(_data.getPlayerCount() > 0);

        /**
         * Players
         */
        MjtTeamPlayers playersModel = new MjtTeamPlayers(_data, this.lrbversion);

        jtbPlayers.setModel(playersModel);
        int columnIndex = 0;
        jtbPlayers.getColumnModel().getColumn(columnIndex++).setMinWidth(5);
        jtbPlayers.getColumnModel().getColumn(columnIndex++).setMinWidth(20);
        jtbPlayers.getColumnModel().getColumn(columnIndex++).setMinWidth(80);
        jtbPlayers.getColumnModel().getColumn(columnIndex++).setMinWidth(5);
        jtbPlayers.getColumnModel().getColumn(columnIndex++).setMinWidth(5);
        jtbPlayers.getColumnModel().getColumn(columnIndex++).setMinWidth(5);
        if (lrbversion == LRB.E_Version.BB2020) {
            jtbPlayers.getColumnModel().getColumn(columnIndex++).setMinWidth(5);
        }
        jtbPlayers.getColumnModel().getColumn(columnIndex++).setMinWidth(5);
        jtbPlayers.getColumnModel().getColumn(columnIndex++).setMinWidth(200);
        jtbPlayers.getColumnModel().getColumn(columnIndex++).setMinWidth(10);
        jtbPlayers.getColumnModel().getColumn(columnIndex++).setMinWidth(10);
        jtbPlayers.getColumnModel().getColumn(columnIndex++).setMinWidth(10);
        
        

        /**
         * Star players
         */
        MjtTeamStars starsModel = new MjtTeamStars(_data, this.lrbversion);
        jtbStars.setModel(starsModel);
        jtbStars.getColumnModel().getColumn(0).setMinWidth(80);
        jtbStars.getColumnModel().getColumn(1).setMinWidth(80);
        jtbStars.getColumnModel().getColumn(2).setMinWidth(5);
        jtbStars.getColumnModel().getColumn(3).setMinWidth(5);
        jtbStars.getColumnModel().getColumn(4).setMinWidth(5);
        jtbStars.getColumnModel().getColumn(5).setMinWidth(5);
        int col = 6;
        if (this.lrbversion == LRB.E_Version.BB2020) {
            jtbStars.getColumnModel().getColumn(6).setMinWidth(5);
            col++;
        }
        jtbStars.getColumnModel().getColumn(col++).setMinWidth(500);
        jtbStars.getColumnModel().getColumn(col++).setMinWidth(10);

        jtbPlayers.getColumnModel().getColumn(7).addPropertyChangeListener(new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if (evt.getPropertyName().equals("width")) {
                    jtbPlayers.setRowHeight(1);
                    MjtTeamPlayers playersModel = new MjtTeamPlayers(_data, lrbversion);
                    jtbPlayers.setModel(playersModel);
                    int columnIndex = 0;
                    jtbPlayers.getColumnModel().getColumn(columnIndex++).setMinWidth(5);
                    jtbPlayers.getColumnModel().getColumn(columnIndex++).setMinWidth(20);
                    jtbPlayers.getColumnModel().getColumn(columnIndex++).setMinWidth(80);
                    jtbPlayers.getColumnModel().getColumn(columnIndex++).setMinWidth(5);
                    jtbPlayers.getColumnModel().getColumn(columnIndex++).setMinWidth(5);
                    jtbPlayers.getColumnModel().getColumn(columnIndex++).setMinWidth(5);
                    if (lrbversion == LRB.E_Version.BB2020) {
                        jtbPlayers.getColumnModel().getColumn(columnIndex++).setMinWidth(5);
                    }
                    jtbPlayers.getColumnModel().getColumn(columnIndex++).setMinWidth(5);
                    jtbPlayers.getColumnModel().getColumn(columnIndex++).setMinWidth(200);
                    jtbPlayers.getColumnModel().getColumn(columnIndex++).setMinWidth(10);
                    jtbPlayers.getColumnModel().getColumn(columnIndex++).setMinWidth(10);
                    jtbPlayers.getColumnModel().getColumn(columnIndex++).setMinWidth(10);
                }
            }
        });

        /**
         * Team goods
         */
        jtbPlayers.setDefaultRenderer(Integer.class, playersModel);
        jtbPlayers.setDefaultRenderer(String.class, playersModel);
        jtbStars.setDefaultRenderer(Integer.class, starsModel);
        jtbStars.setDefaultRenderer(String.class, starsModel);

        jlbNbAssists.setText(Integer.toString(_data.getAssistants()));
        jlbCostAssists.setText(Integer.toString(_data.getAssistants() * RosterType.getAssistant_cost()));
        jlbPriceAssists.setText(Integer.toString(RosterType.getAssistant_cost()));

        jlbNbReroll.setText(Integer.toString(_data.getRerolls()));
        jlbCostReroll.setText(Integer.toString(_data.getRerolls() * (_data.getRoster() != null ? _data.getRoster().getReroll_cost() : 0)));
        jlbPriceReroll.setText(Integer.toString((_data.getRoster() != null ? _data.getRoster().getReroll_cost() : 0)));

        jlbNbCherrleaders.setText(Integer.toString(_data.getCheerleaders()));
        jlbCostCheerleaders.setText(Integer.toString(_data.getCheerleaders() * RosterType.getCheerleader_cost()));
        jlbPriceCheerleaders.setText(Integer.toString(RosterType.getCheerleader_cost()));

        jlbNbFanFactor.setText(Integer.toString(_data.getFanfactor()));
        jlbCostFanFactor.setText(Integer.toString(_data.getFanfactor() * RosterType.getFan_factor_cost()));
        jlbPriceFanFactor.setText(Integer.toString(RosterType.getFan_factor_cost()));

        if (_data.getRoster() != null) {
            jlbCostApothecary.setEnabled(_data.getRoster().isApothecary());
            jslApothecary.setEnabled(_data.getRoster().isApothecary());
            jlbPriceApothecary.setEnabled(_data.getRoster().isApothecary());
            jlbApothecary.setEnabled(_data.getRoster().isApothecary());
            jlbX10.setEnabled(_data.getRoster().isApothecary());
            jlbX20.setEnabled(_data.getRoster().isApothecary());

            if (!_data.getRoster().isApothecary()) {
                jslApothecary.setValue(0);
            } else {
                jlbPriceApothecary.setText(Integer.toString(RosterType.getApothecary_cost()));
                if (_data.isApothecary()) {
                    jlbNbApothecary.setText("1");
                    jlbCostApothecary.setText(Integer.toString(RosterType.getApothecary_cost()));
                } else {
                    jlbNbApothecary.setText("0");
                    jlbCostApothecary.setText("0");
                }
            }
        }

        jpnInducements.removeAll();
        if (_data != null) {
            if (_data.getRoster() != null) {
                for (int cpt = 0; cpt < _data.getRoster().getInducementTypeSize(); cpt++) {
                    InducementType it = _data.getRoster().getInducementType(cpt);
                    JPanel jpnItPanel = createInducementPanel(it, _data);
                    jpnInducements.add(jpnItPanel);
                }
            }
        }

        jbtAddStar.setEnabled(_data.getChampionCount() < _max_champions);
        jbtRemoveStar.setEnabled(jtbStars.getSelectedRow() > -1);

        /**
         * Ranking
         */
        int cost = _data.getValue(jcbWithSkills.isSelected());
        jlbTotalCost.setText(Integer.toString(cost));
        jlbRanking.setText(Integer.toString(cost / 10000));
    }

    private JPanel createInducementPanel(InducementType it, Roster team) {
        JPanel jpn = new JPanel(new java.awt.GridBagLayout());
        jpn.setName(it.getName() + "Inducement");

        java.awt.GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
        JLabel jlbName = new JLabel();
        jlbName.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jlbName.setText(Translate.translate(it.getName()));
        jlbName.setPreferredSize(new java.awt.Dimension(120, 14));
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 2.0;
        jpn.add(jlbName, gridBagConstraints);

        javax.swing.JSlider jslNb = new JSlider(0, it.getNbMax());
        jslNb.setMinorTickSpacing(1);
        jslNb.setPaintTicks(true);
        jslNb.setSnapToTicks(true);
        jslNb.setValue(team.getNbInduc(it));
        jslNb.setMaximumSize(new java.awt.Dimension(50, 23));
        jslNb.setMinimumSize(new java.awt.Dimension(30, 23));
        jslNb.setName("jsl" + it.getName()); // NOI18N
        jslNb.setPreferredSize(new java.awt.Dimension(50, 23));

        jpn.add(jslNb, new java.awt.GridBagConstraints());

        JLabel jlbNb = new JLabel();
        jlbNb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlbNb.setLabelFor(jslNb);
        jlbNb.setText(Integer.toString(team.getNbInduc(it)));
        jlbNb.setName("jlbNb" + it.getName()); // NOI18N
        jlbNb.setPreferredSize(new java.awt.Dimension(10, 14));
        jpn.add(jlbNb, new java.awt.GridBagConstraints());

        JLabel jlX = new JLabel();
        jlX.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlX.setText("x");
        jlX.setPreferredSize(new java.awt.Dimension(10, 14));
        jpn.add(jlX, new java.awt.GridBagConstraints());

        JLabel jlbCost = new JLabel();
        jlbCost.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlbCost.setText(Integer.toString(it.getCost()));
        jlbCost.setName("jlbCost" + it.getName()); // NOI18N
        jlbCost.setPreferredSize(new java.awt.Dimension(70, 14));
        jpn.add(jlbCost, new java.awt.GridBagConstraints());

        JLabel jlEqual = new JLabel();
        jlEqual.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlEqual.setText("=");
        jlEqual.setPreferredSize(new java.awt.Dimension(10, 14));
        jpn.add(jlEqual, new java.awt.GridBagConstraints());

        JLabel jlbTotalCost = new JLabel();
        jlbTotalCost.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        int totalcost = team.getNbInduc(it) * it.getCost();
        jlbTotalCost.setText(Integer.toString(totalcost));
        jlbTotalCost.setName("jlbTotalCost" + it.getName()); // NOI18N
        jlbTotalCost.setPreferredSize(new java.awt.Dimension(70, 14));
        jpn.add(jlbTotalCost, new java.awt.GridBagConstraints());

        jslNb.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                int value = jslNb.getValue();
                int previous_value = team.getNbInduc(it);

                if (value != previous_value) {
                    team.setInducement(it, value);
                    int totalcost = value * it.getCost();
                    jlbTotalCost.setText(Integer.toString(totalcost));
                    update();
                }
            }
        });

        return jpn;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbtAdd;
    private javax.swing.JButton jbtAddSkill;
    private javax.swing.JButton jbtAddStar;
    private javax.swing.JButton jbtExport;
    private javax.swing.JButton jbtHTML;
    private javax.swing.JButton jbtImport;
    private javax.swing.JButton jbtOK;
    private javax.swing.JButton jbtRemove;
    private javax.swing.JButton jbtRemoveSkill;
    private javax.swing.JButton jbtRemoveStar;
    private javax.swing.JButton jbtSelectCoach;
    private javax.swing.JComboBox<String> jcbLRB;
    private javax.swing.JCheckBox jcbWithSkills;
    private javax.swing.JLabel jlbApothecary;
    private javax.swing.JLabel jlbCoachName;
    private javax.swing.JLabel jlbCostApothecary;
    private javax.swing.JLabel jlbCostAssists;
    private javax.swing.JLabel jlbCostCheerleaders;
    private javax.swing.JLabel jlbCostFanFactor;
    private javax.swing.JLabel jlbCostReroll;
    private javax.swing.JButton jlbIcon;
    private javax.swing.JLabel jlbNbApothecary;
    private javax.swing.JLabel jlbNbAssists;
    private javax.swing.JLabel jlbNbAssists1;
    private javax.swing.JLabel jlbNbAssists2;
    private javax.swing.JLabel jlbNbAssists3;
    private javax.swing.JLabel jlbNbAssists4;
    private javax.swing.JLabel jlbNbAssists5;
    private javax.swing.JLabel jlbNbAssists6;
    private javax.swing.JLabel jlbNbAssists8;
    private javax.swing.JLabel jlbNbAssists9;
    private javax.swing.JLabel jlbNbCherrleaders;
    private javax.swing.JLabel jlbNbFanFactor;
    private javax.swing.JLabel jlbNbReroll;
    private javax.swing.JLabel jlbPriceApothecary;
    private javax.swing.JLabel jlbPriceAssists;
    private javax.swing.JLabel jlbPriceCheerleaders;
    private javax.swing.JLabel jlbPriceFanFactor;
    private javax.swing.JLabel jlbPriceReroll;
    private javax.swing.JLabel jlbRanking;
    private javax.swing.JLabel jlbRosterType;
    private javax.swing.JLabel jlbTeamName;
    private javax.swing.JLabel jlbTotalCost;
    private javax.swing.JLabel jlbX10;
    private javax.swing.JLabel jlbX20;
    private javax.swing.JPanel jpnCenter;
    private javax.swing.JPanel jpnInducements;
    private javax.swing.JPanel jpnTitle;
    private javax.swing.JSlider jslApothecary;
    private javax.swing.JSlider jslAssists;
    private javax.swing.JSlider jslCheerleaders;
    private javax.swing.JSlider jslFanFactor;
    private javax.swing.JSlider jslReroll;
    private javax.swing.JTable jtbPlayers;
    private javax.swing.JTable jtbStars;
    private javax.swing.JTabbedPane jtpGoods;
    // End of variables declaration//GEN-END:variables


    /*private void writeObject(java.io.ObjectOutputStream stream) throws java.io.IOException {
     throw new java.io.NotSerializableException(getClass().getName());
     }

     private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, ClassNotFoundException {
     throw new java.io.NotSerializableException(getClass().getName());
     }*/
    private static final Logger LOG = Logger.getLogger(JdgRoster.class.getName());
}
