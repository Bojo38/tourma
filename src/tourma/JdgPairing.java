/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * jdgCoach.java
 *
 * Created on 10 mai 2010, 19:37:53
 */
package tourma;

import java.awt.DisplayMode;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import javax.swing.DefaultComboBoxModel;
import tourma.data.Coach;
import tourma.data.CoachMatch;
import tourma.data.Round;
import tourma.data.Team;
import tourma.data.TeamMatch;
import tourma.data.Tournament;
import tourma.data.ranking.IndivRanking;
import tourma.languages.Translate;
import tourma.tableModel.MjtMatches;
import tourma.tableModel.MjtRankingIndiv;
import tourma.utility.StringConstants;

/**
 *
 * @author Frederic Berger
 */
public final class JdgPairing extends javax.swing.JDialog {

    private Team mTeam1;
    private Team mTeam2;
    private Round mRound;
    private ArrayList<String> mItems1;
    private ArrayList<String> mItems2;
    private HashMap<String, Coach> mCoachs;
    private ArrayList<CoachMatch> mMatchs;
    private TeamMatch teamMatch;

    private final static String CS_ACCR_Versus = "VS";

    /**
     * Creates new form jdgCoach
     *
     * @param parent
     * @param modal
     * @param team1
     * @param round
     * @param team2
     * @param teammatch
     */
    public JdgPairing(final java.awt.Frame parent, final boolean modal, final Team team1, final Team team2, final Round round, TeamMatch teammatch) {
        super(parent, modal);
        initComponents();

        final GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        final GraphicsDevice gs = ge.getDefaultScreenDevice();
        final DisplayMode dmode = gs.getDisplayMode();

        final int screenWidth = dmode.getWidth();
        final int screenHeight = dmode.getHeight();
        this.setLocation((screenWidth - this.getWidth()) / 2, (screenHeight - this.getHeight()) / 2);

        mTeam1 = team1;
        mTeam2 = team2;
        mCoachs = new HashMap<>();
        teamMatch = teammatch;
        this.setTitle(team1.getName()
                + " " + Translate.translate(CS_ACCR_Versus) + " "
                + team2.getName());

        mRound = round;
        mMatchs = new ArrayList<>();

        mItems1 = new ArrayList();
        for (int i = 0; i < mTeam1.getCoachsCount(); i++) {
            final Coach c = mTeam1.getCoach(i);
            mItems1.add(c.getName() + StringConstants.CS_THICK + c.getTeam() + StringConstants.CS_THICK + c.getRoster().getName());
            mCoachs.put(c.getName() + StringConstants.CS_THICK + c.getTeam() + StringConstants.CS_THICK + c.getRoster().getName(), c);
        }

        mItems2 = new ArrayList();
        for (int i = 0; i < mTeam1.getCoachsCount(); i++) {
            final Coach c = mTeam2.getCoach(i);
            mItems2.add(c.getName() + StringConstants.CS_THICK + c.getTeam() + StringConstants.CS_THICK + c.getRoster().getName());
            mCoachs.put(c.getName() + StringConstants.CS_THICK + c.getTeam() + StringConstants.CS_THICK + c.getRoster().getName(), c);
        }

        update();
    }

    private void update() {
        jcbTeam1.setModel(new DefaultComboBoxModel(mItems1.toArray()));
        jcbTeam2.setModel(new DefaultComboBoxModel(mItems2.toArray()));

        final MjtMatches model = new MjtMatches(mMatchs, true, true, false, false);
        jtbMatches.setModel(model);
        jtbMatches.setDefaultRenderer(String.class, model);
        jtbMatches.setDefaultRenderer(Integer.class, model);

        jbtOK.setEnabled(mMatchs.size() == mTeam1.getCoachsCount());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings({"unchecked", "PMD"})
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jtbMatches = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jbtOK = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jcbTeam1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jcbTeam2 = new javax.swing.JComboBox();
        jPanel4 = new javax.swing.JPanel();
        jbtAdd = new javax.swing.JButton();
        jbtRemove = new javax.swing.JButton();
        jbtSwiss = new javax.swing.JButton();
        jbtRandom = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        jtbMatches.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jtbMatches);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jbtOK.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tourma/images/Select.png"))); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("tourma/languages/language"); // NOI18N
        jbtOK.setText(bundle.getString("OK")); // NOI18N
        jbtOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtOKActionPerformed(evt);
            }
        });
        jPanel2.add(jbtOK);

        getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jcbTeam1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel3.add(jcbTeam1, java.awt.BorderLayout.WEST);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText(bundle.getString("vs")); // NOI18N
        jPanel3.add(jLabel1, java.awt.BorderLayout.CENTER);

        jcbTeam2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel3.add(jcbTeam2, java.awt.BorderLayout.EAST);

        jbtAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tourma/images/Add.png"))); // NOI18N
        jbtAdd.setText(bundle.getString("Add")); // NOI18N
        jbtAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtAddActionPerformed(evt);
            }
        });
        jPanel4.add(jbtAdd);

        jbtRemove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tourma/images/Close.png"))); // NOI18N
        jbtRemove.setText(bundle.getString("Remove")); // NOI18N
        jbtRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtRemoveActionPerformed(evt);
            }
        });
        jPanel4.add(jbtRemove);

        jbtSwiss.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tourma/images/swiss.png"))); // NOI18N
        jbtSwiss.setText(bundle.getString("Swiss")); // NOI18N
        jbtSwiss.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtSwissActionPerformed(evt);
            }
        });
        jPanel4.add(jbtSwiss);

        jbtRandom.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tourma/images/Dice.png"))); // NOI18N
        jbtRandom.setText(bundle.getString("Random")); // NOI18N
        jbtRandom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtRandomActionPerformed(evt);
            }
        });
        jPanel4.add(jbtRandom);

        jPanel3.add(jPanel4, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel3, java.awt.BorderLayout.NORTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents
@SuppressWarnings({"PMD.UnusedFormalParameter", "PMD.MethodArgumentCouldBeFinal"})
    private void jbtOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtOKActionPerformed

    for (CoachMatch mMatch : mMatchs) {
        teamMatch.addMatch(mMatch);
    }

    this.setVisible(false);

    }//GEN-LAST:event_jbtOKActionPerformed
    @SuppressWarnings({"PMD.UnusedFormalParameter", "PMD.MethodArgumentCouldBeFinal"})
    private void jbtAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtAddActionPerformed
        if (mItems1.size() > 0) {
            final CoachMatch m = new CoachMatch(mRound);
            String name1 = (String) jcbTeam1.getSelectedItem();
            String name2 = (String) jcbTeam2.getSelectedItem();
            m.setCompetitor1(mCoachs.get(name1));
            m.setCompetitor2(mCoachs.get(name2));
            mMatchs.add(m);
            mItems1.remove(jcbTeam1.getSelectedIndex());
            mItems2.remove(jcbTeam2.getSelectedIndex());

        }
        update();
    }//GEN-LAST:event_jbtAddActionPerformed
    @SuppressWarnings({"PMD.UnusedFormalParameter", "PMD.MethodArgumentCouldBeFinal"})
    private void jbtRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtRemoveActionPerformed

        if (jtbMatches.getSelectedRow() >= 0) {
            final CoachMatch m = mMatchs.get(jtbMatches.getSelectedRow());
            mItems1.add(m.getCompetitor1().getName() + StringConstants.CS_THICK + ((Coach) m.getCompetitor1()).getTeam() + StringConstants.CS_THICK + ((Coach) m.getCompetitor1()).getRoster().getName());
            mItems2.add(m.getCompetitor2().getName() + StringConstants.CS_THICK + ((Coach) m.getCompetitor2()).getTeam() + StringConstants.CS_THICK + ((Coach) m.getCompetitor2()).getRoster().getName());
            mMatchs.remove(jtbMatches.getSelectedRow());

        }
        update();
    }//GEN-LAST:event_jbtRemoveActionPerformed

    private void jbtRandomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtRandomActionPerformed

        Collections.shuffle(mItems1);
        Collections.shuffle(mItems2);

        while ((mItems1.size() > 0) && (mItems2.size() > 0)) {

            final CoachMatch m = new CoachMatch(mRound);
            m.setCompetitor1(mCoachs.get(mItems1.get(0)));
            m.setCompetitor2(mCoachs.get(mItems2.get(0)));
            mMatchs.add(m);
            mItems1.remove(0);
            mItems2.remove(0);

        }
        update();
    }//GEN-LAST:event_jbtRandomActionPerformed

    private void jbtSwissActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtSwissActionPerformed
        
        // Sort items by ranking
        ArrayList<Coach> list1=new ArrayList<>();
                ArrayList<Coach> list2=new ArrayList<>();
        for (String item:mItems1)
        {
            list1.add(mCoachs.get(item));
        }
        for (String item:mItems2)
        {
            list2.add(mCoachs.get(item));
        }
        
        int roundIndex=Tournament.getTournament().getRoundIndex(mRound);
        IndivRanking idv1=new IndivRanking(roundIndex,
                Tournament.getTournament().getParams().getRankingIndiv1(),
                Tournament.getTournament().getParams().getRankingIndiv2(),
                Tournament.getTournament().getParams().getRankingIndiv3(),
                Tournament.getTournament().getParams().getRankingIndiv4(),
                Tournament.getTournament().getParams().getRankingIndiv5(),
                list1,
                Tournament.getTournament().getParams().isTeamTournament(),
                false,false,false);
        IndivRanking idv2=new IndivRanking(roundIndex,
                Tournament.getTournament().getParams().getRankingIndiv1(),
                Tournament.getTournament().getParams().getRankingIndiv2(),
                Tournament.getTournament().getParams().getRankingIndiv3(),
                Tournament.getTournament().getParams().getRankingIndiv4(),
                Tournament.getTournament().getParams().getRankingIndiv5(),
                list2,
                Tournament.getTournament().getParams().isTeamTournament(),
                false,false,false);
        MjtRankingIndiv indivR1=new MjtRankingIndiv(idv1);
        MjtRankingIndiv indivR2=new MjtRankingIndiv(idv2);

        list1=new ArrayList<>();
        list2=new ArrayList<>();
        
        for (int i=0; i<indivR1.getRowCount(); i++)
        {
            list1.add((Coach)idv1.getSortedObject(i).getObject());
        }
        
        for (int i=0; i<indivR2.getRowCount(); i++)
        {
            list2.add((Coach)idv2.getSortedObject(i).getObject());
        }
        
        while ((list1.size() > 0) && (list2.size() > 0)) {

            final CoachMatch m = new CoachMatch(mRound);
            m.setCompetitor1(list1.get(0));
            m.setCompetitor2(list2.get(0));
            mMatchs.add(m);
            list1.remove(0);
            list2.remove(0);
        }
        mItems1.clear();
        mItems2.clear();
        
        update();
    }//GEN-LAST:event_jbtSwissActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtAdd;
    private javax.swing.JButton jbtOK;
    private javax.swing.JButton jbtRandom;
    private javax.swing.JButton jbtRemove;
    private javax.swing.JButton jbtSwiss;
    private javax.swing.JComboBox jcbTeam1;
    private javax.swing.JComboBox jcbTeam2;
    private javax.swing.JTable jtbMatches;
    // End of variables declaration//GEN-END:variables

    private void writeObject(java.io.ObjectOutputStream stream) throws java.io.IOException {
        throw new java.io.NotSerializableException(getClass().getName());
    }

    private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, ClassNotFoundException {
        throw new java.io.NotSerializableException(getClass().getName());
    }
}
