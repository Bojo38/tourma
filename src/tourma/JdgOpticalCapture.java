
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * JdgCoach.java
 *
 * Created on 10 mai 2010, 19:37:53
 */
package tourma;

import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.util.logging.Logger;
import tourma.data.Round;

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.lang.Thread.UncaughtExceptionHandler;

import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamDiscoveryEvent;
import com.github.sarxos.webcam.WebcamDiscoveryListener;
import com.github.sarxos.webcam.WebcamEvent;
import com.github.sarxos.webcam.WebcamListener;
import com.github.sarxos.webcam.WebcamPanel;
import com.github.sarxos.webcam.WebcamPicker;
import com.github.sarxos.webcam.WebcamResolution;
import java.awt.BorderLayout;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author Frederic Berger
 */
public final class JdgOpticalCapture extends javax.swing.JDialog implements WebcamListener, WindowListener, UncaughtExceptionHandler, ItemListener, WebcamDiscoveryListener {

    private Round mRound;

    private Webcam webcam = null;
    private WebcamPanel panel = null;
    private WebcamPicker picker = null;
    private Thread tWebcam;
    /**
     * Creates new form jdgCoach
     *
     * @param parent
     * @param modal
     */
    @SuppressWarnings("unchecked")
    public JdgOpticalCapture(final java.awt.Frame parent, final boolean modal, Round round) {
        super(parent, modal);
        initComponents();
        mRound = round;
        Webcam.addDiscoveryListener(this);

        setTitle("Java Webcam Capture POC");

        addWindowListener(this);

        picker = new WebcamPicker();
        picker.addItemListener(this);

        webcam = picker.getSelectedWebcam();

        if (webcam == null) {
            JOptionPane.showMessageDialog(this, "No webcam found", "Optical Capture", JOptionPane.ERROR_MESSAGE);
            setVisible(false);
        }

        webcam.setViewSize(WebcamResolution.VGA.getSize());
        webcam.addWebcamListener(this);

        panel = new WebcamPanel(webcam, false);
        panel.setFPSDisplayed(true);

        jpnCam.add(picker, BorderLayout.NORTH);
        jpnCam.add(panel, BorderLayout.CENTER);

        pack();
//		setVisible(true);

        tWebcam = new Thread() {

            @Override
            public void run() {
                panel.start();
            }
        };
        tWebcam.setName("example-starter");
        tWebcam.setDaemon(true);
        tWebcam.setUncaughtExceptionHandler(this);
        tWebcam.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings({"unchecked", "PMD"})
    @SuppressFBWarnings({"SIC", "Generated Code"})
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jbtOK = new javax.swing.JButton();
        jpnCam = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jpnSnap = new javax.swing.JButton();
        jpnDetectedMatch = new javax.swing.JPanel();
        jbtNext = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jbtOK.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tourma/images/Select.png"))); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("tourma/languages/language"); // NOI18N
        jbtOK.setText(bundle.getString("OK")); // NOI18N
        jbtOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtOKActionPerformed(evt);
            }
        });
        jPanel2.add(jbtOK);

        getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);

        jpnCam.setLayout(new java.awt.BorderLayout());
        getContentPane().add(jpnCam, java.awt.BorderLayout.CENTER);

        jPanel6.setLayout(new java.awt.BorderLayout());

        jpnSnap.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tourma/images/Camera.png"))); // NOI18N
        jpnSnap.setText(bundle.getString("Capture")); // NOI18N
        jpnSnap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jpnSnapActionPerformed(evt);
            }
        });
        jPanel6.add(jpnSnap, java.awt.BorderLayout.NORTH);
        jPanel6.add(jpnDetectedMatch, java.awt.BorderLayout.CENTER);

        jbtNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tourma/images/Forward.png"))); // NOI18N
        jbtNext.setText(bundle.getString("OK")); // NOI18N
        jbtNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtNextActionPerformed(evt);
            }
        });
        jPanel6.add(jbtNext, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(jPanel6, java.awt.BorderLayout.NORTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @SuppressWarnings({"PMD.UnusedFormalParameter", "PMD.MethodArgumentCouldBeFinal"})
    private void jbtOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtOKActionPerformed
        if (tWebcam!=null)
        {
            panel.stop();
        }
        this.setVisible(false);
    }//GEN-LAST:event_jbtOKActionPerformed

    private void jbtNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtNextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jbtNextActionPerformed

    private void jpnSnapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jpnSnapActionPerformed
        if (webcam!=null)
        {
        BufferedImage image = webcam.getImage();
	// save image to PNG file
        try{
	ImageIO.write(image, "PNG", new File("test.png"));
        }
        catch(IOException ioe)
        {
            JOptionPane.showMessageDialog(this,ioe.getLocalizedMessage(), "Exception",JOptionPane.ERROR_MESSAGE);
        }
        }
    }//GEN-LAST:event_jpnSnapActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JButton jbtNext;
    private javax.swing.JButton jbtOK;
    private javax.swing.JPanel jpnCam;
    private javax.swing.JPanel jpnDetectedMatch;
    private javax.swing.JButton jpnSnap;
    // End of variables declaration//GEN-END:variables
    private static final Logger LOG = Logger.getLogger(JdgOpticalCapture.class.getName());

    private void writeObject(java.io.ObjectOutputStream stream) throws java.io.IOException {
        throw new java.io.NotSerializableException(getClass().getName());
    }

    private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, ClassNotFoundException {
        throw new java.io.NotSerializableException(getClass().getName());
    }

    @Override
    public void webcamOpen(WebcamEvent we) {
        //System.out.println("webcam open");
    }

    @Override
    public void webcamClosed(WebcamEvent we) {
        //System.out.println("webcam closed");
    }

    @Override
    public void webcamDisposed(WebcamEvent we) {
        //System.out.println("webcam disposed");
    }

    @Override
    public void webcamImageObtained(WebcamEvent we) {
        // do nothing
    }

    @Override
    public void windowActivated(WindowEvent e) {
    }

    @Override
    public void windowClosed(WindowEvent e) {
        panel.stop();
        webcam.close();
    }

    @Override
    public void windowClosing(WindowEvent e) {
    }

    @Override
    public void windowOpened(WindowEvent e) {
    }

    @Override
    public void windowDeactivated(WindowEvent e) {
    }

    @Override
    public void windowDeiconified(WindowEvent e) {
        //System.out.println("webcam viewer resumed");
        panel.resume();
    }

    @Override
    public void windowIconified(WindowEvent e) {
        //System.out.println("webcam viewer paused");
        panel.pause();
    }

    @Override
    public void uncaughtException(Thread t, Throwable e) {
        System.err.println(String.format("Exception in thread %s", t.getName()));
        e.printStackTrace();
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getItem() != webcam) {
            if (webcam != null) {

                panel.stop();

                remove(panel);

                webcam.removeWebcamListener(this);
                webcam.close();

                webcam = (Webcam) e.getItem();
                webcam.setViewSize(WebcamResolution.VGA.getSize());
                webcam.addWebcamListener(this);

                //System.out.println("selected " + webcam.getName());

                panel = new WebcamPanel(webcam, false);
                panel.setFPSDisplayed(true);

                add(panel, BorderLayout.CENTER);
                pack();

                tWebcam= new Thread() {

                    @Override
                    public void run() {
                        panel.start();
                    }
                };
                tWebcam.setName("example-stoper");
                tWebcam.setDaemon(true);
                tWebcam.setUncaughtExceptionHandler(this);
                tWebcam.start();
            }
        }
    }

    @Override
    public void webcamFound(WebcamDiscoveryEvent event) {
        if (picker != null) {
            picker.addItem(event.getWebcam());
        }
    }

    @Override
    public void webcamGone(WebcamDiscoveryEvent event) {
        if (picker != null) {
            picker.removeItem(event.getWebcam());
        }
    }
}
