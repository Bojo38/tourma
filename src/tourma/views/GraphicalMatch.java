/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package tourma.views;

import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridBagLayout;
import java.rmi.RemoteException;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.border.LineBorder;
import tourma.data.Clan;
import tourma.data.CoachMatch;
import tourma.data.Match;
import tourma.data.TeamMatch;
import tourma.data.Tournament;
import tourma.utils.ImageTreatment;

/**
 *
 * @author WFMJ7631
 */
public class GraphicalMatch extends javax.swing.JPanel {

    private static final long serialVersionUID = 1L;

    private final Match match;

    /**
     *
     */
    private JLabel clanIcon1 = null;

    /**
     *
     */
    private JLabel clanIcon2 = null;

    /**
     * Creates new form GraphicalMatch
     *
     * @param m
     * @param width
     * @param odd
     */
    @SuppressFBWarnings({"BC"})
    public GraphicalMatch(Match m, boolean odd, int width) {
        initComponents();
        match = m;
        this.setSize(getWidth(), 60);

        int computed_height = 60;
        int computed_width = 180;

        Color bkg = new Color(255, 255, 255);
        if (odd) {
            bkg = new Color(220, 220, 220);
        }

        this.setBorder(new LineBorder(new Color(200, 200, 200), 1, false));

        int xOffset = 0;
        GridBagLayout gbl = new GridBagLayout();
        this.setLayout(gbl);

        if (match instanceof CoachMatch) {
            CoachMatch cm = (CoachMatch) match;

            if (Tournament.getTournament().getClansCount() > 1) {
                JLabel ClanIcon1 = new JLabel();
                ClanIcon1.setSize(computed_width, computed_height);
                xOffset = computed_width;
                ClanIcon1.setLocation(1, 1);
                JLabel ClanIcon2 = new JLabel();
                ClanIcon2.setSize(computed_width, computed_height);
                ClanIcon2.setLocation(width - computed_width - 1, 1);
                Clan clan1 = (cm.getCompetitor1()).getClan();
                if (clan1.getPicture() != null) {
                    ClanIcon1.setIcon(ImageTreatment.resize(clan1.getPicture(), computed_height, computed_height));
                }
                ClanIcon1.setText(clan1.getName());
                Clan clan2 = (cm.getCompetitor2()).getClan();
                if (clan2.getPicture() != null) {
                    ClanIcon2.setIcon(ImageTreatment.resize(clan2.getPicture(), computed_height, computed_height));
                }
                ClanIcon2.setText(clan2.getName());
                ClanIcon1.setOpaque(true);
                ClanIcon1.setBackground(bkg);
                ClanIcon2.setOpaque(true);
                ClanIcon2.setBackground(bkg);
            }

            JLabel CoachIcon1 = new JLabel();
            CoachIcon1.setSize(computed_width, computed_height);
            CoachIcon1.setLocation(xOffset + 1, 1);
            JLabel CoachIcon2 = new JLabel();
            CoachIcon2.setSize(computed_width, computed_height);
            CoachIcon2.setLocation(width - xOffset - computed_width - 1, 1);
            if (cm.getCompetitor1().getPicture() != null) {
                CoachIcon1.setIcon(ImageTreatment.resize(cm.getCompetitor1().getPicture(), computed_height, computed_height));
            }
            CoachIcon1.setText(cm.getCompetitor1().getName());
            if (cm.getCompetitor2().getPicture() != null) {
                CoachIcon2.setIcon(ImageTreatment.resize(cm.getCompetitor2().getPicture(), computed_height, computed_height));
            }
            CoachIcon2.setText(cm.getCompetitor2().getName());
            CoachIcon1.setBackground(bkg);
            CoachIcon1.setOpaque(true);
            CoachIcon2.setBackground(bkg);
            CoachIcon2.setOpaque(true);
            this.add(CoachIcon1);
            this.add(CoachIcon2);

        }
        if (match instanceof TeamMatch) {
            TeamMatch tm;
            tm = (TeamMatch) match;
            this.setSize(80 * tm.getMatchCount() + 80, 400);
        }
        this.setPreferredSize(new Dimension(width, computed_height));
        this.setSize(new Dimension(width, computed_height));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setPreferredSize(new java.awt.Dimension(400, 150));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 552, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 144, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    private static final Logger LOG = Logger.getLogger(GraphicalMatch.class.getName());

    /**
     * @return the clanIcon1
     */
    public JLabel getClanIcon1() {
        return clanIcon1;
    }

    /**
     * @param clanIcon1 the clanIcon1 to set
     */
    public void setClanIcon1(JLabel clanIcon1) {
        this.clanIcon1 = clanIcon1;
    }

    /**
     * @return the clanIcon2
     */
    public JLabel getClanIcon2() {
        return clanIcon2;
    }

    /**
     * @param clanIcon2 the clanIcon2 to set
     */
    public void setClanIcon2(JLabel clanIcon2) {
        this.clanIcon2 = clanIcon2;
    }

    private void writeObject(java.io.ObjectOutputStream stream) throws java.io.IOException {
        throw new java.io.NotSerializableException(getClass().getName());
    }

    private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, ClassNotFoundException {
        throw new java.io.NotSerializableException(getClass().getName());
    }
}
