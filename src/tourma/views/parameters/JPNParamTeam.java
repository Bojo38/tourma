/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package tourma.views.parameters;

import java.rmi.RemoteException;
import java.text.ParseException;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import tourma.data.Criteria;
import tourma.data.ETeamPairing;
import tourma.data.Tournament;
import tourma.data.Tournament;
import tourma.languages.Translate;

/**
 *
 * @author WFMJ7631
 */
public final class JPNParamTeam extends javax.swing.JPanel {

    private Tournament mTournament;

    /**
     * Creates new form JPNParamTeam
     */
    public JPNParamTeam() {
        mTournament = null;

        mTournament = Tournament.getTournament();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings({"unchecked", "PMD"})
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jrbTeamVictory = new javax.swing.JRadioButton();
        jrbCoachPoints = new javax.swing.JRadioButton();
        jcxHugeVictory = new javax.swing.JCheckBox();
        jtffHugeVictory = new javax.swing.JFormattedTextField();
        jlbHugeVictoryGap = new javax.swing.JLabel();
        jtffHugeVictoryGap = new javax.swing.JFormattedTextField();
        jcxLargeVictory = new javax.swing.JCheckBox();
        jtffLargeVictory = new javax.swing.JFormattedTextField();
        jlbLargeVictoryGap = new javax.swing.JLabel();
        jtffLargeVictoryGap = new javax.swing.JFormattedTextField();
        jLabel23 = new javax.swing.JLabel();
        jtffVictoryTeam = new javax.swing.JFormattedTextField();
        jLabel24 = new javax.swing.JLabel();
        jtffDrawTeam = new javax.swing.JFormattedTextField();
        jcxLittleLoss = new javax.swing.JCheckBox();
        jtffLittleLost = new javax.swing.JFormattedTextField();
        jlbLittleLossGap = new javax.swing.JLabel();
        jtffLittleLostGap = new javax.swing.JFormattedTextField();
        jLabel25 = new javax.swing.JLabel();
        jtffLostTeam = new javax.swing.JFormattedTextField();
        jcxBigLoss = new javax.swing.JCheckBox();
        jtffHugeLostTeam = new javax.swing.JFormattedTextField();
        jlbBigLossGap = new javax.swing.JLabel();
        jtffBigLostGap = new javax.swing.JFormattedTextField();
        jLabel26 = new javax.swing.JLabel();
        jcbRank1Team = new javax.swing.JComboBox();
        jLabel27 = new javax.swing.JLabel();
        jcbRank2Team = new javax.swing.JComboBox();
        jLabel28 = new javax.swing.JLabel();
        jcbRank3Team = new javax.swing.JComboBox();
        jLabel29 = new javax.swing.JLabel();
        jcbRank4Team = new javax.swing.JComboBox();
        jLabel30 = new javax.swing.JLabel();
        jcbRank5Team = new javax.swing.JComboBox();
        jlbVictoryPoints = new javax.swing.JLabel();
        jtffTeamVictoryBonus = new javax.swing.JFormattedTextField();
        jlbVictoryPoints1 = new javax.swing.JLabel();
        jtffTeamDrawBonus = new javax.swing.JFormattedTextField();
        jcxBestResult = new javax.swing.JCheckBox();
        jspBestResults = new javax.swing.JSpinner();
        jcxExceptBestAndWorst = new javax.swing.JCheckBox();
        jcxForAnnexRankingToo = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jcxTeamBalance = new javax.swing.JCheckBox();
        jcxIndividualBalance = new javax.swing.JCheckBox();

        setLayout(new java.awt.BorderLayout());

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("tourma/languages/language"); // NOI18N
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("Team Ranking"))); // NOI18N
        jPanel1.setLayout(new java.awt.GridLayout(21, 2));

        jrbTeamVictory.setText(bundle.getString("UseTeamVictory")); // NOI18N
        jrbTeamVictory.setHideActionText(true);
        jrbTeamVictory.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jrbTeamVictory.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jrbTeamVictory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbTeamVictoryActionPerformed(evt);
            }
        });
        jPanel1.add(jrbTeamVictory);

        jrbCoachPoints.setText(bundle.getString("UseCoachsPointsSum")); // NOI18N
        jrbCoachPoints.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbCoachPointsActionPerformed(evt);
            }
        });
        jPanel1.add(jrbCoachPoints);

        jcxHugeVictory.setText(bundle.getString("HugeeoryKey")); // NOI18N
        jcxHugeVictory.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jcxHugeVictory.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jcxHugeVictory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcxHugeVictoryActionPerformed(evt);
            }
        });
        jPanel1.add(jcxHugeVictory);

        jtffHugeVictory.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        jtffHugeVictory.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtffHugeVictoryFocusLost(evt);
            }
        });
        jPanel1.add(jtffHugeVictory);

        jlbHugeVictoryGap.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jlbHugeVictoryGap.setText(bundle.getString("MinimumGapForHugeVictoryKey")); // NOI18N
        jlbHugeVictoryGap.setToolTipText(bundle.getString("GapForLargeVictoryTipKey")); // NOI18N
        jPanel1.add(jlbHugeVictoryGap);

        jtffHugeVictoryGap.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.0"))));
        jtffHugeVictoryGap.setToolTipText(bundle.getString("TeamLargeVictoryGapToolTip")); // NOI18N
        jtffHugeVictoryGap.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtffHugeVictoryGapFocusLost(evt);
            }
        });
        jPanel1.add(jtffHugeVictoryGap);

        jcxLargeVictory.setText(bundle.getString("LargeVictoryKey")); // NOI18N
        jcxLargeVictory.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jcxLargeVictory.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jcxLargeVictory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcxLargeVictoryActionPerformed(evt);
            }
        });
        jPanel1.add(jcxLargeVictory);

        jtffLargeVictory.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        jtffLargeVictory.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtffLargeVictoryFocusLost(evt);
            }
        });
        jPanel1.add(jtffLargeVictory);

        jlbLargeVictoryGap.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jlbLargeVictoryGap.setText(bundle.getString("MinimumGapForLargeVictoryKey")); // NOI18N
        jlbLargeVictoryGap.setToolTipText(bundle.getString("GapForLargeVictoryTipKey")); // NOI18N
        jPanel1.add(jlbLargeVictoryGap);

        jtffLargeVictoryGap.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.0"))));
        jtffLargeVictoryGap.setToolTipText(bundle.getString("TeamLargeVictoryGapToolTip")); // NOI18N
        jtffLargeVictoryGap.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtffLargeVictoryGapFocusLost(evt);
            }
        });
        jPanel1.add(jtffLargeVictoryGap);

        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel23.setText(bundle.getString("VictoryKey")); // NOI18N
        jLabel23.setToolTipText(bundle.getString("VictoryNumberOfPointsKey")); // NOI18N
        jPanel1.add(jLabel23);

        jtffVictoryTeam.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        jtffVictoryTeam.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtffVictoryTeamFocusLost(evt);
            }
        });
        jPanel1.add(jtffVictoryTeam);

        jLabel24.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel24.setText(bundle.getString("DrawKey")); // NOI18N
        jLabel24.setToolTipText(bundle.getString("DrawMatchTipKey")); // NOI18N
        jPanel1.add(jLabel24);

        jtffDrawTeam.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        jtffDrawTeam.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtffDrawTeamFocusLost(evt);
            }
        });
        jPanel1.add(jtffDrawTeam);

        jcxLittleLoss.setText(bundle.getString("ShortLossKey")); // NOI18N
        jcxLittleLoss.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jcxLittleLoss.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jcxLittleLoss.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcxLittleLossActionPerformed(evt);
            }
        });
        jPanel1.add(jcxLittleLoss);

        jtffLittleLost.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        jtffLittleLost.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtffLittleLostFocusLost(evt);
            }
        });
        jPanel1.add(jtffLittleLost);

        jlbLittleLossGap.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jlbLittleLossGap.setText(bundle.getString("MaximumGapForShortLossKey")); // NOI18N
        jlbLittleLossGap.setToolTipText(bundle.getString("MaximumGapForShortLossTipKey")); // NOI18N
        jPanel1.add(jlbLittleLossGap);

        jtffLittleLostGap.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.0"))));
        jtffLittleLostGap.setToolTipText(bundle.getString("TeamLittleLossGapTooltip")); // NOI18N
        jtffLittleLostGap.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtffLittleLostGapFocusLost(evt);
            }
        });
        jPanel1.add(jtffLittleLostGap);

        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel25.setText(bundle.getString("LossKey")); // NOI18N
        jLabel25.setToolTipText(bundle.getString("LossTipKey")); // NOI18N
        jPanel1.add(jLabel25);

        jtffLostTeam.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        jtffLostTeam.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtffLostTeamFocusLost(evt);
            }
        });
        jPanel1.add(jtffLostTeam);

        jcxBigLoss.setText(bundle.getString("BigLossKey")); // NOI18N
        jcxBigLoss.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jcxBigLoss.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jcxBigLoss.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcxBigLossActionPerformed(evt);
            }
        });
        jPanel1.add(jcxBigLoss);

        jtffHugeLostTeam.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        jtffHugeLostTeam.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtffHugeLostTeamFocusLost(evt);
            }
        });
        jPanel1.add(jtffHugeLostTeam);

        jlbBigLossGap.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jlbBigLossGap.setText(bundle.getString("MinimumGapForLossKey")); // NOI18N
        jlbBigLossGap.setToolTipText(bundle.getString("MaximumGapForShortLossTipKey")); // NOI18N
        jPanel1.add(jlbBigLossGap);

        jtffBigLostGap.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.0"))));
        jtffBigLostGap.setToolTipText(bundle.getString("TeamLossGapTooltip")); // NOI18N
        jtffBigLostGap.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtffBigLostGapFocusLost(evt);
            }
        });
        jPanel1.add(jtffBigLostGap);

        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel26.setText(tourma.languages.Translate.translate("RankingCriteria")+" 1:");
        jLabel26.setToolTipText("null");
        jPanel1.add(jLabel26);

        jcbRank1Team.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Aucun", "Points", "Points adversaires", "Touchdowns", "Sorties", "Aggressions", "Différence de touchdowns", "Différence de sorties", "Différence d'aggression", "Victoire-Nul-Défaite" }));
        jcbRank1Team.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbRank1TeamActionPerformed(evt);
            }
        });
        jPanel1.add(jcbRank1Team);

        jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel27.setText(tourma.languages.Translate.translate("RankingCriteria")+" 2:");
        jLabel27.setToolTipText("null");
        jPanel1.add(jLabel27);

        jcbRank2Team.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Aucun", "Points", "Points adversaires", "Touchdowns", "Sorties", "Aggressions", "Différence de touchdowns", "Différence de sorties", "Différence d'aggression", "Victoire-Nul-Défaite" }));
        jcbRank2Team.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbRank2TeamActionPerformed(evt);
            }
        });
        jPanel1.add(jcbRank2Team);

        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel28.setText(tourma.languages.Translate.translate("RankingCriteria")+" 3:");
        jLabel28.setToolTipText("null");
        jPanel1.add(jLabel28);

        jcbRank3Team.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Aucun", "Points", "Points adversaires", "Touchdowns", "Sorties", "Aggressions", "Différence de touchdowns", "Différence de sorties", "Différence d'aggression", "Victoire-Nul-Défaite" }));
        jcbRank3Team.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbRank3TeamActionPerformed(evt);
            }
        });
        jPanel1.add(jcbRank3Team);

        jLabel29.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel29.setText(tourma.languages.Translate.translate("RankingCriteria")+" 4:");
        jLabel29.setToolTipText("null");
        jPanel1.add(jLabel29);

        jcbRank4Team.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Aucun", "Points", "Points adversaires", "Touchdowns", "Sorties", "Aggressions", "Différence de touchdowns", "Différence de sorties", "Différence d'aggression", "Victoire-Nul-Défaite" }));
        jcbRank4Team.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbRank4TeamActionPerformed(evt);
            }
        });
        jPanel1.add(jcbRank4Team);

        jLabel30.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel30.setText(tourma.languages.Translate.translate("RankingCriteria")+" 5:");
        jLabel30.setToolTipText("null");
        jPanel1.add(jLabel30);

        jcbRank5Team.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Aucun", "Points", "Points adversaires", "Touchdowns", "Sorties", "Aggressions", "Différence de touchdowns", "Différence de sorties", "Différence d'aggression", "Victoire-Nul-Défaite" }));
        jcbRank5Team.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbRank5TeamActionPerformed(evt);
            }
        });
        jPanel1.add(jcbRank5Team);

        jlbVictoryPoints.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jlbVictoryPoints.setText(bundle.getString("TeamVictoryBonus")); // NOI18N
        jlbVictoryPoints.setToolTipText("null");
        jPanel1.add(jlbVictoryPoints);

        jtffTeamVictoryBonus.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        jtffTeamVictoryBonus.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtffTeamVictoryBonusFocusLost(evt);
            }
        });
        jPanel1.add(jtffTeamVictoryBonus);

        jlbVictoryPoints1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jlbVictoryPoints1.setText(bundle.getString("TeamDrawBonus")); // NOI18N
        jlbVictoryPoints1.setToolTipText("null");
        jPanel1.add(jlbVictoryPoints1);

        jtffTeamDrawBonus.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        jtffTeamDrawBonus.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtffTeamDrawBonusFocusLost(evt);
            }
        });
        jPanel1.add(jtffTeamDrawBonus);

        jcxBestResult.setText(bundle.getString("KeepBestResults")); // NOI18N
        jcxBestResult.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jcxBestResult.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jcxBestResult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcxBestResultActionPerformed(evt);
            }
        });
        jPanel1.add(jcxBestResult);

        jspBestResults.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jspBestResultsStateChanged(evt);
            }
        });
        jPanel1.add(jspBestResults);

        jcxExceptBestAndWorst.setText(bundle.getString("ExceptBestAndWorst")); // NOI18N
        jcxExceptBestAndWorst.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jcxExceptBestAndWorst.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jcxExceptBestAndWorst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcxExceptBestAndWorstActionPerformed(evt);
            }
        });
        jPanel1.add(jcxExceptBestAndWorst);

        jcxForAnnexRankingToo.setText(bundle.getString("ExceptBestAndWorstAnnex")); // NOI18N
        jcxForAnnexRankingToo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcxForAnnexRankingTooActionPerformed(evt);
            }
        });
        jPanel1.add(jcxForAnnexRankingToo);

        add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("Pairing"))); // NOI18N
        jPanel2.setLayout(new java.awt.GridLayout(1, 2));

        jcxTeamBalance.setText(bundle.getString("TeamNumberBalance")); // NOI18N
        jcxTeamBalance.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jcxTeamBalance.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jcxTeamBalance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcxTeamBalanceActionPerformed(evt);
            }
        });
        jPanel2.add(jcxTeamBalance);

        jcxIndividualBalance.setText(bundle.getString("IndividualBalance")); // NOI18N
        jcxIndividualBalance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcxIndividualBalanceActionPerformed(evt);
            }
        });
        jPanel2.add(jcxIndividualBalance);

        add(jPanel2, java.awt.BorderLayout.NORTH);
    }// </editor-fold>//GEN-END:initComponents
    @SuppressWarnings({"PMD.UnusedFormalParameter", "PMD.MethodArgumentCouldBeFinal"})
    private void jrbTeamVictoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbTeamVictoryActionPerformed
        mTournament.getParams().setTeamVictoryOnly(jrbTeamVictory.isSelected());
        update();
        mTournament.recomputeAll();
    }//GEN-LAST:event_jrbTeamVictoryActionPerformed
    @SuppressWarnings({"PMD.UnusedFormalParameter", "PMD.MethodArgumentCouldBeFinal"})
    private void jrbCoachPointsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbCoachPointsActionPerformed
        mTournament.getParams().setTeamVictoryOnly(!jrbCoachPoints.isSelected());
        update();
        mTournament.recomputeAll();
    }//GEN-LAST:event_jrbCoachPointsActionPerformed
    @SuppressWarnings({"PMD.UnusedFormalParameter", "PMD.MethodArgumentCouldBeFinal"})
    private void jtffVictoryTeamFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtffVictoryTeamFocusLost
        try {
            jtffVictoryTeam.commitEdit();
            final int points = ((Number) jtffVictoryTeam.getValue()).intValue();
            mTournament.getParams().setPointsTeamVictory(points);
            mTournament.recomputeAll();
        } catch (ParseException e) {
            jtffVictoryTeam.setValue(jtffVictoryTeam.getValue());
        }
        update();
    }//GEN-LAST:event_jtffVictoryTeamFocusLost
    @SuppressWarnings({"PMD.UnusedFormalParameter", "PMD.MethodArgumentCouldBeFinal"})
    private void jtffDrawTeamFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtffDrawTeamFocusLost
        try {
            jtffDrawTeam.commitEdit();
            final int points = ((Number) jtffDrawTeam.getValue()).intValue();
            mTournament.getParams().setPointsTeamDraw(points);
            mTournament.recomputeAll();
        } catch (ParseException e) {
            jtffDrawTeam.setValue(jtffDrawTeam.getValue());
        }
        update();
    }//GEN-LAST:event_jtffDrawTeamFocusLost
    @SuppressWarnings({"PMD.UnusedFormalParameter", "PMD.MethodArgumentCouldBeFinal"})
    private void jtffLostTeamFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtffLostTeamFocusLost
        try {
            jtffLostTeam.commitEdit();
            final int points = ((Number) jtffLostTeam.getValue()).intValue();
            mTournament.getParams().setPointsTeamLost(points);
            mTournament.recomputeAll();
        } catch (ParseException e) {
            jtffLostTeam.setValue(jtffLostTeam.getValue());
        }
        update();
    }//GEN-LAST:event_jtffLostTeamFocusLost
    @SuppressWarnings({"PMD.UnusedFormalParameter", "PMD.MethodArgumentCouldBeFinal"})
    private void jcbRank1TeamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbRank1TeamActionPerformed

        mTournament.getParams().setRankingTeam1(jcbRank1Team.getSelectedIndex());
        update();
        mTournament.recomputeAll();

    }//GEN-LAST:event_jcbRank1TeamActionPerformed
    @SuppressWarnings({"PMD.UnusedFormalParameter", "PMD.MethodArgumentCouldBeFinal"})
    private void jcbRank2TeamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbRank2TeamActionPerformed

        mTournament.getParams().setRankingTeam2(jcbRank2Team.getSelectedIndex());
        update();
        mTournament.recomputeAll();

    }//GEN-LAST:event_jcbRank2TeamActionPerformed
    @SuppressWarnings({"PMD.UnusedFormalParameter", "PMD.MethodArgumentCouldBeFinal"})
    private void jcbRank3TeamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbRank3TeamActionPerformed

        mTournament.getParams().setRankingTeam3(jcbRank3Team.getSelectedIndex());
        update();
        mTournament.recomputeAll();

    }//GEN-LAST:event_jcbRank3TeamActionPerformed
    @SuppressWarnings({"PMD.UnusedFormalParameter", "PMD.MethodArgumentCouldBeFinal"})
    private void jcbRank4TeamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbRank4TeamActionPerformed

        mTournament.getParams().setRankingTeam4(jcbRank4Team.getSelectedIndex());
        update();
        mTournament.recomputeAll();

    }//GEN-LAST:event_jcbRank4TeamActionPerformed
    @SuppressWarnings({"PMD.UnusedFormalParameter", "PMD.MethodArgumentCouldBeFinal"})
    private void jcbRank5TeamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbRank5TeamActionPerformed

        mTournament.getParams().setRankingTeam5(jcbRank5Team.getSelectedIndex());
        update();
        mTournament.recomputeAll();


    }//GEN-LAST:event_jcbRank5TeamActionPerformed
    @SuppressWarnings({"PMD.UnusedFormalParameter", "PMD.MethodArgumentCouldBeFinal"})
    private void jtffTeamVictoryBonusFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtffTeamVictoryBonusFocusLost
        try {
            jtffTeamVictoryBonus.commitEdit();
            final int points = ((Number) jtffTeamVictoryBonus.getValue()).intValue();
            mTournament.getParams().setPointsTeamVictoryBonus(points);
            mTournament.recomputeAll();
        } catch (ParseException e) {
            jtffTeamVictoryBonus.setValue(jtffTeamVictoryBonus.getValue());
        }
        update();
    }//GEN-LAST:event_jtffTeamVictoryBonusFocusLost
    @SuppressWarnings({"PMD.UnusedFormalParameter", "PMD.MethodArgumentCouldBeFinal"})
    private void jtffTeamDrawBonusFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtffTeamDrawBonusFocusLost
        try {
            jtffTeamDrawBonus.commitEdit();
            final int points = ((Number) jtffTeamDrawBonus.getValue()).intValue();
            mTournament.getParams().setPointsTeamDrawBonus(points);
            mTournament.recomputeAll();
        } catch (ParseException e) {
            jtffTeamDrawBonus.setValue(jtffTeamDrawBonus.getValue());
        }
        update();
    }//GEN-LAST:event_jtffTeamDrawBonusFocusLost

    private void jcxTeamBalanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcxTeamBalanceActionPerformed

        if ((mTournament.getParams().isTeamTournament()) && (mTournament.getParams().getTeamPairing() == ETeamPairing.INDIVIDUAL_PAIRING)) {
            mTournament.getParams().setIndivPairingTeamBalanced(jcxTeamBalance.isSelected());
        }
        update();

    }//GEN-LAST:event_jcxTeamBalanceActionPerformed

    private void jcxIndividualBalanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcxIndividualBalanceActionPerformed

        if ((mTournament.getParams().isTeamTournament()) && (mTournament.getParams().getTeamPairing() == ETeamPairing.INDIVIDUAL_PAIRING)) {
            mTournament.getParams().setIndivPairingIndivBalanced(jcxIndividualBalance.isSelected());
        }
        update();

    }//GEN-LAST:event_jcxIndividualBalanceActionPerformed

    private void jcxBestResultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcxBestResultActionPerformed

        mTournament.getParams().setUseBestResultTeam(jcxBestResult.isSelected());
        update();
        mTournament.recomputeAll();

    }//GEN-LAST:event_jcxBestResultActionPerformed

    private void jspBestResultsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jspBestResultsStateChanged

        mTournament.getParams().setBestResultTeam((Integer) jspBestResults.getValue());
        update();
        mTournament.recomputeAll();

    }//GEN-LAST:event_jspBestResultsStateChanged

    private void jcxExceptBestAndWorstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcxExceptBestAndWorstActionPerformed

        mTournament.getParams().setExceptBestAndWorstTeam(jcxExceptBestAndWorst.isSelected());
        update();
        mTournament.recomputeAll();

    }//GEN-LAST:event_jcxExceptBestAndWorstActionPerformed

    private void jcxForAnnexRankingTooActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcxForAnnexRankingTooActionPerformed

        mTournament.getParams().setApplyToAnnexTeam(jcxForAnnexRankingToo.isSelected());
        update();
        mTournament.recomputeAll();

    }//GEN-LAST:event_jcxForAnnexRankingTooActionPerformed

    private void jcxHugeVictoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcxHugeVictoryActionPerformed

        mTournament.getParams().setUseTeamHugeVictory(jcxHugeVictory.isSelected());
        update();
        mTournament.recomputeAll();
    }//GEN-LAST:event_jcxHugeVictoryActionPerformed

    private void jtffLargeVictoryFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtffLargeVictoryFocusLost

        try {
            jtffLargeVictory.commitEdit();
            final int points = ((Number) jtffLargeVictory.getValue()).intValue();
            mTournament.getParams().setPointsTeamLargeVictory(points);
            mTournament.recomputeAll();
        } catch (ParseException e) {
            jtffLargeVictory.setValue(jtffLargeVictory.getValue());
        }

        update();
    }//GEN-LAST:event_jtffLargeVictoryFocusLost

    private void jtffLargeVictoryGapFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtffLargeVictoryGapFocusLost
        try {
            jtffLargeVictoryGap.commitEdit();
            final float points = ((Number) jtffLargeVictoryGap.getValue()).floatValue();
            mTournament.getParams().setGapTeamLargeVictory(points);
            mTournament.recomputeAll();
        } catch (ParseException e) {
            jtffLargeVictoryGap.setValue(jtffLargeVictoryGap.getValue());
        }

        update();
    }//GEN-LAST:event_jtffLargeVictoryGapFocusLost

    private void jcxLittleLossActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcxLittleLossActionPerformed

        mTournament.getParams().setUseTeamLittleLoss(jcxLittleLoss.isSelected());

        update();
        mTournament.recomputeAll();
    }//GEN-LAST:event_jcxLittleLossActionPerformed

    private void jtffLittleLostFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtffLittleLostFocusLost
        try {
            jtffLittleLost.commitEdit();
            final int points = ((Number) jtffLittleLost.getValue()).intValue();
            mTournament.getParams().setPointsTeamLittleLost(points);
            mTournament.recomputeAll();
        } catch (ParseException e) {
            jtffLittleLost.setValue(jtffLittleLost.getValue());
        }
        update();
    }//GEN-LAST:event_jtffLittleLostFocusLost

    private void jtffLittleLostGapFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtffLittleLostGapFocusLost
        try {
            jtffLittleLostGap.commitEdit();
            final float points = ((Number) jtffLittleLostGap.getValue()).floatValue();
            mTournament.getParams().setGapTeamLittleLost(points);
            mTournament.recomputeAll();
        } catch (ParseException e) {
            jtffLittleLostGap.setValue(jtffLittleLostGap.getValue());
        }

        update();
    }//GEN-LAST:event_jtffLittleLostGapFocusLost

    private void jtffBigLostGapFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtffBigLostGapFocusLost
         try {
            jtffBigLostGap.commitEdit();
            final float points = ((Number) jtffBigLostGap.getValue()).floatValue();
            mTournament.getParams().setGapTeamHugeLost(points);
            mTournament.recomputeAll();
        } catch (ParseException e) {
            jtffBigLostGap.setValue(jtffBigLostGap.getValue());
        }

        update();
    }//GEN-LAST:event_jtffBigLostGapFocusLost

    private void jcxBigLossActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcxBigLossActionPerformed
        mTournament.getParams().setUseTeamHugeLoss(jcxBigLoss.isSelected());
        update();
        mTournament.recomputeAll();
    }//GEN-LAST:event_jcxBigLossActionPerformed

    private void jtffHugeLostTeamFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtffHugeLostTeamFocusLost
         try {
            jtffHugeLostTeam.commitEdit();
            final int points = ((Number) jtffHugeLostTeam.getValue()).intValue();
            mTournament.getParams().setPointsTeamHugeLost(points);
            mTournament.recomputeAll();
        } catch (ParseException e) {
            jtffHugeLostTeam.setValue(jtffHugeLostTeam.getValue());
        }
        update();
    }//GEN-LAST:event_jtffHugeLostTeamFocusLost

    private void jcxLargeVictoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcxLargeVictoryActionPerformed
        
        mTournament.getParams().setUseTeamLargeVictory(jcxLargeVictory.isSelected());
        update();
        mTournament.recomputeAll();

    }//GEN-LAST:event_jcxLargeVictoryActionPerformed

    private void jtffHugeVictoryFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtffHugeVictoryFocusLost
                try {
            jtffHugeVictory.commitEdit();
            final int points = ((Number) jtffHugeVictory.getValue()).intValue();
            mTournament.getParams().setPointsTeamHugeVictory(points);
            mTournament.recomputeAll();
        } catch (ParseException e) {
            jtffHugeVictory.setValue(jtffHugeVictory.getValue());
        }

    }//GEN-LAST:event_jtffHugeVictoryFocusLost

    private void jtffHugeVictoryGapFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtffHugeVictoryGapFocusLost
        try {
            jtffHugeVictoryGap.commitEdit();
            final float points = ((Number) jtffHugeVictoryGap.getValue()).floatValue();
            mTournament.getParams().setGapTeamHugeVictory(points);
            mTournament.recomputeAll();
        } catch (ParseException e) {
            jtffHugeVictoryGap.setValue(jtffHugeVictoryGap.getValue());
        }

        update();

    }//GEN-LAST:event_jtffHugeVictoryGapFocusLost

    private final static String CS_None = "None";
    private final static String CS_Points = "Points";
    private final static String CS_OpponentPoints = "POINTS ADVERSAIRES";
    private final static String CS_ACCR_VictoryDrawLost = "V/N/D";
    private final static String CS_ELO = "ELO";
    private final static String CS_OpponentsElo = "OpponentsElo";
    private final static String CS_MatchCount = "MatchCount";
    private final static String CS_OpponentsPointsExceptOwnMatch = "POINTS ADVERSAIRES EXCEPT OWN MATCH";
    private final static String CS_TablesPoints = "TablesPoints";
    private final static String CS_PointsWithoutBonus = "Points sans bonus";
    private final static String CS_BonusPoints = "Bonus Points";
    private final static String CS_Player = "JOUEUR";
    private final static String CS_Opponent = "ADVERSAIRE";
    private final static String CS_Difference = "DIFFÉRENCE";

    /**
     * Update panel
     */
    public void update() {

        final boolean teamMatches = mTournament.getParams().isTeamTournament() && (mTournament.getParams().getTeamPairing() == ETeamPairing.TEAM_PAIRING);
        final boolean IndivMatches = mTournament.getParams().isTeamTournament() && (mTournament.getParams().getTeamPairing() == ETeamPairing.INDIVIDUAL_PAIRING);

        jtffDrawTeam.setValue(mTournament.getParams().getPointsTeamDraw());
        jtffLostTeam.setValue(mTournament.getParams().getPointsTeamLost());
        
        jtffLittleLost.setValue(mTournament.getParams().getPointsTeamLittleLost());
        jtffLittleLostGap.setValue(mTournament.getParams().getGapTeamLittleLost());
        jcxLittleLoss.setSelected(mTournament.getParams().isUseTeamLittleLoss());
        
        jtffHugeLostTeam.setValue(mTournament.getParams().getPointsTeamHugeLost());
        jtffBigLostGap.setValue(mTournament.getParams().getGapTeamHugeLost());
        jcxBigLoss.setSelected(mTournament.getParams().isUseTeamHugeLoss());
        
        jtffVictoryTeam.setValue(mTournament.getParams().getPointsTeamVictory());
        
         jtffLargeVictory.setValue(mTournament.getParams().getPointsTeamLargeVictory());
              jtffHugeVictory.setValue(mTournament.getParams().getPointsTeamHugeVictory());
        jtffLargeVictoryGap.setValue(mTournament.getParams().getGapTeamLargeVictory());
        jtffHugeVictoryGap.setValue(mTournament.getParams().getGapTeamHugeVictory());
        jcxHugeVictory.setSelected(mTournament.getParams().isUseTeamHugeVictory());
        jcxLargeVictory.setSelected(mTournament.getParams().isUseTeamLargeVictory());

        jrbCoachPoints.setEnabled(teamMatches);
        jrbTeamVictory.setEnabled(teamMatches);

        jtffTeamVictoryBonus.setEnabled(teamMatches && (!mTournament.getParams().isTeamVictoryOnly()));

        jtffTeamDrawBonus.setEnabled(teamMatches && (!mTournament.getParams().isTeamVictoryOnly()));
        jlbVictoryPoints.setEnabled(teamMatches && (!mTournament.getParams().isTeamVictoryOnly()));        
        jlbVictoryPoints1.setEnabled(teamMatches && (!mTournament.getParams().isTeamVictoryOnly()));
        
        jtffDrawTeam.setEnabled(teamMatches && (mTournament.getParams().isTeamVictoryOnly()));
        jtffLostTeam.setEnabled(teamMatches && (mTournament.getParams().isTeamVictoryOnly()));
        jtffLittleLost.setEnabled(teamMatches && mTournament.getParams().isTeamVictoryOnly() && mTournament.getParams().isUseTeamLittleLoss());
        jtffHugeLostTeam.setEnabled(teamMatches && mTournament.getParams().isTeamVictoryOnly() && mTournament.getParams().isUseTeamHugeLoss());

        jlbLargeVictoryGap.setEnabled(teamMatches && mTournament.getParams().isTeamVictoryOnly()&&mTournament.getParams().isUseTeamLargeVictory());
        jlbHugeVictoryGap.setEnabled(teamMatches && mTournament.getParams().isTeamVictoryOnly()&&mTournament.getParams().isUseTeamHugeVictory());

        jlbLittleLossGap.setEnabled(teamMatches && mTournament.getParams().isTeamVictoryOnly() && mTournament.getParams().isUseTeamLittleLoss());
        jlbBigLossGap.setEnabled(teamMatches && mTournament.getParams().isTeamVictoryOnly() && mTournament.getParams().isUseTeamHugeLoss());

        jtffLargeVictory.setEnabled(teamMatches && mTournament.getParams().isTeamVictoryOnly()&&mTournament.getParams().isUseTeamLargeVictory());
        jtffLargeVictoryGap.setEnabled(teamMatches && mTournament.getParams().isTeamVictoryOnly()&&mTournament.getParams().isUseTeamLargeVictory());
        
        jtffHugeVictory.setEnabled(teamMatches && mTournament.getParams().isTeamVictoryOnly()&&mTournament.getParams().isUseTeamHugeVictory());
        jtffHugeVictoryGap.setEnabled(teamMatches && mTournament.getParams().isTeamVictoryOnly()&&mTournament.getParams().isUseTeamHugeVictory());
        
        jcxHugeVictory.setEnabled(teamMatches && mTournament.getParams().isTeamVictoryOnly());
        jcxLargeVictory.setEnabled(teamMatches && mTournament.getParams().isTeamVictoryOnly());
        jcxLittleLoss.setEnabled(teamMatches && (mTournament.getParams().isTeamVictoryOnly()));
        jcxBigLoss.setEnabled(teamMatches && (mTournament.getParams().isTeamVictoryOnly()));
        
        jtffLittleLostGap.setEnabled(teamMatches && mTournament.getParams().isTeamVictoryOnly() && mTournament.getParams().isUseTeamLittleLoss());
        jtffBigLostGap.setEnabled(teamMatches && mTournament.getParams().isTeamVictoryOnly() && mTournament.getParams().isUseTeamHugeLoss());
        
        jtffVictoryTeam.setEnabled(teamMatches && (mTournament.getParams().isTeamVictoryOnly()));
        jtffDrawTeam.setEnabled(teamMatches && (mTournament.getParams().isTeamVictoryOnly()));

        jcxIndividualBalance.setEnabled(IndivMatches);
        jcxTeamBalance.setEnabled(IndivMatches);

        jspBestResults.setEnabled(mTournament.getParams().isUseBestResultTeam());
        jspBestResults.setValue(mTournament.getParams().getBestResultTeam());

        jcxBestResult.setSelected(mTournament.getParams().isUseBestResultTeam());
        jcxExceptBestAndWorst.setEnabled(!mTournament.getParams().isUseBestResultTeam());

        jcxExceptBestAndWorst.setSelected(mTournament.getParams().isExceptBestAndWorstTeam());
        jcxForAnnexRankingToo.setSelected(mTournament.getParams().isApplyToAnnexTeam());

        jLabel23.setEnabled(teamMatches && (mTournament.getParams().isTeamVictoryOnly()));
        jLabel24.setEnabled(teamMatches && (mTournament.getParams().isTeamVictoryOnly()));
        jLabel25.setEnabled(teamMatches && (mTournament.getParams().isTeamVictoryOnly()));
        jLabel26.setEnabled(teamMatches && (mTournament.getParams().isTeamVictoryOnly()));
        jLabel27.setEnabled(teamMatches && (mTournament.getParams().isTeamVictoryOnly()));
        jLabel28.setEnabled(teamMatches && (mTournament.getParams().isTeamVictoryOnly()));
        jLabel29.setEnabled(teamMatches && (mTournament.getParams().isTeamVictoryOnly()));
        jLabel30.setEnabled(teamMatches && (mTournament.getParams().isTeamVictoryOnly()));

        jrbCoachPoints.setSelected(!mTournament.getParams().isTeamVictoryOnly());
        jrbTeamVictory.setSelected(mTournament.getParams().isTeamVictoryOnly());
        jtffTeamVictoryBonus.setValue(mTournament.getParams().getPointsTeamVictoryBonus());
        jtffTeamDrawBonus.setValue(mTournament.getParams().getPointsTeamDrawBonus());

        final ArrayList<String> rankChoices = new ArrayList<>();
        rankChoices.add(Translate.translate(CS_None));
        rankChoices.add(Translate.translate(CS_Points));
        rankChoices.add(Translate.translate(CS_OpponentPoints));
        rankChoices.add(Translate.translate(CS_ACCR_VictoryDrawLost));
        rankChoices.add(Translate.translate(CS_ELO));
        rankChoices.add(Translate.translate(CS_OpponentsElo));
        rankChoices.add(Translate.translate(CS_MatchCount));
        rankChoices.add(Translate.translate(CS_OpponentsPointsExceptOwnMatch));
        rankChoices.add(Translate.translate(CS_TablesPoints));
        rankChoices.add(Translate.translate(CS_PointsWithoutBonus));
        rankChoices.add(Translate.translate(CS_BonusPoints));
        for (int i = 0; i < Tournament.getTournament().getParams().getCriteriaCount(); i++) {
            final Criteria criteria = Tournament.getTournament().getParams().getCriteria(i);
            rankChoices.add(criteria.getName() + " " + Translate.translate(CS_Player));
            rankChoices.add(criteria.getName() + " " + Translate.translate(CS_Opponent));
            rankChoices.add(criteria.getName() + " " + Translate.translate(CS_Difference));
        }

        jcxIndividualBalance.setSelected(mTournament.getParams().isIndivPairingIndivBalanced());
        jcxTeamBalance.setSelected(mTournament.getParams().isIndivPairingTeamBalanced());

        jcbRank1Team.setModel(new DefaultComboBoxModel(rankChoices.toArray()));
        jcbRank2Team.setModel(new DefaultComboBoxModel(rankChoices.toArray()));
        jcbRank3Team.setModel(new DefaultComboBoxModel(rankChoices.toArray()));
        jcbRank4Team.setModel(new DefaultComboBoxModel(rankChoices.toArray()));
        jcbRank5Team.setModel(new DefaultComboBoxModel(rankChoices.toArray()));

        jcbRank1Team.setEnabled(teamMatches && (mTournament.getParams().isTeamVictoryOnly()));
        jcbRank2Team.setEnabled(teamMatches && (mTournament.getParams().isTeamVictoryOnly()));
        jcbRank3Team.setEnabled(teamMatches && (mTournament.getParams().isTeamVictoryOnly()));
        jcbRank4Team.setEnabled(teamMatches && (mTournament.getParams().isTeamVictoryOnly()));
        jcbRank5Team.setEnabled(teamMatches && (mTournament.getParams().isTeamVictoryOnly()));

        jcbRank1Team.removeActionListener(jcbRank1Team.getActionListeners()[0]);
        jcbRank2Team.removeActionListener(jcbRank2Team.getActionListeners()[0]);
        jcbRank3Team.removeActionListener(jcbRank3Team.getActionListeners()[0]);
        jcbRank4Team.removeActionListener(jcbRank4Team.getActionListeners()[0]);
        jcbRank5Team.removeActionListener(jcbRank5Team.getActionListeners()[0]);

        jcbRank1Team.setSelectedIndex(mTournament.getParams().getRankingTeam1());
        jcbRank2Team.setSelectedIndex(mTournament.getParams().gemRankingTeam2());
        jcbRank3Team.setSelectedIndex(mTournament.getParams().getRankingTeam3());
        jcbRank4Team.setSelectedIndex(mTournament.getParams().getRankingTeam4());
        jcbRank5Team.setSelectedIndex(mTournament.getParams().getRankingTeam5());

        jcbRank1Team.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                jcbRank1TeamActionPerformed(evt);
            }
        });

        jcbRank2Team.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                jcbRank2TeamActionPerformed(evt);
            }
        });

        jcbRank3Team.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                jcbRank3TeamActionPerformed(evt);
            }
        });

        jcbRank4Team.addActionListener(
                new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                jcbRank4TeamActionPerformed(evt);
            }
        });

        jcbRank5Team.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                jcbRank5TeamActionPerformed(evt);
            }
        });

        if (Tournament.getTournament().isClient()) {
            jcbRank1Team.setEnabled(false);
            jcbRank2Team.setEnabled(false);
            jcbRank3Team.setEnabled(false);
            jcbRank4Team.setEnabled(false);
            jcbRank5Team.setEnabled(false);
            jcxBestResult.setEnabled(false);
            jcxExceptBestAndWorst.setEnabled(false);
            jcxForAnnexRankingToo.setEnabled(false);
            jspBestResults.setEnabled(false);
            
            jcxIndividualBalance.setEnabled(false);
            jcxTeamBalance.setEnabled(false);
            jrbCoachPoints.setEnabled(false);
            jrbTeamVictory.setEnabled(false);
            jspBestResults.setEnabled(false);
            jtffDrawTeam.setEnabled(false);
            jtffLostTeam.setEnabled(false);
            jtffTeamDrawBonus.setEnabled(false);
            jtffTeamVictoryBonus.setEnabled(false);
            jtffVictoryTeam.setEnabled(false);
        }
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JComboBox jcbRank1Team;
    private javax.swing.JComboBox jcbRank2Team;
    private javax.swing.JComboBox jcbRank3Team;
    private javax.swing.JComboBox jcbRank4Team;
    private javax.swing.JComboBox jcbRank5Team;
    private javax.swing.JCheckBox jcxBestResult;
    private javax.swing.JCheckBox jcxBigLoss;
    private javax.swing.JCheckBox jcxExceptBestAndWorst;
    private javax.swing.JCheckBox jcxForAnnexRankingToo;
    private javax.swing.JCheckBox jcxHugeVictory;
    private javax.swing.JCheckBox jcxIndividualBalance;
    private javax.swing.JCheckBox jcxLargeVictory;
    private javax.swing.JCheckBox jcxLittleLoss;
    private javax.swing.JCheckBox jcxTeamBalance;
    private javax.swing.JLabel jlbBigLossGap;
    private javax.swing.JLabel jlbHugeVictoryGap;
    private javax.swing.JLabel jlbLargeVictoryGap;
    private javax.swing.JLabel jlbLittleLossGap;
    private javax.swing.JLabel jlbVictoryPoints;
    private javax.swing.JLabel jlbVictoryPoints1;
    private javax.swing.JRadioButton jrbCoachPoints;
    private javax.swing.JRadioButton jrbTeamVictory;
    private javax.swing.JSpinner jspBestResults;
    private javax.swing.JFormattedTextField jtffBigLostGap;
    private javax.swing.JFormattedTextField jtffDrawTeam;
    private javax.swing.JFormattedTextField jtffHugeLostTeam;
    private javax.swing.JFormattedTextField jtffHugeVictory;
    private javax.swing.JFormattedTextField jtffHugeVictoryGap;
    private javax.swing.JFormattedTextField jtffLargeVictory;
    private javax.swing.JFormattedTextField jtffLargeVictoryGap;
    private javax.swing.JFormattedTextField jtffLittleLost;
    private javax.swing.JFormattedTextField jtffLittleLostGap;
    private javax.swing.JFormattedTextField jtffLostTeam;
    private javax.swing.JFormattedTextField jtffTeamDrawBonus;
    private javax.swing.JFormattedTextField jtffTeamVictoryBonus;
    private javax.swing.JFormattedTextField jtffVictoryTeam;
    // End of variables declaration//GEN-END:variables

}
