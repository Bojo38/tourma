
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * JdgCoach.java
 *
 * Created on 10 mai 2010, 19:37:53
 */
package tourma.views;

import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.util.logging.Logger;
import tourma.data.Round;

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.lang.Thread.UncaughtExceptionHandler;

import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamDiscoveryEvent;
import com.github.sarxos.webcam.WebcamDiscoveryListener;
import com.github.sarxos.webcam.WebcamEvent;
import com.github.sarxos.webcam.WebcamListener;
import com.github.sarxos.webcam.WebcamPanel;
import com.github.sarxos.webcam.WebcamPicker;
import com.github.sarxos.webcam.WebcamResolution;
import com.sun.jna.Platform;
import java.awt.BorderLayout;
import java.awt.image.BufferedImage;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Date;
import java.util.Enumeration;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import java.util.zip.ZipFile;
import java.util.zip.ZipInputStream;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import net.sourceforge.tess4j.ITessAPI;
import net.sourceforge.tess4j.ITesseract;
import net.sourceforge.tess4j.Tesseract;
import net.sourceforge.tess4j.TesseractException;
import net.sourceforge.tess4j.util.LoadLibs;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOUtils;
import tourma.data.Tournament;

/**
 *
 * @author Frederic Berger
 */
public final class JdgOpticalCapture extends javax.swing.JDialog implements WebcamListener, WindowListener, UncaughtExceptionHandler, ItemListener, WebcamDiscoveryListener {

    private Round mRound;

    private Webcam webcam = null;
    private WebcamPanel panel = null;
    private WebcamPicker picker = null;
    private Thread tWebcam;

    /**
     * Creates new form jdgCoach
     *
     * @param parent
     * @param modal
     */
    @SuppressWarnings("unchecked")
    public JdgOpticalCapture(final java.awt.Frame parent, final boolean modal, Round round) {
        super(parent, modal);
        initComponents();
        mRound = round;
        Webcam.addDiscoveryListener(this);

        setTitle("Java Webcam Capture POC");

        addWindowListener(this);

        picker = new WebcamPicker();
        picker.addItemListener(this);

        webcam = picker.getSelectedWebcam();

        if (webcam == null) {
            JOptionPane.showMessageDialog(this, "No webcam found", "Optical Capture", JOptionPane.ERROR_MESSAGE);
            setVisible(false);
        }

        webcam.setViewSize(WebcamResolution.VGA.getSize());
        webcam.addWebcamListener(this);

        panel = new WebcamPanel(webcam, false);
        panel.setFPSDisplayed(true);

        jpnCam.add(picker, BorderLayout.NORTH);
        jpnCam.add(panel, BorderLayout.CENTER);

        pack();
//		setVisible(true);

        tWebcam = new Thread() {

            @Override
            public void run() {
                panel.start();
            }
        };
        tWebcam.setName("example-starter");
        tWebcam.setDaemon(true);
        tWebcam.setUncaughtExceptionHandler(this);
        tWebcam.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings({"unchecked", "PMD"})
    @SuppressFBWarnings({"SIC", "Generated Code"})
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jbtOK = new javax.swing.JButton();
        jpnCam = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jpnSnap = new javax.swing.JButton();
        jpnDetectedMatch = new javax.swing.JPanel();
        jbtNext = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jbtOK.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tourma/images/Select.png"))); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("tourma/languages/language"); // NOI18N
        jbtOK.setText(bundle.getString("OK")); // NOI18N
        jbtOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtOKActionPerformed(evt);
            }
        });
        jPanel2.add(jbtOK);

        getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);

        jpnCam.setLayout(new java.awt.BorderLayout());
        getContentPane().add(jpnCam, java.awt.BorderLayout.CENTER);

        jPanel6.setLayout(new java.awt.BorderLayout());

        jpnSnap.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tourma/images/Camera.png"))); // NOI18N
        jpnSnap.setText(bundle.getString("Capture")); // NOI18N
        jpnSnap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jpnSnapActionPerformed(evt);
            }
        });
        jPanel6.add(jpnSnap, java.awt.BorderLayout.NORTH);
        jPanel6.add(jpnDetectedMatch, java.awt.BorderLayout.CENTER);

        jbtNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tourma/images/Forward.png"))); // NOI18N
        jbtNext.setText(bundle.getString("OK")); // NOI18N
        jbtNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtNextActionPerformed(evt);
            }
        });
        jPanel6.add(jbtNext, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(jPanel6, java.awt.BorderLayout.NORTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @SuppressWarnings({"PMD.UnusedFormalParameter", "PMD.MethodArgumentCouldBeFinal"})
    private void jbtOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtOKActionPerformed
        if (tWebcam != null) {
            panel.stop();
        }
        this.setVisible(false);
    }//GEN-LAST:event_jbtOKActionPerformed

    private void jbtNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtNextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jbtNextActionPerformed

    private void jpnSnapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jpnSnapActionPerformed
        if (webcam != null) {
            BufferedImage image = webcam.getImage();
            // save image to PNG file
            try {
                final StringBuffer filename = new StringBuffer(Tournament.getTournament().getParams().getTournamentName());
                filename.append(".");
                final Date date = new Date();
                filename.append(".");
                filename.append(Long.toString(date.getTime()));
                filename.append(".png");
                File file = new File(filename.toString());

                ImageIO.write(image, "PNG", file);

                file = new File("C:\\Perso\\tourma\\test\\labels\\indiv\\indiv-01.png");
                fillDetectedMatch(file);

            } catch (IOException ioe) {
                JOptionPane.showMessageDialog(this, ioe.getLocalizedMessage(), "Exception", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jpnSnapActionPerformed

    private static final int BUFFER_SIZE = 4096;

    private static void extractFile(ZipInputStream in, File outdir, String name) throws IOException {
        byte[] buffer = new byte[BUFFER_SIZE];
        BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(new File(outdir, name)));
        int count = -1;
        while ((count = in.read(buffer)) != -1) {
            out.write(buffer, 0, count);
        }
        out.close();
    }

    private static void mkdirs(File outdir, String path) {
        File d = new File(outdir, path);
        if (!d.exists()) {
            d.mkdirs();
        }
    }

    private static String dirpart(String name) {
        int s = name.lastIndexOf(File.separatorChar);
        return s == -1 ? null : name.substring(0, s);
    }

    private static final String JNA_LIBRARY_PATH = "jna.library.path";
    public static final String TESS4J_TEMP_DIR = new File(System.getProperty("java.io.tmpdir"), "tess4j").getPath();

    private String checkTessResources() {
        // First, native libraries     	
        String tmp = System.getProperty("java.io.tmpdir");
        File outdir = new File(tmp);

        File native_dir;
        String targetPath = System.getProperty(JNA_LIBRARY_PATH);
        if (targetPath != null) {
            native_dir = new File(targetPath);
            if (!native_dir.exists()) {
                targetPath = System.getProperty(TESS4J_TEMP_DIR);
                native_dir = new File(targetPath);
            }
        } else {
            targetPath = System.getProperty("java.io.tmpdir")+"tess4j";
            native_dir = new File(targetPath);
        }

        if (!native_dir.exists()) {
            mkdirs(outdir, "tess4j");
        }

        // Check if DLL exist
        String libName = LoadLibs.getTesseractLibName();
        if (Platform.isWindows()) {
            libName = libName + ".dll";
        } else {
            libName = libName + ".so";
        }

        try {
            File libTess = new File(native_dir + libName);
            InputStream in;
            if (!libTess.exists()) {
                if (Platform.isWindows()) {
                    String model = System.getProperty("sun.arch.data.model");
                    if (model.equals("64")) {
                        in = this.getClass().getResourceAsStream("/tourma/resources/win32-x86-64/libtesseract304.dll");
                    } else {
                        in = this.getClass().getResourceAsStream("/tourma/resources/win32-x86/libtesseract304.dll");
                    }
                    OutputStream out = FileUtils.openOutputStream(libTess);
                    IOUtils.copy(in, out);
                    in.close();
                    out.close();
                } else {
                    JOptionPane.showMessageDialog(this, "Unsupported Platform", "Exception", JOptionPane.ERROR_MESSAGE);
                }

            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, e.getLocalizedMessage(), "Exception", JOptionPane.ERROR_MESSAGE);
        }

        // Check that the libs are in path
        // Tesseract Data path
        String tmpTess = tmp + "tessdata";
        File f = new File(tmpTess);
        // test if directory exists
        if (!f.exists()) {
            // copy zip file
            try {
                InputStream in = this.getClass().getResourceAsStream("/tourma/resources/tessdata.zip");
                File fileOut = new File(tmp + "/tessdata.zip");
                OutputStream out = FileUtils.openOutputStream(fileOut);
                IOUtils.copy(in, out);
                in.close();
                out.close();
                //System.load(fileOut.toString());//loading goes here

                //extract it
                try {
                    ZipInputStream zin = new ZipInputStream(new FileInputStream(tmp + "/tessdata.zip"));
                    ZipEntry entry;
                    String name, dir;
                    while ((entry = zin.getNextEntry()) != null) {
                        name = entry.getName();
                        if (entry.isDirectory()) {
                            mkdirs(outdir, name);
                            continue;
                        }
                        /* this part is necessary because file entry can come before
         * directory entry where is file located
         * i.e.:
         *   /foo/foo.txt
         *   /foo/
                         */
                        dir = dirpart(name);
                        if (dir != null) {
                            mkdirs(outdir, dir);
                        }

                        extractFile(zin, outdir, name);
                    }
                    zin.close();
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(this, e.getLocalizedMessage(), "Exception", JOptionPane.ERROR_MESSAGE);
                    tmpTess = "";
                }

            } catch (Exception e) {
                //handle
                JOptionPane.showMessageDialog(this, e.getLocalizedMessage(), "Exception", JOptionPane.ERROR_MESSAGE);
                tmpTess = "";
            }
        }
        return tmpTess;
    }

    private String getDetectedText(File imageFile, String dataPath) {
        String ocrResult = "";

        ITesseract instance = new Tesseract();  // JNA Interface Mapping
        // ITesseract instance = new Tesseract1(); // JNA Direct Mapping

        //   ArrayList<String> configs=new ArrayList<String>();
        //  configs.add("hocr");
        // configs.add("api_config");
        //configs.add("digits");
        try {
            instance.setLanguage("eng");
            instance.setDatapath(dataPath);
            //instance.setDatapath("C:/Perso/Tess4J-3.2.1-src/Tess4J/tessdata");
            instance.setPageSegMode(ITessAPI.TessPageSegMode.PSM_SPARSE_TEXT);
            //   instance.setConfigs(configs);
            //instance.setOcrEngineMode(ITessAPI.TessOcrEngineMode.OEM_TESSERACT_CUBE_COMBINED);            
            String result = instance.doOCR(imageFile);
            System.out.println(result);
        } catch (TesseractException e) {
            System.err.println(e.getMessage());
        }

        return ocrResult;
    }

    private void fillDetectedMatch(File ImageFile) {
        String dataPath = checkTessResources();
        String text = getDetectedText(ImageFile, dataPath);
        //
        //Parse text
        //Update Match Panel
        // Validate
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JButton jbtNext;
    private javax.swing.JButton jbtOK;
    private javax.swing.JPanel jpnCam;
    private javax.swing.JPanel jpnDetectedMatch;
    private javax.swing.JButton jpnSnap;
    // End of variables declaration//GEN-END:variables
    private static final Logger LOG = Logger.getLogger(JdgOpticalCapture.class.getName());

    private void writeObject(java.io.ObjectOutputStream stream) throws java.io.IOException {
        throw new java.io.NotSerializableException(getClass().getName());
    }

    private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, ClassNotFoundException {
        throw new java.io.NotSerializableException(getClass().getName());
    }

    @Override
    public void webcamOpen(WebcamEvent we) {
        //System.out.println("webcam open");
    }

    @Override
    public void webcamClosed(WebcamEvent we) {
        //System.out.println("webcam closed");
    }

    @Override
    public void webcamDisposed(WebcamEvent we) {
        //System.out.println("webcam disposed");
    }

    @Override
    public void webcamImageObtained(WebcamEvent we) {
        // do nothing
    }

    @Override
    public void windowActivated(WindowEvent e) {
    }

    @Override
    public void windowClosed(WindowEvent e) {
        panel.stop();
        webcam.close();
    }

    @Override
    public void windowClosing(WindowEvent e) {
    }

    @Override
    public void windowOpened(WindowEvent e) {
    }

    @Override
    public void windowDeactivated(WindowEvent e) {
    }

    @Override
    public void windowDeiconified(WindowEvent e) {
        //System.out.println("webcam viewer resumed");
        panel.resume();
    }

    @Override
    public void windowIconified(WindowEvent e) {
        //System.out.println("webcam viewer paused");
        panel.pause();
    }

    @Override
    public void uncaughtException(Thread t, Throwable e) {
        System.err.println(String.format("Exception in thread %s", t.getName()));
        e.printStackTrace();
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getItem() != webcam) {
            if (webcam != null) {

                panel.stop();

                remove(panel);

                webcam.removeWebcamListener(this);
                webcam.close();

                webcam = (Webcam) e.getItem();
                webcam.setViewSize(WebcamResolution.VGA.getSize());
                webcam.addWebcamListener(this);

                //System.out.println("selected " + webcam.getName());
                panel = new WebcamPanel(webcam, false);
                panel.setFPSDisplayed(true);

                add(panel, BorderLayout.CENTER);
                pack();

                tWebcam = new Thread() {

                    @Override
                    public void run() {
                        panel.start();
                    }
                };
                tWebcam.setName("example-stoper");
                tWebcam.setDaemon(true);
                tWebcam.setUncaughtExceptionHandler(this);
                tWebcam.start();
            }
        }
    }

    @Override
    public void webcamFound(WebcamDiscoveryEvent event) {
        if (picker != null) {
            picker.addItem(event.getWebcam());
        }
    }

    @Override
    public void webcamGone(WebcamDiscoveryEvent event) {
        if (picker != null) {
            picker.removeItem(event.getWebcam());
        }
    }
}
